; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/loadsave.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BC@DLIN@Invalid?5save?5file?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @LoadGame@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _BLoad
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _WLoad
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ILoad
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _OLoad
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadPlayer@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadMonster@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadMissile@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadObject@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadItem@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadPremium@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadQuest@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadLighting@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadVision@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadPortal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SaveGame
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @BSave@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WSave@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ISave@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OSave@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SavePlayer@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SaveMonster@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SaveMissile@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SaveObject@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SaveItem@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SavePremium@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SaveQuest@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SaveLighting@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SaveVision@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SavePortal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SaveLevel
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _LoadLevel
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_tbuff:DWORD
_DATA	ENDS
PUBLIC	@LoadGame@4
PUBLIC	_BLoad
PUBLIC	_WLoad
PUBLIC	_ILoad
PUBLIC	_OLoad
PUBLIC	@LoadPlayer@4
PUBLIC	@LoadMonster@4
PUBLIC	@LoadMissile@4
PUBLIC	@LoadObject@4
PUBLIC	@LoadItem@4
PUBLIC	@LoadPremium@4
PUBLIC	@LoadQuest@4
PUBLIC	@LoadLighting@4
PUBLIC	@LoadVision@4
PUBLIC	@LoadPortal@4
PUBLIC	??_C@_0BC@DLIN@Invalid?5save?5file?$AA@		; `string'
EXTRN	_dFlags:BYTE
EXTRN	_dItem:BYTE
EXTRN	_setlvlnum:BYTE
EXTRN	_setlevel:BYTE
EXTRN	_ViewX:DWORD
EXTRN	_RedoPlayerVision:NEAR
EXTRN	_ViewY:DWORD
EXTRN	_dMissile:BYTE
EXTRN	@SyncPlrAnim@4:NEAR
EXTRN	@SyncInitPlr@4:NEAR
EXTRN	_lightactive:BYTE
EXTRN	_numlights:DWORD
EXTRN	_numvision:DWORD
EXTRN	_visionid:DWORD
EXTRN	@SetCursor_@4:NEAR
EXTRN	_gnLevelTypeTbl:BYTE
EXTRN	_glSeedTbl:BYTE
EXTRN	_gbProcessPlayers:DWORD
EXTRN	_FreeGameMem:NEAR
EXTRN	_ProcessLightList:NEAR
EXTRN	_ResyncQuests:NEAR
EXTRN	_ProcessVisionList:NEAR
EXTRN	@LoadGameLevel@8:NEAR
EXTRN	@SyncObjectAnim@4:NEAR
EXTRN	_invflag:DWORD
EXTRN	_ResetPal:NEAR
EXTRN	_missileactive:BYTE
EXTRN	_missileavail:BYTE
EXTRN	_nummissiles:DWORD
EXTRN	_itemactive:BYTE
EXTRN	_itemavail:BYTE
EXTRN	_UniqueItemFlag:BYTE
EXTRN	_numitems:DWORD
EXTRN	@pfile_get_game_name@4:NEAR
EXTRN	_pfile_remove_temp_files:NEAR
EXTRN	@pfile_read@8:NEAR
EXTRN	_myplr:DWORD
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	_objectactive:BYTE
EXTRN	_nobjects:DWORD
EXTRN	_objectavail:BYTE
EXTRN	_TermMsg:NEAR
EXTRN	_automapflag:DWORD
EXTRN	_automapview:BYTE
EXTRN	_AutoMapScale:DWORD
EXTRN	_AutomapZoomReset:NEAR
EXTRN	_premiumlevel:DWORD
EXTRN	_numpremium:DWORD
EXTRN	_missiles_process_charge:NEAR
EXTRN	_monstkills:BYTE
EXTRN	_monstactive:BYTE
EXTRN	_nummonsters:DWORD
EXTRN	_chrflag:DWORD
EXTRN	_dMonster:BYTE
EXTRN	_dObject:BYTE
EXTRN	_dDead:BYTE
EXTRN	_dTransVal2:BYTE
EXTRN	_dTransVal:BYTE
EXTRN	_leveltype:BYTE
EXTRN	_currlevel:BYTE
EXTRN	_dPlayer:BYTE
;	COMDAT ??_C@_0BC@DLIN@Invalid?5save?5file?$AA@
; File Source/loadsave.cpp
_DATA	SEGMENT
??_C@_0BC@DLIN@Invalid?5save?5file?$AA@ DB 'Invalid save file', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @LoadGame@4
_TEXT	SEGMENT
_firstflag$ = -8
_i$ = -4
_j$ = -4
_dwLen$ = -28
_szName$ = -288
_LoadBuff$ = -16
__numitems$ = -20
__nummissiles$ = -12
__nobjects$ = -24
@LoadGame@4 PROC NEAR					; COMDAT
; _firstflag$ = ecx
; Line 8
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	mov	DWORD PTR _firstflag$[ebp], ecx
; Line 15
	call	_FreeGameMem
; Line 16
	call	_pfile_remove_temp_files
; Line 17
	lea	ecx, DWORD PTR _szName$[ebp]
	call	@pfile_get_game_name@4
; Line 18
	lea	edx, DWORD PTR _dwLen$[ebp]
	lea	ecx, DWORD PTR _szName$[ebp]
	call	@pfile_read@8
	mov	DWORD PTR _LoadBuff$[ebp], eax
; Line 19
	mov	DWORD PTR _tbuff, eax
; Line 21
	call	_ILoad
	cmp	eax, 1380275276				; 5245544cH
	je	SHORT $L84996
; Line 22
	push	OFFSET FLAT:??_C@_0BC@DLIN@Invalid?5save?5file?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L84996:
	push	ebx
	push	esi
	push	edi
; Line 24
	call	_OLoad
	mov	BYTE PTR _setlevel, al
; Line 25
	call	_WLoad
	mov	BYTE PTR _setlvlnum, al
; Line 26
	call	_WLoad
	mov	BYTE PTR _currlevel, al
; Line 27
	call	_WLoad
	mov	BYTE PTR _leveltype, al
; Line 28
	call	_WLoad
	mov	esi, eax
; Line 29
	call	_WLoad
	mov	edi, eax
; Line 30
	call	_OLoad
	mov	DWORD PTR _invflag, eax
; Line 31
	call	_OLoad
	mov	DWORD PTR _chrflag, eax
; Line 32
	call	_WLoad
	mov	ebx, eax
; Line 33
	call	_WLoad
	mov	DWORD PTR __numitems$[ebp], eax
; Line 34
	call	_WLoad
	mov	DWORD PTR __nummissiles$[ebp], eax
; Line 35
	call	_WLoad
; Line 37
	and	DWORD PTR -4+[ebp], 0
	mov	DWORD PTR __nobjects$[ebp], eax
$L84998:
; Line 38
	call	_ILoad
	mov	ecx, DWORD PTR -4+[ebp]
	mov	DWORD PTR _glSeedTbl[ecx], eax
; Line 39
	call	_WLoad
	mov	ecx, DWORD PTR -4+[ebp]
	add	DWORD PTR -4+[ebp], 4
	cmp	DWORD PTR -4+[ebp], 68			; 00000044H
	mov	DWORD PTR _gnLevelTypeTbl[ecx], eax
	jl	SHORT $L84998
; Line 42
	mov	ecx, DWORD PTR _myplr
	call	@LoadPlayer@4
; Line 44
	and	DWORD PTR _i$[ebp], 0
$L85001:
; Line 45
	mov	ecx, DWORD PTR _i$[ebp]
	call	@LoadQuest@4
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jl	SHORT $L85001
; Line 46
	and	DWORD PTR _i$[ebp], 0
$L85004:
; Line 47
	mov	ecx, DWORD PTR _i$[ebp]
	call	@LoadPortal@4
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 4
	jl	SHORT $L85004
; Line 49
	mov	ecx, DWORD PTR _firstflag$[ebp]
	push	4
	pop	edx
	call	@LoadGameLevel@8
; Line 50
	mov	ecx, DWORD PTR _myplr
	call	@SyncInitPlr@4
; Line 51
	mov	ecx, DWORD PTR _myplr
	call	@SyncPlrAnim@4
; Line 56
	mov	eax, DWORD PTR __numitems$[ebp]
	mov	DWORD PTR _ViewX, esi
	mov	DWORD PTR _numitems, eax
; Line 57
	mov	eax, DWORD PTR __nummissiles$[ebp]
	mov	DWORD PTR _nummissiles, eax
; Line 58
	mov	eax, DWORD PTR __nobjects$[ebp]
	push	4
	mov	DWORD PTR _ViewY, edi
	mov	DWORD PTR _nummonsters, ebx
	mov	DWORD PTR _nobjects, eax
	mov	esi, OFFSET FLAT:_monstkills
	pop	edi
$L85007:
; Line 61
	call	_ILoad
	mov	DWORD PTR [esi], eax
	add	esi, edi
	cmp	esi, OFFSET FLAT:_monstkills+800
	jl	SHORT $L85007
; Line 63
	cmp	BYTE PTR _leveltype, 0
	je	$L85047
; Line 64
	mov	esi, OFFSET FLAT:_monstactive
$L85011:
; Line 65
	call	_WLoad
	mov	DWORD PTR [esi], eax
	add	esi, edi
	cmp	esi, OFFSET FLAT:_monstactive+800
	jl	SHORT $L85011
; Line 66
	xor	esi, esi
	cmp	DWORD PTR _nummonsters, esi
	jle	SHORT $L85016
$L85014:
; Line 67
	mov	ecx, DWORD PTR _monstactive[esi*4]
	call	@LoadMonster@4
	inc	esi
	cmp	esi, DWORD PTR _nummonsters
	jl	SHORT $L85014
$L85016:
; Line 68
	mov	esi, OFFSET FLAT:_missileactive
$L85017:
; Line 69
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [esi], eax
	add	esi, edi
	cmp	esi, OFFSET FLAT:_missileactive+500
	jl	SHORT $L85017
; Line 70
	mov	esi, OFFSET FLAT:_missileavail
$L85020:
; Line 71
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [esi], eax
	add	esi, edi
	cmp	esi, OFFSET FLAT:_missileavail+500
	jl	SHORT $L85020
; Line 72
	xor	esi, esi
	cmp	DWORD PTR _nummissiles, esi
	jle	SHORT $L85025
$L85023:
; Line 73
	mov	ecx, DWORD PTR _missileactive[esi*4]
	call	@LoadMissile@4
	inc	esi
	cmp	esi, DWORD PTR _nummissiles
	jl	SHORT $L85023
$L85025:
; Line 74
	mov	esi, OFFSET FLAT:_objectactive
$L85026:
; Line 75
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [esi], eax
	add	esi, edi
	cmp	esi, OFFSET FLAT:_objectactive+508
	jl	SHORT $L85026
; Line 76
	mov	esi, OFFSET FLAT:_objectavail
$L85029:
; Line 77
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [esi], eax
	add	esi, edi
	cmp	esi, OFFSET FLAT:_objectavail+508
	jl	SHORT $L85029
; Line 78
	xor	esi, esi
	cmp	DWORD PTR _nobjects, esi
	jle	SHORT $L85034
$L85032:
; Line 79
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@LoadObject@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85032
$L85034:
; Line 80
	xor	esi, esi
	cmp	DWORD PTR _nobjects, esi
	jle	SHORT $L85037
$L85035:
; Line 81
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@SyncObjectAnim@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85035
$L85037:
; Line 83
	call	_WLoad
	mov	DWORD PTR _numlights, eax
; Line 85
	xor	esi, esi
$L85038:
; Line 86
	call	_BLoad
	mov	BYTE PTR _lightactive[esi], al
	inc	esi
	cmp	esi, 32					; 00000020H
	jl	SHORT $L85038
; Line 87
	xor	esi, esi
	cmp	DWORD PTR _numlights, esi
	jle	SHORT $L85043
$L85041:
; Line 88
	movzx	ecx, BYTE PTR _lightactive[esi]
	call	@LoadLighting@4
	inc	esi
	cmp	esi, DWORD PTR _numlights
	jl	SHORT $L85041
$L85043:
; Line 90
	call	_WLoad
	mov	DWORD PTR _visionid, eax
; Line 91
	call	_WLoad
; Line 93
	xor	esi, esi
	mov	DWORD PTR _numvision, eax
	test	eax, eax
	jle	SHORT $L85047
$L85045:
; Line 94
	mov	ecx, esi
	call	@LoadVision@4
	inc	esi
	cmp	esi, DWORD PTR _numvision
	jl	SHORT $L85045
$L85047:
; Line 97
	mov	esi, OFFSET FLAT:_itemactive
$L85048:
; Line 98
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [esi], eax
	add	esi, edi
	cmp	esi, OFFSET FLAT:_itemactive+508
	jl	SHORT $L85048
; Line 99
	mov	esi, OFFSET FLAT:_itemavail
$L85051:
; Line 100
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [esi], eax
	add	esi, edi
	cmp	esi, OFFSET FLAT:_itemavail+508
	jl	SHORT $L85051
; Line 101
	xor	esi, esi
	cmp	DWORD PTR _numitems, esi
	jle	SHORT $L85056
$L85054:
; Line 102
	mov	ecx, DWORD PTR _itemactive[esi*4]
	call	@LoadItem@4
	inc	esi
	cmp	esi, DWORD PTR _numitems
	jl	SHORT $L85054
$L85056:
; Line 103
	mov	esi, OFFSET FLAT:_UniqueItemFlag
$L85057:
; Line 104
	call	_OLoad
	mov	DWORD PTR [esi], eax
	add	esi, edi
	cmp	esi, OFFSET FLAT:_UniqueItemFlag+512
	jl	SHORT $L85057
; Line 106
	and	DWORD PTR _j$[ebp], 0
	push	112					; 00000070H
	pop	esi
$L85060:
; Line 107
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], esi
	lea	edi, DWORD PTR _dTransVal[eax]
$L85063:
; Line 108
	call	_BLoad
	mov	BYTE PTR [edi], al
	add	edi, esi
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85063
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], esi
	jl	SHORT $L85060
; Line 110
	and	DWORD PTR _j$[ebp], 0
$L85066:
; Line 111
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], esi
	lea	edi, DWORD PTR _dFlags[eax]
$L85069:
; Line 112
	call	_BLoad
	mov	BYTE PTR [edi], al
	add	edi, esi
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85069
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], esi
	jl	SHORT $L85066
; Line 114
	and	DWORD PTR _j$[ebp], 0
$L85072:
; Line 115
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], esi
	lea	edi, DWORD PTR _dPlayer[eax]
$L85075:
; Line 116
	call	_BLoad
	mov	BYTE PTR [edi], al
	add	edi, esi
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85075
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], esi
	jl	SHORT $L85072
; Line 118
	and	DWORD PTR _j$[ebp], 0
$L85078:
; Line 119
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], esi
	lea	edi, DWORD PTR _dItem[eax]
$L85081:
; Line 120
	call	_BLoad
	mov	BYTE PTR [edi], al
	add	edi, esi
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85081
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], esi
	jl	SHORT $L85078
; Line 123
	cmp	BYTE PTR _leveltype, 0
	je	$L85123
; Line 124
	mov	ebx, OFFSET FLAT:_dMonster
$L85085:
; Line 125
	mov	edi, ebx
	mov	DWORD PTR -8+[ebp], esi
$L85088:
; Line 126
	call	_WLoad
	mov	DWORD PTR [edi], eax
	add	edi, 448				; 000001c0H
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85088
	add	ebx, 4
	cmp	ebx, OFFSET FLAT:_dMonster+448
	jl	SHORT $L85085
; Line 128
	and	DWORD PTR _j$[ebp], 0
$L85091:
; Line 129
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], esi
	lea	edi, DWORD PTR _dDead[eax]
$L85094:
; Line 130
	call	_BLoad
	mov	BYTE PTR [edi], al
	add	edi, esi
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85094
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], esi
	jl	SHORT $L85091
; Line 132
	and	DWORD PTR _j$[ebp], 0
$L85097:
; Line 133
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], esi
	lea	edi, DWORD PTR _dObject[eax]
$L85100:
; Line 134
	call	_BLoad
	mov	BYTE PTR [edi], al
	add	edi, esi
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85100
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], esi
	jl	SHORT $L85097
; Line 136
	and	DWORD PTR _j$[ebp], 0
$L85103:
; Line 137
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], esi
	lea	edi, DWORD PTR _dTransVal[eax]
$L85106:
; Line 138
	call	_BLoad
	mov	BYTE PTR [edi], al
	add	edi, esi
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85106
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], esi
	jl	SHORT $L85103
; Line 140
	and	DWORD PTR _j$[ebp], 0
$L85109:
; Line 141
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], esi
	lea	edi, DWORD PTR _dTransVal2[eax]
$L85112:
; Line 142
	call	_BLoad
	mov	BYTE PTR [edi], al
	add	edi, esi
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85112
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], esi
	jl	SHORT $L85109
; Line 144
	xor	ebx, ebx
$L85115:
; Line 145
	lea	edi, DWORD PTR _automapview[ebx]
	mov	DWORD PTR -8+[ebp], 40			; 00000028H
$L85118:
; Line 146
	call	_OLoad
	mov	BYTE PTR [edi], al
	add	edi, 40					; 00000028H
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85118
	inc	ebx
	cmp	ebx, 40					; 00000028H
	jl	SHORT $L85115
; Line 148
	and	DWORD PTR _j$[ebp], 0
$L85121:
; Line 149
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], esi
	lea	edi, DWORD PTR _dMissile[eax]
$L85124:
; Line 150
	call	_BLoad
	mov	BYTE PTR [edi], al
	add	edi, esi
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85124
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], esi
	jl	SHORT $L85121
$L85123:
; Line 154
	call	_WLoad
	mov	DWORD PTR _numpremium, eax
; Line 155
	call	_WLoad
	mov	DWORD PTR _premiumlevel, eax
; Line 157
	xor	esi, esi
$L85127:
; Line 158
	mov	ecx, esi
	call	@LoadPremium@4
	inc	esi
	cmp	esi, 6
	jl	SHORT $L85127
; Line 160
	call	_OLoad
	mov	DWORD PTR _automapflag, eax
; Line 161
	call	_WLoad
; Line 162
	mov	ecx, DWORD PTR _LoadBuff$[ebp]
	mov	DWORD PTR _AutoMapScale, eax
	call	@mem_free_dbg@4
; Line 163
	call	_AutomapZoomReset
; Line 164
	call	_ResyncQuests
; Line 166
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85130
; Line 167
	call	_ProcessLightList
$L85130:
; Line 169
	call	_RedoPlayerVision
; Line 170
	call	_ProcessVisionList
; Line 171
	call	_missiles_process_charge
; Line 172
	call	_ResetPal
; Line 173
	xor	esi, esi
	inc	esi
	mov	ecx, esi
	call	@SetCursor_@4
; Line 174
	mov	DWORD PTR _gbProcessPlayers, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 175
	leave
	ret	0
@LoadGame@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _BLoad
_TEXT	SEGMENT
_BLoad	PROC NEAR					; COMDAT
; Line 180
	mov	eax, DWORD PTR _tbuff
	mov	al, BYTE PTR [eax]
	inc	DWORD PTR _tbuff
; Line 181
	ret	0
_BLoad	ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _WLoad
_TEXT	SEGMENT
_WLoad	PROC NEAR					; COMDAT
; Line 185
	mov	ecx, DWORD PTR _tbuff
	movzx	eax, BYTE PTR [ecx]
	shl	eax, 24					; 00000018H
	inc	ecx
	mov	DWORD PTR _tbuff, ecx
; Line 186
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	inc	ecx
; Line 187
	xor	edx, edx
	mov	DWORD PTR _tbuff, ecx
	mov	dh, BYTE PTR [ecx]
	or	eax, edx
	inc	ecx
	mov	DWORD PTR _tbuff, ecx
; Line 188
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	inc	ecx
	mov	DWORD PTR _tbuff, ecx
; Line 191
	ret	0
_WLoad	ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _ILoad
_TEXT	SEGMENT
_ILoad	PROC NEAR					; COMDAT
; Line 195
	mov	ecx, DWORD PTR _tbuff
	movzx	eax, BYTE PTR [ecx]
	shl	eax, 24					; 00000018H
	inc	ecx
	mov	DWORD PTR _tbuff, ecx
; Line 196
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	inc	ecx
; Line 197
	xor	edx, edx
	mov	DWORD PTR _tbuff, ecx
	mov	dh, BYTE PTR [ecx]
	or	eax, edx
	inc	ecx
	mov	DWORD PTR _tbuff, ecx
; Line 198
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	inc	ecx
	mov	DWORD PTR _tbuff, ecx
; Line 201
	ret	0
_ILoad	ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _OLoad
_TEXT	SEGMENT
_OLoad	PROC NEAR					; COMDAT
; Line 205
	mov	eax, DWORD PTR _tbuff
	mov	cl, BYTE PTR [eax]
	inc	DWORD PTR _tbuff
	xor	eax, eax
	inc	eax
	cmp	cl, al
; Line 206
	je	SHORT $L85138
; Line 208
	xor	eax, eax
$L85138:
; Line 209
	ret	0
_OLoad	ENDP
_TEXT	ENDS
EXTRN	_plr:BYTE
EXTRN	_memcpy:NEAR
; Function compile flags: /Ogsy
;	COMDAT @LoadPlayer@4
_TEXT	SEGMENT
@LoadPlayer@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 213
	imul	ecx, 21720				; 000054d8H
	push	esi
	mov	esi, 21680				; 000054b0H
	push	esi
	add	ecx, OFFSET FLAT:_plr
	push	DWORD PTR _tbuff
	push	ecx
	call	_memcpy
; Line 214
	add	DWORD PTR _tbuff, esi
	add	esp, 12					; 0000000cH
	pop	esi
; Line 215
	ret	0
@LoadPlayer@4 ENDP
_TEXT	ENDS
EXTRN	@SyncMonsterAnim@4:NEAR
EXTRN	_monster:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadMonster@4
_TEXT	SEGMENT
@LoadMonster@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 218
	push	esi
	push	edi
	mov	edi, ecx
; Line 219
	mov	esi, 216				; 000000d8H
	mov	eax, edi
	push	esi
	imul	eax, 228				; 000000e4H
	push	DWORD PTR _tbuff
	add	eax, OFFSET FLAT:_monster
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 220
	add	DWORD PTR _tbuff, esi
; Line 221
	mov	ecx, edi
	pop	edi
	pop	esi
	jmp	@SyncMonsterAnim@4
@LoadMonster@4 ENDP
_TEXT	ENDS
EXTRN	_missile:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadMissile@4
_TEXT	SEGMENT
@LoadMissile@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 226
	imul	ecx, 176				; 000000b0H
	push	esi
	mov	esi, 176				; 000000b0H
	push	esi
	add	ecx, OFFSET FLAT:_missile
	push	DWORD PTR _tbuff
	push	ecx
	call	_memcpy
; Line 227
	add	DWORD PTR _tbuff, esi
	add	esp, 12					; 0000000cH
	pop	esi
; Line 228
	ret	0
@LoadMissile@4 ENDP
_TEXT	ENDS
EXTRN	_object:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadObject@4
_TEXT	SEGMENT
@LoadObject@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 232
	imul	ecx, 120				; 00000078H
	push	120					; 00000078H
	add	ecx, OFFSET FLAT:_object
	push	DWORD PTR _tbuff
	push	ecx
	call	_memcpy
; Line 233
	add	DWORD PTR _tbuff, 120			; 00000078H
	add	esp, 12					; 0000000cH
; Line 234
	ret	0
@LoadObject@4 ENDP
_TEXT	ENDS
EXTRN	_item:BYTE
EXTRN	@GetItemFrm@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @LoadItem@4
_TEXT	SEGMENT
@LoadItem@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 237
	push	esi
	push	edi
	mov	edi, ecx
; Line 238
	mov	esi, 368				; 00000170H
	mov	eax, edi
	push	esi
	imul	eax, 368				; 00000170H
	push	DWORD PTR _tbuff
	add	eax, OFFSET FLAT:_item
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 239
	add	DWORD PTR _tbuff, esi
; Line 240
	mov	ecx, edi
	pop	edi
	pop	esi
	jmp	@GetItemFrm@4
@LoadItem@4 ENDP
_TEXT	ENDS
EXTRN	_premiumitem:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadPremium@4
_TEXT	SEGMENT
@LoadPremium@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 245
	imul	ecx, 368				; 00000170H
	push	esi
	mov	esi, 368				; 00000170H
	push	esi
	add	ecx, OFFSET FLAT:_premiumitem
	push	DWORD PTR _tbuff
	push	ecx
	call	_memcpy
; Line 246
	add	DWORD PTR _tbuff, esi
	add	esp, 12					; 0000000cH
	pop	esi
; Line 247
	ret	0
@LoadPremium@4 ENDP
_TEXT	ENDS
EXTRN	_quests:BYTE
EXTRN	_ReturnLvlY:DWORD
EXTRN	_ReturnLvlX:DWORD
EXTRN	_ReturnLvlT:DWORD
EXTRN	_ReturnLvl:DWORD
EXTRN	_DoomQuestState:DWORD
; Function compile flags: /Ogsy
;	COMDAT @LoadQuest@4
_TEXT	SEGMENT
@LoadQuest@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 251
	push	24					; 00000018H
	lea	eax, DWORD PTR [ecx+ecx*2]
	push	DWORD PTR _tbuff
	lea	eax, DWORD PTR _quests[eax*8]
	push	eax
	call	_memcpy
; Line 252
	add	DWORD PTR _tbuff, 24			; 00000018H
	add	esp, 12					; 0000000cH
; Line 253
	call	_WLoad
	mov	DWORD PTR _ReturnLvlX, eax
; Line 254
	call	_WLoad
	mov	DWORD PTR _ReturnLvlY, eax
; Line 255
	call	_WLoad
	mov	DWORD PTR _ReturnLvl, eax
; Line 256
	call	_WLoad
	mov	DWORD PTR _ReturnLvlT, eax
; Line 257
	call	_WLoad
	mov	DWORD PTR _DoomQuestState, eax
; Line 258
	ret	0
@LoadQuest@4 ENDP
_TEXT	ENDS
EXTRN	_LightList:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadLighting@4
_TEXT	SEGMENT
@LoadLighting@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 262
	imul	ecx, 52					; 00000034H
	push	52					; 00000034H
	add	ecx, OFFSET FLAT:_LightList
	push	DWORD PTR _tbuff
	push	ecx
	call	_memcpy
; Line 263
	add	DWORD PTR _tbuff, 52			; 00000034H
	add	esp, 12					; 0000000cH
; Line 264
	ret	0
@LoadLighting@4 ENDP
_TEXT	ENDS
EXTRN	_VisionList:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadVision@4
_TEXT	SEGMENT
@LoadVision@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 268
	imul	ecx, 52					; 00000034H
	push	52					; 00000034H
	add	ecx, OFFSET FLAT:_VisionList
	push	DWORD PTR _tbuff
	push	ecx
	call	_memcpy
; Line 269
	add	DWORD PTR _tbuff, 52			; 00000034H
	add	esp, 12					; 0000000cH
; Line 270
	ret	0
@LoadVision@4 ENDP
_TEXT	ENDS
EXTRN	_portal:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadPortal@4
_TEXT	SEGMENT
@LoadPortal@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 274
	push	24					; 00000018H
	lea	eax, DWORD PTR [ecx+ecx*2]
	push	DWORD PTR _tbuff
	lea	eax, DWORD PTR _portal[eax*8]
	push	eax
	call	_memcpy
; Line 275
	add	DWORD PTR _tbuff, 24			; 00000018H
	add	esp, 12					; 0000000cH
; Line 276
	ret	0
@LoadPortal@4 ENDP
_TEXT	ENDS
PUBLIC	_SaveGame
PUBLIC	@BSave@4
PUBLIC	@WSave@4
PUBLIC	@ISave@4
PUBLIC	@OSave@4
PUBLIC	@SavePlayer@4
PUBLIC	@SaveMonster@4
PUBLIC	@SaveMissile@4
PUBLIC	@SaveObject@4
PUBLIC	@SaveItem@4
PUBLIC	@SavePremium@4
PUBLIC	@SaveQuest@4
PUBLIC	@SaveLighting@4
PUBLIC	@SaveVision@4
PUBLIC	@SavePortal@4
EXTRN	_gbValidSaveFile:DWORD
EXTRN	_pfile_write_hero:NEAR
EXTRN	_pfile_rename_temp_to_perm:NEAR
EXTRN	@pfile_write_save_file@16:NEAR
EXTRN	@DiabloAllocPtr@4:NEAR
EXTRN	@codec_get_encoded_len@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SaveGame
_TEXT	SEGMENT
_szName$ = -268
_SaveBuff$ = -8
_SaveGame PROC NEAR					; COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
; Line 283
	mov	ecx, 262147				; 00040003H
	call	@codec_get_encoded_len@4
; Line 284
	mov	ecx, eax
	call	@DiabloAllocPtr@4
; Line 287
	mov	ecx, 1380275276				; 5245544cH
	mov	DWORD PTR _SaveBuff$[ebp], eax
	mov	DWORD PTR _tbuff, eax
	call	@ISave@4
; Line 288
	movzx	ecx, BYTE PTR _setlevel
	call	@OSave@4
; Line 289
	movzx	ecx, BYTE PTR _setlvlnum
	call	@WSave@4
; Line 290
	movzx	ecx, BYTE PTR _currlevel
	call	@WSave@4
; Line 291
	movzx	ecx, BYTE PTR _leveltype
	call	@WSave@4
; Line 292
	mov	ecx, DWORD PTR _ViewX
	call	@WSave@4
; Line 293
	mov	ecx, DWORD PTR _ViewY
	call	@WSave@4
; Line 294
	mov	ecx, DWORD PTR _invflag
	call	@OSave@4
; Line 295
	mov	ecx, DWORD PTR _chrflag
	call	@OSave@4
; Line 296
	mov	ecx, DWORD PTR _nummonsters
	call	@WSave@4
; Line 297
	mov	ecx, DWORD PTR _numitems
	call	@WSave@4
; Line 298
	mov	ecx, DWORD PTR _nummissiles
	call	@WSave@4
; Line 299
	mov	ecx, DWORD PTR _nobjects
	call	@WSave@4
; Line 301
	xor	ebx, ebx
	xor	esi, esi
$L85181:
; Line 302
	mov	ecx, DWORD PTR _glSeedTbl[esi]
	call	@ISave@4
; Line 303
	mov	ecx, DWORD PTR _gnLevelTypeTbl[esi]
	call	@WSave@4
	add	esi, 4
	cmp	esi, 68					; 00000044H
	jl	SHORT $L85181
; Line 306
	mov	ecx, DWORD PTR _myplr
	call	@SavePlayer@4
; Line 308
	xor	esi, esi
$L85184:
; Line 309
	mov	ecx, esi
	call	@SaveQuest@4
	inc	esi
	cmp	esi, 16					; 00000010H
	jl	SHORT $L85184
; Line 310
	xor	esi, esi
$L85187:
; Line 311
	mov	ecx, esi
	call	@SavePortal@4
	inc	esi
	cmp	esi, 4
	jl	SHORT $L85187
; Line 312
	mov	esi, OFFSET FLAT:_monstkills
$L85190:
; Line 313
	mov	ecx, DWORD PTR [esi]
	call	@ISave@4
	add	esi, 4
	cmp	esi, OFFSET FLAT:_monstkills+800
	jl	SHORT $L85190
; Line 315
	cmp	BYTE PTR _leveltype, 0
	je	$L85227
; Line 316
	mov	esi, OFFSET FLAT:_monstactive
$L85194:
; Line 317
	mov	ecx, DWORD PTR [esi]
	call	@WSave@4
	add	esi, 4
	cmp	esi, OFFSET FLAT:_monstactive+800
	jl	SHORT $L85194
; Line 318
	xor	esi, esi
	cmp	DWORD PTR _nummonsters, ebx
	jle	SHORT $L85199
$L85197:
; Line 319
	mov	ecx, DWORD PTR _monstactive[esi*4]
	call	@SaveMonster@4
	inc	esi
	cmp	esi, DWORD PTR _nummonsters
	jl	SHORT $L85197
$L85199:
; Line 320
	mov	esi, OFFSET FLAT:_missileactive
$L85200:
; Line 321
	mov	cl, BYTE PTR [esi]
	call	@BSave@4
	add	esi, 4
	cmp	esi, OFFSET FLAT:_missileactive+500
	jl	SHORT $L85200
; Line 322
	mov	esi, OFFSET FLAT:_missileavail
$L85203:
; Line 323
	mov	cl, BYTE PTR [esi]
	call	@BSave@4
	add	esi, 4
	cmp	esi, OFFSET FLAT:_missileavail+500
	jl	SHORT $L85203
; Line 324
	xor	esi, esi
	cmp	DWORD PTR _nummissiles, ebx
	jle	SHORT $L85208
$L85206:
; Line 325
	mov	ecx, DWORD PTR _missileactive[esi*4]
	call	@SaveMissile@4
	inc	esi
	cmp	esi, DWORD PTR _nummissiles
	jl	SHORT $L85206
$L85208:
; Line 326
	mov	esi, OFFSET FLAT:_objectactive
$L85209:
; Line 327
	mov	cl, BYTE PTR [esi]
	call	@BSave@4
	add	esi, 4
	cmp	esi, OFFSET FLAT:_objectactive+508
	jl	SHORT $L85209
; Line 328
	mov	esi, OFFSET FLAT:_objectavail
$L85212:
; Line 329
	mov	cl, BYTE PTR [esi]
	call	@BSave@4
	add	esi, 4
	cmp	esi, OFFSET FLAT:_objectavail+508
	jl	SHORT $L85212
; Line 330
	xor	esi, esi
	cmp	DWORD PTR _nobjects, ebx
	jle	SHORT $L85217
$L85215:
; Line 331
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@SaveObject@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85215
$L85217:
; Line 333
	mov	ecx, DWORD PTR _numlights
	call	@WSave@4
; Line 335
	xor	esi, esi
$L85218:
; Line 336
	mov	cl, BYTE PTR _lightactive[esi]
	call	@BSave@4
	inc	esi
	cmp	esi, 32					; 00000020H
	jl	SHORT $L85218
; Line 337
	xor	esi, esi
	cmp	DWORD PTR _numlights, ebx
	jle	SHORT $L85223
$L85221:
; Line 338
	movzx	ecx, BYTE PTR _lightactive[esi]
	call	@SaveLighting@4
	inc	esi
	cmp	esi, DWORD PTR _numlights
	jl	SHORT $L85221
$L85223:
; Line 340
	mov	ecx, DWORD PTR _visionid
	call	@WSave@4
; Line 341
	mov	ecx, DWORD PTR _numvision
	call	@WSave@4
; Line 343
	xor	esi, esi
	cmp	DWORD PTR _numvision, ebx
	jle	SHORT $L85227
$L85225:
; Line 344
	mov	ecx, esi
	call	@SaveVision@4
	inc	esi
	cmp	esi, DWORD PTR _numvision
	jl	SHORT $L85225
$L85227:
; Line 347
	mov	esi, OFFSET FLAT:_itemactive
$L85228:
; Line 348
	mov	cl, BYTE PTR [esi]
	call	@BSave@4
	add	esi, 4
	cmp	esi, OFFSET FLAT:_itemactive+508
	jl	SHORT $L85228
; Line 349
	mov	esi, OFFSET FLAT:_itemavail
$L85231:
; Line 350
	mov	cl, BYTE PTR [esi]
	call	@BSave@4
	add	esi, 4
	cmp	esi, OFFSET FLAT:_itemavail+508
	jl	SHORT $L85231
; Line 351
	xor	esi, esi
	cmp	DWORD PTR _numitems, ebx
	jle	SHORT $L85236
$L85234:
; Line 352
	mov	ecx, DWORD PTR _itemactive[esi*4]
	call	@SaveItem@4
	inc	esi
	cmp	esi, DWORD PTR _numitems
	jl	SHORT $L85234
$L85236:
; Line 353
	mov	esi, OFFSET FLAT:_UniqueItemFlag
$L85237:
; Line 354
	mov	ecx, DWORD PTR [esi]
	call	@OSave@4
	add	esi, 4
	cmp	esi, OFFSET FLAT:_UniqueItemFlag+512
	jl	SHORT $L85237
; Line 356
	push	112					; 00000070H
	pop	esi
$L85240:
; Line 357
	lea	edi, DWORD PTR _dTransVal[ebx]
	mov	DWORD PTR -4+[ebp], esi
$L85243:
; Line 358
	mov	cl, BYTE PTR [edi]
	call	@BSave@4
	add	edi, esi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85243
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $L85240
; Line 360
	xor	ebx, ebx
$L85246:
; Line 361
	lea	edi, DWORD PTR _dFlags[ebx]
	mov	DWORD PTR -4+[ebp], esi
$L85249:
; Line 362
	mov	cl, BYTE PTR [edi]
	and	cl, -8					; fffffff8H
	call	@BSave@4
	add	edi, esi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85249
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $L85246
; Line 364
	xor	ebx, ebx
$L85252:
; Line 365
	lea	edi, DWORD PTR _dPlayer[ebx]
	mov	DWORD PTR -4+[ebp], esi
$L85255:
; Line 366
	mov	cl, BYTE PTR [edi]
	call	@BSave@4
	add	edi, esi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85255
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $L85252
; Line 368
	xor	ebx, ebx
$L85258:
; Line 369
	lea	edi, DWORD PTR _dItem[ebx]
	mov	DWORD PTR -4+[ebp], esi
$L85261:
; Line 370
	mov	cl, BYTE PTR [edi]
	call	@BSave@4
	add	edi, esi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85261
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $L85258
; Line 373
	cmp	BYTE PTR _leveltype, 0
	je	$L85303
; Line 374
	mov	ebx, OFFSET FLAT:_dMonster
$L85265:
; Line 375
	mov	edi, ebx
	mov	DWORD PTR -4+[ebp], esi
$L85268:
; Line 376
	mov	ecx, DWORD PTR [edi]
	call	@WSave@4
	add	edi, 448				; 000001c0H
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85268
	add	ebx, 4
	cmp	ebx, OFFSET FLAT:_dMonster+448
	jl	SHORT $L85265
; Line 378
	xor	ebx, ebx
$L85271:
; Line 379
	lea	edi, DWORD PTR _dDead[ebx]
	mov	DWORD PTR -4+[ebp], esi
$L85274:
; Line 380
	mov	cl, BYTE PTR [edi]
	call	@BSave@4
	add	edi, esi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85274
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $L85271
; Line 382
	xor	ebx, ebx
$L85277:
; Line 383
	lea	edi, DWORD PTR _dObject[ebx]
	mov	DWORD PTR -4+[ebp], esi
$L85280:
; Line 384
	mov	cl, BYTE PTR [edi]
	call	@BSave@4
	add	edi, esi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85280
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $L85277
; Line 386
	xor	ebx, ebx
$L85283:
; Line 387
	lea	edi, DWORD PTR _dTransVal[ebx]
	mov	DWORD PTR -4+[ebp], esi
$L85286:
; Line 388
	mov	cl, BYTE PTR [edi]
	call	@BSave@4
	add	edi, esi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85286
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $L85283
; Line 390
	xor	ebx, ebx
$L85289:
; Line 391
	lea	edi, DWORD PTR _dTransVal2[ebx]
	mov	DWORD PTR -4+[ebp], esi
$L85292:
; Line 392
	mov	cl, BYTE PTR [edi]
	call	@BSave@4
	add	edi, esi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85292
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $L85289
; Line 394
	xor	ebx, ebx
$L85295:
; Line 395
	lea	edi, DWORD PTR _automapview[ebx]
	mov	DWORD PTR -4+[ebp], 40			; 00000028H
$L85298:
; Line 396
	movzx	ecx, BYTE PTR [edi]
	call	@OSave@4
	add	edi, 40					; 00000028H
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85298
	inc	ebx
	cmp	ebx, 40					; 00000028H
	jl	SHORT $L85295
; Line 398
	xor	ebx, ebx
$L85301:
; Line 399
	lea	edi, DWORD PTR _dMissile[ebx]
	mov	DWORD PTR -4+[ebp], esi
$L85304:
; Line 400
	mov	cl, BYTE PTR [edi]
	call	@BSave@4
	add	edi, esi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85304
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $L85301
$L85303:
; Line 404
	mov	ecx, DWORD PTR _numpremium
	call	@WSave@4
; Line 405
	mov	ecx, DWORD PTR _premiumlevel
	call	@WSave@4
; Line 407
	xor	esi, esi
$L85307:
; Line 408
	mov	ecx, esi
	call	@SavePremium@4
	inc	esi
	cmp	esi, 6
	jl	SHORT $L85307
; Line 410
	mov	ecx, DWORD PTR _automapflag
	call	@OSave@4
; Line 411
	mov	ecx, DWORD PTR _AutoMapScale
	call	@WSave@4
; Line 412
	lea	ecx, DWORD PTR _szName$[ebp]
	call	@pfile_get_game_name@4
; Line 413
	mov	ecx, DWORD PTR _tbuff
	mov	esi, DWORD PTR _SaveBuff$[ebp]
	sub	ecx, esi
	call	@codec_get_encoded_len@4
; Line 414
	push	eax
	mov	eax, DWORD PTR _tbuff
	sub	eax, esi
	mov	edx, esi
	push	eax
	lea	ecx, DWORD PTR _szName$[ebp]
	call	@pfile_write_save_file@16
; Line 415
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 416
	mov	DWORD PTR _gbValidSaveFile, 1
; Line 417
	call	_pfile_rename_temp_to_perm
; Line 418
	call	_pfile_write_hero
	pop	edi
	pop	esi
	pop	ebx
; Line 419
	leave
	ret	0
_SaveGame ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @BSave@4
_TEXT	SEGMENT
@BSave@4 PROC NEAR					; COMDAT
; _v$ = cl
; Line 424
	mov	eax, DWORD PTR _tbuff
	mov	BYTE PTR [eax], cl
	inc	DWORD PTR _tbuff
; Line 425
	ret	0
@BSave@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @WSave@4
_TEXT	SEGMENT
@WSave@4 PROC NEAR					; COMDAT
; _v$ = ecx
; Line 429
	mov	edx, DWORD PTR _tbuff
	mov	eax, ecx
	sar	eax, 24					; 00000018H
	mov	BYTE PTR [edx], al
	inc	DWORD PTR _tbuff
; Line 430
	mov	edx, DWORD PTR _tbuff
	mov	eax, ecx
	sar	eax, 16					; 00000010H
	mov	BYTE PTR [edx], al
	inc	DWORD PTR _tbuff
; Line 431
	mov	edx, DWORD PTR _tbuff
	mov	eax, ecx
	sar	eax, 8
	mov	BYTE PTR [edx], al
	inc	DWORD PTR _tbuff
; Line 432
	mov	eax, DWORD PTR _tbuff
	mov	BYTE PTR [eax], cl
	inc	DWORD PTR _tbuff
; Line 433
	ret	0
@WSave@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @ISave@4
_TEXT	SEGMENT
@ISave@4 PROC NEAR					; COMDAT
; _v$ = ecx
; Line 437
	mov	edx, DWORD PTR _tbuff
	mov	eax, ecx
	sar	eax, 24					; 00000018H
	mov	BYTE PTR [edx], al
	inc	DWORD PTR _tbuff
; Line 438
	mov	edx, DWORD PTR _tbuff
	mov	eax, ecx
	sar	eax, 16					; 00000010H
	mov	BYTE PTR [edx], al
	inc	DWORD PTR _tbuff
; Line 439
	mov	edx, DWORD PTR _tbuff
	mov	eax, ecx
	sar	eax, 8
	mov	BYTE PTR [edx], al
	inc	DWORD PTR _tbuff
; Line 440
	mov	eax, DWORD PTR _tbuff
	mov	BYTE PTR [eax], cl
	inc	DWORD PTR _tbuff
; Line 441
	ret	0
@ISave@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @OSave@4
_TEXT	SEGMENT
@OSave@4 PROC NEAR					; COMDAT
; _v$ = ecx
; Line 446
	mov	eax, DWORD PTR _tbuff
	test	ecx, ecx
	je	SHORT $L85322
	mov	BYTE PTR [eax], 1
; Line 447
	jmp	SHORT $L85809
$L85322:
; Line 448
	and	BYTE PTR [eax], 0
$L85809:
	inc	DWORD PTR _tbuff
; Line 449
	ret	0
@OSave@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SavePlayer@4
_TEXT	SEGMENT
@SavePlayer@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 453
	imul	ecx, 21720				; 000054d8H
	push	esi
	mov	esi, 21680				; 000054b0H
	add	ecx, OFFSET FLAT:_plr
	push	esi
	push	ecx
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 454
	add	DWORD PTR _tbuff, esi
	add	esp, 12					; 0000000cH
	pop	esi
; Line 455
	ret	0
@SavePlayer@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SaveMonster@4
_TEXT	SEGMENT
@SaveMonster@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 459
	imul	ecx, 228				; 000000e4H
	push	esi
	mov	esi, 216				; 000000d8H
	add	ecx, OFFSET FLAT:_monster
	push	esi
	push	ecx
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 460
	add	DWORD PTR _tbuff, esi
	add	esp, 12					; 0000000cH
	pop	esi
; Line 461
	ret	0
@SaveMonster@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SaveMissile@4
_TEXT	SEGMENT
@SaveMissile@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 465
	imul	ecx, 176				; 000000b0H
	push	esi
	mov	esi, 176				; 000000b0H
	add	ecx, OFFSET FLAT:_missile
	push	esi
	push	ecx
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 466
	add	DWORD PTR _tbuff, esi
	add	esp, 12					; 0000000cH
	pop	esi
; Line 467
	ret	0
@SaveMissile@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SaveObject@4
_TEXT	SEGMENT
@SaveObject@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 471
	imul	ecx, 120				; 00000078H
	add	ecx, OFFSET FLAT:_object
	push	120					; 00000078H
	push	ecx
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 472
	add	DWORD PTR _tbuff, 120			; 00000078H
	add	esp, 12					; 0000000cH
; Line 473
	ret	0
@SaveObject@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SaveItem@4
_TEXT	SEGMENT
@SaveItem@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 477
	imul	ecx, 368				; 00000170H
	push	esi
	mov	esi, 368				; 00000170H
	add	ecx, OFFSET FLAT:_item
	push	esi
	push	ecx
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 478
	add	DWORD PTR _tbuff, esi
	add	esp, 12					; 0000000cH
	pop	esi
; Line 479
	ret	0
@SaveItem@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SavePremium@4
_TEXT	SEGMENT
@SavePremium@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 483
	imul	ecx, 368				; 00000170H
	push	esi
	mov	esi, 368				; 00000170H
	add	ecx, OFFSET FLAT:_premiumitem
	push	esi
	push	ecx
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 484
	add	DWORD PTR _tbuff, esi
	add	esp, 12					; 0000000cH
	pop	esi
; Line 485
	ret	0
@SavePremium@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SaveQuest@4
_TEXT	SEGMENT
@SaveQuest@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 489
	lea	eax, DWORD PTR [ecx+ecx*2]
	push	24					; 00000018H
	lea	eax, DWORD PTR _quests[eax*8]
	push	eax
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 491
	mov	ecx, DWORD PTR _ReturnLvlX
	add	DWORD PTR _tbuff, 24			; 00000018H
	add	esp, 12					; 0000000cH
	call	@WSave@4
; Line 492
	mov	ecx, DWORD PTR _ReturnLvlY
	call	@WSave@4
; Line 493
	mov	ecx, DWORD PTR _ReturnLvl
	call	@WSave@4
; Line 494
	mov	ecx, DWORD PTR _ReturnLvlT
	call	@WSave@4
; Line 495
	mov	ecx, DWORD PTR _DoomQuestState
	jmp	@WSave@4
@SaveQuest@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SaveLighting@4
_TEXT	SEGMENT
@SaveLighting@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 500
	imul	ecx, 52					; 00000034H
	add	ecx, OFFSET FLAT:_LightList
	push	52					; 00000034H
	push	ecx
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 501
	add	DWORD PTR _tbuff, 52			; 00000034H
	add	esp, 12					; 0000000cH
; Line 502
	ret	0
@SaveLighting@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SaveVision@4
_TEXT	SEGMENT
@SaveVision@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 506
	imul	ecx, 52					; 00000034H
	add	ecx, OFFSET FLAT:_VisionList
	push	52					; 00000034H
	push	ecx
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 507
	add	DWORD PTR _tbuff, 52			; 00000034H
	add	esp, 12					; 0000000cH
; Line 508
	ret	0
@SaveVision@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SavePortal@4
_TEXT	SEGMENT
@SavePortal@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 512
	lea	eax, DWORD PTR [ecx+ecx*2]
	push	24					; 00000018H
	lea	eax, DWORD PTR _portal[eax*8]
	push	eax
	push	DWORD PTR _tbuff
	call	_memcpy
; Line 513
	add	DWORD PTR _tbuff, 24			; 00000018H
	add	esp, 12					; 0000000cH
; Line 514
	ret	0
@SavePortal@4 ENDP
_TEXT	ENDS
PUBLIC	_SaveLevel
EXTRN	@GetTempLevelNames@4:NEAR
EXTRN	_GetRndSeed:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SaveLevel
_TEXT	SEGMENT
_szName$ = -268
_SaveBuff$ = -8
_SaveLevel PROC NEAR					; COMDAT
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
; Line 523
	cmp	BYTE PTR _currlevel, 0
	jne	SHORT $L85364
; Line 524
	call	_GetRndSeed
	mov	DWORD PTR _glSeedTbl, eax
$L85364:
	push	ebx
	push	esi
	push	edi
; Line 526
	mov	ecx, 262147				; 00040003H
	call	@codec_get_encoded_len@4
; Line 527
	mov	ecx, eax
	call	@DiabloAllocPtr@4
; Line 530
	cmp	BYTE PTR _leveltype, 0
	push	112					; 00000070H
	mov	DWORD PTR _SaveBuff$[ebp], eax
	mov	DWORD PTR _tbuff, eax
	pop	edi
	je	SHORT $L85368
; Line 531
	xor	esi, esi
$L85366:
; Line 532
	lea	edx, DWORD PTR _dDead[esi]
	mov	ebx, edi
$L85369:
; Line 533
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, edi
	dec	ebx
	jne	SHORT $L85369
	inc	esi
	cmp	esi, edi
	jl	SHORT $L85366
$L85368:
; Line 537
	mov	ecx, DWORD PTR _nummonsters
	call	@WSave@4
; Line 538
	mov	ecx, DWORD PTR _numitems
	call	@WSave@4
; Line 539
	mov	ecx, DWORD PTR _nobjects
	call	@WSave@4
; Line 541
	cmp	BYTE PTR _leveltype, 0
	push	4
	pop	ebx
	je	$L85387
; Line 542
	mov	esi, OFFSET FLAT:_monstactive
$L85373:
; Line 543
	mov	ecx, DWORD PTR [esi]
	call	@WSave@4
	add	esi, ebx
	cmp	esi, OFFSET FLAT:_monstactive+800
	jl	SHORT $L85373
; Line 544
	xor	esi, esi
	cmp	DWORD PTR _nummonsters, esi
	jle	SHORT $L85378
$L85376:
; Line 545
	mov	ecx, DWORD PTR _monstactive[esi*4]
	call	@SaveMonster@4
	inc	esi
	cmp	esi, DWORD PTR _nummonsters
	jl	SHORT $L85376
$L85378:
; Line 546
	mov	edx, OFFSET FLAT:_objectactive
$L85379:
; Line 547
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, ebx
	cmp	edx, OFFSET FLAT:_objectactive+508
	jl	SHORT $L85379
; Line 548
	mov	edx, OFFSET FLAT:_objectavail
$L85382:
; Line 549
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, ebx
	cmp	edx, OFFSET FLAT:_objectavail+508
	jl	SHORT $L85382
; Line 550
	xor	esi, esi
	cmp	DWORD PTR _nobjects, esi
	jle	SHORT $L85387
$L85385:
; Line 551
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@SaveObject@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85385
$L85387:
; Line 554
	mov	edx, OFFSET FLAT:_itemactive
$L85388:
; Line 555
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, ebx
	cmp	edx, OFFSET FLAT:_itemactive+508
	jl	SHORT $L85388
; Line 556
	mov	edx, OFFSET FLAT:_itemavail
$L85391:
; Line 557
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, ebx
	cmp	edx, OFFSET FLAT:_itemavail+508
	jl	SHORT $L85391
; Line 558
	xor	esi, esi
	cmp	DWORD PTR _numitems, esi
	jle	SHORT $L85396
$L85394:
; Line 559
	mov	ecx, DWORD PTR _itemactive[esi*4]
	call	@SaveItem@4
	inc	esi
	cmp	esi, DWORD PTR _numitems
	jl	SHORT $L85394
$L85396:
; Line 561
	xor	esi, esi
$L85397:
; Line 562
	lea	edx, DWORD PTR _dFlags[esi]
	mov	ebx, edi
$L85400:
; Line 563
	mov	cl, BYTE PTR [edx]
	and	cl, -8					; fffffff8H
	call	@BSave@4
	add	edx, edi
	dec	ebx
	jne	SHORT $L85400
	inc	esi
	cmp	esi, edi
	jl	SHORT $L85397
; Line 565
	xor	esi, esi
$L85403:
; Line 566
	lea	edx, DWORD PTR _dItem[esi]
	mov	ebx, edi
$L85406:
; Line 567
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, edi
	dec	ebx
	jne	SHORT $L85406
	inc	esi
	cmp	esi, edi
	jl	SHORT $L85403
; Line 570
	cmp	BYTE PTR _leveltype, 0
	je	$L85442
; Line 571
	mov	ebx, OFFSET FLAT:_dMonster
$L85410:
; Line 572
	mov	esi, ebx
	mov	DWORD PTR -4+[ebp], edi
$L85413:
; Line 573
	mov	ecx, DWORD PTR [esi]
	call	@WSave@4
	add	esi, 448				; 000001c0H
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85413
	add	ebx, 4
	cmp	ebx, OFFSET FLAT:_dMonster+448
	jl	SHORT $L85410
; Line 575
	xor	esi, esi
$L85416:
; Line 576
	lea	edx, DWORD PTR _dObject[esi]
	mov	ebx, edi
$L85419:
; Line 577
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, edi
	dec	ebx
	jne	SHORT $L85419
	inc	esi
	cmp	esi, edi
	jl	SHORT $L85416
; Line 579
	xor	esi, esi
$L85422:
; Line 580
	lea	edx, DWORD PTR _dTransVal[esi]
	mov	ebx, edi
$L85425:
; Line 581
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, edi
	dec	ebx
	jne	SHORT $L85425
	inc	esi
	cmp	esi, edi
	jl	SHORT $L85422
; Line 583
	xor	esi, esi
$L85428:
; Line 584
	lea	edx, DWORD PTR _dTransVal2[esi]
	mov	ebx, edi
$L85431:
; Line 585
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, edi
	dec	ebx
	jne	SHORT $L85431
	inc	esi
	cmp	esi, edi
	jl	SHORT $L85428
; Line 587
	xor	esi, esi
$L85434:
; Line 588
	push	40					; 00000028H
	lea	edx, DWORD PTR _automapview[esi]
	pop	ebx
$L85437:
; Line 589
	movzx	ecx, BYTE PTR [edx]
	call	@OSave@4
	add	edx, 40					; 00000028H
	dec	ebx
	jne	SHORT $L85437
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85434
; Line 591
	xor	esi, esi
$L85440:
; Line 592
	lea	edx, DWORD PTR _dMissile[esi]
	mov	ebx, edi
$L85443:
; Line 593
	mov	cl, BYTE PTR [edx]
	call	@BSave@4
	add	edx, edi
	dec	ebx
	jne	SHORT $L85443
	inc	esi
	cmp	esi, edi
	jl	SHORT $L85440
$L85442:
; Line 597
	lea	ecx, DWORD PTR _szName$[ebp]
	call	@GetTempLevelNames@4
; Line 598
	mov	ecx, DWORD PTR _tbuff
	mov	esi, DWORD PTR _SaveBuff$[ebp]
	sub	ecx, esi
	call	@codec_get_encoded_len@4
; Line 599
	push	eax
	mov	eax, DWORD PTR _tbuff
	sub	eax, esi
	mov	edx, esi
	push	eax
	lea	ecx, DWORD PTR _szName$[ebp]
	call	@pfile_write_save_file@16
; Line 600
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 603
	mov	eax, DWORD PTR _myplr
	pop	edi
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _setlevel, 0
	pop	esi
	pop	ebx
	jne	SHORT $L85446
	movzx	ecx, BYTE PTR _currlevel
	mov	BYTE PTR _plr[eax+ecx+500], 1
; Line 606
	leave
	ret	0
$L85446:
; Line 605
	movzx	ecx, BYTE PTR _setlvlnum
	mov	BYTE PTR _plr[eax+ecx+517], 1
; Line 606
	leave
	ret	0
_SaveLevel ENDP
_TEXT	ENDS
PUBLIC	_LoadLevel
EXTRN	_dolighting:DWORD
EXTRN	_SyncPortals:NEAR
EXTRN	_SetDead:NEAR
EXTRN	@GetPermLevelNames@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _LoadLevel
_TEXT	SEGMENT
_dwLen$ = -8
_szName$ = -268
_LoadBuff$ = -4
_LoadLevel PROC NEAR					; COMDAT
; Line 610
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
; Line 616
	lea	ecx, DWORD PTR _szName$[ebp]
	call	@GetPermLevelNames@4
; Line 617
	lea	edx, DWORD PTR _dwLen$[ebp]
	lea	ecx, DWORD PTR _szName$[ebp]
	call	@pfile_read@8
; Line 620
	cmp	BYTE PTR _leveltype, 0
	mov	DWORD PTR _LoadBuff$[ebp], eax
	mov	DWORD PTR _tbuff, eax
	je	SHORT $L85454
; Line 621
	xor	edx, edx
$L85455:
; Line 622
	push	112					; 00000070H
	lea	ecx, DWORD PTR _dDead[edx]
	pop	esi
$L85458:
; Line 623
	call	_BLoad
	mov	BYTE PTR [ecx], al
	add	ecx, 112				; 00000070H
	dec	esi
	jne	SHORT $L85458
	inc	edx
	cmp	edx, 112				; 00000070H
	jl	SHORT $L85455
; Line 625
	call	_SetDead
$L85454:
; Line 628
	call	_WLoad
	mov	esi, eax
	mov	DWORD PTR _nummonsters, esi
; Line 629
	call	_WLoad
	mov	DWORD PTR _numitems, eax
; Line 630
	call	_WLoad
; Line 632
	cmp	BYTE PTR _leveltype, 0
	push	4
	mov	DWORD PTR _nobjects, eax
	pop	ebx
	je	$L85479
; Line 633
	mov	edi, OFFSET FLAT:_monstactive
$L85462:
; Line 634
	call	_WLoad
	mov	DWORD PTR [edi], eax
	add	edi, ebx
	cmp	edi, OFFSET FLAT:_monstactive+800
	jl	SHORT $L85462
; Line 635
	xor	edi, edi
	test	esi, esi
	jle	SHORT $L85467
$L85465:
; Line 636
	mov	ecx, DWORD PTR _monstactive[edi*4]
	call	@LoadMonster@4
	inc	edi
	cmp	edi, DWORD PTR _nummonsters
	jl	SHORT $L85465
$L85467:
; Line 637
	mov	ecx, OFFSET FLAT:_objectactive
$L85468:
; Line 638
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [ecx], eax
	add	ecx, ebx
	cmp	ecx, OFFSET FLAT:_objectactive+508
	jl	SHORT $L85468
; Line 639
	mov	ecx, OFFSET FLAT:_objectavail
$L85471:
; Line 640
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [ecx], eax
	add	ecx, ebx
	cmp	ecx, OFFSET FLAT:_objectavail+508
	jl	SHORT $L85471
; Line 641
	xor	esi, esi
	cmp	DWORD PTR _nobjects, esi
	jle	SHORT $L85476
$L85474:
; Line 642
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@LoadObject@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85474
$L85476:
; Line 643
	xor	esi, esi
	cmp	DWORD PTR _nobjects, esi
	jle	SHORT $L85479
$L85477:
; Line 644
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@SyncObjectAnim@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85477
$L85479:
; Line 647
	mov	ecx, OFFSET FLAT:_itemactive
$L85480:
; Line 648
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [ecx], eax
	add	ecx, ebx
	cmp	ecx, OFFSET FLAT:_itemactive+508
	jl	SHORT $L85480
; Line 649
	mov	ecx, OFFSET FLAT:_itemavail
$L85483:
; Line 650
	call	_BLoad
	movsx	eax, al
	mov	DWORD PTR [ecx], eax
	add	ecx, ebx
	cmp	ecx, OFFSET FLAT:_itemavail+508
	jl	SHORT $L85483
; Line 651
	xor	esi, esi
	cmp	DWORD PTR _numitems, esi
	jle	SHORT $L85488
$L85486:
; Line 652
	mov	ecx, DWORD PTR _itemactive[esi*4]
	call	@LoadItem@4
	inc	esi
	cmp	esi, DWORD PTR _numitems
	jl	SHORT $L85486
$L85488:
; Line 654
	push	112					; 00000070H
	xor	edx, edx
	pop	edi
$L85489:
; Line 655
	lea	ecx, DWORD PTR _dFlags[edx]
	mov	esi, edi
$L85492:
; Line 656
	call	_BLoad
	mov	BYTE PTR [ecx], al
	add	ecx, edi
	dec	esi
	jne	SHORT $L85492
	inc	edx
	cmp	edx, edi
	jl	SHORT $L85489
; Line 658
	xor	edx, edx
$L85495:
; Line 659
	lea	ecx, DWORD PTR _dItem[edx]
	mov	esi, edi
$L85498:
; Line 660
	call	_BLoad
	mov	BYTE PTR [ecx], al
	add	ecx, edi
	dec	esi
	jne	SHORT $L85498
	inc	edx
	cmp	edx, edi
	jl	SHORT $L85495
; Line 663
	cmp	BYTE PTR _leveltype, 0
	je	$L85534
; Line 664
	mov	edi, OFFSET FLAT:_dMonster
$L85502:
; Line 665
	push	112					; 00000070H
	mov	esi, edi
	pop	ebx
$L85505:
; Line 666
	call	_WLoad
	mov	DWORD PTR [esi], eax
	add	esi, 448				; 000001c0H
	dec	ebx
	jne	SHORT $L85505
	add	edi, 4
	cmp	edi, OFFSET FLAT:_dMonster+448
	jl	SHORT $L85502
; Line 668
	push	112					; 00000070H
	xor	edx, edx
	pop	ebx
$L85508:
; Line 669
	lea	ecx, DWORD PTR _dObject[edx]
	mov	esi, ebx
$L85511:
; Line 670
	call	_BLoad
	mov	BYTE PTR [ecx], al
	add	ecx, ebx
	dec	esi
	jne	SHORT $L85511
	inc	edx
	cmp	edx, ebx
	jl	SHORT $L85508
; Line 672
	xor	edx, edx
$L85514:
; Line 673
	lea	ecx, DWORD PTR _dTransVal[edx]
	mov	esi, ebx
$L85517:
; Line 674
	call	_BLoad
	mov	BYTE PTR [ecx], al
	add	ecx, ebx
	dec	esi
	jne	SHORT $L85517
	inc	edx
	cmp	edx, ebx
	jl	SHORT $L85514
; Line 676
	xor	edx, edx
$L85520:
; Line 677
	lea	ecx, DWORD PTR _dTransVal2[edx]
	mov	esi, ebx
$L85523:
; Line 678
	call	_BLoad
	mov	BYTE PTR [ecx], al
	add	ecx, ebx
	dec	esi
	jne	SHORT $L85523
	inc	edx
	cmp	edx, ebx
	jl	SHORT $L85520
; Line 680
	xor	esi, esi
$L85526:
; Line 681
	push	40					; 00000028H
	lea	edx, DWORD PTR _automapview[esi]
	pop	edi
$L85529:
; Line 682
	call	_OLoad
	mov	BYTE PTR [edx], al
	add	edx, 40					; 00000028H
	dec	edi
	jne	SHORT $L85529
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85526
; Line 684
	xor	ecx, ecx
$L85532:
; Line 685
	lea	eax, DWORD PTR _dMissile[ecx]
	mov	edx, ebx
$L85535:
; Line 686
	and	BYTE PTR [eax], 0
	add	eax, ebx
	dec	edx
	jne	SHORT $L85535
	inc	ecx
	cmp	ecx, ebx
	jl	SHORT $L85532
$L85534:
; Line 690
	call	_AutomapZoomReset
; Line 691
	call	_ResyncQuests
; Line 692
	call	_SyncPortals
; Line 693
	xor	ecx, ecx
	pop	edi
	inc	ecx
	pop	esi
	mov	DWORD PTR _dolighting, ecx
	mov	eax, OFFSET FLAT:_plr+52
	pop	ebx
$L85538:
; Line 696
	cmp	BYTE PTR [eax-23], 0
	je	SHORT $L85539
	movzx	edx, BYTE PTR _currlevel
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $L85539
; Line 697
	mov	edx, DWORD PTR [eax+104]
	imul	edx, 52					; 00000034H
	mov	DWORD PTR _LightList[edx+20], ecx
$L85539:
	add	eax, 21720				; 000054d8H
	cmp	eax, OFFSET FLAT:_plr+86932
	jl	SHORT $L85538
; Line 700
	mov	ecx, DWORD PTR _LoadBuff$[ebp]
	call	@mem_free_dbg@4
; Line 701
	leave
	ret	0
_LoadLevel ENDP
_TEXT	ENDS
END
