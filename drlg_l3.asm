; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/drlg_l3.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _AddFenceDoors
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FenceDoorFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3Anvil
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FixL3Warp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FixL3HallofHeroes
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L3LockRec@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3Lockout
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CreateL3Dungeon@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L3@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitL3Dungeon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L3FillRoom@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L3CreateBlock@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L3FloorArea@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3FillDiags
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3FillSingles
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3FillStraights
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3Edges
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3GetFloorArea
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3MakeMegas
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3River
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3Pool
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L3SpawnEdge@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L3Spawn@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3PoolFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L3PlaceMiniSet@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L3PlaceRndSet@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3Wood
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WoodVertU@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WoodVertD@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WoodHorizL@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WoodHorizR@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L3Pass3
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadL3Dungeon@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadPreL3Dungeon@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_L3ConvTbl
PUBLIC	_L3UP
PUBLIC	_L3DOWN
PUBLIC	_L3HOLDWARP
PUBLIC	_L3TITE1
PUBLIC	_L3TITE2
PUBLIC	_L3TITE3
PUBLIC	_L3TITE6
PUBLIC	_L3TITE7
PUBLIC	_L3TITE8
PUBLIC	_L3TITE9
PUBLIC	_L3TITE10
PUBLIC	_L3TITE11
PUBLIC	_L3TITE12
PUBLIC	_L3TITE13
PUBLIC	_L3CREV1
PUBLIC	_L3CREV2
PUBLIC	_L3CREV3
PUBLIC	_L3CREV4
PUBLIC	_L3CREV5
PUBLIC	_L3CREV6
PUBLIC	_L3CREV7
PUBLIC	_L3CREV8
PUBLIC	_L3CREV9
PUBLIC	_L3CREV10
PUBLIC	_L3CREV11
PUBLIC	_L3ISLE1
PUBLIC	_L3ISLE2
PUBLIC	_L3ISLE3
PUBLIC	_L3ISLE4
PUBLIC	_L3ISLE5
PUBLIC	_L3XTRA1
PUBLIC	_L3XTRA2
PUBLIC	_L3XTRA3
PUBLIC	_L3XTRA4
PUBLIC	_L3XTRA5
PUBLIC	_L3ANVIL
PUBLIC	_L3SpawnTbl1
PUBLIC	_L3SpawnTbl2
PUBLIC	_L3PoolSub
_DATA	SEGMENT
COMM	_lavapool:BYTE
COMM	_abyssx:DWORD
COMM	_lockoutcnt:DWORD
COMM	_lockout:BYTE:0640H
_DATA	ENDS
CONST	SEGMENT
_L3ConvTbl DB	08H
	DB	0bH
	DB	03H
	DB	0aH
	DB	01H
	DB	09H
	DB	0cH
	DB	0cH
	DB	06H
	DB	0dH
	DB	04H
	DB	0dH
	DB	02H
	DB	0eH
	DB	05H
	DB	07H
_L3UP	DB	03H
	DB	03H
	DB	08H
	DB	08H
	DB	00H
	DB	0aH
	DB	0aH
	DB	00H
	DB	07H
	DB	07H
	DB	00H
	DB	033H
	DB	032H
	DB	00H
	DB	030H
	DB	031H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L3DOWN	DB	03H
	DB	03H
	DB	08H
	DB	09H
	DB	07H
	DB	08H
	DB	09H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02fH
	DB	00H
	DB	00H
	DB	02eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L3HOLDWARP DB	03H
	DB	03H
	DB	08H
	DB	08H
	DB	00H
	DB	0aH
	DB	0aH
	DB	00H
	DB	07H
	DB	07H
	DB	00H
	DB	07dH
	DB	07dH
	DB	00H
	DB	07dH
	DB	07dH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L3TITE1 DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	039H
	DB	03aH
	DB	00H
	DB	00H
	DB	038H
	DB	037H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_L3TITE2 DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03dH
	DB	03eH
	DB	00H
	DB	00H
	DB	03cH
	DB	03bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_L3TITE3 DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	042H
	DB	00H
	DB	00H
	DB	040H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_L3TITE6 DB	05H
	DB	04H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	04eH
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	04aH
	DB	04bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_L3TITE7 DB	04H
	DB	05H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	053H
	DB	00H
	DB	00H
	DB	00H
	DB	052H
	DB	050H
	DB	00H
	DB	00H
	DB	051H
	DB	04fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_L3TITE8 DB	03H
	DB	03H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	034H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L3TITE9 DB	03H
	DB	03H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	035H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L3TITE10 DB	03H
	DB	03H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	036H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L3TITE11 DB	03H
	DB	03H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	043H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L3TITE12 DB	02H
	DB	01H
	DB	09H
	DB	07H
	DB	044H
	DB	00H
	ORG $+2
_L3TITE13 DB	01H
	DB	02H
	DB	0aH
	DB	07H
	DB	045H
	DB	00H
	ORG $+2
_L3CREV1 DB	02H
	DB	01H
	DB	08H
	DB	07H
	DB	054H
	DB	055H
	ORG $+2
_L3CREV2 DB	02H
	DB	01H
	DB	08H
	DB	0bH
	DB	056H
	DB	057H
	ORG $+2
_L3CREV3 DB	01H
	DB	02H
	DB	08H
	DB	0aH
	DB	059H
	DB	058H
	ORG $+2
_L3CREV4 DB	02H
	DB	01H
	DB	08H
	DB	07H
	DB	05aH
	DB	05bH
	ORG $+2
_L3CREV5 DB	01H
	DB	02H
	DB	08H
	DB	0bH
	DB	05cH
	DB	05dH
	ORG $+2
_L3CREV6 DB	01H
	DB	02H
	DB	08H
	DB	0aH
	DB	05fH
	DB	05eH
	ORG $+2
_L3CREV7 DB	02H
	DB	01H
	DB	08H
	DB	07H
	DB	060H
	DB	065H
	ORG $+2
_L3CREV8 DB	01H
	DB	02H
	DB	02H
	DB	08H
	DB	066H
	DB	061H
	ORG $+2
_L3CREV9 DB	02H
	DB	01H
	DB	03H
	DB	08H
	DB	067H
	DB	062H
	ORG $+2
_L3CREV10 DB	02H
	DB	01H
	DB	04H
	DB	08H
	DB	068H
	DB	063H
	ORG $+2
_L3CREV11 DB	01H
	DB	02H
	DB	06H
	DB	08H
	DB	069H
	DB	064H
	ORG $+2
_L3ISLE1 DB	02H
	DB	03H
	DB	05H
	DB	0eH
	DB	04H
	DB	09H
	DB	0dH
	DB	0cH
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	ORG $+2
_L3ISLE2 DB	03H
	DB	02H
	DB	05H
	DB	02H
	DB	0eH
	DB	0dH
	DB	0aH
	DB	0cH
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	ORG $+2
_L3ISLE3 DB	02H
	DB	03H
	DB	05H
	DB	0eH
	DB	04H
	DB	09H
	DB	0dH
	DB	0cH
	DB	01dH
	DB	01eH
	DB	019H
	DB	01cH
	DB	01fH
	DB	020H
	ORG $+2
_L3ISLE4 DB	03H
	DB	02H
	DB	05H
	DB	02H
	DB	0eH
	DB	0dH
	DB	0aH
	DB	0cH
	DB	01dH
	DB	01aH
	DB	01eH
	DB	01fH
	DB	01bH
	DB	020H
	ORG $+2
_L3ISLE5 DB	02H
	DB	02H
	DB	05H
	DB	0eH
	DB	0dH
	DB	0cH
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	ORG $+2
_L3XTRA1 DB	01H
	DB	01H
	DB	07H
	DB	06aH
_L3XTRA2 DB	01H
	DB	01H
	DB	07H
	DB	06bH
_L3XTRA3 DB	01H
	DB	01H
	DB	07H
	DB	06cH
_L3XTRA4 DB	01H
	DB	01H
	DB	09H
	DB	06dH
_L3XTRA5 DB	01H
	DB	01H
	DB	0aH
	DB	06eH
_L3ANVIL DB	0bH
	DB	0bH
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01dH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	01dH
	DB	022H
	DB	021H
	DB	021H
	DB	025H
	DB	024H
	DB	021H
	DB	023H
	DB	01eH
	DB	00H
	DB	00H
	DB	019H
	DB	021H
	DB	025H
	DB	01bH
	DB	020H
	DB	01fH
	DB	024H
	DB	021H
	DB	01cH
	DB	00H
	DB	00H
	DB	019H
	DB	025H
	DB	020H
	DB	07H
	DB	07H
	DB	07H
	DB	01fH
	DB	01bH
	DB	020H
	DB	00H
	DB	00H
	DB	019H
	DB	01cH
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	019H
	DB	023H
	DB	01eH
	DB	07H
	DB	07H
	DB	07H
	DB	01dH
	DB	01aH
	DB	01eH
	DB	00H
	DB	00H
	DB	019H
	DB	021H
	DB	023H
	DB	01aH
	DB	01eH
	DB	01dH
	DB	022H
	DB	021H
	DB	01cH
	DB	00H
	DB	00H
	DB	01fH
	DB	024H
	DB	021H
	DB	021H
	DB	023H
	DB	022H
	DB	021H
	DB	025H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	01fH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L3SpawnTbl1 DB	00H
	DB	0aH
	DB	043H
	DB	05H
	DB	02cH
	DB	06H
	DB	09H
	DB	00H
	DB	00H
	DB	01cH
	DB	083H
	DB	06H
	DB	09H
	DB	0aH
	DB	05H
	ORG $+1
_L3SpawnTbl2 DB	00H
	DB	0aH
	DB	03H
	DB	05H
	DB	0cH
	DB	06H
	DB	09H
	DB	00H
	DB	00H
	DB	0cH
	DB	03H
	DB	06H
	DB	09H
	DB	0aH
	DB	05H
	ORG $+1
_L3PoolSub DB	00H
	DB	023H
	DB	01aH
	DB	024H
	DB	019H
	DB	01dH
	DB	022H
	DB	07H
	DB	021H
	DB	01cH
	DB	01bH
	DB	025H
	DB	020H
	DB	01fH
	DB	01eH
CONST	ENDS
PUBLIC	_AddFenceDoors
EXTRN	_dungeon:BYTE
; Function compile flags: /Ogsy
;	COMDAT _AddFenceDoors
_TEXT	SEGMENT
_AddFenceDoors PROC NEAR				; COMDAT
; File Source/drlg_l3.cpp
; Line 78
	push	esi
; Line 110
	mov	esi, OFFSET FLAT:_dungeon
	xor	edx, edx
	push	edi
	dec	esi
$L84989:
	push	40					; 00000028H
	lea	eax, DWORD PTR [esi+edx]
	pop	edi
$L84992:
; Line 91
	cmp	BYTE PTR [eax+1], 7
	jne	SHORT $L85005
; Line 92
	mov	cl, BYTE PTR [eax-39]
; Line 96
	cmp	cl, 152					; 00000098H
	ja	SHORT $L84999
	cmp	cl, 130					; 00000082H
	jb	SHORT $L84999
	mov	cl, BYTE PTR [eax+41]
	cmp	cl, 152					; 00000098H
	ja	SHORT $L84999
	cmp	cl, 130					; 00000082H
	jb	SHORT $L84999
; Line 103
	mov	BYTE PTR [eax+1], -110			; ffffff92H
	jmp	SHORT $L85005
$L84999:
; Line 97
	mov	cl, BYTE PTR [eax]
	cmp	cl, 152					; 00000098H
	ja	SHORT $L85005
	cmp	cl, 130					; 00000082H
	jb	SHORT $L85005
; Line 98
	mov	cl, BYTE PTR [eax+2]
; Line 99
	cmp	cl, 152					; 00000098H
	ja	SHORT $L85005
	cmp	cl, 130					; 00000082H
	jb	SHORT $L85005
; Line 100
	mov	BYTE PTR [eax+1], -109			; ffffff93H
$L85005:
; Line 106
	add	eax, 40					; 00000028H
; Line 108
	dec	edi
	jne	SHORT $L84992
; Line 109
	inc	edx
; Line 110
	cmp	edx, 40					; 00000028H
	jl	SHORT $L84989
	pop	edi
	pop	esi
; Line 111
	ret	0
_AddFenceDoors ENDP
_TEXT	ENDS
PUBLIC	_FenceDoorFix
; Function compile flags: /Ogsy
;	COMDAT _FenceDoorFix
_TEXT	SEGMENT
_FenceDoorFix PROC NEAR					; COMDAT
; Line 114
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 176
	mov	ebp, OFFSET FLAT:_dungeon
	xor	edi, edi
	dec	ebp
$L85018:
	push	40					; 00000028H
	lea	edx, DWORD PTR [edi+ebp]
	pop	esi
$L85021:
	mov	bl, BYTE PTR [edx+1]
	cmp	bl, -110				; ffffff92H
	jne	$L85033
	mov	al, BYTE PTR [edx+41]
	cmp	al, 152					; 00000098H
	ja	$L85034
; Line 169
	cmp	al, 130					; 00000082H
	jb	$L85034
	mov	cl, BYTE PTR [edx-39]
	cmp	cl, 152					; 00000098H
	ja	$L85034
	cmp	cl, 130					; 00000082H
	jb	$L85034
	cmp	al, -126				; ffffff82H
	je	$L85030
	movzx	ecx, cl
	cmp	ecx, -126				; ffffff82H
	je	$L85030
	cmp	al, -124				; ffffff84H
	je	$L85030
	cmp	ecx, -124				; ffffff84H
	je	$L85030
	cmp	al, -123				; ffffff85H
	je	$L85030
	cmp	ecx, -123				; ffffff85H
	je	$L85030
	cmp	al, -122				; ffffff86H
	je	SHORT $L85030
	cmp	ecx, -122				; ffffff86H
	je	SHORT $L85030
	cmp	al, -120				; ffffff88H
	je	SHORT $L85030
	cmp	ecx, -120				; ffffff88H
	je	SHORT $L85030
	cmp	al, -118				; ffffff8aH
	je	SHORT $L85030
	cmp	ecx, -118				; ffffff8aH
	je	SHORT $L85030
	cmp	al, -116				; ffffff8cH
	je	SHORT $L85030
	cmp	ecx, -116				; ffffff8cH
	jne	SHORT $L85034
$L85033:
	cmp	bl, -109				; ffffff93H
	jne	SHORT $L85030
	mov	cl, BYTE PTR [edx+2]
	cmp	cl, 152					; 00000098H
	ja	SHORT $L85034
	cmp	cl, 130					; 00000082H
	jb	SHORT $L85034
	mov	al, BYTE PTR [edx]
	cmp	al, 152					; 00000098H
	ja	SHORT $L85034
	cmp	al, 130					; 00000082H
	jb	SHORT $L85034
	cmp	cl, -125				; ffffff83H
	je	SHORT $L85030
	cmp	al, -125				; ffffff83H
	je	SHORT $L85030
	cmp	cl, -124				; ffffff84H
	je	SHORT $L85030
	cmp	al, -124				; ffffff84H
	je	SHORT $L85030
	cmp	cl, -123				; ffffff85H
	je	SHORT $L85030
	cmp	al, -123				; ffffff85H
	je	SHORT $L85030
	cmp	cl, -121				; ffffff87H
	je	SHORT $L85030
	cmp	al, -121				; ffffff87H
	je	SHORT $L85030
	cmp	cl, -119				; ffffff89H
	je	SHORT $L85030
	cmp	al, -119				; ffffff89H
	je	SHORT $L85030
	cmp	cl, -118				; ffffff8aH
	je	SHORT $L85030
	cmp	al, -118				; ffffff8aH
	je	SHORT $L85030
	cmp	cl, -117				; ffffff8bH
	je	SHORT $L85030
	cmp	al, -117				; ffffff8bH
	je	SHORT $L85030
$L85034:
; Line 170
	mov	BYTE PTR [edx+1], 7
$L85030:
; Line 172
	add	edx, 40					; 00000028H
; Line 174
	dec	esi
	jne	$L85021
; Line 175
	inc	edi
; Line 176
	cmp	edi, 40					; 00000028H
	jl	$L85018
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 177
	ret	0
_FenceDoorFix ENDP
_TEXT	ENDS
PUBLIC	_DRLG_L3Anvil
EXTRN	_setpc_h:DWORD
EXTRN	_setpc_w:DWORD
EXTRN	_setpc_x:DWORD
EXTRN	_setpc_y:DWORD
EXTRN	@random@8:NEAR
EXTRN	_dflags:BYTE
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L3Anvil
_TEXT	SEGMENT
_v1$ = -4
_v2$ = -16
_v12$ = -12
_v14$ = -8
_DRLG_L3Anvil PROC NEAR					; COMDAT
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
; Line 197
	push	29					; 0000001dH
	pop	edx
	xor	cl, cl
	call	@random@8
; Line 198
	and	DWORD PTR _v1$[ebp], 0
; Line 199
	push	29					; 0000001dH
	pop	edx
	xor	cl, cl
	mov	esi, eax
	call	@random@8
; Line 200
	and	DWORD PTR _v12$[ebp], 0
$L85052:
; Line 202
	cmp	DWORD PTR _v12$[ebp], 200		; 000000c8H
	jge	$L86484
; Line 204
	inc	DWORD PTR _v12$[ebp]
; Line 205
	mov	DWORD PTR _v14$[ebp], 1
; Line 206
	mov	DWORD PTR _v2$[ebp], 2
$L85055:
; Line 208
	cmp	DWORD PTR _v14$[ebp], 1
	jne	SHORT $L85057
; Line 211
	lea	ecx, DWORD PTR [esi+esi*4]
	xor	edi, edi
	lea	ecx, DWORD PTR [eax+ecx*8]
	add	ecx, DWORD PTR _v1$[ebp]
$L85059:
; Line 213
	cmp	DWORD PTR _v14$[ebp], 1
	jne	SHORT $L85061
; Line 215
	mov	edx, DWORD PTR _v2$[ebp]
	mov	dl, BYTE PTR _L3ANVIL[edx]
; Line 216
	test	dl, dl
	je	SHORT $L85063
	movsx	ebx, BYTE PTR _dungeon[ecx]
	movzx	edx, dl
	cmp	ebx, edx
	je	SHORT $L85063
; Line 217
	and	DWORD PTR _v14$[ebp], 0
$L85063:
; Line 218
	cmp	BYTE PTR _dflags[ecx], 0
	je	SHORT $L85064
; Line 219
	and	DWORD PTR _v14$[ebp], 0
$L85064:
; Line 220
	inc	DWORD PTR _v2$[ebp]
; Line 221
	inc	edi
; Line 223
	add	ecx, 40					; 00000028H
	cmp	edi, 11					; 0000000bH
	jl	SHORT $L85059
$L85061:
; Line 224
	inc	DWORD PTR _v1$[ebp]
; Line 225
	cmp	DWORD PTR _v1$[ebp], 11			; 0000000bH
	jl	SHORT $L85055
$L85057:
; Line 226
	and	DWORD PTR _v1$[ebp], 0
; Line 227
	cmp	DWORD PTR _v14$[ebp], 0
	jne	SHORT $L86485
; Line 229
	inc	esi
	cmp	esi, 29					; 0000001dH
	jne	$L85052
; Line 230
	xor	esi, esi
; Line 231
	inc	eax
	cmp	eax, 29					; 0000001dH
	jne	$L85052
; Line 232
	xor	eax, eax
; Line 201
	jmp	$L85052
$L86485:
; Line 235
	cmp	DWORD PTR _v12$[ebp], 200		; 000000c8H
	jl	SHORT $L85068
$L86484:
; Line 236
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85035
$L85068:
; Line 239
	lea	ecx, DWORD PTR [esi+esi*4]
	push	123					; 0000007bH
	pop	ebx
	mov	DWORD PTR -12+[ebp], 11			; 0000000bH
	lea	edi, DWORD PTR [eax+ecx*8]
$L85069:
; Line 251
	mov	ecx, edi
	mov	DWORD PTR -16+[ebp], 11			; 0000000bH
$L85072:
	mov	dl, BYTE PTR _L3ANVIL[ebx]
	test	dl, dl
	je	SHORT $L85075
; Line 246
	mov	BYTE PTR _dungeon[ecx], dl
$L85075:
; Line 247
	or	BYTE PTR _dflags[ecx], -128		; ffffff80H
; Line 248
	inc	ebx
; Line 251
	add	ecx, 40					; 00000028H
	dec	DWORD PTR -16+[ebp]
	jne	SHORT $L85072
; Line 252
	inc	edi
; Line 254
	dec	DWORD PTR -12+[ebp]
	jne	SHORT $L85069
; Line 256
	push	11					; 0000000bH
	mov	DWORD PTR _setpc_y, eax
	pop	eax
; Line 258
	mov	DWORD PTR _setpc_x, esi
	mov	DWORD PTR _setpc_w, eax
	mov	DWORD PTR _setpc_h, eax
; Line 259
	xor	eax, eax
$L85035:
	pop	edi
	pop	esi
	pop	ebx
; Line 260
	leave
	ret	0
_DRLG_L3Anvil ENDP
_TEXT	ENDS
PUBLIC	_FixL3Warp
; Function compile flags: /Ogsy
;	COMDAT _FixL3Warp
_TEXT	SEGMENT
_FixL3Warp PROC NEAR					; COMDAT
; Line 272
	xor	ecx, ecx
	push	esi
$L85083:
; Line 274
	xor	esi, esi
; Line 275
	lea	eax, DWORD PTR _dungeon[ecx+41]
$L85085:
; Line 277
	mov	dl, BYTE PTR [eax-41]
; Line 278
	cmp	dl, 125					; 0000007dH
	jne	SHORT $L85088
	cmp	BYTE PTR [eax-1], dl
	jne	SHORT $L85089
	cmp	BYTE PTR [eax-40], dl
	jne	SHORT $L85089
	cmp	BYTE PTR [eax], dl
	je	SHORT $L86498
$L85088:
; Line 286
	cmp	dl, 5
	jne	SHORT $L85089
	cmp	BYTE PTR [eax], 7
	jne	SHORT $L85089
; Line 287
	mov	BYTE PTR [eax-41], 7
$L85089:
; Line 288
	inc	esi
; Line 289
	add	eax, 40					; 00000028H
; Line 290
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85085
; Line 291
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85083
	pop	esi
; Line 295
	ret	0
$L86498:
; Line 280
	lea	eax, DWORD PTR [esi+esi*4]
	pop	esi
	shl	eax, 3
	mov	BYTE PTR _dungeon[eax+ecx], -100	; ffffff9cH
; Line 281
	mov	BYTE PTR _dungeon[eax+ecx+40], -101	; ffffff9bH
; Line 282
	mov	BYTE PTR _dungeon[eax+ecx+1], -103	; ffffff99H
; Line 283
	mov	BYTE PTR _dungeon[eax+ecx+41], -102	; ffffff9aH
; Line 295
	ret	0
_FixL3Warp ENDP
_TEXT	ENDS
PUBLIC	_FixL3HallofHeroes
; Function compile flags: /Ogsy
;	COMDAT _FixL3HallofHeroes
_TEXT	SEGMENT
_FixL3HallofHeroes PROC NEAR				; COMDAT
; Line 298
	push	esi
; Line 306
	push	40					; 00000028H
	xor	ecx, ecx
	pop	esi
$L85098:
; Line 308
	lea	eax, DWORD PTR _dungeon[ecx]
	mov	edx, esi
$L85102:
; Line 311
	cmp	BYTE PTR [eax], 5
	jne	SHORT $L85105
	cmp	BYTE PTR [eax+41], 7
	jne	SHORT $L85105
; Line 312
	mov	BYTE PTR [eax], 7
$L85105:
; Line 313
	add	eax, esi
; Line 315
	dec	edx
	jne	SHORT $L85102
; Line 316
	inc	ecx
; Line 317
	cmp	ecx, esi
	jl	SHORT $L85098
; Line 318
	xor	ecx, ecx
$L85106:
; Line 320
	lea	eax, DWORD PTR _dungeon[ecx]
	mov	edx, esi
$L85110:
; Line 323
	cmp	BYTE PTR [eax], 5
	jne	SHORT $L85115
; Line 324
	cmp	BYTE PTR [eax+41], 12			; 0000000cH
	jne	SHORT $L85114
	cmp	BYTE PTR [eax+40], 7
	jne	SHORT $L85114
; Line 325
	mov	BYTE PTR [eax], 7
; Line 326
	mov	BYTE PTR [eax+1], 7
; Line 327
	mov	BYTE PTR [eax+41], 7
$L85114:
; Line 329
	cmp	BYTE PTR [eax], 5
	jne	SHORT $L85115
	cmp	BYTE PTR [eax+41], 12			; 0000000cH
	jne	SHORT $L85115
	cmp	BYTE PTR [eax+1], 7
	jne	SHORT $L85115
; Line 330
	mov	BYTE PTR [eax], 7
; Line 331
	mov	BYTE PTR [eax+40], 7
; Line 332
	mov	BYTE PTR [eax+41], 7
$L85115:
; Line 335
	add	eax, esi
; Line 337
	dec	edx
	jne	SHORT $L85110
; Line 338
	inc	ecx
; Line 339
	cmp	ecx, esi
	jl	SHORT $L85106
	pop	esi
; Line 340
	ret	0
_FixL3HallofHeroes ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L3LockRec@8
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L3LockRec@8
_TEXT	SEGMENT
@DRLG_L3LockRec@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 343
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, edx
; Line 351
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR _lockout[edi+eax*8]
; Line 352
	cmp	BYTE PTR [eax], 0
	je	SHORT $L85128
	push	ebx
	push	ebp
; Line 353
	mov	ebp, eax
	lea	ebx, DWORD PTR [edi-1]
$L85126:
; Line 355
	and	BYTE PTR [eax], 0
; Line 356
	inc	DWORD PTR _lockoutcnt
; Line 357
	mov	edx, ebx
	mov	ecx, esi
	call	@DRLG_L3LockRec@8
; Line 358
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, esi
	call	@DRLG_L3LockRec@8
; Line 359
	lea	ecx, DWORD PTR [esi-1]
	mov	edx, edi
	call	@DRLG_L3LockRec@8
; Line 360
	add	ebp, 40					; 00000028H
; Line 361
	inc	esi
; Line 362
	mov	eax, ebp
; Line 363
	cmp	BYTE PTR [ebp], 0
	jne	SHORT $L85126
	pop	ebp
	pop	ebx
$L85128:
	pop	edi
	pop	esi
; Line 365
	ret	0
@DRLG_L3LockRec@8 ENDP
_TEXT	ENDS
PUBLIC	_DRLG_L3Lockout
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L3Lockout
_TEXT	SEGMENT
_x$ = -8
_y$ = -4
_DRLG_L3Lockout PROC NEAR				; COMDAT
; Line 369
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 377
	xor	esi, esi
; Line 378
	xor	edx, edx
$L85136:
; Line 380
	xor	ecx, ecx
; Line 384
	mov	eax, edx
$L85139:
; Line 383
	cmp	BYTE PTR _dungeon[eax], 0
	je	SHORT $L85142
; Line 384
	mov	BYTE PTR _lockout[eax], 1
; Line 385
	mov	DWORD PTR _x$[ebp], ecx
; Line 386
	mov	DWORD PTR _y$[ebp], edx
; Line 387
	inc	esi
; Line 388
	jmp	SHORT $L85143
$L85142:
; Line 389
	and	BYTE PTR _lockout[eax], 0
$L85143:
; Line 391
	inc	ecx
	add	eax, 40					; 00000028H
; Line 393
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85139
; Line 394
	inc	edx
; Line 395
	cmp	edx, 40					; 00000028H
	jl	SHORT $L85136
; Line 397
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	and	DWORD PTR _lockoutcnt, 0
	call	@DRLG_L3LockRec@8
; Line 398
	xor	eax, eax
	cmp	esi, DWORD PTR _lockoutcnt
	pop	esi
	sete	al
; Line 399
	leave
	ret	0
_DRLG_L3Lockout ENDP
_TEXT	ENDS
PUBLIC	@CreateL3Dungeon@8
PUBLIC	@DRLG_L3@4
PUBLIC	_DRLG_L3Pass3
EXTRN	_dmaxx:DWORD
EXTRN	_dmaxy:DWORD
EXTRN	_dminx:DWORD
EXTRN	_dminy:DWORD
EXTRN	_DRLG_InitTrans:NEAR
EXTRN	_DRLG_InitSetPC:NEAR
EXTRN	_DRLG_SetPC:NEAR
EXTRN	@DoLighting@16:NEAR
EXTRN	@SetRndSeed@4:NEAR
EXTRN	_dPiece:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CreateL3Dungeon@8
_TEXT	SEGMENT
@CreateL3Dungeon@8 PROC NEAR				; COMDAT
; _rseed$ = ecx
; _entry$ = edx
; Line 403
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	esi, edx
; Line 412
	call	@SetRndSeed@4
; Line 413
	push	16					; 00000010H
	pop	eax
; Line 415
	push	96					; 00000060H
	mov	DWORD PTR _dminx, eax
	mov	DWORD PTR _dminy, eax
	pop	eax
	mov	DWORD PTR _dmaxx, eax
; Line 416
	mov	DWORD PTR _dmaxy, eax
; Line 417
	call	_DRLG_InitTrans
; Line 418
	call	_DRLG_InitSetPC
; Line 419
	mov	ecx, esi
	call	@DRLG_L3@4
; Line 420
	call	_DRLG_L3Pass3
; Line 421
	xor	ebp, ebp
; Line 422
	mov	esi, OFFSET FLAT:_dPiece
$L85155:
; Line 424
	xor	ebx, ebx
; Line 425
	mov	edi, esi
$L85159:
; Line 427
	mov	eax, DWORD PTR [edi]
; Line 428
	cmp	eax, 56					; 00000038H
	jl	SHORT $L85164
	cmp	eax, 147				; 00000093H
	jle	SHORT $L85163
$L85164:
	cmp	eax, 154				; 0000009aH
	jl	SHORT $L85165
	cmp	eax, 161				; 000000a1H
	jle	SHORT $L85163
$L85165:
	cmp	eax, 150				; 00000096H
	je	SHORT $L85163
	cmp	eax, 152				; 00000098H
	jne	SHORT $L85162
$L85163:
; Line 429
	push	-1
	push	7
	mov	edx, ebp
	mov	ecx, ebx
	call	@DoLighting@16
$L85162:
; Line 430
	add	edi, 448				; 000001c0H
; Line 431
	inc	ebx
; Line 432
	cmp	ebx, 112				; 00000070H
	jl	SHORT $L85159
; Line 433
	add	esi, 4
; Line 434
	inc	ebp
; Line 435
	cmp	esi, OFFSET FLAT:_dPiece+448
	jl	SHORT $L85155
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 436
	jmp	_DRLG_SetPC
@CreateL3Dungeon@8 ENDP
_TEXT	ENDS
PUBLIC	_InitL3Dungeon
PUBLIC	@DRLG_L3FillRoom@16
PUBLIC	@DRLG_L3CreateBlock@16
PUBLIC	@DRLG_L3FloorArea@16
PUBLIC	_DRLG_L3FillDiags
PUBLIC	_DRLG_L3FillSingles
PUBLIC	_DRLG_L3FillStraights
PUBLIC	_DRLG_L3Edges
PUBLIC	_DRLG_L3GetFloorArea
PUBLIC	_DRLG_L3MakeMegas
PUBLIC	_DRLG_L3River
PUBLIC	_DRLG_L3Pool
PUBLIC	_DRLG_L3PoolFix
PUBLIC	@DRLG_L3PlaceMiniSet@28
PUBLIC	@DRLG_L3PlaceRndSet@8
PUBLIC	_DRLG_L3Wood
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
EXTRN	@DRLG_PlaceThemeRooms@20:NEAR
EXTRN	@QuestStatus@4:NEAR
EXTRN	_DRLG_Init_Globals:NEAR
EXTRN	_pdungeon:BYTE
EXTRN	_currlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L3@4
_TEXT	SEGMENT
_entry$ = -12
_v24$ = -8
@DRLG_L3@4 PROC NEAR					; COMDAT
; _entry$ = ecx
; Line 444
	sub	esp, 12					; 0000000cH
; Line 455
	and	BYTE PTR _lavapool, 0
	push	ebx
	push	ebp
	xor	ebx, ebx
	push	esi
	push	edi
	mov	DWORD PTR _entry$[esp+28], ecx
	inc	ebx
$L85188:
; Line 459
	call	_InitL3Dungeon
; Line 460
	push	20					; 00000014H
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	esi, eax
; Line 461
	xor	cl, cl
	push	20					; 00000014H
	add	esi, 10					; 0000000aH
	pop	edx
	call	@random@8
; Line 462
	lea	ebp, DWORD PTR [eax+12]
	lea	ecx, DWORD PTR [esi+2]
	lea	edi, DWORD PTR [eax+10]
	push	ebp
	mov	DWORD PTR -4+[esp+32], ecx
	push	ecx
	mov	edx, edi
	mov	ecx, esi
	call	@DRLG_L3FillRoom@16
; Line 463
	mov	edx, edi
	mov	ecx, esi
	push	0
	push	2
	call	@DRLG_L3CreateBlock@16
; Line 464
	mov	edx, edi
	mov	ecx, DWORD PTR -4+[esp+28]
	push	ebx
	push	2
	call	@DRLG_L3CreateBlock@16
; Line 465
	mov	edx, ebp
	mov	ecx, esi
	push	2
	push	2
	call	@DRLG_L3CreateBlock@16
; Line 466
	mov	edx, edi
	mov	ecx, esi
	push	3
	push	2
	call	@DRLG_L3CreateBlock@16
; Line 468
	push	10					; 0000000aH
	pop	ebp
	mov	ecx, ebp
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85191
; Line 469
	mov	edx, ebp
	xor	cl, cl
	call	@random@8
	mov	esi, eax
; Line 470
	mov	edx, ebp
	xor	cl, cl
	add	esi, ebp
	call	@random@8
; Line 471
	lea	ecx, DWORD PTR [eax+22]
	lea	edx, DWORD PTR [eax+10]
	push	ecx
	lea	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	ecx, esi
	call	@DRLG_L3FloorArea@16
$L85191:
; Line 473
	call	_DRLG_L3FillDiags
; Line 474
	call	_DRLG_L3FillSingles
; Line 475
	call	_DRLG_L3FillStraights
; Line 476
	call	_DRLG_L3FillDiags
; Line 477
	call	_DRLG_L3Edges
; Line 478
	call	_DRLG_L3GetFloorArea
	cmp	eax, 600				; 00000258H
	jl	$L85188
; Line 481
	call	_DRLG_L3Lockout
	movzx	eax, al
; Line 482
	test	eax, eax
	je	$L85188
; Line 483
	call	_DRLG_L3MakeMegas
; Line 484
	xor	edi, edi
; Line 485
	mov	ecx, OFFSET FLAT:_L3UP
	cmp	DWORD PTR _entry$[esp+28], edi
	mov	edx, ebx
	push	edi
	jne	SHORT $L85194
	or	esi, -1
	push	ebx
	push	esi
	push	esi
	push	ebx
	call	@DRLG_L3PlaceMiniSet@28
; Line 486
	cmp	eax, edi
	jne	$L85186
; Line 488
	push	ebx
	push	edi
	push	esi
	push	esi
	push	ebx
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:_L3DOWN
	call	@DRLG_L3PlaceMiniSet@28
; Line 489
	cmp	eax, edi
	jne	$L85186
; Line 491
	cmp	BYTE PTR _currlevel, 9
	jne	$LABEL_24$85198
; Line 493
	push	6
	push	edi
	push	esi
	push	esi
; Line 494
	jmp	$L86534
$L85194:
; Line 496
	push	edi
	push	-1
	push	-1
	push	ebx
	call	@DRLG_L3PlaceMiniSet@28
; Line 497
	cmp	DWORD PTR _entry$[esp+28], ebx
	jne	SHORT $L85200
; Line 498
	cmp	eax, edi
	jne	$L85186
; Line 500
	push	ebx
	push	ebx
	push	-1
	push	-1
	push	ebx
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:_L3DOWN
	call	@DRLG_L3PlaceMiniSet@28
; Line 501
	add	DWORD PTR _ViewX, 2
; Line 502
	sub	DWORD PTR _ViewY, 2
; Line 503
	cmp	eax, edi
	jne	SHORT $L85186
; Line 505
	cmp	BYTE PTR _currlevel, 9
	jne	SHORT $LABEL_24$85198
; Line 507
	and	BYTE PTR _v24$[esp+28], 0
	jmp	SHORT $LABEL_22$85204
$L85200:
; Line 515
	cmp	eax, edi
	jne	SHORT $L85186
; Line 517
	push	ebx
	push	edi
	push	-1
	push	-1
	push	ebx
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:_L3DOWN
	call	@DRLG_L3PlaceMiniSet@28
; Line 518
	cmp	eax, edi
	jne	SHORT $L85186
; Line 520
	cmp	BYTE PTR _currlevel, 9
	jne	SHORT $LABEL_24$85198
; Line 521
	mov	BYTE PTR _v24$[esp+28], bl
$LABEL_22$85204:
; Line 509
	push	6
	push	DWORD PTR _v24$[esp+32]
	push	-1
	push	-1
$L86534:
	mov	ecx, OFFSET FLAT:_L3HOLDWARP
	mov	edx, ebx
	push	ebx
	call	@DRLG_L3PlaceMiniSet@28
; Line 511
	cmp	eax, edi
$LABEL_23$85199:
	jne	SHORT $L85186
$LABEL_24$85198:
; Line 525
	mov	ecx, ebp
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85187
; Line 527
	call	_DRLG_L3Anvil
$L85186:
; Line 528
	cmp	eax, ebx
	je	$L85188
$L85187:
; Line 529
	call	_DRLG_L3Pool
; Line 530
	cmp	BYTE PTR _lavapool, 0
	je	$L85188
; Line 531
	call	_DRLG_L3PoolFix
; Line 532
	call	_FixL3Warp
; Line 533
	push	70					; 00000046H
	mov	ebx, OFFSET FLAT:_L3ISLE1
	pop	edx
	mov	ecx, ebx
	call	@DRLG_L3PlaceRndSet@8
; Line 534
	mov	edi, OFFSET FLAT:_L3ISLE2
	push	70					; 00000046H
	mov	ecx, edi
	pop	edx
	call	@DRLG_L3PlaceRndSet@8
; Line 535
	mov	ecx, OFFSET FLAT:_L3ISLE3
	push	30					; 0000001eH
	pop	esi
	mov	edx, esi
	call	@DRLG_L3PlaceRndSet@8
; Line 536
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3ISLE4
	call	@DRLG_L3PlaceRndSet@8
; Line 537
	mov	ecx, ebx
	push	100					; 00000064H
	pop	edx
	call	@DRLG_L3PlaceRndSet@8
; Line 538
	mov	ecx, edi
	push	100					; 00000064H
	pop	edx
	call	@DRLG_L3PlaceRndSet@8
; Line 539
	mov	ecx, OFFSET FLAT:_L3ISLE5
	push	90					; 0000005aH
	pop	edx
	call	@DRLG_L3PlaceRndSet@8
; Line 540
	call	_FixL3HallofHeroes
; Line 541
	call	_DRLG_L3River
; Line 543
	push	10					; 0000000aH
	pop	edi
	mov	ecx, edi
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85211
; Line 544
	mov	eax, DWORD PTR _setpc_x
	mov	ecx, DWORD PTR _setpc_y
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	BYTE PTR _dungeon[eax+285], 7
; Line 545
	mov	BYTE PTR _dungeon[eax+325], 7
; Line 546
	mov	BYTE PTR _dungeon[eax+365], 7
; Line 548
	lea	eax, DWORD PTR _dungeon[eax+405]
	mov	cl, BYTE PTR [eax]
	cmp	cl, 17					; 00000011H
	je	SHORT $L85212
	cmp	cl, 18					; 00000012H
	jne	SHORT $L85211
$L85212:
; Line 549
	mov	BYTE PTR [eax], 45			; 0000002dH
$L85211:
; Line 552
	push	0
	push	0
	push	7
	push	5
	mov	edx, edi
	pop	ecx
	call	@DRLG_PlaceThemeRooms@20
; Line 553
	call	_DRLG_L3Wood
; Line 554
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_L3TITE1
	call	@DRLG_L3PlaceRndSet@8
; Line 555
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_L3TITE2
	call	@DRLG_L3PlaceRndSet@8
; Line 556
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_L3TITE3
	call	@DRLG_L3PlaceRndSet@8
; Line 557
	mov	ecx, OFFSET FLAT:_L3TITE6
	push	20					; 00000014H
	pop	edi
	mov	edx, edi
	call	@DRLG_L3PlaceRndSet@8
; Line 558
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_L3TITE7
	call	@DRLG_L3PlaceRndSet@8
; Line 559
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_L3TITE8
	call	@DRLG_L3PlaceRndSet@8
; Line 560
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_L3TITE9
	call	@DRLG_L3PlaceRndSet@8
; Line 561
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_L3TITE10
	call	@DRLG_L3PlaceRndSet@8
; Line 562
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3TITE11
	call	@DRLG_L3PlaceRndSet@8
; Line 563
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_L3TITE12
	call	@DRLG_L3PlaceRndSet@8
; Line 564
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_L3TITE13
	call	@DRLG_L3PlaceRndSet@8
; Line 565
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV1
	call	@DRLG_L3PlaceRndSet@8
; Line 566
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV2
	call	@DRLG_L3PlaceRndSet@8
; Line 567
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV3
	call	@DRLG_L3PlaceRndSet@8
; Line 568
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV4
	call	@DRLG_L3PlaceRndSet@8
; Line 569
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV5
	call	@DRLG_L3PlaceRndSet@8
; Line 570
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV6
	call	@DRLG_L3PlaceRndSet@8
; Line 571
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV7
	call	@DRLG_L3PlaceRndSet@8
; Line 572
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV8
	call	@DRLG_L3PlaceRndSet@8
; Line 573
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV9
	call	@DRLG_L3PlaceRndSet@8
; Line 574
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV10
	call	@DRLG_L3PlaceRndSet@8
; Line 575
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3CREV11
	call	@DRLG_L3PlaceRndSet@8
; Line 576
	mov	ecx, OFFSET FLAT:_L3XTRA1
	push	25					; 00000019H
	pop	esi
	mov	edx, esi
	call	@DRLG_L3PlaceRndSet@8
; Line 577
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3XTRA2
	call	@DRLG_L3PlaceRndSet@8
; Line 578
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3XTRA3
	call	@DRLG_L3PlaceRndSet@8
; Line 579
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3XTRA4
	call	@DRLG_L3PlaceRndSet@8
; Line 580
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L3XTRA5
	call	@DRLG_L3PlaceRndSet@8
; Line 584
	mov	ecx, 400				; 00000190H
	mov	esi, OFFSET FLAT:_dungeon
	mov	edi, OFFSET FLAT:_pdungeon
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 588
	add	esp, 12					; 0000000cH
	jmp	_DRLG_Init_Globals
@DRLG_L3@4 ENDP
_TEXT	ENDS
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT _InitL3Dungeon
_TEXT	SEGMENT
_InitL3Dungeon PROC NEAR				; COMDAT
; Line 592
	push	edi
; Line 596
	push	1600					; 00000640H
	mov	edi, OFFSET FLAT:_dungeon
	push	0
	push	edi
	call	_memset
; Line 600
	mov	edx, 400				; 00000190H
	xor	eax, eax
	mov	ecx, edx
	add	esp, 12					; 0000000cH
	rep stosd
; Line 601
	mov	ecx, edx
	mov	edi, OFFSET FLAT:_dflags
	rep stosd
	pop	edi
; Line 604
	ret	0
_InitL3Dungeon ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L3FillRoom@16
_TEXT	SEGMENT
_x2$ = 8
_y2$ = 12
_v9$ = 8
_v11$ = 8
_i$ = 8
_v17$ = 12
_x2a$ = -4
@DRLG_L3FillRoom@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 607
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 629
	cmp	esi, 1
	mov	ebx, edx
; Line 630
	jle	$L85256
; Line 632
	mov	edi, DWORD PTR _x2$[ebp]
	cmp	edi, 34					; 00000022H
	jge	$L85256
	cmp	ebx, 1
	jle	$L85256
	cmp	DWORD PTR _y2$[ebp], 38			; 00000026H
	jge	$L85256
; Line 634
	xor	ecx, ecx
; Line 637
	cmp	ebx, DWORD PTR _y2$[ebp]
	mov	eax, ebx
	mov	DWORD PTR _x2a$[ebp], ebx
	jg	SHORT $LABEL_12$85267
$L85258:
; Line 639
	cmp	esi, edi
	jg	SHORT $L85264
; Line 640
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR _dungeon[eax+edx*8]
	mov	DWORD PTR _v9$[ebp], eax
; Line 641
	mov	eax, edi
	sub	eax, esi
	inc	eax
$L85262:
; Line 643
	mov	edx, DWORD PTR _v9$[ebp]
; Line 644
	add	DWORD PTR _v9$[ebp], 40			; 00000028H
	movzx	edx, BYTE PTR [edx]
	add	ecx, edx
; Line 645
	dec	eax
; Line 646
	jne	SHORT $L85262
$L85264:
; Line 648
	mov	eax, DWORD PTR _x2a$[ebp]
; Line 649
	mov	edx, DWORD PTR _y2$[ebp]
	inc	eax
	cmp	eax, edx
	mov	DWORD PTR _x2a$[ebp], eax
	jle	SHORT $L85258
; Line 650
	test	ecx, ecx
; Line 654
	jne	$L85256
$LABEL_12$85267:
; Line 657
	lea	edx, DWORD PTR [ebx+1]
; Line 658
	cmp	edx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _v11$[ebp], edx
	jge	SHORT $L85268
; Line 659
	lea	ecx, DWORD PTR [esi+1]
$L85269:
; Line 661
	cmp	ecx, edi
	jge	SHORT $L85275
; Line 662
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	edx, DWORD PTR _dungeon[edx+eax*8]
; Line 663
	mov	eax, edi
	sub	eax, ecx
$L85273:
; Line 665
	mov	BYTE PTR [edx], 1
; Line 666
	add	edx, 40					; 00000028H
; Line 667
	dec	eax
; Line 668
	jne	SHORT $L85273
$L85275:
; Line 670
	mov	edx, DWORD PTR _v11$[ebp]
	inc	edx
; Line 671
	cmp	edx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _v11$[ebp], edx
	jl	SHORT $L85269
$L85268:
; Line 674
	cmp	ebx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _i$[ebp], ebx
	jg	SHORT $L85278
$L85276:
; Line 675
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85279
; Line 676
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [esi+esi*4]
	mov	BYTE PTR _dungeon[ecx+eax*8], 1
$L85279:
; Line 677
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85277
; Line 678
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edi+edi*4]
	mov	BYTE PTR _dungeon[ecx+eax*8], 1
$L85277:
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _y2$[ebp]
	jle	SHORT $L85276
$L85278:
; Line 680
	cmp	esi, edi
	jg	SHORT $L85284
; Line 682
	mov	eax, DWORD PTR _y2$[ebp]
	lea	ecx, DWORD PTR [esi+esi*4]
; Line 683
	sub	edi, esi
	lea	ecx, DWORD PTR _dungeon[eax+ecx*8]
	inc	edi
	mov	DWORD PTR _v17$[ebp], ecx
; Line 684
	sub	ebx, eax
$L85282:
; Line 686
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85285
; Line 687
	mov	eax, DWORD PTR _v17$[ebp]
	mov	BYTE PTR [ebx+eax], 1
$L85285:
; Line 688
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85286
; Line 689
	mov	eax, DWORD PTR _v17$[ebp]
	mov	BYTE PTR [eax], 1
$L85286:
; Line 690
	add	DWORD PTR _v17$[ebp], 40		; 00000028H
; Line 691
	dec	edi
; Line 692
	jne	SHORT $L85282
$L85284:
; Line 694
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85236
$L85256:
; Line 633
	xor	eax, eax
$L85236:
	pop	edi
	pop	esi
	pop	ebx
; Line 695
	leave
	ret	8
@DRLG_L3FillRoom@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L3CreateBlock@16
_TEXT	SEGMENT
_obs$ = 8
_dir$ = 12
_v10$ = -1
_v11$ = -1
_y2$ = -24
_x2$ = -20
_i$ = -16
_v16$ = -12
_max$ = -8
@DRLG_L3CreateBlock@16 PROC NEAR			; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 698
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
; Line 711
	mov	edi, DWORD PTR _obs$[ebp]
	mov	esi, edi
; Line 713
	mov	DWORD PTR _v16$[ebp], edx
; Line 714
	mov	DWORD PTR _i$[ebp], ecx
$L85307:
; Line 715
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 716
	add	eax, 3
; Line 717
	xor	cl, cl
	push	2
	mov	DWORD PTR _max$[ebp], eax
	pop	edx
	call	@random@8
	mov	ebx, eax
	add	ebx, 3
; Line 718
	cmp	DWORD PTR _dir$[ebp], 0
	jne	SHORT $L85310
; Line 719
	mov	edi, DWORD PTR _v16$[ebp]
; Line 721
	mov	edx, DWORD PTR _max$[ebp]
	lea	eax, DWORD PTR [edi-1]
	sub	edi, ebx
	dec	edi
	cmp	edx, DWORD PTR _obs$[ebp]
	mov	DWORD PTR _y2$[ebp], eax
	jge	SHORT $L85311
; Line 722
	xor	cl, cl
	call	@random@8
	mov	esi, eax
	add	esi, DWORD PTR _i$[ebp]
$L85311:
; Line 724
	mov	edx, DWORD PTR _max$[ebp]
	cmp	edx, DWORD PTR _obs$[ebp]
	jne	SHORT $L86568
; Line 725
	mov	esi, DWORD PTR _i$[ebp]
$L86568:
; Line 726
	jle	SHORT $L85313
; Line 727
	xor	cl, cl
	call	@random@8
	mov	esi, DWORD PTR _i$[ebp]
	sub	esi, eax
$L85313:
; Line 729
	mov	eax, DWORD PTR _max$[ebp]
	add	eax, esi
	mov	DWORD PTR _x2$[ebp], eax
$L85310:
; Line 731
	cmp	DWORD PTR _dir$[ebp], 3
	jne	SHORT $L85314
; Line 732
	mov	esi, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [esi-1]
; Line 733
	sub	esi, DWORD PTR _max$[ebp]
	mov	DWORD PTR _x2$[ebp], eax
	dec	esi
; Line 734
	cmp	ebx, DWORD PTR _obs$[ebp]
	sete	BYTE PTR _v10$[ebp]
; Line 735
	cmp	ebx, DWORD PTR _obs$[ebp]
	jge	SHORT $L85315
; Line 736
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	mov	edi, eax
; Line 737
	mov	al, BYTE PTR _v10$[ebp]
	add	edi, DWORD PTR _v16$[ebp]
	mov	BYTE PTR _v10$[ebp], al
$L85315:
; Line 739
	cmp	BYTE PTR _v10$[ebp], 0
	je	SHORT $L85316
; Line 740
	mov	edi, DWORD PTR _v16$[ebp]
$L85316:
; Line 741
	cmp	ebx, DWORD PTR _obs$[ebp]
	jle	SHORT $L85317
; Line 742
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	mov	edi, DWORD PTR _v16$[ebp]
	sub	edi, eax
$L85317:
; Line 744
	lea	eax, DWORD PTR [ebx+edi]
	mov	DWORD PTR _y2$[ebp], eax
$L85314:
; Line 746
	cmp	DWORD PTR _dir$[ebp], 2
	jne	SHORT $L85318
; Line 747
	mov	eax, DWORD PTR _v16$[ebp]
; Line 749
	mov	edx, DWORD PTR _max$[ebp]
	cmp	edx, DWORD PTR _obs$[ebp]
	lea	edi, DWORD PTR [eax+1]
	lea	eax, DWORD PTR [ebx+eax+1]
	mov	DWORD PTR _y2$[ebp], eax
	jge	SHORT $L85319
; Line 750
	xor	cl, cl
	call	@random@8
	mov	esi, eax
	add	esi, DWORD PTR _i$[ebp]
$L85319:
; Line 752
	mov	edx, DWORD PTR _max$[ebp]
	cmp	edx, DWORD PTR _obs$[ebp]
	jne	SHORT $L86569
; Line 753
	mov	esi, DWORD PTR _i$[ebp]
$L86569:
; Line 754
	jle	SHORT $L85321
; Line 755
	xor	cl, cl
	call	@random@8
	mov	esi, DWORD PTR _i$[ebp]
	sub	esi, eax
$L85321:
; Line 757
	mov	eax, DWORD PTR _max$[ebp]
	add	eax, esi
	mov	DWORD PTR _x2$[ebp], eax
$L85318:
; Line 759
	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $L85322
; Line 760
	mov	eax, DWORD PTR _i$[ebp]
; Line 761
	cmp	ebx, DWORD PTR _obs$[ebp]
; Line 762
	mov	ecx, DWORD PTR _max$[ebp]
	lea	esi, DWORD PTR [eax+1]
	sete	BYTE PTR _v11$[ebp]
; Line 763
	cmp	ebx, DWORD PTR _obs$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _x2$[ebp], eax
	jge	SHORT $L85323
; Line 764
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	mov	edi, eax
; Line 765
	mov	al, BYTE PTR _v11$[ebp]
	add	edi, DWORD PTR _v16$[ebp]
	mov	BYTE PTR _v11$[ebp], al
$L85323:
; Line 767
	cmp	BYTE PTR _v11$[ebp], 0
	je	SHORT $L85324
; Line 768
	mov	edi, DWORD PTR _v16$[ebp]
$L85324:
; Line 769
	cmp	ebx, DWORD PTR _obs$[ebp]
	jle	SHORT $L85325
; Line 770
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	mov	edi, DWORD PTR _v16$[ebp]
	sub	edi, eax
$L85325:
; Line 772
	lea	eax, DWORD PTR [ebx+edi]
	mov	DWORD PTR _y2$[ebp], eax
$L85322:
; Line 774
	push	DWORD PTR _y2$[ebp]
	mov	edx, edi
	mov	ecx, esi
	push	DWORD PTR _x2$[ebp]
	call	@DRLG_L3FillRoom@16
	cmp	eax, 1
	jne	SHORT $L86562
; Line 776
	push	4
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L86562
; Line 778
	cmp	DWORD PTR _dir$[ebp], 2
	je	SHORT $L85328
; Line 779
	push	0
	push	ebx
	mov	edx, edi
	mov	ecx, esi
	call	@DRLG_L3CreateBlock@16
$L85328:
; Line 780
	cmp	DWORD PTR _dir$[ebp], 3
	je	SHORT $L85329
; Line 781
	mov	ecx, DWORD PTR _x2$[ebp]
	push	1
	push	DWORD PTR _max$[ebp]
	mov	edx, edi
	call	@DRLG_L3CreateBlock@16
$L85329:
; Line 782
	cmp	DWORD PTR _dir$[ebp], 0
	je	SHORT $L85330
; Line 783
	mov	edx, DWORD PTR _y2$[ebp]
	push	2
	push	ebx
	mov	ecx, esi
	call	@DRLG_L3CreateBlock@16
$L85330:
; Line 784
	cmp	DWORD PTR _dir$[ebp], 1
	je	SHORT $L86562
; Line 787
	mov	eax, DWORD PTR _max$[ebp]
	mov	DWORD PTR _dir$[ebp], 3
	mov	DWORD PTR _obs$[ebp], eax
; Line 788
	mov	DWORD PTR _v16$[ebp], edi
	mov	DWORD PTR _i$[ebp], esi
	jmp	$L85307
$L86562:
	pop	edi
	pop	esi
	pop	ebx
; Line 790
	leave
	ret	8
@DRLG_L3CreateBlock@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L3FloorArea@16
_TEXT	SEGMENT
_x2$ = 8
_y2$ = 12
@DRLG_L3FloorArea@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 798
	cmp	edx, DWORD PTR _y2$[esp-4]
	push	esi
	mov	esi, edx
	jg	SHORT $L85346
$L85344:
; Line 799
	cmp	ecx, DWORD PTR _x2$[esp]
	jg	SHORT $L85350
; Line 800
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	edx, DWORD PTR _dungeon[esi+eax*8]
; Line 801
	mov	eax, DWORD PTR _x2$[esp]
	sub	eax, ecx
	inc	eax
$L85348:
; Line 803
	mov	BYTE PTR [edx], 1
; Line 804
	add	edx, 40					; 00000028H
; Line 805
	dec	eax
; Line 806
	jne	SHORT $L85348
$L85350:
; Line 798
	inc	esi
	cmp	esi, DWORD PTR _y2$[esp]
	jle	SHORT $L85344
$L85346:
	pop	esi
; Line 809
	ret	8
@DRLG_L3FloorArea@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L3FillDiags
_TEXT	SEGMENT
_DRLG_L3FillDiags PROC NEAR				; COMDAT
; Line 812
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 819
	xor	ebx, ebx
$L85357:
; Line 821
	push	39					; 00000027H
	lea	esi, DWORD PTR _dungeon[ebx+41]
	pop	ebp
$L85360:
; Line 826
	movzx	eax, BYTE PTR [esi-41]
	movzx	ecx, BYTE PTR [esi-1]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR [esi-40]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR [esi]
	lea	edi, DWORD PTR [ecx+eax*2]
; Line 827
	cmp	edi, 6
	jne	SHORT $L85367
; Line 828
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $L85368
; Line 829
	mov	BYTE PTR [esi-41], 1
; Line 830
	jmp	SHORT $LABEL_11$85369
$L85368:
; Line 832
	mov	BYTE PTR [esi], 1
$L85367:
; Line 834
	cmp	edi, 9
	jne	SHORT $LABEL_11$85369
; Line 835
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85371
; Line 836
	mov	BYTE PTR [esi-40], 1
; Line 837
	jmp	SHORT $LABEL_11$85369
$L85371:
; Line 838
	mov	BYTE PTR [esi-1], 1
$LABEL_11$85369:
; Line 841
	add	esi, 40					; 00000028H
; Line 843
	dec	ebp
	jne	SHORT $L85360
; Line 844
	inc	ebx
; Line 845
	cmp	ebx, 39					; 00000027H
	jl	SHORT $L85357
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 846
	ret	0
_DRLG_L3FillDiags ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L3FillSingles
_TEXT	SEGMENT
_DRLG_L3FillSingles PROC NEAR				; COMDAT
; Line 854
	xor	ecx, ecx
	push	esi
	inc	ecx
	push	edi
$L85377:
; Line 856
	push	38					; 00000026H
	lea	eax, DWORD PTR _dungeon[ecx+39]
	pop	edx
$L85380:
; Line 862
	cmp	BYTE PTR [eax+1], 0
	jne	SHORT $L85391
	movzx	esi, BYTE PTR [eax-40]
	movzx	edi, BYTE PTR [eax+40]
	add	esi, edi
	movzx	edi, BYTE PTR [eax]
	add	esi, edi
	cmp	esi, 3
	jne	SHORT $L85391
	movzx	esi, BYTE PTR [eax+41]
	movzx	edi, BYTE PTR [eax-39]
	add	esi, edi
	cmp	esi, 2
	jne	SHORT $L85391
	movzx	esi, BYTE PTR [eax+42]
	movzx	edi, BYTE PTR [eax-38]
	add	esi, edi
	movzx	edi, BYTE PTR [eax+2]
	add	esi, edi
	cmp	esi, 3
	jne	SHORT $L85391
; Line 863
	mov	BYTE PTR [eax+1], 1
$L85391:
; Line 865
	add	eax, 40					; 00000028H
; Line 867
	dec	edx
	jne	SHORT $L85380
; Line 868
	inc	ecx
; Line 869
	cmp	ecx, 39					; 00000027H
	jl	SHORT $L85377
	pop	edi
	pop	esi
; Line 870
	ret	0
_DRLG_L3FillSingles ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L3FillStraights
_TEXT	SEGMENT
_v1$ = -24
_v7$ = -24
_v22$ = -20
_v23$ = -20
_v24$ = -4
_v25$ = -16
_v26$ = -16
_v27$ = -12
_v28$ = -8
_v29$ = -8
_v30$ = -12
_DRLG_L3FillStraights PROC NEAR				; COMDAT
; Line 873
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 906
	and	DWORD PTR _v27$[ebp], 0
	push	ebx
	push	esi
	push	edi
; Line 907
	xor	edi, edi
$L85423:
; Line 912
	mov	eax, DWORD PTR _v27$[ebp]
	xor	ecx, ecx
	and	DWORD PTR _v29$[ebp], ecx
; Line 913
	lea	esi, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR _dungeon[eax+1]
	shl	esi, 3
; Line 914
	and	DWORD PTR _v25$[ebp], ecx
	mov	ebx, eax
; Line 915
	mov	DWORD PTR _v22$[ebp], eax
$L85427:
; Line 917
	cmp	BYTE PTR [ebx-1], 0
	jne	SHORT $L85431
	cmp	BYTE PTR [ebx], 1
	jne	SHORT $L85431
; Line 936
	test	ecx, ecx
	jne	SHORT $L85440
; Line 937
	mov	edi, DWORD PTR _v29$[ebp]
; Line 938
	mov	esi, DWORD PTR _v25$[ebp]
$L85440:
; Line 940
	inc	ecx
	jmp	SHORT $L85439
$L85431:
; Line 918
	cmp	ecx, 3
	jle	SHORT $L85434
; Line 919
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85434
; Line 920
	cmp	edi, DWORD PTR _v29$[ebp]
	jge	SHORT $L85434
; Line 922
	mov	eax, DWORD PTR _v27$[ebp]
	mov	ebx, DWORD PTR _v29$[ebp]
	sub	ebx, edi
	lea	eax, DWORD PTR _dungeon[eax+1]
	lea	eax, DWORD PTR [eax+esi-1]
	jmp	SHORT $L85436
$L86603:
	mov	eax, DWORD PTR _v24$[ebp]
$L85436:
; Line 925
	mov	DWORD PTR _v1$[ebp], eax
	push	2
; Line 926
	add	eax, 40					; 00000028H
	pop	edx
	xor	cl, cl
	mov	DWORD PTR _v24$[ebp], eax
; Line 927
	dec	ebx
	call	@random@8
; Line 928
	mov	ecx, DWORD PTR _v1$[ebp]
; Line 929
	test	ebx, ebx
	mov	BYTE PTR [ecx], al
	jne	SHORT $L86603
; Line 930
	mov	ebx, DWORD PTR _v22$[ebp]
$L85434:
; Line 934
	xor	ecx, ecx
$L85439:
; Line 942
	add	DWORD PTR _v25$[ebp], 40		; 00000028H
; Line 943
	inc	DWORD PTR _v29$[ebp]
; Line 944
	add	ebx, 40					; 00000028H
; Line 946
	cmp	DWORD PTR _v25$[ebp], 1480		; 000005c8H
	mov	DWORD PTR _v22$[ebp], ebx
	jl	SHORT $L85427
; Line 947
	inc	DWORD PTR _v27$[ebp]
; Line 948
	cmp	DWORD PTR _v27$[ebp], 39		; 00000027H
	jl	$L85423
; Line 949
	and	DWORD PTR _v28$[ebp], 0
$L85441:
; Line 954
	mov	eax, DWORD PTR _v28$[ebp]
	xor	ecx, ecx
; Line 955
	and	DWORD PTR _v26$[ebp], ecx
; Line 956
	lea	esi, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR _dungeon[eax+1]
	mov	DWORD PTR _v30$[ebp], ecx
	mov	ebx, eax
; Line 957
	mov	DWORD PTR _v23$[ebp], eax
	shl	esi, 3
$L85445:
; Line 959
	cmp	BYTE PTR [ebx-1], 1
	jne	SHORT $L85449
	cmp	BYTE PTR [ebx], 0
	jne	SHORT $L85449
; Line 978
	test	ecx, ecx
	jne	SHORT $L85457
; Line 979
	mov	edi, DWORD PTR _v30$[ebp]
; Line 980
	mov	esi, DWORD PTR _v26$[ebp]
$L85457:
; Line 982
	inc	ecx
	jmp	SHORT $L85456
$L85449:
; Line 960
	cmp	ecx, 3
	jle	SHORT $L85452
; Line 961
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85452
; Line 962
	cmp	edi, DWORD PTR _v30$[ebp]
	jge	SHORT $L85452
; Line 964
	mov	eax, DWORD PTR _v28$[ebp]
	mov	ebx, DWORD PTR _v30$[ebp]
	sub	ebx, edi
	lea	eax, DWORD PTR _dungeon[eax+1]
	add	eax, esi
	jmp	SHORT $L85453
$L86602:
	mov	eax, DWORD PTR _v24$[ebp]
$L85453:
; Line 967
	mov	DWORD PTR _v7$[ebp], eax
	push	2
; Line 968
	add	eax, 40					; 00000028H
	pop	edx
	xor	cl, cl
	mov	DWORD PTR _v24$[ebp], eax
; Line 969
	dec	ebx
	call	@random@8
; Line 970
	mov	ecx, DWORD PTR _v7$[ebp]
; Line 971
	test	ebx, ebx
	mov	BYTE PTR [ecx], al
	jne	SHORT $L86602
; Line 972
	mov	ebx, DWORD PTR _v23$[ebp]
$L85452:
; Line 976
	xor	ecx, ecx
$L85456:
; Line 984
	add	DWORD PTR _v26$[ebp], 40		; 00000028H
; Line 985
	inc	DWORD PTR _v30$[ebp]
; Line 986
	add	ebx, 40					; 00000028H
; Line 988
	cmp	DWORD PTR _v26$[ebp], 1480		; 000005c8H
	mov	DWORD PTR _v23$[ebp], ebx
	jl	SHORT $L85445
; Line 989
	inc	DWORD PTR _v28$[ebp]
; Line 990
	cmp	DWORD PTR _v28$[ebp], 39		; 00000027H
	jl	$L85441
; Line 991
	xor	ebx, ebx
$L85458:
; Line 993
	xor	eax, eax
; Line 994
	xor	esi, esi
$L85461:
; Line 996
	cmp	BYTE PTR _dungeon[ebx+esi], 0
	jne	SHORT $L85465
	cmp	BYTE PTR _dungeon[ebx+esi+40], 1
	jne	SHORT $L85465
; Line 1006
	test	eax, eax
	jne	SHORT $L85473
; Line 1007
	mov	DWORD PTR _v24$[ebp], esi
$L85473:
; Line 1008
	inc	eax
	jmp	SHORT $L85472
$L85465:
; Line 997
	cmp	eax, 3
	jle	SHORT $L85471
; Line 998
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85471
; Line 999
	mov	edi, DWORD PTR _v24$[ebp]
	jmp	SHORT $L86610
$L85469:
; Line 1000
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	BYTE PTR _dungeon[ebx+edi], al
	inc	edi
$L86610:
; Line 999
	cmp	edi, esi
	jl	SHORT $L85469
$L85471:
; Line 1004
	xor	eax, eax
$L85472:
; Line 1010
	inc	esi
; Line 1011
	cmp	esi, 37					; 00000025H
	jl	SHORT $L85461
; Line 1012
	add	ebx, 40					; 00000028H
; Line 1013
	cmp	ebx, 1560				; 00000618H
	jl	SHORT $L85458
; Line 1014
	xor	ebx, ebx
$L85475:
; Line 1016
	xor	eax, eax
; Line 1017
	xor	esi, esi
$L85478:
; Line 1019
	cmp	BYTE PTR _dungeon[ebx+esi], 1
	jne	SHORT $L85482
	cmp	BYTE PTR _dungeon[ebx+esi+40], 0
	jne	SHORT $L85482
; Line 1029
	test	eax, eax
	jne	SHORT $L85490
; Line 1030
	mov	DWORD PTR _v24$[ebp], esi
$L85490:
; Line 1031
	inc	eax
	jmp	SHORT $L85489
$L85482:
; Line 1020
	cmp	eax, 3
	jle	SHORT $L85488
; Line 1021
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85488
; Line 1022
	mov	edi, DWORD PTR _v24$[ebp]
	jmp	SHORT $L86611
$L85486:
; Line 1023
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	BYTE PTR _dungeon[ebx+edi+40], al
	inc	edi
$L86611:
; Line 1022
	cmp	edi, esi
	jl	SHORT $L85486
$L85488:
; Line 1027
	xor	eax, eax
$L85489:
; Line 1033
	inc	esi
; Line 1034
	cmp	esi, 37					; 00000025H
	jl	SHORT $L85478
; Line 1035
	add	ebx, 40					; 00000028H
; Line 1036
	cmp	ebx, 1560				; 00000618H
	jl	SHORT $L85475
	pop	edi
	pop	esi
	pop	ebx
; Line 1037
	leave
	ret	0
_DRLG_L3FillStraights ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L3Edges
_TEXT	SEGMENT
_DRLG_L3Edges PROC NEAR					; COMDAT
; Line 1043
	push	40					; 00000028H
	push	0
	push	OFFSET FLAT:_dungeon+1560
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1044
	mov	eax, OFFSET FLAT:_dungeon+39
$L85495:
; Line 1046
	and	BYTE PTR [eax], 0
; Line 1047
	add	eax, 40					; 00000028H
; Line 1048
	cmp	eax, OFFSET FLAT:_dungeon+1639
	jl	SHORT $L85495
; Line 1049
	ret	0
_DRLG_L3Edges ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L3GetFloorArea
_TEXT	SEGMENT
_DRLG_L3GetFloorArea PROC NEAR				; COMDAT
; Line 1057
	xor	eax, eax
	mov	edx, OFFSET FLAT:_dungeon
	push	esi
$L85504:
; Line 1060
	xor	ecx, ecx
$L85507:
; Line 1061
	movsx	esi, BYTE PTR [edx+ecx]
	add	eax, esi
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85507
	add	edx, 40					; 00000028H
	cmp	edx, OFFSET FLAT:_dungeon+1600
	jl	SHORT $L85504
	pop	esi
; Line 1065
	ret	0
_DRLG_L3GetFloorArea ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L3MakeMegas
_TEXT	SEGMENT
_DRLG_L3MakeMegas PROC NEAR				; COMDAT
; Line 1068
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1076
	xor	ebx, ebx
$L85517:
; Line 1078
	push	39					; 00000027H
	lea	esi, DWORD PTR _dungeon[ebx+1]
	pop	ebp
$L85520:
; Line 1082
	movzx	eax, BYTE PTR [esi-1]
; Line 1097
	lea	edi, DWORD PTR [esi+40]
	movzx	ecx, BYTE PTR [edi-1]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR [edi]
	lea	eax, DWORD PTR [ecx+eax*2]
	cmp	eax, 6
	jne	SHORT $L85527
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $L85528
	push	12					; 0000000cH
	pop	eax
	jmp	SHORT $LABEL_9$85529
$L85528:
; Line 1088
	push	5
	pop	eax
$L85527:
; Line 1090
	cmp	eax, 9
	jne	SHORT $LABEL_9$85529
; Line 1091
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	neg	eax
	sbb	eax, eax
	neg	eax
	add	eax, 13					; 0000000dH
$LABEL_9$85529:
; Line 1095
	mov	al, BYTE PTR _L3ConvTbl[eax]
; Line 1097
	dec	ebp
	mov	BYTE PTR [esi-1], al
	mov	esi, edi
	jne	SHORT $L85520
; Line 1098
	mov	BYTE PTR _dungeon[ebx+1560], 8
	inc	ebx
; Line 1099
	cmp	ebx, 39					; 00000027H
	jl	SHORT $L85517
	pop	edi
	pop	esi
	pop	ebp
; Line 1100
	mov	eax, OFFSET FLAT:_dungeon+39
	pop	ebx
$L85531:
; Line 1102
	mov	BYTE PTR [eax], 8
; Line 1103
	add	eax, 40					; 00000028H
; Line 1104
	cmp	eax, OFFSET FLAT:_dungeon+1639
	jl	SHORT $L85531
; Line 1105
	ret	0
_DRLG_L3MakeMegas ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L3River
_TEXT	SEGMENT
_v0$ = -4
_v7$ = -4
_river$ = -1264
_v36$ = -60
_v37$ = -56
_v38$ = -64
_v39$ = -48
_v40$ = -12
_v41$ = -44
_v42$ = -40
_v43$ = -32
_v44$ = -28
_v45$ = -24
_v46$ = -20
_v47$ = -8
_v48$ = -36
_max$ = -16
_DRLG_L3River PROC NEAR					; COMDAT
; Line 1108
	push	ebp
	mov	ebp, esp
	sub	esp, 1264				; 000004f0H
	push	ebx
; Line 1160
	xor	eax, eax
	push	esi
	push	edi
	mov	DWORD PTR _v0$[ebp], eax
; Line 1161
	mov	DWORD PTR _v39$[ebp], eax
; Line 1162
	mov	DWORD PTR _v41$[ebp], eax
$L85587:
; Line 1164
	and	DWORD PTR _v47$[ebp], 0
$L85589:
; Line 1166
	cmp	DWORD PTR _v41$[ebp], 200		; 000000c8H
	jge	$L86647
; Line 1170
	inc	DWORD PTR _v41$[ebp]
; Line 1172
	push	40					; 00000028H
	xor	esi, esi
	xor	edi, edi
	pop	ebx
$L85594:
; Line 1174
	lea	eax, DWORD PTR [esi+esi*4]
	mov	al, BYTE PTR _dungeon[edi+eax*8]
; Line 1175
	cmp	al, 25					; 00000019H
	jb	SHORT $L85598
	cmp	al, 28					; 0000001cH
	jbe	SHORT $L86643
$L85598:
; Line 1177
	cmp	DWORD PTR _v0$[ebp], 100		; 00000064H
	jge	$L86644
; Line 1179
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
; Line 1180
	mov	edx, ebx
	xor	cl, cl
	mov	esi, eax
	call	@random@8
; Line 1181
	inc	DWORD PTR _v0$[ebp]
	mov	edi, eax
$L85601:
; Line 1183
	lea	eax, DWORD PTR [esi+esi*4]
	mov	al, BYTE PTR _dungeon[edi+eax*8]
; Line 1184
	cmp	al, 25					; 00000019H
	jb	SHORT $L85605
	cmp	al, 28					; 0000001cH
	jbe	SHORT $L85594
$L85605:
; Line 1186
	cmp	edi, ebx
	jge	SHORT $L85594
; Line 1188
	inc	esi
	cmp	esi, ebx
	jl	SHORT $L85601
; Line 1189
	xor	esi, esi
; Line 1190
	inc	edi
	jmp	SHORT $L85601
$L86643:
; Line 1194
	cmp	DWORD PTR _v0$[ebp], 100		; 00000064H
	jge	$L86644
; Line 1196
	lea	eax, DWORD PTR [esi+esi*4]
	shl	eax, 3
	movsx	ecx, BYTE PTR _dungeon[eax+edi]
	sub	ecx, 25					; 00000019H
	je	SHORT $L85613
	dec	ecx
	je	SHORT $L85614
	dec	ecx
	je	SHORT $L85615
	dec	ecx
	jne	SHORT $L85610
; Line 1213
	mov	DWORD PTR _v48$[ebp], 2
; Line 1214
	mov	DWORD PTR _v42$[ebp], 3
; Line 1215
	mov	DWORD PTR _river$[ebp+800], 39		; 00000027H
; Line 1216
	jmp	SHORT $L85610
$L85615:
; Line 1208
	and	DWORD PTR _v42$[ebp], 0
; Line 1209
	mov	DWORD PTR _v48$[ebp], 1
; Line 1210
	mov	DWORD PTR _river$[ebp+800], 41		; 00000029H
; Line 1211
	jmp	SHORT $L85610
$L85614:
; Line 1203
	and	DWORD PTR _v48$[ebp], 0
; Line 1204
	mov	DWORD PTR _v42$[ebp], 1
; Line 1205
	mov	DWORD PTR _river$[ebp+800], 38		; 00000026H
; Line 1206
	jmp	SHORT $L85610
$L85613:
; Line 1198
	mov	DWORD PTR _v48$[ebp], 3
; Line 1199
	mov	DWORD PTR _v42$[ebp], 2
; Line 1200
	mov	DWORD PTR _river$[ebp+800], ebx
$L85610:
; Line 1218
	and	DWORD PTR _v43$[ebp], 0
; Line 1219
	xor	ebx, ebx
; Line 1223
	push	4
	inc	ebx
	pop	ecx
	mov	DWORD PTR _max$[ebp], ebx
	mov	DWORD PTR _river$[ebp], esi
	mov	DWORD PTR _river$[ebp+400], edi
	mov	DWORD PTR _v46$[ebp], ecx
; Line 1224
	mov	DWORD PTR _v45$[ebp], eax
	mov	DWORD PTR -52+[ebp], ecx
$L85618:
; Line 1227
	mov	eax, DWORD PTR _v45$[ebp]
; Line 1229
	cmp	DWORD PTR _v43$[ebp], 0
	mov	DWORD PTR _v38$[ebp], esi
	mov	DWORD PTR _v36$[ebp], eax
	mov	DWORD PTR _v37$[ebp], edi
	je	SHORT $L85620
; Line 1230
	mov	ecx, DWORD PTR _v48$[ebp]
	inc	ecx
	and	ecx, 3
; Line 1231
	mov	DWORD PTR _v7$[ebp], ecx
; Line 1232
	jmp	SHORT $L85624
$L85620:
; Line 1234
	mov	ebx, DWORD PTR _max$[ebp]
	push	4
	pop	edx
	xor	cl, cl
	call	@random@8
; Line 1235
	mov	DWORD PTR _v7$[ebp], eax
$L86706:
	mov	ecx, DWORD PTR _v7$[ebp]
$L85624:
; Line 1239
	inc	DWORD PTR _v43$[ebp]
; Line 1240
	cmp	ecx, DWORD PTR _v42$[ebp]
	je	SHORT $L85626
	cmp	ecx, DWORD PTR _v46$[ebp]
	jne	SHORT $L86645
$L85626:
; Line 1242
	inc	ecx
	and	ecx, 3
	mov	DWORD PTR _v7$[ebp], ecx
	jmp	SHORT $L86706
$L86645:
; Line 1245
	test	ecx, ecx
	mov	DWORD PTR _v48$[ebp], ecx
	jne	SHORT $L85628
; Line 1246
	test	edi, edi
	jle	SHORT $LABEL_44$85630
; Line 1248
	dec	edi
$L85628:
; Line 1250
	cmp	ecx, 1
	jne	SHORT $L85631
; Line 1251
	cmp	edi, 40					; 00000028H
	jge	SHORT $LABEL_44$85630
; Line 1253
	inc	edi
$L85631:
; Line 1255
	cmp	ecx, 2
	jne	SHORT $LABEL_41$85634
; Line 1257
	cmp	esi, 40					; 00000028H
	jge	SHORT $LABEL_44$85630
; Line 1258
	inc	esi
; Line 1259
	add	DWORD PTR _v45$[ebp], 40		; 00000028H
$LABEL_41$85634:
; Line 1261
	cmp	ecx, 3
	jne	SHORT $LABEL_44$85630
	test	esi, esi
	jle	SHORT $LABEL_44$85630
; Line 1262
	dec	esi
; Line 1263
	sub	DWORD PTR _v45$[ebp], 40		; 00000028H
$LABEL_44$85630:
; Line 1267
	mov	eax, DWORD PTR _v45$[ebp]
	cmp	BYTE PTR _dungeon[eax+edi], 7
	jne	$L85637
; Line 1268
	and	DWORD PTR _v43$[ebp], 0
; Line 1269
	cmp	ecx, 2
	jge	SHORT $L85638
; Line 1271
	mov	ebx, DWORD PTR _max$[ebp]
	push	2
	pop	edx
	xor	cl, cl
	call	@random@8
; Line 1272
	mov	ecx, DWORD PTR -52+[ebp]
	movzx	eax, al
	add	eax, 17					; 00000011H
	mov	DWORD PTR _river$[ebp+ecx+800], eax
	mov	ecx, DWORD PTR _v7$[ebp]
$L85638:
; Line 1274
	cmp	ecx, 1
	jle	SHORT $L85639
; Line 1276
	mov	ebx, DWORD PTR _max$[ebp]
	push	2
	pop	edx
	xor	cl, cl
	call	@random@8
; Line 1277
	mov	ecx, DWORD PTR -52+[ebp]
	movzx	eax, al
	add	eax, 15					; 0000000fH
	mov	DWORD PTR _river$[ebp+ecx+800], eax
	mov	ecx, DWORD PTR _v7$[ebp]
$L85639:
; Line 1280
	mov	DWORD PTR _river$[ebp+ebx*4], esi
; Line 1281
	mov	DWORD PTR _river$[ebp+ebx*4+400], edi
	inc	ebx
	mov	eax, ebx
; Line 1282
	mov	DWORD PTR _max$[ebp], ebx
	shl	eax, 2
; Line 1283
	test	ecx, ecx
	mov	DWORD PTR -52+[ebp], eax
	jne	SHORT $L85641
	cmp	DWORD PTR _v40$[ebp], 2
	je	SHORT $L85644
$L85641:
; Line 1284
	cmp	ecx, 3
	jne	SHORT $LABEL_58$85643
; Line 1286
	cmp	DWORD PTR _v40$[ebp], 1
	jne	SHORT $LABEL_70$85645
$L85644:
; Line 1289
	cmp	ebx, 2
	jle	SHORT $L85646
; Line 1290
	mov	DWORD PTR _river$[ebp+eax+792], 22	; 00000016H
$L85646:
; Line 1291
	test	ecx, ecx
	jne	SHORT $L85647
; Line 1292
	mov	DWORD PTR _v46$[ebp], 1
	jmp	SHORT $LABEL_59$85648
$L85647:
; Line 1298
	mov	DWORD PTR _v46$[ebp], 2
$LABEL_58$85643:
; Line 1300
	test	ecx, ecx
	jne	SHORT $LABEL_60$85651
$LABEL_59$85648:
; Line 1294
	cmp	DWORD PTR _v40$[ebp], 3
	je	SHORT $LABEL_62$85650
$LABEL_60$85651:
; Line 1303
	cmp	ecx, 2
	jne	SHORT $LABEL_67$85654
; Line 1305
	cmp	DWORD PTR _v40$[ebp], 1
	jne	SHORT $LABEL_79$85656
$LABEL_62$85650:
; Line 1308
	cmp	ebx, 2
	jle	SHORT $L85657
; Line 1309
	mov	DWORD PTR _river$[ebp+eax+792], 21	; 00000015H
$L85657:
; Line 1310
	test	ecx, ecx
	jne	SHORT $L85658
; Line 1311
	mov	DWORD PTR _v46$[ebp], 1
; Line 1312
	jmp	SHORT $LABEL_83$85659
$L85658:
; Line 1314
	mov	DWORD PTR _v46$[ebp], 3
$LABEL_67$85654:
; Line 1316
	cmp	ecx, 1
	jne	SHORT $L85661
	cmp	DWORD PTR _v40$[ebp], 2
	je	SHORT $L85664
$L85661:
; Line 1317
	cmp	ecx, 3
	jne	SHORT $LABEL_76$85663
$LABEL_70$85645:
; Line 1320
	cmp	DWORD PTR _v40$[ebp], 0
	jne	SHORT $LABEL_83$85659
$L85664:
; Line 1323
	cmp	ebx, 2
	jle	SHORT $L85665
; Line 1324
	mov	DWORD PTR _river$[ebp+eax+792], 20	; 00000014H
$L85665:
; Line 1325
	cmp	ecx, 1
	jne	SHORT $L85666
; Line 1326
	and	DWORD PTR _v46$[ebp], 0
; Line 1327
	jmp	SHORT $LABEL_77$85667
$L85666:
; Line 1329
	mov	DWORD PTR _v46$[ebp], 2
$LABEL_76$85663:
; Line 1331
	cmp	ecx, 1
	jne	SHORT $LABEL_78$85669
$LABEL_77$85667:
; Line 1334
	cmp	DWORD PTR _v40$[ebp], 3
	je	SHORT $L85672
$LABEL_78$85669:
; Line 1336
	cmp	ecx, 2
	jne	SHORT $LABEL_83$85659
$LABEL_79$85656:
; Line 1339
	cmp	DWORD PTR _v40$[ebp], 0
	jne	SHORT $LABEL_83$85659
$L85672:
; Line 1342
	cmp	ebx, 2
	jle	SHORT $L85673
; Line 1343
	mov	DWORD PTR _river$[ebp+eax+792], 19	; 00000013H
$L85673:
; Line 1344
	mov	eax, ecx
	dec	eax
	neg	eax
	sbb	eax, eax
	and	eax, 3
	mov	DWORD PTR _v46$[ebp], eax
$LABEL_83$85659:
; Line 1346
	mov	DWORD PTR _v40$[ebp], ecx
; Line 1347
	jmp	SHORT $L85675
$L85637:
; Line 1350
	mov	eax, DWORD PTR _v36$[ebp]
; Line 1351
	cmp	DWORD PTR _v43$[ebp], 4
	mov	esi, DWORD PTR _v38$[ebp]
	mov	edi, DWORD PTR _v37$[ebp]
	mov	DWORD PTR _v45$[ebp], eax
	jge	SHORT $L86646
$L85675:
; Line 1225
	cmp	ebx, 100				; 00000064H
	jl	$L85618
$L86646:
; Line 1355
	test	ecx, ecx
; Line 1357
	jne	SHORT $L86679
; Line 1359
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR _dungeon[edi+eax*8]
; Line 1360
	cmp	BYTE PTR [eax-1], 10			; 0000000aH
	jne	$LABEL_118$85690
	cmp	BYTE PTR [eax-2], 8
	jne	$LABEL_118$85690
; Line 1362
	mov	eax, ebx
	lea	edx, DWORD PTR [edi-1]
	shl	eax, 2
	mov	DWORD PTR _river$[ebp+eax+400], edx
; Line 1364
	mov	edx, DWORD PTR _v40$[ebp]
	cmp	edx, 2
; Line 1365
	mov	DWORD PTR _river$[ebp+eax], esi
; Line 1366
	mov	DWORD PTR _river$[ebp+eax+800], 24	; 00000018H
; Line 1367
	jne	SHORT $L85679
; Line 1368
	mov	DWORD PTR _river$[ebp+eax+796], 22	; 00000016H
$L85679:
; Line 1369
	cmp	edx, 3
	jne	SHORT $L85680
; Line 1370
	mov	DWORD PTR _river$[ebp+eax+796], 21	; 00000015H
$L85680:
; Line 1371
	mov	DWORD PTR _v47$[ebp], 1
	jmp	SHORT $LABEL_94$85677
$L86679:
	mov	edx, DWORD PTR _v40$[ebp]
$LABEL_94$85677:
; Line 1373
	cmp	ecx, 1
	jne	SHORT $LABEL_102$85685
; Line 1374
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edi+eax*8]
; Line 1375
	cmp	BYTE PTR _dungeon[eax+1], 2
	jne	$LABEL_118$85690
	cmp	BYTE PTR _dungeon[eax+2], 8
	jne	$LABEL_118$85690
; Line 1377
	mov	eax, ebx
	shl	eax, 2
; Line 1378
	inc	edi
; Line 1380
	cmp	edx, 2
	mov	DWORD PTR _river$[ebp+eax], esi
	mov	DWORD PTR _river$[ebp+eax+400], edi
	mov	DWORD PTR _river$[ebp+eax+800], 42	; 0000002aH
	jne	SHORT $L85683
; Line 1381
	mov	DWORD PTR _river$[ebp+eax+796], 20	; 00000014H
$L85683:
; Line 1382
	cmp	edx, 3
	jne	SHORT $L85684
; Line 1383
	mov	DWORD PTR _river$[ebp+eax+796], 19	; 00000013H
$L85684:
; Line 1384
	mov	DWORD PTR _v47$[ebp], 1
; Line 1385
	jmp	$LABEL_118$85690
$LABEL_102$85685:
; Line 1389
	cmp	ecx, 2
	jne	SHORT $L85687
; Line 1390
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edi+eax*8]
; Line 1391
	cmp	BYTE PTR _dungeon[eax+40], 4
	jne	$LABEL_118$85690
	cmp	BYTE PTR _dungeon[eax+80], 8
	jne	$LABEL_118$85690
; Line 1394
	mov	eax, ebx
	shl	eax, 2
	inc	esi
; Line 1397
	test	edx, edx
	mov	DWORD PTR _river$[ebp+eax], esi
	mov	DWORD PTR _river$[ebp+eax+400], edi
	mov	DWORD PTR _river$[ebp+eax+800], 43	; 0000002bH
	jne	SHORT $L85691
; Line 1398
	mov	DWORD PTR _river$[ebp+eax+796], 19	; 00000013H
$L85691:
; Line 1399
	xor	ecx, ecx
	inc	ecx
	cmp	edx, ecx
	jne	SHORT $L85695
; Line 1400
	mov	DWORD PTR _river$[ebp+eax+796], 21	; 00000015H
; Line 1401
	jmp	SHORT $L85695
$L85687:
; Line 1405
	cmp	ecx, 3
	jne	SHORT $LABEL_118$85690
	lea	eax, DWORD PTR [esi+esi*4]
	cmp	BYTE PTR _dungeon[edi+eax*8-40], 9
	jne	SHORT $LABEL_118$85690
	lea	eax, DWORD PTR [esi+esi*4-10]
	cmp	BYTE PTR _dungeon[edi+eax*8], 8
	jne	SHORT $LABEL_118$85690
; Line 1407
	mov	eax, ebx
	shl	eax, 2
	dec	esi
; Line 1410
	test	edx, edx
	mov	DWORD PTR _river$[ebp+eax], esi
	mov	DWORD PTR _river$[ebp+eax+400], edi
	mov	DWORD PTR _river$[ebp+eax+800], 23	; 00000017H
	jne	SHORT $L85694
; Line 1411
	mov	DWORD PTR _river$[ebp+eax+796], 20	; 00000014H
$L85694:
; Line 1412
	xor	ecx, ecx
	inc	ecx
	cmp	edx, ecx
	jne	SHORT $L85695
; Line 1413
	mov	DWORD PTR _river$[ebp+eax+796], 22	; 00000016H
$L85695:
; Line 1414
	mov	DWORD PTR _v47$[ebp], ecx
$LABEL_118$85690:
; Line 1419
	and	DWORD PTR _v0$[ebp], 0
; Line 1420
	cmp	DWORD PTR _v47$[ebp], 0
	je	$L85589
	jmp	SHORT $L85591
$L86647:
; Line 1167
	mov	ebx, DWORD PTR _max$[ebp]
$L85591:
; Line 1421
	cmp	DWORD PTR _v47$[ebp], 1
	jne	$L85727
	cmp	ebx, 7
	jl	$L85727
; Line 1422
	xor	edi, edi
; Line 1423
	mov	DWORD PTR _v47$[ebp], edi
$LABEL_124$85697:
$L85699:
; Line 1425
	cmp	DWORD PTR _v47$[ebp], 30		; 0000001eH
	jge	$L86651
; Line 1427
	mov	edx, DWORD PTR _max$[ebp]
	inc	DWORD PTR _v47$[ebp]
	xor	cl, cl
	call	@random@8
	mov	DWORD PTR _v44$[ebp], eax
; Line 1430
	shl	eax, 2
	mov	edx, DWORD PTR _river$[ebp+eax+800]
; Line 1431
	cmp	edx, 15					; 0000000fH
	je	SHORT $L85702
	cmp	edx, 16					; 00000010H
	jne	SHORT $L85703
$L85702:
; Line 1432
	mov	ecx, DWORD PTR _river$[ebp+eax]
	mov	esi, DWORD PTR _river$[ebp+eax+400]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [esi+ecx*8]
; Line 1433
	cmp	BYTE PTR _dungeon[ecx-1], 7
	jne	SHORT $L85703
	cmp	BYTE PTR _dungeon[ecx+1], 7
	jne	SHORT $L85703
; Line 1434
	xor	edi, edi
	inc	edi
$L85703:
; Line 1436
	cmp	edx, 17					; 00000011H
	je	SHORT $L85705
	cmp	edx, 18					; 00000012H
	jne	SHORT $L85706
$L85705:
; Line 1437
	mov	ecx, DWORD PTR _river$[ebp+eax]
	mov	edx, DWORD PTR _river$[ebp+eax+400]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [edx+ecx*8]
; Line 1438
	cmp	BYTE PTR _dungeon[ecx-40], 7
	jne	SHORT $L85706
	cmp	BYTE PTR _dungeon[ecx+40], 7
	jne	SHORT $L85706
; Line 1439
	push	2
	pop	edi
$L85706:
; Line 1441
	xor	esi, esi
; Line 1442
	cmp	DWORD PTR _max$[ebp], esi
	jle	SHORT $LABEL_148$85718
$L85709:
; Line 1444
	test	edi, edi
	je	$L85699
; Line 1446
	cmp	edi, 1
	jne	SHORT $LABEL_142$85713
; Line 1448
	mov	ecx, DWORD PTR _river$[ebp+eax+400]
; Line 1449
	mov	edx, DWORD PTR _river$[ebp+esi*4+400]
; Line 1450
	lea	ebx, DWORD PTR [ecx-1]
	cmp	ebx, edx
	je	SHORT $L85715
	inc	ecx
	cmp	ecx, edx
	jne	SHORT $LABEL_147$85716
$L85715:
	mov	ecx, DWORD PTR _river$[ebp+eax]
	cmp	ecx, DWORD PTR _river$[ebp+esi*4]
	jne	SHORT $LABEL_147$85716
; Line 1456
	xor	edi, edi
$LABEL_142$85713:
; Line 1458
	cmp	edi, 2
	jne	SHORT $LABEL_147$85716
; Line 1459
	mov	ecx, DWORD PTR _river$[ebp+eax]
; Line 1460
	mov	edx, DWORD PTR _river$[ebp+esi*4]
; Line 1461
	lea	ebx, DWORD PTR [ecx-1]
	cmp	ebx, edx
	je	SHORT $L85721
	inc	ecx
	cmp	ecx, edx
	jne	SHORT $LABEL_147$85716
$L85721:
	mov	ecx, DWORD PTR _river$[ebp+eax+400]
	cmp	ecx, DWORD PTR _river$[ebp+esi*4+400]
	jne	SHORT $LABEL_147$85716
; Line 1462
	xor	edi, edi
$LABEL_147$85716:
; Line 1453
	inc	esi
	cmp	esi, DWORD PTR _max$[ebp]
	jl	SHORT $L85709
$LABEL_148$85718:
; Line 1467
	test	edi, edi
; Line 1469
	je	$L85699
$L86651:
; Line 1470
	and	DWORD PTR _v0$[ebp], 0
; Line 1471
	test	edi, edi
	je	SHORT $L85727
; Line 1472
	mov	ecx, DWORD PTR _v44$[ebp]
; Line 1476
	mov	esi, DWORD PTR _max$[ebp]
	xor	eax, eax
	cmp	edi, 1
	setne	al
	and	DWORD PTR _v44$[ebp], 0
	add	eax, 44					; 0000002cH
	inc	DWORD PTR _v39$[ebp]
	mov	DWORD PTR _river$[ebp+ecx*4+800], eax
	test	esi, esi
	jl	SHORT $L85727
	mov	edx, esi
	neg	edx
$L85725:
; Line 1483
	mov	eax, DWORD PTR _v44$[ebp]
	shl	eax, 2
	inc	DWORD PTR _v44$[ebp]
	inc	edx
	mov	ecx, DWORD PTR _river$[ebp+eax]
	mov	edi, DWORD PTR _river$[ebp+eax+400]
	mov	al, BYTE PTR _river$[ebp+eax+800]
	cmp	DWORD PTR _v44$[ebp], esi
	lea	ecx, DWORD PTR [ecx+ecx*4]
	mov	BYTE PTR _dungeon[edi+ecx*8], al
	sete	al
	test	edx, edx
	setl	cl
	or	al, cl
	jne	SHORT $L85725
$L85727:
; Line 1487
	cmp	DWORD PTR _v41$[ebp], 200		; 000000c8H
	jge	SHORT $L86644
; Line 1163
	cmp	DWORD PTR _v39$[ebp], 4
	jl	$L85587
$L86644:
	pop	edi
	pop	esi
	pop	ebx
; Line 1490
	leave
	ret	0
_DRLG_L3River ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L3SpawnEdge@12
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L3Pool
_TEXT	SEGMENT
_v7$ = -28
_v9$ = -8
_v11$ = -12
_v17$ = -20
_v18$ = -24
_totarea$ = -8
_x$ = -4
_DRLG_L3Pool PROC NEAR					; COMDAT
; Line 1496
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
; Line 1519
	xor	edi, edi
; Line 1520
	xor	ebx, ebx
	mov	DWORD PTR _v18$[ebp], edi
	inc	ebx
$L85751:
; Line 1522
	and	DWORD PTR _x$[ebp], 0
; Line 1523
	lea	eax, DWORD PTR _dungeon[edi]
	lea	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR -16+[ebp], ecx
$L85756:
; Line 1526
	cmp	BYTE PTR [eax], 8
	jne	$L85763
; Line 1527
	mov	BYTE PTR [eax], 136			; 00000088H
; Line 1531
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _totarea$[ebp], ebx
	lea	esi, DWORD PTR [eax+1]
	cmp	esi, 40					; 00000028H
	jl	SHORT $L86709
	mov	eax, ebx
	jmp	SHORT $L86710
$L86709:
	lea	eax, DWORD PTR _totarea$[ebp]
	mov	edx, edi
	push	eax
	mov	ecx, esi
	call	@DRLG_L3SpawnEdge@12
$L86710:
; Line 1532
	lea	ecx, DWORD PTR [esi-2]
	test	ecx, ecx
	jle	SHORT $L86711
	test	eax, eax
	jne	SHORT $L86711
	lea	eax, DWORD PTR _totarea$[ebp]
	mov	edx, edi
	push	eax
	call	@DRLG_L3SpawnEdge@12
	jmp	SHORT $L86712
$L86711:
	mov	eax, ebx
$L86712:
; Line 1533
	lea	edx, DWORD PTR [edi+1]
	cmp	edx, 40					; 00000028H
	jge	SHORT $L86713
	test	eax, eax
	jne	SHORT $L86713
	mov	ecx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR _totarea$[ebp]
	push	eax
	call	@DRLG_L3SpawnEdge@12
	jmp	SHORT $L86714
$L86713:
	mov	eax, ebx
$L86714:
; Line 1534
	lea	edx, DWORD PTR [edi-1]
	test	edx, edx
	jle	SHORT $L86715
	test	eax, eax
	jne	SHORT $L86715
	mov	ecx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR _totarea$[ebp]
	push	eax
	call	@DRLG_L3SpawnEdge@12
	mov	DWORD PTR _v17$[ebp], eax
	jmp	SHORT $L86716
$L86715:
	mov	DWORD PTR _v17$[ebp], ebx
$L86716:
; Line 1535
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 1536
	mov	ecx, DWORD PTR _totarea$[ebp]
; Line 1538
	mov	edx, edi
	sub	edx, ecx
	mov	DWORD PTR _v7$[ebp], eax
; Line 1539
	lea	esi, DWORD PTR [ecx+edi]
	mov	eax, ecx
	cmp	edx, esi
	mov	DWORD PTR _v9$[ebp], edx
	jge	$L85763
; Line 1540
	mov	esi, DWORD PTR _x$[ebp]
	mov	edx, esi
	sub	edx, ecx
; Line 1541
	lea	ecx, DWORD PTR [eax+esi]
$L85761:
; Line 1544
	cmp	edx, ecx
	mov	DWORD PTR _v11$[ebp], edx
	jge	SHORT $L85767
; Line 1545
	mov	esi, DWORD PTR _v9$[ebp]
	lea	ecx, DWORD PTR [edx+edx*4]
	lea	esi, DWORD PTR _dungeon[esi+ecx*8]
$L85765:
; Line 1547
	mov	cl, BYTE PTR [esi]
	test	cl, cl
	jge	SHORT $L85769
	cmp	DWORD PTR _v9$[ebp], 0
	jl	SHORT $L85769
	cmp	DWORD PTR _v9$[ebp], 40			; 00000028H
	jge	SHORT $L85769
	cmp	DWORD PTR _v11$[ebp], 0
	jl	SHORT $L85769
	cmp	DWORD PTR _v11$[ebp], 40		; 00000028H
	jge	SHORT $L85769
; Line 1548
	and	cl, 127					; 0000007fH
; Line 1550
	cmp	eax, 4
	mov	BYTE PTR [esi], cl
	jle	SHORT $L85769
; Line 1551
	cmp	DWORD PTR _v7$[ebp], 25			; 00000019H
	jge	SHORT $L85770
	cmp	DWORD PTR _v17$[ebp], 0
	jne	SHORT $L85770
; Line 1552
	movzx	ecx, cl
	mov	cl, BYTE PTR _L3PoolSub[ecx]
; Line 1553
	test	cl, cl
	je	SHORT $L85772
; Line 1554
	cmp	cl, 37					; 00000025H
	ja	SHORT $L85772
; Line 1555
	mov	BYTE PTR [esi], cl
$L85772:
; Line 1557
	mov	BYTE PTR _lavapool, 1
$L85770:
; Line 1559
	mov	edi, DWORD PTR _v18$[ebp]
$L85769:
; Line 1563
	mov	ecx, DWORD PTR _x$[ebp]
	inc	DWORD PTR _v11$[ebp]
	add	ecx, eax
; Line 1564
	add	esi, 40					; 00000028H
; Line 1565
	cmp	DWORD PTR _v11$[ebp], ecx
	jl	SHORT $L85765
$L85767:
; Line 1567
	inc	DWORD PTR _v9$[ebp]
; Line 1568
	lea	esi, DWORD PTR [eax+edi]
	cmp	DWORD PTR _v9$[ebp], esi
	jl	$L85761
	xor	ebx, ebx
	inc	ebx
$L85763:
; Line 1571
	inc	DWORD PTR _x$[ebp]
; Line 1572
	mov	eax, DWORD PTR -16+[ebp]
; Line 1573
	add	DWORD PTR -16+[ebp], 40			; 00000028H
; Line 1574
	cmp	DWORD PTR _x$[ebp], 40			; 00000028H
	jl	$L85756
; Line 1575
	inc	edi
; Line 1576
	cmp	edi, 40					; 00000028H
	mov	DWORD PTR _v18$[ebp], edi
	jl	$L85751
	pop	edi
	pop	esi
	pop	ebx
; Line 1577
	leave
	ret	0
_DRLG_L3Pool ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L3Spawn@12
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L3SpawnEdge@12
_TEXT	SEGMENT
_totarea$ = 8
_v7$ = 8
@DRLG_L3SpawnEdge@12 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1581
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 1593
	mov	ebx, DWORD PTR _totarea$[ebp]
	push	esi
	push	edi
	cmp	DWORD PTR [ebx], 40			; 00000028H
	mov	edi, edx
	mov	esi, ecx
	jg	$L85792
	test	esi, esi
	jl	$L85792
	test	edi, edi
	jl	$L85792
	cmp	esi, 40					; 00000028H
	jge	$L85792
	cmp	edi, 40					; 00000028H
	jge	$L85792
; Line 1594
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR _dungeon[edi+eax*8]
; Line 1595
	mov	cl, BYTE PTR [eax]
; Line 1596
	test	cl, cl
; Line 1597
	jl	$L85813
; Line 1598
	cmp	cl, 15					; 0000000fH
	ja	$L85792
; Line 1599
	mov	dl, cl
	or	dl, -128				; ffffff80H
	mov	BYTE PTR [eax], dl
; Line 1600
	inc	DWORD PTR [ebx]
; Line 1601
	cmp	cl, 8
	jne	SHORT $L85795
; Line 1604
	push	ebx
	lea	ecx, DWORD PTR [esi+1]
	mov	edx, edi
	call	@DRLG_L3SpawnEdge@12
	cmp	eax, 1
	je	$L85792
	push	ebx
	lea	ecx, DWORD PTR [esi-1]
	mov	edx, edi
	call	@DRLG_L3SpawnEdge@12
	cmp	eax, 1
	je	$L85792
	push	ebx
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, esi
	call	@DRLG_L3SpawnEdge@12
	cmp	eax, 1
	je	$L85792
; Line 1607
	push	ebx
	lea	edx, DWORD PTR [edi-1]
	mov	ecx, esi
	call	@DRLG_L3SpawnEdge@12
	jmp	SHORT $LABEL_24$85798
$L85795:
; Line 1613
	movzx	eax, cl
	mov	DWORD PTR _v7$[ebp], eax
; Line 1615
	movzx	eax, al
	test	BYTE PTR _L3SpawnTbl2[eax], 8
	je	SHORT $L85804
; Line 1616
	push	ebx
	lea	edx, DWORD PTR [edi-1]
	mov	ecx, esi
	call	@DRLG_L3Spawn@12
	cmp	eax, 1
; Line 1617
	je	SHORT $L85792
$L85804:
; Line 1620
	mov	eax, DWORD PTR _v7$[ebp]
	test	BYTE PTR _L3SpawnTbl2[eax], 4
	je	SHORT $L85807
; Line 1621
	push	ebx
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, esi
	call	@DRLG_L3Spawn@12
	cmp	eax, 1
; Line 1622
	je	SHORT $L85792
$L85807:
; Line 1625
	mov	eax, DWORD PTR _v7$[ebp]
	test	BYTE PTR _L3SpawnTbl2[eax], 2
	je	SHORT $LABEL_18$85810
; Line 1627
	push	ebx
	lea	ecx, DWORD PTR [esi+1]
	mov	edx, edi
	call	@DRLG_L3Spawn@12
	cmp	eax, 1
	je	SHORT $L85792
$LABEL_18$85810:
; Line 1630
	mov	eax, DWORD PTR _v7$[ebp]
	test	BYTE PTR _L3SpawnTbl2[eax], 1
	je	SHORT $L85813
; Line 1631
	push	ebx
	lea	ecx, DWORD PTR [esi-1]
	mov	edx, edi
	call	@DRLG_L3Spawn@12
$LABEL_24$85798:
	xor	ecx, ecx
	cmp	eax, 1
	sete	cl
	mov	eax, ecx
	jmp	SHORT $L85780
$L85813:
; Line 1634
	xor	eax, eax
	jmp	SHORT $L85780
$L85792:
; Line 1639
	xor	eax, eax
	inc	eax
$L85780:
	pop	edi
	pop	esi
	pop	ebx
; Line 1640
	pop	ebp
	ret	4
@DRLG_L3SpawnEdge@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L3Spawn@12
_TEXT	SEGMENT
_totarea$ = 8
_result$ = -4
@DRLG_L3Spawn@12 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1643
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 1654
	mov	ebx, DWORD PTR _totarea$[ebp]
	push	esi
	push	edi
	cmp	DWORD PTR [ebx], 40			; 00000028H
	mov	edi, edx
	mov	esi, ecx
	mov	DWORD PTR _result$[ebp], 1
	jg	$L85828
	test	esi, esi
	jl	$L85828
	test	edi, edi
	jl	$L85828
	cmp	esi, 40					; 00000028H
	jge	$L85828
	cmp	edi, 40					; 00000028H
	jge	$L85828
; Line 1655
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR _dungeon[edi+eax*8]
; Line 1656
	mov	cl, BYTE PTR [eax]
; Line 1666
	test	cl, cl
	jl	$L85837
	cmp	cl, 15					; 0000000fH
	ja	$L85828
	mov	dl, cl
	or	dl, -128				; ffffff80H
	mov	BYTE PTR [eax], dl
	inc	DWORD PTR [ebx]
	movzx	eax, cl
	mov	DWORD PTR 8+[ebp], eax
	test	BYTE PTR _L3SpawnTbl1[eax], 8
	je	SHORT $L85830
	push	ebx
	lea	edx, DWORD PTR [edi-1]
	mov	ecx, esi
	call	@DRLG_L3Spawn@12
	cmp	eax, 1
	je	$L85828
	mov	eax, DWORD PTR 8+[ebp]
$L85830:
	test	BYTE PTR _L3SpawnTbl1[eax], 4
	je	SHORT $L85831
	push	ebx
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, esi
	call	@DRLG_L3Spawn@12
	cmp	eax, 1
	je	$L85828
	mov	eax, DWORD PTR 8+[ebp]
$L85831:
	test	BYTE PTR _L3SpawnTbl1[eax], 2
	je	SHORT $L85832
	push	ebx
	lea	ecx, DWORD PTR [esi+1]
	mov	edx, edi
	call	@DRLG_L3Spawn@12
	cmp	eax, 1
	je	$L85828
	mov	eax, DWORD PTR 8+[ebp]
$L85832:
	test	BYTE PTR _L3SpawnTbl1[eax], 1
	je	SHORT $L85833
	push	ebx
	lea	ecx, DWORD PTR [esi-1]
	mov	edx, edi
	call	@DRLG_L3Spawn@12
	cmp	eax, 1
	je	SHORT $L85828
	mov	eax, DWORD PTR 8+[ebp]
$L85833:
	test	BYTE PTR _L3SpawnTbl1[eax], 128		; 00000080H
	je	SHORT $L85834
	push	ebx
	lea	edx, DWORD PTR [edi-1]
	mov	ecx, esi
	call	@DRLG_L3SpawnEdge@12
	cmp	eax, 1
	je	SHORT $L85828
	mov	eax, DWORD PTR 8+[ebp]
$L85834:
	test	BYTE PTR _L3SpawnTbl1[eax], 64		; 00000040H
	je	SHORT $L85835
	push	ebx
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, esi
	call	@DRLG_L3SpawnEdge@12
	cmp	eax, 1
	je	SHORT $L85828
	mov	eax, DWORD PTR 8+[ebp]
$L85835:
	test	BYTE PTR _L3SpawnTbl1[eax], 32		; 00000020H
	je	SHORT $L85836
	push	ebx
	lea	ecx, DWORD PTR [esi+1]
	mov	edx, edi
	call	@DRLG_L3SpawnEdge@12
	cmp	eax, 1
	je	SHORT $L85828
	mov	eax, DWORD PTR 8+[ebp]
$L85836:
	test	BYTE PTR _L3SpawnTbl1[eax], 16		; 00000010H
	je	SHORT $L85837
	push	ebx
	lea	ecx, DWORD PTR [esi-1]
	mov	edx, edi
	call	@DRLG_L3SpawnEdge@12
	cmp	eax, 1
	je	SHORT $L85828
$L85837:
; Line 1667
	and	DWORD PTR _result$[ebp], 0
$L85828:
; Line 1670
	mov	eax, DWORD PTR _result$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 1671
	leave
	ret	4
@DRLG_L3Spawn@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L3PoolFix
_TEXT	SEGMENT
_v11$ = -4
_DRLG_L3PoolFix PROC NEAR				; COMDAT
; Line 1674
	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1721
	mov	ebp, OFFSET FLAT:_dungeon
	xor	edi, edi
	sub	ebp, 40					; 00000028H
	mov	dl, 25					; 00000019H
	mov	bl, 41					; 00000029H
$L85851:
	lea	eax, DWORD PTR [edi+ebp]
	mov	DWORD PTR _v11$[esp+20], 40		; 00000028H
$L85854:
	lea	esi, DWORD PTR [eax+40]
	cmp	BYTE PTR [esi], 8
	jne	SHORT $L85878
	mov	cl, BYTE PTR [eax-1]
	cmp	cl, dl
	jb	SHORT $L85878
; Line 1696
	cmp	cl, bl
	ja	SHORT $L85878
	mov	cl, BYTE PTR [eax]
	cmp	cl, dl
	jb	SHORT $L85878
	cmp	cl, bl
	ja	SHORT $L85878
; Line 1697
	mov	cl, BYTE PTR [eax+1]
; Line 1698
	cmp	cl, dl
	jb	SHORT $L85878
	cmp	cl, bl
	ja	SHORT $L85878
; Line 1699
	mov	cl, BYTE PTR [eax+39]
; Line 1700
	cmp	cl, dl
	jb	SHORT $L85878
	cmp	cl, bl
	ja	SHORT $L85878
; Line 1701
	mov	cl, BYTE PTR [eax+41]
; Line 1702
	cmp	cl, dl
	jb	SHORT $L85878
	cmp	cl, bl
	ja	SHORT $L85878
; Line 1703
	mov	cl, BYTE PTR [eax+79]
; Line 1704
	cmp	cl, dl
	jb	SHORT $L85878
	cmp	cl, bl
	ja	SHORT $L85878
; Line 1705
	mov	cl, BYTE PTR [eax+80]
; Line 1706
	cmp	cl, dl
	jb	SHORT $L85878
	cmp	cl, bl
	ja	SHORT $L85878
; Line 1707
	mov	al, BYTE PTR [eax+81]
; Line 1708
	cmp	al, dl
	jb	SHORT $L85878
	cmp	al, bl
	ja	SHORT $L85878
; Line 1709
	mov	BYTE PTR [esi], 33			; 00000021H
$L85878:
; Line 1717
	mov	eax, DWORD PTR _v11$[esp+20]
	dec	DWORD PTR _v11$[esp+20]
	cmp	eax, 1
	jne	SHORT $L86738
	mov	cl, al
	jmp	SHORT $L86739
$L86738:
	xor	cl, cl
$L86739:
; Line 1719
	test	cl, cl
	mov	eax, esi
	je	SHORT $L85854
; Line 1720
	inc	edi
; Line 1721
	cmp	edi, 40					; 00000028H
	jl	$L85851
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1722
	pop	ecx
	ret	0
_DRLG_L3PoolFix ENDP
_TEXT	ENDS
EXTRN	_LvlViewY:DWORD
EXTRN	_LvlViewX:DWORD
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L3PlaceMiniSet@28
_TEXT	SEGMENT
_miniset$ = -40
_tmax$ = 8
_cx$ = 12
_cy$ = 16
_setview$ = 20
_ldir$ = 24
_v12$ = -4
_v24$ = -36
_v25$ = -32
_v26$ = -28
_v27$ = -24
_v30$ = -20
_max$ = -16
@DRLG_L3PlaceMiniSet@28 PROC NEAR			; COMDAT
; _miniset$ = ecx
; _tmin$ = edx
; Line 1725
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 1753
	movzx	eax, BYTE PTR [ecx]
	push	ebx
	push	esi
	movzx	ebx, BYTE PTR [ecx+1]
	push	edi
; Line 1755
	mov	edi, DWORD PTR _tmax$[ebp]
	mov	esi, edx
	mov	edx, edi
	sub	edx, esi
	mov	DWORD PTR _miniset$[ebp], ecx
	mov	DWORD PTR -12+[ebp], ebx
	mov	DWORD PTR -8+[ebp], eax
; Line 1758
	je	SHORT $L85918
; Line 1759
	xor	cl, cl
	call	@random@8
	add	eax, esi
	mov	DWORD PTR _v24$[ebp], eax
; Line 1760
	jmp	SHORT $L85919
$L85918:
; Line 1761
	mov	DWORD PTR _v24$[ebp], 1
$L85919:
; Line 1762
	and	DWORD PTR _v25$[ebp], 0
; Line 1763
	cmp	DWORD PTR _v24$[ebp], 0
	jg	SHORT $L85920
; Line 1764
	mov	esi, edi
; Line 1765
	jmp	$L85924
$L85920:
; Line 1766
	push	40					; 00000028H
	pop	eax
	sub	eax, DWORD PTR -8+[ebp]
; Line 1767
	push	40					; 00000028H
	mov	DWORD PTR _max$[ebp], eax
	pop	eax
	sub	eax, ebx
	mov	DWORD PTR _v30$[ebp], eax
$L85922:
; Line 1769
	mov	edx, DWORD PTR _max$[ebp]
	xor	cl, cl
	call	@random@8
; Line 1771
	mov	edx, DWORD PTR _v30$[ebp]
	xor	ebx, ebx
	xor	cl, cl
	mov	esi, eax
	mov	DWORD PTR _v27$[ebp], ebx
	call	@random@8
	mov	DWORD PTR _tmax$[ebp], eax
$L85926:
; Line 1773
	cmp	DWORD PTR _v27$[ebp], 200		; 000000c8H
	jge	$L86758
; Line 1777
	mov	eax, DWORD PTR _cx$[ebp]
	inc	DWORD PTR _v27$[ebp]
	cmp	eax, -1
	mov	DWORD PTR _v12$[ebp], 1
	je	SHORT $L85929
	mov	ecx, eax
	sub	ecx, DWORD PTR -8+[ebp]
	cmp	esi, ecx
	jl	SHORT $L85929
	add	eax, 12					; 0000000cH
	cmp	esi, eax
	jg	SHORT $L85929
; Line 1778
	mov	edx, DWORD PTR _max$[ebp]
	xor	cl, cl
	call	@random@8
; Line 1779
	mov	edx, DWORD PTR _v30$[ebp]
	xor	cl, cl
	mov	esi, eax
	call	@random@8
	mov	DWORD PTR _tmax$[ebp], eax
; Line 1780
	mov	DWORD PTR _v12$[ebp], ebx
$L85929:
; Line 1782
	mov	eax, DWORD PTR _cy$[ebp]
	cmp	eax, -1
	je	SHORT $L85930
	mov	ecx, eax
	sub	ecx, DWORD PTR -12+[ebp]
	cmp	DWORD PTR _tmax$[ebp], ecx
	jl	SHORT $L85930
	add	eax, 12					; 0000000cH
	cmp	DWORD PTR _tmax$[ebp], eax
	jg	SHORT $L85930
; Line 1783
	mov	edx, DWORD PTR _max$[ebp]
	xor	cl, cl
	call	@random@8
; Line 1784
	mov	edx, DWORD PTR _v30$[ebp]
	xor	cl, cl
	mov	esi, eax
	call	@random@8
	mov	DWORD PTR _tmax$[ebp], eax
; Line 1785
	mov	DWORD PTR _v12$[ebp], ebx
$L85930:
; Line 1787
	xor	edi, edi
; Line 1788
	cmp	DWORD PTR -12+[ebp], ebx
	push	2
	pop	edx
	jle	SHORT $L86755
$L85931:
; Line 1789
	cmp	DWORD PTR _v12$[ebp], 1
	jne	SHORT $L86755
; Line 1792
	cmp	DWORD PTR -8+[ebp], ebx
	mov	DWORD PTR _v26$[ebp], ebx
	jle	SHORT $L85938
; Line 1793
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edi+eax*8]
	add	eax, DWORD PTR _tmax$[ebp]
$L85936:
; Line 1795
	cmp	DWORD PTR _v12$[ebp], 1
	jne	SHORT $L85938
; Line 1797
	mov	ecx, DWORD PTR _miniset$[ebp]
	mov	cl, BYTE PTR [edx+ecx]
; Line 1798
	test	cl, cl
	je	SHORT $L85940
	movsx	ebx, BYTE PTR _dungeon[eax]
	movzx	ecx, cl
	cmp	ebx, ecx
	je	SHORT $L85940
; Line 1799
	and	DWORD PTR _v12$[ebp], 0
$L85940:
; Line 1800
	cmp	BYTE PTR _dflags[eax], 0
	je	SHORT $L85941
; Line 1801
	and	DWORD PTR _v12$[ebp], 0
$L85941:
; Line 1802
	inc	edx
; Line 1803
	inc	DWORD PTR _v26$[ebp]
; Line 1805
	mov	ecx, DWORD PTR _v26$[ebp]
	add	eax, 40					; 00000028H
	cmp	ecx, DWORD PTR -8+[ebp]
	jl	SHORT $L85936
$L85938:
; Line 1788
	inc	edi
	xor	ebx, ebx
	cmp	edi, DWORD PTR -12+[ebp]
	jl	SHORT $L85931
$L86755:
; Line 1808
	xor	edi, edi
; Line 1809
	cmp	DWORD PTR _v12$[ebp], ebx
	jne	SHORT $L86757
; Line 1811
	inc	esi
	cmp	esi, DWORD PTR _max$[ebp]
	jne	$L85926
; Line 1812
	xor	esi, esi
; Line 1813
	inc	DWORD PTR _tmax$[ebp]
	mov	eax, DWORD PTR _tmax$[ebp]
	cmp	eax, DWORD PTR _v30$[ebp]
	jne	$L85926
; Line 1814
	mov	DWORD PTR _tmax$[ebp], ebx
; Line 1772
	jmp	$L85926
$L86757:
; Line 1817
	cmp	DWORD PTR _v27$[ebp], 200		; 000000c8H
	jge	$L86758
; Line 1819
	mov	eax, DWORD PTR -12+[ebp]
	imul	eax, DWORD PTR -8+[ebp]
	inc	eax
	inc	eax
; Line 1820
	cmp	DWORD PTR -12+[ebp], ebx
	jle	SHORT $L85949
$L85947:
; Line 1822
	mov	ebx, DWORD PTR -8+[ebp]
; Line 1823
	test	ebx, ebx
	jle	SHORT $L85953
; Line 1824
	mov	edx, DWORD PTR _tmax$[ebp]
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	ecx, DWORD PTR [edi+ecx*8]
	lea	edx, DWORD PTR _dungeon[ecx+edx]
$L85951:
; Line 1826
	mov	ecx, DWORD PTR _miniset$[ebp]
	mov	cl, BYTE PTR [eax+ecx]
; Line 1827
	test	cl, cl
	je	SHORT $L85954
; Line 1828
	mov	BYTE PTR [edx], cl
$L85954:
; Line 1829
	inc	eax
; Line 1830
	add	edx, 40					; 00000028H
; Line 1831
	dec	ebx
; Line 1832
	jne	SHORT $L85951
$L85953:
; Line 1834
	inc	edi
; Line 1835
	cmp	edi, DWORD PTR -12+[ebp]
	jl	SHORT $L85947
$L85949:
; Line 1837
	inc	DWORD PTR _v25$[ebp]
; Line 1838
	mov	eax, DWORD PTR _v25$[ebp]
	cmp	eax, DWORD PTR _v24$[ebp]
	jl	$L85922
; Line 1818
	mov	edi, DWORD PTR _tmax$[ebp]
$L85924:
; Line 1840
	cmp	BYTE PTR _setview$[ebp], 1
	jne	SHORT $L85955
; Line 1841
	lea	eax, DWORD PTR [esi+esi+17]
	mov	DWORD PTR _ViewX, eax
; Line 1842
	lea	eax, DWORD PTR [edi+edi+19]
	mov	DWORD PTR _ViewY, eax
$L85955:
; Line 1844
	cmp	DWORD PTR _ldir$[ebp], 0
	jne	SHORT $L85956
; Line 1845
	lea	eax, DWORD PTR [esi+esi+17]
	mov	DWORD PTR _LvlViewX, eax
; Line 1846
	lea	eax, DWORD PTR [edi+edi+19]
	mov	DWORD PTR _LvlViewY, eax
$L85956:
; Line 1848
	xor	eax, eax
$L85893:
	pop	edi
	pop	esi
	pop	ebx
; Line 1849
	leave
	ret	20					; 00000014H
$L86758:
; Line 1818
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85893
@DRLG_L3PlaceMiniSet@28 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L3PlaceRndSet@8
_TEXT	SEGMENT
_miniset$ = -36
_rndper$ = -44
_v3$ = -12
_v20$ = -24
_v21$ = -48
_v22$ = -52
_v24$ = -32
_v25$ = -28
_v29$ = -4
@DRLG_L3PlaceRndSet@8 PROC NEAR				; COMDAT
; _miniset$ = ecx
; _rndper$ = edx
; Line 1854
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	ebx
	push	esi
	mov	ebx, ecx
; Line 1888
	push	40					; 00000028H
	pop	esi
	xor	eax, eax
	movzx	ecx, BYTE PTR [ebx+1]
	mov	DWORD PTR -20+[ebp], esi
	mov	DWORD PTR _v3$[ebp], ecx
	sub	DWORD PTR -20+[ebp], ecx
	mov	DWORD PTR _rndper$[ebp], edx
; Line 1889
	movzx	ecx, BYTE PTR [ebx]
; Line 1892
	cmp	DWORD PTR -20+[ebp], eax
	mov	DWORD PTR _miniset$[ebp], ebx
	mov	DWORD PTR -8+[ebp], ecx
	mov	DWORD PTR _v24$[ebp], eax
	jle	$L86786
; Line 1893
	mov	edx, esi
	push	edi
	sub	edx, ecx
; Line 1894
	mov	ecx, OFFSET FLAT:_dungeon
	sub	ecx, esi
	mov	DWORD PTR _v22$[ebp], edx
	mov	DWORD PTR _v21$[ebp], ecx
$L85992:
; Line 1895
	test	edx, edx
	jle	$LABEL_44$85994
; Line 1903
	add	eax, ecx
; Line 1904
	mov	ecx, DWORD PTR -8+[ebp]
	imul	ecx, DWORD PTR _v3$[ebp]
	add	ecx, 2
	mov	DWORD PTR _v20$[ebp], edx
	mov	DWORD PTR -40+[ebp], ecx
	mov	ecx, DWORD PTR _v24$[ebp]
	mov	DWORD PTR _v25$[ebp], eax
	mov	DWORD PTR -16+[ebp], ecx
$L85998:
; Line 1906
	xor	edi, edi
; Line 1908
	push	2
	cmp	DWORD PTR _v3$[ebp], edi
	mov	DWORD PTR _v29$[ebp], 1
	pop	edx
	jle	SHORT $L86784
$L86000:
; Line 1909
	cmp	DWORD PTR _v29$[ebp], 1
	jne	SHORT $L86784
; Line 1911
	xor	esi, esi
; Line 1912
	cmp	DWORD PTR -8+[ebp], esi
	jle	SHORT $L86001
; Line 1913
	mov	eax, DWORD PTR -16+[ebp]
	lea	ecx, DWORD PTR [eax+edi]
$L86005:
; Line 1915
	cmp	DWORD PTR _v29$[ebp], 1
	jne	SHORT $L86007
; Line 1917
	mov	al, BYTE PTR [edx+ebx]
; Line 1918
	test	al, al
	je	SHORT $L86009
	movsx	ebx, BYTE PTR _dungeon[ecx]
	movzx	eax, al
	cmp	ebx, eax
; Line 1919
	mov	ebx, DWORD PTR _miniset$[ebp]
	je	SHORT $L86009
	and	DWORD PTR _v29$[ebp], 0
$L86009:
; Line 1920
	cmp	BYTE PTR _dflags[ecx], 0
	je	SHORT $L86010
; Line 1921
	and	DWORD PTR _v29$[ebp], 0
$L86010:
; Line 1922
	inc	edx
; Line 1923
	inc	esi
; Line 1925
	add	ecx, 40					; 00000028H
	cmp	esi, DWORD PTR -8+[ebp]
	jl	SHORT $L86005
$L86007:
; Line 1926
	mov	eax, DWORD PTR _v25$[ebp]
$L86001:
; Line 1908
	inc	edi
	cmp	edi, DWORD PTR _v3$[ebp]
	jl	SHORT $L86000
$L86784:
; Line 1929
	mov	edi, DWORD PTR -40+[ebp]
; Line 1930
	mov	cl, BYTE PTR [edi+ebx]
; Line 1931
	cmp	cl, 84					; 00000054H
	jb	SHORT $LABEL_33$86014
	cmp	cl, 100					; 00000064H
	ja	SHORT $LABEL_33$86014
; Line 1933
	cmp	DWORD PTR _v29$[ebp], 1
	jne	$LABEL_43$86016
; Line 1943
	mov	cl, BYTE PTR [eax]
; Line 1944
	cmp	cl, 84					; 00000054H
	jb	SHORT $L86021
	cmp	cl, 100					; 00000064H
	ja	SHORT $L86021
; Line 1945
	and	DWORD PTR _v29$[ebp], 0
$L86021:
; Line 1946
	cmp	BYTE PTR [eax+80], 84			; 00000054H
	jb	SHORT $L86024
	cmp	cl, 100					; 00000064H
	ja	SHORT $L86024
; Line 1947
	and	DWORD PTR _v29$[ebp], 0
$L86024:
; Line 1948
	cmp	BYTE PTR [eax+41], 84			; 00000054H
	jb	SHORT $L86027
	cmp	cl, 100					; 00000064H
	ja	SHORT $L86027
; Line 1949
	and	DWORD PTR _v29$[ebp], 0
$L86027:
; Line 1950
	cmp	BYTE PTR [eax+39], 84			; 00000054H
	jb	SHORT $LABEL_33$86014
	cmp	cl, 100					; 00000064H
	ja	SHORT $LABEL_33$86014
; Line 1951
	and	DWORD PTR _v29$[ebp], 0
$LABEL_33$86014:
; Line 1953
	cmp	DWORD PTR _v29$[ebp], 1
	jne	SHORT $LABEL_43$86016
; Line 1954
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, DWORD PTR _rndper$[ebp]
	jge	SHORT $L86035
; Line 1955
	xor	edx, edx
	cmp	DWORD PTR _v3$[ebp], edx
	jle	SHORT $L86035
$L86033:
; Line 1956
	mov	esi, DWORD PTR -8+[ebp]
; Line 1957
	test	esi, esi
	jle	SHORT $L86040
; Line 1958
	mov	eax, DWORD PTR -16+[ebp]
	lea	ecx, DWORD PTR _dungeon[eax+edx]
$L86038:
; Line 1960
	mov	al, BYTE PTR [edi+ebx]
; Line 1961
	test	al, al
	je	SHORT $L86041
; Line 1962
	mov	BYTE PTR [ecx], al
$L86041:
; Line 1963
	inc	edi
; Line 1964
	add	ecx, 40					; 00000028H
; Line 1965
	dec	esi
; Line 1966
	jne	SHORT $L86038
$L86040:
; Line 1955
	inc	edx
	cmp	edx, DWORD PTR _v3$[ebp]
	jl	SHORT $L86033
$L86035:
; Line 1970
	mov	eax, DWORD PTR _v25$[ebp]
$LABEL_43$86016:
; Line 1936
	add	DWORD PTR -16+[ebp], 40			; 00000028H
; Line 1938
	mov	ecx, DWORD PTR _v20$[ebp]
	add	eax, 40					; 00000028H
	dec	DWORD PTR _v20$[ebp]
	cmp	ecx, 1
	jne	SHORT $L86775
	mov	cl, cl
	jmp	SHORT $L86776
$L86775:
	xor	cl, cl
$L86776:
; Line 1940
	test	cl, cl
	mov	DWORD PTR _v25$[ebp], eax
	je	$L85998
	mov	ecx, DWORD PTR _v21$[ebp]
	mov	edx, DWORD PTR _v22$[ebp]
$LABEL_44$85994:
	mov	eax, DWORD PTR _v24$[ebp]
	inc	eax
	mov	esi, eax
	cmp	esi, DWORD PTR -20+[ebp]
	mov	DWORD PTR _v24$[ebp], esi
	jl	$L85992
	pop	edi
$L86786:
	pop	esi
	pop	ebx
; Line 1974
	leave
	ret	0
@DRLG_L3PlaceRndSet@8 ENDP
_TEXT	ENDS
PUBLIC	@WoodVertU@8
PUBLIC	@WoodVertD@8
PUBLIC	@WoodHorizL@8
PUBLIC	@WoodHorizR@8
EXTRN	@SkipThemeRoom@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L3Wood
_TEXT	SEGMENT
_v5$ = -20
_v14$ = -24
_v18$ = -20
_v33$ = -24
_v36$ = -8
_v38$ = -20
_v40$ = -24
_v41$ = -8
_xa$ = -4
_y$ = -12
_ya$ = -12
_DRLG_L3Wood PROC NEAR					; COMDAT
; Line 1977
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 2027
	and	DWORD PTR _y$[ebp], 0
	push	ebx
	push	esi
	push	edi
$L86091:
; Line 2031
	mov	eax, DWORD PTR _y$[ebp]
; Line 2121
	xor	esi, esi
	mov	DWORD PTR -4+[ebp], 1
	mov	DWORD PTR -8+[ebp], esi
	lea	ebx, DWORD PTR _dungeon[eax]
	lea	eax, DWORD PTR [ebx+40]
	mov	DWORD PTR -16+[ebp], eax
$L86095:
; Line 2033
	cmp	BYTE PTR [ebx], 10			; 0000000aH
	jne	SHORT $L86104
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L86104
; Line 2035
	cmp	BYTE PTR [ebx], 10			; 0000000aH
	jne	SHORT $L86103
; Line 2036
	mov	eax, ebx
$L86101:
; Line 2038
	add	eax, 40					; 00000028H
; Line 2039
	inc	esi
; Line 2040
	cmp	BYTE PTR [eax], 10			; 0000000aH
	je	SHORT $L86101
$L86103:
; Line 2042
	lea	edi, DWORD PTR [esi-1]
; Line 2044
	mov	eax, edi
	sub	eax, DWORD PTR -4+[ebp]
	lea	ecx, DWORD PTR [eax+1]
	test	ecx, ecx
	jle	SHORT $L86104
; Line 2046
	cmp	DWORD PTR -4+[ebp], edi
	mov	BYTE PTR [ebx], 127			; 0000007fH
	jge	SHORT $L86109
; Line 2047
	mov	esi, DWORD PTR -16+[ebp]
; Line 2048
	mov	DWORD PTR _v5$[ebp], eax
$L86107:
; Line 2050
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	neg	eax
	sbb	al, al
	and	al, 253					; 000000fdH
	add	al, 129					; 00000081H
	mov	BYTE PTR [esi], al
; Line 2051
	add	esi, 40					; 00000028H
; Line 2052
	dec	DWORD PTR _v5$[ebp]
; Line 2053
	jne	SHORT $L86107
$L86109:
; Line 2055
	mov	ecx, DWORD PTR _y$[ebp]
	lea	eax, DWORD PTR [edi+edi*4]
	mov	BYTE PTR _dungeon[ecx+eax*8], -128	; ffffff80H
$L86104:
; Line 2058
	cmp	BYTE PTR [ebx], 9
	jne	SHORT $L86115
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L86115
; Line 2060
	mov	esi, DWORD PTR _y$[ebp]
; Line 2061
	cmp	BYTE PTR [ebx], 9
	mov	eax, esi
	jne	SHORT $L86114
$L86112:
; Line 2064
	mov	ecx, DWORD PTR -8+[ebp]
	inc	eax
	cmp	BYTE PTR _dungeon[ecx+eax], 9
	je	SHORT $L86112
$L86114:
; Line 2066
	lea	edi, DWORD PTR [eax-1]
; Line 2067
	mov	eax, edi
	sub	eax, esi
	test	eax, eax
	jle	SHORT $L86115
; Line 2068
	mov	BYTE PTR [ebx], 123			; 0000007bH
; Line 2069
	jmp	SHORT $L86120
$L86117:
; Line 2070
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
; Line 2071
	mov	eax, DWORD PTR -8+[ebp]
	je	SHORT $L86119
	mov	BYTE PTR _dungeon[eax+esi], 121		; 00000079H
; Line 2072
	jmp	SHORT $L86120
$L86119:
; Line 2073
	mov	BYTE PTR _dungeon[eax+esi], 124		; 0000007cH
$L86120:
; Line 2069
	inc	esi
	cmp	esi, edi
	jl	SHORT $L86117
; Line 2075
	mov	eax, DWORD PTR -8+[ebp]
	mov	BYTE PTR _dungeon[eax+edi], 122		; 0000007aH
$L86115:
; Line 2078
	cmp	BYTE PTR [ebx], 11			; 0000000bH
	jne	$L86121
	mov	esi, DWORD PTR -16+[ebp]
	cmp	BYTE PTR [esi], 10			; 0000000aH
	jne	$L86121
	cmp	BYTE PTR [esi-39], 9
	jne	$L86121
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	$L86121
; Line 2081
	cmp	BYTE PTR [esi], 10			; 0000000aH
	mov	edi, DWORD PTR -4+[ebp]
	mov	BYTE PTR [ebx], 125			; 0000007dH
	jne	SHORT $L86126
; Line 2082
	mov	eax, esi
$L86124:
; Line 2084
	add	eax, 40					; 00000028H
; Line 2085
	inc	edi
; Line 2086
	cmp	BYTE PTR [eax], 10			; 0000000aH
	je	SHORT $L86124
$L86126:
; Line 2088
	dec	edi
; Line 2089
	cmp	DWORD PTR -4+[ebp], edi
	jge	SHORT $L86131
; Line 2090
	mov	eax, DWORD PTR -16+[ebp]
; Line 2091
	mov	esi, edi
	sub	esi, DWORD PTR -4+[ebp]
	mov	DWORD PTR _v38$[ebp], eax
$L86129:
; Line 2094
	mov	eax, DWORD PTR _v38$[ebp]
; Line 2095
	add	DWORD PTR _v38$[ebp], 40		; 00000028H
	push	2
	xor	cl, cl
	pop	edx
	mov	DWORD PTR _v14$[ebp], eax
; Line 2096
	dec	esi
	call	@random@8
; Line 2097
	mov	ecx, DWORD PTR _v14$[ebp]
	neg	eax
	sbb	al, al
	and	al, 253					; 000000fdH
	add	al, 129					; 00000081H
; Line 2098
	test	esi, esi
	mov	BYTE PTR [ecx], al
	jne	SHORT $L86129
$L86131:
; Line 2101
	mov	eax, DWORD PTR _y$[ebp]
; Line 2103
	mov	esi, DWORD PTR -8+[ebp]
	inc	eax
	lea	edx, DWORD PTR [edi+edi*4]
	mov	ecx, eax
	mov	BYTE PTR _dungeon[eax+edx*8-1], -128	; ffffff80H
	cmp	BYTE PTR _dungeon[esi+eax], 9
	jne	SHORT $L86135
$L86133:
	inc	ecx
	cmp	BYTE PTR _dungeon[esi+ecx], 9
	je	SHORT $L86133
$L86135:
; Line 2105
	dec	ecx
; Line 2106
	mov	edi, eax
; Line 2107
	cmp	eax, ecx
	mov	DWORD PTR _v18$[ebp], ecx
	jge	SHORT $L86139
$L86137:
; Line 2109
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L86140
; Line 2110
	mov	BYTE PTR _dungeon[esi+edi], 121		; 00000079H
; Line 2111
	jmp	SHORT $L86141
$L86140:
; Line 2112
	mov	BYTE PTR _dungeon[esi+edi], 124		; 0000007cH
$L86141:
; Line 2113
	inc	edi
; Line 2114
	cmp	edi, DWORD PTR _v18$[ebp]
	jl	SHORT $L86137
	mov	ecx, DWORD PTR _v18$[ebp]
$L86139:
; Line 2116
	mov	BYTE PTR _dungeon[esi+ecx], 122		; 0000007aH
$L86121:
; Line 2119
	add	DWORD PTR -8+[ebp], 40			; 00000028H
	inc	DWORD PTR -4+[ebp]
; Line 2121
	mov	eax, DWORD PTR -4+[ebp]
	add	DWORD PTR -16+[ebp], 40			; 00000028H
	add	ebx, 40					; 00000028H
	lea	esi, DWORD PTR [eax-1]
	cmp	esi, 39					; 00000027H
	jl	$L86095
; Line 2122
	inc	DWORD PTR _y$[ebp]
; Line 2123
	cmp	DWORD PTR _y$[ebp], 39			; 00000027H
	jl	$L86091
; Line 2124
	xor	ebx, ebx
	mov	DWORD PTR _ya$[ebp], ebx
$L86142:
; Line 2126
	and	DWORD PTR _xa$[ebp], 0
	and	DWORD PTR -16+[ebp], 0
	lea	eax, DWORD PTR _dungeon[ebx]
	mov	DWORD PTR -20+[ebp], eax
$L86145:
; Line 2129
	mov	eax, DWORD PTR -20+[ebp]
	cmp	BYTE PTR [eax], 7
	jne	$LABEL_112$86149
; Line 2131
	xor	edx, edx
	xor	cl, cl
	inc	edx
	call	@random@8
	test	eax, eax
	jne	$LABEL_112$86149
; Line 2134
	mov	ecx, DWORD PTR _xa$[ebp]
	mov	edx, ebx
	call	@SkipThemeRoom@8
	test	al, al
	je	$LABEL_112$86149
; Line 2136
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 2137
	test	eax, eax
	mov	DWORD PTR _v36$[ebp], eax
	jne	$L86166
; Line 2138
	mov	edi, ebx
; Line 2139
	mov	esi, ebx
; Line 2140
	mov	edx, ebx
	jmp	SHORT $L86842
$L86153:
; Line 2141
	dec	esi
	mov	edx, esi
$L86842:
	mov	ecx, DWORD PTR _xa$[ebp]
	call	@WoodVertU@8
	test	al, al
	jne	SHORT $L86153
; Line 2143
	mov	edx, DWORD PTR _ya$[ebp]
	inc	esi
	jmp	SHORT $L86844
$L86157:
; Line 2144
	inc	edi
	mov	edx, edi
$L86844:
	mov	ecx, DWORD PTR _xa$[ebp]
	call	@WoodVertD@8
	test	al, al
	jne	SHORT $L86157
; Line 2147
	mov	eax, DWORD PTR -16+[ebp]
	xor	ecx, ecx
	dec	edi
	inc	ecx
	cmp	BYTE PTR _dungeon[esi+eax], 7
	jne	SHORT $L86159
; Line 2148
	xor	ecx, ecx
$L86159:
; Line 2149
	cmp	BYTE PTR _dungeon[edi+eax], 7
	jne	SHORT $L86160
; Line 2150
	xor	ecx, ecx
$L86160:
; Line 2151
	mov	eax, edi
	sub	eax, esi
	cmp	eax, 1
	jle	$L86835
; Line 2153
	test	ecx, ecx
	je	$L86835
; Line 2155
	lea	edx, DWORD PTR [eax-1]
	xor	cl, cl
	call	@random@8
	lea	eax, DWORD PTR [eax+esi+1]
; Line 2157
	cmp	esi, edi
	mov	DWORD PTR _v40$[ebp], eax
	mov	ebx, esi
	jg	$L86835
$L86164:
; Line 2160
	cmp	ebx, DWORD PTR _v40$[ebp]
	je	SHORT $L86174
; Line 2161
	mov	eax, DWORD PTR -16+[ebp]
	lea	esi, DWORD PTR _dungeon[ebx+eax]
; Line 2162
	cmp	BYTE PTR [esi], 7
	jne	SHORT $L86168
; Line 2163
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	neg	eax
	sbb	al, al
	and	al, -2					; fffffffeH
	add	al, -119				; ffffff89H
	mov	BYTE PTR [esi], al
$L86168:
; Line 2164
	cmp	BYTE PTR [esi], 10			; 0000000aH
	jne	SHORT $L86169
; Line 2165
	mov	BYTE PTR [esi], -125			; ffffff83H
$L86169:
; Line 2166
	cmp	BYTE PTR [esi], 126			; 0000007eH
	jne	SHORT $L86170
; Line 2167
	mov	BYTE PTR [esi], -123			; ffffff85H
$L86170:
; Line 2168
	cmp	BYTE PTR [esi], -127			; ffffff81H
	jne	SHORT $L86171
; Line 2169
	mov	BYTE PTR [esi], -123			; ffffff85H
$L86171:
; Line 2170
	cmp	BYTE PTR [esi], 2
	jne	SHORT $L86172
; Line 2171
	mov	BYTE PTR [esi], -117			; ffffff8bH
$L86172:
; Line 2172
	cmp	BYTE PTR [esi], -122			; ffffff86H
	jne	SHORT $L86173
; Line 2173
	mov	BYTE PTR [esi], -118			; ffffff8aH
$L86173:
; Line 2174
	cmp	BYTE PTR [esi], -120			; ffffff88H
	jne	SHORT $L86174
; Line 2175
	mov	BYTE PTR [esi], -118			; ffffff8aH
$L86174:
; Line 2177
	inc	ebx
; Line 2178
	cmp	ebx, edi
	jle	SHORT $L86164
	mov	ebx, DWORD PTR _ya$[ebp]
$L86166:
; Line 2180
	cmp	DWORD PTR _v36$[ebp], 1
	jne	$LABEL_112$86149
; Line 2182
	mov	ecx, DWORD PTR _xa$[ebp]
	mov	edi, ecx
; Line 2183
	jmp	SHORT $L86846
$L86177:
; Line 2184
	dec	edi
	mov	ecx, edi
$L86846:
	mov	edx, ebx
	call	@WoodHorizL@8
	test	al, al
	jne	SHORT $L86177
; Line 2187
	mov	ecx, DWORD PTR _xa$[ebp]
	inc	edi
	mov	esi, ecx
; Line 2188
	mov	edx, ebx
	jmp	SHORT $L86848
$L86180:
	mov	edx, DWORD PTR _ya$[ebp]
; Line 2189
	inc	esi
	mov	ecx, esi
$L86848:
	call	@WoodHorizR@8
	test	al, al
	jne	SHORT $L86180
; Line 2191
	mov	ebx, DWORD PTR _ya$[ebp]
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [esi-1]
	lea	esi, DWORD PTR _dungeon[ebx+ecx*8]
; Line 2192
	xor	ecx, ecx
	inc	ecx
	mov	DWORD PTR _v33$[ebp], eax
; Line 2193
	cmp	BYTE PTR [esi], 7
	jne	SHORT $L86182
; Line 2194
	xor	ecx, ecx
$L86182:
; Line 2195
	lea	edx, DWORD PTR [eax+eax*4]
	cmp	BYTE PTR _dungeon[ebx+edx*8], 7
	jne	SHORT $L86183
; Line 2196
	xor	ecx, ecx
$L86183:
; Line 2197
	sub	eax, edi
	cmp	eax, 1
	jle	SHORT $LABEL_112$86149
	test	ecx, ecx
	je	SHORT $LABEL_112$86149
; Line 2198
	lea	edx, DWORD PTR [eax-1]
	xor	cl, cl
	call	@random@8
	lea	eax, DWORD PTR [eax+edi+1]
	mov	DWORD PTR _v41$[ebp], eax
$L86186:
; Line 2200
	cmp	edi, DWORD PTR _v33$[ebp]
	jg	SHORT $LABEL_112$86149
; Line 2202
	cmp	edi, DWORD PTR _v41$[ebp]
	je	SHORT $LABEL_110$86192
; Line 2203
	cmp	BYTE PTR [esi], 7
	jne	SHORT $L86190
; Line 2204
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L86191
; Line 2205
	mov	BYTE PTR [esi], -122			; ffffff86H
; Line 2206
	jmp	SHORT $LABEL_110$86192
$L86191:
; Line 2208
	mov	BYTE PTR [esi], -120			; ffffff88H
$L86190:
; Line 2210
	cmp	BYTE PTR [esi], 9
	jne	SHORT $L86193
; Line 2211
	mov	BYTE PTR [esi], -126			; ffffff82H
$L86193:
; Line 2212
	cmp	BYTE PTR [esi], 121			; 00000079H
	jne	SHORT $L86194
; Line 2213
	mov	BYTE PTR [esi], -124			; ffffff84H
$L86194:
; Line 2214
	cmp	BYTE PTR [esi], 124			; 0000007cH
	jne	SHORT $L86195
; Line 2215
	mov	BYTE PTR [esi], -124			; ffffff84H
$L86195:
; Line 2216
	cmp	BYTE PTR [esi], 4
	jne	SHORT $L86196
; Line 2217
	mov	BYTE PTR [esi], -116			; ffffff8cH
$L86196:
; Line 2218
	cmp	BYTE PTR [esi], -121			; ffffff87H
	jne	SHORT $L86197
; Line 2219
	mov	BYTE PTR [esi], -118			; ffffff8aH
$L86197:
; Line 2220
	cmp	BYTE PTR [esi], -119			; ffffff89H
	jne	SHORT $LABEL_110$86192
; Line 2221
	mov	BYTE PTR [esi], -118			; ffffff8aH
$LABEL_110$86192:
; Line 2224
	inc	edi
; Line 2225
	add	esi, 40					; 00000028H
	jmp	SHORT $L86186
$L86835:
; Line 2199
	mov	ebx, DWORD PTR _ya$[ebp]
$LABEL_112$86149:
; Line 2231
	add	DWORD PTR -16+[ebp], 40			; 00000028H
	inc	DWORD PTR _xa$[ebp]
	add	DWORD PTR -20+[ebp], 40			; 00000028H
; Line 2232
	cmp	DWORD PTR -16+[ebp], 1600		; 00000640H
	jl	$L86145
; Line 2233
	inc	ebx
; Line 2234
	cmp	ebx, 40					; 00000028H
	mov	DWORD PTR _ya$[ebp], ebx
	jl	$L86142
; Line 2235
	call	_AddFenceDoors
; Line 2236
	call	_FenceDoorFix
	pop	edi
	pop	esi
	pop	ebx
; Line 2237
	leave
	ret	0
_DRLG_L3Wood ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @WoodVertU@8
_TEXT	SEGMENT
@WoodVertU@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _y$ = edx
; Line 2249
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	ebx
	shl	ecx, 3
; Line 2250
	xor	al, al
	mov	bl, BYTE PTR _dungeon[ecx+edx+40]
; Line 2251
	cmp	bl, 152					; 00000098H
	ja	SHORT $L86213
	cmp	bl, 130					; 00000082H
	jae	SHORT $L86216
$L86213:
; Line 2252
	lea	ecx, DWORD PTR _dungeon[ecx+edx]
; Line 2253
	mov	dl, BYTE PTR [ecx-40]
; Line 2254
	cmp	dl, 152					; 00000098H
	ja	SHORT $L86215
	cmp	dl, 130					; 00000082H
	jae	SHORT $L86216
$L86215:
; Line 2255
	mov	cl, BYTE PTR [ecx]
; Line 2256
	cmp	cl, 7
	je	SHORT $L86217
	cmp	cl, 10					; 0000000aH
	je	SHORT $L86217
	cmp	cl, 126					; 0000007eH
	je	SHORT $L86217
	cmp	cl, -127				; ffffff81H
	je	SHORT $L86217
	cmp	cl, -122				; ffffff86H
	je	SHORT $L86217
	cmp	cl, -120				; ffffff88H
	jne	SHORT $L86216
$L86217:
; Line 2257
	mov	al, 1
$L86216:
	pop	ebx
; Line 2261
	ret	0
@WoodVertU@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @WoodVertD@8
_TEXT	SEGMENT
@WoodVertD@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _y$ = edx
; Line 2273
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	ebx
	shl	ecx, 3
; Line 2274
	xor	al, al
	mov	bl, BYTE PTR _dungeon[ecx+edx+40]
; Line 2275
	cmp	bl, 152					; 00000098H
	ja	SHORT $L86232
	cmp	bl, 130					; 00000082H
	jae	SHORT $L86235
$L86232:
; Line 2276
	lea	ecx, DWORD PTR _dungeon[ecx+edx]
; Line 2277
	mov	dl, BYTE PTR [ecx-40]
; Line 2278
	cmp	dl, 152					; 00000098H
	ja	SHORT $L86234
	cmp	dl, 130					; 00000082H
	jae	SHORT $L86235
$L86234:
; Line 2279
	mov	cl, BYTE PTR [ecx]
; Line 2280
	cmp	cl, 7
	je	SHORT $L86236
	cmp	cl, 2
	je	SHORT $L86236
	cmp	cl, -122				; ffffff86H
	je	SHORT $L86236
	cmp	cl, -120				; ffffff88H
	jne	SHORT $L86235
$L86236:
; Line 2281
	mov	al, 1
$L86235:
	pop	ebx
; Line 2285
	ret	0
@WoodVertD@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @WoodHorizL@8
_TEXT	SEGMENT
@WoodHorizL@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _j$ = edx
; Line 2297
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	ebx
	shl	ecx, 3
; Line 2298
	xor	al, al
	mov	bl, BYTE PTR _dungeon[ecx+edx+1]
; Line 2299
	cmp	bl, 152					; 00000098H
	ja	SHORT $L86251
	cmp	bl, 130					; 00000082H
	jae	SHORT $L86254
$L86251:
; Line 2300
	lea	ecx, DWORD PTR _dungeon[ecx+edx]
; Line 2301
	mov	dl, BYTE PTR [ecx-1]
; Line 2302
	cmp	dl, 152					; 00000098H
	ja	SHORT $L86253
	cmp	dl, 130					; 00000082H
	jae	SHORT $L86254
$L86253:
; Line 2303
	mov	cl, BYTE PTR [ecx]
; Line 2304
	cmp	cl, 7
	je	SHORT $L86255
	cmp	cl, 9
	je	SHORT $L86255
	cmp	cl, 121					; 00000079H
	je	SHORT $L86255
	cmp	cl, 124					; 0000007cH
	je	SHORT $L86255
	cmp	cl, -121				; ffffff87H
	je	SHORT $L86255
	cmp	cl, -119				; ffffff89H
	jne	SHORT $L86254
$L86255:
; Line 2305
	mov	al, 1
$L86254:
	pop	ebx
; Line 2309
	ret	0
@WoodHorizL@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @WoodHorizR@8
_TEXT	SEGMENT
@WoodHorizR@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _j$ = edx
; Line 2321
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	ebx
	shl	ecx, 3
; Line 2322
	xor	al, al
	mov	bl, BYTE PTR _dungeon[ecx+edx+1]
; Line 2323
	cmp	bl, 152					; 00000098H
	ja	SHORT $L86270
	cmp	bl, 130					; 00000082H
	jae	SHORT $L86273
$L86270:
; Line 2324
	lea	ecx, DWORD PTR _dungeon[ecx+edx]
; Line 2325
	mov	dl, BYTE PTR [ecx-1]
; Line 2326
	cmp	dl, 152					; 00000098H
	ja	SHORT $L86272
	cmp	dl, 130					; 00000082H
	jae	SHORT $L86273
$L86272:
; Line 2327
	mov	cl, BYTE PTR [ecx]
; Line 2328
	cmp	cl, 7
	je	SHORT $L86274
	cmp	cl, 4
	je	SHORT $L86274
	cmp	cl, -121				; ffffff87H
	je	SHORT $L86274
	cmp	cl, -119				; ffffff89H
	jne	SHORT $L86273
$L86274:
; Line 2329
	mov	al, 1
$L86273:
	pop	ebx
; Line 2333
	ret	0
@WoodHorizR@8 ENDP
_TEXT	ENDS
EXTRN	_pMegaTiles:DWORD
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L3Pass3
_TEXT	SEGMENT
_v0$ = -4
_v1$ = -4
_v4$ = -8
_v6$ = -12
_v9$ = -4
_v15$ = -24
_v16$ = -20
_DRLG_L3Pass3 PROC NEAR					; COMDAT
; Line 2336
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 2359
	mov	eax, DWORD PTR _pMegaTiles
	push	ebx
	push	esi
	push	edi
	movzx	ecx, WORD PTR [eax+56]
	lea	edx, DWORD PTR [ecx+1]
; Line 2361
	mov	cx, WORD PTR [eax+58]
	mov	DWORD PTR _v0$[ebp], edx
	mov	WORD PTR _v0$[ebp], cx
; Line 2362
	inc	DWORD PTR _v0$[ebp]
; Line 2363
	mov	cx, WORD PTR [eax+60]
	mov	edi, DWORD PTR _v0$[ebp]
	mov	WORD PTR _v0$[ebp], cx
; Line 2364
	inc	DWORD PTR _v0$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _v15$[ebp], ecx
; Line 2365
	mov	cx, WORD PTR [eax+62]
	mov	WORD PTR _v0$[ebp], cx
; Line 2366
	mov	ecx, DWORD PTR _v0$[ebp]
; Line 2367
	mov	DWORD PTR _v1$[ebp], OFFSET FLAT:_dPiece+448
	lea	esi, DWORD PTR [ecx+1]
$L86305:
; Line 2369
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR -16+[ebp], 56			; 00000038H
	add	ecx, -444				; fffffe44H
$L86308:
; Line 2374
	mov	ebx, DWORD PTR _v15$[ebp]
	mov	DWORD PTR [ecx-4], edx
	mov	DWORD PTR [ecx+444], edi
	mov	DWORD PTR [ecx], ebx
; Line 2375
	mov	DWORD PTR [ecx+448], esi
; Line 2376
	add	ecx, 896				; 00000380H
; Line 2378
	dec	DWORD PTR -16+[ebp]
	jne	SHORT $L86308
; Line 2379
	add	DWORD PTR _v1$[ebp], 8
; Line 2380
	cmp	DWORD PTR _v1$[ebp], OFFSET FLAT:_dPiece+896
	jl	SHORT $L86305
; Line 2381
	and	DWORD PTR _v4$[ebp], 0
	mov	DWORD PTR -16+[ebp], OFFSET FLAT:_dPiece+7236
$L86313:
; Line 2385
	mov	ecx, DWORD PTR _v4$[ebp]
	mov	esi, DWORD PTR -16+[ebp]
	mov	DWORD PTR -24+[ebp], 40			; 00000028H
	lea	ecx, DWORD PTR _dungeon[ecx]
	mov	DWORD PTR _v6$[ebp], ecx
$L86317:
; Line 2388
	mov	ecx, DWORD PTR _v6$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	dec	ecx
; Line 2389
	jns	SHORT $L86320
; Line 2390
	xor	ecx, ecx
	xor	edx, edx
; Line 2391
	xor	edi, edi
; Line 2392
	mov	DWORD PTR _v16$[ebp], ecx
; Line 2394
	jmp	SHORT $L86321
$L86320:
; Line 2395
	lea	ecx, DWORD PTR [eax+ecx*8]
; Line 2396
	mov	dx, WORD PTR [ecx]
; Line 2397
	inc	ecx
; Line 2398
	movzx	edx, dx
	inc	ecx
	inc	edx
	mov	DWORD PTR _v9$[ebp], edx
; Line 2400
	mov	di, WORD PTR [ecx]
; Line 2401
	inc	ecx
	mov	WORD PTR _v9$[ebp], di
	inc	ecx
; Line 2402
	inc	DWORD PTR _v9$[ebp]
; Line 2403
	mov	bx, WORD PTR [ecx]
	mov	edi, DWORD PTR _v9$[ebp]
; Line 2405
	mov	cx, WORD PTR [ecx+2]
	mov	WORD PTR _v9$[ebp], bx
	inc	DWORD PTR _v9$[ebp]
	mov	ebx, DWORD PTR _v9$[ebp]
	mov	WORD PTR _v9$[ebp], cx
; Line 2406
	mov	ecx, DWORD PTR _v9$[ebp]
	mov	DWORD PTR _v16$[ebp], ebx
	inc	ecx
$L86321:
; Line 2408
	add	DWORD PTR _v6$[ebp], 40			; 00000028H
; Line 2409
	mov	DWORD PTR [esi-4], edx
; Line 2411
	mov	edx, DWORD PTR _v16$[ebp]
	mov	DWORD PTR [esi+444], edi
	mov	DWORD PTR [esi], edx
; Line 2412
	mov	DWORD PTR [esi+448], ecx
; Line 2413
	add	esi, 896				; 00000380H
; Line 2415
	dec	DWORD PTR -24+[ebp]
	jne	SHORT $L86317
; Line 2416
	add	DWORD PTR -16+[ebp], 8
; Line 2417
	inc	DWORD PTR _v4$[ebp]
; Line 2418
	cmp	DWORD PTR _v4$[ebp], 40			; 00000028H
	jl	$L86313
	pop	edi
	pop	esi
	pop	ebx
; Line 2419
	leave
	ret	0
_DRLG_L3Pass3 ENDP
_TEXT	ENDS
PUBLIC	@LoadL3Dungeon@12
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	@LoadFileInMem@8:NEAR
EXTRN	@SetMapObjects@12:NEAR
EXTRN	@SetMapMonsters@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @LoadL3Dungeon@12
_TEXT	SEGMENT
_v5$ = -8
_v10$ = -4
_v16$ = -4
@LoadL3Dungeon@12 PROC NEAR				; COMDAT
; _sFileName$ = ecx
; _vx$ = edx
; Line 2422
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	esi, ecx
; Line 2442
	call	_InitL3Dungeon
; Line 2443
	push	16					; 00000010H
	pop	eax
; Line 2445
	push	96					; 00000060H
	mov	DWORD PTR _dminx, eax
	mov	DWORD PTR _dminy, eax
	pop	eax
	mov	DWORD PTR _dmaxx, eax
; Line 2446
	mov	DWORD PTR _dmaxy, eax
; Line 2447
	call	_DRLG_InitTrans
; Line 2448
	xor	edx, edx
	mov	ecx, esi
	call	@LoadFileInMem@8
; Line 2451
	movzx	esi, BYTE PTR [eax]
	mov	DWORD PTR _v5$[ebp], eax
	xor	ebx, ebx
; Line 2452
	inc	eax
	inc	eax
; Line 2453
	movzx	ecx, BYTE PTR [eax]
; Line 2454
	add	eax, 2
; Line 2455
	test	ecx, ecx
	jle	SHORT $L86355
$L86353:
; Line 2457
	test	esi, esi
	jle	SHORT $L86360
; Line 2458
	mov	DWORD PTR _v16$[ebp], esi
; Line 2459
	lea	edi, DWORD PTR _dungeon[ebx]
$L86358:
; Line 2461
	mov	dl, BYTE PTR [eax]
	test	dl, dl
	je	SHORT $L86361
; Line 2462
	mov	BYTE PTR [edi], dl
; Line 2463
	jmp	SHORT $L86362
$L86361:
; Line 2464
	mov	BYTE PTR [edi], 7
$L86362:
; Line 2465
	add	edi, 40					; 00000028H
; Line 2466
	inc	eax
	inc	eax
; Line 2467
	dec	DWORD PTR _v16$[ebp]
; Line 2468
	jne	SHORT $L86358
$L86360:
; Line 2470
	inc	ebx
; Line 2471
	cmp	ebx, ecx
	jl	SHORT $L86353
$L86355:
; Line 2473
	xor	ecx, ecx
	mov	DWORD PTR _v10$[ebp], ecx
$L86363:
; Line 2476
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[ecx]
	pop	edx
$L86367:
; Line 2479
	cmp	BYTE PTR [eax], 0
	jne	SHORT $L86370
; Line 2480
	mov	BYTE PTR [eax], 8
$L86370:
; Line 2481
	add	eax, 40					; 00000028H
; Line 2483
	dec	edx
	jne	SHORT $L86367
; Line 2484
	inc	ecx
; Line 2485
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L86363
; Line 2486
	mov	DWORD PTR _abyssx, 112			; 00000070H
; Line 2487
	call	_DRLG_L3Pass3
; Line 2488
	call	_DRLG_Init_Globals
; Line 2491
	mov	ecx, DWORD PTR _v5$[ebp]
	push	0
	xor	edx, edx
	mov	DWORD PTR _ViewX, 31			; 0000001fH
	mov	DWORD PTR _ViewY, 83			; 00000053H
	call	@SetMapMonsters@12
; Line 2492
	mov	ecx, DWORD PTR _v5$[ebp]
	xor	edx, edx
	push	0
	call	@SetMapObjects@12
; Line 2493
	mov	ebx, OFFSET FLAT:_dPiece
$L86373:
; Line 2495
	xor	esi, esi
; Line 2496
	mov	edi, ebx
$L86377:
; Line 2498
	mov	eax, DWORD PTR [edi]
; Line 2499
	cmp	eax, 56					; 00000038H
	jl	SHORT $L86382
	cmp	eax, 147				; 00000093H
	jle	SHORT $L86381
$L86382:
	cmp	eax, 154				; 0000009aH
	jl	SHORT $L86383
	cmp	eax, 161				; 000000a1H
	jle	SHORT $L86381
$L86383:
	cmp	eax, 150				; 00000096H
	je	SHORT $L86381
	cmp	eax, 152				; 00000098H
	jne	SHORT $L86380
$L86381:
; Line 2500
	mov	edx, DWORD PTR _v10$[ebp]
	push	-1
	push	7
	mov	ecx, esi
	call	@DoLighting@16
$L86380:
; Line 2501
	add	edi, 448				; 000001c0H
; Line 2502
	inc	esi
; Line 2503
	cmp	esi, 112				; 00000070H
	jl	SHORT $L86377
; Line 2504
	add	ebx, 4
; Line 2505
	inc	DWORD PTR _v10$[ebp]
; Line 2506
	cmp	ebx, OFFSET FLAT:_dPiece+448
	jl	SHORT $L86373
; Line 2507
	mov	ecx, DWORD PTR _v5$[ebp]
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
	pop	ebx
; Line 2508
	leave
	ret	4
@LoadL3Dungeon@12 ENDP
_TEXT	ENDS
PUBLIC	@LoadPreL3Dungeon@12
EXTRN	_memcpy:NEAR
; Function compile flags: /Ogsy
;	COMDAT @LoadPreL3Dungeon@12
_TEXT	SEGMENT
_v5$ = -8
_v13$ = -4
@LoadPreL3Dungeon@12 PROC NEAR				; COMDAT
; _sFileName$ = ecx
; _vx$ = edx
; Line 2516
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	esi, ecx
; Line 2531
	call	_InitL3Dungeon
; Line 2532
	call	_DRLG_InitTrans
; Line 2533
	xor	edx, edx
	mov	ecx, esi
	call	@LoadFileInMem@8
; Line 2536
	movzx	edi, BYTE PTR [eax]
	mov	DWORD PTR _v5$[ebp], eax
	xor	ebx, ebx
; Line 2537
	inc	eax
	inc	eax
; Line 2538
	movzx	ecx, BYTE PTR [eax]
; Line 2539
	add	eax, 2
; Line 2540
	test	ecx, ecx
	jle	SHORT $L86410
$L86408:
; Line 2542
	test	edi, edi
	jle	SHORT $L86415
; Line 2543
	mov	DWORD PTR _v13$[ebp], edi
; Line 2544
	lea	esi, DWORD PTR _dungeon[ebx]
$L86413:
; Line 2546
	mov	dl, BYTE PTR [eax]
	test	dl, dl
	je	SHORT $L86416
; Line 2547
	mov	BYTE PTR [esi], dl
; Line 2548
	jmp	SHORT $L86417
$L86416:
; Line 2549
	mov	BYTE PTR [esi], 7
$L86417:
; Line 2550
	add	esi, 40					; 00000028H
; Line 2551
	inc	eax
	inc	eax
; Line 2552
	dec	DWORD PTR _v13$[ebp]
; Line 2553
	jne	SHORT $L86413
$L86415:
; Line 2555
	inc	ebx
; Line 2556
	cmp	ebx, ecx
	jl	SHORT $L86408
$L86410:
	pop	edi
	pop	esi
; Line 2558
	xor	ecx, ecx
	pop	ebx
$L86418:
; Line 2560
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[ecx]
	pop	edx
$L86422:
; Line 2563
	cmp	BYTE PTR [eax], 0
	jne	SHORT $L86425
; Line 2564
	mov	BYTE PTR [eax], 8
$L86425:
; Line 2565
	add	eax, 40					; 00000028H
; Line 2567
	dec	edx
	jne	SHORT $L86422
; Line 2568
	inc	ecx
; Line 2569
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L86418
; Line 2570
	push	1600					; 00000640H
	push	OFFSET FLAT:_dungeon
	push	OFFSET FLAT:_pdungeon
	call	_memcpy
; Line 2571
	mov	ecx, DWORD PTR _v5$[ebp]
	add	esp, 12					; 0000000cH
	call	@mem_free_dbg@4
; Line 2572
	leave
	ret	4
@LoadPreL3Dungeon@12 ENDP
_TEXT	ENDS
END
