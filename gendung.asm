; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/gendung.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@NKMI@Levels?2TownData?2Town?4SOL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BOMD@Levels?2L1Data?2L1?4SOL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@EIJD@Levels?2L2Data?2L2?4SOL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@IFFM@Levels?2L3Data?2L3?4SOL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OEDD@Levels?2L4Data?2L4?4SOL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NPKK@FillSolidBlockTbls?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _qmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FillSolidBlockTbls
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gendung_418D91
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gendung_4191BF@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gendung_4191FB@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gendung_get_dpiece_num_from_coord@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gendung_4192C2
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SetDungeonMicros
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_InitTrans
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_MRectTrans@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_RectTrans@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_CopyTrans@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_ListTrans@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_AreaTrans@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_InitSetPC
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_SetPC
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Make_SetPC@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_WillThemeRoomFit@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_CreateThemeRoom@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_PlaceThemeRooms@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_HoldThemeRooms
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SkipThemeRoom@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitLevels
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_scr_pix_height:DWORD
COMM	_dArch:BYTE:03100H
COMM	_nBlockTable:BYTE:0801H
COMM	_level_special_cel:DWORD
COMM	_dFlags:BYTE:03100H
COMM	_dItem:BYTE:03100H
COMM	_setlvlnum:BYTE
COMM	_level_frame_sizes:DWORD:0800H
COMM	_nMissileTable:BYTE:0801H
COMM	_pSetPiece_2:DWORD
COMM	_setlvltype:BYTE
COMM	_setlevel:BYTE
COMM	_LvlViewY:DWORD
COMM	_LvlViewX:DWORD
COMM	_dmaxx:DWORD
COMM	_dmaxy:DWORD
COMM	_setpc_h:DWORD
COMM	_setpc_w:DWORD
COMM	_setpc_x:DWORD
COMM	_ViewX:DWORD
COMM	_ViewY:DWORD
COMM	_setpc_y:DWORD
COMM	_dMissile:BYTE:03100H
COMM	_dminx:DWORD
COMM	_dminy:DWORD
COMM	_dpiece_defs_map_2:WORD:031000H
COMM	_level_frame_types:WORD:0800H
COMM	_themeCount:DWORD
COMM	_nTransTable:BYTE:0801H
COMM	_dMonster:DWORD:03100H
COMM	_dungeon:BYTE:0640H
COMM	_dObject:BYTE:03100H
COMM	_pSpeedCels:DWORD
COMM	_nlevel_frames:DWORD
COMM	_pdungeon:BYTE:0640H
COMM	_dDead:BYTE:03100H
COMM	_dpiece_defs_map_1:WORD:031000H
COMM	_dTransVal2:BYTE:03100H
COMM	_TransVal:BYTE
COMM	_dword_5A5594:DWORD
COMM	_dflags:BYTE:0640H
COMM	_dPiece:DWORD:03100H
COMM	_dTransVal:BYTE:03100H
COMM	_setloadflag_2:DWORD
COMM	_tile_defs:DWORD:0800H
COMM	_pMegaTiles:DWORD
COMM	_pLevelPieces:DWORD
COMM	_gnDifficulty:DWORD
COMM	_block_lvid:BYTE:0801H
COMM	_dung_map:BYTE:03100H
COMM	_nTrapTable:BYTE:0801H
COMM	_leveltype:BYTE
COMM	_currlevel:BYTE
COMM	_TransList:BYTE:0100H
COMM	_nSolidTable:BYTE:0801H
COMM	_level_frame_count:DWORD:0800H
COMM	_ScrollInfo:BYTE:014H
COMM	_pDungeonCels:DWORD
COMM	_speed_cel_frame_num_from_light_index_frame_num:DWORD:0800H
COMM	_themeLoc:BYTE:03e8H
COMM	_dPlayer:BYTE:03100H
COMM	_dword_5C2FF8:DWORD
COMM	_dword_5C2FFC:DWORD
COMM	_scr_pix_width:DWORD
_DATA	ENDS
PUBLIC	_FillSolidBlockTbls
PUBLIC	??_C@_0BJ@NKMI@Levels?2TownData?2Town?4SOL?$AA@	; `string'
PUBLIC	??_C@_0BF@BOMD@Levels?2L1Data?2L1?4SOL?$AA@	; `string'
PUBLIC	??_C@_0BF@EIJD@Levels?2L2Data?2L2?4SOL?$AA@	; `string'
PUBLIC	??_C@_0BF@IFFM@Levels?2L3Data?2L3?4SOL?$AA@	; `string'
PUBLIC	??_C@_0BF@OEDD@Levels?2L4Data?2L4?4SOL?$AA@	; `string'
PUBLIC	??_C@_0BD@NPKK@FillSolidBlockTbls?$AA@		; `string'
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	@LoadFileInMem@8:NEAR
EXTRN	_TermMsg:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0BD@NPKK@FillSolidBlockTbls?$AA@
; File Source/gendung.cpp
_DATA	SEGMENT
??_C@_0BD@NPKK@FillSolidBlockTbls?$AA@ DB 'FillSolidBlockTbls', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OEDD@Levels?2L4Data?2L4?4SOL?$AA@
_DATA	SEGMENT
??_C@_0BF@OEDD@Levels?2L4Data?2L4?4SOL?$AA@ DB 'Levels\L4Data\L4.SOL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@IFFM@Levels?2L3Data?2L3?4SOL?$AA@
_DATA	SEGMENT
??_C@_0BF@IFFM@Levels?2L3Data?2L3?4SOL?$AA@ DB 'Levels\L3Data\L3.SOL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@EIJD@Levels?2L2Data?2L2?4SOL?$AA@
_DATA	SEGMENT
??_C@_0BF@EIJD@Levels?2L2Data?2L2?4SOL?$AA@ DB 'Levels\L2Data\L2.SOL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BOMD@Levels?2L1Data?2L1?4SOL?$AA@
_DATA	SEGMENT
??_C@_0BF@BOMD@Levels?2L1Data?2L1?4SOL?$AA@ DB 'Levels\L1Data\L1.SOL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@NKMI@Levels?2TownData?2Town?4SOL?$AA@
_DATA	SEGMENT
??_C@_0BJ@NKMI@Levels?2TownData?2Town?4SOL?$AA@ DB 'Levels\TownData\Town.'
	DB	'SOL', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _FillSolidBlockTbls
_TEXT	SEGMENT
_dwTiles$ = -4
_pSBFile$ = -4
_FillSolidBlockTbls PROC NEAR				; COMDAT
; Line 73
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 79
	mov	esi, 2049				; 00000801H
	xor	edi, edi
	push	esi
	push	edi
	push	OFFSET FLAT:_nBlockTable
	call	_memset
; Line 80
	push	esi
	push	edi
	push	OFFSET FLAT:_nSolidTable
	call	_memset
; Line 81
	push	esi
	push	edi
	push	OFFSET FLAT:_nTransTable
	call	_memset
; Line 82
	push	esi
	push	edi
	push	OFFSET FLAT:_nMissileTable
	call	_memset
; Line 83
	push	esi
	push	edi
	push	OFFSET FLAT:_nTrapTable
	call	_memset
; Line 85
	movzx	eax, BYTE PTR _leveltype
	add	esp, 60					; 0000003cH
	sub	eax, edi
	je	SHORT $L84992
	dec	eax
	je	SHORT $L84995
	dec	eax
	je	SHORT $L84998
	dec	eax
	je	SHORT $L85001
	dec	eax
	je	SHORT $L85004
; Line 102
	push	OFFSET FLAT:??_C@_0BD@NPKK@FillSolidBlockTbls?$AA@ ; `string'
	call	_TermMsg
; Line 103
	mov	eax, DWORD PTR _pSBFile$[ebp]
	pop	ecx
	jmp	SHORT $L84989
$L85004:
; Line 99
	mov	ecx, OFFSET FLAT:??_C@_0BF@OEDD@Levels?2L4Data?2L4?4SOL?$AA@ ; `string'
; Line 100
	jmp	SHORT $L85754
$L85001:
; Line 96
	mov	ecx, OFFSET FLAT:??_C@_0BF@IFFM@Levels?2L3Data?2L3?4SOL?$AA@ ; `string'
; Line 97
	jmp	SHORT $L85754
$L84998:
; Line 93
	mov	ecx, OFFSET FLAT:??_C@_0BF@EIJD@Levels?2L2Data?2L2?4SOL?$AA@ ; `string'
; Line 94
	jmp	SHORT $L85754
$L84995:
; Line 90
	mov	ecx, OFFSET FLAT:??_C@_0BF@BOMD@Levels?2L1Data?2L1?4SOL?$AA@ ; `string'
; Line 91
	jmp	SHORT $L85754
$L84992:
; Line 87
	mov	ecx, OFFSET FLAT:??_C@_0BJ@NKMI@Levels?2TownData?2Town?4SOL?$AA@ ; `string'
$L85754:
	lea	edx, DWORD PTR _dwTiles$[ebp]
	call	@LoadFileInMem@8
$L84989:
; Line 107
	cmp	DWORD PTR _dwTiles$[ebp], 1
	mov	esi, eax
	jb	SHORT $L85011
; Line 110
	xor	edx, edx
	push	ebx
$L85009:
	mov	bl, BYTE PTR [esi]
	inc	esi
	test	bl, 1
	je	SHORT $L85012
	mov	BYTE PTR _nSolidTable[edx+1], 1
$L85012:
; Line 111
	test	bl, 2
	je	SHORT $L85013
; Line 112
	mov	BYTE PTR _nBlockTable[edx+1], 1
$L85013:
; Line 113
	test	bl, 4
	je	SHORT $L85014
; Line 114
	mov	BYTE PTR _nMissileTable[edx+1], 1
$L85014:
; Line 115
	test	bl, 8
	je	SHORT $L85015
; Line 116
	mov	BYTE PTR _nTransTable[edx+1], 1
$L85015:
; Line 117
	test	bl, bl
	jns	SHORT $L85016
; Line 118
	mov	BYTE PTR _nTrapTable[edx+1], 1
$L85016:
; Line 119
	shr	bl, 4
	and	bl, 7
	mov	BYTE PTR _block_lvid[edx+1], bl
	inc	edx
	lea	ecx, DWORD PTR [edx+1]
	cmp	ecx, DWORD PTR _dwTiles$[ebp]
	jbe	SHORT $L85009
	pop	ebx
$L85011:
; Line 122
	mov	ecx, eax
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
; Line 123
	leave
	ret	0
_FillSolidBlockTbls ENDP
_TEXT	ENDS
PUBLIC	_gendung_418D91
PUBLIC	@gendung_4191BF@4
EXTRN	_pLightTbl:DWORD
EXTRN	_light4flag:DWORD
; Function compile flags: /Ogsy
;	COMDAT _gendung_418D91
_TEXT	SEGMENT
_v7$ = -20
_v9$ = -8
_v14$ = -20
_v16$ = -4
_v17$ = -40
_v23$ = -20
_v36$ = -24
_v37$ = -8
_v38$ = -4
_v39$ = -4
_v46$ = -44
_v47$ = -48
_v48$ = -56
_v49$ = -40
_v50$ = -40
_v52$ = -36
_v53$ = -16
_v54$ = -12
_v55$ = -20
_v57$ = -32
_v58$ = -44
_v59$ = -44
_v60$ = -16
_v64$ = -28
_v65$ = -32
_gendung_418D91 PROC NEAR				; COMDAT
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	ebx
	push	esi
	push	edi
; Line 190
	xor	esi, esi
; Line 191
	push	4096					; 00001000H
	push	esi
	push	OFFSET FLAT:_level_frame_types
	call	_memset
; Line 192
	push	8192					; 00002000H
	push	esi
	push	OFFSET FLAT:_level_frame_count
	call	_memset
	add	esp, 24					; 00000018H
$L85080:
; Line 194
	mov	DWORD PTR _tile_defs[esi*4], esi
; Line 195
	inc	esi
; Line 196
	cmp	esi, 2048				; 00000800H
	jl	SHORT $L85080
; Line 198
	xor	eax, eax
	cmp	BYTE PTR _leveltype, 4
	mov	ebx, OFFSET FLAT:_dpiece_defs_map_2
	sete	al
	lea	edi, DWORD PTR [eax+eax+10]
	mov	DWORD PTR _v48$[ebp], edi
$L85083:
; Line 200
	mov	esi, ebx
	mov	DWORD PTR -40+[ebp], 112		; 00000070H
$L85086:
; Line 203
	xor	edx, edx
	test	edi, edi
	jle	SHORT $L85091
$L85089:
; Line 204
	mov	ax, WORD PTR [esi+edx*2]
; Line 205
	test	ax, ax
	je	SHORT $L85090
; Line 206
	mov	ecx, eax
	and	ecx, 4095				; 00000fffH
; Line 207
	inc	DWORD PTR _level_frame_count[ecx*4]
; Line 208
	and	ax, 28672				; 00007000H
	mov	WORD PTR _level_frame_types[ecx*2], ax
$L85090:
	inc	edx
	cmp	edx, edi
	jl	SHORT $L85089
$L85091:
; Line 211
	add	esi, 3584				; 00000e00H
; Line 213
	dec	DWORD PTR -40+[ebp]
	jne	SHORT $L85086
; Line 214
	add	ebx, 32					; 00000020H
; Line 215
	cmp	ebx, OFFSET FLAT:_dpiece_defs_map_2+3584
	jl	SHORT $L85083
; Line 217
	mov	eax, DWORD PTR _pDungeonCels
	xor	edx, edx
	mov	esi, 65535				; 0000ffffH
	inc	edx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v7$[ebp], edx
	and	ecx, esi
; Line 219
	cmp	ecx, edx
	mov	DWORD PTR _nlevel_frames, ecx
	jle	SHORT $L85103
; Line 224
	mov	edi, OFFSET FLAT:_level_frame_sizes
	lea	edx, DWORD PTR [eax+4]
	sub	edi, eax
$L85101:
	mov	ebx, DWORD PTR [edx+4]
	sub	ebx, DWORD PTR [edx]
	and	ebx, esi
	inc	DWORD PTR _v7$[ebp]
	mov	DWORD PTR [edx+edi], ebx
	add	edx, 4
	cmp	DWORD PTR _v7$[ebp], ecx
	jl	SHORT $L85101
$L85103:
; Line 226
	and	DWORD PTR _v9$[ebp], 0
; Line 227
	and	DWORD PTR _level_frame_sizes, 0
; Line 228
	cmp	BYTE PTR _leveltype, 4
	jne	$L85109
	mov	edx, ecx
	test	edx, edx
	jle	$L85109
$L85107:
; Line 230
	mov	edx, DWORD PTR _v9$[ebp]
	test	edx, edx
	jne	SHORT $L85110
; Line 231
	and	DWORD PTR _level_frame_count, edx
$L85110:
; Line 233
	mov	edi, edx
	mov	DWORD PTR _v53$[ebp], 1
	shl	edi, 2
	cmp	DWORD PTR _level_frame_count[edi], 0
	je	$L85140
; Line 234
	mov	edx, DWORD PTR _v9$[ebp]
; Line 235
	mov	esi, DWORD PTR [edi+eax]
	add	esi, eax
	cmp	WORD PTR _level_frame_types[edx*2], 4096 ; 00001000H
	jne	SHORT $L85112
; Line 236
	mov	DWORD PTR _v14$[ebp], 32		; 00000020H
$L85115:
; Line 238
	mov	edx, DWORD PTR _v14$[ebp]
; Line 239
	push	32					; 00000020H
	mov	DWORD PTR _v46$[ebp], edx
	pop	ebx
$L85122:
; Line 242
	movzx	edx, BYTE PTR [esi]
	inc	esi
	mov	DWORD PTR _v16$[ebp], edx
; Line 243
	test	dl, 128					; 00000080H
	je	SHORT $L85782
; Line 245
	neg	BYTE PTR _v16$[ebp]
; Line 246
	sub	ebx, DWORD PTR _v16$[ebp]
	jmp	SHORT $L85839
$L85782:
; Line 251
	mov	edx, DWORD PTR _v16$[ebp]
	sub	ebx, DWORD PTR _v16$[ebp]
	mov	DWORD PTR _v17$[ebp], edx
$L85129:
; Line 253
	mov	dl, BYTE PTR [esi]
	inc	esi
; Line 254
	test	dl, dl
	je	SHORT $L85132
	cmp	dl, 32					; 00000020H
	jae	SHORT $L85132
; Line 255
	and	DWORD PTR _v53$[ebp], 0
$L85132:
; Line 256
	dec	DWORD PTR _v17$[ebp]
; Line 257
	jne	SHORT $L85129
; Line 258
	test	ebx, ebx
$L85839:
	jne	SHORT $L85122
; Line 260
	dec	DWORD PTR _v14$[ebp]
; Line 261
	cmp	DWORD PTR _v46$[ebp], 1
$LABEL_36$85128:
	jne	SHORT $L85115
; Line 262
	jmp	SHORT $L85138
$L85112:
; Line 264
	mov	edx, DWORD PTR _level_frame_sizes[edi]
	test	edx, edx
	je	SHORT $L85140
; Line 263
	mov	ebx, edx
$L85136:
; Line 265
	mov	dl, BYTE PTR [esi]
	inc	esi
; Line 266
	test	dl, dl
	je	SHORT $L85137
	cmp	dl, 32					; 00000020H
	jae	SHORT $L85137
; Line 267
	and	DWORD PTR _v53$[ebp], 0
$L85137:
; Line 264
	dec	ebx
	jne	SHORT $L85136
$L85138:
; Line 270
	cmp	DWORD PTR _v53$[ebp], 0
	jne	SHORT $L85140
; Line 271
	and	DWORD PTR _level_frame_count[edi], 0
$L85140:
; Line 273
	inc	DWORD PTR _v9$[ebp]
; Line 274
	cmp	DWORD PTR _v9$[ebp], ecx
	jl	$L85107
$L85109:
; Line 276
	mov	ecx, 2047				; 000007ffH
	call	@gendung_4191BF@4
; Line 279
	mov	edx, DWORD PTR _light4flag
	xor	ecx, ecx
	xor	eax, eax
	test	edx, edx
	je	SHORT $L85146
$L85142:
; Line 281
	mov	esi, DWORD PTR _level_frame_sizes[eax*4]
	inc	eax
; Line 282
	lea	ecx, DWORD PTR [ecx+esi*2]
; Line 283
	cmp	ecx, 1048576				; 00100000H
	jl	SHORT $L85142
; Line 284
	jmp	SHORT $L85148
$L85146:
; Line 286
	mov	esi, DWORD PTR _level_frame_sizes[eax*4]
	imul	esi, 14					; 0000000eH
	add	ecx, esi
	inc	eax
; Line 287
	cmp	ecx, 1048576				; 00100000H
	jl	SHORT $L85146
$L85148:
; Line 289
	lea	edi, DWORD PTR [eax-1]
; Line 291
	mov	eax, 128				; 00000080H
	cmp	edi, eax
	mov	DWORD PTR _v58$[ebp], edi
	jle	SHORT $L85149
; Line 292
	mov	DWORD PTR _v58$[ebp], eax
; Line 293
	mov	edi, eax
$L85149:
; Line 295
	xor	eax, eax
	test	edx, edx
	setne	al
	neg	eax
	mov	DWORD PTR _v23$[ebp], eax
; Line 296
	xor	ecx, ecx
; Line 297
	and	BYTE PTR _v23$[ebp], 244		; 000000f4H
; Line 298
	and	DWORD PTR _v54$[ebp], ecx
; Line 299
	mov	eax, DWORD PTR _v23$[ebp]
	add	eax, 15					; 0000000fH
; Line 300
	test	edi, edi
	mov	DWORD PTR _v60$[ebp], eax
	jle	$L85154
; Line 301
	xor	esi, esi
; Line 302
	mov	DWORD PTR _v49$[ebp], OFFSET FLAT:_speed_cel_frame_num_from_light_index_frame_num
	mov	DWORD PTR -20+[ebp], OFFSET FLAT:_speed_cel_frame_num_from_light_index_frame_num+4
	inc	esi
$L85152:
; Line 375
	mov	eax, DWORD PTR _v54$[ebp]
	mov	ebx, DWORD PTR _v49$[ebp]
	mov	edx, eax
	shl	edx, 2
	mov	DWORD PTR -52+[ebp], edx
	mov	eax, DWORD PTR _tile_defs[edx]
	mov	DWORD PTR [ebx], eax
	mov	ebx, DWORD PTR _v54$[ebp]
	cmp	WORD PTR _level_frame_types[ebx*2], 4096 ; 00001000H
	jne	$L85155
	cmp	DWORD PTR _v60$[ebp], esi
	mov	DWORD PTR _v65$[ebp], esi
	jle	$LABEL_66$85197
	mov	edx, DWORD PTR -20+[ebp]
	mov	DWORD PTR -28+[ebp], 256		; 00000100H
	shl	eax, 2
	mov	DWORD PTR -36+[ebp], eax
$L85157:
	mov	eax, DWORD PTR -36+[ebp]
	mov	esi, DWORD PTR _pDungeonCels
	mov	edi, DWORD PTR _pLightTbl
	mov	ebx, DWORD PTR -28+[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [eax+esi]
	add	eax, esi
	mov	esi, DWORD PTR _pSpeedCels
	add	esi, ecx
	add	edi, ebx
	mov	DWORD PTR _v36$[ebp], 32		; 00000020H
$L85163:
	mov	ebx, DWORD PTR _v36$[ebp]
	mov	DWORD PTR _v37$[ebp], 32		; 00000020H
	mov	DWORD PTR _v47$[ebp], ebx
$L85170:
	movzx	ebx, BYTE PTR [eax]
	inc	eax
	mov	BYTE PTR [esi], bl
	inc	esi
	mov	DWORD PTR _v38$[ebp], ebx
	test	bl, bl
	jns	SHORT $L85784
	neg	BYTE PTR _v38$[ebp]
	mov	ebx, DWORD PTR _v38$[ebp]
	sub	DWORD PTR _v37$[ebp], ebx
	jmp	SHORT $L85840
$L85784:
; Line 331
	mov	ebx, DWORD PTR _v38$[ebp]
	sub	DWORD PTR _v37$[ebp], ebx
; Line 332
	mov	DWORD PTR _v39$[ebp], ebx
$L85178:
; Line 334
	movsx	ebx, BYTE PTR [eax]
; Line 336
	movzx	ebx, bl
	inc	eax
	mov	bl, BYTE PTR [ebx+edi]
	mov	BYTE PTR [esi], bl
	inc	esi
; Line 337
	dec	DWORD PTR _v39$[ebp]
; Line 338
	jne	SHORT $L85178
; Line 339
	cmp	DWORD PTR _v37$[ebp], 0
$L85840:
	jne	SHORT $L85170
; Line 341
	dec	DWORD PTR _v36$[ebp]
; Line 342
	cmp	DWORD PTR _v47$[ebp], 1
$LABEL_63$85177:
	jne	SHORT $L85163
; Line 343
	mov	eax, DWORD PTR -52+[ebp]
; Line 344
	add	DWORD PTR -28+[ebp], 256		; 00000100H
	add	edx, 4
	add	ecx, DWORD PTR _level_frame_sizes[eax]
	inc	DWORD PTR _v65$[ebp]
; Line 345
	mov	eax, DWORD PTR _v65$[ebp]
	cmp	eax, DWORD PTR _v60$[ebp]
	jl	$L85157
; Line 346
	jmp	SHORT $LABEL_65$85183
$L85155:
; Line 349
	mov	edx, DWORD PTR _level_frame_sizes[edx]
; Line 352
	cmp	DWORD PTR _v60$[ebp], esi
	mov	DWORD PTR -8+[ebp], edx
	mov	DWORD PTR _v64$[ebp], esi
	jle	SHORT $LABEL_66$85197
	mov	edx, DWORD PTR -20+[ebp]
	mov	DWORD PTR -32+[ebp], 256		; 00000100H
	shl	eax, 2
	mov	DWORD PTR -36+[ebp], eax
$L85186:
; Line 355
	mov	eax, DWORD PTR -36+[ebp]
	mov	esi, DWORD PTR _pDungeonCels
; Line 365
	mov	edi, DWORD PTR _pLightTbl
	mov	ebx, DWORD PTR -32+[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [eax+esi]
	add	eax, esi
	mov	esi, DWORD PTR _pSpeedCels
	add	edi, ebx
	mov	ebx, DWORD PTR -8+[ebp]
	add	esi, ecx
	test	ebx, ebx
	je	SHORT $L85194
; Line 354
	mov	DWORD PTR -24+[ebp], ebx
$L85192:
; Line 359
	movsx	ebx, BYTE PTR [eax]
; Line 361
	movzx	ebx, bl
	inc	eax
	mov	bl, BYTE PTR [ebx+edi]
	mov	BYTE PTR [esi], bl
	inc	esi
	dec	DWORD PTR -24+[ebp]
	jne	SHORT $L85192
$L85194:
; Line 363
	add	ecx, DWORD PTR -8+[ebp]
; Line 364
	inc	DWORD PTR _v64$[ebp]
; Line 365
	mov	eax, DWORD PTR _v64$[ebp]
	add	DWORD PTR -32+[ebp], 256		; 00000100H
	add	edx, 4
	cmp	eax, DWORD PTR _v60$[ebp]
	jl	SHORT $L85186
$LABEL_65$85183:
; Line 367
	mov	edi, DWORD PTR _v58$[ebp]
	xor	esi, esi
	inc	esi
$LABEL_66$85197:
; Line 372
	inc	DWORD PTR _v54$[ebp]
; Line 373
	add	DWORD PTR _v49$[ebp], 64		; 00000040H
; Line 374
	add	DWORD PTR -20+[ebp], 64			; 00000040H
; Line 375
	cmp	DWORD PTR _v54$[ebp], edi
	jl	$L85152
$L85154:
; Line 377
	mov	DWORD PTR _v57$[ebp], OFFSET FLAT:_dPiece
; Line 378
	mov	DWORD PTR _v55$[ebp], OFFSET FLAT:_dpiece_defs_map_2
$L85200:
; Line 381
	mov	eax, DWORD PTR _v55$[ebp]
	mov	DWORD PTR -28+[ebp], 112		; 00000070H
	mov	DWORD PTR _v52$[ebp], eax
; Line 382
	mov	eax, DWORD PTR _v57$[ebp]
	mov	DWORD PTR _v50$[ebp], eax
$L85203:
; Line 384
	mov	eax, DWORD PTR _v50$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L85209
	mov	eax, DWORD PTR _v48$[ebp]
	test	eax, eax
	jle	SHORT $L85209
; Line 385
	mov	esi, DWORD PTR _v52$[ebp]
; Line 386
	mov	DWORD PTR _v59$[ebp], eax
$L85207:
; Line 388
	mov	ax, WORD PTR [esi]
; Line 389
	test	ax, ax
	je	SHORT $L85213
; Line 390
	xor	edx, edx
; Line 391
	test	edi, edi
	jle	SHORT $L85213
$L85214:
; Line 393
	movzx	ecx, dx
	mov	ebx, eax
	and	ebx, 4095				; 00000fffH
	cmp	ebx, DWORD PTR _tile_defs[ecx*4]
	jne	SHORT $L85217
; Line 394
	mov	ax, WORD PTR _level_frame_types[ecx*2]
	add	ax, dx
; Line 395
	mov	edx, edi
; Line 396
	add	eax, -32768				; ffff8000H
$L85217:
; Line 398
	inc	edx
; Line 399
	movzx	ecx, dx
	cmp	ecx, edi
	jl	SHORT $L85214
; Line 400
	mov	WORD PTR [esi], ax
$L85213:
; Line 403
	inc	esi
	inc	esi
; Line 404
	dec	DWORD PTR _v59$[ebp]
; Line 405
	jne	SHORT $L85207
$L85209:
; Line 407
	add	DWORD PTR _v50$[ebp], 448		; 000001c0H
; Line 408
	add	DWORD PTR _v52$[ebp], 3584		; 00000e00H
; Line 410
	dec	DWORD PTR -28+[ebp]
	jne	SHORT $L85203
; Line 411
	add	DWORD PTR _v55$[ebp], 32		; 00000020H
; Line 412
	add	DWORD PTR _v57$[ebp], 4
; Line 413
	cmp	DWORD PTR _v55$[ebp], OFFSET FLAT:_dpiece_defs_map_2+3584
	jl	$L85200
	pop	edi
	pop	esi
	pop	ebx
; Line 414
	leave
	ret	0
_gendung_418D91 ENDP
_TEXT	ENDS
PUBLIC	@gendung_4191FB@8
; Function compile flags: /Ogsy
;	COMDAT @gendung_4191BF@4
_TEXT	SEGMENT
@gendung_4191BF@4 PROC NEAR				; COMDAT
; _frames$ = ecx
; Line 419
	push	esi
	push	edi
	mov	edi, ecx
; Line 425
	xor	eax, eax
	jmp	SHORT $L85847
$L85236:
; Line 426
	test	eax, eax
	jne	SHORT $L85237
; Line 427
	inc	eax
; Line 428
	xor	esi, esi
	test	edi, edi
	jle	SHORT $L85240
$L85238:
; Line 429
	mov	ecx, DWORD PTR _level_frame_count[esi*4]
	cmp	ecx, DWORD PTR _level_frame_count[esi*4+4]
	jge	SHORT $L85239
; Line 430
	lea	edx, DWORD PTR [esi+1]
	mov	ecx, esi
	call	@gendung_4191FB@8
; Line 431
	xor	eax, eax
$L85239:
	inc	esi
	cmp	esi, edi
	jl	SHORT $L85238
$L85240:
; Line 434
	dec	edi
$L85847:
; Line 426
	test	edi, edi
	jg	SHORT $L85236
$L85237:
	pop	edi
	pop	esi
; Line 436
	ret	0
@gendung_4191BF@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @gendung_4191FB@8
_TEXT	SEGMENT
_a1$ = -8
_v5$ = -4
_v8$ = -4
@gendung_4191FB@8 PROC NEAR				; COMDAT
; _a1$ = ecx
; _a2$ = edx
; Line 439
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 451
	mov	eax, ecx
	push	ebx
	push	esi
	push	edi
	shl	eax, 2
; Line 452
	lea	edi, DWORD PTR _level_frame_types[edx*2]
	mov	DWORD PTR _a1$[ebp], ecx
	lea	esi, DWORD PTR _level_frame_count[eax]
; Line 453
	shl	edx, 2
; Line 454
	mov	ecx, DWORD PTR [esi]
; Line 455
	lea	ebx, DWORD PTR _level_frame_count[edx]
	mov	DWORD PTR _v5$[ebp], ecx
	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR [esi], ecx
; Line 457
	mov	esi, DWORD PTR _v5$[ebp]
	lea	ecx, DWORD PTR _tile_defs[eax]
	mov	DWORD PTR [ebx], esi
; Line 459
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR _v8$[ebp], esi
; Line 460
	lea	esi, DWORD PTR _tile_defs[edx]
; Line 467
	lea	edx, DWORD PTR _level_frame_sizes[edx]
	mov	ebx, DWORD PTR [esi]
	mov	DWORD PTR [ecx], ebx
	mov	ecx, DWORD PTR _v8$[ebp]
	mov	bx, WORD PTR [edi]
	mov	DWORD PTR [esi], ecx
	mov	ecx, DWORD PTR _a1$[ebp]
	lea	ecx, DWORD PTR _level_frame_types[ecx*2]
	mov	si, WORD PTR [ecx]
	mov	WORD PTR [ecx], bx
	mov	ecx, DWORD PTR _level_frame_sizes[eax]
	mov	WORD PTR [edi], si
	mov	esi, DWORD PTR [edx]
	pop	edi
	mov	DWORD PTR _level_frame_sizes[eax], esi
	pop	esi
; Line 468
	mov	DWORD PTR [edx], ecx
	pop	ebx
; Line 469
	leave
	ret	0
@gendung_4191FB@8 ENDP
_TEXT	ENDS
PUBLIC	@gendung_get_dpiece_num_from_coord@8
; Function compile flags: /Ogsy
;	COMDAT @gendung_get_dpiece_num_from_coord@8
_TEXT	SEGMENT
@gendung_get_dpiece_num_from_coord@8 PROC NEAR		; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 473
	push	112					; 00000070H
	pop	eax
	sub	eax, edx
	cmp	ecx, eax
	jge	SHORT $L85275
; Line 474
	lea	eax, DWORD PTR [ecx+edx*2+3]
	imul	eax, ecx
	lea	ecx, DWORD PTR [edx+1]
	imul	ecx, edx
	add	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
; Line 479
	ret	0
$L85275:
	push	esi
; Line 476
	push	111					; 0000006fH
	pop	esi
; Line 477
	push	111					; 0000006fH
	sub	esi, ecx
	pop	ecx
	sub	ecx, edx
; Line 478
	lea	eax, DWORD PTR [esi+ecx*2+3]
	lea	edx, DWORD PTR [ecx+1]
	imul	eax, esi
	imul	edx, ecx
	add	eax, edx
	pop	esi
	cdq
	sub	eax, edx
	mov	ecx, eax
	mov	eax, 12543				; 000030ffH
	sar	ecx, 1
	sub	eax, ecx
; Line 479
	ret	0
@gendung_get_dpiece_num_from_coord@8 ENDP
_TEXT	ENDS
PUBLIC	_gendung_4192C2
; Function compile flags: /Ogsy
;	COMDAT _gendung_4192C2
_TEXT	SEGMENT
_v0$ = -4
_v2$ = -12
_x$ = -8
_gendung_4192C2 PROC NEAR				; COMDAT
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 489
	and	DWORD PTR _x$[ebp], 0
	push	ebx
	push	esi
	push	edi
; Line 490
	mov	DWORD PTR _v0$[ebp], OFFSET FLAT:_dpiece_defs_map_2
$L85282:
; Line 492
	xor	ebx, ebx
$L85285:
; Line 494
	mov	eax, DWORD PTR _v0$[ebp]
; Line 495
	mov	ecx, DWORD PTR _x$[ebp]
; Line 496
	add	DWORD PTR _v0$[ebp], 32			; 00000020H
	mov	edx, ebx
	mov	DWORD PTR _v2$[ebp], eax
	inc	ebx
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
; Line 497
	push	8
	lea	edi, DWORD PTR _dpiece_defs_map_1[eax]
	pop	ecx
	mov	esi, edi
	sub	esi, eax
	sub	esi, OFFSET FLAT:_dpiece_defs_map_1
	add	esi, DWORD PTR _v2$[ebp]
; Line 498
	cmp	ebx, 112				; 00000070H
	rep movsd
	jl	SHORT $L85285
; Line 499
	inc	DWORD PTR _x$[ebp]
; Line 500
	cmp	DWORD PTR _v0$[ebp], OFFSET FLAT:_dpiece_defs_map_2+401408
	jl	SHORT $L85282
	pop	edi
	pop	esi
	pop	ebx
; Line 501
	leave
	ret	0
_gendung_4192C2 ENDP
_TEXT	ENDS
PUBLIC	_SetDungeonMicros
EXTRN	_zoomflag:DWORD
; Function compile flags: /Ogsy
;	COMDAT _SetDungeonMicros
_TEXT	SEGMENT
_v0$ = -4
_v2$ = -12
_v8$ = -8
_v9$ = -16
_SetDungeonMicros PROC NEAR				; COMDAT
; Line 504
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 517
	cmp	BYTE PTR _leveltype, 4
	jne	SHORT $L85305
; Line 518
	mov	DWORD PTR _dword_5A5594, 12		; 0000000cH
; Line 519
	mov	DWORD PTR _v0$[ebp], 16			; 00000010H
; Line 520
	jmp	SHORT $L85306
$L85305:
; Line 521
	push	10					; 0000000aH
	pop	eax
	mov	DWORD PTR _dword_5A5594, eax
; Line 522
	mov	DWORD PTR _v0$[ebp], eax
$L85306:
	push	ebx
	push	esi
	push	edi
; Line 524
	mov	DWORD PTR _v9$[ebp], OFFSET FLAT:_dPiece
; Line 525
	mov	DWORD PTR _v8$[ebp], OFFSET FLAT:_dpiece_defs_map_2
$L85307:
; Line 528
	mov	eax, DWORD PTR _v9$[ebp]
	mov	ebx, DWORD PTR _v8$[ebp]
	mov	DWORD PTR _v2$[ebp], eax
	mov	DWORD PTR -20+[ebp], 112		; 00000070H
$L85310:
; Line 531
	mov	eax, DWORD PTR _v2$[ebp]
	xor	ecx, ecx
	mov	eax, DWORD PTR [eax]
	cmp	eax, ecx
	je	SHORT $L85313
; Line 532
	dec	eax
; Line 533
	cmp	BYTE PTR _leveltype, 4
	jne	SHORT $L85314
; Line 534
	shl	eax, 5
	add	eax, DWORD PTR _pLevelPieces
; Line 535
	jmp	SHORT $L85316
$L85314:
; Line 536
	mov	edx, DWORD PTR _pLevelPieces
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [edx+eax*4]
$L85316:
; Line 537
	cmp	DWORD PTR _v0$[ebp], ecx
	jle	SHORT $L85330
$L85318:
; Line 538
	mov	edx, ecx
	mov	esi, ecx
	and	edx, 14					; 0000000eH
	and	esi, 1
	sub	esi, edx
	add	esi, DWORD PTR _v0$[ebp]
	mov	dx, WORD PTR [eax+esi*2-4]
	mov	WORD PTR [ebx+ecx*2], dx
	inc	ecx
	cmp	ecx, DWORD PTR _v0$[ebp]
	jl	SHORT $L85318
; Line 539
	jmp	SHORT $L85330
$L85313:
	cmp	DWORD PTR _v0$[ebp], ecx
	jle	SHORT $L85330
; Line 540
	mov	esi, DWORD PTR _v0$[ebp]
	shr	esi, 1
	shl	esi, 2
	push	esi
	push	ecx
	push	ebx
	call	_memset
; Line 542
	mov	ecx, DWORD PTR _v0$[ebp]
	add	esp, 12					; 0000000cH
	add	esi, ebx
	and	ecx, 1
	je	SHORT $L85330
	xor	eax, eax
	mov	edi, esi
	shr	ecx, 1
	rep stosd
	adc	ecx, ecx
	rep stosw
$L85330:
; Line 547
	add	DWORD PTR _v2$[ebp], 448		; 000001c0H
; Line 548
	add	ebx, 3584				; 00000e00H
; Line 550
	dec	DWORD PTR -20+[ebp]
	jne	$L85310
; Line 551
	add	DWORD PTR _v8$[ebp], 32			; 00000020H
; Line 552
	add	DWORD PTR _v9$[ebp], 4
; Line 553
	cmp	DWORD PTR _v8$[ebp], OFFSET FLAT:_dpiece_defs_map_2+3584
	jl	$L85307
; Line 554
	call	_gendung_418D91
; Line 555
	call	_gendung_4192C2
; Line 556
	cmp	DWORD PTR _zoomflag, 0
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $L85339
; Line 557
	mov	DWORD PTR _scr_pix_width, 640		; 00000280H
; Line 558
	mov	DWORD PTR _scr_pix_height, 352		; 00000160H
; Line 559
	mov	DWORD PTR _dword_5C2FF8, 10		; 0000000aH
; Line 560
	mov	DWORD PTR _dword_5C2FFC, 11		; 0000000bH
; Line 567
	leave
	ret	0
$L85339:
; Line 562
	mov	DWORD PTR _scr_pix_width, 384		; 00000180H
; Line 563
	mov	DWORD PTR _scr_pix_height, 224		; 000000e0H
; Line 564
	mov	DWORD PTR _dword_5C2FF8, 6
; Line 565
	mov	DWORD PTR _dword_5C2FFC, 7
; Line 567
	leave
	ret	0
_SetDungeonMicros ENDP
_TEXT	ENDS
PUBLIC	_DRLG_InitTrans
; Function compile flags: /Ogsy
;	COMDAT _DRLG_InitTrans
_TEXT	SEGMENT
_DRLG_InitTrans PROC NEAR				; COMDAT
; Line 576
	push	12544					; 00003100H
	push	0
	push	OFFSET FLAT:_dung_map
	call	_memset
; Line 577
	push	256					; 00000100H
	push	0
	push	OFFSET FLAT:_TransList
	call	_memset
	add	esp, 24					; 00000018H
; Line 578
	mov	BYTE PTR _TransVal, 1
; Line 579
	ret	0
_DRLG_InitTrans ENDP
_TEXT	ENDS
PUBLIC	@DRLG_MRectTrans@16
; Function compile flags: /Ogsy
;	COMDAT @DRLG_MRectTrans@16
_TEXT	SEGMENT
_x2$ = 8
_y2$ = 12
_ty_enda$ = 8
@DRLG_MRectTrans@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 583
	push	ebp
	mov	ebp, esp
; Line 592
	mov	eax, DWORD PTR _x2$[ebp]
	push	esi
	lea	esi, DWORD PTR [ecx+ecx+17]
; Line 594
	mov	ecx, DWORD PTR _y2$[ebp]
	push	edi
	lea	edi, DWORD PTR [eax+eax+16]
	lea	eax, DWORD PTR [edx+edx+17]
	lea	ecx, DWORD PTR [ecx+ecx+16]
	cmp	eax, ecx
	mov	DWORD PTR _ty_enda$[ebp], ecx
	jg	SHORT $L85359
	push	ebx
$L85357:
; Line 595
	cmp	esi, edi
	jg	SHORT $L85363
; Line 596
	mov	ecx, esi
	imul	ecx, 112				; 00000070H
	lea	edx, DWORD PTR _dung_map[ecx+eax]
; Line 597
	mov	ecx, edi
	sub	ecx, esi
	inc	ecx
$L85361:
; Line 599
	mov	bl, BYTE PTR _TransVal
	mov	BYTE PTR [edx], bl
; Line 600
	add	edx, 112				; 00000070H
; Line 601
	dec	ecx
; Line 602
	jne	SHORT $L85361
$L85363:
; Line 594
	inc	eax
	cmp	eax, DWORD PTR _ty_enda$[ebp]
	jle	SHORT $L85357
	pop	ebx
$L85359:
; Line 605
	inc	BYTE PTR _TransVal
	pop	edi
	pop	esi
; Line 606
	pop	ebp
	ret	8
@DRLG_MRectTrans@16 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_RectTrans@16
; Function compile flags: /Ogsy
;	COMDAT @DRLG_RectTrans@16
_TEXT	SEGMENT
_x2$ = 8
_y2$ = 12
@DRLG_RectTrans@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 615
	cmp	edx, DWORD PTR _y2$[esp-4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	jg	SHORT $L85378
$L85376:
; Line 616
	cmp	edi, DWORD PTR _x2$[esp+4]
	jg	SHORT $L85382
; Line 617
	mov	eax, edi
	imul	eax, 112				; 00000070H
	lea	edx, DWORD PTR _dung_map[eax+esi]
; Line 618
	mov	eax, DWORD PTR _x2$[esp+4]
	sub	eax, edi
	inc	eax
$L85380:
; Line 620
	mov	cl, BYTE PTR _TransVal
	mov	BYTE PTR [edx], cl
; Line 621
	add	edx, 112				; 00000070H
; Line 622
	dec	eax
; Line 623
	jne	SHORT $L85380
$L85382:
; Line 615
	inc	esi
	cmp	esi, DWORD PTR _y2$[esp+4]
	jle	SHORT $L85376
$L85378:
; Line 626
	inc	BYTE PTR _TransVal
	pop	edi
	pop	esi
; Line 627
	ret	8
@DRLG_RectTrans@16 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_CopyTrans@16
; Function compile flags: /Ogsy
;	COMDAT @DRLG_CopyTrans@16
_TEXT	SEGMENT
_dx$ = 8
_dy$ = 12
@DRLG_CopyTrans@16 PROC NEAR				; COMDAT
; _sx$ = ecx
; _sy$ = edx
; Line 632
	mov	eax, DWORD PTR _dx$[esp-4]
	imul	ecx, 112				; 00000070H
	imul	eax, 112				; 00000070H
	mov	cl, BYTE PTR _dung_map[ecx+edx]
	mov	edx, DWORD PTR _dy$[esp-4]
	mov	BYTE PTR _dung_map[eax+edx], cl
; Line 633
	ret	8
@DRLG_CopyTrans@16 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_ListTrans@8
; Function compile flags: /Ogsy
;	COMDAT @DRLG_ListTrans@8
_TEXT	SEGMENT
@DRLG_ListTrans@8 PROC NEAR				; COMDAT
; _num$ = ecx
; _List$ = edx
; Line 636
	push	esi
; Line 645
	mov	esi, edx
; Line 646
	test	ecx, ecx
	jle	SHORT $L85407
	push	ebx
	push	edi
; Line 647
	mov	edi, ecx
$L85405:
; Line 650
	lea	eax, DWORD PTR [esi+1]
	mov	cl, BYTE PTR [esi]
; Line 655
	movzx	ecx, cl
	mov	dl, BYTE PTR [eax]
	inc	eax
	movzx	edx, dl
	mov	bl, BYTE PTR [eax]
	inc	eax
	lea	esi, DWORD PTR [eax+1]
	movzx	eax, BYTE PTR [eax]
	push	eax
	movzx	eax, bl
	push	eax
	call	@DRLG_RectTrans@16
; Line 656
	dec	edi
; Line 657
	jne	SHORT $L85405
	pop	edi
	pop	ebx
$L85407:
	pop	esi
; Line 659
	ret	0
@DRLG_ListTrans@8 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_AreaTrans@8
; Function compile flags: /Ogsy
;	COMDAT @DRLG_AreaTrans@8
_TEXT	SEGMENT
@DRLG_AreaTrans@8 PROC NEAR				; COMDAT
; _num$ = ecx
; _List$ = edx
; Line 662
	push	esi
; Line 671
	mov	esi, edx
; Line 672
	test	ecx, ecx
	jle	SHORT $L85423
	push	ebx
	push	edi
; Line 673
	mov	edi, ecx
$L85421:
; Line 676
	lea	eax, DWORD PTR [esi+1]
	mov	cl, BYTE PTR [esi]
; Line 681
	movzx	ecx, cl
	mov	dl, BYTE PTR [eax]
	inc	eax
	movzx	edx, dl
	mov	bl, BYTE PTR [eax]
	inc	eax
	lea	esi, DWORD PTR [eax+1]
	movzx	eax, BYTE PTR [eax]
	push	eax
	movzx	eax, bl
	push	eax
	call	@DRLG_RectTrans@16
; Line 682
	dec	BYTE PTR _TransVal
; Line 683
	dec	edi
; Line 684
	jne	SHORT $L85421
	pop	edi
	pop	ebx
$L85423:
; Line 686
	inc	BYTE PTR _TransVal
	pop	esi
; Line 687
	ret	0
@DRLG_AreaTrans@8 ENDP
_TEXT	ENDS
PUBLIC	_DRLG_InitSetPC
; Function compile flags: /Ogsy
;	COMDAT _DRLG_InitSetPC
_TEXT	SEGMENT
_DRLG_InitSetPC PROC NEAR				; COMDAT
; Line 692
	xor	eax, eax
	mov	DWORD PTR _setpc_x, eax
; Line 693
	mov	DWORD PTR _setpc_y, eax
; Line 694
	mov	DWORD PTR _setpc_w, eax
; Line 695
	mov	DWORD PTR _setpc_h, eax
; Line 696
	ret	0
_DRLG_InitSetPC ENDP
_TEXT	ENDS
PUBLIC	_DRLG_SetPC
; Function compile flags: /Ogsy
;	COMDAT _DRLG_SetPC
_TEXT	SEGMENT
_DRLG_SetPC PROC NEAR					; COMDAT
; Line 711
	mov	eax, DWORD PTR _setpc_w
	push	esi
; Line 713
	mov	esi, DWORD PTR _setpc_x
	push	edi
; Line 714
	mov	edi, DWORD PTR _setpc_y
	lea	ecx, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR _setpc_h
	xor	edx, edx
	add	eax, eax
	lea	esi, DWORD PTR [esi+esi+16]
	test	eax, eax
	lea	edi, DWORD PTR [edi+edi+16]
	jle	SHORT $L85435
	push	ebx
	push	ebp
$L85433:
; Line 715
	test	ecx, ecx
	jle	SHORT $L85439
; Line 717
	mov	ebx, esi
	mov	ebp, ecx
	imul	ebx, 112				; 00000070H
	add	ebx, edi
	lea	ebx, DWORD PTR _dFlags[ebx+edx]
$L85437:
; Line 719
	or	BYTE PTR [ebx], 8
; Line 720
	add	ebx, 112				; 00000070H
; Line 721
	dec	ebp
; Line 722
	jne	SHORT $L85437
$L85439:
; Line 714
	inc	edx
	cmp	edx, eax
	jl	SHORT $L85433
	pop	ebp
	pop	ebx
$L85435:
	pop	edi
	pop	esi
; Line 725
	ret	0
_DRLG_SetPC ENDP
_TEXT	ENDS
PUBLIC	@Make_SetPC@16
; Function compile flags: /Ogsy
;	COMDAT @Make_SetPC@16
_TEXT	SEGMENT
_w$ = 8
_h$ = 12
_v8$ = 8
_wa$ = -4
@Make_SetPC@16 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 730
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 741
	mov	eax, DWORD PTR _w$[ebp]
	and	DWORD PTR _wa$[ebp], 0
	push	esi
; Line 742
	lea	esi, DWORD PTR [ecx+ecx+16]
; Line 743
	mov	ecx, DWORD PTR _h$[ebp]
	push	edi
	lea	edi, DWORD PTR [edx+edx+16]
	add	eax, eax
	lea	edx, DWORD PTR [ecx+ecx]
	test	edx, edx
	jle	SHORT $L85458
	push	ebx
$L85456:
; Line 744
	test	eax, eax
	jle	SHORT $L85462
; Line 746
	mov	ecx, esi
	mov	ebx, DWORD PTR _wa$[ebp]
	imul	ecx, 112				; 00000070H
	add	ecx, edi
	mov	DWORD PTR _v8$[ebp], eax
	lea	ecx, DWORD PTR _dFlags[ecx+ebx]
$L85460:
; Line 748
	or	BYTE PTR [ecx], 8
; Line 749
	add	ecx, 112				; 00000070H
; Line 750
	dec	DWORD PTR _v8$[ebp]
; Line 751
	jne	SHORT $L85460
$L85462:
; Line 743
	inc	DWORD PTR _wa$[ebp]
	cmp	DWORD PTR _wa$[ebp], edx
	jl	SHORT $L85456
	pop	ebx
$L85458:
	pop	edi
	pop	esi
; Line 754
	leave
	ret	8
@Make_SetPC@16 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_WillThemeRoomFit@28
PUBLIC	@SkipThemeRoom@8
; Function compile flags: /Ogsy
;	COMDAT @DRLG_WillThemeRoomFit@28
_TEXT	SEGMENT
_floor$ = -28
_y$ = 8
_minSize$ = 12
_maxSize$ = 16
_width$ = 20
_height$ = 24
_v8$ = -8
_yArray$ = -188
_xArray$ = -108
_v27$ = -24
_v28$ = -20
_v29$ = -12
_v30$ = -4
_v31$ = -16
@DRLG_WillThemeRoomFit@28 PROC NEAR			; COMDAT
; _floor$ = ecx
; _x$ = edx
; Line 757
	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	ebx
; Line 782
	xor	eax, eax
	push	esi
	push	edi
	inc	eax
; Line 789
	push	40					; 00000028H
	mov	DWORD PTR _v28$[ebp], eax
	mov	DWORD PTR _v27$[ebp], eax
	pop	eax
	mov	esi, edx
	sub	eax, DWORD PTR _maxSize$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR _floor$[ebp], ecx
	mov	DWORD PTR _v8$[ebp], ebx
	cmp	esi, eax
	mov	DWORD PTR _v31$[ebp], ebx
	mov	DWORD PTR _v30$[ebp], ebx
	jle	SHORT $L85501
	cmp	DWORD PTR _y$[ebp], eax
; Line 790
	jg	$L85529
$L85501:
; Line 791
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, esi
	call	@SkipThemeRoom@8
	test	al, al
; Line 792
	je	$L85529
; Line 793
	push	80					; 00000050H
	lea	eax, DWORD PTR _xArray$[ebp]
	push	0
	push	eax
	call	_memset
; Line 794
	push	80					; 00000050H
	lea	eax, DWORD PTR _yArray$[ebp]
	push	0
	push	eax
	call	_memset
	add	esp, 24					; 00000018H
; Line 795
	cmp	DWORD PTR _maxSize$[ebp], 0
	jle	$L85503
; Line 796
	lea	edx, DWORD PTR [esi+esi*4]
	shl	edx, 3
; Line 798
	lea	eax, DWORD PTR _dungeon[edx]
	mov	DWORD PTR -12+[ebp], eax
	mov	DWORD PTR _v29$[ebp], eax
$L85504:
; Line 800
	cmp	DWORD PTR _v27$[ebp], 0
	je	SHORT $L85516
; Line 802
	mov	ecx, DWORD PTR _maxSize$[ebp]
	mov	eax, esi
	lea	edi, DWORD PTR [esi+ecx]
	cmp	esi, edi
	jge	SHORT $L85508
; Line 803
	mov	ecx, edx
	add	ecx, ebx
	mov	ebx, DWORD PTR _y$[ebp]
	lea	ecx, DWORD PTR _dungeon[ecx+ebx]
$L85510:
; Line 805
	movzx	ebx, BYTE PTR [ecx]
	cmp	ebx, DWORD PTR _floor$[ebp]
	jne	SHORT $L85513
; Line 806
	inc	DWORD PTR _v31$[ebp]
; Line 807
	jmp	SHORT $L85946
$L85513:
; Line 808
	cmp	eax, DWORD PTR _minSize$[ebp]
	jge	SHORT $L85940
; Line 810
	and	DWORD PTR _v27$[ebp], 0
$L85946:
	mov	ebx, DWORD PTR _v8$[ebp]
; Line 812
	inc	eax
; Line 813
	add	ecx, 40					; 00000028H
; Line 814
	cmp	eax, edi
	jl	SHORT $L85510
	jmp	SHORT $L85508
$L85940:
	mov	ebx, DWORD PTR _v8$[ebp]
$L85508:
; Line 817
	cmp	DWORD PTR _v27$[ebp], 0
	je	SHORT $L85516
; Line 818
	mov	ecx, DWORD PTR _v31$[ebp]
; Line 819
	and	DWORD PTR _v31$[ebp], 0
; Line 820
	mov	DWORD PTR _xArray$[ebp+ebx*4], ecx
$L85516:
; Line 823
	cmp	DWORD PTR _v28$[ebp], 0
	je	SHORT $L85525
; Line 824
	mov	ecx, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _maxSize$[ebp]
	lea	edi, DWORD PTR [ecx+eax]
	cmp	ecx, edi
	jge	SHORT $L85931
$L85518:
; Line 825
	mov	eax, DWORD PTR _v29$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	cmp	eax, DWORD PTR _floor$[ebp]
	jne	SHORT $L85522
; Line 826
	inc	DWORD PTR _v30$[ebp]
; Line 827
	jmp	SHORT $L85519
$L85522:
; Line 828
	cmp	ecx, DWORD PTR _minSize$[ebp]
	jge	SHORT $L85931
; Line 830
	and	DWORD PTR _v28$[ebp], 0
$L85519:
; Line 824
	inc	ecx
	cmp	ecx, edi
	jl	SHORT $L85518
$L85931:
; Line 833
	cmp	DWORD PTR _v28$[ebp], 0
	je	SHORT $L85525
; Line 834
	mov	ecx, DWORD PTR _v30$[ebp]
; Line 835
	and	DWORD PTR _v30$[ebp], 0
; Line 836
	mov	DWORD PTR _yArray$[ebp+ebx*4], ecx
$L85525:
; Line 839
	add	DWORD PTR _v29$[ebp], 40		; 00000028H
; Line 840
	inc	ebx
; Line 841
	cmp	ebx, DWORD PTR _maxSize$[ebp]
	mov	DWORD PTR _v8$[ebp], ebx
	jl	$L85504
; Line 842
	xor	ebx, ebx
$L85503:
; Line 846
	mov	edi, DWORD PTR _minSize$[ebp]
	mov	esi, DWORD PTR _xArray$[ebp]
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LABEL_32$85531
; Line 847
	cmp	esi, edi
	jl	SHORT $L85529
$L85528:
	cmp	DWORD PTR _yArray$[ebp+eax*4], edi
	jl	SHORT $L85529
; Line 848
	inc	eax
	cmp	eax, edi
	jge	SHORT $LABEL_32$85531
; Line 847
	cmp	DWORD PTR _xArray$[ebp+eax*4], edi
	jge	SHORT $L85528
$L85529:
; Line 851
	xor	al, al
	jmp	SHORT $L85477
$LABEL_32$85531:
; Line 856
	cmp	DWORD PTR _maxSize$[ebp], 0
	mov	ecx, DWORD PTR _yArray$[ebp]
	jle	SHORT $L85933
$L85534:
; Line 858
	mov	eax, DWORD PTR _xArray$[ebp+ebx*4]
; Line 859
	cmp	eax, edi
	jl	SHORT $L85933
; Line 861
	mov	edx, DWORD PTR _yArray$[ebp+ebx*4]
; Line 862
	cmp	edx, edi
	jl	SHORT $L85933
; Line 864
	cmp	eax, esi
	jge	SHORT $L85538
; Line 865
	mov	esi, eax
$L85538:
; Line 866
	cmp	edx, ecx
	jge	SHORT $L85539
; Line 867
	mov	ecx, edx
$L85539:
; Line 868
	inc	ebx
	cmp	ebx, DWORD PTR _maxSize$[ebp]
	jl	SHORT $L85534
$L85933:
; Line 873
	mov	eax, DWORD PTR _width$[ebp]
	add	esi, -2					; fffffffeH
; Line 874
	add	ecx, -2					; fffffffeH
	mov	DWORD PTR [eax], esi
	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 875
	mov	al, 1
$L85477:
	pop	edi
	pop	esi
	pop	ebx
; Line 876
	leave
	ret	20					; 00000014H
@DRLG_WillThemeRoomFit@28 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_CreateThemeRoom@4
EXTRN	@random@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DRLG_CreateThemeRoom@4
_TEXT	SEGMENT
_v20$ = -4
_v21$ = -8
@DRLG_CreateThemeRoom@4 PROC NEAR			; COMDAT
; _themeIndex$ = ecx
; Line 881
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 905
	lea	esi, DWORD PTR [ecx+ecx*4]
	push	edi
	shl	esi, 2
	mov	eax, DWORD PTR _themeLoc[esi+4]
; Line 906
	mov	edi, DWORD PTR _themeLoc[esi+16]
; Line 907
	mov	ebx, eax
; Line 909
	lea	ecx, DWORD PTR [edi+eax]
	cmp	eax, ecx
	jge	$LABEL_53$85572
; Line 910
	mov	ecx, DWORD PTR _themeLoc[esi]
	mov	edx, DWORD PTR _themeLoc[esi+12]
	add	edx, ecx
	mov	DWORD PTR _v20$[ebp], edx
$L85567:
; Line 912
	mov	ecx, DWORD PTR _themeLoc[esi]
; Line 913
	cmp	ecx, edx
	jge	$LABEL_52$85570
; Line 921
	lea	edx, DWORD PTR [ecx+ecx*4]
	lea	edx, DWORD PTR _dungeon[ebx+edx*8]
	mov	DWORD PTR _v21$[ebp], edx
$L85574:
; Line 923
	cmp	BYTE PTR _leveltype, 2
	jne	SHORT $LABEL_21$85577
; Line 925
	cmp	ebx, eax
	jne	SHORT $L85578
	cmp	ecx, DWORD PTR _themeLoc[esi]
	jl	SHORT $L85578
	cmp	ecx, DWORD PTR _v20$[ebp]
	jle	$LABEL_12$85579
$L85578:
; Line 927
	lea	edx, DWORD PTR [edi+eax-1]
	cmp	ebx, edx
	jne	SHORT $LABEL_13$85581
; Line 929
	cmp	ecx, DWORD PTR _themeLoc[esi]
	jl	SHORT $LABEL_16$85583
; Line 988
	cmp	ecx, DWORD PTR _v20$[ebp]
	jle	$LABEL_12$85579
$LABEL_13$85581:
; Line 991
	cmp	ecx, DWORD PTR _themeLoc[esi]
	jne	SHORT $LABEL_16$85583
	cmp	ebx, eax
	jl	SHORT $LABEL_16$85583
	lea	edx, DWORD PTR [edi+eax]
	cmp	ebx, edx
	jle	$LABEL_19$85585
$LABEL_16$85583:
; Line 932
	mov	edx, DWORD PTR _v20$[ebp]
	dec	edx
	cmp	ecx, edx
	jne	SHORT $L85584
	cmp	ebx, eax
	jl	SHORT $L85584
	lea	edx, DWORD PTR [edi+eax]
	cmp	ebx, edx
	jle	$LABEL_19$85585
$L85584:
; Line 934
	mov	edx, DWORD PTR _v21$[ebp]
	mov	BYTE PTR [edx], 3
$LABEL_21$85577:
; Line 936
	cmp	BYTE PTR _leveltype, 3
	jne	SHORT $L85586
; Line 937
	cmp	ebx, eax
	jne	SHORT $L85587
	cmp	ecx, DWORD PTR _themeLoc[esi]
	jl	SHORT $L85587
	cmp	ecx, DWORD PTR _v20$[ebp]
	jle	SHORT $LABEL_28$85588
$L85587:
; Line 942
	lea	edx, DWORD PTR [edi+eax-1]
	cmp	ebx, edx
	jne	SHORT $LABEL_29$85593
; Line 943
	cmp	ecx, DWORD PTR _themeLoc[esi]
	jl	SHORT $L85595
; Line 944
	cmp	ecx, DWORD PTR _v20$[ebp]
	jg	SHORT $LABEL_29$85593
$LABEL_28$85588:
; Line 939
	mov	edx, DWORD PTR _v21$[ebp]
	mov	BYTE PTR [edx], -122			; ffffff86H
; Line 940
	jmp	$LABEL_51$85589
$LABEL_29$85593:
; Line 950
	cmp	ecx, DWORD PTR _themeLoc[esi]
	jne	SHORT $L85595
	cmp	ebx, eax
	jl	SHORT $L85595
	lea	edx, DWORD PTR [edi+eax]
	cmp	ebx, edx
	jle	SHORT $LABEL_35$85596
$L85595:
; Line 956
	mov	edx, DWORD PTR _v20$[ebp]
	dec	edx
	cmp	ecx, edx
	jne	SHORT $L85597
	cmp	ebx, eax
	jl	SHORT $L85597
	lea	edx, DWORD PTR [edi+eax]
	cmp	ebx, edx
	jg	SHORT $L85597
$LABEL_35$85596:
; Line 952
	mov	edx, DWORD PTR _v21$[ebp]
	mov	BYTE PTR [edx], -119			; ffffff89H
; Line 953
	jmp	SHORT $LABEL_51$85589
$L85597:
; Line 958
	mov	edx, DWORD PTR _v21$[ebp]
	mov	BYTE PTR [edx], 7
$L85586:
; Line 960
	cmp	BYTE PTR _leveltype, 4
	jne	SHORT $LABEL_51$85589
; Line 962
	cmp	ebx, eax
	jne	SHORT $L85600
	cmp	ecx, DWORD PTR _themeLoc[esi]
	jl	SHORT $L85600
	cmp	ecx, DWORD PTR _v20$[ebp]
	jle	SHORT $LABEL_12$85579
$L85600:
; Line 963
	lea	edx, DWORD PTR [edi+eax-1]
	cmp	ebx, edx
	jne	SHORT $LABEL_44$85602
; Line 965
	cmp	ecx, DWORD PTR _themeLoc[esi]
	jl	SHORT $LABEL_47$85604
; Line 967
	cmp	ecx, DWORD PTR _v20$[ebp]
	jle	SHORT $LABEL_12$85579
$LABEL_44$85602:
; Line 969
	cmp	ecx, DWORD PTR _themeLoc[esi]
	jne	SHORT $LABEL_47$85604
	cmp	ebx, eax
	jl	SHORT $LABEL_47$85604
	lea	edx, DWORD PTR [edi+eax]
	cmp	ebx, edx
	jle	SHORT $LABEL_19$85585
$LABEL_47$85604:
; Line 971
	mov	edx, DWORD PTR _v20$[ebp]
	dec	edx
	cmp	ecx, edx
	jne	SHORT $L85609
	cmp	ebx, eax
	jl	SHORT $L85609
	lea	edx, DWORD PTR [edi+eax]
	cmp	ebx, edx
	jg	SHORT $L85609
$LABEL_19$85585:
; Line 977
	mov	edx, DWORD PTR _v21$[ebp]
	mov	BYTE PTR [edx], 1
; Line 978
	jmp	SHORT $LABEL_51$85589
$L85609:
; Line 972
	mov	edx, DWORD PTR _v21$[ebp]
	mov	BYTE PTR [edx], 6
; Line 973
	jmp	SHORT $LABEL_51$85589
$LABEL_12$85579:
; Line 982
	mov	edx, DWORD PTR _v21$[ebp]
	mov	BYTE PTR [edx], 2
$LABEL_51$85589:
; Line 984
	add	DWORD PTR _v21$[ebp], 40		; 00000028H
; Line 985
	mov	edx, DWORD PTR _v20$[ebp]
	inc	ecx
	cmp	ecx, edx
	jl	$L85574
$LABEL_52$85570:
; Line 916
	inc	ebx
; Line 918
	lea	ecx, DWORD PTR [edi+eax]
	cmp	ebx, ecx
	jl	$L85567
$LABEL_53$85572:
; Line 996
	mov	bl, BYTE PTR _leveltype
	cmp	bl, 2
	jne	SHORT $L85613
; Line 997
	mov	edx, DWORD PTR _themeLoc[esi]
; Line 998
	mov	ecx, DWORD PTR _themeLoc[esi+12]
	add	ecx, edx
; Line 999
	lea	edx, DWORD PTR [edx+edx*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	edx, 3
	add	ecx, ecx
	mov	BYTE PTR _dungeon[edx+eax], 8
; Line 1002
	add	edx, edi
	mov	BYTE PTR _dungeon[eax+ecx*4-40], 7
; Line 1003
	lea	ecx, DWORD PTR [edi+ecx*4]
	mov	BYTE PTR _dungeon[edx+eax-1], 9
	mov	BYTE PTR _dungeon[ecx+eax-41], 6
$L85613:
; Line 1005
	cmp	bl, 3
	jne	SHORT $L85614
; Line 1006
	mov	edx, DWORD PTR _themeLoc[esi]
; Line 1007
	mov	ecx, DWORD PTR _themeLoc[esi+12]
	add	ecx, edx
; Line 1008
	lea	edx, DWORD PTR [edx+edx*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	edx, 3
	add	ecx, ecx
	mov	BYTE PTR _dungeon[edx+eax], -106	; ffffff96H
; Line 1011
	add	edx, edi
	mov	BYTE PTR _dungeon[eax+ecx*4-40], -105	; ffffff97H
; Line 1012
	lea	ecx, DWORD PTR [edi+ecx*4]
	mov	BYTE PTR _dungeon[edx+eax-1], -104	; ffffff98H
	mov	BYTE PTR _dungeon[ecx+eax-41], -118	; ffffff8aH
$L85614:
; Line 1014
	cmp	bl, 4
	jne	SHORT $L85615
; Line 1015
	mov	edx, DWORD PTR _themeLoc[esi]
; Line 1016
	mov	ecx, DWORD PTR _themeLoc[esi+12]
	add	ecx, edx
; Line 1017
	lea	edx, DWORD PTR [edx+edx*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	edx, 3
	add	ecx, ecx
	mov	BYTE PTR _dungeon[edx+eax], 9
; Line 1020
	add	edx, edi
	mov	BYTE PTR _dungeon[eax+ecx*4-40], 16	; 00000010H
; Line 1021
	lea	ecx, DWORD PTR [edi+ecx*4]
	mov	BYTE PTR _dungeon[edx+eax-1], 15	; 0000000fH
	mov	BYTE PTR _dungeon[ecx+eax-41], 12	; 0000000cH
$L85615:
; Line 1023
	cmp	bl, 2
	jne	SHORT $L85619
; Line 1024
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 1025
	test	eax, eax
	je	SHORT $L85617
; Line 1026
	cmp	eax, 1
	jne	SHORT $L85619
; Line 1028
	mov	eax, DWORD PTR _themeLoc[esi+12]
	mov	ecx, DWORD PTR _themeLoc[esi+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _themeLoc[esi]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _themeLoc[esi+16]
	mov	BYTE PTR _dungeon[eax+ecx-1], 5
; Line 1033
	jmp	SHORT $L85619
$L85617:
; Line 1035
	mov	eax, DWORD PTR _themeLoc[esi+12]
	add	eax, DWORD PTR _themeLoc[esi]
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _themeLoc[esi+16]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	ecx, DWORD PTR _themeLoc[esi+4]
	mov	BYTE PTR _dungeon[eax+ecx-40], 4
$L85619:
; Line 1039
	cmp	BYTE PTR _leveltype, 3
	jne	SHORT $L85623
; Line 1040
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 1041
	test	eax, eax
	je	SHORT $L85621
; Line 1042
	cmp	eax, 1
	jne	SHORT $L85623
; Line 1044
	mov	eax, DWORD PTR _themeLoc[esi+12]
	mov	ecx, DWORD PTR _themeLoc[esi+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _themeLoc[esi]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _themeLoc[esi+16]
	mov	BYTE PTR _dungeon[eax+ecx-1], -110	; ffffff92H
; Line 1049
	jmp	SHORT $L85623
$L85621:
; Line 1051
	mov	eax, DWORD PTR _themeLoc[esi+12]
	add	eax, DWORD PTR _themeLoc[esi]
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _themeLoc[esi+16]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	ecx, DWORD PTR _themeLoc[esi+4]
	mov	BYTE PTR _dungeon[eax+ecx-40], -109	; ffffff93H
$L85623:
; Line 1055
	cmp	BYTE PTR _leveltype, 4
	jne	$L85628
; Line 1056
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 1057
	test	eax, eax
	je	SHORT $L85625
; Line 1058
	cmp	eax, 1
	jne	SHORT $L85628
; Line 1059
	mov	eax, DWORD PTR _themeLoc[esi+12]
	mov	ecx, DWORD PTR _themeLoc[esi+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _themeLoc[esi]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*8]
	add	eax, DWORD PTR _themeLoc[esi+16]
; Line 1060
	lea	ecx, DWORD PTR _dungeon[eax]
; Line 1061
	mov	BYTE PTR [ecx-41], 57			; 00000039H
; Line 1062
	mov	BYTE PTR [ecx-1], 6
; Line 1063
	mov	BYTE PTR _dungeon[eax+39], 56		; 00000038H
; Line 1064
	mov	BYTE PTR [ecx-2], 59			; 0000003bH
; Line 1065
	mov	BYTE PTR [ecx-42], 58			; 0000003aH
; Line 1067
	jmp	SHORT $L85628
$L85625:
; Line 1068
	mov	eax, DWORD PTR _themeLoc[esi+12]
	add	eax, DWORD PTR _themeLoc[esi]
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _themeLoc[esi+16]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	eax, DWORD PTR [eax+ecx*8]
	add	eax, DWORD PTR _themeLoc[esi+4]
; Line 1069
	lea	eax, DWORD PTR _dungeon[eax]
; Line 1070
	mov	BYTE PTR [eax-41], 53			; 00000035H
; Line 1071
	mov	BYTE PTR [eax-40], 6
; Line 1072
	mov	BYTE PTR [eax-39], 52			; 00000034H
; Line 1073
	mov	BYTE PTR [eax-81], 54			; 00000036H
$L85628:
	pop	edi
	pop	esi
	pop	ebx
; Line 1076
	leave
	ret	0
@DRLG_CreateThemeRoom@4 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_PlaceThemeRooms@20
; Function compile flags: /Ogsy
;	COMDAT @DRLG_PlaceThemeRooms@20
_TEXT	SEGMENT
_minSize$ = -16
_maxSize$ = -32
_floor$ = 8
_freq$ = 12
_rndSize$ = 16
_v5$ = -28
_v17$ = -36
_v24$ = -24
_x_start$ = -12
_x$ = -4
_width$ = -8
_height$ = -20
@DRLG_PlaceThemeRooms@20 PROC NEAR			; COMDAT
; _minSize$ = ecx
; _maxSize$ = edx
; Line 1079
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
; Line 1101
	xor	edi, edi
; Line 1105
	push	20					; 00000014H
	push	edi
	push	OFFSET FLAT:_themeLoc
	mov	DWORD PTR _maxSize$[ebp], edx
	mov	DWORD PTR _minSize$[ebp], ecx
	mov	DWORD PTR _v5$[ebp], edi
	mov	DWORD PTR _themeCount, edi
	call	_memset
	add	esp, 12					; 0000000cH
$L85660:
; Line 1107
	and	DWORD PTR _x$[ebp], 0
; Line 1109
	lea	eax, DWORD PTR _dungeon[edi]
	mov	DWORD PTR _x_start$[ebp], 20		; 00000014H
	mov	DWORD PTR _v24$[ebp], eax
$L85664:
; Line 1111
	mov	eax, DWORD PTR _v24$[ebp]
	movzx	eax, BYTE PTR [eax]
	cmp	eax, DWORD PTR _floor$[ebp]
	jne	$L85669
; Line 1112
	mov	edx, DWORD PTR _freq$[ebp]
	xor	cl, cl
	call	@random@8
	test	eax, eax
	jne	$L85669
; Line 1114
	mov	ebx, DWORD PTR _maxSize$[ebp]
	lea	eax, DWORD PTR _height$[ebp]
	push	eax
	lea	eax, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _floor$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _minSize$[ebp]
	push	edi
	call	@DRLG_WillThemeRoomFit@28
	test	al, al
	je	$L85669
; Line 1115
	cmp	DWORD PTR _rndSize$[ebp], 0
	je	SHORT $L85670
; Line 1116
	mov	eax, DWORD PTR _minSize$[ebp]
; Line 1118
	mov	edx, DWORD PTR _width$[ebp]
	sub	edx, eax
	xor	cl, cl
	add	edx, 3
	lea	esi, DWORD PTR [eax-2]
	add	ebx, -2					; fffffffeH
	call	@random@8
; Line 1119
	mov	edx, eax
	xor	cl, cl
	call	@random@8
	add	eax, esi
; Line 1120
	cmp	eax, esi
	jl	SHORT $L85672
	cmp	eax, ebx
	mov	DWORD PTR _width$[ebp], eax
	jle	SHORT $L85671
$L85672:
; Line 1121
	mov	DWORD PTR _width$[ebp], esi
$L85671:
; Line 1122
	mov	edx, DWORD PTR _height$[ebp]
	xor	cl, cl
	sub	edx, esi
	inc	edx
	call	@random@8
; Line 1123
	mov	edx, eax
	xor	cl, cl
	call	@random@8
	add	eax, esi
; Line 1124
	cmp	eax, esi
	jl	SHORT $L85674
	cmp	eax, ebx
	jle	SHORT $L85673
$L85674:
; Line 1125
	mov	eax, esi
$L85673:
; Line 1126
	mov	DWORD PTR _height$[ebp], eax
; Line 1127
	jmp	SHORT $L85675
$L85670:
; Line 1128
	mov	eax, DWORD PTR _height$[ebp]
$L85675:
; Line 1130
	mov	ecx, DWORD PTR _themeCount
; Line 1135
	mov	ebx, DWORD PTR _width$[ebp]
	lea	edx, DWORD PTR [edi+1]
; Line 1137
	mov	edi, DWORD PTR _x$[ebp]
	lea	esi, DWORD PTR [ecx+ecx*4]
	mov	DWORD PTR _v17$[ebp], ecx
	mov	ecx, DWORD PTR _x$[ebp]
	shl	esi, 2
	inc	ecx
	mov	DWORD PTR _themeLoc[esi+12], ebx
	add	ebx, edi
; Line 1138
	mov	edi, DWORD PTR _v5$[ebp]
	mov	DWORD PTR _themeLoc[esi+16], eax
	add	eax, edi
; Line 1139
	cmp	BYTE PTR _leveltype, 3
	mov	DWORD PTR _themeLoc[esi], ecx
	mov	DWORD PTR _themeLoc[esi+4], edx
	jne	SHORT $L85676
; Line 1140
	mov	ecx, DWORD PTR _x_start$[ebp]
	lea	eax, DWORD PTR [eax+eax+15]
	push	eax
	lea	eax, DWORD PTR [ebx+ebx+15]
	push	eax
	lea	edx, DWORD PTR [edi+edi+20]
	call	@DRLG_RectTrans@16
; Line 1141
	jmp	SHORT $L85677
$L85676:
; Line 1142
	push	eax
	push	ebx
	call	@DRLG_MRectTrans@16
$L85677:
; Line 1143
	movsx	eax, BYTE PTR _TransVal
; Line 1144
	mov	ecx, DWORD PTR _v17$[ebp]
	dec	eax
	mov	DWORD PTR _themeLoc[esi+8], eax
	call	@DRLG_CreateThemeRoom@4
; Line 1145
	inc	DWORD PTR _themeCount
$L85669:
; Line 1149
	add	DWORD PTR _x_start$[ebp], 2
; Line 1150
	inc	DWORD PTR _x$[ebp]
; Line 1151
	add	DWORD PTR _v24$[ebp], 40		; 00000028H
; Line 1152
	cmp	DWORD PTR _x_start$[ebp], 100		; 00000064H
	jl	$L85664
; Line 1153
	inc	edi
; Line 1154
	cmp	edi, 40					; 00000028H
	mov	DWORD PTR _v5$[ebp], edi
	jl	$L85660
	pop	edi
	pop	esi
	pop	ebx
; Line 1155
	leave
	ret	12					; 0000000cH
@DRLG_PlaceThemeRooms@20 ENDP
_TEXT	ENDS
PUBLIC	_DRLG_HoldThemeRooms
; Function compile flags: /Ogsy
;	COMDAT _DRLG_HoldThemeRooms
_TEXT	SEGMENT
_v7$ = -12
_v8$ = -8
_v9$ = -4
_DRLG_HoldThemeRooms PROC NEAR				; COMDAT
; Line 1159
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1171
	mov	eax, DWORD PTR _themeCount
	test	eax, eax
	jle	SHORT $L85692
	push	ebx
	push	esi
	push	edi
; Line 1173
	mov	DWORD PTR _v8$[ebp], eax
	mov	edx, OFFSET FLAT:_themeLoc
$L85690:
; Line 1175
	mov	eax, DWORD PTR [edx+4]
; Line 1176
	mov	esi, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR [esi+eax-1]
	cmp	eax, ecx
	jge	SHORT $L85696
; Line 1177
	mov	ecx, DWORD PTR [edx]
; Line 1178
	lea	edi, DWORD PTR [eax+eax+16]
; Line 1179
	mov	eax, DWORD PTR [edx+12]
; Line 1180
	dec	esi
	mov	DWORD PTR _v9$[ebp], esi
	lea	eax, DWORD PTR [eax+ecx-1]
	mov	DWORD PTR _v7$[ebp], eax
$L85694:
; Line 1182
	mov	esi, DWORD PTR _v7$[ebp]
	cmp	ecx, esi
	jge	SHORT $L85700
; Line 1183
	lea	eax, DWORD PTR [ecx+8]
	imul	eax, 224				; 000000e0H
; Line 1184
	sub	esi, ecx
	lea	ebx, DWORD PTR [eax+edi]
$L85698:
; Line 1186
	mov	eax, ebx
; Line 1187
	add	ebx, 224				; 000000e0H
; Line 1188
	or	BYTE PTR _dFlags[eax], 8
; Line 1189
	or	BYTE PTR _dFlags[eax+112], 8
; Line 1190
	or	BYTE PTR _dFlags[eax+1], 8
; Line 1191
	or	BYTE PTR _dFlags[eax+113], 8
; Line 1192
	dec	esi
; Line 1193
	jne	SHORT $L85698
$L85700:
; Line 1195
	inc	edi
	inc	edi
; Line 1196
	dec	DWORD PTR _v9$[ebp]
; Line 1197
	jne	SHORT $L85694
$L85696:
; Line 1199
	add	edx, 20					; 00000014H
; Line 1200
	dec	DWORD PTR _v8$[ebp]
; Line 1201
	jne	SHORT $L85690
	pop	edi
	pop	esi
	pop	ebx
$L85692:
; Line 1203
	leave
	ret	0
_DRLG_HoldThemeRooms ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SkipThemeRoom@8
_TEXT	SEGMENT
@SkipThemeRoom@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1206
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1212
	mov	edi, DWORD PTR _themeCount
	xor	ebx, ebx
	test	edi, edi
; Line 1213
	jle	SHORT $L85987
; Line 1214
	mov	eax, OFFSET FLAT:_themeLoc+4
$L85711:
; Line 1216
	mov	esi, DWORD PTR [eax-4]
	lea	ebp, DWORD PTR [esi-2]
	cmp	ecx, ebp
	jl	SHORT $L85714
	mov	ebp, DWORD PTR [eax+8]
	lea	esi, DWORD PTR [esi+ebp+2]
	cmp	ecx, esi
	jg	SHORT $L85714
; Line 1217
	mov	esi, DWORD PTR [eax]
; Line 1218
	lea	ebp, DWORD PTR [esi-2]
	cmp	edx, ebp
	jl	SHORT $L85714
	mov	ebp, DWORD PTR [eax+12]
	lea	esi, DWORD PTR [esi+ebp+2]
	cmp	edx, esi
	jle	SHORT $L85712
$L85714:
; Line 1221
	inc	ebx
; Line 1222
	add	eax, 20					; 00000014H
; Line 1223
	cmp	ebx, edi
	jl	SHORT $L85711
$L85987:
; Line 1224
	mov	al, 1
	jmp	SHORT $L85705
$L85712:
; Line 1226
	xor	al, al
$L85705:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1227
	ret	0
@SkipThemeRoom@8 ENDP
_TEXT	ENDS
PUBLIC	_InitLevels
EXTRN	_leveldebug:DWORD
; Function compile flags: /Ogsy
;	COMDAT _InitLevels
_TEXT	SEGMENT
_InitLevels PROC NEAR					; COMDAT
; Line 1231
	xor	eax, eax
	cmp	DWORD PTR _leveldebug, eax
	jne	SHORT $L85717
; Line 1232
	mov	BYTE PTR _currlevel, al
; Line 1233
	mov	BYTE PTR _leveltype, al
; Line 1234
	mov	BYTE PTR _setlevel, al
$L85717:
; Line 1236
	ret	0
_InitLevels ENDP
_TEXT	ENDS
END
