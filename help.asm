; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/help.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0M@DODG@Diablo?5Help?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CO@IJDJ@Press?5ESC?5to?5end?5or?5the?5arrow?5ke@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _InitHelp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawHelp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawHelpLine@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DisplayHelp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _HelpScrollUp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _HelpScrollDown
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_gszHelpText
_DATA	SEGMENT
COMM	_help_select_line:DWORD
COMM	_dword_634494:DWORD
COMM	_helpflag:DWORD
COMM	_displayinghelp:DWORD:016H
COMM	_HelpTop:DWORD
_DATA	ENDS
CONST	SEGMENT
_gszHelpText DB	'$Keyboard Shortcuts:|F1:    Open Help Screen|Esc:   Disp'
	DB	'lay Main Menu|Tab:   Display Auto-map|Space: Hide all info sc'
	DB	'reens|S: Open Speedbook|B: Open Spellbook|I: Open Inventory s'
	DB	'creen|C: Open Character screen|Q: Open Quest log|F: Reduce sc'
	DB	'reen brightness|G: Increase screen brightness|Z: Zoom Game Sc'
	DB	'reen|+ / -: Zoom Automap|1 - 8: Use Belt item|F5, F6, F7, F8:'
	DB	'     Set hot key for skill or spell|Shift + Left Click: Attac'
	DB	'k without moving||$Movement:|If you hold the mouse button dow'
	DB	'n while moving, the character will continue to move in that d'
	DB	'irection.||$Combat:|Holding down the shift key and then left-'
	DB	'clicking allows the character to attack without moving.||$Aut'
	DB	'o-map:|To access the auto-map, click the ''MAP'' button on th'
	DB	'e Information Bar or press ''TAB'' on the keyboard. Zooming i'
	DB	'n and out of the map is done with the + and - keys. Scrolling'
	DB	' the map uses the arrow keys.||$Picking up Objects:|Useable i'
	DB	'tems that are small in size, such as potions or scrolls, are '
	DB	'automatically placed in your ''belt'' located at the top of t'
	DB	'he Interface bar . When an item is placed in the belt, a smal'
	DB	'l number appears in that box. Items may be used by either pre'
	DB	'ssing the corresponding number or right-clicking on the item.'
	DB	'||$Gold|You can select a specific amount of gold to drop by r'
	DB	'ight clicking on a pile of gold in your inventory.||$Skills &'
	DB	' Spells:|You can access your list of skills and spells by lef'
	DB	't-clicking on the ''SPELLS'' button in the interface bar. Mem'
	DB	'orized spells and those available through staffs are listed h'
	DB	'ere. Left-clicking on the spell you wish to cast will ready t'
	DB	'he spell. A readied spell may be cast by simply right-clickin'
	DB	'g in the play area.||$Using the Speedbook for Spells|Left-cli'
	DB	'cking on the ''readied spell'' button will open the ''Speedbo'
	DB	'ok'' which allows you to select a skill or spell for immediat'
	DB	'e use.  To use a readied skill or spell, simply right-click i'
	DB	'n the main play area.||$Setting Spell Hotkeys|You can assign '
	DB	'up to four Hot Keys for skills, spells or scrolls.  Start by '
	DB	'opening the ''speedbook'' as described in the section above. '
	DB	'Press the F5, F6, F7 or F8 keys after highlighting the spell '
	DB	'you wish to assign.||$Spell Books|Reading more than one book '
	DB	'increases your knowledge of that spell, allowing you to cast '
	DB	'the spell more effectively.|&', 00H
CONST	ENDS
PUBLIC	_InitHelp
; Function compile flags: /Ogsy
;	COMDAT _InitHelp
_TEXT	SEGMENT
_InitHelp PROC NEAR					; COMDAT
; File Source/help.cpp
; Line 82
	xor	eax, eax
	mov	DWORD PTR _helpflag, eax
; Line 83
	mov	DWORD PTR _dword_634494, eax
; Line 84
	mov	DWORD PTR _displayinghelp, eax
; Line 85
	ret	0
_InitHelp ENDP
_TEXT	ENDS
PUBLIC	_DrawHelp
PUBLIC	@DrawHelpLine@16
PUBLIC	??_C@_0M@DODG@Diablo?5Help?$AA@			; `string'
PUBLIC	??_C@_0CO@IJDJ@Press?5ESC?5to?5end?5or?5the?5arrow?5ke@ ; `string'
EXTRN	_fontframe:BYTE
EXTRN	_fontkern:BYTE
EXTRN	_fontidx:BYTE
EXTRN	_DrawQTextBack:NEAR
EXTRN	@PrintSString@24:NEAR
EXTRN	@DrawSLine@4:NEAR
EXTRN	_DrawSTextHelp:NEAR
EXTRN	_tempstr:BYTE
;	COMDAT ??_C@_0M@DODG@Diablo?5Help?$AA@
_DATA	SEGMENT
??_C@_0M@DODG@Diablo?5Help?$AA@ DB 'Diablo Help', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CO@IJDJ@Press?5ESC?5to?5end?5or?5the?5arrow?5ke@
_DATA	SEGMENT
??_C@_0CO@IJDJ@Press?5ESC?5to?5end?5or?5the?5arrow?5ke@ DB 'Press ESC to '
	DB	'end or the arrow keys to scroll.', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DrawHelp
_TEXT	SEGMENT
_v0$ = -8
_color$ = -4
_DrawHelp PROC NEAR					; COMDAT
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 105
	call	_DrawSTextHelp
; Line 106
	call	_DrawQTextBack
; Line 107
	xor	ebx, ebx
	xor	ecx, ecx
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0M@DODG@Diablo?5Help?$AA@ ; `string'
	push	1
	push	2
	pop	edx
	call	@PrintSString@24
; Line 108
	push	5
	pop	ecx
	call	@DrawSLine@4
; Line 109
	mov	eax, DWORD PTR _help_select_line
; Line 110
	mov	esi, OFFSET FLAT:_gszHelpText
; Line 111
	cmp	eax, ebx
	mov	DWORD PTR _v0$[ebp], eax
	jle	SHORT $L85002
$L85000:
; Line 114
	xor	edi, edi
; Line 115
	xor	edx, edx
	jmp	SHORT $L85111
$L85004:
; Line 117
	inc	esi
$L85111:
; Line 116
	cmp	BYTE PTR [esi], bl
	je	SHORT $L85004
; Line 118
	cmp	BYTE PTR [esi], 36			; 00000024H
	jne	SHORT $L85006
; Line 119
	inc	esi
$L85006:
; Line 120
	mov	cl, BYTE PTR [esi]
; Line 121
	cmp	cl, 38					; 00000026H
	je	SHORT $L85024
; Line 122
	cmp	cl, 124					; 0000007cH
	je	SHORT $LABEL_47$85009
$L85011:
; Line 125
	cmp	cl, bl
	jne	SHORT $L85016
$L85014:
; Line 127
	inc	esi
; Line 128
	cmp	BYTE PTR [esi], bl
	je	SHORT $L85014
$L85016:
; Line 130
	mov	cl, BYTE PTR [esi]
; Line 131
	mov	BYTE PTR _tempstr[edi], cl
	inc	edi
; Line 132
	movzx	ecx, cl
	inc	esi
	movzx	ecx, BYTE PTR _fontidx[ecx]
	movzx	ecx, BYTE PTR _fontframe[ecx]
	movzx	ecx, BYTE PTR _fontkern[ecx]
	lea	edx, DWORD PTR [edx+ecx+1]
; Line 133
	mov	cl, BYTE PTR [esi]
; Line 134
	cmp	cl, 124					; 0000007cH
	je	SHORT $L85105
; Line 124
	cmp	edx, 577				; 00000241H
	jl	SHORT $L85011
; Line 178
	jmp	SHORT $L85018
$L85105:
; Line 135
	cmp	edx, 577				; 00000241H
	jl	SHORT $LABEL_18$85019
$L85018:
; Line 140
	lea	ecx, DWORD PTR _tempstr[edi-1]
	jmp	SHORT $L85112
$L85021:
; Line 141
	dec	esi
	dec	ecx
$L85112:
; Line 140
	cmp	BYTE PTR [ecx], 32			; 00000020H
	jne	SHORT $L85021
$LABEL_18$85019:
; Line 143
	cmp	BYTE PTR [esi], 124			; 0000007cH
	jne	SHORT $L85024
$LABEL_47$85009:
; Line 145
	inc	esi
$L85024:
; Line 147
	dec	eax
; Line 148
	jne	SHORT $L85000
$L85002:
; Line 150
	push	7
	pop	edi
$L85025:
; Line 152
	xor	eax, eax
; Line 153
	xor	edx, edx
	jmp	SHORT $L85113
$L85029:
; Line 155
	inc	esi
$L85113:
; Line 154
	cmp	BYTE PTR [esi], bl
	je	SHORT $L85029
; Line 156
	cmp	BYTE PTR [esi], 36			; 00000024H
	jne	SHORT $L85031
; Line 157
	inc	esi
; Line 158
	mov	BYTE PTR _color$[ebp], 2
; Line 159
	jmp	SHORT $L85033
$L85031:
; Line 160
	mov	BYTE PTR _color$[ebp], bl
$L85033:
; Line 162
	mov	cl, BYTE PTR [esi]
; Line 163
	cmp	cl, 38					; 00000026H
	jne	SHORT $L85035
; Line 164
	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _HelpTop, eax
; Line 165
	jmp	$L85053
$L85035:
; Line 166
	cmp	cl, 124					; 0000007cH
	je	SHORT $LABEL_48$85038
$L85040:
; Line 169
	cmp	cl, bl
	jne	SHORT $L85045
$L85043:
; Line 171
	inc	esi
; Line 172
	cmp	BYTE PTR [esi], bl
	je	SHORT $L85043
$L85045:
; Line 174
	mov	cl, BYTE PTR [esi]
; Line 175
	mov	BYTE PTR _tempstr[eax], cl
	inc	eax
; Line 176
	movzx	ecx, cl
	inc	esi
	movzx	ecx, BYTE PTR _fontidx[ecx]
	movzx	ecx, BYTE PTR _fontframe[ecx]
	movzx	ecx, BYTE PTR _fontkern[ecx]
	lea	edx, DWORD PTR [edx+ecx+1]
; Line 177
	mov	cl, BYTE PTR [esi]
; Line 178
	cmp	cl, 124					; 0000007cH
	je	SHORT $L85106
; Line 168
	cmp	edx, 577				; 00000241H
	jl	SHORT $L85040
; Line 178
	jmp	SHORT $L85104
$L85106:
; Line 179
	cmp	edx, 577				; 00000241H
	jl	SHORT $LABEL_39$85048
; Line 184
	jmp	SHORT $L85104
$L85050:
; Line 185
	dec	esi
$L85104:
; Line 184
	dec	eax
	cmp	BYTE PTR _tempstr[eax], 32		; 00000020H
	jne	SHORT $L85050
$LABEL_39$85048:
; Line 187
	cmp	eax, ebx
	je	SHORT $L85052
; Line 189
	push	DWORD PTR _color$[ebp]
	mov	edx, edi
	xor	ecx, ecx
	mov	BYTE PTR _tempstr[eax], bl
	push	OFFSET FLAT:_tempstr
	call	@DrawHelpLine@16
; Line 190
	mov	eax, DWORD PTR _help_select_line
	mov	DWORD PTR _v0$[ebp], eax
$L85052:
; Line 192
	cmp	BYTE PTR [esi], 124			; 0000007cH
	jne	SHORT $L85053
$LABEL_48$85038:
; Line 194
	inc	esi
$L85053:
; Line 196
	inc	edi
; Line 197
	cmp	edi, 22					; 00000016H
	jl	$L85025
; Line 198
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0CO@IJDJ@Press?5ESC?5to?5end?5or?5the?5arrow?5ke@ ; `string'
	push	1
	push	23					; 00000017H
	xor	ecx, ecx
	pop	edx
	call	@PrintSString@24
	pop	edi
	pop	esi
	pop	ebx
; Line 199
	leave
	ret	0
_DrawHelp ENDP
_TEXT	ENDS
EXTRN	_SStringY:BYTE
EXTRN	_screen_y_times_768:BYTE
EXTRN	@CPrintString@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DrawHelpLine@16
_TEXT	SEGMENT
_text$ = 8
_color$ = 12
_v4$ = 8
@DrawHelpLine@16 PROC NEAR				; COMDAT
; _always_0$ = ecx
; _help_line_nr$ = edx
; Line 204
	push	ebp
	mov	ebp, esp
; Line 212
	mov	edx, DWORD PTR _SStringY[edx*4]
	push	ebx
; Line 213
	mov	ebx, DWORD PTR _text$[ebp]
	mov	eax, ecx
	mov	edx, DWORD PTR _screen_y_times_768[edx*4+816]
	push	edi
	xor	ecx, ecx
	lea	edi, DWORD PTR [edx+eax+96]
	mov	al, BYTE PTR [ebx]
	test	al, al
	je	SHORT $L85071
	push	esi
	jmp	SHORT $L85069
$L85119:
	mov	ecx, DWORD PTR _v4$[ebp]
$L85069:
; Line 215
	movzx	eax, al
	inc	ebx
	movzx	eax, BYTE PTR _fontidx[eax]
	mov	al, BYTE PTR _fontframe[eax]
; Line 216
	movzx	esi, al
; Line 218
	test	al, al
	movzx	edx, BYTE PTR _fontkern[esi]
	lea	ecx, DWORD PTR [ecx+edx+1]
	mov	DWORD PTR _v4$[ebp], ecx
	je	SHORT $L85073
; Line 219
	cmp	ecx, 577				; 00000241H
	jg	SHORT $L85073
; Line 220
	push	DWORD PTR _color$[ebp]
	mov	edx, esi
	mov	ecx, edi
	call	@CPrintString@12
$L85073:
; Line 222
	movzx	eax, BYTE PTR _fontkern[esi]
	lea	edi, DWORD PTR [edi+eax+1]
	mov	al, BYTE PTR [ebx]
	test	al, al
	jne	SHORT $L85119
	pop	esi
$L85071:
	pop	edi
	pop	ebx
; Line 224
	pop	ebp
	ret	8
@DrawHelpLine@16 ENDP
_TEXT	ENDS
PUBLIC	_DisplayHelp
; Function compile flags: /Ogsy
;	COMDAT _DisplayHelp
_TEXT	SEGMENT
_DisplayHelp PROC NEAR					; COMDAT
; Line 228
	and	DWORD PTR _help_select_line, 0
; Line 229
	mov	DWORD PTR _helpflag, 1
; Line 230
	mov	DWORD PTR _HelpTop, 5000		; 00001388H
; Line 231
	ret	0
_DisplayHelp ENDP
_TEXT	ENDS
PUBLIC	_HelpScrollUp
; Function compile flags: /Ogsy
;	COMDAT _HelpScrollUp
_TEXT	SEGMENT
_HelpScrollUp PROC NEAR					; COMDAT
; Line 237
	cmp	DWORD PTR _help_select_line, 0
	jle	SHORT $L85076
; Line 238
	dec	DWORD PTR _help_select_line
$L85076:
; Line 239
	ret	0
_HelpScrollUp ENDP
_TEXT	ENDS
PUBLIC	_HelpScrollDown
; Function compile flags: /Ogsy
;	COMDAT _HelpScrollDown
_TEXT	SEGMENT
_HelpScrollDown PROC NEAR				; COMDAT
; Line 244
	mov	eax, DWORD PTR _help_select_line
	cmp	eax, DWORD PTR _HelpTop
	jge	SHORT $L85078
; Line 245
	inc	DWORD PTR _help_select_line
$L85078:
; Line 246
	ret	0
_HelpScrollDown ENDP
_TEXT	ENDS
END
