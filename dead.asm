; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/dead.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _InitDead
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddDead@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SetDead
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_spurtndx:DWORD
COMM	_dead:BYTE:05d0H
COMM	_stonendx:DWORD
_DATA	ENDS
PUBLIC	_InitDead
EXTRN	_misfiledata:BYTE
EXTRN	_monstactive:BYTE
EXTRN	_nummonsters:DWORD
EXTRN	_monster:BYTE
EXTRN	_Monsters:BYTE
EXTRN	_nummtypes:DWORD
; Function compile flags: /Ogsy
;	COMDAT _InitDead
_TEXT	SEGMENT
_mtypes$ = -816
_i$ = -8
_nd$ = -4
_InitDead PROC NEAR					; COMDAT
; File Source/dead.cpp
; Line 11
	push	ebp
	mov	ebp, esp
	sub	esp, 816				; 00000330H
	push	ebx
	push	esi
	push	edi
; Line 19
	mov	ecx, 200				; 000000c8H
	xor	eax, eax
	lea	edi, DWORD PTR _mtypes$[ebp]
	rep stosd
; Line 23
	mov	ecx, DWORD PTR _nummtypes
	xor	ebx, ebx
	test	ecx, ecx
	jle	SHORT $L84993
	mov	edx, OFFSET FLAT:_dead+32
	mov	eax, OFFSET FLAT:_Monsters+216
	mov	DWORD PTR -4+[ebp], ecx
$L84991:
; Line 24
	movzx	ecx, BYTE PTR [eax-216]
	lea	ecx, DWORD PTR _mtypes$[ebp+ecx*4]
	mov	DWORD PTR -12+[ebp], ecx
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $L84992
; Line 26
	push	8
	lea	esi, DWORD PTR [eax-32]
	pop	ecx
	lea	edi, DWORD PTR [edx-32]
	rep movsd
; Line 27
	mov	ecx, DWORD PTR [eax]
; Line 30
	and	BYTE PTR [edx+12], 0
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [edx+8], ecx
; Line 31
	mov	cl, bl
	inc	cl
; Line 32
	inc	ebx
	mov	BYTE PTR [eax+101], cl
	mov	ecx, DWORD PTR -12+[ebp]
; Line 33
	add	edx, 48					; 00000030H
	mov	DWORD PTR [ecx], ebx
$L84992:
	add	eax, 328				; 00000148H
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L84991
$L84993:
; Line 38
	mov	eax, DWORD PTR _misfiledata+3788
	lea	edx, DWORD PTR [ebx+ebx*2]
	push	8
; Line 55
	and	DWORD PTR _i$[ebp], 0
	shl	edx, 4
	pop	esi
	lea	edi, DWORD PTR _dead[edx]
	mov	ecx, esi
	rep stosd
	and	BYTE PTR _dead[edx+44], 0
	mov	DWORD PTR _dead[edx+32], esi
	lea	esi, DWORD PTR [ebx+1]
	mov	eax, DWORD PTR _misfiledata+4260
	mov	DWORD PTR _dead[edx+36], 128		; 00000080H
	mov	DWORD PTR _dead[edx+40], 32		; 00000020H
	lea	edx, DWORD PTR [esi+esi*2]
	push	8
	shl	edx, 4
	pop	ecx
	mov	DWORD PTR _spurtndx, esi
	lea	edi, DWORD PTR _dead[edx]
	rep stosd
	and	BYTE PTR _dead[edx+44], 0
	inc	esi
	mov	DWORD PTR _stonendx, esi
	mov	eax, esi
	mov	esi, DWORD PTR _nummonsters
	mov	DWORD PTR _dead[edx+32], 12		; 0000000cH
	test	esi, esi
	mov	DWORD PTR _dead[edx+36], 128		; 00000080H
	mov	DWORD PTR _dead[edx+40], 32		; 00000020H
	mov	DWORD PTR _nd$[ebp], eax
	jle	$L85006
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 4
	add	eax, OFFSET FLAT:_dead+32
$L85004:
; Line 56
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _monstactive[ecx*4]
; Line 57
	imul	edx, 228				; 000000e4H
	cmp	BYTE PTR _monster[edx+188], 0
	je	SHORT $L85005
	mov	ecx, DWORD PTR _monster[edx+220]
; Line 58
	lea	edi, DWORD PTR [eax-32]
	mov	DWORD PTR -12+[ebp], 8
	lea	ebx, DWORD PTR [ecx+184]
	mov	DWORD PTR -16+[ebp], ebx
$L85008:
; Line 59
	mov	ebx, DWORD PTR -16+[ebp]
	add	DWORD PTR -16+[ebp], 4
	mov	ebx, DWORD PTR [ebx]
	mov	DWORD PTR [edi], ebx
	add	edi, 4
	dec	DWORD PTR -12+[ebp]
	jne	SHORT $L85008
; Line 60
	mov	edi, DWORD PTR [ecx+216]
	mov	DWORD PTR [eax], edi
; Line 61
	mov	edi, DWORD PTR [ecx+300]
	mov	DWORD PTR [eax+4], edi
; Line 62
	mov	ecx, DWORD PTR [ecx+304]
	mov	DWORD PTR [eax+8], ecx
; Line 63
	mov	cl, BYTE PTR _monster[edx+189]
	add	cl, 4
	mov	BYTE PTR [eax+12], cl
; Line 64
	mov	cl, BYTE PTR _nd$[ebp]
	inc	cl
; Line 65
	inc	DWORD PTR _nd$[ebp]
	mov	BYTE PTR _monster[edx+190], cl
	add	eax, 48					; 00000030H
$L85005:
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], esi
	jl	$L85004
$L85006:
	pop	edi
	pop	esi
	pop	ebx
; Line 70
	leave
	ret	0
_InitDead ENDP
_TEXT	ENDS
PUBLIC	@AddDead@16
EXTRN	_dDead:BYTE
; Function compile flags: /Ogsy
;	COMDAT @AddDead@16
_TEXT	SEGMENT
_dv$ = 8
_ddir$ = 12
@AddDead@16 PROC NEAR					; COMDAT
; _dx$ = ecx
; _dy$ = edx
; Line 74
	mov	al, BYTE PTR _ddir$[esp-4]
	imul	ecx, 112				; 00000070H
	push	esi
	mov	esi, edx
	mov	dl, BYTE PTR _dv$[esp]
	shl	al, 5
	and	dl, 31					; 0000001fH
	add	al, dl
	mov	BYTE PTR _dDead[ecx+esi], al
	pop	esi
; Line 75
	ret	8
@AddDead@16 ENDP
_TEXT	ENDS
PUBLIC	_SetDead
EXTRN	@ChangeLightXY@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SetDead
_TEXT	SEGMENT
_i$ = -4
_SetDead PROC NEAR					; COMDAT
; Line 78
	push	ecx
; Line 83
	xor	eax, eax
	cmp	DWORD PTR _nummonsters, eax
	mov	DWORD PTR _i$[esp+4], eax
	jle	SHORT $L85027
	push	ebx
	push	ebp
	push	esi
	push	edi
$L85025:
; Line 84
	mov	esi, DWORD PTR _monstactive[eax*4]
; Line 85
	imul	esi, 228				; 000000e4H
	cmp	BYTE PTR _monster[esi+188], 0
	je	SHORT $L85026
; Line 86
	xor	ebp, ebp
	mov	ebx, OFFSET FLAT:_dDead
$L85029:
; Line 87
	xor	edi, edi
$L85032:
; Line 88
	mov	al, BYTE PTR [ebx+edi]
	and	al, 31					; 0000001fH
	cmp	al, BYTE PTR _monster[esi+190]
	jne	SHORT $L85033
; Line 89
	movzx	ecx, BYTE PTR _monster[esi+215]
	push	edi
	mov	edx, ebp
	call	@ChangeLightXY@12
$L85033:
	inc	edi
	cmp	edi, 112				; 00000070H
	jl	SHORT $L85032
	add	ebx, 112				; 00000070H
	inc	ebp
	cmp	ebx, OFFSET FLAT:_dDead+12544
	jl	SHORT $L85029
$L85026:
; Line 83
	mov	eax, DWORD PTR _i$[esp+20]
	inc	eax
	cmp	eax, DWORD PTR _nummonsters
	mov	DWORD PTR _i$[esp+20], eax
	jl	SHORT $L85025
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$L85027:
; Line 94
	pop	ecx
	ret	0
_SetDead ENDP
_TEXT	ENDS
END
