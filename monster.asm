; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/monster.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BN@IMIC@Monsters?2Zombie?2Zombie?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@IHKO@Monsters?2Zombie?2Zombie?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06PEJJ@Zombie?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@OMHC@Monsters?2Zombie?2Bluered?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05EMI@Ghoul?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@PMIC@Monsters?2Zombie?2Grey?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CBFH@Rotting?5Carcass?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@NLEA@Monsters?2Zombie?2Yellow?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKLP@Black?5Death?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@OOMI@Monsters?2FalSpear?2Phall?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@LICE@Monsters?2FalSpear?2Phall?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@MBIF@Monsters?2FalSpear?2FallenT?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IHGK@Fallen?5One?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@NGAB@Monsters?2FalSpear?2Dark?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06KIJL@Carver?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CFFL@Devil?5Kin?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@KPBN@Monsters?2FalSpear?2Blue?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08HICJ@Dark?5One?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KBEI@Monsters?2SkelAxe?2SklAx?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@IJNN@Monsters?2SkelAxe?2SklAx?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@LDMJ@Monsters?2SkelAxe?2White?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KFBC@Skeleton?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PJBC@Monsters?2SkelAxe?2Skelt?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FLJI@Corpse?5Axe?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@OPIP@Burning?5Dead?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HLKD@Monsters?2SkelAxe?2Black?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06KKNE@Horror?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@DAFP@Monsters?2FalSword?2Fall?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@LKDH@Monsters?2FalSword?2Fall?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@KANN@Monsters?2FalSword?2FallenT?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@JPEE@Monsters?2FalSword?2Dark?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OGFI@Monsters?2FalSword?2Blue?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BBLM@Monsters?2Scav?2Scav?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@FEJI@Monsters?2Scav?2Scav?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09ODLB@Scavenger?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BABM@Monsters?2Scav?2ScavBr?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@GMAL@Plague?5Eater?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@HCLD@Monsters?2Scav?2ScavBe?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@PNNC@Shadow?5Beast?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HIBO@Monsters?2Scav?2ScavW?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@NJCA@Bone?5Gasher?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@FDDL@Monsters?2SkelBow?2SklBw?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@OGC@Monsters?2SkelBow?2SklBw?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OCKB@Monsters?2SkelBow?2White?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@KIHK@Monsters?2SkelBow?2Skelt?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FKAB@Corpse?5Bow?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CKML@Monsters?2SkelBow?2Black?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@LPCM@Monsters?2SkelSd?2SklSr?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@JGHO@Monsters?2SkelSd?2SklSr?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@FEKE@Monsters?2SkelSd?2White?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OJGC@Skeleton?5Captain?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@BOHP@Monsters?2SkelSd?2Skelt?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@ONID@Corpse?5Captain?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@LNCI@Burning?5Dead?5Captain?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@JMMO@Monsters?2SkelSd?2Black?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@MKB@Horror?5Captain?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@EHND@Monsters?2TSneak?2TSneak?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@FIIK@Monsters?2TSneak?2Sneakl?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@KBCM@Invisible?5Lord?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OIAO@Monsters?2Sneak?2Sneak?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@IEAE@Monsters?2Sneak?2Sneak?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OCEO@Hidden?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@FIHM@Monsters?2Sneak?2Sneakv2?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07JKLP@Stalker?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PIFJ@Monsters?2Sneak?2Sneakv3?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06ELBO@Unseen?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@LIBD@Monsters?2Sneak?2Sneakv1?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LANI@Illusion?5Weaver?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@FGPM@Monsters?2GoatLord?2GoatL?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@ECCN@Monsters?2GoatLord?2Goatl?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@BAIA@Lord?5Sayter?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@OGDO@Monsters?2GoatMace?2Goat?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@CPIM@Monsters?2GoatMace?2Goat?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PPFJ@Flesh?5Clan?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@DGOA@Monsters?2GoatMace?2Beige?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DDEJ@Stone?5Clan?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@IMBO@Monsters?2GoatMace?2Red?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09NBOI@Fire?5Clan?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CPGA@Monsters?2GoatMace?2Gray?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JFLE@Night?5Clan?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@KIOP@Monsters?2Bat?2Bat?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JLKA@Monsters?2Bat?2Bat?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@FLIN@Monsters?2Bat?2red?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FJN@Fiend?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05OMKA@Blink?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BDJF@Monsters?2Bat?2grey?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MJLP@Gloom?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@NFPN@Monsters?2Bat?2orange?4trn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NKDG@Familiar?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KDEJ@Monsters?2GoatBow?2GoatB?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@DOBM@Monsters?2GoatBow?2GoatB?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@NIME@Monsters?2GoatBow?2Beige?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@NLCC@Monsters?2GoatBow?2Red?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@LDH@Monsters?2GoatBow?2Gray?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CGEO@Monsters?2Acid?2Acid?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@NECC@Acid?5Beast?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MMPI@Monsters?2Acid?2AcidBlk?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@NPHN@Poison?5Spitter?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KIAF@Monsters?2Acid?2AcidB?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GJHH@Pit?5Beast?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KKFA@Monsters?2Acid?2AcidR?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KCMP@Lava?5Maw?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OAFB@Monsters?2SKing?2SKing?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KOJK@Monsters?2SKing?2SKing?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@COOI@Skeleton?5King?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IFKI@Monsters?2FatC?2FatC?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@IGFL@Monsters?2FatC?2FatC?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@OGO@The?5Butcher?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OEHI@Monsters?2Fat?2Fat?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FGOM@Overlord?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@KPHM@Monsters?2Fat?2Blue?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BNOE@Mud?5Man?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@JOFI@Monsters?2Fat?2FatB?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PHFJ@Toad?5Demon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BOMN@Monsters?2Fat?2FatF?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@ELFK@Flayed?5One?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@OKOD@Monsters?2Worm?2Worm?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EEPE@Wyrm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HKKP@Cave?5Slug?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@KJLC@Devil?5Wyrm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DOKM@Devourer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@GJJN@Monsters?2Magma?2Magma?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LADC@Monsters?2Magma?2Magma?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@BDIN@Magma?5Demon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@PAJG@Monsters?2Magma?2Yellow?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@BAA@Blood?5Stone?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HBBI@Monsters?2Magma?2Blue?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IKKA@Hell?5Stone?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KPPL@Monsters?2Magma?2Wierd?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09JMEO@Lava?5Lord?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@DDCB@Monsters?2Rhino?2Rhino?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@INFH@Monsters?2Rhino?2Rhino?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@OLEB@Horned?5Demon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MPLB@Monsters?2Rhino?2Orange?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@EIAJ@Mud?5Runner?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KPBF@Monsters?2Rhino?2Blue?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@HAFD@Frost?5Charger?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MHDK@Monsters?2Rhino?2RhinoB?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@FPB@Obsidian?5Lord?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@PCKO@Monsters?2Demskel?2Demskl?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LDDE@Monsters?2Thin?2Thinv3?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@LMNI@Bone?5Demon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09JDGN@Red?5Death?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EOOB@Litch?5Demon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@HMDJ@Undead?5Balrog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@JOPB@Monsters?2Fireman?2FireM?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@LACM@Incinerator?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@LNJN@Flame?5Lord?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09BBKL@Doom?5Fire?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@DMNI@Hell?5Burner?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09IKEH@Red?5Storm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@ELEK@Storm?5Rider?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BDBB@Monsters?2Thin?2Thinv2?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@MPDM@Storm?5Lord?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@PDHO@Monsters?2Thin?2Thinv1?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GKHB@Maelstorm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@PDMB@Monsters?2BigFall?2Fallg?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@COGP@Monsters?2BigFall?2Bfal?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGGD@Devil?5Kin?5Brute?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@DCJK@Monsters?2Gargoyle?2Gargo?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@OJJF@Monsters?2Gargoyle?2Gargo?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CHBP@Winged?9Demon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@GLPH@Monsters?2Gargoyle?2GarE?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08HND@Gargoyle?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KACC@Monsters?2Gargoyle?2GargBr?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JKAG@Blood?5Claw?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GEJG@Monsters?2Gargoyle?2GargB?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CJIN@Death?5Wing?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@OHJC@Monsters?2Mega?2Mega?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@EJPE@Monsters?2Mega?2Mega?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MHAA@Slayer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KHJI@Monsters?2Mega?2Guard?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KEIB@Guardian?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@DEEB@Monsters?2Mega?2Vtexl?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@NBKI@Vortex?5Lord?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@BNN@Monsters?2Mega?2Balr?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OEIG@Balrog?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@IHHM@Monsters?2Snake?2Snake?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@NHII@Monsters?2Snake?2Snake?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PGLH@Cave?5Viper?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LCBA@Monsters?2Snake?2SnakR?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GLJN@Fire?5Drake?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JEFP@Monsters?2Snake?2Snakg?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CLBK@Gold?5Viper?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LEOP@Monsters?2Snake?2Snakb?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FIHH@Azure?5Drake?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@JDBP@Monsters?2Black?2Black?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KHJ@Monsters?2Black?2Black?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@PDGD@Black?5Knight?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GOHA@Monsters?2Black?2BlkKntRT?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FPBM@Doom?5Guard?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@DEHC@Monsters?2Black?2BlkKntBT?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@KLAH@Steel?5Lord?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@JCKI@Monsters?2Black?2BlkKntBe?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@PCA@Blood?5Knight?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CDKL@Monsters?2Unrav?2Unrav?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09KOLF@Unraveler?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GDBP@Hollow?5One?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@FDGH@Pain?5Master?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@NDCP@Reality?5Weaver?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DPMO@Monsters?2Succ?2Scbs?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HGFB@Monsters?2Succ?2Scbs?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FEBP@Succubus?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@GKHN@Monsters?2Succ?2Succb?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FPIO@Snow?5Witch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@PIJO@Monsters?2Succ?2Succrw?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BHM@Hell?5Spawn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KCJM@Monsters?2Succ?2Succbw?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GKNH@Soul?5Burner?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GCAL@Monsters?2Mage?2Mage?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OMKE@Monsters?2Mage?2Mage?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HLJB@Counselor?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IEPO@Monsters?2Mage?2Cnselg?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IHLC@Magistrate?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@IAEI@Monsters?2Mage?2Cnselgd?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08EOGH@Cabalist?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CCLI@Monsters?2Mage?2Cnselbk?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KFKH@Advocate?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HABD@Monsters?2Golem?2Golem?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@PJFI@Monsters?2Golem?2Golm?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MIHD@Golem?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LMBN@Monsters?2Diablo?2Diablo?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@FGDO@Monsters?2Diablo?2Diablo?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@FIFM@The?5Dark?5Lord?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@BEOI@Monsters?2DarkMage?2Dmage?$CFc?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@HJAJ@Monsters?2DarkMage?2Dmag?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@JDKB@The?5Arch?9Litch?5Malignus?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@NNOM@Gharbad?5the?5Weak?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EMDL@BSDB?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MCCE@GENRL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MFB@GENERAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MNJA@Snotspill?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LJKM@BNG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@EMLM@Arch?9Bishop?5Lazarus?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07FILF@Red?5Vex?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NHCL@REDV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09NNFD@BlackJade?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05HMFP@BLKJD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GCKJ@Lachdanan?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CAGH@BHKA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@DLIH@Bonehead?5Keenaxe?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@CLDJ@Bladeskin?5the?5Slasher?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFHF@BSTS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07NGEG@Soulpus?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@BDNK@Pukerat?5the?5Unclean?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DCBN@PTU?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BJO@Boneripper?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02NOGO@BR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@FPNL@Rotfeast?5the?5Hungry?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03PEDI@ETH?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@GBKJ@Gutshank?5the?5Quick?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03HEK@GTQ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IPBC@Brokenhead?5Bangshield?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04HPMH@BHBS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DEJF@Bongo?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@EMBE@Rotcarnage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NLMC@RCRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CBPB@Shadowbite?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04FKFB@SHBT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07FKDP@Deadeye?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02FFAE@DE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GMMP@Madeye?5the?5Dead?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03JKGJ@MTD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@MKEC@El?5Chupacabras?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CNLO@Skullfire?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JLC@SKFR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MLHL@Warpskull?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KCIG@TSPO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@EGAH@Goretongue?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03KOKP@PMR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FKIP@Pulsecrawler?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@INCO@Moonbender?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DKGL@Wrathraven?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PPGN@Spineeater?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@KAKP@Blackash?5the?5Burning?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06PLDN@BASHTB?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FLBL@Shadowcrow?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@GMIP@Blightstone?5the?5Weak?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JMDI@Bilefroth?5the?5Pit?5Master?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OBOK@BFTP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@CEPB@Bloodskin?5Darkbow?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PDKI@Foulwing?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02OB@DB?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@JFPG@Shadowdrinker?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCNM@SHDR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@PIAB@Hazeshifter?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HCNK@Deathspit?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04HEPK@BFDS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@HAMG@Bloodgutter?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PJDO@BGBL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@KJCD@Deathshade?5Fleshmaul?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LPNP@DSFM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@MEDF@Warmaggot?5the?5Mad?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MNGJ@Glasskull?5the?5Jagged?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IDEF@Blightfire?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DOGO@BLF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CGJC@Nightwing?5the?5Cold?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MEMP@Gorestone?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@HNAH@Bronzefist?5Firestone?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@HHDN@Wrathfire?5the?5Doomed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04HPN@WFTD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IJFE@Firewound?5the?5Grim?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@IEFH@Baron?5Sludge?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03CLMH@BSM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@EOEA@Blighthorn?5Steelmace?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04BHO@BHSM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@MCHO@Chaoshowler?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OELM@Doomgrin?5the?5Rotting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HKNB@Madburner?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@MKAI@Bonesaw?5the?5Litch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GPAF@Breakspine?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OIDE@Devilskull?5Sharpbone?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@MABJ@Brokenstorm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HMHK@Stormbane?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09PHOF@Oozedrool?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@NKPB@Goldblight?5of?5the?5Flame?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BDH@Blackstorm?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EPEK@Plaguewrath?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BAIF@The?5Flayer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BDKD@Bluehorn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IICF@Warpfire?5Hellspawn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MHOF@Fangspeir?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@OBB@Festerskull?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@JNOM@Lionskull?5the?5Bent?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@OABD@Blacktongue?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CAAA@Viletouch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@INON@Viperflame?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GGMB@Fangskin?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JIIF@Witchfire?5the?5Unholy?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JDFP@Blackskull?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09NMNJ@Soulslash?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GJHH@Windspawn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@PNEB@Lord?5of?5the?5Pit?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PNLE@Rustweaver?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@GJGM@Howlingire?5the?5Shade?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09BFFD@Doomcloud?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OGMN@Bloodmoon?5Soulfire?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MOEP@Witchmoon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HKIB@Gorefeast?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OFLB@Graywar?5the?5Slayer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DAKO@Dreadjudge?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@OODD@Stareye?5the?5Witch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LMMA@Steelskull?5the?5Hunter?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@EMNF@Sir?5Gorash?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FLBK@The?5Vizier?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CLCG@Zamphir?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MAFH@Bloodlust?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NEOF@Webwidow?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@PHMK@Fleshdancer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09BJLB@Grimspike?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OEBD@Doomlock?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@OPMI@Invalid?5Monster?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@HOFI@Monsters?2Monsters?2?$CFs?4TRN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@GBOG@Levels?2L3Data?2Anvil?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@NMPO@Invalid?5monster?5?$CFd?5getting?5hit?5b@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DD@FGPH@Monster?5?$CFd?5?$CC?$CFs?$CC?5getting?5hit?5by?5m@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@LJIP@MonstStartKill?3?5Invalid?5monster?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CL@FDEE@MonstStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CM@ICJO@M2MStartKill?3?5Invalid?5monster?5?$CIa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@EJPI@M2MStartKill?3?5Invalid?5monster?5?$CIk@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@EFAN@M2MStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MT@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@CHPM@M_StartKill?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@JLGP@M_SyncStartKill?3?5Invalid?5monster@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@IBDL@M_StartFadein?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@PIKK@M_StartFadein?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@KGAD@M_StartFadeout?3?5Invalid?5monster?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CL@JIMC@M_StartFadeout?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@GFDF@M_StartHeal?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@ONMJ@M_StartHeal?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@GMM@M_ChangeLightOffset?3?5Invalid?5mon@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@JMIC@M_DoStand?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CG@IJKO@M_DoStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@HJBA@M_DoWalk?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@JJMM@M_DoWalk?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@KGGF@M_DoWalk2?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CG@KAFN@M_DoWalk2?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@DGCG@M_DoWalk3?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CG@FHKJ@M_DoWalk3?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@ODLB@M_TryM2MHit?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@BACF@M_TryM2MHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@HCPJ@M_TryH2HHit?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@MDJD@M_TryH2HHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@FMDJ@M_DoAttack?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@CFOD@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@COCK@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDat@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@IGLH@M_DoRAttack?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@GLGF@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@GAKM@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@PDAD@M_DoRSpAttack?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@OJEH@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@OCIO@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@IEAK@M_DoSAttack?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@GKEA@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@GBIJ@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@LCOO@M_DoFadein?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@ODA@M_DoFadeout?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@CGGK@M_DoHeal?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@MODE@M_DoTalk?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JLPK@SS?5Talk?5?$DN?5?$CFi?0?5Flags?5?$DN?5?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KLMH@M_Teleport?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@LNOF@M_DoGotHit?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@INE@M_DoGotHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@OA@M_UpdateLeader?3?5Invalid?5monster?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DCOL@gendata?2DiabVic2?4smk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NCIE@gendata?2DiabVic1?4smk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JCMO@gendata?2DiabVic3?4smk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@JJDA@gendata?2Diabend?4smk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BNCB@gendata?2loopdend?4smk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@FLDI@M_DoDeath?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CG@MEGD@M_DoDeath?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@BLEI@M_DoSpStand?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@LEAM@M_DoSpStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@KEPF@M_DoDelay?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CG@JEG@M_DoDelay?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@FKMK@M_DoStone?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@LBJG@M_WalkDir?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@FFLL@GroupUnity?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@LNLM@M_PathWalk?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@NPOI@MAI_Zombie?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@DJPB@MAI_SkelSd?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@OAOL@MAI_Path?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@JLFM@MAI_Snake?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@FFIA@MAI_Bat?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@KGNH@MAI_SkelBow?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@NKOK@MAI_Fat?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@JGAD@MAI_Sneak?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@FJNL@MAI_Fireman?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@GOIG@MAI_Fallen?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@IIJG@MAI_Cleaver?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@MFHM@MAI_Round?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@PDPB@MAI_Ranged?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@GOAH@MAI_Scav?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@JOMI@MAI_Garg?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@HJCM@MAI_RoundRanged?3?5Invalid?5monster@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@INOC@MAI_RR2?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@MIEG@MAI_Golum?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@NIAC@MAI_SkelKing?3?5Invalid?5monster?5?$CFd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@KHBL@MAI_Rhino?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@FK@MAI_Counselor?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@FJCE@MAI_Garbud?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@BAEO@MAI_Zhar?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@BDBE@MAI_SnotSpil?3?5Invalid?5monster?5?$CFd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@GFEE@MAI_Lazurus?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@DHCH@gendata?2fprst3?4smk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@IEHF@MAI_Lazhelp?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@HLJF@MAI_Lachdanan?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@DMCD@MAI_Warlord?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@PKLN@Illegal?5enemy?5monster?5?$CFd?5for?5mon@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@MDKJ@Illegal?5enemy?5player?5?$CFd?5for?5mons@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@KBEL@DirOK?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@MBEK@SyncMonsterAnim?3?5Invalid?5monster@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@PGAC@Total?5kills?5?3?5?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@JGJE@Hit?5Points?5?3?5?$CFi?9?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DOFD@Resists?5?3?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06LMLO@Magic?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05BLKB@Fire?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FFDP@Lightning?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CBB@Immune?5?3?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DLNG@No?5magic?5resistance?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@BEKG@Some?5Magic?5Resistances?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@JAMA@No?5resistances?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HGOK@Some?5Magic?5Immunities?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@OIFE@No?5Immunities?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@DGBE@MissToMonst?3?5Invalid?5missile?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@CKBO@MissToMonst?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@BCCD@TalktoMonster?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@OGLB@SpawnGolum?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@PBFC@CanTalkToMonst?3?5Invalid?5monster?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@FNNK@CheckMonsterHit?3?5Invalid?5monster@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @InitMonsterTRN@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitLevelMonsters
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddMonsterType@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetLevelMTypes
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitMonsterGFX@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ClearMVars@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitMonster@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ClrAllMonsters
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MonstPlace@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlaceMonster@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlaceUniqueMonst@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _PlaceQuestMonsters
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlaceGroup@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _LoadDiabMonsts
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitMonsters
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _PlaceUniques
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetMapMonsters@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeleteMonster@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddMonster@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NewMonsterAnim@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_Ranged@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_Talker@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_Enemy@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_GetDir@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_CheckEFlag@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartStand@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartDelay@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartSpStand@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartWalk@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartWalk2@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartWalk3@40
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartAttack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartRAttack@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartRSpAttack@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartSpAttack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartEat@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_ClearSquares@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_GetKnockback@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartHit@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DiabloDeath@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M2MStartHit@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MonstStartKill@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M2MStartKill@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartKill@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_SyncStartKill@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartFadein@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartFadeout@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_StartHeal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_ChangeLightOffset@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoStand@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoWalk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoWalk2@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoWalk3@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_TryM2MHit@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_TryH2HHit@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoAttack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoRAttack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoRSpAttack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoSAttack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoFadein@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoFadeout@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoHeal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoTalk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_Teleport@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoGotHit@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_UpdateLeader@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DoEnding
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _PrepDoEnding
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoDeath@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoSpStand@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoDelay@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DoStone@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_WalkDir@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @GroupUnity@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_CallWalk@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_PathWalk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_CallWalk2@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_DumbWalk@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_RoundWalk@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Zombie@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_SkelSd@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Path@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Snake@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Bat@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_SkelBow@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Fat@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Sneak@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Fireman@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Fallen@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Cleaver@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Round@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_GoatMc@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Ranged@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_GoatBow@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Succ@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_AcidUniq@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Scav@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Garg@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_RoundRanged@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Magma@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Storm@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Acid@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Diablo@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_RR2@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Mega@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Golum@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_SkelKing@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Rhino@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Counselor@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Garbud@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Zhar@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_SnotSpil@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Lazurus@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Lazhelp@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Lachdanan@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MAI_Warlord@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DeleteMonsterList
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ProcessMonsters
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FreeMonsters
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DirOK@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PosOkMissile@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckNoSolid@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LineClearF@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LineClear@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LineClearF1@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncMonsterAnim@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_FallenFear@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PrintMonstHistory@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _PrintUniqueHistory
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MissToMonst@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PosOkMonst@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PosOkMonst2@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PosOkMonst3@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @IsSkel@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @IsGoat@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @M_SpawnSkel@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ActivateSpawn@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SpawnSkeleton@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _PreSpawnSkeleton
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @TalktoMonster@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SpawnGolum@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CanTalkToMonst@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckMonsterHit@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @encode_enemy@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @decode_enemy@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BI@NKPB@Goldblight?5of?5the?5Flame?$AA@	; `string'
PUBLIC	??_C@_0L@BDH@Blackstorm?$AA@			; `string'
PUBLIC	??_C@_0M@EPEK@Plaguewrath?$AA@			; `string'
PUBLIC	??_C@_0L@BAIF@The?5Flayer?$AA@			; `string'
PUBLIC	??_C@_08BDKD@Bluehorn?$AA@			; `string'
PUBLIC	??_C@_0BD@IICF@Warpfire?5Hellspawn?$AA@		; `string'
PUBLIC	??_C@_09MHOF@Fangspeir?$AA@			; `string'
PUBLIC	??_C@_0M@OBB@Festerskull?$AA@			; `string'
PUBLIC	??_C@_0BD@JNOM@Lionskull?5the?5Bent?$AA@	; `string'
PUBLIC	??_C@_0M@OABD@Blacktongue?$AA@			; `string'
PUBLIC	??_C@_09CAAA@Viletouch?$AA@			; `string'
PUBLIC	??_C@_0L@INON@Viperflame?$AA@			; `string'
PUBLIC	??_C@_08GGMB@Fangskin?$AA@			; `string'
PUBLIC	??_C@_0BF@JIIF@Witchfire?5the?5Unholy?$AA@	; `string'
PUBLIC	??_C@_0L@JDFP@Blackskull?$AA@			; `string'
PUBLIC	??_C@_09NMNJ@Soulslash?$AA@			; `string'
PUBLIC	??_C@_09GJHH@Windspawn?$AA@			; `string'
PUBLIC	??_C@_0BA@PNEB@Lord?5of?5the?5Pit?$AA@		; `string'
PUBLIC	??_C@_0L@PNLE@Rustweaver?$AA@			; `string'
PUBLIC	??_C@_0BF@GJGM@Howlingire?5the?5Shade?$AA@	; `string'
PUBLIC	??_C@_09BFFD@Doomcloud?$AA@			; `string'
PUBLIC	??_C@_0BD@OGMN@Bloodmoon?5Soulfire?$AA@		; `string'
PUBLIC	??_C@_09MOEP@Witchmoon?$AA@			; `string'
PUBLIC	??_C@_09HKIB@Gorefeast?$AA@			; `string'
PUBLIC	??_C@_0BD@OFLB@Graywar?5the?5Slayer?$AA@	; `string'
PUBLIC	??_C@_0L@DAKO@Dreadjudge?$AA@			; `string'
PUBLIC	??_C@_0BC@OODD@Stareye?5the?5Witch?$AA@		; `string'
PUBLIC	??_C@_0BG@LMMA@Steelskull?5the?5Hunter?$AA@	; `string'
PUBLIC	??_C@_0L@EMNF@Sir?5Gorash?$AA@			; `string'
PUBLIC	??_C@_0L@FLBK@The?5Vizier?$AA@			; `string'
PUBLIC	??_C@_07CLCG@Zamphir?$AA@			; `string'
PUBLIC	??_C@_09MAFH@Bloodlust?$AA@			; `string'
PUBLIC	??_C@_08NEOF@Webwidow?$AA@			; `string'
PUBLIC	??_C@_0M@PHMK@Fleshdancer?$AA@			; `string'
PUBLIC	??_C@_09BJLB@Grimspike?$AA@			; `string'
PUBLIC	??_C@_08OEBD@Doomlock?$AA@			; `string'
PUBLIC	@MAI_Zombie@4
PUBLIC	@MAI_SkelSd@4
PUBLIC	@MAI_Snake@4
PUBLIC	@MAI_Bat@4
PUBLIC	@MAI_SkelBow@4
PUBLIC	@MAI_Fat@4
PUBLIC	@MAI_Sneak@4
PUBLIC	@MAI_Fireman@4
PUBLIC	@MAI_Fallen@4
PUBLIC	@MAI_Cleaver@4
PUBLIC	@MAI_GoatMc@4
PUBLIC	@MAI_GoatBow@4
PUBLIC	@MAI_Succ@4
PUBLIC	@MAI_AcidUniq@4
PUBLIC	@MAI_Scav@4
PUBLIC	@MAI_Garg@4
PUBLIC	@MAI_Magma@4
PUBLIC	@MAI_Storm@4
PUBLIC	@MAI_Acid@4
PUBLIC	@MAI_Diablo@4
PUBLIC	@MAI_Mega@4
PUBLIC	@MAI_Golum@4
PUBLIC	@MAI_SkelKing@4
PUBLIC	@MAI_Rhino@4
PUBLIC	@MAI_Counselor@4
PUBLIC	@MAI_Garbud@4
PUBLIC	@MAI_Zhar@4
PUBLIC	@MAI_SnotSpil@4
PUBLIC	@MAI_Lazurus@4
PUBLIC	@MAI_Lazhelp@4
PUBLIC	@MAI_Lachdanan@4
PUBLIC	@MAI_Warlord@4
PUBLIC	_plr2monst
PUBLIC	_counsmiss
PUBLIC	_monsterdata
PUBLIC	_MonstConvTbl
PUBLIC	_MonstAvailTbl
PUBLIC	_UniqMonst
PUBLIC	_MWVel
PUBLIC	_animletter
PUBLIC	_left
PUBLIC	_right
PUBLIC	_opposite
PUBLIC	_offset_x
PUBLIC	_offset_y
PUBLIC	_rnd5
PUBLIC	_rnd10
PUBLIC	_rnd20
PUBLIC	_rnd60
PUBLIC	_AiProc
PUBLIC	??_C@_0BN@IMIC@Monsters?2Zombie?2Zombie?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BP@IHKO@Monsters?2Zombie?2Zombie?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_06PEJJ@Zombie?$AA@			; `string'
PUBLIC	??_C@_0BM@OMHC@Monsters?2Zombie?2Bluered?4TRN?$AA@ ; `string'
PUBLIC	??_C@_05EMI@Ghoul?$AA@				; `string'
PUBLIC	??_C@_0BJ@PMIC@Monsters?2Zombie?2Grey?4TRN?$AA@	; `string'
PUBLIC	??_C@_0BA@CBFH@Rotting?5Carcass?$AA@		; `string'
PUBLIC	??_C@_0BL@NLEA@Monsters?2Zombie?2Yellow?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0M@IKLP@Black?5Death?$AA@			; `string'
PUBLIC	??_C@_0BO@OOMI@Monsters?2FalSpear?2Phall?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0CA@LICE@Monsters?2FalSpear?2Phall?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BO@MBIF@Monsters?2FalSpear?2FallenT?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@IHGK@Fallen?5One?$AA@			; `string'
PUBLIC	??_C@_0BL@NGAB@Monsters?2FalSpear?2Dark?4TRN?$AA@ ; `string'
PUBLIC	??_C@_06KIJL@Carver?$AA@			; `string'
PUBLIC	??_C@_09CFFL@Devil?5Kin?$AA@			; `string'
PUBLIC	??_C@_0BL@KPBN@Monsters?2FalSpear?2Blue?4TRN?$AA@ ; `string'
PUBLIC	??_C@_08HICJ@Dark?5One?$AA@			; `string'
PUBLIC	??_C@_0BN@KBEI@Monsters?2SkelAxe?2SklAx?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BP@IJNN@Monsters?2SkelAxe?2SklAx?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BL@LDMJ@Monsters?2SkelAxe?2White?4TRN?$AA@ ; `string'
PUBLIC	??_C@_08KFBC@Skeleton?$AA@			; `string'
PUBLIC	??_C@_0BL@PJBC@Monsters?2SkelAxe?2Skelt?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@FLJI@Corpse?5Axe?$AA@			; `string'
PUBLIC	??_C@_0N@OPIP@Burning?5Dead?$AA@		; `string'
PUBLIC	??_C@_0BL@HLKD@Monsters?2SkelAxe?2Black?4TRN?$AA@ ; `string'
PUBLIC	??_C@_06KKNE@Horror?$AA@			; `string'
PUBLIC	??_C@_0BN@DAFP@Monsters?2FalSword?2Fall?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BP@LKDH@Monsters?2FalSword?2Fall?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BO@KANN@Monsters?2FalSword?2FallenT?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0BL@JPEE@Monsters?2FalSword?2Dark?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0BL@OGFI@Monsters?2FalSword?2Blue?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BBLM@Monsters?2Scav?2Scav?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BL@FEJI@Monsters?2Scav?2Scav?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_09ODLB@Scavenger?$AA@			; `string'
PUBLIC	??_C@_0BJ@BABM@Monsters?2Scav?2ScavBr?4TRN?$AA@	; `string'
PUBLIC	??_C@_0N@GMAL@Plague?5Eater?$AA@		; `string'
PUBLIC	??_C@_0BJ@HCLD@Monsters?2Scav?2ScavBe?4TRN?$AA@	; `string'
PUBLIC	??_C@_0N@PNNC@Shadow?5Beast?$AA@		; `string'
PUBLIC	??_C@_0BI@HIBO@Monsters?2Scav?2ScavW?4TRN?$AA@	; `string'
PUBLIC	??_C@_0M@NJCA@Bone?5Gasher?$AA@			; `string'
PUBLIC	??_C@_0BN@FDDL@Monsters?2SkelBow?2SklBw?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BP@OGC@Monsters?2SkelBow?2SklBw?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BL@OCKB@Monsters?2SkelBow?2White?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0BL@KIHK@Monsters?2SkelBow?2Skelt?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@FKAB@Corpse?5Bow?$AA@			; `string'
PUBLIC	??_C@_0BL@CKML@Monsters?2SkelBow?2Black?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0BM@LPCM@Monsters?2SkelSd?2SklSr?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BO@JGHO@Monsters?2SkelSd?2SklSr?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BK@FEKE@Monsters?2SkelSd?2White?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0BB@OJGC@Skeleton?5Captain?$AA@		; `string'
PUBLIC	??_C@_0BK@BOHP@Monsters?2SkelSd?2Skelt?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0P@ONID@Corpse?5Captain?$AA@		; `string'
PUBLIC	??_C@_0BF@LNCI@Burning?5Dead?5Captain?$AA@	; `string'
PUBLIC	??_C@_0BK@JMMO@Monsters?2SkelSd?2Black?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0P@MKB@Horror?5Captain?$AA@		; `string'
PUBLIC	??_C@_0BN@EHND@Monsters?2TSneak?2TSneak?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BP@FIIK@Monsters?2TSneak?2Sneakl?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0P@KBCM@Invisible?5Lord?$AA@		; `string'
PUBLIC	??_C@_0BL@OIAO@Monsters?2Sneak?2Sneak?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BN@IEAE@Monsters?2Sneak?2Sneak?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_06OCEO@Hidden?$AA@			; `string'
PUBLIC	??_C@_0BL@FIHM@Monsters?2Sneak?2Sneakv2?4TRN?$AA@ ; `string'
PUBLIC	??_C@_07JKLP@Stalker?$AA@			; `string'
PUBLIC	??_C@_0BL@PIFJ@Monsters?2Sneak?2Sneakv3?4TRN?$AA@ ; `string'
PUBLIC	??_C@_06ELBO@Unseen?$AA@			; `string'
PUBLIC	??_C@_0BL@LIBD@Monsters?2Sneak?2Sneakv1?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0BA@LANI@Illusion?5Weaver?$AA@		; `string'
PUBLIC	??_C@_0BO@FGPM@Monsters?2GoatLord?2GoatL?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0CA@ECCN@Monsters?2GoatLord?2Goatl?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0M@BAIA@Lord?5Sayter?$AA@			; `string'
PUBLIC	??_C@_0BN@OGDO@Monsters?2GoatMace?2Goat?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BP@CPIM@Monsters?2GoatMace?2Goat?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0L@PPFJ@Flesh?5Clan?$AA@			; `string'
PUBLIC	??_C@_0BM@DGOA@Monsters?2GoatMace?2Beige?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@DDEJ@Stone?5Clan?$AA@			; `string'
PUBLIC	??_C@_0BK@IMBO@Monsters?2GoatMace?2Red?4TRN?$AA@ ; `string'
PUBLIC	??_C@_09NBOI@Fire?5Clan?$AA@			; `string'
PUBLIC	??_C@_0BL@CPGA@Monsters?2GoatMace?2Gray?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@JFLE@Night?5Clan?$AA@			; `string'
PUBLIC	??_C@_0BH@KIOP@Monsters?2Bat?2Bat?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JLKA@Monsters?2Bat?2Bat?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BF@FLIN@Monsters?2Bat?2red?4trn?$AA@	; `string'
PUBLIC	??_C@_05FJN@Fiend?$AA@				; `string'
PUBLIC	??_C@_05OMKA@Blink?$AA@				; `string'
PUBLIC	??_C@_0BG@BDJF@Monsters?2Bat?2grey?4trn?$AA@	; `string'
PUBLIC	??_C@_05MJLP@Gloom?$AA@				; `string'
PUBLIC	??_C@_0BI@NFPN@Monsters?2Bat?2orange?4trn?$AA@	; `string'
PUBLIC	??_C@_08NKDG@Familiar?$AA@			; `string'
PUBLIC	??_C@_0BN@KDEJ@Monsters?2GoatBow?2GoatB?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BP@DOBM@Monsters?2GoatBow?2GoatB?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BL@NIME@Monsters?2GoatBow?2Beige?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NLCC@Monsters?2GoatBow?2Red?4TRN?$AA@	; `string'
PUBLIC	??_C@_0BK@LDH@Monsters?2GoatBow?2Gray?4TRN?$AA@	; `string'
PUBLIC	??_C@_0BJ@CGEO@Monsters?2Acid?2Acid?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0L@NECC@Acid?5Beast?$AA@			; `string'
PUBLIC	??_C@_0BK@MMPI@Monsters?2Acid?2AcidBlk?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0P@NPHN@Poison?5Spitter?$AA@		; `string'
PUBLIC	??_C@_0BI@KIAF@Monsters?2Acid?2AcidB?4TRN?$AA@	; `string'
PUBLIC	??_C@_09GJHH@Pit?5Beast?$AA@			; `string'
PUBLIC	??_C@_0BI@KKFA@Monsters?2Acid?2AcidR?4TRN?$AA@	; `string'
PUBLIC	??_C@_08KCMP@Lava?5Maw?$AA@			; `string'
PUBLIC	??_C@_0BL@OAFB@Monsters?2SKing?2SKing?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BN@KOJK@Monsters?2SKing?2SKing?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0O@COOI@Skeleton?5King?$AA@		; `string'
PUBLIC	??_C@_0BJ@IFKI@Monsters?2FatC?2FatC?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BL@IGFL@Monsters?2FatC?2FatC?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0M@OGO@The?5Butcher?$AA@			; `string'
PUBLIC	??_C@_0BH@OEHI@Monsters?2Fat?2Fat?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_08FGOM@Overlord?$AA@			; `string'
PUBLIC	??_C@_0BG@KPHM@Monsters?2Fat?2Blue?4TRN?$AA@	; `string'
PUBLIC	??_C@_07BNOE@Mud?5Man?$AA@			; `string'
PUBLIC	??_C@_0BG@JOFI@Monsters?2Fat?2FatB?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@PHFJ@Toad?5Demon?$AA@			; `string'
PUBLIC	??_C@_0BG@BOMN@Monsters?2Fat?2FatF?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@ELFK@Flayed?5One?$AA@			; `string'
PUBLIC	??_C@_0BJ@OKOD@Monsters?2Worm?2Worm?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_04EEPE@Wyrm?$AA@				; `string'
PUBLIC	??_C@_09HKKP@Cave?5Slug?$AA@			; `string'
PUBLIC	??_C@_0L@KJLC@Devil?5Wyrm?$AA@			; `string'
PUBLIC	??_C@_08DOKM@Devourer?$AA@			; `string'
PUBLIC	??_C@_0BL@GJJN@Monsters?2Magma?2Magma?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BN@LADC@Monsters?2Magma?2Magma?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0M@BDIN@Magma?5Demon?$AA@			; `string'
PUBLIC	??_C@_0BK@PAJG@Monsters?2Magma?2Yellow?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0M@BAA@Blood?5Stone?$AA@			; `string'
PUBLIC	??_C@_0BI@HBBI@Monsters?2Magma?2Blue?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@IKKA@Hell?5Stone?$AA@			; `string'
PUBLIC	??_C@_0BJ@KPPL@Monsters?2Magma?2Wierd?4TRN?$AA@	; `string'
PUBLIC	??_C@_09JMEO@Lava?5Lord?$AA@			; `string'
PUBLIC	??_C@_0BL@DDCB@Monsters?2Rhino?2Rhino?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BN@INFH@Monsters?2Rhino?2Rhino?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0N@OLEB@Horned?5Demon?$AA@		; `string'
PUBLIC	??_C@_0BK@MPLB@Monsters?2Rhino?2Orange?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@EIAJ@Mud?5Runner?$AA@			; `string'
PUBLIC	??_C@_0BI@KPBF@Monsters?2Rhino?2Blue?4TRN?$AA@	; `string'
PUBLIC	??_C@_0O@HAFD@Frost?5Charger?$AA@		; `string'
PUBLIC	??_C@_0BK@MHDK@Monsters?2Rhino?2RhinoB?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0O@FPB@Obsidian?5Lord?$AA@		; `string'
PUBLIC	??_C@_0BO@PCKO@Monsters?2Demskel?2Demskl?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LDDE@Monsters?2Thin?2Thinv3?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@LMNI@Bone?5Demon?$AA@			; `string'
PUBLIC	??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_09JDGN@Red?5Death?$AA@			; `string'
PUBLIC	??_C@_0M@EOOB@Litch?5Demon?$AA@			; `string'
PUBLIC	??_C@_0O@HMDJ@Undead?5Balrog?$AA@		; `string'
PUBLIC	??_C@_0BN@JOPB@Monsters?2Fireman?2FireM?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0M@LACM@Incinerator?$AA@			; `string'
PUBLIC	??_C@_0L@LNJN@Flame?5Lord?$AA@			; `string'
PUBLIC	??_C@_09BBKL@Doom?5Fire?$AA@			; `string'
PUBLIC	??_C@_0M@DMNI@Hell?5Burner?$AA@			; `string'
PUBLIC	??_C@_09IKEH@Red?5Storm?$AA@			; `string'
PUBLIC	??_C@_0M@ELEK@Storm?5Rider?$AA@			; `string'
PUBLIC	??_C@_0BJ@BDBB@Monsters?2Thin?2Thinv2?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@MPDM@Storm?5Lord?$AA@			; `string'
PUBLIC	??_C@_0BJ@PDHO@Monsters?2Thin?2Thinv1?4TRN?$AA@	; `string'
PUBLIC	??_C@_09GKHB@Maelstorm?$AA@			; `string'
PUBLIC	??_C@_0BN@PDMB@Monsters?2BigFall?2Fallg?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BO@COGP@Monsters?2BigFall?2Bfal?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BA@FGGD@Devil?5Kin?5Brute?$AA@		; `string'
PUBLIC	??_C@_0BO@DCJK@Monsters?2Gargoyle?2Gargo?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0CA@OJJF@Monsters?2Gargoyle?2Gargo?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0N@CHBP@Winged?9Demon?$AA@		; `string'
PUBLIC	??_C@_0BL@GLPH@Monsters?2Gargoyle?2GarE?4TRN?$AA@ ; `string'
PUBLIC	??_C@_08HND@Gargoyle?$AA@			; `string'
PUBLIC	??_C@_0BN@KACC@Monsters?2Gargoyle?2GargBr?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@JKAG@Blood?5Claw?$AA@			; `string'
PUBLIC	??_C@_0BM@GEJG@Monsters?2Gargoyle?2GargB?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@CJIN@Death?5Wing?$AA@			; `string'
PUBLIC	??_C@_0BJ@OHJC@Monsters?2Mega?2Mega?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BL@EJPE@Monsters?2Mega?2Mega?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_06MHAA@Slayer?$AA@			; `string'
PUBLIC	??_C@_0BI@KHJI@Monsters?2Mega?2Guard?4TRN?$AA@	; `string'
PUBLIC	??_C@_08KEIB@Guardian?$AA@			; `string'
PUBLIC	??_C@_0BI@DEEB@Monsters?2Mega?2Vtexl?4TRN?$AA@	; `string'
PUBLIC	??_C@_0M@NBKI@Vortex?5Lord?$AA@			; `string'
PUBLIC	??_C@_0BH@BNN@Monsters?2Mega?2Balr?4TRN?$AA@	; `string'
PUBLIC	??_C@_06OEIG@Balrog?$AA@			; `string'
PUBLIC	??_C@_0BL@IHHM@Monsters?2Snake?2Snake?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BN@NHII@Monsters?2Snake?2Snake?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0L@PGLH@Cave?5Viper?$AA@			; `string'
PUBLIC	??_C@_0BJ@LCBA@Monsters?2Snake?2SnakR?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@GLJN@Fire?5Drake?$AA@			; `string'
PUBLIC	??_C@_0BJ@JEFP@Monsters?2Snake?2Snakg?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@CLBK@Gold?5Viper?$AA@			; `string'
PUBLIC	??_C@_0BJ@LEOP@Monsters?2Snake?2Snakb?4TRN?$AA@	; `string'
PUBLIC	??_C@_0M@FIHH@Azure?5Drake?$AA@			; `string'
PUBLIC	??_C@_0BL@JDBP@Monsters?2Black?2Black?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BN@KHJ@Monsters?2Black?2Black?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0N@PDGD@Black?5Knight?$AA@		; `string'
PUBLIC	??_C@_0BM@GOHA@Monsters?2Black?2BlkKntRT?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@FPBM@Doom?5Guard?$AA@			; `string'
PUBLIC	??_C@_0BM@DEHC@Monsters?2Black?2BlkKntBT?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0L@KLAH@Steel?5Lord?$AA@			; `string'
PUBLIC	??_C@_0BM@JCKI@Monsters?2Black?2BlkKntBe?4TRN?$AA@ ; `string'
PUBLIC	??_C@_0N@PCA@Blood?5Knight?$AA@			; `string'
PUBLIC	??_C@_0BL@CDKL@Monsters?2Unrav?2Unrav?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_09KOLF@Unraveler?$AA@			; `string'
PUBLIC	??_C@_0L@GDBP@Hollow?5One?$AA@			; `string'
PUBLIC	??_C@_0M@FDGH@Pain?5Master?$AA@			; `string'
PUBLIC	??_C@_0P@NDCP@Reality?5Weaver?$AA@		; `string'
PUBLIC	??_C@_0BJ@DPMO@Monsters?2Succ?2Scbs?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BL@HGFB@Monsters?2Succ?2Scbs?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_08FEBP@Succubus?$AA@			; `string'
PUBLIC	??_C@_0BI@GKHN@Monsters?2Succ?2Succb?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@FPIO@Snow?5Witch?$AA@			; `string'
PUBLIC	??_C@_0BJ@PIJO@Monsters?2Succ?2Succrw?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@BHM@Hell?5Spawn?$AA@			; `string'
PUBLIC	??_C@_0BJ@KCJM@Monsters?2Succ?2Succbw?4TRN?$AA@	; `string'
PUBLIC	??_C@_0M@GKNH@Soul?5Burner?$AA@			; `string'
PUBLIC	??_C@_0BJ@GCAL@Monsters?2Mage?2Mage?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BL@OMKE@Monsters?2Mage?2Mage?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_09HLJB@Counselor?$AA@			; `string'
PUBLIC	??_C@_0BJ@IEPO@Monsters?2Mage?2Cnselg?4TRN?$AA@	; `string'
PUBLIC	??_C@_0L@IHLC@Magistrate?$AA@			; `string'
PUBLIC	??_C@_0BK@IAEI@Monsters?2Mage?2Cnselgd?4TRN?$AA@ ; `string'
PUBLIC	??_C@_08EOGH@Cabalist?$AA@			; `string'
PUBLIC	??_C@_0BK@CCLI@Monsters?2Mage?2Cnselbk?4TRN?$AA@ ; `string'
PUBLIC	??_C@_08KFKH@Advocate?$AA@			; `string'
PUBLIC	??_C@_0BL@HABD@Monsters?2Golem?2Golem?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BM@PJFI@Monsters?2Golem?2Golm?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_05MIHD@Golem?$AA@				; `string'
PUBLIC	??_C@_0BN@LMBN@Monsters?2Diablo?2Diablo?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BP@FGDO@Monsters?2Diablo?2Diablo?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0O@FIFM@The?5Dark?5Lord?$AA@		; `string'
PUBLIC	??_C@_0BO@BEOI@Monsters?2DarkMage?2Dmage?$CFc?4CL2?$AA@ ; `string'
PUBLIC	??_C@_0BP@HJAJ@Monsters?2DarkMage?2Dmag?$CFc?$CFi?4WAV?$AA@ ; `string'
PUBLIC	??_C@_0BI@JDKB@The?5Arch?9Litch?5Malignus?$AA@	; `string'
PUBLIC	??_C@_0BB@NNOM@Gharbad?5the?5Weak?$AA@		; `string'
PUBLIC	??_C@_04EMDL@BSDB?$AA@				; `string'
PUBLIC	??_C@_05MCCE@GENRL?$AA@				; `string'
PUBLIC	??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@		; `string'
PUBLIC	??_C@_07MFB@GENERAL?$AA@			; `string'
PUBLIC	??_C@_09MNJA@Snotspill?$AA@			; `string'
PUBLIC	??_C@_03LJKM@BNG?$AA@				; `string'
PUBLIC	??_C@_0BE@EMLM@Arch?9Bishop?5Lazarus?$AA@	; `string'
PUBLIC	??_C@_07FILF@Red?5Vex?$AA@			; `string'
PUBLIC	??_C@_04NHCL@REDV?$AA@				; `string'
PUBLIC	??_C@_09NNFD@BlackJade?$AA@			; `string'
PUBLIC	??_C@_05HMFP@BLKJD?$AA@				; `string'
PUBLIC	??_C@_09GCKJ@Lachdanan?$AA@			; `string'
PUBLIC	??_C@_04CAGH@BHKA?$AA@				; `string'
PUBLIC	??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@		; `string'
PUBLIC	??_C@_0BB@DLIH@Bonehead?5Keenaxe?$AA@		; `string'
PUBLIC	??_C@_0BG@CLDJ@Bladeskin?5the?5Slasher?$AA@	; `string'
PUBLIC	??_C@_04CFHF@BSTS?$AA@				; `string'
PUBLIC	??_C@_07NGEG@Soulpus?$AA@			; `string'
PUBLIC	??_C@_0BE@BDNK@Pukerat?5the?5Unclean?$AA@	; `string'
PUBLIC	??_C@_03DCBN@PTU?$AA@				; `string'
PUBLIC	??_C@_0L@BJO@Boneripper?$AA@			; `string'
PUBLIC	??_C@_02NOGO@BR?$AA@				; `string'
PUBLIC	??_C@_0BE@FPNL@Rotfeast?5the?5Hungry?$AA@	; `string'
PUBLIC	??_C@_03PEDI@ETH?$AA@				; `string'
PUBLIC	??_C@_0BD@GBKJ@Gutshank?5the?5Quick?$AA@	; `string'
PUBLIC	??_C@_03HEK@GTQ?$AA@				; `string'
PUBLIC	??_C@_0BG@IPBC@Brokenhead?5Bangshield?$AA@	; `string'
PUBLIC	??_C@_04HPMH@BHBS?$AA@				; `string'
PUBLIC	??_C@_05DEJF@Bongo?$AA@				; `string'
PUBLIC	??_C@_0L@EMBE@Rotcarnage?$AA@			; `string'
PUBLIC	??_C@_04NLMC@RCRN?$AA@				; `string'
PUBLIC	??_C@_0L@CBPB@Shadowbite?$AA@			; `string'
PUBLIC	??_C@_04FKFB@SHBT?$AA@				; `string'
PUBLIC	??_C@_07FKDP@Deadeye?$AA@			; `string'
PUBLIC	??_C@_02FFAE@DE?$AA@				; `string'
PUBLIC	??_C@_0BA@GMMP@Madeye?5the?5Dead?$AA@		; `string'
PUBLIC	??_C@_03JKGJ@MTD?$AA@				; `string'
PUBLIC	??_C@_0P@MKEC@El?5Chupacabras?$AA@		; `string'
PUBLIC	??_C@_09CNLO@Skullfire?$AA@			; `string'
PUBLIC	??_C@_04JLC@SKFR?$AA@				; `string'
PUBLIC	??_C@_09MLHL@Warpskull?$AA@			; `string'
PUBLIC	??_C@_04KCIG@TSPO?$AA@				; `string'
PUBLIC	??_C@_0L@EGAH@Goretongue?$AA@			; `string'
PUBLIC	??_C@_03KOKP@PMR?$AA@				; `string'
PUBLIC	??_C@_0N@FKIP@Pulsecrawler?$AA@			; `string'
PUBLIC	??_C@_0L@INCO@Moonbender?$AA@			; `string'
PUBLIC	??_C@_0L@DKGL@Wrathraven?$AA@			; `string'
PUBLIC	??_C@_0L@PPGN@Spineeater?$AA@			; `string'
PUBLIC	??_C@_0BF@KAKP@Blackash?5the?5Burning?$AA@	; `string'
PUBLIC	??_C@_06PLDN@BASHTB?$AA@			; `string'
PUBLIC	??_C@_0L@FLBL@Shadowcrow?$AA@			; `string'
PUBLIC	??_C@_0BF@GMIP@Blightstone?5the?5Weak?$AA@	; `string'
PUBLIC	??_C@_0BJ@JMDI@Bilefroth?5the?5Pit?5Master?$AA@	; `string'
PUBLIC	??_C@_04OBOK@BFTP?$AA@				; `string'
PUBLIC	??_C@_0BC@CEPB@Bloodskin?5Darkbow?$AA@		; `string'
PUBLIC	??_C@_08PDKI@Foulwing?$AA@			; `string'
PUBLIC	??_C@_02OB@DB?$AA@				; `string'
PUBLIC	??_C@_0O@JFPG@Shadowdrinker?$AA@		; `string'
PUBLIC	??_C@_04NCNM@SHDR?$AA@				; `string'
PUBLIC	??_C@_0M@PIAB@Hazeshifter?$AA@			; `string'
PUBLIC	??_C@_09HCNK@Deathspit?$AA@			; `string'
PUBLIC	??_C@_04HEPK@BFDS?$AA@				; `string'
PUBLIC	??_C@_0M@HAMG@Bloodgutter?$AA@			; `string'
PUBLIC	??_C@_04PJDO@BGBL?$AA@				; `string'
PUBLIC	??_C@_0BF@KJCD@Deathshade?5Fleshmaul?$AA@	; `string'
PUBLIC	??_C@_04LPNP@DSFM?$AA@				; `string'
PUBLIC	??_C@_0BC@MEDF@Warmaggot?5the?5Mad?$AA@		; `string'
PUBLIC	??_C@_0BF@MNGJ@Glasskull?5the?5Jagged?$AA@	; `string'
PUBLIC	??_C@_0L@IDEF@Blightfire?$AA@			; `string'
PUBLIC	??_C@_03DOGO@BLF?$AA@				; `string'
PUBLIC	??_C@_0BD@CGJC@Nightwing?5the?5Cold?$AA@	; `string'
PUBLIC	??_C@_09MEMP@Gorestone?$AA@			; `string'
PUBLIC	??_C@_0BF@HNAH@Bronzefist?5Firestone?$AA@	; `string'
PUBLIC	??_C@_0BF@HHDN@Wrathfire?5the?5Doomed?$AA@	; `string'
PUBLIC	??_C@_04HPN@WFTD?$AA@				; `string'
PUBLIC	??_C@_0BD@IJFE@Firewound?5the?5Grim?$AA@	; `string'
PUBLIC	??_C@_0N@IEFH@Baron?5Sludge?$AA@		; `string'
PUBLIC	??_C@_03CLMH@BSM?$AA@				; `string'
PUBLIC	??_C@_0BF@EOEA@Blighthorn?5Steelmace?$AA@	; `string'
PUBLIC	??_C@_04BHO@BHSM?$AA@				; `string'
PUBLIC	??_C@_0M@MCHO@Chaoshowler?$AA@			; `string'
PUBLIC	??_C@_0BF@OELM@Doomgrin?5the?5Rotting?$AA@	; `string'
PUBLIC	??_C@_09HKNB@Madburner?$AA@			; `string'
PUBLIC	??_C@_0BC@MKAI@Bonesaw?5the?5Litch?$AA@		; `string'
PUBLIC	??_C@_0L@GPAF@Breakspine?$AA@			; `string'
PUBLIC	??_C@_0BF@OIDE@Devilskull?5Sharpbone?$AA@	; `string'
PUBLIC	??_C@_0M@MABJ@Brokenstorm?$AA@			; `string'
PUBLIC	??_C@_09HMHK@Stormbane?$AA@			; `string'
PUBLIC	??_C@_09PHOF@Oozedrool?$AA@			; `string'
_DATA	SEGMENT
COMM	_sgbSaveSoundOn:DWORD
COMM	_MissileFileFlag:DWORD
COMM	_monstkills:DWORD:0c8H
COMM	_monstactive:DWORD:0c8H
COMM	_nummonsters:DWORD
COMM	_monster:BYTE:0b220H
COMM	_totalmonsters:DWORD
COMM	_Monsters:BYTE:01480H
COMM	_monstimgtot:DWORD
COMM	_uniquetrans:DWORD
COMM	_nummtypes:DWORD
_DATA	ENDS
CONST	SEGMENT
_plr2monst DB	00H
	DB	05H
	DB	03H
	DB	07H
	DB	01H
	DB	04H
	DB	06H
	DB	00H
	DB	02H
	ORG $+3
_counsmiss DB	01H
	DB	034H
	DB	07H
	DB	06H
CONST	ENDS
;	COMDAT ??_C@_0BN@IMIC@Monsters?2Zombie?2Zombie?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@IMIC@Monsters?2Zombie?2Zombie?$CFc?4CL2?$AA@ DB 'Monsters\Zombi'
	DB	'e\Zombie%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@IHKO@Monsters?2Zombie?2Zombie?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BP@IHKO@Monsters?2Zombie?2Zombie?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\'
	DB	'Zombie\Zombie%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06PEJJ@Zombie?$AA@
_DATA	SEGMENT
??_C@_06PEJJ@Zombie?$AA@ DB 'Zombie', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@OMHC@Monsters?2Zombie?2Bluered?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BM@OMHC@Monsters?2Zombie?2Bluered?4TRN?$AA@ DB 'Monsters\Zombie\Bl'
	DB	'uered.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_05EMI@Ghoul?$AA@
_DATA	SEGMENT
??_C@_05EMI@Ghoul?$AA@ DB 'Ghoul', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@PMIC@Monsters?2Zombie?2Grey?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@PMIC@Monsters?2Zombie?2Grey?4TRN?$AA@ DB 'Monsters\Zombie\Grey.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CBFH@Rotting?5Carcass?$AA@
_DATA	SEGMENT
??_C@_0BA@CBFH@Rotting?5Carcass?$AA@ DB 'Rotting Carcass', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@NLEA@Monsters?2Zombie?2Yellow?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@NLEA@Monsters?2Zombie?2Yellow?4TRN?$AA@ DB 'Monsters\Zombie\Yel'
	DB	'low.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@IKLP@Black?5Death?$AA@
_DATA	SEGMENT
??_C@_0M@IKLP@Black?5Death?$AA@ DB 'Black Death', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@OOMI@Monsters?2FalSpear?2Phall?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BO@OOMI@Monsters?2FalSpear?2Phall?$CFc?4CL2?$AA@ DB 'Monsters\FalS'
	DB	'pear\Phall%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CA@LICE@Monsters?2FalSpear?2Phall?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0CA@LICE@Monsters?2FalSpear?2Phall?$CFc?$CFi?4WAV?$AA@ DB 'Monsters'
	DB	'\FalSpear\Phall%c%i.WAV', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@MBIF@Monsters?2FalSpear?2FallenT?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BO@MBIF@Monsters?2FalSpear?2FallenT?4TRN?$AA@ DB 'Monsters\FalSpea'
	DB	'r\FallenT.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@IHGK@Fallen?5One?$AA@
_DATA	SEGMENT
??_C@_0L@IHGK@Fallen?5One?$AA@ DB 'Fallen One', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@NGAB@Monsters?2FalSpear?2Dark?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@NGAB@Monsters?2FalSpear?2Dark?4TRN?$AA@ DB 'Monsters\FalSpear\D'
	DB	'ark.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_06KIJL@Carver?$AA@
_DATA	SEGMENT
??_C@_06KIJL@Carver?$AA@ DB 'Carver', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CFFL@Devil?5Kin?$AA@
_DATA	SEGMENT
??_C@_09CFFL@Devil?5Kin?$AA@ DB 'Devil Kin', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@KPBN@Monsters?2FalSpear?2Blue?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@KPBN@Monsters?2FalSpear?2Blue?4TRN?$AA@ DB 'Monsters\FalSpear\B'
	DB	'lue.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08HICJ@Dark?5One?$AA@
_DATA	SEGMENT
??_C@_08HICJ@Dark?5One?$AA@ DB 'Dark One', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KBEI@Monsters?2SkelAxe?2SklAx?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@KBEI@Monsters?2SkelAxe?2SklAx?$CFc?4CL2?$AA@ DB 'Monsters\SkelA'
	DB	'xe\SklAx%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@IJNN@Monsters?2SkelAxe?2SklAx?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BP@IJNN@Monsters?2SkelAxe?2SklAx?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\'
	DB	'SkelAxe\SklAx%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@LDMJ@Monsters?2SkelAxe?2White?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@LDMJ@Monsters?2SkelAxe?2White?4TRN?$AA@ DB 'Monsters\SkelAxe\Wh'
	DB	'ite.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KFBC@Skeleton?$AA@
_DATA	SEGMENT
??_C@_08KFBC@Skeleton?$AA@ DB 'Skeleton', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PJBC@Monsters?2SkelAxe?2Skelt?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@PJBC@Monsters?2SkelAxe?2Skelt?4TRN?$AA@ DB 'Monsters\SkelAxe\Sk'
	DB	'elt.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FLJI@Corpse?5Axe?$AA@
_DATA	SEGMENT
??_C@_0L@FLJI@Corpse?5Axe?$AA@ DB 'Corpse Axe', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@OPIP@Burning?5Dead?$AA@
_DATA	SEGMENT
??_C@_0N@OPIP@Burning?5Dead?$AA@ DB 'Burning Dead', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HLKD@Monsters?2SkelAxe?2Black?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@HLKD@Monsters?2SkelAxe?2Black?4TRN?$AA@ DB 'Monsters\SkelAxe\Bl'
	DB	'ack.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_06KKNE@Horror?$AA@
_DATA	SEGMENT
??_C@_06KKNE@Horror?$AA@ DB 'Horror', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@DAFP@Monsters?2FalSword?2Fall?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@DAFP@Monsters?2FalSword?2Fall?$CFc?4CL2?$AA@ DB 'Monsters\FalSw'
	DB	'ord\Fall%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@LKDH@Monsters?2FalSword?2Fall?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BP@LKDH@Monsters?2FalSword?2Fall?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\'
	DB	'FalSword\Fall%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@KANN@Monsters?2FalSword?2FallenT?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BO@KANN@Monsters?2FalSword?2FallenT?4TRN?$AA@ DB 'Monsters\FalSwor'
	DB	'd\FallenT.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@JPEE@Monsters?2FalSword?2Dark?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@JPEE@Monsters?2FalSword?2Dark?4TRN?$AA@ DB 'Monsters\FalSword\D'
	DB	'ark.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OGFI@Monsters?2FalSword?2Blue?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@OGFI@Monsters?2FalSword?2Blue?4TRN?$AA@ DB 'Monsters\FalSword\B'
	DB	'lue.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BBLM@Monsters?2Scav?2Scav?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BJ@BBLM@Monsters?2Scav?2Scav?$CFc?4CL2?$AA@ DB 'Monsters\Scav\Scav'
	DB	'%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@FEJI@Monsters?2Scav?2Scav?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BL@FEJI@Monsters?2Scav?2Scav?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Scav'
	DB	'\Scav%c%i.WAV', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09ODLB@Scavenger?$AA@
_DATA	SEGMENT
??_C@_09ODLB@Scavenger?$AA@ DB 'Scavenger', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BABM@Monsters?2Scav?2ScavBr?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@BABM@Monsters?2Scav?2ScavBr?4TRN?$AA@ DB 'Monsters\Scav\ScavBr.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@GMAL@Plague?5Eater?$AA@
_DATA	SEGMENT
??_C@_0N@GMAL@Plague?5Eater?$AA@ DB 'Plague Eater', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@HCLD@Monsters?2Scav?2ScavBe?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@HCLD@Monsters?2Scav?2ScavBe?4TRN?$AA@ DB 'Monsters\Scav\ScavBe.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@PNNC@Shadow?5Beast?$AA@
_DATA	SEGMENT
??_C@_0N@PNNC@Shadow?5Beast?$AA@ DB 'Shadow Beast', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HIBO@Monsters?2Scav?2ScavW?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BI@HIBO@Monsters?2Scav?2ScavW?4TRN?$AA@ DB 'Monsters\Scav\ScavW.TR'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@NJCA@Bone?5Gasher?$AA@
_DATA	SEGMENT
??_C@_0M@NJCA@Bone?5Gasher?$AA@ DB 'Bone Gasher', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@FDDL@Monsters?2SkelBow?2SklBw?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@FDDL@Monsters?2SkelBow?2SklBw?$CFc?4CL2?$AA@ DB 'Monsters\SkelB'
	DB	'ow\SklBw%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@OGC@Monsters?2SkelBow?2SklBw?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BP@OGC@Monsters?2SkelBow?2SklBw?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\S'
	DB	'kelBow\SklBw%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OCKB@Monsters?2SkelBow?2White?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@OCKB@Monsters?2SkelBow?2White?4TRN?$AA@ DB 'Monsters\SkelBow\Wh'
	DB	'ite.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@KIHK@Monsters?2SkelBow?2Skelt?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@KIHK@Monsters?2SkelBow?2Skelt?4TRN?$AA@ DB 'Monsters\SkelBow\Sk'
	DB	'elt.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FKAB@Corpse?5Bow?$AA@
_DATA	SEGMENT
??_C@_0L@FKAB@Corpse?5Bow?$AA@ DB 'Corpse Bow', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CKML@Monsters?2SkelBow?2Black?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@CKML@Monsters?2SkelBow?2Black?4TRN?$AA@ DB 'Monsters\SkelBow\Bl'
	DB	'ack.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@LPCM@Monsters?2SkelSd?2SklSr?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BM@LPCM@Monsters?2SkelSd?2SklSr?$CFc?4CL2?$AA@ DB 'Monsters\SkelSd'
	DB	'\SklSr%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@JGHO@Monsters?2SkelSd?2SklSr?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BO@JGHO@Monsters?2SkelSd?2SklSr?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\S'
	DB	'kelSd\SklSr%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@FEKE@Monsters?2SkelSd?2White?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@FEKE@Monsters?2SkelSd?2White?4TRN?$AA@ DB 'Monsters\SkelSd\Whit'
	DB	'e.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OJGC@Skeleton?5Captain?$AA@
_DATA	SEGMENT
??_C@_0BB@OJGC@Skeleton?5Captain?$AA@ DB 'Skeleton Captain', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@BOHP@Monsters?2SkelSd?2Skelt?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@BOHP@Monsters?2SkelSd?2Skelt?4TRN?$AA@ DB 'Monsters\SkelSd\Skel'
	DB	't.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@ONID@Corpse?5Captain?$AA@
_DATA	SEGMENT
??_C@_0P@ONID@Corpse?5Captain?$AA@ DB 'Corpse Captain', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@LNCI@Burning?5Dead?5Captain?$AA@
_DATA	SEGMENT
??_C@_0BF@LNCI@Burning?5Dead?5Captain?$AA@ DB 'Burning Dead Captain', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@JMMO@Monsters?2SkelSd?2Black?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@JMMO@Monsters?2SkelSd?2Black?4TRN?$AA@ DB 'Monsters\SkelSd\Blac'
	DB	'k.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@MKB@Horror?5Captain?$AA@
_DATA	SEGMENT
??_C@_0P@MKB@Horror?5Captain?$AA@ DB 'Horror Captain', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@EHND@Monsters?2TSneak?2TSneak?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@EHND@Monsters?2TSneak?2TSneak?$CFc?4CL2?$AA@ DB 'Monsters\TSnea'
	DB	'k\TSneak%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@FIIK@Monsters?2TSneak?2Sneakl?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BP@FIIK@Monsters?2TSneak?2Sneakl?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\'
	DB	'TSneak\Sneakl%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@KBCM@Invisible?5Lord?$AA@
_DATA	SEGMENT
??_C@_0P@KBCM@Invisible?5Lord?$AA@ DB 'Invisible Lord', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OIAO@Monsters?2Sneak?2Sneak?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BL@OIAO@Monsters?2Sneak?2Sneak?$CFc?4CL2?$AA@ DB 'Monsters\Sneak\S'
	DB	'neak%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@IEAE@Monsters?2Sneak?2Sneak?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BN@IEAE@Monsters?2Sneak?2Sneak?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Sn'
	DB	'eak\Sneak%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06OCEO@Hidden?$AA@
_DATA	SEGMENT
??_C@_06OCEO@Hidden?$AA@ DB 'Hidden', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@FIHM@Monsters?2Sneak?2Sneakv2?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@FIHM@Monsters?2Sneak?2Sneakv2?4TRN?$AA@ DB 'Monsters\Sneak\Snea'
	DB	'kv2.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_07JKLP@Stalker?$AA@
_DATA	SEGMENT
??_C@_07JKLP@Stalker?$AA@ DB 'Stalker', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@PIFJ@Monsters?2Sneak?2Sneakv3?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@PIFJ@Monsters?2Sneak?2Sneakv3?4TRN?$AA@ DB 'Monsters\Sneak\Snea'
	DB	'kv3.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_06ELBO@Unseen?$AA@
_DATA	SEGMENT
??_C@_06ELBO@Unseen?$AA@ DB 'Unseen', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@LIBD@Monsters?2Sneak?2Sneakv1?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@LIBD@Monsters?2Sneak?2Sneakv1?4TRN?$AA@ DB 'Monsters\Sneak\Snea'
	DB	'kv1.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LANI@Illusion?5Weaver?$AA@
_DATA	SEGMENT
??_C@_0BA@LANI@Illusion?5Weaver?$AA@ DB 'Illusion Weaver', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@FGPM@Monsters?2GoatLord?2GoatL?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BO@FGPM@Monsters?2GoatLord?2GoatL?$CFc?4CL2?$AA@ DB 'Monsters\Goat'
	DB	'Lord\GoatL%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CA@ECCN@Monsters?2GoatLord?2Goatl?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0CA@ECCN@Monsters?2GoatLord?2Goatl?$CFc?$CFi?4WAV?$AA@ DB 'Monsters'
	DB	'\GoatLord\Goatl%c%i.WAV', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@BAIA@Lord?5Sayter?$AA@
_DATA	SEGMENT
??_C@_0M@BAIA@Lord?5Sayter?$AA@ DB 'Lord Sayter', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@OGDO@Monsters?2GoatMace?2Goat?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@OGDO@Monsters?2GoatMace?2Goat?$CFc?4CL2?$AA@ DB 'Monsters\GoatM'
	DB	'ace\Goat%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@CPIM@Monsters?2GoatMace?2Goat?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BP@CPIM@Monsters?2GoatMace?2Goat?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\'
	DB	'GoatMace\Goat%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@PPFJ@Flesh?5Clan?$AA@
_DATA	SEGMENT
??_C@_0L@PPFJ@Flesh?5Clan?$AA@ DB 'Flesh Clan', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@DGOA@Monsters?2GoatMace?2Beige?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BM@DGOA@Monsters?2GoatMace?2Beige?4TRN?$AA@ DB 'Monsters\GoatMace\'
	DB	'Beige.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DDEJ@Stone?5Clan?$AA@
_DATA	SEGMENT
??_C@_0L@DDEJ@Stone?5Clan?$AA@ DB 'Stone Clan', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@IMBO@Monsters?2GoatMace?2Red?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@IMBO@Monsters?2GoatMace?2Red?4TRN?$AA@ DB 'Monsters\GoatMace\Re'
	DB	'd.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_09NBOI@Fire?5Clan?$AA@
_DATA	SEGMENT
??_C@_09NBOI@Fire?5Clan?$AA@ DB 'Fire Clan', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CPGA@Monsters?2GoatMace?2Gray?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@CPGA@Monsters?2GoatMace?2Gray?4TRN?$AA@ DB 'Monsters\GoatMace\G'
	DB	'ray.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@JFLE@Night?5Clan?$AA@
_DATA	SEGMENT
??_C@_0L@JFLE@Night?5Clan?$AA@ DB 'Night Clan', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@KIOP@Monsters?2Bat?2Bat?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BH@KIOP@Monsters?2Bat?2Bat?$CFc?4CL2?$AA@ DB 'Monsters\Bat\Bat%c.C'
	DB	'L2', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JLKA@Monsters?2Bat?2Bat?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BJ@JLKA@Monsters?2Bat?2Bat?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Bat\Ba'
	DB	't%c%i.WAV', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@FLIN@Monsters?2Bat?2red?4trn?$AA@
_DATA	SEGMENT
??_C@_0BF@FLIN@Monsters?2Bat?2red?4trn?$AA@ DB 'Monsters\Bat\red.trn', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FJN@Fiend?$AA@
_DATA	SEGMENT
??_C@_05FJN@Fiend?$AA@ DB 'Fiend', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05OMKA@Blink?$AA@
_DATA	SEGMENT
??_C@_05OMKA@Blink?$AA@ DB 'Blink', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BDJF@Monsters?2Bat?2grey?4trn?$AA@
_DATA	SEGMENT
??_C@_0BG@BDJF@Monsters?2Bat?2grey?4trn?$AA@ DB 'Monsters\Bat\grey.trn', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MJLP@Gloom?$AA@
_DATA	SEGMENT
??_C@_05MJLP@Gloom?$AA@ DB 'Gloom', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@NFPN@Monsters?2Bat?2orange?4trn?$AA@
_DATA	SEGMENT
??_C@_0BI@NFPN@Monsters?2Bat?2orange?4trn?$AA@ DB 'Monsters\Bat\orange.tr'
	DB	'n', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_08NKDG@Familiar?$AA@
_DATA	SEGMENT
??_C@_08NKDG@Familiar?$AA@ DB 'Familiar', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KDEJ@Monsters?2GoatBow?2GoatB?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@KDEJ@Monsters?2GoatBow?2GoatB?$CFc?4CL2?$AA@ DB 'Monsters\GoatB'
	DB	'ow\GoatB%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@DOBM@Monsters?2GoatBow?2GoatB?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BP@DOBM@Monsters?2GoatBow?2GoatB?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\'
	DB	'GoatBow\GoatB%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@NIME@Monsters?2GoatBow?2Beige?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@NIME@Monsters?2GoatBow?2Beige?4TRN?$AA@ DB 'Monsters\GoatBow\Be'
	DB	'ige.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@NLCC@Monsters?2GoatBow?2Red?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@NLCC@Monsters?2GoatBow?2Red?4TRN?$AA@ DB 'Monsters\GoatBow\Red.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@LDH@Monsters?2GoatBow?2Gray?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@LDH@Monsters?2GoatBow?2Gray?4TRN?$AA@ DB 'Monsters\GoatBow\Gray'
	DB	'.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CGEO@Monsters?2Acid?2Acid?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BJ@CGEO@Monsters?2Acid?2Acid?$CFc?4CL2?$AA@ DB 'Monsters\Acid\Acid'
	DB	'%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Acid'
	DB	'\Acid%c%i.WAV', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@NECC@Acid?5Beast?$AA@
_DATA	SEGMENT
??_C@_0L@NECC@Acid?5Beast?$AA@ DB 'Acid Beast', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MMPI@Monsters?2Acid?2AcidBlk?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@MMPI@Monsters?2Acid?2AcidBlk?4TRN?$AA@ DB 'Monsters\Acid\AcidBl'
	DB	'k.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@NPHN@Poison?5Spitter?$AA@
_DATA	SEGMENT
??_C@_0P@NPHN@Poison?5Spitter?$AA@ DB 'Poison Spitter', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KIAF@Monsters?2Acid?2AcidB?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BI@KIAF@Monsters?2Acid?2AcidB?4TRN?$AA@ DB 'Monsters\Acid\AcidB.TR'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GJHH@Pit?5Beast?$AA@
_DATA	SEGMENT
??_C@_09GJHH@Pit?5Beast?$AA@ DB 'Pit Beast', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KKFA@Monsters?2Acid?2AcidR?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BI@KKFA@Monsters?2Acid?2AcidR?4TRN?$AA@ DB 'Monsters\Acid\AcidR.TR'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KCMP@Lava?5Maw?$AA@
_DATA	SEGMENT
??_C@_08KCMP@Lava?5Maw?$AA@ DB 'Lava Maw', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OAFB@Monsters?2SKing?2SKing?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BL@OAFB@Monsters?2SKing?2SKing?$CFc?4CL2?$AA@ DB 'Monsters\SKing\S'
	DB	'King%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KOJK@Monsters?2SKing?2SKing?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BN@KOJK@Monsters?2SKing?2SKing?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\SK'
	DB	'ing\SKing%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@COOI@Skeleton?5King?$AA@
_DATA	SEGMENT
??_C@_0O@COOI@Skeleton?5King?$AA@ DB 'Skeleton King', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IFKI@Monsters?2FatC?2FatC?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BJ@IFKI@Monsters?2FatC?2FatC?$CFc?4CL2?$AA@ DB 'Monsters\FatC\FatC'
	DB	'%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@IGFL@Monsters?2FatC?2FatC?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BL@IGFL@Monsters?2FatC?2FatC?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\FatC'
	DB	'\FatC%c%i.WAV', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@OGO@The?5Butcher?$AA@
_DATA	SEGMENT
??_C@_0M@OGO@The?5Butcher?$AA@ DB 'The Butcher', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@OEHI@Monsters?2Fat?2Fat?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BH@OEHI@Monsters?2Fat?2Fat?$CFc?4CL2?$AA@ DB 'Monsters\Fat\Fat%c.C'
	DB	'L2', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Fat\Fa'
	DB	't%c%i.WAV', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08FGOM@Overlord?$AA@
_DATA	SEGMENT
??_C@_08FGOM@Overlord?$AA@ DB 'Overlord', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@KPHM@Monsters?2Fat?2Blue?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BG@KPHM@Monsters?2Fat?2Blue?4TRN?$AA@ DB 'Monsters\Fat\Blue.TRN', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_07BNOE@Mud?5Man?$AA@
_DATA	SEGMENT
??_C@_07BNOE@Mud?5Man?$AA@ DB 'Mud Man', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@JOFI@Monsters?2Fat?2FatB?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BG@JOFI@Monsters?2Fat?2FatB?4TRN?$AA@ DB 'Monsters\Fat\FatB.TRN', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@PHFJ@Toad?5Demon?$AA@
_DATA	SEGMENT
??_C@_0L@PHFJ@Toad?5Demon?$AA@ DB 'Toad Demon', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BOMN@Monsters?2Fat?2FatF?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BG@BOMN@Monsters?2Fat?2FatF?4TRN?$AA@ DB 'Monsters\Fat\FatF.TRN', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@ELFK@Flayed?5One?$AA@
_DATA	SEGMENT
??_C@_0L@ELFK@Flayed?5One?$AA@ DB 'Flayed One', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@OKOD@Monsters?2Worm?2Worm?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BJ@OKOD@Monsters?2Worm?2Worm?$CFc?4CL2?$AA@ DB 'Monsters\Worm\Worm'
	DB	'%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EEPE@Wyrm?$AA@
_DATA	SEGMENT
??_C@_04EEPE@Wyrm?$AA@ DB 'Wyrm', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09HKKP@Cave?5Slug?$AA@
_DATA	SEGMENT
??_C@_09HKKP@Cave?5Slug?$AA@ DB 'Cave Slug', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@KJLC@Devil?5Wyrm?$AA@
_DATA	SEGMENT
??_C@_0L@KJLC@Devil?5Wyrm?$AA@ DB 'Devil Wyrm', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DOKM@Devourer?$AA@
_DATA	SEGMENT
??_C@_08DOKM@Devourer?$AA@ DB 'Devourer', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@GJJN@Monsters?2Magma?2Magma?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BL@GJJN@Monsters?2Magma?2Magma?$CFc?4CL2?$AA@ DB 'Monsters\Magma\M'
	DB	'agma%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LADC@Monsters?2Magma?2Magma?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BN@LADC@Monsters?2Magma?2Magma?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Ma'
	DB	'gma\Magma%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@BDIN@Magma?5Demon?$AA@
_DATA	SEGMENT
??_C@_0M@BDIN@Magma?5Demon?$AA@ DB 'Magma Demon', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@PAJG@Monsters?2Magma?2Yellow?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@PAJG@Monsters?2Magma?2Yellow?4TRN?$AA@ DB 'Monsters\Magma\Yello'
	DB	'w.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@BAA@Blood?5Stone?$AA@
_DATA	SEGMENT
??_C@_0M@BAA@Blood?5Stone?$AA@ DB 'Blood Stone', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HBBI@Monsters?2Magma?2Blue?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BI@HBBI@Monsters?2Magma?2Blue?4TRN?$AA@ DB 'Monsters\Magma\Blue.TR'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@IKKA@Hell?5Stone?$AA@
_DATA	SEGMENT
??_C@_0L@IKKA@Hell?5Stone?$AA@ DB 'Hell Stone', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KPPL@Monsters?2Magma?2Wierd?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@KPPL@Monsters?2Magma?2Wierd?4TRN?$AA@ DB 'Monsters\Magma\Wierd.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_09JMEO@Lava?5Lord?$AA@
_DATA	SEGMENT
??_C@_09JMEO@Lava?5Lord?$AA@ DB 'Lava Lord', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@DDCB@Monsters?2Rhino?2Rhino?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BL@DDCB@Monsters?2Rhino?2Rhino?$CFc?4CL2?$AA@ DB 'Monsters\Rhino\R'
	DB	'hino%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@INFH@Monsters?2Rhino?2Rhino?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BN@INFH@Monsters?2Rhino?2Rhino?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Rh'
	DB	'ino\Rhino%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@OLEB@Horned?5Demon?$AA@
_DATA	SEGMENT
??_C@_0N@OLEB@Horned?5Demon?$AA@ DB 'Horned Demon', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MPLB@Monsters?2Rhino?2Orange?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@MPLB@Monsters?2Rhino?2Orange?4TRN?$AA@ DB 'Monsters\Rhino\Orang'
	DB	'e.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@EIAJ@Mud?5Runner?$AA@
_DATA	SEGMENT
??_C@_0L@EIAJ@Mud?5Runner?$AA@ DB 'Mud Runner', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KPBF@Monsters?2Rhino?2Blue?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BI@KPBF@Monsters?2Rhino?2Blue?4TRN?$AA@ DB 'Monsters\Rhino\Blue.TR'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@HAFD@Frost?5Charger?$AA@
_DATA	SEGMENT
??_C@_0O@HAFD@Frost?5Charger?$AA@ DB 'Frost Charger', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MHDK@Monsters?2Rhino?2RhinoB?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@MHDK@Monsters?2Rhino?2RhinoB?4TRN?$AA@ DB 'Monsters\Rhino\Rhino'
	DB	'B.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@FPB@Obsidian?5Lord?$AA@
_DATA	SEGMENT
??_C@_0O@FPB@Obsidian?5Lord?$AA@ DB 'Obsidian Lord', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@PCKO@Monsters?2Demskel?2Demskl?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BO@PCKO@Monsters?2Demskel?2Demskl?$CFc?4CL2?$AA@ DB 'Monsters\Dems'
	DB	'kel\Demskl%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Thin'
	DB	'\Thin%c%i.WAV', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LDDE@Monsters?2Thin?2Thinv3?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@LDDE@Monsters?2Thin?2Thinv3?4TRN?$AA@ DB 'Monsters\Thin\Thinv3.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@LMNI@Bone?5Demon?$AA@
_DATA	SEGMENT
??_C@_0L@LMNI@Bone?5Demon?$AA@ DB 'Bone Demon', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@ DB 'Monsters\Thin\Thin'
	DB	'%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09JDGN@Red?5Death?$AA@
_DATA	SEGMENT
??_C@_09JDGN@Red?5Death?$AA@ DB 'Red Death', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@EOOB@Litch?5Demon?$AA@
_DATA	SEGMENT
??_C@_0M@EOOB@Litch?5Demon?$AA@ DB 'Litch Demon', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@HMDJ@Undead?5Balrog?$AA@
_DATA	SEGMENT
??_C@_0O@HMDJ@Undead?5Balrog?$AA@ DB 'Undead Balrog', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@JOPB@Monsters?2Fireman?2FireM?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@JOPB@Monsters?2Fireman?2FireM?$CFc?4CL2?$AA@ DB 'Monsters\Firem'
	DB	'an\FireM%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@LACM@Incinerator?$AA@
_DATA	SEGMENT
??_C@_0M@LACM@Incinerator?$AA@ DB 'Incinerator', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@LNJN@Flame?5Lord?$AA@
_DATA	SEGMENT
??_C@_0L@LNJN@Flame?5Lord?$AA@ DB 'Flame Lord', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09BBKL@Doom?5Fire?$AA@
_DATA	SEGMENT
??_C@_09BBKL@Doom?5Fire?$AA@ DB 'Doom Fire', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@DMNI@Hell?5Burner?$AA@
_DATA	SEGMENT
??_C@_0M@DMNI@Hell?5Burner?$AA@ DB 'Hell Burner', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09IKEH@Red?5Storm?$AA@
_DATA	SEGMENT
??_C@_09IKEH@Red?5Storm?$AA@ DB 'Red Storm', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@ELEK@Storm?5Rider?$AA@
_DATA	SEGMENT
??_C@_0M@ELEK@Storm?5Rider?$AA@ DB 'Storm Rider', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BDBB@Monsters?2Thin?2Thinv2?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@BDBB@Monsters?2Thin?2Thinv2?4TRN?$AA@ DB 'Monsters\Thin\Thinv2.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@MPDM@Storm?5Lord?$AA@
_DATA	SEGMENT
??_C@_0L@MPDM@Storm?5Lord?$AA@ DB 'Storm Lord', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@PDHO@Monsters?2Thin?2Thinv1?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@PDHO@Monsters?2Thin?2Thinv1?4TRN?$AA@ DB 'Monsters\Thin\Thinv1.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GKHB@Maelstorm?$AA@
_DATA	SEGMENT
??_C@_09GKHB@Maelstorm?$AA@ DB 'Maelstorm', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@PDMB@Monsters?2BigFall?2Fallg?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@PDMB@Monsters?2BigFall?2Fallg?$CFc?4CL2?$AA@ DB 'Monsters\BigFa'
	DB	'll\Fallg%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@COGP@Monsters?2BigFall?2Bfal?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BO@COGP@Monsters?2BigFall?2Bfal?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\B'
	DB	'igFall\Bfal%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FGGD@Devil?5Kin?5Brute?$AA@
_DATA	SEGMENT
??_C@_0BA@FGGD@Devil?5Kin?5Brute?$AA@ DB 'Devil Kin Brute', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@DCJK@Monsters?2Gargoyle?2Gargo?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BO@DCJK@Monsters?2Gargoyle?2Gargo?$CFc?4CL2?$AA@ DB 'Monsters\Garg'
	DB	'oyle\Gargo%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CA@OJJF@Monsters?2Gargoyle?2Gargo?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0CA@OJJF@Monsters?2Gargoyle?2Gargo?$CFc?$CFi?4WAV?$AA@ DB 'Monsters'
	DB	'\Gargoyle\Gargo%c%i.WAV', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CHBP@Winged?9Demon?$AA@
_DATA	SEGMENT
??_C@_0N@CHBP@Winged?9Demon?$AA@ DB 'Winged-Demon', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@GLPH@Monsters?2Gargoyle?2GarE?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BL@GLPH@Monsters?2Gargoyle?2GarE?4TRN?$AA@ DB 'Monsters\Gargoyle\G'
	DB	'arE.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08HND@Gargoyle?$AA@
_DATA	SEGMENT
??_C@_08HND@Gargoyle?$AA@ DB 'Gargoyle', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KACC@Monsters?2Gargoyle?2GargBr?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BN@KACC@Monsters?2Gargoyle?2GargBr?4TRN?$AA@ DB 'Monsters\Gargoyle'
	DB	'\GargBr.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@JKAG@Blood?5Claw?$AA@
_DATA	SEGMENT
??_C@_0L@JKAG@Blood?5Claw?$AA@ DB 'Blood Claw', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GEJG@Monsters?2Gargoyle?2GargB?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BM@GEJG@Monsters?2Gargoyle?2GargB?4TRN?$AA@ DB 'Monsters\Gargoyle\'
	DB	'GargB.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@CJIN@Death?5Wing?$AA@
_DATA	SEGMENT
??_C@_0L@CJIN@Death?5Wing?$AA@ DB 'Death Wing', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@OHJC@Monsters?2Mega?2Mega?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BJ@OHJC@Monsters?2Mega?2Mega?$CFc?4CL2?$AA@ DB 'Monsters\Mega\Mega'
	DB	'%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@EJPE@Monsters?2Mega?2Mega?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BL@EJPE@Monsters?2Mega?2Mega?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Mega'
	DB	'\Mega%c%i.WAV', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MHAA@Slayer?$AA@
_DATA	SEGMENT
??_C@_06MHAA@Slayer?$AA@ DB 'Slayer', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KHJI@Monsters?2Mega?2Guard?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BI@KHJI@Monsters?2Mega?2Guard?4TRN?$AA@ DB 'Monsters\Mega\Guard.TR'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KEIB@Guardian?$AA@
_DATA	SEGMENT
??_C@_08KEIB@Guardian?$AA@ DB 'Guardian', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@DEEB@Monsters?2Mega?2Vtexl?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BI@DEEB@Monsters?2Mega?2Vtexl?4TRN?$AA@ DB 'Monsters\Mega\Vtexl.TR'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@NBKI@Vortex?5Lord?$AA@
_DATA	SEGMENT
??_C@_0M@NBKI@Vortex?5Lord?$AA@ DB 'Vortex Lord', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@BNN@Monsters?2Mega?2Balr?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BH@BNN@Monsters?2Mega?2Balr?4TRN?$AA@ DB 'Monsters\Mega\Balr.TRN', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06OEIG@Balrog?$AA@
_DATA	SEGMENT
??_C@_06OEIG@Balrog?$AA@ DB 'Balrog', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@IHHM@Monsters?2Snake?2Snake?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BL@IHHM@Monsters?2Snake?2Snake?$CFc?4CL2?$AA@ DB 'Monsters\Snake\S'
	DB	'nake%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@NHII@Monsters?2Snake?2Snake?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BN@NHII@Monsters?2Snake?2Snake?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Sn'
	DB	'ake\Snake%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@PGLH@Cave?5Viper?$AA@
_DATA	SEGMENT
??_C@_0L@PGLH@Cave?5Viper?$AA@ DB 'Cave Viper', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LCBA@Monsters?2Snake?2SnakR?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@LCBA@Monsters?2Snake?2SnakR?4TRN?$AA@ DB 'Monsters\Snake\SnakR.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GLJN@Fire?5Drake?$AA@
_DATA	SEGMENT
??_C@_0L@GLJN@Fire?5Drake?$AA@ DB 'Fire Drake', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JEFP@Monsters?2Snake?2Snakg?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@JEFP@Monsters?2Snake?2Snakg?4TRN?$AA@ DB 'Monsters\Snake\Snakg.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@CLBK@Gold?5Viper?$AA@
_DATA	SEGMENT
??_C@_0L@CLBK@Gold?5Viper?$AA@ DB 'Gold Viper', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LEOP@Monsters?2Snake?2Snakb?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@LEOP@Monsters?2Snake?2Snakb?4TRN?$AA@ DB 'Monsters\Snake\Snakb.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@FIHH@Azure?5Drake?$AA@
_DATA	SEGMENT
??_C@_0M@FIHH@Azure?5Drake?$AA@ DB 'Azure Drake', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@JDBP@Monsters?2Black?2Black?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BL@JDBP@Monsters?2Black?2Black?$CFc?4CL2?$AA@ DB 'Monsters\Black\B'
	DB	'lack%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KHJ@Monsters?2Black?2Black?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BN@KHJ@Monsters?2Black?2Black?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Bla'
	DB	'ck\Black%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@PDGD@Black?5Knight?$AA@
_DATA	SEGMENT
??_C@_0N@PDGD@Black?5Knight?$AA@ DB 'Black Knight', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GOHA@Monsters?2Black?2BlkKntRT?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BM@GOHA@Monsters?2Black?2BlkKntRT?4TRN?$AA@ DB 'Monsters\Black\Blk'
	DB	'KntRT.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FPBM@Doom?5Guard?$AA@
_DATA	SEGMENT
??_C@_0L@FPBM@Doom?5Guard?$AA@ DB 'Doom Guard', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@DEHC@Monsters?2Black?2BlkKntBT?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BM@DEHC@Monsters?2Black?2BlkKntBT?4TRN?$AA@ DB 'Monsters\Black\Blk'
	DB	'KntBT.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@KLAH@Steel?5Lord?$AA@
_DATA	SEGMENT
??_C@_0L@KLAH@Steel?5Lord?$AA@ DB 'Steel Lord', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@JCKI@Monsters?2Black?2BlkKntBe?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BM@JCKI@Monsters?2Black?2BlkKntBe?4TRN?$AA@ DB 'Monsters\Black\Blk'
	DB	'KntBe.TRN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@PCA@Blood?5Knight?$AA@
_DATA	SEGMENT
??_C@_0N@PCA@Blood?5Knight?$AA@ DB 'Blood Knight', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CDKL@Monsters?2Unrav?2Unrav?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BL@CDKL@Monsters?2Unrav?2Unrav?$CFc?4CL2?$AA@ DB 'Monsters\Unrav\U'
	DB	'nrav%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09KOLF@Unraveler?$AA@
_DATA	SEGMENT
??_C@_09KOLF@Unraveler?$AA@ DB 'Unraveler', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GDBP@Hollow?5One?$AA@
_DATA	SEGMENT
??_C@_0L@GDBP@Hollow?5One?$AA@ DB 'Hollow One', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@FDGH@Pain?5Master?$AA@
_DATA	SEGMENT
??_C@_0M@FDGH@Pain?5Master?$AA@ DB 'Pain Master', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@NDCP@Reality?5Weaver?$AA@
_DATA	SEGMENT
??_C@_0P@NDCP@Reality?5Weaver?$AA@ DB 'Reality Weaver', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DPMO@Monsters?2Succ?2Scbs?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BJ@DPMO@Monsters?2Succ?2Scbs?$CFc?4CL2?$AA@ DB 'Monsters\Succ\Scbs'
	DB	'%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HGFB@Monsters?2Succ?2Scbs?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BL@HGFB@Monsters?2Succ?2Scbs?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Succ'
	DB	'\Scbs%c%i.WAV', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08FEBP@Succubus?$AA@
_DATA	SEGMENT
??_C@_08FEBP@Succubus?$AA@ DB 'Succubus', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@GKHN@Monsters?2Succ?2Succb?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BI@GKHN@Monsters?2Succ?2Succb?4TRN?$AA@ DB 'Monsters\Succ\Succb.TR'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FPIO@Snow?5Witch?$AA@
_DATA	SEGMENT
??_C@_0L@FPIO@Snow?5Witch?$AA@ DB 'Snow Witch', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@PIJO@Monsters?2Succ?2Succrw?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@PIJO@Monsters?2Succ?2Succrw?4TRN?$AA@ DB 'Monsters\Succ\Succrw.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@BHM@Hell?5Spawn?$AA@
_DATA	SEGMENT
??_C@_0L@BHM@Hell?5Spawn?$AA@ DB 'Hell Spawn', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KCJM@Monsters?2Succ?2Succbw?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@KCJM@Monsters?2Succ?2Succbw?4TRN?$AA@ DB 'Monsters\Succ\Succbw.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@GKNH@Soul?5Burner?$AA@
_DATA	SEGMENT
??_C@_0M@GKNH@Soul?5Burner?$AA@ DB 'Soul Burner', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GCAL@Monsters?2Mage?2Mage?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BJ@GCAL@Monsters?2Mage?2Mage?$CFc?4CL2?$AA@ DB 'Monsters\Mage\Mage'
	DB	'%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OMKE@Monsters?2Mage?2Mage?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BL@OMKE@Monsters?2Mage?2Mage?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Mage'
	DB	'\Mage%c%i.WAV', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09HLJB@Counselor?$AA@
_DATA	SEGMENT
??_C@_09HLJB@Counselor?$AA@ DB 'Counselor', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@IEPO@Monsters?2Mage?2Cnselg?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@IEPO@Monsters?2Mage?2Cnselg?4TRN?$AA@ DB 'Monsters\Mage\Cnselg.'
	DB	'TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@IHLC@Magistrate?$AA@
_DATA	SEGMENT
??_C@_0L@IHLC@Magistrate?$AA@ DB 'Magistrate', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@IAEI@Monsters?2Mage?2Cnselgd?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@IAEI@Monsters?2Mage?2Cnselgd?4TRN?$AA@ DB 'Monsters\Mage\Cnselg'
	DB	'd.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_08EOGH@Cabalist?$AA@
_DATA	SEGMENT
??_C@_08EOGH@Cabalist?$AA@ DB 'Cabalist', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CCLI@Monsters?2Mage?2Cnselbk?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BK@CCLI@Monsters?2Mage?2Cnselbk?4TRN?$AA@ DB 'Monsters\Mage\Cnselb'
	DB	'k.TRN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KFKH@Advocate?$AA@
_DATA	SEGMENT
??_C@_08KFKH@Advocate?$AA@ DB 'Advocate', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@HABD@Monsters?2Golem?2Golem?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BL@HABD@Monsters?2Golem?2Golem?$CFc?4CL2?$AA@ DB 'Monsters\Golem\G'
	DB	'olem%c.CL2', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@PJFI@Monsters?2Golem?2Golm?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BM@PJFI@Monsters?2Golem?2Golm?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\Gol'
	DB	'em\Golm%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MIHD@Golem?$AA@
_DATA	SEGMENT
??_C@_05MIHD@Golem?$AA@ DB 'Golem', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LMBN@Monsters?2Diablo?2Diablo?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BN@LMBN@Monsters?2Diablo?2Diablo?$CFc?4CL2?$AA@ DB 'Monsters\Diabl'
	DB	'o\Diablo%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@FGDO@Monsters?2Diablo?2Diablo?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BP@FGDO@Monsters?2Diablo?2Diablo?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\'
	DB	'Diablo\Diablo%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@FIFM@The?5Dark?5Lord?$AA@
_DATA	SEGMENT
??_C@_0O@FIFM@The?5Dark?5Lord?$AA@ DB 'The Dark Lord', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@BEOI@Monsters?2DarkMage?2Dmage?$CFc?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BO@BEOI@Monsters?2DarkMage?2Dmage?$CFc?4CL2?$AA@ DB 'Monsters\Dark'
	DB	'Mage\Dmage%c.CL2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@HJAJ@Monsters?2DarkMage?2Dmag?$CFc?$CFi?4WAV?$AA@
_DATA	SEGMENT
??_C@_0BP@HJAJ@Monsters?2DarkMage?2Dmag?$CFc?$CFi?4WAV?$AA@ DB 'Monsters\'
	DB	'DarkMage\Dmag%c%i.WAV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@JDKB@The?5Arch?9Litch?5Malignus?$AA@
_DATA	SEGMENT
??_C@_0BI@JDKB@The?5Arch?9Litch?5Malignus?$AA@ DB 'The Arch-Litch Malignu'
	DB	's', 00H					; `string'
_DATA	ENDS
_DATA	SEGMENT
_monsterdata DD	080H
	DD	031fH
	DD	FLAT:??_C@_0BN@IMIC@Monsters?2Zombie?2Zombie?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BP@IHKO@Monsters?2Zombie?2Zombie?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0bH
	DD	018H
	DD	0cH
	DD	06H
	DD	010H
	DD	00H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06PEJJ@Zombie?$AA@
	DB	01H
	DB	03H
	DB	01H
	ORG $+1
	DD	04H
	DD	07H
	DB	00H
	ORG $+3
	DD	00H
	DB	00H
	DB	0aH
	DB	08H
	DB	02H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	ORG $+1
	DW	048H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	036H
	ORG $+2
	DD	080H
	DD	031fH
	DD	FLAT:??_C@_0BN@IMIC@Monsters?2Zombie?2Zombie?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BP@IHKO@Monsters?2Zombie?2Zombie?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BM@OMHC@Monsters?2Zombie?2Bluered?4TRN?$AA@
	DD	0bH
	DD	018H
	DD	0cH
	DD	06H
	DD	010H
	DD	00H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05EMI@Ghoul?$AA@
	DB	02H
	DB	04H
	DB	02H
	ORG $+1
	DD	07H
	DD	0bH
	DB	00H
	ORG $+3
	DD	00H
	DB	01H
	DB	0aH
	DB	08H
	DB	03H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0aH
	DB	00H
	ORG $+1
	DW	048H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	03aH
	ORG $+2
	DD	080H
	DD	031fH
	DD	FLAT:??_C@_0BN@IMIC@Monsters?2Zombie?2Zombie?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BP@IHKO@Monsters?2Zombie?2Zombie?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@PMIC@Monsters?2Zombie?2Grey?4TRN?$AA@
	DD	0bH
	DD	018H
	DD	0cH
	DD	06H
	DD	010H
	DD	00H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BA@CBFH@Rotting?5Carcass?$AA@
	DB	02H
	DB	06H
	DB	04H
	ORG $+1
	DD	0fH
	DD	019H
	DB	00H
	ORG $+3
	DD	00H
	DB	02H
	DB	019H
	DB	08H
	DB	05H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	ORG $+1
	DW	048H
	DW	04aH
	DW	00H
	DB	03H
	ORG $+1
	DW	088H
	ORG $+2
	DD	080H
	DD	031fH
	DD	FLAT:??_C@_0BN@IMIC@Monsters?2Zombie?2Zombie?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BP@IHKO@Monsters?2Zombie?2Zombie?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@NLEA@Monsters?2Zombie?2Yellow?4TRN?$AA@
	DD	0bH
	DD	018H
	DD	0cH
	DD	06H
	DD	010H
	DD	00H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@IKLP@Black?5Death?$AA@
	DB	04H
	DB	08H
	DB	06H
	ORG $+1
	DD	019H
	DD	028H
	DB	00H
	ORG $+3
	DD	00H
	DB	03H
	DB	01eH
	DB	08H
	DB	06H
	DB	016H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	014H
	DB	00H
	ORG $+1
	DW	048H
	DW	04cH
	DW	00H
	DB	03H
	ORG $+1
	DW	0f0H
	ORG $+2
	DD	080H
	DD	021fH
	DD	FLAT:??_C@_0BO@OOMI@Monsters?2FalSpear?2Phall?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0CA@LICE@Monsters?2FalSpear?2Phall?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BO@MBIF@Monsters?2FalSpear?2FallenT?4TRN?$AA@
	DD	0bH
	DD	0bH
	DD	0dH
	DD	0bH
	DD	012H
	DD	0dH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@IHGK@Fallen?5One?$AA@
	DB	01H
	DB	03H
	DB	01H
	ORG $+1
	DD	01H
	DD	04H
	DB	08H
	ORG $+3
	DD	00H
	DB	00H
	DB	0fH
	DB	07H
	DB	01H
	DB	03H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	ORG $+1
	DW	00H
	DW	00H
	DW	00H
	DB	03H
	ORG $+1
	DW	02eH
	ORG $+2
	DD	080H
	DD	021fH
	DD	FLAT:??_C@_0BO@OOMI@Monsters?2FalSpear?2Phall?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0CA@LICE@Monsters?2FalSpear?2Phall?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BL@NGAB@Monsters?2FalSpear?2Dark?4TRN?$AA@
	DD	0bH
	DD	0bH
	DD	0dH
	DD	0bH
	DD	012H
	DD	0dH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06KIJL@Carver?$AA@
	DB	02H
	DB	05H
	DB	03H
	ORG $+1
	DD	04H
	DD	08H
	DB	08H
	ORG $+3
	DD	00H
	DB	02H
	DB	014H
	DB	07H
	DB	02H
	DB	05H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	05H
	DB	02H
	ORG $+1
	DW	00H
	DW	00H
	DW	00H
	DB	03H
	ORG $+1
	DW	050H
	ORG $+2
	DD	080H
	DD	021fH
	DD	FLAT:??_C@_0BO@OOMI@Monsters?2FalSpear?2Phall?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0CA@LICE@Monsters?2FalSpear?2Phall?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	00H
	DD	00H
	DD	0bH
	DD	0bH
	DD	0dH
	DD	0bH
	DD	012H
	DD	0dH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09CFFL@Devil?5Kin?$AA@
	DB	03H
	DB	07H
	DB	05H
	ORG $+1
	DD	0cH
	DD	018H
	DB	08H
	ORG $+3
	DD	00H
	DB	02H
	DB	019H
	DB	07H
	DB	03H
	DB	07H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	0aH
	DB	02H
	ORG $+1
	DW	00H
	DW	02H
	DW	00H
	DB	03H
	ORG $+1
	DW	09bH
	ORG $+2
	DD	080H
	DD	021fH
	DD	FLAT:??_C@_0BO@OOMI@Monsters?2FalSpear?2Phall?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0CA@LICE@Monsters?2FalSpear?2Phall?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BL@KPBN@Monsters?2FalSpear?2Blue?4TRN?$AA@
	DD	0bH
	DD	0bH
	DD	0dH
	DD	0bH
	DD	012H
	DD	0dH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08HICJ@Dark?5One?$AA@
	DB	05H
	DB	09H
	DB	07H
	ORG $+1
	DD	014H
	DD	024H
	DB	08H
	ORG $+3
	DD	00H
	DB	03H
	DB	01eH
	DB	07H
	DB	04H
	DB	08H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	0fH
	DB	02H
	ORG $+1
	DW	040H
	DW	044H
	DW	00H
	DB	03H
	ORG $+1
	DW	0ffH
	ORG $+2
	DD	080H
	DD	0229H
	DD	FLAT:??_C@_0BN@KBEI@Monsters?2SkelAxe?2SklAx?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@IJNN@Monsters?2SkelAxe?2SklAx?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@LDMJ@Monsters?2SkelAxe?2White?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	0dH
	DD	06H
	DD	011H
	DD	010H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08KFBC@Skeleton?$AA@
	DB	01H
	DB	03H
	DB	01H
	ORG $+1
	DD	02H
	DD	04H
	DB	02H
	ORG $+3
	DD	00H
	DB	00H
	DB	014H
	DB	08H
	DB	01H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	048H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	040H
	ORG $+2
	DD	080H
	DD	0229H
	DD	FLAT:??_C@_0BN@KBEI@Monsters?2SkelAxe?2SklAx?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@IJNN@Monsters?2SkelAxe?2SklAx?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@PJBC@Monsters?2SkelAxe?2Skelt?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	0dH
	DD	06H
	DD	011H
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@FLJI@Corpse?5Axe?$AA@
	DB	02H
	DB	05H
	DB	02H
	ORG $+1
	DD	04H
	DD	07H
	DB	02H
	ORG $+3
	DD	00H
	DB	01H
	DB	019H
	DB	08H
	DB	03H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	048H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	044H
	ORG $+2
	DD	080H
	DD	0229H
	DD	FLAT:??_C@_0BN@KBEI@Monsters?2SkelAxe?2SklAx?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@IJNN@Monsters?2SkelAxe?2SklAx?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0cH
	DD	08H
	DD	0dH
	DD	06H
	DD	011H
	DD	010H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0N@OPIP@Burning?5Dead?$AA@
	DB	02H
	DB	06H
	DB	04H
	ORG $+1
	DD	08H
	DD	0cH
	DB	02H
	ORG $+3
	DD	00H
	DB	02H
	DB	01eH
	DB	08H
	DB	03H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	ORG $+1
	DW	04aH
	DW	058H
	DW	00H
	DB	03H
	ORG $+1
	DW	09aH
	ORG $+2
	DD	080H
	DD	0229H
	DD	FLAT:??_C@_0BN@KBEI@Monsters?2SkelAxe?2SklAx?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@IJNN@Monsters?2SkelAxe?2SklAx?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@HLKD@Monsters?2SkelAxe?2Black?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	0dH
	DD	06H
	DD	011H
	DD	010H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06KKNE@Horror?$AA@
	DB	04H
	DB	08H
	DB	06H
	ORG $+1
	DD	0cH
	DD	014H
	DB	02H
	ORG $+3
	DD	00H
	DB	03H
	DB	023H
	DB	08H
	DB	04H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	ORG $+1
	DW	04cH
	DW	04cH
	DW	00H
	DB	03H
	ORG $+1
	DW	0108H
	ORG $+2
	DD	080H
	DD	026fH
	DD	FLAT:??_C@_0BN@DAFP@Monsters?2FalSword?2Fall?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@LKDH@Monsters?2FalSword?2Fall?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BO@KANN@Monsters?2FalSword?2FallenT?4TRN?$AA@
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0bH
	DD	0eH
	DD	0fH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@IHGK@Fallen?5One?$AA@
	DB	01H
	DB	03H
	DB	01H
	ORG $+1
	DD	02H
	DD	05H
	DB	08H
	ORG $+3
	DD	00H
	DB	00H
	DB	0fH
	DB	08H
	DB	01H
	DB	04H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	0aH
	DB	02H
	ORG $+1
	DW	00H
	DW	00H
	DW	00H
	DB	03H
	ORG $+1
	DW	034H
	ORG $+2
	DD	080H
	DD	026fH
	DD	FLAT:??_C@_0BN@DAFP@Monsters?2FalSword?2Fall?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@LKDH@Monsters?2FalSword?2Fall?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BL@JPEE@Monsters?2FalSword?2Dark?4TRN?$AA@
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0bH
	DD	0eH
	DD	0fH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06KIJL@Carver?$AA@
	DB	02H
	DB	05H
	DB	03H
	ORG $+1
	DD	05H
	DD	09H
	DB	08H
	ORG $+3
	DD	00H
	DB	01H
	DB	014H
	DB	08H
	DB	02H
	DB	07H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	0fH
	DB	02H
	ORG $+1
	DW	00H
	DW	00H
	DW	00H
	DB	03H
	ORG $+1
	DW	05aH
	ORG $+2
	DD	080H
	DD	026fH
	DD	FLAT:??_C@_0BN@DAFP@Monsters?2FalSword?2Fall?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@LKDH@Monsters?2FalSword?2Fall?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	00H
	DD	00H
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0bH
	DD	0eH
	DD	0fH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09CFFL@Devil?5Kin?$AA@
	DB	03H
	DB	07H
	DB	05H
	ORG $+1
	DD	010H
	DD	018H
	DB	08H
	ORG $+3
	DD	00H
	DB	02H
	DB	019H
	DB	08H
	DB	04H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	014H
	DB	02H
	ORG $+1
	DW	00H
	DW	02H
	DW	00H
	DB	03H
	ORG $+1
	DW	0b4H
	ORG $+2
	DD	080H
	DD	026fH
	DD	FLAT:??_C@_0BN@DAFP@Monsters?2FalSword?2Fall?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@LKDH@Monsters?2FalSword?2Fall?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BL@OGFI@Monsters?2FalSword?2Blue?4TRN?$AA@
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0bH
	DD	0eH
	DD	0fH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08HICJ@Dark?5One?$AA@
	DB	05H
	DB	09H
	DB	07H
	ORG $+1
	DD	018H
	DD	024H
	DB	08H
	ORG $+3
	DD	00H
	DB	03H
	DB	01eH
	DB	08H
	DB	04H
	DB	0cH
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	019H
	DB	02H
	ORG $+1
	DW	040H
	DW	044H
	DW	00H
	DB	03H
	ORG $+1
	DW	0118H
	ORG $+2
	DD	080H
	DD	019aH
	DD	FLAT:??_C@_0BJ@BBLM@Monsters?2Scav?2Scav?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@FEJI@Monsters?2Scav?2Scav?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0cH
	DD	08H
	DD	0cH
	DD	06H
	DD	014H
	DD	0bH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09ODLB@Scavenger?$AA@
	DB	01H
	DB	04H
	DB	02H
	ORG $+1
	DD	03H
	DD	06H
	DB	04H
	ORG $+3
	DD	00H
	DB	00H
	DB	014H
	DB	07H
	DB	01H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0aH
	DB	02H
	ORG $+1
	DW	00H
	DW	02H
	DW	00H
	DB	03H
	ORG $+1
	DW	050H
	ORG $+2
	DD	080H
	DD	019aH
	DD	FLAT:??_C@_0BJ@BBLM@Monsters?2Scav?2Scav?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@FEJI@Monsters?2Scav?2Scav?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@BABM@Monsters?2Scav?2ScavBr?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	0cH
	DD	06H
	DD	014H
	DD	0bH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0N@GMAL@Plague?5Eater?$AA@
	DB	03H
	DB	06H
	DB	04H
	ORG $+1
	DD	0cH
	DD	018H
	DB	04H
	ORG $+3
	DD	00H
	DB	01H
	DB	01eH
	DB	07H
	DB	01H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	014H
	DB	02H
	ORG $+1
	DW	00H
	DW	04H
	DW	00H
	DB	03H
	ORG $+1
	DW	0bcH
	ORG $+2
	DD	080H
	DD	019aH
	DD	FLAT:??_C@_0BJ@BBLM@Monsters?2Scav?2Scav?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@FEJI@Monsters?2Scav?2Scav?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@HCLD@Monsters?2Scav?2ScavBe?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	0cH
	DD	06H
	DD	014H
	DD	0bH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0N@PNNC@Shadow?5Beast?$AA@
	DB	04H
	DB	08H
	DB	06H
	ORG $+1
	DD	018H
	DD	024H
	DB	04H
	ORG $+3
	DD	00H
	DB	02H
	DB	023H
	DB	07H
	DB	03H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	019H
	DB	02H
	ORG $+1
	DW	040H
	DW	042H
	DW	00H
	DB	03H
	ORG $+1
	DW	0177H
	ORG $+2
	DD	080H
	DD	019aH
	DD	FLAT:??_C@_0BJ@BBLM@Monsters?2Scav?2Scav?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@FEJI@Monsters?2Scav?2Scav?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BI@HIBO@Monsters?2Scav?2ScavW?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	0cH
	DD	06H
	DD	014H
	DD	0bH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@NJCA@Bone?5Gasher?$AA@
	DB	06H
	DB	0aH
	DB	08H
	ORG $+1
	DD	01cH
	DD	028H
	DB	04H
	ORG $+3
	DD	00H
	DB	03H
	DB	023H
	DB	07H
	DB	05H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01eH
	DB	02H
	ORG $+1
	DW	041H
	DW	044H
	DW	00H
	DB	03H
	ORG $+1
	DW	0228H
	ORG $+2
	DD	080H
	DD	0237H
	DD	FLAT:??_C@_0BN@FDDL@Monsters?2SkelBow?2SklBw?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@OGC@Monsters?2SkelBow?2SklBw?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@OCKB@Monsters?2SkelBow?2White?4TRN?$AA@
	DD	09H
	DD	08H
	DD	010H
	DD	05H
	DD	010H
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08KFBC@Skeleton?$AA@
	DB	02H
	DB	05H
	DB	03H
	ORG $+1
	DD	02H
	DD	04H
	DB	03H
	ORG $+3
	DD	00H
	DB	00H
	DB	0fH
	DB	0cH
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	048H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	06eH
	ORG $+2
	DD	080H
	DD	0237H
	DD	FLAT:??_C@_0BN@FDDL@Monsters?2SkelBow?2SklBw?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@OGC@Monsters?2SkelBow?2SklBw?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@KIHK@Monsters?2SkelBow?2Skelt?4TRN?$AA@
	DD	09H
	DD	08H
	DD	010H
	DD	05H
	DD	010H
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@FKAB@Corpse?5Bow?$AA@
	DB	03H
	DB	07H
	DB	05H
	ORG $+1
	DD	08H
	DD	010H
	DB	03H
	ORG $+3
	DD	00H
	DB	01H
	DB	019H
	DB	0cH
	DB	01H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	048H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	0d2H
	ORG $+2
	DD	080H
	DD	0237H
	DD	FLAT:??_C@_0BN@FDDL@Monsters?2SkelBow?2SklBw?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@OGC@Monsters?2SkelBow?2SklBw?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	09H
	DD	08H
	DD	010H
	DD	05H
	DD	010H
	DD	010H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0N@OPIP@Burning?5Dead?$AA@
	DB	05H
	DB	09H
	DB	07H
	ORG $+1
	DD	0aH
	DD	018H
	DB	03H
	ORG $+3
	DD	00H
	DB	02H
	DB	01eH
	DB	0cH
	DB	01H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	ORG $+1
	DW	04aH
	DW	058H
	DW	00H
	DB	03H
	ORG $+1
	DW	016cH
	ORG $+2
	DD	080H
	DD	0237H
	DD	FLAT:??_C@_0BN@FDDL@Monsters?2SkelBow?2SklBw?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@OGC@Monsters?2SkelBow?2SklBw?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@CKML@Monsters?2SkelBow?2Black?4TRN?$AA@
	DD	09H
	DD	08H
	DD	010H
	DD	05H
	DD	010H
	DD	010H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06KKNE@Horror?$AA@
	DB	07H
	DB	0bH
	DB	09H
	ORG $+1
	DD	0fH
	DD	02dH
	DB	03H
	ORG $+3
	DD	00H
	DB	03H
	DB	023H
	DB	0cH
	DB	02H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	ORG $+1
	DW	04cH
	DW	04cH
	DW	00H
	DB	03H
	ORG $+1
	DW	0252H
	ORG $+2
	DD	080H
	DD	023fH
	DD	FLAT:??_C@_0BM@LPCM@Monsters?2SkelSd?2SklSr?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BO@JGHO@Monsters?2SkelSd?2SklSr?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BK@FEKE@Monsters?2SkelSd?2White?4TRN?$AA@
	DD	0dH
	DD	08H
	DD	0cH
	DD	07H
	DD	0fH
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BB@OJGC@Skeleton?5Captain?$AA@
	DB	01H
	DB	04H
	DB	02H
	ORG $+1
	DD	03H
	DD	06H
	DB	02H
	ORG $+3
	DD	00H
	DB	00H
	DB	014H
	DB	08H
	DB	02H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0aH
	DB	00H
	ORG $+1
	DW	048H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	05aH
	ORG $+2
	DD	080H
	DD	023fH
	DD	FLAT:??_C@_0BM@LPCM@Monsters?2SkelSd?2SklSr?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BO@JGHO@Monsters?2SkelSd?2SklSr?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BK@BOHP@Monsters?2SkelSd?2Skelt?4TRN?$AA@
	DD	0dH
	DD	08H
	DD	0cH
	DD	07H
	DD	0fH
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0P@ONID@Corpse?5Captain?$AA@
	DB	02H
	DB	06H
	DB	04H
	ORG $+1
	DD	0cH
	DD	014H
	DB	02H
	ORG $+3
	DD	00H
	DB	01H
	DB	01eH
	DB	08H
	DB	03H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	ORG $+1
	DW	048H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	0c8H
	ORG $+2
	DD	080H
	DD	023fH
	DD	FLAT:??_C@_0BM@LPCM@Monsters?2SkelSd?2SklSr?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BO@JGHO@Monsters?2SkelSd?2SklSr?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0dH
	DD	08H
	DD	0cH
	DD	07H
	DD	0fH
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BF@LNCI@Burning?5Dead?5Captain?$AA@
	DB	04H
	DB	08H
	DB	06H
	ORG $+1
	DD	010H
	DD	01eH
	DB	02H
	ORG $+3
	DD	00H
	DB	02H
	DB	023H
	DB	08H
	DB	04H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	ORG $+1
	DW	04aH
	DW	058H
	DW	00H
	DB	03H
	ORG $+1
	DW	0189H
	ORG $+2
	DD	080H
	DD	023fH
	DD	FLAT:??_C@_0BM@LPCM@Monsters?2SkelSd?2SklSr?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BO@JGHO@Monsters?2SkelSd?2SklSr?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BK@JMMO@Monsters?2SkelSd?2Black?4TRN?$AA@
	DD	0dH
	DD	08H
	DD	0cH
	DD	07H
	DD	0fH
	DD	010H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0P@MKB@Horror?5Captain?$AA@
	DB	06H
	DB	0aH
	DB	08H
	ORG $+1
	DD	023H
	DD	032H
	DB	02H
	ORG $+3
	DD	0100H
	DB	03H
	DB	028H
	DB	08H
	DB	05H
	DB	0eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01eH
	DB	00H
	ORG $+1
	DW	04cH
	DW	04cH
	DW	00H
	DB	03H
	ORG $+1
	DW	025cH
	ORG $+2
	DD	080H
	DD	07d0H
	DD	FLAT:??_C@_0BN@EHND@Monsters?2TSneak?2TSneak?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BP@FIIK@Monsters?2TSneak?2Sneakl?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0dH
	DD	0dH
	DD	0fH
	DD	0bH
	DD	010H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0P@KBCM@Invisible?5Lord?$AA@
	DB	0eH
	DB	0eH
	DB	0eH
	ORG $+1
	DD	0116H
	DD	0116H
	DB	02H
	ORG $+3
	DD	0100H
	DB	03H
	DB	041H
	DB	08H
	DB	010H
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03cH
	DB	01H
	ORG $+1
	DW	047H
	DW	047H
	DW	00H
	DB	03H
	ORG $+1
	DW	07d0H
	ORG $+2
	DD	080H
	DD	03e0H
	DD	FLAT:??_C@_0BL@OIAO@Monsters?2Sneak?2Sneak?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@IEAE@Monsters?2Sneak?2Sneak?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	08H
	DD	0cH
	DD	08H
	DD	018H
	DD	0fH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06OCEO@Hidden?$AA@
	DB	03H
	DB	08H
	DB	05H
	ORG $+1
	DD	08H
	DD	018H
	DB	0fH
	ORG $+3
	DD	01H
	DB	00H
	DB	023H
	DB	08H
	DB	03H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	019H
	DB	01H
	ORG $+1
	DW	00H
	DW	040H
	DW	00H
	DB	03H
	ORG $+1
	DW	0116H
	ORG $+2
	DD	080H
	DD	03e0H
	DD	FLAT:??_C@_0BL@OIAO@Monsters?2Sneak?2Sneak?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@IEAE@Monsters?2Sneak?2Sneak?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@FIHM@Monsters?2Sneak?2Sneakv2?4TRN?$AA@
	DD	010H
	DD	08H
	DD	0cH
	DD	08H
	DD	018H
	DD	0fH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_07JKLP@Stalker?$AA@
	DB	08H
	DB	0cH
	DB	09H
	ORG $+1
	DD	01eH
	DD	02dH
	DB	0fH
	ORG $+3
	DD	0101H
	DB	01H
	DB	028H
	DB	08H
	DB	08H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01eH
	DB	01H
	ORG $+1
	DW	00H
	DW	040H
	DW	00H
	DB	03H
	ORG $+1
	DW	0276H
	ORG $+2
	DD	080H
	DD	03e0H
	DD	FLAT:??_C@_0BL@OIAO@Monsters?2Sneak?2Sneak?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@IEAE@Monsters?2Sneak?2Sneak?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@PIFJ@Monsters?2Sneak?2Sneakv3?4TRN?$AA@
	DD	010H
	DD	08H
	DD	0cH
	DD	08H
	DD	018H
	DD	0fH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06ELBO@Unseen?$AA@
	DB	0aH
	DB	0eH
	DB	0bH
	ORG $+1
	DD	023H
	DD	032H
	DB	0fH
	ORG $+3
	DD	0101H
	DB	02H
	DB	02dH
	DB	08H
	DB	0cH
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01eH
	DB	01H
	ORG $+1
	DW	041H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	03a7H
	ORG $+2
	DD	080H
	DD	03e0H
	DD	FLAT:??_C@_0BL@OIAO@Monsters?2Sneak?2Sneak?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@IEAE@Monsters?2Sneak?2Sneak?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@LIBD@Monsters?2Sneak?2Sneakv1?4TRN?$AA@
	DD	010H
	DD	08H
	DD	0cH
	DD	08H
	DD	018H
	DD	0fH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BA@LANI@Illusion?5Weaver?$AA@
	DB	0eH
	DB	012H
	DB	0dH
	ORG $+1
	DD	028H
	DD	03cH
	DB	0fH
	ORG $+3
	DD	0101H
	DB	03H
	DB	03cH
	DB	08H
	DB	010H
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01eH
	DB	01H
	ORG $+1
	DW	03H
	DW	04aH
	DW	00H
	DB	03H
	ORG $+1
	DW	05dcH
	ORG $+2
	DD	0a0H
	DD	07d0H
	DD	FLAT:??_C@_0BO@FGPM@Monsters?2GoatLord?2GoatL?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0CA@ECCN@Monsters?2GoatLord?2Goatl?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0dH
	DD	0dH
	DD	0eH
	DD	09H
	DD	010H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@BAIA@Lord?5Sayter?$AA@
	DB	0dH
	DB	0dH
	DB	0cH
	ORG $+1
	DD	015fH
	DD	015fH
	DB	02H
	ORG $+3
	DD	0100H
	DB	03H
	DB	050H
	DB	08H
	DB	0eH
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03cH
	DB	01H
	ORG $+1
	DW	043H
	DW	043H
	DW	00H
	DB	03H
	ORG $+1
	DW	05dcH
	ORG $+2
	DD	080H
	DD	0406H
	DD	FLAT:??_C@_0BN@OGDO@Monsters?2GoatMace?2Goat?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@CPIM@Monsters?2GoatMace?2Goat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0cH
	DD	08H
	DD	0cH
	DD	06H
	DD	014H
	DD	0cH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0L@PPFJ@Flesh?5Clan?$AA@
	DB	06H
	DB	0aH
	DB	08H
	ORG $+1
	DD	01eH
	DD	02dH
	DB	06H
	ORG $+3
	DD	0300H
	DB	00H
	DB	032H
	DB	08H
	DB	04H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	028H
	DB	01H
	ORG $+1
	DW	00H
	DW	00H
	DW	00H
	DB	03H
	ORG $+1
	DW	01ccH
	ORG $+2
	DD	080H
	DD	0406H
	DD	FLAT:??_C@_0BN@OGDO@Monsters?2GoatMace?2Goat?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@CPIM@Monsters?2GoatMace?2Goat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BM@DGOA@Monsters?2GoatMace?2Beige?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	0cH
	DD	06H
	DD	014H
	DD	0cH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0L@DDEJ@Stone?5Clan?$AA@
	DB	08H
	DB	0cH
	DB	0aH
	ORG $+1
	DD	028H
	DD	037H
	DB	06H
	ORG $+3
	DD	0300H
	DB	01H
	DB	03cH
	DB	08H
	DB	06H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	028H
	DB	01H
	ORG $+1
	DW	041H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	02adH
	ORG $+2
	DD	080H
	DD	0406H
	DD	FLAT:??_C@_0BN@OGDO@Monsters?2GoatMace?2Goat?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@CPIM@Monsters?2GoatMace?2Goat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BK@IMBO@Monsters?2GoatMace?2Red?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	0cH
	DD	06H
	DD	014H
	DD	0cH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_09NBOI@Fire?5Clan?$AA@
	DB	0aH
	DB	0eH
	DB	0cH
	ORG $+1
	DD	032H
	DD	041H
	DB	06H
	ORG $+3
	DD	0300H
	DB	02H
	DB	046H
	DB	08H
	DB	08H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02dH
	DB	01H
	ORG $+1
	DW	02H
	DW	010H
	DW	00H
	DB	03H
	ORG $+1
	DW	038aH
	ORG $+2
	DD	080H
	DD	0406H
	DD	FLAT:??_C@_0BN@OGDO@Monsters?2GoatMace?2Goat?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@CPIM@Monsters?2GoatMace?2Goat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@CPGA@Monsters?2GoatMace?2Gray?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	0cH
	DD	06H
	DD	014H
	DD	0cH
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0L@JFLE@Night?5Clan?$AA@
	DB	0cH
	DB	010H
	DB	0eH
	ORG $+1
	DD	037H
	DD	046H
	DB	06H
	ORG $+3
	DD	0300H
	DB	03H
	DB	050H
	DB	08H
	DB	0aH
	DB	014H
	DB	0fH
	DB	00H
	DB	01eH
	DB	01eH
	DB	032H
	DB	01H
	ORG $+1
	DW	041H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	04a6H
	ORG $+2
	DD	060H
	DD	016cH
	DD	FLAT:??_C@_0BH@KIOP@Monsters?2Bat?2Bat?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BJ@JLKA@Monsters?2Bat?2Bat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BF@FLIN@Monsters?2Bat?2red?4trn?$AA@
	DD	09H
	DD	0dH
	DD	0aH
	DD	09H
	DD	0dH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05FJN@Fiend?$AA@
	DB	02H
	DB	05H
	DB	03H
	ORG $+1
	DD	03H
	DD	06H
	DB	0bH
	ORG $+3
	DD	00H
	DB	00H
	DB	023H
	DB	05H
	DB	01H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	ORG $+1
	DW	00H
	DW	00H
	DW	04000H
	DB	06H
	ORG $+1
	DW	066H
	ORG $+2
	DD	060H
	DD	016cH
	DD	FLAT:??_C@_0BH@KIOP@Monsters?2Bat?2Bat?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BJ@JLKA@Monsters?2Bat?2Bat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	09H
	DD	0dH
	DD	0aH
	DD	09H
	DD	0dH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05OMKA@Blink?$AA@
	DB	05H
	DB	09H
	DB	07H
	ORG $+1
	DD	0cH
	DD	01cH
	DB	0bH
	ORG $+3
	DD	00H
	DB	01H
	DB	02dH
	DB	05H
	DB	01H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	02H
	ORG $+1
	DW	00H
	DW	00H
	DW	04000H
	DB	06H
	ORG $+1
	DW	0154H
	ORG $+2
	DD	060H
	DD	016cH
	DD	FLAT:??_C@_0BH@KIOP@Monsters?2Bat?2Bat?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BJ@JLKA@Monsters?2Bat?2Bat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BG@BDJF@Monsters?2Bat?2grey?4trn?$AA@
	DD	09H
	DD	0dH
	DD	0aH
	DD	09H
	DD	0dH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05MJLP@Gloom?$AA@
	DB	07H
	DB	0bH
	DB	09H
	ORG $+1
	DD	01cH
	DD	024H
	DB	0bH
	ORG $+3
	DD	0100H
	DB	02H
	DB	046H
	DB	05H
	DB	04H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	023H
	DB	02H
	ORG $+1
	DW	01H
	DW	041H
	DW	04000H
	DB	06H
	ORG $+1
	DW	01fdH
	ORG $+2
	DD	060H
	DD	016cH
	DD	FLAT:??_C@_0BH@KIOP@Monsters?2Bat?2Bat?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BJ@JLKA@Monsters?2Bat?2Bat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BI@NFPN@Monsters?2Bat?2orange?4trn?$AA@
	DD	09H
	DD	0dH
	DD	0aH
	DD	09H
	DD	0dH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08NKDG@Familiar?$AA@
	DB	0bH
	DB	0fH
	DB	0dH
	ORG $+1
	DD	014H
	DD	023H
	DB	0bH
	ORG $+3
	DD	0100H
	DB	03H
	DB	032H
	DB	05H
	DB	04H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	023H
	DB	01H
	ORG $+1
	DW	021H
	DW	061H
	DW	04000H
	DB	06H
	ORG $+1
	DW	01c0H
	ORG $+2
	DD	080H
	DD	0410H
	DD	FLAT:??_C@_0BN@KDEJ@Monsters?2GoatBow?2GoatB?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BP@DOBM@Monsters?2GoatBow?2GoatB?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0cH
	DD	08H
	DD	010H
	DD	06H
	DD	014H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@PPFJ@Flesh?5Clan?$AA@
	DB	06H
	DB	0aH
	DB	08H
	ORG $+1
	DD	014H
	DD	023H
	DB	07H
	ORG $+3
	DD	0200H
	DB	00H
	DB	023H
	DB	0dH
	DB	01H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	023H
	DB	01H
	ORG $+1
	DW	00H
	DW	00H
	DW	00H
	DB	03H
	ORG $+1
	DW	01c0H
	ORG $+2
	DD	080H
	DD	0410H
	DD	FLAT:??_C@_0BN@KDEJ@Monsters?2GoatBow?2GoatB?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BP@DOBM@Monsters?2GoatBow?2GoatB?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@NIME@Monsters?2GoatBow?2Beige?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	010H
	DD	06H
	DD	014H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@DDEJ@Stone?5Clan?$AA@
	DB	08H
	DB	0cH
	DB	0aH
	ORG $+1
	DD	01eH
	DD	028H
	DB	07H
	ORG $+3
	DD	0200H
	DB	01H
	DB	028H
	DB	0dH
	DB	02H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	023H
	DB	01H
	ORG $+1
	DW	041H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	0285H
	ORG $+2
	DD	080H
	DD	0410H
	DD	FLAT:??_C@_0BN@KDEJ@Monsters?2GoatBow?2GoatB?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BP@DOBM@Monsters?2GoatBow?2GoatB?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@NLCC@Monsters?2GoatBow?2Red?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	010H
	DD	06H
	DD	014H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09NBOI@Fire?5Clan?$AA@
	DB	0aH
	DB	0eH
	DB	0cH
	ORG $+1
	DD	028H
	DD	032H
	DB	07H
	ORG $+3
	DD	0300H
	DB	02H
	DB	02dH
	DB	0dH
	DB	03H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	023H
	DB	01H
	ORG $+1
	DW	02H
	DW	010H
	DW	00H
	DB	03H
	ORG $+1
	DW	0336H
	ORG $+2
	DD	080H
	DD	0410H
	DD	FLAT:??_C@_0BN@KDEJ@Monsters?2GoatBow?2GoatB?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BP@DOBM@Monsters?2GoatBow?2GoatB?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BK@LDH@Monsters?2GoatBow?2Gray?4TRN?$AA@
	DD	0cH
	DD	08H
	DD	010H
	DD	06H
	DD	014H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@JFLE@Night?5Clan?$AA@
	DB	0cH
	DB	010H
	DB	0eH
	ORG $+1
	DD	032H
	DD	041H
	DB	07H
	ORG $+3
	DD	0300H
	DB	03H
	DB	032H
	DB	0dH
	DB	04H
	DB	0dH
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	028H
	DB	01H
	ORG $+1
	DW	041H
	DW	048H
	DW	00H
	DB	03H
	ORG $+1
	DW	0444H
	ORG $+2
	DD	080H
	DD	02ccH
	DD	FLAT:??_C@_0BJ@CGEO@Monsters?2Acid?2Acid?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	00H
	DD	00H
	DD	0dH
	DD	08H
	DD	0cH
	DD	08H
	DD	010H
	DD	0cH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@NECC@Acid?5Beast?$AA@
	DB	0aH
	DB	0eH
	DB	0bH
	ORG $+1
	DD	028H
	DD	042H
	DB	013H
	ORG $+3
	DD	00H
	DB	00H
	DB	028H
	DB	08H
	DB	04H
	DB	0cH
	DB	019H
	DB	08H
	DB	00H
	DB	00H
	DB	01eH
	DB	02H
	ORG $+1
	DW	080H
	DW	088H
	DW	00H
	DB	03H
	ORG $+1
	DW	034eH
	ORG $+2
	DD	080H
	DD	02ccH
	DD	FLAT:??_C@_0BJ@CGEO@Monsters?2Acid?2Acid?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BK@MMPI@Monsters?2Acid?2AcidBlk?4TRN?$AA@
	DD	0dH
	DD	08H
	DD	0cH
	DD	08H
	DD	010H
	DD	0cH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0P@NPHN@Poison?5Spitter?$AA@
	DB	0eH
	DB	012H
	DB	0fH
	ORG $+1
	DD	03cH
	DD	055H
	DB	013H
	ORG $+3
	DD	00H
	DB	01H
	DB	02dH
	DB	08H
	DB	04H
	DB	010H
	DB	019H
	DB	08H
	DB	00H
	DB	00H
	DB	01eH
	DB	02H
	ORG $+1
	DW	080H
	DW	088H
	DW	00H
	DB	03H
	ORG $+1
	DW	04e0H
	ORG $+2
	DD	080H
	DD	02ccH
	DD	FLAT:??_C@_0BJ@CGEO@Monsters?2Acid?2Acid?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BI@KIAF@Monsters?2Acid?2AcidB?4TRN?$AA@
	DD	0dH
	DD	08H
	DD	0cH
	DD	08H
	DD	010H
	DD	0cH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09GJHH@Pit?5Beast?$AA@
	DB	012H
	DB	016H
	DB	015H
	ORG $+1
	DD	050H
	DD	06eH
	DB	013H
	ORG $+3
	DD	00H
	DB	02H
	DB	037H
	DB	08H
	DB	08H
	DB	012H
	DB	023H
	DB	08H
	DB	00H
	DB	00H
	DB	023H
	DB	02H
	ORG $+1
	DW	081H
	DW	08cH
	DW	00H
	DB	03H
	ORG $+1
	DW	080cH
	ORG $+2
	DD	080H
	DD	02ccH
	DD	FLAT:??_C@_0BJ@CGEO@Monsters?2Acid?2Acid?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BI@KKFA@Monsters?2Acid?2AcidR?4TRN?$AA@
	DD	0dH
	DD	08H
	DD	0cH
	DD	08H
	DD	010H
	DD	0cH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08KCMP@Lava?5Maw?$AA@
	DB	016H
	DB	01bH
	DB	019H
	ORG $+1
	DD	064H
	DD	096H
	DB	013H
	ORG $+3
	DD	00H
	DB	03H
	DB	041H
	DB	08H
	DB	0aH
	DB	014H
	DB	028H
	DB	08H
	DB	00H
	DB	00H
	DB	023H
	DB	02H
	ORG $+1
	DW	091H
	DW	098H
	DW	00H
	DB	03H
	ORG $+1
	DW	0b7cH
	ORG $+2
	DD	0a0H
	DD	03f2H
	DD	FLAT:??_C@_0BL@OAFB@Monsters?2SKing?2SKing?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@KOJK@Monsters?2SKing?2SKing?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BL@LDMJ@Monsters?2SkelAxe?2White?4TRN?$AA@
	DD	08H
	DD	06H
	DD	010H
	DD	06H
	DD	010H
	DD	06H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:??_C@_0O@COOI@Skeleton?5King?$AA@
	DB	06H
	DB	06H
	DB	09H
	ORG $+1
	DD	08cH
	DD	08cH
	DB	0aH
	ORG $+3
	DD	0300H
	DB	03H
	DB	03cH
	DB	08H
	DB	06H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	00H
	ORG $+1
	DW	04eH
	DW	078H
	DW	08001H
	DB	07H
	ORG $+1
	DW	023aH
	ORG $+2
	DD	080H
	DD	03d4H
	DD	FLAT:??_C@_0BJ@IFKI@Monsters?2FatC?2FatC?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BL@IGFL@Monsters?2FatC?2FatC?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0aH
	DD	08H
	DD	0cH
	DD	06H
	DD	010H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@OGO@The?5Butcher?$AA@
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	0140H
	DD	0140H
	DB	0dH
	ORG $+3
	DD	00H
	DB	03H
	DB	032H
	DB	08H
	DB	06H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	032H
	DB	01H
	ORG $+1
	DW	06H
	DW	031H
	DW	08000H
	DB	03H
	ORG $+1
	DW	02c6H
	ORG $+2
	DD	080H
	DD	046aH
	DD	FLAT:??_C@_0BH@OEHI@Monsters?2Fat?2Fat?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	08H
	DD	0aH
	DD	0fH
	DD	06H
	DD	010H
	DD	0aH
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08FGOM@Overlord?$AA@
	DB	08H
	DB	0cH
	DB	0aH
	ORG $+1
	DD	03cH
	DD	050H
	DB	01H
	ORG $+3
	DD	00H
	DB	00H
	DB	037H
	DB	08H
	DB	06H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	037H
	DB	01H
	ORG $+1
	DW	00H
	DW	02H
	DW	00H
	DB	03H
	ORG $+1
	DW	027bH
	ORG $+2
	DD	080H
	DD	046aH
	DD	FLAT:??_C@_0BH@OEHI@Monsters?2Fat?2Fat?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BG@KPHM@Monsters?2Fat?2Blue?4TRN?$AA@
	DD	08H
	DD	0aH
	DD	0fH
	DD	06H
	DD	010H
	DD	0aH
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_07BNOE@Mud?5Man?$AA@
	DB	0dH
	DB	011H
	DB	0eH
	ORG $+1
	DD	064H
	DD	07dH
	DB	01H
	ORG $+3
	DD	0100H
	DB	01H
	DB	03cH
	DB	08H
	DB	08H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03cH
	DB	01H
	ORG $+1
	DW	00H
	DW	020H
	DW	00H
	DB	03H
	ORG $+1
	DW	048dH
	ORG $+2
	DD	080H
	DD	046aH
	DD	FLAT:??_C@_0BH@OEHI@Monsters?2Fat?2Fat?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BG@JOFI@Monsters?2Fat?2FatB?4TRN?$AA@
	DD	08H
	DD	0aH
	DD	0fH
	DD	06H
	DD	010H
	DD	0aH
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@PHFJ@Toad?5Demon?$AA@
	DB	0fH
	DB	013H
	DB	010H
	ORG $+1
	DD	087H
	DD	0a0H
	DB	01H
	ORG $+3
	DD	0100H
	DB	02H
	DB	046H
	DB	08H
	DB	08H
	DB	010H
	DB	028H
	DB	00H
	DB	08H
	DB	014H
	DB	041H
	DB	01H
	ORG $+1
	DW	08H
	DW	0cH
	DW	00H
	DB	03H
	ORG $+1
	DW	0564H
	ORG $+2
	DD	080H
	DD	046aH
	DD	FLAT:??_C@_0BH@OEHI@Monsters?2Fat?2Fat?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BG@BOMN@Monsters?2Fat?2FatF?4TRN?$AA@
	DD	08H
	DD	0aH
	DD	0fH
	DD	06H
	DD	010H
	DD	0aH
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@ELFK@Flayed?5One?$AA@
	DB	013H
	DB	017H
	DB	014H
	ORG $+1
	DD	0a0H
	DD	0c8H
	DB	01H
	ORG $+3
	DD	0100H
	DB	03H
	DB	055H
	DB	08H
	DB	0aH
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	01H
	ORG $+1
	DW	011H
	DW	018H
	DW	00H
	DB	03H
	ORG $+1
	DW	080aH
	ORG $+2
	DD	0a0H
	DD	0974H
	DD	FLAT:??_C@_0BJ@OKOD@Monsters?2Worm?2Worm?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0dH
	DD	0dH
	DD	0dH
	DD	0bH
	DD	013H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_04EEPE@Wyrm?$AA@
	DB	09H
	DB	0dH
	DB	0bH
	ORG $+1
	DD	03cH
	DD	05aH
	DB	02H
	ORG $+3
	DD	00H
	DB	00H
	DB	028H
	DB	08H
	DB	04H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	019H
	DB	02H
	ORG $+1
	DW	01H
	DW	01H
	DW	00H
	DB	03H
	ORG $+1
	DW	0294H
	ORG $+2
	DD	0a0H
	DD	0974H
	DD	FLAT:??_C@_0BJ@OKOD@Monsters?2Worm?2Worm?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0dH
	DD	0dH
	DD	0dH
	DD	0bH
	DD	013H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09HKKP@Cave?5Slug?$AA@
	DB	0bH
	DB	0fH
	DB	0dH
	ORG $+1
	DD	04bH
	DD	06eH
	DB	02H
	ORG $+3
	DD	00H
	DB	01H
	DB	032H
	DB	08H
	DB	06H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01eH
	DB	02H
	ORG $+1
	DW	01H
	DW	01H
	DW	00H
	DB	03H
	ORG $+1
	DW	03e2H
	ORG $+2
	DD	0a0H
	DD	0974H
	DD	FLAT:??_C@_0BJ@OKOD@Monsters?2Worm?2Worm?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0dH
	DD	0dH
	DD	0dH
	DD	0bH
	DD	013H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@KJLC@Devil?5Wyrm?$AA@
	DB	0dH
	DB	011H
	DB	0fH
	ORG $+1
	DD	064H
	DD	08cH
	DB	02H
	ORG $+3
	DD	00H
	DB	02H
	DB	037H
	DB	08H
	DB	08H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01eH
	DB	02H
	ORG $+1
	DW	03H
	DW	03H
	DW	00H
	DB	03H
	ORG $+1
	DW	0528H
	ORG $+2
	DD	0a0H
	DD	0974H
	DD	FLAT:??_C@_0BJ@OKOD@Monsters?2Worm?2Worm?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BJ@DLBO@Monsters?2Fat?2Fat?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0dH
	DD	0dH
	DD	0dH
	DD	0bH
	DD	013H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08DOKM@Devourer?$AA@
	DB	0fH
	DB	013H
	DB	011H
	ORG $+1
	DD	07dH
	DD	0c8H
	DB	02H
	ORG $+3
	DD	00H
	DB	03H
	DB	03cH
	DB	08H
	DB	0aH
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	023H
	DB	02H
	ORG $+1
	DW	043H
	DW	043H
	DW	00H
	DB	03H
	ORG $+1
	DW	0723H
	ORG $+2
	DD	080H
	DD	0690H
	DD	FLAT:??_C@_0BL@GJJN@Monsters?2Magma?2Magma?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@LADC@Monsters?2Magma?2Magma?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	00H
	DD	00H
	DD	08H
	DD	0aH
	DD	0eH
	DD	07H
	DD	012H
	DD	012H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0M@BDIN@Magma?5Demon?$AA@
	DB	0eH
	DB	011H
	DB	0dH
	ORG $+1
	DD	032H
	DD	046H
	DB	09H
	ORG $+3
	DD	0300H
	DB	00H
	DB	02dH
	DB	04H
	DB	02H
	DB	0aH
	DB	032H
	DB	0dH
	DB	00H
	DB	00H
	DB	02dH
	DB	01H
	ORG $+1
	DW	0aH
	DW	018H
	DW	00H
	DB	07H
	ORG $+1
	DW	0434H
	ORG $+2
	DD	080H
	DD	0690H
	DD	FLAT:??_C@_0BL@GJJN@Monsters?2Magma?2Magma?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@LADC@Monsters?2Magma?2Magma?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BK@PAJG@Monsters?2Magma?2Yellow?4TRN?$AA@
	DD	08H
	DD	0aH
	DD	0eH
	DD	07H
	DD	012H
	DD	012H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0M@BAA@Blood?5Stone?$AA@
	DB	0fH
	DB	013H
	DB	0eH
	ORG $+1
	DD	037H
	DD	04bH
	DB	09H
	ORG $+3
	DD	0300H
	DB	01H
	DB	032H
	DB	04H
	DB	02H
	DB	0cH
	DB	032H
	DB	0eH
	DB	00H
	DB	00H
	DB	02dH
	DB	01H
	ORG $+1
	DW	018H
	DW	018H
	DW	00H
	DB	07H
	ORG $+1
	DW	051dH
	ORG $+2
	DD	080H
	DD	0690H
	DD	FLAT:??_C@_0BL@GJJN@Monsters?2Magma?2Magma?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@LADC@Monsters?2Magma?2Magma?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BI@HBBI@Monsters?2Magma?2Blue?4TRN?$AA@
	DD	08H
	DD	0aH
	DD	0eH
	DD	07H
	DD	012H
	DD	012H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0L@IKKA@Hell?5Stone?$AA@
	DB	010H
	DB	014H
	DB	010H
	ORG $+1
	DD	03cH
	DD	050H
	DB	09H
	ORG $+3
	DD	0300H
	DB	02H
	DB	03cH
	DB	04H
	DB	02H
	DB	014H
	DB	03cH
	DB	0eH
	DB	00H
	DB	00H
	DB	032H
	DB	01H
	ORG $+1
	DW	018H
	DW	018H
	DW	00H
	DB	07H
	ORG $+1
	DW	0690H
	ORG $+2
	DD	080H
	DD	0690H
	DD	FLAT:??_C@_0BL@GJJN@Monsters?2Magma?2Magma?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@LADC@Monsters?2Magma?2Magma?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BJ@KPPL@Monsters?2Magma?2Wierd?4TRN?$AA@
	DD	08H
	DD	0aH
	DD	0eH
	DD	07H
	DD	012H
	DD	012H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_09JMEO@Lava?5Lord?$AA@
	DB	011H
	DB	015H
	DB	012H
	ORG $+1
	DD	046H
	DD	055H
	DB	09H
	ORG $+3
	DD	0300H
	DB	03H
	DB	04bH
	DB	04H
	DB	04H
	DB	018H
	DB	03cH
	DB	0eH
	DB	00H
	DB	00H
	DB	03cH
	DB	01H
	ORG $+1
	DW	018H
	DW	018H
	DW	00H
	DB	07H
	ORG $+1
	DW	084cH
	ORG $+2
	DD	0a0H
	DD	065eH
	DD	FLAT:??_C@_0BL@DDCB@Monsters?2Rhino?2Rhino?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@INFH@Monsters?2Rhino?2Rhino?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	00H
	DD	00H
	DD	08H
	DD	08H
	DD	0eH
	DD	06H
	DD	010H
	DD	06H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0N@OLEB@Horned?5Demon?$AA@
	DB	0cH
	DB	010H
	DB	0dH
	ORG $+1
	DD	028H
	DD	050H
	DB	05H
	ORG $+3
	DD	0300H
	DB	00H
	DB	03cH
	DB	07H
	DB	02H
	DB	010H
	DB	064H
	DB	00H
	DB	05H
	DB	020H
	DB	028H
	DB	02H
	ORG $+1
	DW	00H
	DW	02H
	DW	00H
	DB	07H
	ORG $+1
	DW	0494H
	ORG $+2
	DD	0a0H
	DD	065eH
	DD	FLAT:??_C@_0BL@DDCB@Monsters?2Rhino?2Rhino?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@INFH@Monsters?2Rhino?2Rhino?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BK@MPLB@Monsters?2Rhino?2Orange?4TRN?$AA@
	DD	08H
	DD	08H
	DD	0eH
	DD	06H
	DD	010H
	DD	06H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@EIAJ@Mud?5Runner?$AA@
	DB	0eH
	DB	012H
	DB	0fH
	ORG $+1
	DD	032H
	DD	05aH
	DB	05H
	ORG $+3
	DD	0300H
	DB	01H
	DB	046H
	DB	07H
	DB	06H
	DB	012H
	DB	064H
	DB	00H
	DB	0cH
	DB	024H
	DB	02dH
	DB	02H
	ORG $+1
	DW	00H
	DW	02H
	DW	00H
	DB	07H
	ORG $+1
	DW	057cH
	ORG $+2
	DD	0a0H
	DD	065eH
	DD	FLAT:??_C@_0BL@DDCB@Monsters?2Rhino?2Rhino?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@INFH@Monsters?2Rhino?2Rhino?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BI@KPBF@Monsters?2Rhino?2Blue?4TRN?$AA@
	DD	08H
	DD	08H
	DD	0eH
	DD	06H
	DD	010H
	DD	06H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0O@HAFD@Frost?5Charger?$AA@
	DB	010H
	DB	014H
	DB	011H
	ORG $+1
	DD	03cH
	DD	064H
	DB	05H
	ORG $+3
	DD	0300H
	DB	02H
	DB	050H
	DB	07H
	DB	08H
	DB	014H
	DB	064H
	DB	00H
	DB	014H
	DB	028H
	DB	032H
	DB	02H
	ORG $+1
	DW	0cH
	DW	0cH
	DW	00H
	DB	07H
	ORG $+1
	DW	06b8H
	ORG $+2
	DD	0a0H
	DD	065eH
	DD	FLAT:??_C@_0BL@DDCB@Monsters?2Rhino?2Rhino?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BN@INFH@Monsters?2Rhino?2Rhino?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BK@MHDK@Monsters?2Rhino?2RhinoB?4TRN?$AA@
	DD	08H
	DD	08H
	DD	0eH
	DD	06H
	DD	010H
	DD	06H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0O@FPB@Obsidian?5Lord?$AA@
	DB	012H
	DB	016H
	DB	013H
	ORG $+1
	DD	046H
	DD	06eH
	DB	05H
	ORG $+3
	DD	0300H
	DB	03H
	DB	05aH
	DB	07H
	DB	0aH
	DB	016H
	DB	064H
	DB	00H
	DB	014H
	DB	032H
	DB	037H
	DB	02H
	ORG $+1
	DW	0cH
	DW	038H
	DW	00H
	DB	07H
	ORG $+1
	DW	0711H
	ORG $+2
	DD	080H
	DD	06ccH
	DD	FLAT:??_C@_0BO@PCKO@Monsters?2Demskel?2Demskl?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0BJ@LDDE@Monsters?2Thin?2Thinv3?4TRN?$AA@
	DD	0aH
	DD	08H
	DD	014H
	DD	06H
	DD	018H
	DD	010H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@LMNI@Bone?5Demon?$AA@
	DB	0aH
	DB	0eH
	DB	0cH
	ORG $+1
	DD	046H
	DD	046H
	DB	010H
	ORG $+3
	DD	00H
	DB	00H
	DB	03cH
	DB	08H
	DB	06H
	DB	0eH
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	032H
	DB	01H
	ORG $+1
	DW	048H
	DW	048H
	DW	00H
	DB	07H
	ORG $+1
	DW	0540H
	ORG $+2
	DD	0a0H
	DD	06ccH
	DD	FLAT:??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BJ@LDDE@Monsters?2Thin?2Thinv3?4TRN?$AA@
	DD	08H
	DD	08H
	DD	012H
	DD	04H
	DD	011H
	DD	0eH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09JDGN@Red?5Death?$AA@
	DB	0eH
	DB	012H
	DB	010H
	ORG $+1
	DD	060H
	DD	060H
	DB	010H
	ORG $+3
	DD	00H
	DB	01H
	DB	04bH
	DB	05H
	DB	0aH
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03cH
	DB	01H
	ORG $+1
	DW	018H
	DW	018H
	DW	00H
	DB	07H
	ORG $+1
	DW	0878H
	ORG $+2
	DD	0a0H
	DD	06ccH
	DD	FLAT:??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BJ@LDDE@Monsters?2Thin?2Thinv3?4TRN?$AA@
	DD	08H
	DD	08H
	DD	012H
	DD	04H
	DD	011H
	DD	0eH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@EOOB@Litch?5Demon?$AA@
	DB	010H
	DB	014H
	DB	012H
	ORG $+1
	DD	06eH
	DD	06eH
	DB	010H
	ORG $+3
	DD	00H
	DB	02H
	DB	050H
	DB	05H
	DB	0aH
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02dH
	DB	01H
	ORG $+1
	DW	068H
	DW	068H
	DW	00H
	DB	07H
	ORG $+1
	DW	0ab0H
	ORG $+2
	DD	0a0H
	DD	06ccH
	DD	FLAT:??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BJ@LDDE@Monsters?2Thin?2Thinv3?4TRN?$AA@
	DD	08H
	DD	08H
	DD	012H
	DD	04H
	DD	011H
	DD	0eH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0O@HMDJ@Undead?5Balrog?$AA@
	DB	014H
	DB	018H
	DB	016H
	ORG $+1
	DD	082H
	DD	082H
	DB	010H
	ORG $+3
	DD	00H
	DB	03H
	DB	055H
	DB	05H
	DB	0cH
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	01H
	ORG $+1
	DW	04eH
	DW	04eH
	DW	00H
	DB	07H
	ORG $+1
	DW	0df7H
	ORG $+2
	DD	080H
	DD	05b4H
	DD	FLAT:??_C@_0BN@JOPB@Monsters?2Fireman?2FireM?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	013H
	DD	014H
	DD	08H
	DD	0eH
	DD	017H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@LACM@Incinerator?$AA@
	DB	0eH
	DB	012H
	DB	010H
	ORG $+1
	DD	01eH
	DD	02dH
	DB	011H
	ORG $+3
	DD	00H
	DB	00H
	DB	04bH
	DB	08H
	DB	08H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	019H
	DB	01H
	ORG $+1
	DW	018H
	DW	018H
	DW	00H
	DB	03H
	ORG $+1
	DW	0760H
	ORG $+2
	DD	080H
	DD	05b4H
	DD	FLAT:??_C@_0BN@JOPB@Monsters?2Fireman?2FireM?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	013H
	DD	014H
	DD	08H
	DD	0eH
	DD	017H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@LNJN@Flame?5Lord?$AA@
	DB	010H
	DB	014H
	DB	012H
	ORG $+1
	DD	028H
	DD	037H
	DB	011H
	ORG $+3
	DD	00H
	DB	01H
	DB	04bH
	DB	08H
	DB	0aH
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	019H
	DB	01H
	ORG $+1
	DW	018H
	DW	018H
	DW	00H
	DB	03H
	ORG $+1
	DW	08caH
	ORG $+2
	DD	080H
	DD	05b4H
	DD	FLAT:??_C@_0BN@JOPB@Monsters?2Fireman?2FireM?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	013H
	DD	014H
	DD	08H
	DD	0eH
	DD	017H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09BBKL@Doom?5Fire?$AA@
	DB	012H
	DB	016H
	DB	014H
	ORG $+1
	DD	032H
	DD	041H
	DB	011H
	ORG $+3
	DD	00H
	DB	02H
	DB	050H
	DB	08H
	DB	0cH
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01eH
	DB	01H
	ORG $+1
	DW	01cH
	DW	01cH
	DW	00H
	DB	03H
	ORG $+1
	DW	0ab4H
	ORG $+2
	DD	080H
	DD	05b4H
	DD	FLAT:??_C@_0BN@JOPB@Monsters?2Fireman?2FireM?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	013H
	DD	014H
	DD	08H
	DD	0eH
	DD	017H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@DMNI@Hell?5Burner?$AA@
	DB	014H
	DB	018H
	DB	016H
	ORG $+1
	DD	03cH
	DD	050H
	DB	011H
	ORG $+3
	DD	00H
	DB	03H
	DB	055H
	DB	08H
	DB	0fH
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01eH
	DB	01H
	ORG $+1
	DW	01cH
	DW	01cH
	DW	00H
	DB	03H
	ORG $+1
	DW	0d1bH
	ORG $+2
	DD	0a0H
	DD	06ccH
	DD	FLAT:??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BJ@LDDE@Monsters?2Thin?2Thinv3?4TRN?$AA@
	DD	08H
	DD	08H
	DD	012H
	DD	04H
	DD	011H
	DD	0eH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09IKEH@Red?5Storm?$AA@
	DB	011H
	DB	015H
	DB	012H
	ORG $+1
	DD	037H
	DD	06eH
	DB	010H
	ORG $+3
	DD	0300H
	DB	00H
	DB	050H
	DB	05H
	DB	08H
	DB	012H
	DB	04bH
	DB	08H
	DB	04H
	DB	010H
	DB	01eH
	DB	01H
	ORG $+1
	DW	0cH
	DW	028H
	DW	00H
	DB	07H
	ORG $+1
	DW	0870H
	ORG $+2
	DD	0a0H
	DD	06ccH
	DD	FLAT:??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	00H
	DD	00H
	DD	08H
	DD	08H
	DD	012H
	DD	04H
	DD	011H
	DD	0eH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@ELEK@Storm?5Rider?$AA@
	DB	013H
	DB	017H
	DB	014H
	ORG $+1
	DD	03cH
	DD	078H
	DB	010H
	ORG $+3
	DD	0300H
	DB	01H
	DB	050H
	DB	05H
	DB	08H
	DB	012H
	DB	050H
	DB	08H
	DB	04H
	DB	010H
	DB	01eH
	DB	01H
	ORG $+1
	DW	021H
	DW	028H
	DW	00H
	DB	07H
	ORG $+1
	DW	0957H
	ORG $+2
	DD	0a0H
	DD	06ccH
	DD	FLAT:??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BJ@BDBB@Monsters?2Thin?2Thinv2?4TRN?$AA@
	DD	08H
	DD	08H
	DD	012H
	DD	04H
	DD	011H
	DD	0eH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@MPDM@Storm?5Lord?$AA@
	DB	015H
	DB	019H
	DB	016H
	ORG $+1
	DD	04bH
	DD	087H
	DB	010H
	ORG $+3
	DD	0300H
	DB	02H
	DB	055H
	DB	05H
	DB	0cH
	DB	018H
	DB	04bH
	DB	08H
	DB	04H
	DB	010H
	DB	023H
	DB	01H
	ORG $+1
	DW	021H
	DW	028H
	DW	00H
	DB	07H
	ORG $+1
	DW	0ad7H
	ORG $+2
	DD	0a0H
	DD	06ccH
	DD	FLAT:??_C@_0BJ@KDGD@Monsters?2Thin?2Thin?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@MEBK@Monsters?2Thin?2Thin?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BJ@PDHO@Monsters?2Thin?2Thinv1?4TRN?$AA@
	DD	08H
	DD	08H
	DD	012H
	DD	04H
	DD	011H
	DD	0eH
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09GKHB@Maelstorm?$AA@
	DB	017H
	DB	01bH
	DB	018H
	ORG $+1
	DD	05aH
	DD	096H
	DB	010H
	ORG $+3
	DD	0300H
	DB	03H
	DB	05aH
	DB	05H
	DB	0cH
	DB	01cH
	DB	04bH
	DB	08H
	DB	04H
	DB	010H
	DB	028H
	DB	01H
	ORG $+1
	DW	061H
	DW	068H
	DW	00H
	DB	07H
	ORG $+1
	DW	0c69H
	ORG $+2
	DD	080H
	DD	0672H
	DD	FLAT:??_C@_0BN@PDMB@Monsters?2BigFall?2Fallg?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BO@COGP@Monsters?2BigFall?2Bfal?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0aH
	DD	08H
	DD	0bH
	DD	08H
	DD	011H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	02H
	DD	FLAT:??_C@_0BA@FGGD@Devil?5Kin?5Brute?$AA@
	DB	014H
	DB	014H
	DB	018H
	ORG $+1
	DD	0a0H
	DD	0dcH
	DB	02H
	ORG $+3
	DD	0300H
	DB	03H
	DB	064H
	DB	06H
	DB	012H
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04bH
	DB	02H
	ORG $+1
	DW	00H
	DW	00H
	DW	00H
	DB	06H
	ORG $+1
	DW	07d0H
	ORG $+2
	DD	0a0H
	DD	0672H
	DD	FLAT:??_C@_0BO@DCJK@Monsters?2Gargoyle?2Gargo?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0CA@OJJF@Monsters?2Gargoyle?2Gargo?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	0eH
	DD	0eH
	DD	0aH
	DD	012H
	DD	0eH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:??_C@_0N@CHBP@Winged?9Demon?$AA@
	DB	08H
	DB	0cH
	DB	09H
	ORG $+1
	DD	02dH
	DD	03cH
	DB	0cH
	ORG $+3
	DD	0200H
	DB	00H
	DB	032H
	DB	07H
	DB	0aH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02dH
	DB	01H
	ORG $+1
	DW	04aH
	DW	058H
	DW	00H
	DB	06H
	ORG $+1
	DW	0296H
	ORG $+2
	DD	0a0H
	DD	0672H
	DD	FLAT:??_C@_0BO@DCJK@Monsters?2Gargoyle?2Gargo?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0CA@OJJF@Monsters?2Gargoyle?2Gargo?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BL@GLPH@Monsters?2Gargoyle?2GarE?4TRN?$AA@
	DD	0eH
	DD	0eH
	DD	0eH
	DD	0aH
	DD	012H
	DD	0eH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:??_C@_08HND@Gargoyle?$AA@
	DB	0cH
	DB	010H
	DB	0dH
	ORG $+1
	DD	03cH
	DD	05aH
	DB	0cH
	ORG $+3
	DD	0200H
	DB	01H
	DB	041H
	DB	07H
	DB	0aH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02dH
	DB	01H
	ORG $+1
	DW	04cH
	DW	068H
	DW	00H
	DB	06H
	ORG $+1
	DW	04b5H
	ORG $+2
	DD	0a0H
	DD	0672H
	DD	FLAT:??_C@_0BO@DCJK@Monsters?2Gargoyle?2Gargo?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0CA@OJJF@Monsters?2Gargoyle?2Gargo?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BN@KACC@Monsters?2Gargoyle?2GargBr?4TRN?$AA@
	DD	0eH
	DD	0eH
	DD	0eH
	DD	0aH
	DD	012H
	DD	0eH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@JKAG@Blood?5Claw?$AA@
	DB	010H
	DB	014H
	DB	013H
	ORG $+1
	DD	04bH
	DD	07dH
	DB	0cH
	ORG $+3
	DD	0200H
	DB	02H
	DB	050H
	DB	07H
	DB	0eH
	DB	016H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	032H
	DB	01H
	ORG $+1
	DW	058H
	DW	05cH
	DW	00H
	DB	06H
	ORG $+1
	DW	0751H
	ORG $+2
	DD	0a0H
	DD	0672H
	DD	FLAT:??_C@_0BO@DCJK@Monsters?2Gargoyle?2Gargo?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0CA@OJJF@Monsters?2Gargoyle?2Gargo?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BM@GEJG@Monsters?2Gargoyle?2GargB?4TRN?$AA@
	DD	0eH
	DD	0eH
	DD	0eH
	DD	0aH
	DD	012H
	DD	0eH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@CJIN@Death?5Wing?$AA@
	DB	012H
	DB	016H
	DB	017H
	ORG $+1
	DD	05aH
	DD	096H
	DB	0cH
	ORG $+3
	DD	0200H
	DB	03H
	DB	05fH
	DB	07H
	DB	010H
	DB	01cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03cH
	DB	01H
	ORG $+1
	DW	068H
	DW	06aH
	DW	00H
	DB	06H
	ORG $+1
	DW	08e6H
	ORG $+2
	DD	0a0H
	DD	08acH
	DD	FLAT:??_C@_0BJ@OHJC@Monsters?2Mega?2Mega?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@EJPE@Monsters?2Mega?2Mega?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	00H
	DD	00H
	DD	06H
	DD	07H
	DD	0eH
	DD	01H
	DD	018H
	DD	05H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	FLAT:??_C@_06MHAA@Slayer?$AA@
	DB	013H
	DB	017H
	DB	014H
	ORG $+1
	DD	078H
	DD	08cH
	DB	01aH
	ORG $+3
	DD	0300H
	DB	00H
	DB	064H
	DB	08H
	DB	0cH
	DB	014H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	03cH
	DB	01H
	ORG $+1
	DW	011H
	DW	011H
	DW	00H
	DB	07H
	ORG $+1
	DW	08fcH
	ORG $+2
	DD	0a0H
	DD	08acH
	DD	FLAT:??_C@_0BJ@OHJC@Monsters?2Mega?2Mega?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@EJPE@Monsters?2Mega?2Mega?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BI@KHJI@Monsters?2Mega?2Guard?4TRN?$AA@
	DD	06H
	DD	07H
	DD	0eH
	DD	01H
	DD	018H
	DD	05H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	FLAT:??_C@_08KEIB@Guardian?$AA@
	DB	015H
	DB	019H
	DB	016H
	ORG $+1
	DD	08cH
	DD	0a0H
	DB	01aH
	ORG $+3
	DD	0300H
	DB	01H
	DB	06eH
	DB	08H
	DB	0eH
	DB	016H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	041H
	DB	01H
	ORG $+1
	DW	011H
	DW	011H
	DW	00H
	DB	07H
	ORG $+1
	DW	0a9aH
	ORG $+2
	DD	0a0H
	DD	08acH
	DD	FLAT:??_C@_0BJ@OHJC@Monsters?2Mega?2Mega?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@EJPE@Monsters?2Mega?2Mega?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BI@DEEB@Monsters?2Mega?2Vtexl?4TRN?$AA@
	DD	06H
	DD	07H
	DD	0eH
	DD	01H
	DD	018H
	DD	05H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	FLAT:??_C@_0M@NBKI@Vortex?5Lord?$AA@
	DB	017H
	DB	01aH
	DB	018H
	ORG $+1
	DD	0a0H
	DD	0b4H
	DB	01aH
	ORG $+3
	DD	0300H
	DB	02H
	DB	078H
	DB	08H
	DB	012H
	DB	018H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	046H
	DB	01H
	ORG $+1
	DW	051H
	DW	055H
	DW	00H
	DB	07H
	ORG $+1
	DW	0cb4H
	ORG $+2
	DD	0a0H
	DD	08acH
	DD	FLAT:??_C@_0BJ@OHJC@Monsters?2Mega?2Mega?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@EJPE@Monsters?2Mega?2Mega?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BH@BNN@Monsters?2Mega?2Balr?4TRN?$AA@
	DD	06H
	DD	07H
	DD	0eH
	DD	01H
	DD	018H
	DD	05H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	FLAT:??_C@_06OEIG@Balrog?$AA@
	DB	019H
	DB	01dH
	DB	01aH
	ORG $+1
	DD	0b4H
	DD	0c8H
	DB	01aH
	ORG $+3
	DD	0300H
	DB	03H
	DB	082H
	DB	08H
	DB	016H
	DB	01eH
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	04bH
	DB	01H
	ORG $+1
	DW	051H
	DW	055H
	DW	00H
	DB	07H
	ORG $+1
	DW	0e3bH
	ORG $+2
	DD	0a0H
	DD	04f6H
	DD	FLAT:??_C@_0BL@IHHM@Monsters?2Snake?2Snake?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BN@NHII@Monsters?2Snake?2Snake?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0cH
	DD	0bH
	DD	0dH
	DD	05H
	DD	012H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0L@PGLH@Cave?5Viper?$AA@
	DB	014H
	DB	018H
	DB	015H
	ORG $+1
	DD	064H
	DD	096H
	DB	018H
	ORG $+3
	DD	0100H
	DB	00H
	DB	05aH
	DB	08H
	DB	08H
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03cH
	DB	01H
	ORG $+1
	DW	08H
	DW	08H
	DW	00H
	DB	07H
	ORG $+1
	DW	0aa5H
	ORG $+2
	DD	0a0H
	DD	04f6H
	DD	FLAT:??_C@_0BL@IHHM@Monsters?2Snake?2Snake?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BN@NHII@Monsters?2Snake?2Snake?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@LCBA@Monsters?2Snake?2SnakR?4TRN?$AA@
	DD	0cH
	DD	0bH
	DD	0dH
	DD	05H
	DD	012H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0L@GLJN@Fire?5Drake?$AA@
	DB	016H
	DB	01aH
	DB	017H
	ORG $+1
	DD	078H
	DD	0aaH
	DB	018H
	ORG $+3
	DD	0100H
	DB	01H
	DB	069H
	DB	08H
	DB	0cH
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	01H
	ORG $+1
	DW	0aH
	DW	018H
	DW	00H
	DB	07H
	ORG $+1
	DW	0c43H
	ORG $+2
	DD	0a0H
	DD	04f6H
	DD	FLAT:??_C@_0BL@IHHM@Monsters?2Snake?2Snake?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BN@NHII@Monsters?2Snake?2Snake?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@JEFP@Monsters?2Snake?2Snakg?4TRN?$AA@
	DD	0cH
	DD	0bH
	DD	0dH
	DD	05H
	DD	012H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0L@CLBK@Gold?5Viper?$AA@
	DB	018H
	DB	01bH
	DB	019H
	ORG $+1
	DD	08cH
	DD	0b4H
	DB	018H
	ORG $+3
	DD	0100H
	DB	02H
	DB	078H
	DB	08H
	DB	0fH
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	01H
	ORG $+1
	DW	0cH
	DW	0cH
	DW	00H
	DB	07H
	ORG $+1
	DW	0dd4H
	ORG $+2
	DD	0a0H
	DD	04f6H
	DD	FLAT:??_C@_0BL@IHHM@Monsters?2Snake?2Snake?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BN@NHII@Monsters?2Snake?2Snake?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@LEOP@Monsters?2Snake?2Snakb?4TRN?$AA@
	DD	0cH
	DD	0bH
	DD	0dH
	DD	05H
	DD	012H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0M@FIHH@Azure?5Drake?$AA@
	DB	01cH
	DB	01eH
	DB	01bH
	ORG $+1
	DD	0a0H
	DD	0c8H
	DB	018H
	ORG $+3
	DD	0100H
	DB	03H
	DB	082H
	DB	08H
	DB	012H
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04bH
	DB	01H
	ORG $+1
	DW	06H
	DW	02aH
	DW	00H
	DB	07H
	ORG $+1
	DW	0ecfH
	ORG $+2
	DD	0a0H
	DD	0848H
	DD	FLAT:??_C@_0BL@JDBP@Monsters?2Black?2Black?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BN@KHJ@Monsters?2Black?2Black?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	08H
	DD	08H
	DD	010H
	DD	04H
	DD	018H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0N@PDGD@Black?5Knight?$AA@
	DB	017H
	DB	01bH
	DB	018H
	ORG $+1
	DD	096H
	DD	096H
	DB	02H
	ORG $+3
	DD	0100H
	DB	00H
	DB	06eH
	DB	08H
	DB	0fH
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04bH
	DB	01H
	ORG $+1
	DW	045H
	DW	061H
	DW	00H
	DB	07H
	ORG $+1
	DW	0d20H
	ORG $+2
	DD	0a0H
	DD	0848H
	DD	FLAT:??_C@_0BL@JDBP@Monsters?2Black?2Black?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BN@KHJ@Monsters?2Black?2Black?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BM@GOHA@Monsters?2Black?2BlkKntRT?4TRN?$AA@
	DD	08H
	DD	08H
	DD	010H
	DD	04H
	DD	018H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@FPBM@Doom?5Guard?$AA@
	DB	019H
	DB	01dH
	DB	01aH
	ORG $+1
	DD	0a5H
	DD	0a5H
	DB	02H
	ORG $+3
	DD	0100H
	DB	00H
	DB	082H
	DB	08H
	DB	012H
	DB	019H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04bH
	DB	01H
	ORG $+1
	DW	043H
	DW	051H
	DW	00H
	DB	07H
	ORG $+1
	DW	0e42H
	ORG $+2
	DD	0a0H
	DD	0848H
	DD	FLAT:??_C@_0BL@JDBP@Monsters?2Black?2Black?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BN@KHJ@Monsters?2Black?2Black?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BM@DEHC@Monsters?2Black?2BlkKntBT?4TRN?$AA@
	DD	08H
	DD	08H
	DD	010H
	DD	04H
	DD	018H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@KLAH@Steel?5Lord?$AA@
	DB	01bH
	DB	01eH
	DB	01cH
	ORG $+1
	DD	0b4H
	DD	0b4H
	DB	02H
	ORG $+3
	DD	0100H
	DB	01H
	DB	078H
	DB	08H
	DB	014H
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	01H
	ORG $+1
	DW	055H
	DW	05cH
	DW	00H
	DB	07H
	ORG $+1
	DW	0109cH
	ORG $+2
	DD	0a0H
	DD	0848H
	DD	FLAT:??_C@_0BL@JDBP@Monsters?2Black?2Black?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BN@KHJ@Monsters?2Black?2Black?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BM@JCKI@Monsters?2Black?2BlkKntBe?4TRN?$AA@
	DD	08H
	DD	08H
	DD	010H
	DD	04H
	DD	018H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0N@PCA@Blood?5Knight?$AA@
	DB	018H
	DB	01aH
	DB	01eH
	ORG $+1
	DD	0c8H
	DD	0c8H
	DB	02H
	ORG $+3
	DD	0100H
	DB	01H
	DB	082H
	DB	08H
	DB	019H
	DB	023H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	055H
	DB	01H
	ORG $+1
	DW	06aH
	DW	06aH
	DW	00H
	DB	07H
	ORG $+1
	DW	0140aH
	ORG $+2
	DD	060H
	DD	01e4H
	DD	FLAT:??_C@_0BL@CDKL@Monsters?2Unrav?2Unrav?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0aH
	DD	0aH
	DD	0cH
	DD	05H
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09KOLF@Unraveler?$AA@
	DB	01aH
	DB	01cH
	DB	019H
	ORG $+1
	DD	046H
	DD	096H
	DB	02H
	ORG $+3
	DD	00H
	DB	00H
	DB	04bH
	DB	07H
	DB	0aH
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	00H
	ORG $+1
	DW	06aH
	DW	06aH
	DW	00H
	DB	03H
	ORG $+1
	DW	0ee4H
	ORG $+2
	DD	060H
	DD	01e4H
	DD	FLAT:??_C@_0BL@CDKL@Monsters?2Unrav?2Unrav?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0aH
	DD	0aH
	DD	0cH
	DD	05H
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@GDBP@Hollow?5One?$AA@
	DB	01cH
	DB	01eH
	DB	01bH
	ORG $+1
	DD	087H
	DD	0f0H
	DB	02H
	ORG $+3
	DD	00H
	DB	01H
	DB	04bH
	DB	07H
	DB	0cH
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04bH
	DB	00H
	ORG $+1
	DW	05cH
	DW	05cH
	DW	00H
	DB	03H
	ORG $+1
	DW	01116H
	ORG $+2
	DD	060H
	DD	01e4H
	DD	FLAT:??_C@_0BL@CDKL@Monsters?2Unrav?2Unrav?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0aH
	DD	0aH
	DD	0cH
	DD	05H
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@FDGH@Pain?5Master?$AA@
	DB	01bH
	DB	01eH
	DB	01dH
	ORG $+1
	DD	06eH
	DD	0c8H
	DB	02H
	ORG $+3
	DD	00H
	DB	02H
	DB	050H
	DB	07H
	DB	010H
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	ORG $+1
	DW	05cH
	DW	05cH
	DW	00H
	DB	03H
	ORG $+1
	DW	0141bH
	ORG $+2
	DD	060H
	DD	01e4H
	DD	FLAT:??_C@_0BL@CDKL@Monsters?2Unrav?2Unrav?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BL@HFAM@Monsters?2Acid?2Acid?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0aH
	DD	0aH
	DD	0cH
	DD	05H
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0P@NDCP@Reality?5Weaver?$AA@
	DB	01cH
	DB	01eH
	DB	01eH
	ORG $+1
	DD	087H
	DD	0f0H
	DB	02H
	ORG $+3
	DD	00H
	DB	03H
	DB	055H
	DB	07H
	DB	014H
	DB	023H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	055H
	DB	00H
	ORG $+1
	DW	071H
	DW	071H
	DW	00H
	DB	03H
	ORG $+1
	DW	01725H
	ORG $+2
	DD	080H
	DD	03d4H
	DD	FLAT:??_C@_0BJ@DPMO@Monsters?2Succ?2Scbs?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BL@HGFB@Monsters?2Succ?2Scbs?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	08H
	DD	010H
	DD	07H
	DD	018H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08FEBP@Succubus?$AA@
	DB	016H
	DB	01aH
	DB	018H
	ORG $+1
	DD	078H
	DD	096H
	DB	0eH
	ORG $+3
	DD	0200H
	DB	00H
	DB	064H
	DB	0aH
	DB	01H
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03cH
	DB	01H
	ORG $+1
	DW	01H
	DW	0aH
	DW	00H
	DB	03H
	ORG $+1
	DW	0e70H
	ORG $+2
	DD	080H
	DD	03d4H
	DD	FLAT:??_C@_0BJ@DPMO@Monsters?2Succ?2Scbs?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BL@HGFB@Monsters?2Succ?2Scbs?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BI@GKHN@Monsters?2Succ?2Succb?4TRN?$AA@
	DD	0eH
	DD	08H
	DD	010H
	DD	07H
	DD	018H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@FPIO@Snow?5Witch?$AA@
	DB	019H
	DB	01cH
	DB	01aH
	ORG $+1
	DD	087H
	DD	0afH
	DB	0eH
	ORG $+3
	DD	0200H
	DB	01H
	DB	06eH
	DB	0aH
	DB	01H
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	01H
	ORG $+1
	DW	044H
	DW	04cH
	DW	00H
	DB	03H
	ORG $+1
	DW	0ff4H
	ORG $+2
	DD	080H
	DD	03d4H
	DD	FLAT:??_C@_0BJ@DPMO@Monsters?2Succ?2Scbs?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BL@HGFB@Monsters?2Succ?2Scbs?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@PIJO@Monsters?2Succ?2Succrw?4TRN?$AA@
	DD	0eH
	DD	08H
	DD	010H
	DD	07H
	DD	018H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@BHM@Hell?5Spawn?$AA@
	DB	01bH
	DB	01eH
	DB	01cH
	ORG $+1
	DD	096H
	DD	0c8H
	DB	0eH
	ORG $+3
	DD	0300H
	DB	02H
	DB	073H
	DB	0aH
	DB	01H
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04bH
	DB	01H
	ORG $+1
	DW	021H
	DW	01cH
	DW	00H
	DB	03H
	ORG $+1
	DW	01180H
	ORG $+2
	DD	080H
	DD	03d4H
	DD	FLAT:??_C@_0BJ@DPMO@Monsters?2Succ?2Scbs?$CFc?4CL2?$AA@
	DD	00H
	DD	FLAT:??_C@_0BL@HGFB@Monsters?2Succ?2Scbs?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@KCJM@Monsters?2Succ?2Succbw?4TRN?$AA@
	DD	0eH
	DD	08H
	DD	010H
	DD	07H
	DD	018H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@GKNH@Soul?5Burner?$AA@
	DB	01cH
	DB	01eH
	DB	01eH
	ORG $+1
	DD	08cH
	DD	0e1H
	DB	0eH
	ORG $+3
	DD	0300H
	DB	03H
	DB	078H
	DB	0aH
	DB	01H
	DB	023H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	055H
	DB	01H
	ORG $+1
	DW	015H
	DW	038H
	DW	00H
	DB	03H
	ORG $+1
	DW	01224H
	ORG $+2
	DD	080H
	DD	07d0H
	DD	FLAT:??_C@_0BJ@GCAL@Monsters?2Mage?2Mage?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@OMKE@Monsters?2Mage?2Mage?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	0cH
	DD	01H
	DD	014H
	DD	08H
	DD	01cH
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_09HLJB@Counselor?$AA@
	DB	018H
	DB	01aH
	DB	019H
	ORG $+1
	DD	046H
	DD	046H
	DB	019H
	ORG $+3
	DD	0200H
	DB	00H
	DB	05aH
	DB	08H
	DB	08H
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DW	07H
	DW	07H
	DW	00H
	DB	07H
	ORG $+1
	DW	0fe6H
	ORG $+2
	DD	080H
	DD	07d0H
	DD	FLAT:??_C@_0BJ@GCAL@Monsters?2Mage?2Mage?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@OMKE@Monsters?2Mage?2Mage?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BJ@IEPO@Monsters?2Mage?2Cnselg?4TRN?$AA@
	DD	0cH
	DD	01H
	DD	014H
	DD	08H
	DD	01cH
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@IHLC@Magistrate?$AA@
	DB	01aH
	DB	01cH
	DB	01bH
	ORG $+1
	DD	055H
	DD	055H
	DB	019H
	ORG $+3
	DD	0200H
	DB	01H
	DB	064H
	DB	08H
	DB	0aH
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DW	055H
	DW	05cH
	DW	00H
	DB	07H
	ORG $+1
	DW	0117eH
	ORG $+2
	DD	080H
	DD	07d0H
	DD	FLAT:??_C@_0BJ@GCAL@Monsters?2Mage?2Mage?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@OMKE@Monsters?2Mage?2Mage?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BK@IAEI@Monsters?2Mage?2Cnselgd?4TRN?$AA@
	DD	0cH
	DD	01H
	DD	014H
	DD	08H
	DD	01cH
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08EOGH@Cabalist?$AA@
	DB	01cH
	DB	01eH
	DB	01dH
	ORG $+1
	DD	078H
	DD	078H
	DB	019H
	ORG $+3
	DD	0200H
	DB	02H
	DB	06eH
	DB	08H
	DB	0eH
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DW	063H
	DW	06aH
	DW	00H
	DB	07H
	ORG $+1
	DW	01341H
	ORG $+2
	DD	080H
	DD	07d0H
	DD	FLAT:??_C@_0BJ@GCAL@Monsters?2Mage?2Mage?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BL@OMKE@Monsters?2Mage?2Mage?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	01H
	DD	FLAT:??_C@_0BK@CCLI@Monsters?2Mage?2Cnselbk?4TRN?$AA@
	DD	0cH
	DD	01H
	DD	014H
	DD	08H
	DD	01cH
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08KFKH@Advocate?$AA@
	DB	01eH
	DB	01eH
	DB	01eH
	ORG $+1
	DD	091H
	DD	091H
	DB	019H
	ORG $+3
	DD	0200H
	DB	03H
	DB	078H
	DB	08H
	DB	0fH
	DB	019H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DW	06aH
	DW	078H
	DW	00H
	DB	07H
	ORG $+1
	DW	01368H
	ORG $+2
	DD	060H
	DD	0182H
	DD	FLAT:??_C@_0BL@HABD@Monsters?2Golem?2Golem?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BM@PJFI@Monsters?2Golem?2Golm?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	010H
	DD	0cH
	DD	00H
	DD	0cH
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05MIHD@Golem?$AA@
	DB	00H
	DB	00H
	DB	0cH
	ORG $+1
	DD	01H
	DD	01H
	DB	015H
	ORG $+3
	DD	0200H
	DB	00H
	DB	00H
	DB	07H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
	DW	00H
	DW	00H
	DW	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	0a0H
	DD	07d0H
	DD	FLAT:??_C@_0BN@LMBN@Monsters?2Diablo?2Diablo?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@FGDO@Monsters?2Diablo?2Diablo?$CFc?$CFi?4WAV?$AA@
	DD	01H
	DD	00H
	DD	00H
	DD	010H
	DD	06H
	DD	010H
	DD	06H
	DD	010H
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0O@FIFM@The?5Dark?5Lord?$AA@
	DB	032H
	DB	032H
	DB	01eH
	ORG $+1
	DD	0682H
	DD	0682H
	DB	01bH
	ORG $+3
	DD	0380H
	DB	03H
	DB	0dcH
	DB	04H
	DB	01eH
	DB	03cH
	DB	00H
	DB	0bH
	DB	00H
	DB	00H
	DB	046H
	DB	01H
	ORG $+1
	DW	04eH
	DW	04eH
	DW	00H
	DB	07H
	ORG $+1
	DW	07bb2H
	ORG $+2
	DD	080H
	DD	0424H
	DD	FLAT:??_C@_0BO@BEOI@Monsters?2DarkMage?2Dmage?$CFc?4CL2?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@HJAJ@Monsters?2DarkMage?2Dmag?$CFc?$CFi?4WAV?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	06H
	DD	01H
	DD	015H
	DD	06H
	DD	017H
	DD	012H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BI@JDKB@The?5Arch?9Litch?5Malignus?$AA@
	DB	01eH
	DB	01eH
	DB	01eH
	ORG $+1
	DD	0a0H
	DD	0a0H
	DB	019H
	ORG $+3
	DD	0200H
	DB	03H
	DB	078H
	DB	08H
	DB	014H
	DB	028H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	01H
	ORG $+1
	DW	047H
	DW	078H
	DW	00H
	DB	07H
	ORG $+1
	DW	01368H
	ORG $+2
_MonstConvTbl DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	028H
	DB	027H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03bH
	DB	03aH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	04cH
	DB	04eH
	DB	04fH
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05cH
	DB	05bH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	00H
	DB	06eH
	DB	00H
	DB	06dH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	06fH
_MonstAvailTbl DB 01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
;	COMDAT ??_C@_0BB@NNOM@Gharbad?5the?5Weak?$AA@
_DATA	SEGMENT
??_C@_0BB@NNOM@Gharbad?5the?5Weak?$AA@ DB 'Gharbad the Weak', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EMDL@BSDB?$AA@
_DATA	SEGMENT
??_C@_04EMDL@BSDB?$AA@ DB 'BSDB', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MCCE@GENRL?$AA@
_DATA	SEGMENT
??_C@_05MCCE@GENRL?$AA@ DB 'GENRL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@
_DATA	SEGMENT
??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@ DB 'Zhar the Mad', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MFB@GENERAL?$AA@
_DATA	SEGMENT
??_C@_07MFB@GENERAL?$AA@ DB 'GENERAL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09MNJA@Snotspill?$AA@
_DATA	SEGMENT
??_C@_09MNJA@Snotspill?$AA@ DB 'Snotspill', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03LJKM@BNG?$AA@
_DATA	SEGMENT
??_C@_03LJKM@BNG?$AA@ DB 'BNG', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@EMLM@Arch?9Bishop?5Lazarus?$AA@
_DATA	SEGMENT
??_C@_0BE@EMLM@Arch?9Bishop?5Lazarus?$AA@ DB 'Arch-Bishop Lazarus', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_07FILF@Red?5Vex?$AA@
_DATA	SEGMENT
??_C@_07FILF@Red?5Vex?$AA@ DB 'Red Vex', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NHCL@REDV?$AA@
_DATA	SEGMENT
??_C@_04NHCL@REDV?$AA@ DB 'REDV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09NNFD@BlackJade?$AA@
_DATA	SEGMENT
??_C@_09NNFD@BlackJade?$AA@ DB 'BlackJade', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05HMFP@BLKJD?$AA@
_DATA	SEGMENT
??_C@_05HMFP@BLKJD?$AA@ DB 'BLKJD', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GCKJ@Lachdanan?$AA@
_DATA	SEGMENT
??_C@_09GCKJ@Lachdanan?$AA@ DB 'Lachdanan', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CAGH@BHKA?$AA@
_DATA	SEGMENT
??_C@_04CAGH@BHKA?$AA@ DB 'BHKA', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@
_DATA	SEGMENT
??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@ DB 'Warlord of Blood', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@DLIH@Bonehead?5Keenaxe?$AA@
_DATA	SEGMENT
??_C@_0BB@DLIH@Bonehead?5Keenaxe?$AA@ DB 'Bonehead Keenaxe', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@CLDJ@Bladeskin?5the?5Slasher?$AA@
_DATA	SEGMENT
??_C@_0BG@CLDJ@Bladeskin?5the?5Slasher?$AA@ DB 'Bladeskin the Slasher', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CFHF@BSTS?$AA@
_DATA	SEGMENT
??_C@_04CFHF@BSTS?$AA@ DB 'BSTS', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07NGEG@Soulpus?$AA@
_DATA	SEGMENT
??_C@_07NGEG@Soulpus?$AA@ DB 'Soulpus', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@BDNK@Pukerat?5the?5Unclean?$AA@
_DATA	SEGMENT
??_C@_0BE@BDNK@Pukerat?5the?5Unclean?$AA@ DB 'Pukerat the Unclean', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_03DCBN@PTU?$AA@
_DATA	SEGMENT
??_C@_03DCBN@PTU?$AA@ DB 'PTU', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@BJO@Boneripper?$AA@
_DATA	SEGMENT
??_C@_0L@BJO@Boneripper?$AA@ DB 'Boneripper', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_02NOGO@BR?$AA@
_DATA	SEGMENT
??_C@_02NOGO@BR?$AA@ DB 'BR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@FPNL@Rotfeast?5the?5Hungry?$AA@
_DATA	SEGMENT
??_C@_0BE@FPNL@Rotfeast?5the?5Hungry?$AA@ DB 'Rotfeast the Hungry', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_03PEDI@ETH?$AA@
_DATA	SEGMENT
??_C@_03PEDI@ETH?$AA@ DB 'ETH', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@GBKJ@Gutshank?5the?5Quick?$AA@
_DATA	SEGMENT
??_C@_0BD@GBKJ@Gutshank?5the?5Quick?$AA@ DB 'Gutshank the Quick', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_03HEK@GTQ?$AA@
_DATA	SEGMENT
??_C@_03HEK@GTQ?$AA@ DB 'GTQ', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@IPBC@Brokenhead?5Bangshield?$AA@
_DATA	SEGMENT
??_C@_0BG@IPBC@Brokenhead?5Bangshield?$AA@ DB 'Brokenhead Bangshield', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04HPMH@BHBS?$AA@
_DATA	SEGMENT
??_C@_04HPMH@BHBS?$AA@ DB 'BHBS', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05DEJF@Bongo?$AA@
_DATA	SEGMENT
??_C@_05DEJF@Bongo?$AA@ DB 'Bongo', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@EMBE@Rotcarnage?$AA@
_DATA	SEGMENT
??_C@_0L@EMBE@Rotcarnage?$AA@ DB 'Rotcarnage', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NLMC@RCRN?$AA@
_DATA	SEGMENT
??_C@_04NLMC@RCRN?$AA@ DB 'RCRN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@CBPB@Shadowbite?$AA@
_DATA	SEGMENT
??_C@_0L@CBPB@Shadowbite?$AA@ DB 'Shadowbite', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04FKFB@SHBT?$AA@
_DATA	SEGMENT
??_C@_04FKFB@SHBT?$AA@ DB 'SHBT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07FKDP@Deadeye?$AA@
_DATA	SEGMENT
??_C@_07FKDP@Deadeye?$AA@ DB 'Deadeye', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02FFAE@DE?$AA@
_DATA	SEGMENT
??_C@_02FFAE@DE?$AA@ DB 'DE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GMMP@Madeye?5the?5Dead?$AA@
_DATA	SEGMENT
??_C@_0BA@GMMP@Madeye?5the?5Dead?$AA@ DB 'Madeye the Dead', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_03JKGJ@MTD?$AA@
_DATA	SEGMENT
??_C@_03JKGJ@MTD?$AA@ DB 'MTD', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@MKEC@El?5Chupacabras?$AA@
_DATA	SEGMENT
??_C@_0P@MKEC@El?5Chupacabras?$AA@ DB 'El Chupacabras', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CNLO@Skullfire?$AA@
_DATA	SEGMENT
??_C@_09CNLO@Skullfire?$AA@ DB 'Skullfire', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04JLC@SKFR?$AA@
_DATA	SEGMENT
??_C@_04JLC@SKFR?$AA@ DB 'SKFR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09MLHL@Warpskull?$AA@
_DATA	SEGMENT
??_C@_09MLHL@Warpskull?$AA@ DB 'Warpskull', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04KCIG@TSPO?$AA@
_DATA	SEGMENT
??_C@_04KCIG@TSPO?$AA@ DB 'TSPO', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@EGAH@Goretongue?$AA@
_DATA	SEGMENT
??_C@_0L@EGAH@Goretongue?$AA@ DB 'Goretongue', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03KOKP@PMR?$AA@
_DATA	SEGMENT
??_C@_03KOKP@PMR?$AA@ DB 'PMR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@FKIP@Pulsecrawler?$AA@
_DATA	SEGMENT
??_C@_0N@FKIP@Pulsecrawler?$AA@ DB 'Pulsecrawler', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@INCO@Moonbender?$AA@
_DATA	SEGMENT
??_C@_0L@INCO@Moonbender?$AA@ DB 'Moonbender', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DKGL@Wrathraven?$AA@
_DATA	SEGMENT
??_C@_0L@DKGL@Wrathraven?$AA@ DB 'Wrathraven', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@PPGN@Spineeater?$AA@
_DATA	SEGMENT
??_C@_0L@PPGN@Spineeater?$AA@ DB 'Spineeater', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@KAKP@Blackash?5the?5Burning?$AA@
_DATA	SEGMENT
??_C@_0BF@KAKP@Blackash?5the?5Burning?$AA@ DB 'Blackash the Burning', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06PLDN@BASHTB?$AA@
_DATA	SEGMENT
??_C@_06PLDN@BASHTB?$AA@ DB 'BASHTB', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FLBL@Shadowcrow?$AA@
_DATA	SEGMENT
??_C@_0L@FLBL@Shadowcrow?$AA@ DB 'Shadowcrow', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@GMIP@Blightstone?5the?5Weak?$AA@
_DATA	SEGMENT
??_C@_0BF@GMIP@Blightstone?5the?5Weak?$AA@ DB 'Blightstone the Weak', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JMDI@Bilefroth?5the?5Pit?5Master?$AA@
_DATA	SEGMENT
??_C@_0BJ@JMDI@Bilefroth?5the?5Pit?5Master?$AA@ DB 'Bilefroth the Pit Mas'
	DB	'ter', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OBOK@BFTP?$AA@
_DATA	SEGMENT
??_C@_04OBOK@BFTP?$AA@ DB 'BFTP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@CEPB@Bloodskin?5Darkbow?$AA@
_DATA	SEGMENT
??_C@_0BC@CEPB@Bloodskin?5Darkbow?$AA@ DB 'Bloodskin Darkbow', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PDKI@Foulwing?$AA@
_DATA	SEGMENT
??_C@_08PDKI@Foulwing?$AA@ DB 'Foulwing', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02OB@DB?$AA@
_DATA	SEGMENT
??_C@_02OB@DB?$AA@ DB 'DB', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@JFPG@Shadowdrinker?$AA@
_DATA	SEGMENT
??_C@_0O@JFPG@Shadowdrinker?$AA@ DB 'Shadowdrinker', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NCNM@SHDR?$AA@
_DATA	SEGMENT
??_C@_04NCNM@SHDR?$AA@ DB 'SHDR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@PIAB@Hazeshifter?$AA@
_DATA	SEGMENT
??_C@_0M@PIAB@Hazeshifter?$AA@ DB 'Hazeshifter', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09HCNK@Deathspit?$AA@
_DATA	SEGMENT
??_C@_09HCNK@Deathspit?$AA@ DB 'Deathspit', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04HEPK@BFDS?$AA@
_DATA	SEGMENT
??_C@_04HEPK@BFDS?$AA@ DB 'BFDS', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@HAMG@Bloodgutter?$AA@
_DATA	SEGMENT
??_C@_0M@HAMG@Bloodgutter?$AA@ DB 'Bloodgutter', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PJDO@BGBL?$AA@
_DATA	SEGMENT
??_C@_04PJDO@BGBL?$AA@ DB 'BGBL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@KJCD@Deathshade?5Fleshmaul?$AA@
_DATA	SEGMENT
??_C@_0BF@KJCD@Deathshade?5Fleshmaul?$AA@ DB 'Deathshade Fleshmaul', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LPNP@DSFM?$AA@
_DATA	SEGMENT
??_C@_04LPNP@DSFM?$AA@ DB 'DSFM', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@MEDF@Warmaggot?5the?5Mad?$AA@
_DATA	SEGMENT
??_C@_0BC@MEDF@Warmaggot?5the?5Mad?$AA@ DB 'Warmaggot the Mad', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MNGJ@Glasskull?5the?5Jagged?$AA@
_DATA	SEGMENT
??_C@_0BF@MNGJ@Glasskull?5the?5Jagged?$AA@ DB 'Glasskull the Jagged', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@IDEF@Blightfire?$AA@
_DATA	SEGMENT
??_C@_0L@IDEF@Blightfire?$AA@ DB 'Blightfire', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03DOGO@BLF?$AA@
_DATA	SEGMENT
??_C@_03DOGO@BLF?$AA@ DB 'BLF', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CGJC@Nightwing?5the?5Cold?$AA@
_DATA	SEGMENT
??_C@_0BD@CGJC@Nightwing?5the?5Cold?$AA@ DB 'Nightwing the Cold', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09MEMP@Gorestone?$AA@
_DATA	SEGMENT
??_C@_09MEMP@Gorestone?$AA@ DB 'Gorestone', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@HNAH@Bronzefist?5Firestone?$AA@
_DATA	SEGMENT
??_C@_0BF@HNAH@Bronzefist?5Firestone?$AA@ DB 'Bronzefist Firestone', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@HHDN@Wrathfire?5the?5Doomed?$AA@
_DATA	SEGMENT
??_C@_0BF@HHDN@Wrathfire?5the?5Doomed?$AA@ DB 'Wrathfire the Doomed', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04HPN@WFTD?$AA@
_DATA	SEGMENT
??_C@_04HPN@WFTD?$AA@ DB 'WFTD', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IJFE@Firewound?5the?5Grim?$AA@
_DATA	SEGMENT
??_C@_0BD@IJFE@Firewound?5the?5Grim?$AA@ DB 'Firewound the Grim', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@IEFH@Baron?5Sludge?$AA@
_DATA	SEGMENT
??_C@_0N@IEFH@Baron?5Sludge?$AA@ DB 'Baron Sludge', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03CLMH@BSM?$AA@
_DATA	SEGMENT
??_C@_03CLMH@BSM?$AA@ DB 'BSM', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@EOEA@Blighthorn?5Steelmace?$AA@
_DATA	SEGMENT
??_C@_0BF@EOEA@Blighthorn?5Steelmace?$AA@ DB 'Blighthorn Steelmace', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04BHO@BHSM?$AA@
_DATA	SEGMENT
??_C@_04BHO@BHSM?$AA@ DB 'BHSM', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@MCHO@Chaoshowler?$AA@
_DATA	SEGMENT
??_C@_0M@MCHO@Chaoshowler?$AA@ DB 'Chaoshowler', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OELM@Doomgrin?5the?5Rotting?$AA@
_DATA	SEGMENT
??_C@_0BF@OELM@Doomgrin?5the?5Rotting?$AA@ DB 'Doomgrin the Rotting', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09HKNB@Madburner?$AA@
_DATA	SEGMENT
??_C@_09HKNB@Madburner?$AA@ DB 'Madburner', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@MKAI@Bonesaw?5the?5Litch?$AA@
_DATA	SEGMENT
??_C@_0BC@MKAI@Bonesaw?5the?5Litch?$AA@ DB 'Bonesaw the Litch', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GPAF@Breakspine?$AA@
_DATA	SEGMENT
??_C@_0L@GPAF@Breakspine?$AA@ DB 'Breakspine', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OIDE@Devilskull?5Sharpbone?$AA@
_DATA	SEGMENT
??_C@_0BF@OIDE@Devilskull?5Sharpbone?$AA@ DB 'Devilskull Sharpbone', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@MABJ@Brokenstorm?$AA@
_DATA	SEGMENT
??_C@_0M@MABJ@Brokenstorm?$AA@ DB 'Brokenstorm', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09HMHK@Stormbane?$AA@
_DATA	SEGMENT
??_C@_09HMHK@Stormbane?$AA@ DB 'Stormbane', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09PHOF@Oozedrool?$AA@
_DATA	SEGMENT
??_C@_09PHOF@Oozedrool?$AA@ DB 'Oozedrool', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@NKPB@Goldblight?5of?5the?5Flame?$AA@
_DATA	SEGMENT
??_C@_0BI@NKPB@Goldblight?5of?5the?5Flame?$AA@ DB 'Goldblight of the Flam'
	DB	'e', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@BDH@Blackstorm?$AA@
_DATA	SEGMENT
??_C@_0L@BDH@Blackstorm?$AA@ DB 'Blackstorm', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@EPEK@Plaguewrath?$AA@
_DATA	SEGMENT
??_C@_0M@EPEK@Plaguewrath?$AA@ DB 'Plaguewrath', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@BAIF@The?5Flayer?$AA@
_DATA	SEGMENT
??_C@_0L@BAIF@The?5Flayer?$AA@ DB 'The Flayer', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08BDKD@Bluehorn?$AA@
_DATA	SEGMENT
??_C@_08BDKD@Bluehorn?$AA@ DB 'Bluehorn', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IICF@Warpfire?5Hellspawn?$AA@
_DATA	SEGMENT
??_C@_0BD@IICF@Warpfire?5Hellspawn?$AA@ DB 'Warpfire Hellspawn', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09MHOF@Fangspeir?$AA@
_DATA	SEGMENT
??_C@_09MHOF@Fangspeir?$AA@ DB 'Fangspeir', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@OBB@Festerskull?$AA@
_DATA	SEGMENT
??_C@_0M@OBB@Festerskull?$AA@ DB 'Festerskull', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@JNOM@Lionskull?5the?5Bent?$AA@
_DATA	SEGMENT
??_C@_0BD@JNOM@Lionskull?5the?5Bent?$AA@ DB 'Lionskull the Bent', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@OABD@Blacktongue?$AA@
_DATA	SEGMENT
??_C@_0M@OABD@Blacktongue?$AA@ DB 'Blacktongue', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CAAA@Viletouch?$AA@
_DATA	SEGMENT
??_C@_09CAAA@Viletouch?$AA@ DB 'Viletouch', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@INON@Viperflame?$AA@
_DATA	SEGMENT
??_C@_0L@INON@Viperflame?$AA@ DB 'Viperflame', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GGMB@Fangskin?$AA@
_DATA	SEGMENT
??_C@_08GGMB@Fangskin?$AA@ DB 'Fangskin', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JIIF@Witchfire?5the?5Unholy?$AA@
_DATA	SEGMENT
??_C@_0BF@JIIF@Witchfire?5the?5Unholy?$AA@ DB 'Witchfire the Unholy', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@JDFP@Blackskull?$AA@
_DATA	SEGMENT
??_C@_0L@JDFP@Blackskull?$AA@ DB 'Blackskull', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09NMNJ@Soulslash?$AA@
_DATA	SEGMENT
??_C@_09NMNJ@Soulslash?$AA@ DB 'Soulslash', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GJHH@Windspawn?$AA@
_DATA	SEGMENT
??_C@_09GJHH@Windspawn?$AA@ DB 'Windspawn', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@PNEB@Lord?5of?5the?5Pit?$AA@
_DATA	SEGMENT
??_C@_0BA@PNEB@Lord?5of?5the?5Pit?$AA@ DB 'Lord of the Pit', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@PNLE@Rustweaver?$AA@
_DATA	SEGMENT
??_C@_0L@PNLE@Rustweaver?$AA@ DB 'Rustweaver', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@GJGM@Howlingire?5the?5Shade?$AA@
_DATA	SEGMENT
??_C@_0BF@GJGM@Howlingire?5the?5Shade?$AA@ DB 'Howlingire the Shade', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09BFFD@Doomcloud?$AA@
_DATA	SEGMENT
??_C@_09BFFD@Doomcloud?$AA@ DB 'Doomcloud', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OGMN@Bloodmoon?5Soulfire?$AA@
_DATA	SEGMENT
??_C@_0BD@OGMN@Bloodmoon?5Soulfire?$AA@ DB 'Bloodmoon Soulfire', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09MOEP@Witchmoon?$AA@
_DATA	SEGMENT
??_C@_09MOEP@Witchmoon?$AA@ DB 'Witchmoon', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09HKIB@Gorefeast?$AA@
_DATA	SEGMENT
??_C@_09HKIB@Gorefeast?$AA@ DB 'Gorefeast', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OFLB@Graywar?5the?5Slayer?$AA@
_DATA	SEGMENT
??_C@_0BD@OFLB@Graywar?5the?5Slayer?$AA@ DB 'Graywar the Slayer', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DAKO@Dreadjudge?$AA@
_DATA	SEGMENT
??_C@_0L@DAKO@Dreadjudge?$AA@ DB 'Dreadjudge', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@OODD@Stareye?5the?5Witch?$AA@
_DATA	SEGMENT
??_C@_0BC@OODD@Stareye?5the?5Witch?$AA@ DB 'Stareye the Witch', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@LMMA@Steelskull?5the?5Hunter?$AA@
_DATA	SEGMENT
??_C@_0BG@LMMA@Steelskull?5the?5Hunter?$AA@ DB 'Steelskull the Hunter', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@EMNF@Sir?5Gorash?$AA@
_DATA	SEGMENT
??_C@_0L@EMNF@Sir?5Gorash?$AA@ DB 'Sir Gorash', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FLBK@The?5Vizier?$AA@
_DATA	SEGMENT
??_C@_0L@FLBK@The?5Vizier?$AA@ DB 'The Vizier', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CLCG@Zamphir?$AA@
_DATA	SEGMENT
??_C@_07CLCG@Zamphir?$AA@ DB 'Zamphir', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09MAFH@Bloodlust?$AA@
_DATA	SEGMENT
??_C@_09MAFH@Bloodlust?$AA@ DB 'Bloodlust', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08NEOF@Webwidow?$AA@
_DATA	SEGMENT
??_C@_08NEOF@Webwidow?$AA@ DB 'Webwidow', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@PHMK@Fleshdancer?$AA@
_DATA	SEGMENT
??_C@_0M@PHMK@Fleshdancer?$AA@ DB 'Fleshdancer', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09BJLB@Grimspike?$AA@
_DATA	SEGMENT
??_C@_09BJLB@Grimspike?$AA@ DB 'Grimspike', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08OEBD@Doomlock?$AA@
_DATA	SEGMENT
??_C@_08OEBD@Doomlock?$AA@ DB 'Doomlock', 00H		; `string'
_DATA	ENDS
_DATA	SEGMENT
_UniqMonst DB	022H
	ORG $+3
	DD	FLAT:??_C@_0BB@NNOM@Gharbad?5the?5Weak?$AA@
	DD	FLAT:??_C@_04EMDL@BSDB?$AA@
	DB	04H
	ORG $+1
	DW	078H
	DB	012H
	DB	03H
	DB	08H
	DB	010H
	DW	060H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	090H
	DB	032H
	ORG $+3
	DD	FLAT:??_C@_0O@COOI@Skeleton?5King?$AA@
	DD	FLAT:??_C@_05MCCE@GENRL?$AA@
	DB	00H
	ORG $+1
	DW	0f0H
	DB	0aH
	DB	03H
	DB	06H
	DB	010H
	DW	04eH
	DW	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	069H
	ORG $+3
	DD	FLAT:??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	08H
	ORG $+1
	DW	0168H
	DB	016H
	DB	03H
	DB	010H
	DB	028H
	DW	0eH
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	094H
	DB	07H
	ORG $+3
	DD	FLAT:??_C@_09MNJA@Snotspill?$AA@
	DD	FLAT:??_C@_03LJKM@BNG?$AA@
	DB	04H
	ORG $+1
	DW	0dcH
	DB	017H
	DB	03H
	DB	0aH
	DB	012H
	DW	04H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	014H
	DB	06cH
	ORG $+3
	DD	FLAT:??_C@_0BE@EMLM@Arch?9Bishop?5Lazarus?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	00H
	ORG $+1
	DW	0258H
	DB	01cH
	DB	03H
	DB	01eH
	DB	032H
	DW	04eH
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	023H
	DB	067H
	ORG $+3
	DD	FLAT:??_C@_07FILF@Red?5Vex?$AA@
	DD	FLAT:??_C@_04NHCL@REDV?$AA@
	DB	00H
	ORG $+1
	DW	0190H
	DB	01dH
	DB	03H
	DB	01eH
	DB	032H
	DW	04aH
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	023H
	DB	067H
	ORG $+3
	DD	FLAT:??_C@_09NNFD@BlackJade?$AA@
	DD	FLAT:??_C@_05HMFP@BLKJD?$AA@
	DB	00H
	ORG $+1
	DW	0190H
	DB	01dH
	DB	03H
	DB	01eH
	DB	032H
	DW	04cH
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	023H
	DB	060H
	ORG $+3
	DD	FLAT:??_C@_09GCKJ@Lachdanan?$AA@
	DD	FLAT:??_C@_04CAGH@BHKA?$AA@
	DB	0eH
	ORG $+1
	DW	01f4H
	DB	01eH
	DB	03H
	DB	00H
	DB	00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	051H
	DB	05fH
	ORG $+3
	DD	FLAT:??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0dH
	ORG $+1
	DW	0352H
	DB	01fH
	DB	03H
	DB	023H
	DB	032H
	DW	078H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	06eH
	DB	033H
	ORG $+3
	DD	FLAT:??_C@_0M@OGO@The?5Butcher?$AA@
	DD	FLAT:??_C@_05MCCE@GENRL?$AA@
	DB	00H
	ORG $+1
	DW	0dcH
	DB	0dH
	DB	03H
	DB	06H
	DB	0cH
	DW	046H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	09H
	ORG $+3
	DD	FLAT:??_C@_0BB@DLIH@Bonehead?5Keenaxe?$AA@
	DD	FLAT:??_C@_04CAGH@BHKA?$AA@
	DB	02H
	ORG $+1
	DW	05bH
	DB	02H
	DB	02H
	DB	04H
	DB	0aH
	DW	048H
	DW	07H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DB	0cH
	ORG $+3
	DD	FLAT:??_C@_0BG@CLDJ@Bladeskin?5the?5Slasher?$AA@
	DD	FLAT:??_C@_04CFHF@BSTS?$AA@
	DB	02H
	ORG $+1
	DW	033H
	DB	08H
	DB	00H
	DB	06H
	DB	012H
	DW	02H
	DW	0bH
	DB	02dH
	DB	00H
	ORG $+2
	DD	00H
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_07NGEG@Soulpus?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	02H
	ORG $+1
	DW	085H
	DB	00H
	DB	00H
	DB	04H
	DB	08H
	DW	06H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	04H
	ORG $+3
	DD	FLAT:??_C@_0BE@BDNK@Pukerat?5the?5Unclean?$AA@
	DD	FLAT:??_C@_03DCBN@PTU?$AA@
	DB	02H
	ORG $+1
	DW	04dH
	DB	08H
	DB	03H
	DB	01H
	DB	05H
	DW	02H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	08H
	ORG $+3
	DD	FLAT:??_C@_0L@BJO@Boneripper?$AA@
	DD	FLAT:??_C@_02NOGO@BR?$AA@
	DB	02H
	ORG $+1
	DW	036H
	DB	0bH
	DB	00H
	DB	06H
	DB	0fH
	DW	058H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_0BE@FPNL@Rotfeast?5the?5Hungry?$AA@
	DD	FLAT:??_C@_03PEDI@ETH?$AA@
	DB	02H
	ORG $+1
	DW	055H
	DB	02H
	DB	03H
	DB	04H
	DB	0cH
	DW	048H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	0dH
	ORG $+3
	DD	FLAT:??_C@_0BD@GBKJ@Gutshank?5the?5Quick?$AA@
	DD	FLAT:??_C@_03HEK@GTQ?$AA@
	DB	03H
	ORG $+1
	DW	042H
	DB	0bH
	DB	02H
	DB	06H
	DB	010H
	DW	02H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	019H
	ORG $+3
	DD	FLAT:??_C@_0BG@IPBC@Brokenhead?5Bangshield?$AA@
	DD	FLAT:??_C@_04HPMH@BHBS?$AA@
	DB	03H
	ORG $+1
	DW	06cH
	DB	02H
	DB	03H
	DB	0cH
	DB	014H
	DW	04cH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_05DEJF@Bongo?$AA@
	DD	FLAT:??_C@_03LJKM@BNG?$AA@
	DB	03H
	ORG $+1
	DW	0b2H
	DB	08H
	DB	03H
	DB	09H
	DB	015H
	DW	00H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	ORG $+3
	DD	FLAT:??_C@_0L@EMBE@Rotcarnage?$AA@
	DD	FLAT:??_C@_04NLMC@RCRN?$AA@
	DB	03H
	ORG $+1
	DW	066H
	DB	00H
	DB	03H
	DB	09H
	DB	018H
	DW	04cH
	DW	0bH
	DB	02dH
	DB	00H
	ORG $+2
	DD	00H
	DB	010H
	ORG $+3
	DD	FLAT:??_C@_0L@CBPB@Shadowbite?$AA@
	DD	FLAT:??_C@_04FKFB@SHBT?$AA@
	DB	02H
	ORG $+1
	DW	03cH
	DB	02H
	DB	03H
	DB	03H
	DB	014H
	DW	010H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	014H
	ORG $+3
	DD	FLAT:??_C@_07FKDP@Deadeye?$AA@
	DD	FLAT:??_C@_02FFAE@DE?$AA@
	DB	02H
	ORG $+1
	DW	031H
	DB	07H
	DB	00H
	DB	06H
	DB	09H
	DW	04aH
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	0aH
	ORG $+3
	DD	FLAT:??_C@_0BA@GMMP@Madeye?5the?5Dead?$AA@
	DD	FLAT:??_C@_03JKGJ@MTD?$AA@
	DB	04H
	ORG $+1
	DW	04bH
	DB	0bH
	DB	00H
	DB	09H
	DB	015H
	DW	018H
	DW	0bH
	DB	01eH
	DB	00H
	ORG $+2
	DD	00H
	DB	011H
	ORG $+3
	DD	FLAT:??_C@_0P@MKEC@El?5Chupacabras?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	03H
	ORG $+1
	DW	078H
	DB	06H
	DB	00H
	DB	0aH
	DB	012H
	DW	02H
	DW	03H
	DB	01eH
	DB	00H
	ORG $+2
	DD	00H
	DB	015H
	ORG $+3
	DD	FLAT:??_C@_09CNLO@Skullfire?$AA@
	DD	FLAT:??_C@_04JLC@SKFR?$AA@
	DB	03H
	ORG $+1
	DW	07dH
	DB	07H
	DB	01H
	DB	06H
	DB	0aH
	DW	010H
	DW	00H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DB	01dH
	ORG $+3
	DD	FLAT:??_C@_09MLHL@Warpskull?$AA@
	DD	FLAT:??_C@_04KCIG@TSPO?$AA@
	DB	03H
	ORG $+1
	DW	075H
	DB	0fH
	DB	02H
	DB	06H
	DB	012H
	DW	06H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	ORG $+3
	DD	FLAT:??_C@_0L@EGAH@Goretongue?$AA@
	DD	FLAT:??_C@_03KOKP@PMR?$AA@
	DB	03H
	ORG $+1
	DW	09cH
	DB	02H
	DB	01H
	DB	0fH
	DB	01eH
	DW	048H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	012H
	ORG $+3
	DD	FLAT:??_C@_0N@FKIP@Pulsecrawler?$AA@
	DD	FLAT:??_C@_04CAGH@BHKA?$AA@
	DB	04H
	ORG $+1
	DW	096H
	DB	04H
	DB	00H
	DB	010H
	DB	014H
	DW	014H
	DW	0bH
	DB	02dH
	DB	00H
	ORG $+2
	DD	00H
	DB	027H
	ORG $+3
	DD	FLAT:??_C@_0L@INCO@Moonbender?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	04H
	ORG $+1
	DW	087H
	DB	0bH
	DB	00H
	DB	09H
	DB	01bH
	DW	010H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	027H
	ORG $+3
	DD	FLAT:??_C@_0L@DKGL@Wrathraven?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	05H
	ORG $+1
	DW	087H
	DB	0bH
	DB	02H
	DB	09H
	DB	016H
	DW	010H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	013H
	ORG $+3
	DD	FLAT:??_C@_0L@PPGN@Spineeater?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	04H
	ORG $+1
	DW	0b4H
	DB	04H
	DB	01H
	DB	012H
	DB	019H
	DW	060H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	016H
	ORG $+3
	DD	FLAT:??_C@_0BF@KAKP@Blackash?5the?5Burning?$AA@
	DD	FLAT:??_C@_06PLDN@BASHTB?$AA@
	DB	04H
	ORG $+1
	DW	078H
	DB	07H
	DB	00H
	DB	06H
	DB	010H
	DW	018H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	0fH
	ORG $+3
	DD	FLAT:??_C@_0L@FLBL@Shadowcrow?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	05H
	ORG $+1
	DW	010eH
	DB	0fH
	DB	02H
	DB	0cH
	DB	019H
	DW	00H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	021H
	ORG $+3
	DD	FLAT:??_C@_0BF@GMIP@Blightstone?5the?5Weak?$AA@
	DD	FLAT:??_C@_04CAGH@BHKA?$AA@
	DB	04H
	ORG $+1
	DW	0168H
	DB	02H
	DB	00H
	DB	04H
	DB	0cH
	DW	0cH
	DW	07H
	DB	046H
	DB	00H
	ORG $+2
	DD	00H
	DB	034H
	ORG $+3
	DD	FLAT:??_C@_0BJ@JMDI@Bilefroth?5the?5Pit?5Master?$AA@
	DD	FLAT:??_C@_04OBOK@BFTP?$AA@
	DB	06H
	ORG $+1
	DW	0d2H
	DB	0bH
	DB	01H
	DB	010H
	DB	017H
	DW	01cH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02aH
	ORG $+3
	DD	FLAT:??_C@_0BC@CEPB@Bloodskin?5Darkbow?$AA@
	DD	FLAT:??_C@_04EMDL@BSDB?$AA@
	DB	05H
	ORG $+1
	DW	0cfH
	DB	07H
	DB	00H
	DB	03H
	DB	010H
	DW	06H
	DW	0bH
	DB	037H
	DB	00H
	ORG $+2
	DD	00H
	DB	028H
	ORG $+3
	DD	FLAT:??_C@_08PDKI@Foulwing?$AA@
	DD	FLAT:??_C@_02OB@DB?$AA@
	DB	05H
	ORG $+1
	DW	0f6H
	DB	05H
	DB	03H
	DB	0cH
	DB	01cH
	DW	02H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01bH
	ORG $+3
	DD	FLAT:??_C@_0O@JFPG@Shadowdrinker?$AA@
	DD	FLAT:??_C@_04NCNM@SHDR?$AA@
	DB	05H
	ORG $+1
	DW	012cH
	DB	0fH
	DB	01H
	DB	012H
	DB	01aH
	DW	04eH
	DW	08H
	DB	02dH
	DB	00H
	ORG $+2
	DD	00H
	DB	01fH
	ORG $+3
	DD	FLAT:??_C@_0M@PIAB@Hazeshifter?$AA@
	DD	FLAT:??_C@_04CAGH@BHKA?$AA@
	DB	05H
	ORG $+1
	DW	011dH
	DB	0fH
	DB	03H
	DB	012H
	DB	01eH
	DW	060H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02eH
	ORG $+3
	DD	FLAT:??_C@_09HCNK@Deathspit?$AA@
	DD	FLAT:??_C@_04HEPK@BFDS?$AA@
	DB	06H
	ORG $+1
	DW	012fH
	DB	014H
	DB	00H
	DB	0cH
	DB	020H
	DW	06H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	024H
	ORG $+3
	DD	FLAT:??_C@_0M@HAMG@Bloodgutter?$AA@
	DD	FLAT:??_C@_04PJDO@BGBL?$AA@
	DB	06H
	ORG $+1
	DW	013bH
	DB	0bH
	DB	01H
	DB	018H
	DB	022H
	DW	010H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	023H
	ORG $+3
	DD	FLAT:??_C@_0BF@KJCD@Deathshade?5Fleshmaul?$AA@
	DD	FLAT:??_C@_04LPNP@DSFM?$AA@
	DB	06H
	ORG $+1
	DW	0114H
	DB	05H
	DB	00H
	DB	0cH
	DB	018H
	DW	0aH
	DW	08H
	DB	041H
	DB	00H
	ORG $+2
	DD	00H
	DB	038H
	ORG $+3
	DD	FLAT:??_C@_0BC@MEDF@Warmaggot?5the?5Mad?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	06H
	ORG $+1
	DW	0f6H
	DB	0bH
	DB	03H
	DB	0fH
	DB	01eH
	DW	04H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	04cH
	ORG $+3
	DD	FLAT:??_C@_0BF@MNGJ@Glasskull?5the?5Jagged?$AA@
	DD	FLAT:??_C@_04CAGH@BHKA?$AA@
	DB	07H
	ORG $+1
	DW	0162H
	DB	010H
	DB	00H
	DB	012H
	DB	01eH
	DW	058H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02cH
	ORG $+3
	DD	FLAT:??_C@_0L@IDEF@Blightfire?$AA@
	DD	FLAT:??_C@_03DOGO@BLF?$AA@
	DB	07H
	ORG $+1
	DW	0141H
	DB	0eH
	DB	02H
	DB	0dH
	DB	015H
	DW	010H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	052H
	ORG $+3
	DD	FLAT:??_C@_0BD@CGJC@Nightwing?5the?5Cold?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	07H
	ORG $+1
	DW	0156H
	DB	0bH
	DB	01H
	DB	012H
	DB	01aH
	DW	04cH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02dH
	ORG $+3
	DD	FLAT:??_C@_09MEMP@Gorestone?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	07H
	ORG $+1
	DW	012fH
	DB	07H
	DB	01H
	DB	0fH
	DB	01cH
	DW	044H
	DW	07H
	DB	046H
	DB	00H
	ORG $+2
	DD	00H
	DB	03eH
	ORG $+3
	DD	FLAT:??_C@_0BF@HNAH@Bronzefist?5Firestone?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	08H
	ORG $+1
	DW	0168H
	DB	09H
	DB	00H
	DB	01eH
	DB	024H
	DW	0aH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	048H
	ORG $+3
	DD	FLAT:??_C@_0BF@HHDN@Wrathfire?5the?5Doomed?$AA@
	DD	FLAT:??_C@_04HPN@WFTD?$AA@
	DB	08H
	ORG $+1
	DW	010eH
	DB	02H
	DB	02H
	DB	014H
	DB	01eH
	DW	0eH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	03cH
	ORG $+3
	DD	FLAT:??_C@_0BD@IJFE@Firewound?5the?5Grim?$AA@
	DD	FLAT:??_C@_04CAGH@BHKA?$AA@
	DB	08H
	ORG $+1
	DW	012fH
	DB	09H
	DB	00H
	DB	012H
	DB	016H
	DW	0aH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	035H
	ORG $+3
	DD	FLAT:??_C@_0N@IEFH@Baron?5Sludge?$AA@
	DD	FLAT:??_C@_03CLMH@BSM?$AA@
	DB	08H
	ORG $+1
	DW	013bH
	DB	0fH
	DB	03H
	DB	019H
	DB	022H
	DW	04eH
	DW	0bH
	DB	04bH
	DB	00H
	ORG $+2
	DD	00H
	DB	025H
	ORG $+3
	DD	FLAT:??_C@_0BF@EOEA@Blighthorn?5Steelmace?$AA@
	DD	FLAT:??_C@_04BHO@BHSM?$AA@
	DB	07H
	ORG $+1
	DW	0faH
	DB	05H
	DB	00H
	DB	014H
	DB	01cH
	DW	04H
	DW	0bH
	DB	02dH
	DB	00H
	ORG $+2
	DD	00H
	DB	02fH
	ORG $+3
	DD	FLAT:??_C@_0M@MCHO@Chaoshowler?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	08H
	ORG $+1
	DW	0f0H
	DB	014H
	DB	00H
	DB	0cH
	DB	014H
	DW	00H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	045H
	ORG $+3
	DD	FLAT:??_C@_0BF@OELM@Doomgrin?5the?5Rotting?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	08H
	ORG $+1
	DW	0195H
	DB	010H
	DB	03H
	DB	019H
	DB	032H
	DW	04eH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	049H
	ORG $+3
	DD	FLAT:??_C@_09HKNB@Madburner?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	09H
	ORG $+1
	DW	010eH
	DB	010H
	DB	00H
	DB	014H
	DB	028H
	DW	038H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	046H
	ORG $+3
	DD	FLAT:??_C@_0BC@MKAI@Bonesaw?5the?5Litch?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	09H
	ORG $+1
	DW	01efH
	DB	010H
	DB	02H
	DB	01eH
	DB	037H
	DW	04eH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	041H
	ORG $+3
	DD	FLAT:??_C@_0L@GPAF@Breakspine?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	09H
	ORG $+1
	DW	015fH
	DB	05H
	DB	00H
	DB	019H
	DB	022H
	DW	02H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	045H
	ORG $+3
	DD	FLAT:??_C@_0BF@OIDE@Devilskull?5Sharpbone?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	09H
	ORG $+1
	DW	01bcH
	DB	010H
	DB	01H
	DB	019H
	DB	028H
	DW	010H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	04cH
	ORG $+3
	DD	FLAT:??_C@_0M@MABJ@Brokenstorm?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	09H
	ORG $+1
	DW	019bH
	DB	010H
	DB	02H
	DB	019H
	DB	024H
	DW	020H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	04dH
	ORG $+3
	DD	FLAT:??_C@_09HMHK@Stormbane?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	09H
	ORG $+1
	DW	022bH
	DB	010H
	DB	03H
	DB	01eH
	DB	01eH
	DW	020H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	036H
	ORG $+3
	DD	FLAT:??_C@_09PHOF@Oozedrool?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	09H
	ORG $+1
	DW	01e3H
	DB	01H
	DB	03H
	DB	019H
	DB	01eH
	DW	04H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	053H
	ORG $+3
	DD	FLAT:??_C@_0BI@NKPB@Goldblight?5of?5the?5Flame?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0aH
	ORG $+1
	DW	0195H
	DB	0cH
	DB	00H
	DB	0fH
	DB	023H
	DW	018H
	DW	0bH
	DB	050H
	DB	00H
	ORG $+2
	DD	00H
	DB	043H
	ORG $+3
	DD	FLAT:??_C@_0L@BDH@Blackstorm?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0aH
	ORG $+1
	DW	020dH
	DB	05H
	DB	03H
	DB	014H
	DB	028H
	DW	028H
	DW	0bH
	DB	05aH
	DB	00H
	ORG $+2
	DD	00H
	DB	02fH
	ORG $+3
	DD	FLAT:??_C@_0M@EPEK@Plaguewrath?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0aH
	ORG $+1
	DW	01c2H
	DB	014H
	DB	02H
	DB	014H
	DB	01eH
	DW	04aH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	04dH
	ORG $+3
	DD	FLAT:??_C@_0L@BAIF@The?5Flayer?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0aH
	ORG $+1
	DW	01f5H
	DB	010H
	DB	01H
	DB	014H
	DB	023H
	DW	063H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	042H
	ORG $+3
	DD	FLAT:??_C@_08BDKD@Bluehorn?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0bH
	ORG $+1
	DW	01ddH
	DB	05H
	DB	01H
	DB	019H
	DB	01eH
	DW	0aH
	DW	0bH
	DB	05aH
	DB	00H
	ORG $+2
	DD	00H
	DB	04bH
	ORG $+3
	DD	FLAT:??_C@_0BD@IICF@Warpfire?5Hellspawn?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0bH
	ORG $+1
	DW	020dH
	DB	011H
	DB	03H
	DB	0aH
	DB	028H
	DW	011H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	059H
	ORG $+3
	DD	FLAT:??_C@_09MHOF@Fangspeir?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0bH
	ORG $+1
	DW	01bcH
	DB	02H
	DB	01H
	DB	0fH
	DB	020H
	DW	050H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	047H
	ORG $+3
	DD	FLAT:??_C@_0M@OBB@Festerskull?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0bH
	ORG $+1
	DW	0258H
	DB	010H
	DB	02H
	DB	0fH
	DB	01eH
	DW	048H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	05dH
	ORG $+3
	DD	FLAT:??_C@_0BD@JNOM@Lionskull?5the?5Bent?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0cH
	ORG $+1
	DW	020dH
	DB	02H
	DB	02H
	DB	019H
	DB	019H
	DW	078H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	069H
	ORG $+3
	DD	FLAT:??_C@_0M@OABD@Blacktongue?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0cH
	ORG $+1
	DW	0168H
	DB	019H
	DB	03H
	DB	0fH
	DB	01eH
	DW	042H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	054H
	ORG $+3
	DD	FLAT:??_C@_09CAAA@Viletouch?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0cH
	ORG $+1
	DW	020dH
	DB	0cH
	DB	03H
	DB	014H
	DB	028H
	DW	060H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	05aH
	ORG $+3
	DD	FLAT:??_C@_0L@INON@Viperflame?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0cH
	ORG $+1
	DW	023aH
	DB	02H
	DB	01H
	DB	019H
	DB	023H
	DW	014H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	05bH
	ORG $+3
	DD	FLAT:??_C@_08GGMB@Fangskin?$AA@
	DD	FLAT:??_C@_04CAGH@BHKA?$AA@
	DB	0eH
	ORG $+1
	DW	02a9H
	DB	02H
	DB	02H
	DB	0fH
	DB	032H
	DW	0cH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	065H
	ORG $+3
	DD	FLAT:??_C@_0BF@JIIF@Witchfire?5the?5Unholy?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0cH
	ORG $+1
	DW	01bcH
	DB	0eH
	DB	03H
	DB	0aH
	DB	014H
	DW	01cH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	058H
	ORG $+3
	DD	FLAT:??_C@_0L@JDFP@Blackskull?$AA@
	DD	FLAT:??_C@_04CAGH@BHKA?$AA@
	DB	0dH
	ORG $+1
	DW	02eeH
	DB	02H
	DB	03H
	DB	019H
	DB	028H
	DW	0cH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	061H
	ORG $+3
	DD	FLAT:??_C@_09NMNJ@Soulslash?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0cH
	ORG $+1
	DW	01c2H
	DB	02H
	DB	00H
	DB	019H
	DB	019H
	DW	048H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	057H
	ORG $+3
	DD	FLAT:??_C@_09GJHH@Windspawn?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0cH
	ORG $+1
	DW	02c7H
	DB	02H
	DB	01H
	DB	023H
	DB	028H
	DW	018H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	05cH
	ORG $+3
	DD	FLAT:??_C@_0BA@PNEB@Lord?5of?5the?5Pit?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0dH
	ORG $+1
	DW	02faH
	DB	02H
	DB	02H
	DB	019H
	DB	02aH
	DW	042H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	05eH
	ORG $+3
	DD	FLAT:??_C@_0L@PNLE@Rustweaver?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0dH
	ORG $+1
	DW	0190H
	DB	02H
	DB	03H
	DB	01H
	DB	03cH
	DW	078H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	062H
	ORG $+3
	DD	FLAT:??_C@_0BF@GJGM@Howlingire?5the?5Shade?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0dH
	ORG $+1
	DW	01c2H
	DB	02H
	DB	02H
	DB	028H
	DB	04bH
	DW	06H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	04fH
	ORG $+3
	DD	FLAT:??_C@_09BFFD@Doomcloud?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0dH
	ORG $+1
	DW	0264H
	DB	010H
	DB	01H
	DB	01H
	DB	03cH
	DW	022H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	063H
	ORG $+3
	DD	FLAT:??_C@_0BD@OGMN@Bloodmoon?5Soulfire?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0dH
	ORG $+1
	DW	02acH
	DB	02H
	DB	01H
	DB	0fH
	DB	028H
	DW	0eH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	066H
	ORG $+3
	DD	FLAT:??_C@_09MOEP@Witchmoon?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0dH
	ORG $+1
	DW	0136H
	DB	0eH
	DB	03H
	DB	01eH
	DB	028H
	DW	04H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	057H
	ORG $+3
	DD	FLAT:??_C@_09HKIB@Gorefeast?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0dH
	ORG $+1
	DW	0303H
	DB	02H
	DB	03H
	DB	014H
	DB	037H
	DW	042H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	05eH
	ORG $+3
	DD	FLAT:??_C@_0BD@OFLB@Graywar?5the?5Slayer?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0eH
	ORG $+1
	DW	02a0H
	DB	02H
	DB	01H
	DB	01eH
	DB	032H
	DW	044H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	06aH
	ORG $+3
	DD	FLAT:??_C@_0L@DAKO@Dreadjudge?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0eH
	ORG $+1
	DW	021cH
	DB	019H
	DB	01H
	DB	01eH
	DB	028H
	DW	0eH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	067H
	ORG $+3
	DD	FLAT:??_C@_0BC@OODD@Stareye?5the?5Witch?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0eH
	ORG $+1
	DW	02d6H
	DB	0eH
	DB	02H
	DB	01eH
	DB	032H
	DW	010H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	05fH
	ORG $+3
	DD	FLAT:??_C@_0BG@LMMA@Steelskull?5the?5Hunter?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0eH
	ORG $+1
	DW	033fH
	DB	02H
	DB	03H
	DB	028H
	DB	032H
	DW	044H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	060H
	ORG $+3
	DD	FLAT:??_C@_0L@EMNF@Sir?5Gorash?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	010H
	ORG $+1
	DW	041aH
	DB	02H
	DB	01H
	DB	014H
	DB	03cH
	DW	040H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	06bH
	ORG $+3
	DD	FLAT:??_C@_0L@FLBK@The?5Vizier?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0fH
	ORG $+1
	DW	0352H
	DB	019H
	DB	02H
	DB	019H
	DB	028H
	DW	010H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	064H
	ORG $+3
	DD	FLAT:??_C@_07CLCG@Zamphir?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0fH
	ORG $+1
	DW	037bH
	DB	02H
	DB	02H
	DB	01eH
	DB	032H
	DW	04eH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	067H
	ORG $+3
	DD	FLAT:??_C@_09MAFH@Bloodlust?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	0fH
	ORG $+1
	DW	0339H
	DB	0eH
	DB	01H
	DB	014H
	DB	037H
	DW	068H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	067H
	ORG $+3
	DD	FLAT:??_C@_08NEOF@Webwidow?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	010H
	ORG $+1
	DW	0306H
	DB	0eH
	DB	01H
	DB	014H
	DB	032H
	DW	058H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	068H
	ORG $+3
	DD	FLAT:??_C@_0M@PHMK@Fleshdancer?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	010H
	ORG $+1
	DW	03e7H
	DB	0eH
	DB	03H
	DB	01eH
	DB	032H
	DW	04aH
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	043H
	ORG $+3
	DD	FLAT:??_C@_09BJLB@Grimspike?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	013H
	ORG $+1
	DW	0216H
	DB	0fH
	DB	01H
	DB	019H
	DB	028H
	DW	04aH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	04eH
	ORG $+3
	DD	FLAT:??_C@_08OEBD@Doomlock?$AA@
	DD	FLAT:??_C@_07MFB@GENERAL?$AA@
	DB	01cH
	ORG $+1
	DW	0216H
	DB	0fH
	DB	01H
	DB	023H
	DB	037H
	DW	04eH
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	0ffH
	ORG $+3
	DD	00H
	DD	00H
	DB	00H
	ORG $+1
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
_MWVel	DD	0100H
	DD	0200H
	DD	0400H
	DD	080H
	DD	0100H
	DD	0200H
	DD	055H
	DD	0aaH
	DD	0155H
	DD	040H
	DD	080H
	DD	0100H
	DD	033H
	DD	066H
	DD	0ccH
	DD	02aH
	DD	055H
	DD	0aaH
	DD	024H
	DD	049H
	DD	092H
	DD	020H
	DD	040H
	DD	080H
	DD	01cH
	DD	038H
	DD	071H
	DD	01aH
	DD	033H
	DD	066H
	DD	017H
	DD	02eH
	DD	05dH
	DD	015H
	DD	02aH
	DD	055H
	DD	013H
	DD	027H
	DD	04eH
	DD	012H
	DD	024H
	DD	049H
	DD	011H
	DD	022H
	DD	044H
	DD	010H
	DD	020H
	DD	040H
	DD	0fH
	DD	01eH
	DD	03cH
	DD	0eH
	DD	01cH
	DD	039H
	DD	0dH
	DD	01aH
	DD	036H
	DD	0cH
	DD	019H
	DD	033H
	DD	0cH
	DD	018H
	DD	030H
	DD	0bH
	DD	017H
	DD	02eH
	DD	0bH
	DD	016H
	DD	02cH
	DD	0aH
	DD	015H
	DD	02aH
_animletter DB	'nwahds', 00H
	ORG $+1
_left	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
_right	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
_opposite DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
_offset_x DD	01H
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	01H
_offset_y DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
_rnd5	DD	05H
	DD	0aH
	DD	0fH
	DD	014H
_rnd10	DD	0aH
	DD	0fH
	DD	014H
	DD	01eH
_rnd20	DD	014H
	DD	01eH
	DD	028H
	DD	032H
_rnd60	DD	03cH
	DD	046H
	DD	050H
	DD	05aH
_AiProc	DD	FLAT:@MAI_Zombie@4
	DD	FLAT:@MAI_Fat@4
	DD	FLAT:@MAI_SkelSd@4
	DD	FLAT:@MAI_SkelBow@4
	DD	FLAT:@MAI_Scav@4
	DD	FLAT:@MAI_Rhino@4
	DD	FLAT:@MAI_GoatMc@4
	DD	FLAT:@MAI_GoatBow@4
	DD	FLAT:@MAI_Fallen@4
	DD	FLAT:@MAI_Magma@4
	DD	FLAT:@MAI_SkelKing@4
	DD	FLAT:@MAI_Bat@4
	DD	FLAT:@MAI_Garg@4
	DD	FLAT:@MAI_Cleaver@4
	DD	FLAT:@MAI_Succ@4
	DD	FLAT:@MAI_Sneak@4
	DD	FLAT:@MAI_Storm@4
	DD	FLAT:@MAI_Fireman@4
	DD	FLAT:@MAI_Garbud@4
	DD	FLAT:@MAI_Acid@4
	DD	FLAT:@MAI_AcidUniq@4
	DD	FLAT:@MAI_Golum@4
	DD	FLAT:@MAI_Zhar@4
	DD	FLAT:@MAI_SnotSpil@4
	DD	FLAT:@MAI_Snake@4
	DD	FLAT:@MAI_Counselor@4
	DD	FLAT:@MAI_Mega@4
	DD	FLAT:@MAI_Diablo@4
	DD	FLAT:@MAI_Lazurus@4
	DD	FLAT:@MAI_Lazhelp@4
	DD	FLAT:@MAI_Lachdanan@4
	DD	FLAT:@MAI_Warlord@4
_DATA	ENDS
PUBLIC	@InitMonsterTRN@8
EXTRN	@Cl2ApplyTrans@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @InitMonsterTRN@8
_TEXT	SEGMENT
_n$ = -4
@InitMonsterTRN@8 PROC NEAR				; COMDAT
; _monst$ = ecx
; _special$ = edx
; File Source/monster.cpp
; Line 351
	push	ecx
	push	ecx
	push	ebp
	push	esi
	mov	esi, ecx
; Line 355
	mov	ecx, 256				; 00000100H
	imul	esi, 328				; 00000148H
	mov	eax, DWORD PTR _Monsters[esi+324]
$L85395:
; Line 357
	cmp	BYTE PTR [eax], 255			; 000000ffH
	jne	SHORT $L85398
; Line 358
	and	BYTE PTR [eax], 0
$L85398:
; Line 360
	inc	eax
	dec	ecx
	jne	SHORT $L85395
; Line 363
	xor	eax, eax
	test	edx, edx
	setne	al
	add	eax, 5
; Line 364
	xor	ebp, ebp
	test	eax, eax
	mov	DWORD PTR _n$[esp+16], eax
	jle	SHORT $L85401
	push	ebx
	push	edi
$L85399:
; Line 365
	cmp	ebp, 1
	jne	SHORT $L85403
	mov	al, BYTE PTR _Monsters[esi]
	cmp	al, 105					; 00000069H
	jb	SHORT $L85403
	cmp	al, 108					; 0000006cH
	jbe	SHORT $L85400
$L85403:
	mov	eax, ebp
; Line 366
	mov	DWORD PTR -8+[esp+24], 8
	imul	eax, 44					; 0000002cH
	lea	edi, DWORD PTR [eax+esi]
	lea	ebx, DWORD PTR _Monsters[edi+8]
$L85404:
; Line 370
	push	DWORD PTR _Monsters[edi+40]
	mov	edx, DWORD PTR _Monsters[esi+324]
	mov	ecx, DWORD PTR [ebx]
	call	@Cl2ApplyTrans@12
	add	ebx, 4
	dec	DWORD PTR -8+[esp+24]
	jne	SHORT $L85404
$L85400:
; Line 364
	inc	ebp
	cmp	ebp, DWORD PTR _n$[esp+24]
	jl	SHORT $L85399
	pop	edi
	pop	ebx
$L85401:
	pop	esi
	pop	ebp
; Line 374
	pop	ecx
	pop	ecx
	ret	0
@InitMonsterTRN@8 ENDP
_TEXT	ENDS
PUBLIC	_InitLevelMonsters
PUBLIC	_ClrAllMonsters
; Function compile flags: /Ogsy
;	COMDAT _InitLevelMonsters
_TEXT	SEGMENT
_InitLevelMonsters PROC NEAR				; COMDAT
; Line 377
	push	ebx
; Line 380
	xor	ebx, ebx
	mov	DWORD PTR _nummtypes, ebx
; Line 381
	mov	DWORD PTR _monstimgtot, ebx
; Line 382
	mov	DWORD PTR _MissileFileFlag, ebx
	mov	eax, OFFSET FLAT:_Monsters+1
$L85409:
; Line 385
	mov	BYTE PTR [eax], bl
	add	eax, 328				; 00000148H
	cmp	eax, OFFSET FLAT:_Monsters+5249
	jl	SHORT $L85409
; Line 388
	call	_ClrAllMonsters
; Line 390
	mov	ecx, 200				; 000000c8H
	mov	DWORD PTR _nummonsters, ebx
	mov	DWORD PTR _totalmonsters, ecx
; Line 392
	xor	eax, eax
$L85412:
; Line 393
	mov	DWORD PTR _monstactive[eax*4], eax
	inc	eax
	cmp	eax, ecx
	jl	SHORT $L85412
; Line 396
	mov	DWORD PTR _uniquetrans, ebx
	pop	ebx
; Line 397
	ret	0
_InitLevelMonsters ENDP
_TEXT	ENDS
PUBLIC	@AddMonsterType@8
PUBLIC	@InitMonsterGFX@4
EXTRN	@InitMonsterSND@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @AddMonsterType@8
_TEXT	SEGMENT
@AddMonsterType@8 PROC NEAR				; COMDAT
; _type$ = ecx
; _placeflag$ = edx
; Line 400
	push	ebx
	mov	ebx, edx
; Line 404
	mov	edx, DWORD PTR _nummtypes
	push	esi
	xor	eax, eax
	xor	esi, esi
	test	edx, edx
	push	edi
	jle	SHORT $L85424
; Line 401
	mov	edi, OFFSET FLAT:_Monsters
$L85422:
; Line 404
	test	eax, eax
	jne	SHORT $L85424
; Line 405
	movzx	eax, BYTE PTR [edi]
	sub	eax, ecx
	neg	eax
	sbb	eax, eax
	add	edi, 328				; 00000148H
	inc	eax
	inc	esi
	cmp	esi, edx
	jl	SHORT $L85422
$L85424:
; Line 408
	dec	esi
; Line 410
	test	eax, eax
	jne	SHORT $L85425
; Line 411
	mov	esi, edx
; Line 412
	inc	edx
; Line 413
	mov	eax, esi
	mov	DWORD PTR _nummtypes, edx
	imul	eax, 328				; 00000148H
	mov	BYTE PTR _Monsters[eax], cl
; Line 414
	shl	ecx, 7
	mov	eax, DWORD PTR _monsterdata[ecx+4]
; Line 415
	mov	ecx, esi
	add	DWORD PTR _monstimgtot, eax
	call	@InitMonsterGFX@4
; Line 416
	mov	ecx, esi
	call	@InitMonsterSND@4
$L85425:
; Line 419
	mov	eax, esi
	pop	edi
	imul	eax, 328				; 00000148H
	lea	eax, DWORD PTR _Monsters[eax+1]
	or	BYTE PTR [eax], bl
; Line 420
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 421
	ret	0
@AddMonsterType@8 ENDP
_TEXT	ENDS
PUBLIC	@IsSkel@4
PUBLIC	_GetLevelMTypes
EXTRN	_setlvlnum:BYTE
EXTRN	_setlevel:BYTE
EXTRN	_quests:BYTE
EXTRN	_DebugMonsters:BYTE
EXTRN	_monstdebug:DWORD
EXTRN	_debugmonsttypes:DWORD
EXTRN	@QuestStatus@4:NEAR
EXTRN	_gbMaxPlayers:BYTE
EXTRN	@random@8:NEAR
EXTRN	_currlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT _GetLevelMTypes
_TEXT	SEGMENT
_i$ = -4
_typelist$ = -804
_skeltypes$ = -452
_nt$ = -4
_GetLevelMTypes PROC NEAR				; COMDAT
; Line 424
	push	ebp
	mov	ebp, esp
	sub	esp, 804				; 00000324H
	push	ebx
	push	esi
	push	edi
; Line 440
	push	2
	pop	esi
	push	109					; 0000006dH
	mov	edx, esi
	pop	ecx
	call	@AddMonsterType@8
; Line 441
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	jne	SHORT $L85435
; Line 442
	xor	edx, edx
	push	108					; 0000006cH
	inc	edx
	pop	ecx
	call	@AddMonsterType@8
; Line 443
	xor	edx, edx
	push	96					; 00000060H
	inc	edx
	pop	ecx
	call	@AddMonsterType@8
; Line 444
	mov	edx, esi
	push	110					; 0000006eH
; Line 445
	jmp	$L89512
$L85435:
; Line 448
	cmp	BYTE PTR _setlevel, 0
	jne	$L85436
; Line 449
	push	6
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85437
; Line 450
	push	51					; 00000033H
	mov	edx, esi
	pop	ecx
	call	@AddMonsterType@8
$L85437:
; Line 451
	mov	ecx, esi
	call	@QuestStatus@4
	push	4
	test	eax, eax
	pop	esi
	je	SHORT $L85438
; Line 452
	movsx	ecx, BYTE PTR _UniqMonst
	mov	edx, esi
	call	@AddMonsterType@8
$L85438:
; Line 453
	push	3
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85439
; Line 454
	movsx	ecx, BYTE PTR _UniqMonst+64
	mov	edx, esi
	call	@AddMonsterType@8
$L85439:
; Line 455
	push	7
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85440
; Line 456
	movsx	ecx, BYTE PTR _UniqMonst+96
	mov	edx, esi
	call	@AddMonsterType@8
$L85440:
; Line 457
	mov	ecx, esi
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85441
; Line 458
	movsx	ecx, BYTE PTR _UniqMonst+224
	mov	edx, esi
	call	@AddMonsterType@8
$L85441:
; Line 459
	push	11					; 0000000bH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85442
; Line 460
	movsx	ecx, BYTE PTR _UniqMonst+256
	mov	edx, esi
	call	@AddMonsterType@8
$L85442:
; Line 462
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	$L85443
	mov	al, BYTE PTR _currlevel
	cmp	al, BYTE PTR _quests+288
	jne	$L85443
; Line 464
	push	50					; 00000032H
	mov	edx, esi
	pop	ecx
	call	@AddMonsterType@8
; Line 466
	and	DWORD PTR _nt$[ebp], 0
; Line 467
	push	8
	pop	edi
	mov	esi, OFFSET FLAT:_monsterdata+1109
$L85444:
; Line 468
	mov	ecx, edi
	call	@IsSkel@4
	test	eax, eax
	je	SHORT $L85445
; Line 472
	movsx	eax, BYTE PTR [esi-1]
	imul	eax, 15					; 0000000fH
	push	30					; 0000001eH
	cdq
	pop	ebx
	idiv	ebx
; Line 519
	movzx	ecx, BYTE PTR _currlevel
	inc	eax
	cmp	ecx, eax
	jl	SHORT $L85445
	movsx	eax, BYTE PTR [esi]
	imul	eax, 15					; 0000000fH
	cdq
	idiv	ebx
	inc	eax
	cmp	ecx, eax
	jg	SHORT $L85445
; Line 473
	test	BYTE PTR _MonstAvailTbl[edi], 3
	je	SHORT $L85445
; Line 474
	mov	eax, DWORD PTR _nt$[ebp]
	inc	DWORD PTR _nt$[ebp]
	mov	DWORD PTR _skeltypes$[ebp+eax*4], edi
$L85445:
	add	esi, 128				; 00000080H
	inc	edi
	cmp	esi, OFFSET FLAT:_monsterdata+3541
	jle	SHORT $L85444
; Line 479
	mov	edx, DWORD PTR _nt$[ebp]
	mov	cl, 88					; 00000058H
	call	@random@8
	mov	ecx, DWORD PTR _skeltypes$[ebp+eax*4]
	xor	edx, edx
	inc	edx
	call	@AddMonsterType@8
$L85443:
; Line 483
	movzx	esi, BYTE PTR _currlevel
	xor	edi, edi
	mov	ecx, OFFSET FLAT:_monsterdata+85
	mov	DWORD PTR _i$[ebp], edi
$L85450:
; Line 487
	movsx	eax, BYTE PTR [ecx-1]
	imul	eax, 15					; 0000000fH
	push	30					; 0000001eH
	cdq
	pop	ebx
	idiv	ebx
	inc	eax
	cmp	esi, eax
	jl	SHORT $L85451
	movsx	eax, BYTE PTR [ecx]
	imul	eax, 15					; 0000000fH
	cdq
	idiv	ebx
	inc	eax
	cmp	esi, eax
	jg	SHORT $L85451
; Line 488
	mov	eax, DWORD PTR _i$[ebp]
	test	BYTE PTR _MonstAvailTbl[eax], 3
	je	SHORT $L85451
; Line 489
	mov	DWORD PTR _typelist$[ebp+edi*4], eax
	inc	edi
$L85451:
	inc	DWORD PTR _i$[ebp]
	add	ecx, 128				; 00000080H
	cmp	ecx, OFFSET FLAT:_monsterdata+14293
	jl	SHORT $L85450
; Line 494
	cmp	DWORD PTR _monstdebug, 0
	je	SHORT $L89503
; Line 495
	xor	esi, esi
	cmp	DWORD PTR _debugmonsttypes, esi
	jle	$L85469
$L85456:
; Line 496
	mov	ecx, DWORD PTR _DebugMonsters[esi*4]
	xor	edx, edx
	inc	edx
	call	@AddMonsterType@8
	inc	esi
	cmp	esi, DWORD PTR _debugmonsttypes
	jl	SHORT $L85456
; Line 497
	jmp	$L85469
$L89503:
; Line 499
	test	edi, edi
	jle	$L85469
	mov	ebx, 4000				; 00000fa0H
$L85461:
	cmp	DWORD PTR _nummtypes, 16		; 00000010H
	jge	SHORT $L85469
	mov	eax, DWORD PTR _monstimgtot
	cmp	eax, ebx
	jge	SHORT $L85469
; Line 500
	xor	ecx, ecx
	test	edi, edi
	jle	SHORT $L89513
	mov	edx, ebx
	sub	edx, eax
$L85464:
	lea	eax, DWORD PTR _typelist$[ebp+ecx*4]
; Line 501
	mov	esi, DWORD PTR [eax]
	shl	esi, 7
	cmp	DWORD PTR _monsterdata[esi+4], edx
	jle	SHORT $L85466
; Line 502
	mov	esi, DWORD PTR _typelist$[ebp+edi*4-4]
	dec	edi
	mov	DWORD PTR [eax], esi
; Line 503
	jmp	SHORT $L89508
$L85466:
; Line 506
	inc	ecx
$L89508:
; Line 500
	cmp	ecx, edi
	jl	SHORT $L85464
; Line 509
	test	edi, edi
$L89513:
	je	SHORT $L85467
; Line 510
	mov	edx, edi
	mov	cl, 88					; 00000058H
	call	@random@8
; Line 511
	lea	esi, DWORD PTR _typelist$[ebp+eax*4]
	xor	edx, edx
	inc	edx
	mov	ecx, DWORD PTR [esi]
	call	@AddMonsterType@8
; Line 512
	mov	eax, DWORD PTR _typelist$[ebp+edi*4-4]
	dec	edi
	mov	DWORD PTR [esi], eax
$L85467:
; Line 499
	test	edi, edi
	jg	SHORT $L85461
; Line 517
	jmp	SHORT $L85469
$L85436:
; Line 518
	cmp	BYTE PTR _setlvlnum, 1
	jne	SHORT $L85469
; Line 519
	push	4
	pop	edx
	push	50					; 00000032H
$L89512:
	pop	ecx
	call	@AddMonsterType@8
$L85469:
	pop	edi
	pop	esi
	pop	ebx
; Line 522
	leave
	ret	0
_GetLevelMTypes ENDP
_TEXT	ENDS
EXTRN	_sprintf:NEAR
EXTRN	@LoadMissileGFX@4:NEAR
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	@LoadFileInMem@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @InitMonsterGFX@4
_TEXT	SEGMENT
_monst$ = -20
_mtype$ = -4
_anim$ = -12
_i$ = -8
_strBuff$ = -276
@InitMonsterGFX@4 PROC NEAR				; COMDAT
; _monst$ = ecx
; Line 525
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	mov	esi, ecx
; Line 533
	and	DWORD PTR _anim$[ebp], 0
	mov	DWORD PTR _monst$[ebp], esi
	imul	esi, 328				; 00000148H
	movzx	ebx, BYTE PTR _Monsters[esi]
	mov	DWORD PTR _mtype$[ebp], ebx
	push	edi
	shl	ebx, 7
	lea	edi, DWORD PTR _Monsters[esi+8]
	lea	eax, DWORD PTR _monsterdata[ebx+32]
	mov	DWORD PTR -8+[ebp], edi
	mov	DWORD PTR -16+[ebp], eax
$L85480:
; Line 534
	mov	ecx, DWORD PTR _anim$[ebp]
	mov	cl, BYTE PTR _animletter[ecx]
	cmp	cl, 115					; 00000073H
	jne	SHORT $L85484
	cmp	DWORD PTR _monsterdata[ebx+12], 0
	je	SHORT $L85490
$L85484:
	cmp	DWORD PTR [eax], 0
	jle	SHORT $L85490
; Line 535
	movsx	eax, cl
	push	eax
	lea	eax, DWORD PTR _strBuff$[ebp]
	push	DWORD PTR _monsterdata[ebx+8]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 537
	xor	edx, edx
	lea	ecx, DWORD PTR _strBuff$[ebp]
	call	@LoadFileInMem@8
; Line 538
	mov	DWORD PTR [edi-4], eax
; Line 540
	cmp	BYTE PTR _Monsters[esi], 109		; 0000006dH
	jne	SHORT $L85487
	mov	ecx, DWORD PTR _anim$[ebp]
	mov	cl, BYTE PTR _animletter[ecx]
	cmp	cl, 115					; 00000073H
	je	SHORT $L85486
	cmp	cl, 100					; 00000064H
	jne	SHORT $L85487
$L85486:
; Line 547
	push	8
	pop	ecx
	rep stosd
	mov	edi, DWORD PTR -8+[ebp]
	jmp	SHORT $L89525
$L85487:
; Line 542
	and	DWORD PTR _i$[ebp], 0
	mov	ecx, edi
$L85488:
; Line 543
	mov	edx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	add	edx, eax
	inc	DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx], edx
	add	ecx, 4
	cmp	DWORD PTR _i$[ebp], 8
	jl	SHORT $L85488
$L89525:
; Line 542
	mov	eax, DWORD PTR -16+[ebp]
$L85490:
; Line 553
	mov	ecx, DWORD PTR [eax]
	inc	DWORD PTR _anim$[ebp]
	mov	DWORD PTR [edi+32], ecx
; Line 554
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edi+36], ecx
	add	eax, 4
	add	edi, 44					; 0000002cH
	cmp	DWORD PTR _anim$[ebp], 6
	mov	DWORD PTR -16+[ebp], eax
	mov	DWORD PTR -8+[ebp], edi
	jl	$L85480
; Line 557
	lea	eax, DWORD PTR _monsterdata[ebx]
; Line 563
	mov	DWORD PTR _Monsters[esi+320], eax
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Monsters[esi+300], ecx
	add	ecx, -64				; ffffffc0H
	sar	ecx, 1
	mov	DWORD PTR _Monsters[esi+304], ecx
	mov	cl, BYTE PTR _monsterdata[ebx+88]
	mov	BYTE PTR _Monsters[esi+308], cl
	mov	cl, BYTE PTR _monsterdata[ebx+92]
; Line 565
	cmp	DWORD PTR _monsterdata[ebx+24], 0
	mov	BYTE PTR _Monsters[esi+309], cl
	mov	ecx, DWORD PTR _monsterdata[ebx+12]
	mov	DWORD PTR _Monsters[esi+312], ecx
	mov	cl, BYTE PTR _monsterdata[ebx+106]
	mov	BYTE PTR _Monsters[esi+316], cl
	je	SHORT $L85496
; Line 566
	mov	ecx, DWORD PTR _monsterdata[ebx+28]
	xor	edx, edx
	lea	esi, DWORD PTR _Monsters[esi+324]
	call	@LoadFileInMem@8
; Line 567
	mov	edx, DWORD PTR _monsterdata[ebx+12]
	mov	ecx, DWORD PTR _monst$[ebp]
	mov	DWORD PTR [esi], eax
	call	@InitMonsterTRN@8
; Line 569
	mov	ecx, DWORD PTR [esi]
; Line 570
	and	DWORD PTR [esi], 0
; Line 572
	call	@mem_free_dbg@4
$L85496:
; Line 575
	cmp	DWORD PTR _mtype$[ebp], 60		; 0000003cH
	pop	edi
	pop	esi
	pop	ebx
	jl	SHORT $L85499
	cmp	DWORD PTR _mtype$[ebp], 63		; 0000003fH
	jg	SHORT $L85499
	test	BYTE PTR _MissileFileFlag, 1
	jne	SHORT $L85499
; Line 576
	or	DWORD PTR _MissileFileFlag, 1
; Line 577
	mov	cl, 24					; 00000018H
	call	@LoadMissileGFX@4
$L85499:
; Line 579
	cmp	DWORD PTR _mtype$[ebp], 76		; 0000004cH
	jl	SHORT $L85500
	cmp	DWORD PTR _mtype$[ebp], 79		; 0000004fH
	jg	SHORT $L85500
	test	BYTE PTR _MissileFileFlag, 2
	jne	SHORT $L85500
; Line 580
	or	DWORD PTR _MissileFileFlag, 2
; Line 581
	mov	cl, 21					; 00000015H
	call	@LoadMissileGFX@4
$L85500:
; Line 583
	cmp	DWORD PTR _mtype$[ebp], 101		; 00000065H
	jne	SHORT $L85501
; Line 584
	test	BYTE PTR _MissileFileFlag, 4
	jne	$L85511
; Line 587
	or	DWORD PTR _MissileFileFlag, 4
; Line 588
	mov	cl, 22					; 00000016H
	call	@LoadMissileGFX@4
; Line 589
	mov	cl, 23					; 00000017H
	call	@LoadMissileGFX@4
$L85501:
; Line 591
	cmp	DWORD PTR _mtype$[ebp], 102		; 00000066H
	jne	SHORT $L85503
; Line 592
	test	BYTE PTR _MissileFileFlag, 32		; 00000020H
	jne	$L85511
; Line 595
	or	DWORD PTR _MissileFileFlag, 32		; 00000020H
; Line 596
	mov	cl, 40					; 00000028H
	call	@LoadMissileGFX@4
; Line 597
	mov	cl, 41					; 00000029H
	call	@LoadMissileGFX@4
$L85503:
; Line 599
	cmp	DWORD PTR _mtype$[ebp], 103		; 00000067H
	jne	SHORT $L85505
; Line 600
	test	BYTE PTR _MissileFileFlag, 64		; 00000040H
	jne	$L85511
; Line 603
	or	DWORD PTR _MissileFileFlag, 64		; 00000040H
; Line 604
	mov	cl, 44					; 0000002cH
	call	@LoadMissileGFX@4
; Line 605
	mov	cl, 45					; 0000002dH
	call	@LoadMissileGFX@4
$L85505:
; Line 607
	cmp	DWORD PTR _mtype$[ebp], 104		; 00000068H
	jne	SHORT $L85507
; Line 608
	test	BYTE PTR _MissileFileFlag, -128		; ffffff80H
	jne	SHORT $L85511
; Line 611
	or	BYTE PTR _MissileFileFlag, -128		; ffffff80H
; Line 612
	mov	cl, 42					; 0000002aH
	call	@LoadMissileGFX@4
; Line 613
	mov	cl, 43					; 0000002bH
	call	@LoadMissileGFX@4
$L85507:
; Line 615
	cmp	DWORD PTR _mtype$[ebp], 72		; 00000048H
	jl	SHORT $L85509
	cmp	DWORD PTR _mtype$[ebp], 75		; 0000004bH
	jg	SHORT $L85509
	test	BYTE PTR _MissileFileFlag, 8
	jne	SHORT $L85509
; Line 616
	or	DWORD PTR _MissileFileFlag, 8
; Line 617
	mov	cl, 25					; 00000019H
	call	@LoadMissileGFX@4
$L85509:
; Line 619
	cmp	DWORD PTR _mtype$[ebp], 46		; 0000002eH
	jl	SHORT $L85510
	cmp	DWORD PTR _mtype$[ebp], 49		; 00000031H
	jg	SHORT $L85510
	test	BYTE PTR _MissileFileFlag, 16		; 00000010H
	jne	SHORT $L85510
; Line 620
	or	DWORD PTR _MissileFileFlag, 16		; 00000010H
; Line 621
	mov	cl, 31					; 0000001fH
	call	@LoadMissileGFX@4
; Line 622
	mov	cl, 32					; 00000020H
	call	@LoadMissileGFX@4
; Line 623
	mov	cl, 33					; 00000021H
	call	@LoadMissileGFX@4
$L85510:
; Line 625
	cmp	DWORD PTR _mtype$[ebp], 110		; 0000006eH
	jne	SHORT $L85511
; Line 626
	mov	cl, 39					; 00000027H
	call	@LoadMissileGFX@4
$L85511:
; Line 628
	leave
	ret	0
@InitMonsterGFX@4 ENDP
_TEXT	ENDS
PUBLIC	@ClearMVars@4
; Function compile flags: /Ogsy
;	COMDAT @ClearMVars@4
_TEXT	SEGMENT
@ClearMVars@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 632
	imul	ecx, 228				; 000000e4H
	xor	eax, eax
	mov	DWORD PTR _monster[ecx+112], eax
; Line 633
	mov	DWORD PTR _monster[ecx+116], eax
; Line 634
	mov	DWORD PTR _monster[ecx+120], eax
; Line 635
	mov	DWORD PTR _monster[ecx+124], eax
; Line 636
	mov	DWORD PTR _monster[ecx+128], eax
; Line 637
	mov	DWORD PTR _monster[ecx+132], eax
; Line 638
	mov	DWORD PTR _monster[ecx+136], eax
; Line 639
	mov	DWORD PTR _monster[ecx+140], eax
; Line 640
	ret	0
@ClearMVars@4 ENDP
_TEXT	ENDS
PUBLIC	@InitMonster@20
EXTRN	_GetRndSeed:NEAR
EXTRN	_gnDifficulty:DWORD
; Function compile flags: /Ogsy
;	COMDAT @InitMonster@20
_TEXT	SEGMENT
_mtype$ = 8
_x$ = 12
_y$ = 16
@InitMonster@20 PROC NEAR				; COMDAT
; _i$ = ecx
; _rd$ = edx
; Line 643
	push	ebx
	mov	ebx, edx
; Line 644
	mov	edx, DWORD PTR _mtype$[esp]
	push	esi
	push	edi
	mov	edi, edx
; Line 646
	mov	esi, ecx
	imul	edi, 328				; 00000148H
	imul	esi, 228				; 000000e4H
; Line 647
	mov	eax, DWORD PTR _x$[esp+8]
; Line 648
	mov	ecx, DWORD PTR _y$[esp+8]
; Line 653
	and	DWORD PTR _monster[esi+4], 0
	add	edi, OFFSET FLAT:_Monsters
	mov	DWORD PTR _monster[esi+32], eax
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+48], eax
; Line 655
	mov	eax, DWORD PTR [edi+320]
	mov	DWORD PTR _monster[esi+72], ebx
	mov	DWORD PTR _monster[esi+36], ecx
	mov	DWORD PTR _monster[esi+44], ecx
	mov	DWORD PTR _monster[esi+52], ecx
	mov	DWORD PTR _monster[esi], edx
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _monster[esi+216], ecx
; Line 656
	mov	DWORD PTR _monster[esi+220], edi
; Line 657
	mov	DWORD PTR _monster[esi+224], eax
; Line 658
	mov	eax, DWORD PTR [edi+ebx*4+8]
	mov	DWORD PTR _monster[esi+84], eax
; Line 659
	mov	eax, DWORD PTR [edi+44]
; Line 660
	mov	cl, 88					; 00000058H
	mov	DWORD PTR _monster[esi+88], eax
	lea	edx, DWORD PTR [eax-1]
	call	@random@8
	mov	DWORD PTR _monster[esi+92], eax
; Line 661
	mov	eax, DWORD PTR [edi+40]
; Line 662
	mov	cl, 88					; 00000058H
	mov	DWORD PTR _monster[esi+96], eax
	lea	edx, DWORD PTR [eax-1]
	call	@random@8
	inc	eax
; Line 664
	cmp	BYTE PTR [edi], 110			; 0000006eH
	mov	DWORD PTR _monster[esi+100], eax
; Line 665
	mov	cl, 88					; 00000058H
	jne	SHORT $L85527
	xor	edx, edx
	inc	edx
	call	@random@8
	add	eax, 1666				; 00000682H
; Line 666
	jmp	SHORT $L89532
$L85527:
; Line 667
	movzx	edx, BYTE PTR [edi+309]
	movzx	eax, BYTE PTR [edi+308]
	sub	edx, eax
	inc	edx
	call	@random@8
	movzx	ecx, BYTE PTR [edi+308]
	add	eax, ecx
$L89532:
	shl	eax, 6
; Line 670
	cmp	BYTE PTR _gbMaxPlayers, 1
	mov	DWORD PTR _monster[esi+144], eax
	jne	SHORT $L85530
; Line 671
	sar	DWORD PTR _monster[esi+144], 1
	mov	eax, DWORD PTR _monster[esi+144]
; Line 672
	push	64					; 00000040H
	pop	ecx
	cmp	eax, ecx
	jge	SHORT $L85530
; Line 673
	mov	DWORD PTR _monster[esi+144], ecx
$L85530:
; Line 677
	mov	eax, DWORD PTR _monster[esi+144]
	mov	DWORD PTR _monster[esi+148], eax
; Line 678
	mov	eax, DWORD PTR [edi+320]
	mov	cl, BYTE PTR [eax+96]
	mov	BYTE PTR _monster[esi+152], cl
; Line 679
	mov	al, BYTE PTR [eax+104]
	mov	BYTE PTR _monster[esi+153], al
; Line 681
	xor	eax, eax
; Line 684
	and	BYTE PTR _monster[esi+28], al
; Line 685
	and	BYTE PTR _monster[esi+188], al
; Line 686
	and	BYTE PTR _monster[esi+160], al
	mov	BYTE PTR _monster[esi+8], 1
	mov	DWORD PTR _monster[esi+12], eax
	mov	DWORD PTR _monster[esi+16], eax
	mov	DWORD PTR _monster[esi+20], eax
; Line 687
	mov	DWORD PTR _monster[esi+24], eax
; Line 688
	mov	DWORD PTR _monster[esi+108], eax
; Line 689
	call	_GetRndSeed
	mov	DWORD PTR _monster[esi+176], eax
; Line 690
	call	_GetRndSeed
; Line 691
	and	BYTE PTR _monster[esi+191], 0
	mov	DWORD PTR _monster[esi+180], eax
; Line 692
	mov	eax, DWORD PTR [edi+320]
	mov	cl, BYTE PTR [eax+86]
	mov	BYTE PTR _monster[esi+192], cl
; Line 693
	mov	cx, WORD PTR [eax+124]
	mov	WORD PTR _monster[esi+194], cx
; Line 694
	mov	cl, BYTE PTR [eax+105]
	mov	BYTE PTR _monster[esi+196], cl
; Line 695
	mov	cl, BYTE PTR [eax+107]
	mov	BYTE PTR _monster[esi+197], cl
; Line 696
	mov	cl, BYTE PTR [eax+108]
	mov	BYTE PTR _monster[esi+198], cl
; Line 697
	mov	cl, BYTE PTR [eax+109]
	mov	BYTE PTR _monster[esi+199], cl
; Line 698
	mov	cl, BYTE PTR [eax+111]
	mov	BYTE PTR _monster[esi+200], cl
; Line 699
	mov	cl, BYTE PTR [eax+112]
	mov	BYTE PTR _monster[esi+201], cl
; Line 700
	mov	cl, BYTE PTR [eax+113]
	mov	BYTE PTR _monster[esi+202], cl
; Line 701
	mov	cx, WORD PTR [eax+116]
; Line 702
	and	BYTE PTR _monster[esi+212], 0
; Line 703
	and	BYTE PTR _monster[esi+213], 0
	mov	WORD PTR _monster[esi+204], cx
; Line 704
	mov	edx, DWORD PTR [eax+100]
; Line 705
	and	DWORD PTR _monster[esi+208], 0
; Line 707
	cmp	BYTE PTR _monster[esi+152], 12		; 0000000cH
	lea	ecx, DWORD PTR _monster[esi+156]
	mov	DWORD PTR [ecx], edx
	jne	SHORT $L85531
; Line 708
	mov	edx, DWORD PTR [edi+ebx*4+228]
; Line 710
	or	DWORD PTR [ecx], 4
	mov	DWORD PTR _monster[esi+84], edx
	mov	DWORD PTR _monster[esi+100], 1
; Line 711
	mov	DWORD PTR _monster[esi+4], 7
$L85531:
; Line 714
	mov	edi, DWORD PTR _gnDifficulty
	push	2
	cmp	edi, 1
	pop	edx
	jne	$L85532
; Line 718
	mov	ecx, DWORD PTR _monster[esi+144]
	add	BYTE PTR _monster[esi+192], 15		; 0000000fH
	add	BYTE PTR _monster[esi+196], 85		; 00000055H
	add	BYTE PTR _monster[esi+199], 85		; 00000055H
	lea	ecx, DWORD PTR [ecx+ecx*2+64]
	mov	DWORD PTR _monster[esi+144], ecx
; Line 719
	mov	DWORD PTR _monster[esi+148], ecx
; Line 720
	mov	cx, WORD PTR _monster[esi+194]
	add	cx, 1000				; 000003e8H
	add	ecx, ecx
	mov	WORD PTR _monster[esi+194], cx
; Line 721
	mov	cl, BYTE PTR _monster[esi+197]
	add	cl, dl
	add	cl, cl
	mov	BYTE PTR _monster[esi+197], cl
; Line 722
	mov	cl, BYTE PTR _monster[esi+198]
	add	cl, dl
	add	cl, cl
	mov	BYTE PTR _monster[esi+198], cl
; Line 723
	mov	cl, BYTE PTR _monster[esi+200]
	add	cl, dl
	add	cl, cl
	mov	BYTE PTR _monster[esi+200], cl
; Line 724
	mov	cl, BYTE PTR _monster[esi+201]
	add	cl, dl
	add	cl, cl
; Line 725
	add	BYTE PTR _monster[esi+202], 50		; 00000032H
	mov	BYTE PTR _monster[esi+201], cl
$L85532:
; Line 728
	cmp	edi, edx
	jne	$L85533
; Line 730
	mov	ecx, DWORD PTR _monster[esi+144]
; Line 735
	mov	dl, BYTE PTR _monster[esi+197]
	shl	dl, 2
	lea	ecx, DWORD PTR [ecx*4+192]
	add	BYTE PTR _monster[esi+192], 30		; 0000001eH
	mov	DWORD PTR _monster[esi+144], ecx
	mov	DWORD PTR _monster[esi+148], ecx
	mov	cx, WORD PTR _monster[esi+194]
	add	BYTE PTR _monster[esi+196], 120		; 00000078H
	add	cx, 1000				; 000003e8H
	add	BYTE PTR _monster[esi+199], 120		; 00000078H
	shl	ecx, 2
	mov	WORD PTR _monster[esi+194], cx
	mov	cl, 6
	add	dl, cl
	mov	BYTE PTR _monster[esi+197], dl
; Line 736
	mov	dl, BYTE PTR _monster[esi+198]
	shl	dl, 2
	add	dl, cl
	mov	BYTE PTR _monster[esi+198], dl
; Line 737
	mov	dl, BYTE PTR _monster[esi+200]
	shl	dl, 2
	add	dl, cl
	mov	BYTE PTR _monster[esi+200], dl
; Line 738
	mov	dl, BYTE PTR _monster[esi+201]
	shl	dl, 2
	add	dl, cl
; Line 739
	add	BYTE PTR _monster[esi+202], 80		; 00000050H
	mov	BYTE PTR _monster[esi+201], dl
; Line 740
	mov	ax, WORD PTR [eax+118]
	mov	WORD PTR _monster[esi+204], ax
$L85533:
	pop	edi
	pop	esi
	pop	ebx
; Line 742
	ret	12					; 0000000cH
@InitMonster@20 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@OPMI@Invalid?5Monster?$AA@		; `string'
EXTRN	_gbActivePlayers:BYTE
EXTRN	_plr:BYTE
;	COMDAT ??_C@_0BA@OPMI@Invalid?5Monster?$AA@
_DATA	SEGMENT
??_C@_0BA@OPMI@Invalid?5Monster?$AA@ DB 'Invalid Monster', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ClrAllMonsters
_TEXT	SEGMENT
_ClrAllMonsters PROC NEAR				; COMDAT
; Line 745
	push	ebx
	push	esi
	push	edi
; Line 749
	xor	ebx, ebx
	xor	edi, edi
	mov	esi, OFFSET FLAT:_monster+8
$L85537:
; Line 751
	mov	ecx, edi
	call	@ClearMVars@4
; Line 763
	push	8
	mov	cl, 89					; 00000059H
	pop	edx
	mov	DWORD PTR [esi+208], OFFSET FLAT:??_C@_0BA@OPMI@Invalid?5Monster?$AA@ ; `string'
	mov	BYTE PTR [esi], bl
	mov	DWORD PTR [esi-4], ebx
	mov	DWORD PTR [esi+104], ebx
	mov	DWORD PTR [esi+108], ebx
	mov	DWORD PTR [esi+24], ebx
	mov	DWORD PTR [esi+28], ebx
	mov	DWORD PTR [esi+32], ebx
	mov	DWORD PTR [esi+36], ebx
	mov	DWORD PTR [esi+40], ebx
	mov	DWORD PTR [esi+44], ebx
	call	@random@8
; Line 773
	movzx	edx, BYTE PTR _gbActivePlayers
	mov	cl, 89					; 00000059H
	mov	DWORD PTR [esi+64], eax
	mov	DWORD PTR [esi+56], ebx
	mov	DWORD PTR [esi+60], ebx
	mov	DWORD PTR [esi+76], ebx
	mov	DWORD PTR [esi+80], ebx
	mov	DWORD PTR [esi+84], ebx
	mov	DWORD PTR [esi+88], ebx
	mov	DWORD PTR [esi+92], ebx
	mov	DWORD PTR [esi+148], ebx
	mov	DWORD PTR [esi+100], ebx
	call	@random@8
	mov	DWORD PTR [esi+68], eax
; Line 774
	imul	eax, 21720				; 000054d8H
	mov	cl, BYTE PTR _plr[eax+64]
; Line 775
	mov	al, BYTE PTR _plr[eax+68]
	mov	BYTE PTR [esi+72], cl
	mov	BYTE PTR [esi+73], al
	add	esi, 228				; 000000e4H
	inc	edi
	cmp	esi, OFFSET FLAT:_monster+45608
	jl	$L85537
	pop	edi
	pop	esi
	pop	ebx
; Line 777
	ret	0
_ClrAllMonsters ENDP
_TEXT	ENDS
PUBLIC	@MonstPlace@8
EXTRN	_dFlags:BYTE
EXTRN	@SolidLoc@8:NEAR
EXTRN	_dMonster:BYTE
EXTRN	_dPlayer:BYTE
; Function compile flags: /Ogsy
;	COMDAT @MonstPlace@8
_TEXT	SEGMENT
@MonstPlace@8 PROC NEAR					; COMDAT
; _xp$ = ecx
; _yp$ = edx
; Line 786
	test	ecx, ecx
	jl	SHORT $L85549
	cmp	ecx, 112				; 00000070H
	jge	SHORT $L85549
	test	edx, edx
	jl	SHORT $L85549
	cmp	edx, 112				; 00000070H
	jge	SHORT $L85549
	mov	eax, ecx
	push	esi
	imul	eax, 112				; 00000070H
	lea	esi, DWORD PTR [eax+edx]
	cmp	DWORD PTR _dMonster[esi*4], 0
	pop	esi
	jne	SHORT $L85549
	cmp	BYTE PTR _dPlayer[eax+edx], 0
	jne	SHORT $L85549
; Line 790
	mov	al, BYTE PTR _dFlags[eax+edx]
; Line 792
	test	al, 2
; Line 793
	jne	SHORT $L85549
; Line 796
	test	al, 8
; Line 797
	jne	SHORT $L85549
; Line 800
	call	@SolidLoc@8
	neg	eax
	sbb	eax, eax
	inc	eax
; Line 801
	ret	0
$L85549:
; Line 787
	xor	eax, eax
; Line 801
	ret	0
@MonstPlace@8 ENDP
_TEXT	ENDS
PUBLIC	@PlaceMonster@16
; Function compile flags: /Ogsy
;	COMDAT @PlaceMonster@16
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
@PlaceMonster@16 PROC NEAR				; COMDAT
; _i$ = ecx
; _mtype$ = edx
; Line 804
	push	esi
	mov	esi, ecx
; Line 807
	mov	ecx, DWORD PTR _x$[esp]
	push	edi
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _y$[esp+4]
	lea	eax, DWORD PTR [esi+1]
; Line 809
	push	8
	mov	edi, edx
	pop	edx
	mov	DWORD PTR _dMonster[ecx*4], eax
	mov	cl, 90					; 0000005aH
	call	@random@8
; Line 810
	mov	edx, eax
	mov	ecx, esi
	push	DWORD PTR _y$[esp+4]
	push	DWORD PTR _x$[esp+8]
	push	edi
	call	@InitMonster@20
	pop	edi
	pop	esi
; Line 811
	ret	8
@PlaceMonster@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@HOFI@Monsters?2Monsters?2?$CFs?4TRN?$AA@ ; `string'
PUBLIC	@PlaceUniqueMonst@12
PUBLIC	@PlaceGroup@16
EXTRN	_setpc_x:DWORD
EXTRN	_setpc_y:DWORD
EXTRN	_zharlib:DWORD
EXTRN	_pLightTbl:DWORD
EXTRN	@AddLight@12:NEAR
EXTRN	@LoadFileWithMem@8:NEAR
EXTRN	_themeCount:DWORD
EXTRN	_dPiece:BYTE
EXTRN	_themeLoc:BYTE
;	COMDAT ??_C@_0BJ@HOFI@Monsters?2Monsters?2?$CFs?4TRN?$AA@
_DATA	SEGMENT
??_C@_0BJ@HOFI@Monsters?2Monsters?2?$CFs?4TRN?$AA@ DB 'Monsters\Monsters\'
	DB	'%s.TRN', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PlaceUniqueMonst@12
_TEXT	SEGMENT
_uniqindex$ = -12
_miniontype$ = -32
_packsize$ = 8
_x$ = -4
_y$ = -24
_i$ = -4
_uniqtype$ = -8
_count2$ = -16
_filestr$ = -96
_zharflag$ = -24
_Uniq$ = -28
_count$ = -20
@PlaceUniqueMonst@12 PROC NEAR				; COMDAT
; _uniqindex$ = ecx
; _miniontype$ = edx
; Line 814
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	esi
; Line 822
	mov	esi, DWORD PTR _nummonsters
	imul	esi, 228				; 000000e4H
; Line 823
	and	DWORD PTR _count$[ebp], 0
	mov	eax, ecx
; Line 825
	mov	ecx, DWORD PTR _uniquetrans
	mov	DWORD PTR _uniqindex$[ebp], eax
	add	ecx, 19					; 00000013H
	add	esi, OFFSET FLAT:_monster
	shl	eax, 5
	shl	ecx, 8
	add	eax, OFFSET FLAT:_UniqMonst
	cmp	ecx, 6912				; 00001b00H
	mov	DWORD PTR _miniontype$[ebp], edx
	mov	DWORD PTR _Uniq$[ebp], eax
	jge	$L85642
; Line 829
	mov	ecx, DWORD PTR _nummtypes
	and	DWORD PTR _uniqtype$[ebp], 0
	test	ecx, ecx
	push	edi
	jle	SHORT $L89581
	movsx	edx, BYTE PTR [eax]
	mov	eax, OFFSET FLAT:_Monsters
$L85583:
; Line 830
	movzx	edi, BYTE PTR [eax]
	cmp	edi, edx
	je	SHORT $L89581
	inc	DWORD PTR _uniqtype$[ebp]
	add	eax, 328				; 00000148H
	cmp	DWORD PTR _uniqtype$[ebp], ecx
	jl	SHORT $L85583
$L89581:
	push	ebx
$L85588:
; Line 836
	push	80					; 00000050H
	mov	cl, 91					; 0000005bH
	pop	edx
	call	@random@8
	mov	edi, eax
; Line 837
	mov	cl, 91					; 0000005bH
	push	80					; 00000050H
	add	edi, 16					; 00000010H
	pop	edx
	call	@random@8
; Line 838
	and	DWORD PTR _count2$[ebp], 0
	mov	ebx, eax
; Line 839
	lea	ecx, DWORD PTR [edi-3]
	lea	eax, DWORD PTR [edi+3]
	add	ebx, 16					; 00000010H
	cmp	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
	jge	SHORT $L89568
	lea	eax, DWORD PTR [ebx+3]
$L85590:
; Line 840
	lea	ecx, DWORD PTR [ebx-3]
	mov	edx, ecx
	jmp	SHORT $L89599
$L85593:
; Line 841
	test	edx, edx
	jl	SHORT $L85594
	cmp	edx, 112				; 00000070H
	jge	SHORT $L85594
	cmp	DWORD PTR _x$[ebp], 0
	jl	SHORT $L85594
	cmp	DWORD PTR _x$[ebp], 112			; 00000070H
	jge	SHORT $L85594
	mov	ecx, DWORD PTR _x$[ebp]
	call	@MonstPlace@8
	test	eax, eax
	je	SHORT $L85594
; Line 842
	inc	DWORD PTR _count2$[ebp]
$L85594:
; Line 840
	mov	edx, DWORD PTR _y$[ebp]
	lea	eax, DWORD PTR [ebx+3]
	inc	edx
$L89599:
	cmp	edx, eax
	mov	DWORD PTR _y$[ebp], edx
	jl	SHORT $L85593
	inc	DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [edi+3]
	cmp	DWORD PTR _x$[ebp], ecx
	jl	SHORT $L85590
; Line 847
	cmp	DWORD PTR _count2$[ebp], 9
	jge	SHORT $L85598
$L89568:
; Line 848
	inc	DWORD PTR _count$[ebp]
; Line 849
	cmp	DWORD PTR _count$[ebp], 1000		; 000003e8H
	jl	$L85588
$L85598:
; Line 854
	mov	edx, ebx
	mov	ecx, edi
	call	@MonstPlace@8
	test	eax, eax
	je	$L85588
; Line 859
	mov	edx, DWORD PTR _uniqindex$[ebp]
	mov	eax, DWORD PTR _setpc_x
	mov	ecx, DWORD PTR _setpc_y
	cmp	edx, 3
	jne	SHORT $L85600
; Line 860
	lea	edi, DWORD PTR [eax+eax+24]
; Line 861
	lea	ebx, DWORD PTR [ecx+ecx+28]
$L85600:
; Line 863
	cmp	edx, 8
	jne	SHORT $L85601
; Line 864
	lea	edi, DWORD PTR [eax+eax+22]
; Line 865
	lea	ebx, DWORD PTR [ecx+ecx+23]
$L85601:
; Line 867
	cmp	edx, 2
	jne	SHORT $L85605
; Line 869
	and	DWORD PTR _i$[ebp], 0
	cmp	DWORD PTR _themeCount, 0
	mov	DWORD PTR _zharflag$[ebp], 1
	jle	SHORT $L89595
; Line 868
	mov	DWORD PTR -20+[ebp], OFFSET FLAT:_themeLoc+4
$L85603:
; Line 870
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _zharlib
	jne	SHORT $L85604
	cmp	DWORD PTR _zharflag$[ebp], 1
	jne	SHORT $L85604
; Line 872
	mov	edx, DWORD PTR -20+[ebp]
	and	DWORD PTR _zharflag$[ebp], 0
	mov	edi, DWORD PTR [edx-4]
; Line 873
	mov	edx, DWORD PTR [edx]
	lea	edi, DWORD PTR [edi+edi+20]
	lea	ebx, DWORD PTR [edx+edx+20]
$L85604:
	inc	DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _themeCount
	add	DWORD PTR -20+[ebp], 20			; 00000014H
	cmp	DWORD PTR _i$[ebp], edx
	jl	SHORT $L85603
$L89595:
; Line 869
	mov	edx, DWORD PTR _uniqindex$[ebp]
$L85605:
; Line 877
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85607
; Line 878
	cmp	edx, 4
	jne	SHORT $L85608
; Line 879
	push	32					; 00000020H
	pop	edi
; Line 880
	push	46					; 0000002eH
	pop	ebx
$L85608:
; Line 882
	cmp	edx, 5
	jne	SHORT $L85609
; Line 883
	push	40					; 00000028H
	pop	edi
; Line 884
	push	45					; 0000002dH
	pop	ebx
$L85609:
; Line 886
	cmp	edx, 6
	jne	SHORT $L85610
; Line 887
	push	38					; 00000026H
	pop	edi
; Line 888
	push	49					; 00000031H
	pop	ebx
$L85610:
; Line 890
	cmp	edx, 1
	jne	SHORT $L85615
; Line 891
	push	35					; 00000023H
	pop	edi
; Line 892
	push	47					; 0000002fH
	pop	ebx
; Line 894
	jmp	SHORT $L85615
$L85607:
; Line 895
	cmp	edx, 4
	jne	SHORT $L85613
; Line 896
	lea	edi, DWORD PTR [eax+eax+19]
; Line 897
	lea	ebx, DWORD PTR [ecx+ecx+22]
$L85613:
; Line 899
	cmp	edx, 5
	jne	SHORT $L85614
; Line 900
	lea	edi, DWORD PTR [eax+eax+21]
; Line 901
	lea	ebx, DWORD PTR [ecx+ecx+19]
$L85614:
; Line 903
	cmp	edx, 6
	jne	SHORT $L85615
; Line 904
	lea	edi, DWORD PTR [eax+eax+21]
; Line 905
	lea	ebx, DWORD PTR [ecx+ecx+25]
$L85615:
; Line 908
	cmp	edx, 9
	jne	SHORT $L85619
; Line 909
	xor	edx, edx
; Line 910
	xor	ebx, ebx
	mov	ecx, OFFSET FLAT:_dPiece
$L85617:
	test	edx, edx
	jne	SHORT $L85619
; Line 911
	xor	edi, edi
	mov	eax, ecx
$L85620:
	test	edx, edx
	jne	SHORT $L85618
; Line 912
	cmp	DWORD PTR [eax], 367			; 0000016fH
	sete	dl
	inc	edi
	add	eax, 448				; 000001c0H
	cmp	edi, 112				; 00000070H
	jl	SHORT $L85620
$L85618:
; Line 910
	add	ecx, 4
	inc	ebx
	cmp	ecx, OFFSET FLAT:_dPiece+448
	jl	SHORT $L85617
$L85619:
; Line 917
	mov	edx, DWORD PTR _uniqtype$[ebp]
	mov	ecx, DWORD PTR _nummonsters
	push	ebx
	push	edi
	call	@PlaceMonster@16
; Line 918
	mov	al, BYTE PTR _uniqindex$[ebp]
; Line 920
	mov	edi, DWORD PTR _Uniq$[ebp]
	inc	al
	pop	ebx
	mov	BYTE PTR [esi+188], al
	mov	al, BYTE PTR [edi+12]
	test	al, al
	je	SHORT $L85623
; Line 921
	add	al, al
	mov	BYTE PTR [esi+192], al
; Line 922
	jmp	SHORT $L85624
$L85623:
; Line 923
	add	BYTE PTR [esi+192], 5
$L85624:
; Line 927
	mov	eax, DWORD PTR [edi+4]
	shl	WORD PTR [esi+194], 1
	mov	DWORD PTR [esi+216], eax
; Line 928
	movzx	eax, WORD PTR [edi+14]
	shl	eax, 6
; Line 930
	cmp	BYTE PTR _gbMaxPlayers, 1
	mov	DWORD PTR [esi+144], eax
	jne	SHORT $L85626
; Line 932
	push	64					; 00000040H
	sar	eax, 1
	pop	ecx
	mov	DWORD PTR [esi+144], eax
	cmp	eax, ecx
	jge	SHORT $L85626
; Line 933
	mov	DWORD PTR [esi+144], ecx
$L85626:
; Line 937
	mov	eax, DWORD PTR [esi+144]
; Line 941
	mov	cl, BYTE PTR [edi+19]
	mov	DWORD PTR [esi+148], eax
	mov	al, BYTE PTR [edi+16]
	mov	BYTE PTR [esi+152], al
	mov	al, BYTE PTR [edi+17]
	mov	BYTE PTR [esi+153], al
	mov	al, BYTE PTR [edi+18]
; Line 946
	mov	edx, DWORD PTR [esi+36]
	mov	BYTE PTR [esi+197], al
	mov	BYTE PTR [esi+200], al
	mov	ax, WORD PTR [edi+20]
	mov	WORD PTR [esi+204], ax
	mov	eax, DWORD PTR [edi+28]
	mov	BYTE PTR [esi+198], cl
	mov	BYTE PTR [esi+201], cl
	mov	ecx, DWORD PTR [esi+32]
	push	3
	mov	DWORD PTR [esi+208], eax
	call	@AddLight@12
; Line 948
	cmp	BYTE PTR _gbMaxPlayers, 1
	mov	BYTE PTR [esi+215], al
; Line 952
	je	SHORT $L85632
; Line 953
	mov	al, BYTE PTR [esi+152]
	cmp	al, 29					; 0000001dH
	jne	SHORT $L85630
; Line 954
	and	DWORD PTR [esi+208], 0
$L85630:
; Line 957
	cmp	al, 28					; 0000001cH
	jne	SHORT $L85632
	cmp	BYTE PTR _quests+375, 3
	jbe	SHORT $L85632
; Line 962
	mov	BYTE PTR [esi+8], 1
	jmp	SHORT $L85633
$L85632:
; Line 958
	cmp	DWORD PTR [esi+208], 0
	je	SHORT $L85633
; Line 959
	mov	BYTE PTR [esi+8], 6
$L85633:
; Line 966
	mov	ecx, DWORD PTR _gnDifficulty
	cmp	ecx, 1
	jne	SHORT $L85635
; Line 968
	mov	eax, DWORD PTR [esi+144]
	add	BYTE PTR [esi+192], 15			; 0000000fH
	lea	eax, DWORD PTR [eax+eax*2+64]
	mov	DWORD PTR [esi+144], eax
; Line 969
	mov	DWORD PTR [esi+148], eax
; Line 970
	mov	ax, WORD PTR [esi+194]
	add	ax, 1000				; 000003e8H
	add	eax, eax
	mov	WORD PTR [esi+194], ax
; Line 971
	mov	al, BYTE PTR [esi+197]
	add	al, 2
	add	al, al
	mov	BYTE PTR [esi+197], al
; Line 972
	mov	al, BYTE PTR [esi+198]
	add	al, 2
	add	al, al
	mov	BYTE PTR [esi+198], al
; Line 973
	mov	al, BYTE PTR [esi+200]
	add	al, 2
	add	al, al
	mov	BYTE PTR [esi+200], al
; Line 974
	mov	al, BYTE PTR [esi+201]
	add	al, 2
	add	al, al
	mov	BYTE PTR [esi+201], al
$L85635:
; Line 977
	cmp	ecx, 2
	jne	SHORT $L85636
; Line 979
	mov	eax, DWORD PTR [esi+144]
	add	BYTE PTR [esi+192], 30			; 0000001eH
	lea	eax, DWORD PTR [eax*4+192]
	mov	DWORD PTR [esi+144], eax
; Line 980
	mov	DWORD PTR [esi+148], eax
; Line 981
	mov	ax, WORD PTR [esi+194]
	add	ax, 1000				; 000003e8H
	shl	eax, 2
	mov	WORD PTR [esi+194], ax
; Line 982
	mov	al, BYTE PTR [esi+197]
	shl	al, 2
	add	al, 6
	mov	BYTE PTR [esi+197], al
; Line 983
	mov	al, BYTE PTR [esi+198]
	shl	al, 2
	add	al, 6
	mov	BYTE PTR [esi+198], al
; Line 984
	mov	al, BYTE PTR [esi+200]
	shl	al, 2
	add	al, 6
	mov	BYTE PTR [esi+200], al
; Line 985
	mov	al, BYTE PTR [esi+201]
	shl	al, 2
	add	al, 6
	mov	BYTE PTR [esi+201], al
$L85636:
; Line 988
	push	DWORD PTR [edi+8]
	lea	eax, DWORD PTR _filestr$[ebp]
	push	OFFSET FLAT:??_C@_0BJ@HOFI@Monsters?2Monsters?2?$CFs?4TRN?$AA@ ; `string'
	push	eax
	call	_sprintf
; Line 989
	mov	eax, DWORD PTR _uniquetrans
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _filestr$[ebp]
	lea	edx, DWORD PTR [eax+19]
	shl	edx, 8
	add	edx, DWORD PTR _pLightTbl
	call	@LoadFileWithMem@8
; Line 991
	mov	al, BYTE PTR _uniquetrans
; Line 993
	mov	cx, WORD PTR [edi+22]
	inc	DWORD PTR _uniquetrans
	mov	BYTE PTR [esi+189], al
	test	cl, 4
	je	SHORT $L85639
; Line 994
	mov	al, BYTE PTR [edi+24]
	mov	BYTE PTR [esi+196], al
; Line 995
	mov	BYTE PTR [esi+199], al
$L85639:
; Line 997
	test	cl, 8
	je	SHORT $L85640
; Line 998
	mov	al, BYTE PTR [edi+24]
	mov	BYTE PTR [esi+202], al
$L85640:
; Line 1001
	inc	DWORD PTR _nummonsters
	pop	edi
; Line 1003
	test	cl, 1
	je	SHORT $L85641
; Line 1004
	mov	eax, DWORD PTR _nummonsters
	mov	edx, DWORD PTR _packsize$[ebp]
	dec	eax
	push	eax
	movzx	eax, cx
	mov	ecx, DWORD PTR _miniontype$[ebp]
	push	eax
	call	@PlaceGroup@16
$L85641:
; Line 1007
	cmp	BYTE PTR [esi+152], 12			; 0000000cH
	je	SHORT $L85642
; Line 1008
	mov	eax, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+220]
; Line 1009
	mov	edx, DWORD PTR [esi+96]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	dec	edx
	mov	cl, 88					; 00000058H
	mov	DWORD PTR [esi+84], eax
	call	@random@8
; Line 1010
	and	DWORD PTR [esi+156], -5			; fffffffbH
	inc	eax
; Line 1011
	and	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+100], eax
$L85642:
	pop	esi
; Line 1013
	leave
	ret	4
@PlaceUniqueMonst@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BI@GBOG@Levels?2L3Data?2Anvil?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@	; `string'
PUBLIC	_PlaceQuestMonsters
PUBLIC	@SetMapMonsters@12
;	COMDAT ??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@ DB 'Levels\L1Data\Banner'
	DB	'1.DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@ DB 'Levels\L2Data\Blood2.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@ DB 'Levels\L2Data\Blind2.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@GBOG@Levels?2L3Data?2Anvil?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BI@GBOG@Levels?2L3Data?2Anvil?4DUN?$AA@ DB 'Levels\L3Data\Anvil.DU'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@ DB 'Levels\L4Data\Warlord'
	DB	'.DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@ DB 'Levels\L4Data\Vile1.DU'
	DB	'N', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _PlaceQuestMonsters
_TEXT	SEGMENT
_PlaceQuestMonsters PROC NEAR				; COMDAT
; Line 1016
	push	ebx
; Line 1020
	xor	ebx, ebx
	cmp	BYTE PTR _setlevel, bl
	push	esi
	jne	$L85646
; Line 1021
	push	6
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85647
; Line 1022
	push	ebx
	push	9
	xor	edx, edx
	pop	ecx
	call	@PlaceUniqueMonst@12
$L85647:
; Line 1025
	mov	al, BYTE PTR _currlevel
	cmp	al, BYTE PTR _quests+288
	jne	SHORT $L85648
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85648
; Line 1028
	xor	esi, esi
	cmp	DWORD PTR _nummtypes, ebx
	push	edi
	jle	SHORT $L89603
	mov	edi, OFFSET FLAT:_Monsters
$L85649:
; Line 1029
	movzx	ecx, BYTE PTR [edi]
	call	@IsSkel@4
	test	eax, eax
	jne	SHORT $L89603
	inc	esi
	add	edi, 328				; 00000148H
	cmp	esi, DWORD PTR _nummtypes
	jl	SHORT $L85649
$L89603:
; Line 1034
	xor	ecx, ecx
	push	30					; 0000001eH
	mov	edx, esi
	inc	ecx
	call	@PlaceUniqueMonst@12
	pop	edi
$L85648:
; Line 1037
	push	7
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85653
; Line 1038
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1039
	mov	eax, DWORD PTR _setpc_y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax]
	call	@SetMapMonsters@12
; Line 1040
	mov	ecx, esi
	call	@mem_free_dbg@4
$L85653:
; Line 1042
	push	9
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85655
; Line 1043
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1044
	mov	eax, DWORD PTR _setpc_y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax]
	call	@SetMapMonsters@12
; Line 1045
	mov	ecx, esi
	call	@mem_free_dbg@4
$L85655:
; Line 1047
	push	8
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85657
; Line 1048
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1049
	mov	eax, DWORD PTR _setpc_y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax]
	call	@SetMapMonsters@12
; Line 1050
	mov	ecx, esi
	call	@mem_free_dbg@4
$L85657:
; Line 1052
	push	10					; 0000000aH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85659
; Line 1053
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BI@GBOG@Levels?2L3Data?2Anvil?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1054
	mov	eax, DWORD PTR _setpc_y
	mov	ecx, esi
	lea	eax, DWORD PTR [eax+eax+2]
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax+2]
	call	@SetMapMonsters@12
; Line 1055
	mov	ecx, esi
	call	@mem_free_dbg@4
$L85659:
; Line 1057
	push	11					; 0000000bH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85661
; Line 1058
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1059
	mov	eax, DWORD PTR _setpc_y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax]
	call	@SetMapMonsters@12
; Line 1060
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 1061
	movsx	ecx, BYTE PTR _UniqMonst+256
	xor	edx, edx
	inc	edx
	call	@AddMonsterType@8
$L85661:
; Line 1063
	push	4
	pop	esi
	mov	ecx, esi
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85663
; Line 1064
	movsx	ecx, BYTE PTR _UniqMonst+224
	xor	edx, edx
	inc	edx
	call	@AddMonsterType@8
$L85663:
; Line 1066
	push	3
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85664
	cmp	DWORD PTR _zharlib, -1
	jne	SHORT $L85664
; Line 1067
	mov	BYTE PTR _quests+74, bl
$L85664:
; Line 1070
	mov	al, BYTE PTR _currlevel
	cmp	al, BYTE PTR _quests+360
	jne	$L85668
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85668
; Line 1071
	movsx	ecx, BYTE PTR _UniqMonst+128
	mov	edx, esi
	call	@AddMonsterType@8
; Line 1072
	movsx	ecx, BYTE PTR _UniqMonst+160
	mov	edx, esi
	call	@AddMonsterType@8
; Line 1073
	push	ebx
	xor	edx, edx
	mov	ecx, esi
	call	@PlaceUniqueMonst@12
; Line 1074
	push	ebx
	push	5
	xor	edx, edx
	pop	ecx
	call	@PlaceUniqueMonst@12
; Line 1075
	push	ebx
	push	6
	xor	edx, edx
	pop	ecx
	call	@PlaceUniqueMonst@12
; Line 1076
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1077
	mov	eax, DWORD PTR _setpc_y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax]
	call	@SetMapMonsters@12
; Line 1078
	mov	ecx, esi
	pop	esi
	pop	ebx
	jmp	@mem_free_dbg@4
$L85646:
; Line 1081
	cmp	BYTE PTR _setlvlnum, 1
	jne	SHORT $L85668
; Line 1082
	xor	ecx, ecx
	push	ebx
	xor	edx, edx
	inc	ecx
	call	@PlaceUniqueMonst@12
$L85668:
	pop	esi
	pop	ebx
; Line 1085
	ret	0
_PlaceQuestMonsters ENDP
_TEXT	ENDS
EXTRN	_abs:NEAR
EXTRN	_dung_map:BYTE
; Function compile flags: /Ogsy
;	COMDAT @PlaceGroup@16
_TEXT	SEGMENT
_mtype$ = -36
_num$ = -4
_leaderf$ = 8
_leader$ = 12
_placed$ = -8
_try1$ = -28
_try2$ = -20
_j$ = -24
_x1$ = -12
_y1$ = -16
@PlaceGroup@16 PROC NEAR				; COMDAT
; _mtype$ = ecx
; _num$ = edx
; Line 1088
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 1094
	mov	eax, DWORD PTR _leaderf$[ebp]
	push	ebx
	mov	DWORD PTR _mtype$[ebp], ecx
	xor	ebx, ebx
	xor	ecx, ecx
	and	eax, 1
	push	esi
	push	edi
	mov	DWORD PTR _num$[ebp], edx
	mov	DWORD PTR _placed$[ebp], ecx
	mov	DWORD PTR _try1$[ebp], ebx
; Line 1142
	mov	DWORD PTR -32+[ebp], eax
$L85686:
; Line 1095
	cmp	ecx, ebx
	je	SHORT $L85691
	mov	eax, DWORD PTR _nummonsters
	mov	DWORD PTR _placed$[ebp], ebx
	imul	eax, 228				; 000000e4H
	add	eax, OFFSET FLAT:_monster+36
	sub	DWORD PTR _nummonsters, ecx
$L85690:
; Line 1098
	mov	edx, DWORD PTR [eax-232]
	sub	eax, 228				; 000000e4H
	imul	edx, 112				; 00000070H
	add	edx, DWORD PTR [eax]
	dec	ecx
	mov	DWORD PTR _dMonster[edx*4], ebx
	jne	SHORT $L85690
$L85691:
; Line 1101
	cmp	DWORD PTR -32+[ebp], ebx
	je	SHORT $L85695
; Line 1102
	push	8
	mov	cl, 92					; 0000005cH
	pop	edx
	call	@random@8
; Line 1103
	mov	ecx, DWORD PTR _leader$[ebp]
	imul	ecx, 228				; 000000e4H
	shl	eax, 2
	mov	edi, DWORD PTR _offset_x[eax]
; Line 1104
	mov	esi, DWORD PTR _offset_y[eax]
	add	edi, DWORD PTR _monster[ecx+32]
	add	esi, DWORD PTR _monster[ecx+36]
; Line 1105
	mov	DWORD PTR _x1$[ebp], edi
; Line 1106
	mov	DWORD PTR _y1$[ebp], esi
; Line 1107
	jmp	SHORT $L85697
$L85695:
; Line 1109
	push	80					; 00000050H
	mov	cl, 93					; 0000005dH
	pop	edx
	call	@random@8
	mov	edi, eax
; Line 1111
	mov	cl, 93					; 0000005dH
	push	80					; 00000050H
	add	edi, 16					; 00000010H
	pop	edx
	mov	DWORD PTR _x1$[ebp], edi
	call	@random@8
	mov	esi, eax
; Line 1113
	mov	ecx, edi
	add	esi, 16					; 00000010H
	mov	edx, esi
	mov	DWORD PTR _y1$[ebp], esi
	call	@MonstPlace@8
	test	eax, eax
	je	SHORT $L85695
$L85697:
; Line 1116
	mov	ecx, DWORD PTR _nummonsters
	mov	eax, DWORD PTR _num$[ebp]
	lea	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _totalmonsters
	cmp	edx, eax
	jle	SHORT $L85698
; Line 1117
	sub	eax, ecx
	mov	DWORD PTR _num$[ebp], eax
$L85698:
; Line 1121
	cmp	DWORD PTR _num$[ebp], ebx
	mov	DWORD PTR _j$[ebp], ebx
	mov	DWORD PTR _try2$[ebp], ebx
	jle	$L85701
$L85699:
	cmp	DWORD PTR _try2$[ebp], 100		; 00000064H
	jge	$L85701
; Line 1124
	mov	edx, esi
	mov	ecx, edi
	call	@MonstPlace@8
	test	eax, eax
	je	$L85704
	mov	eax, DWORD PTR _x1$[ebp]
	mov	ecx, edi
	imul	eax, 112				; 00000070H
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _y1$[ebp]
	mov	al, BYTE PTR _dung_map[eax+edx]
	cmp	al, BYTE PTR _dung_map[ecx+esi]
	jne	$L85704
	mov	ebx, DWORD PTR _leaderf$[ebp]
	and	ebx, 2
	je	SHORT $L85702
	mov	eax, edi
	sub	eax, DWORD PTR _x1$[ebp]
	push	eax
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	$L89625
	mov	eax, esi
	sub	eax, DWORD PTR _y1$[ebp]
	push	eax
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	$L89625
$L85702:
; Line 1129
	mov	edx, DWORD PTR _mtype$[ebp]
	mov	ecx, DWORD PTR _nummonsters
	push	esi
	push	edi
	call	@PlaceMonster@16
; Line 1130
	cmp	DWORD PTR -32+[ebp], 0
	je	$L85707
; Line 1131
	mov	eax, DWORD PTR _nummonsters
	imul	eax, 228				; 000000e4H
	lea	edx, DWORD PTR _monster[eax+144]
	mov	ecx, DWORD PTR [edx]
	add	ecx, ecx
	mov	DWORD PTR [edx], ecx
; Line 1132
	mov	DWORD PTR _monster[eax+148], ecx
; Line 1133
	mov	ecx, DWORD PTR _leader$[ebp]
	imul	ecx, 228				; 000000e4H
; Line 1135
	test	ebx, ebx
	mov	dl, BYTE PTR _monster[ecx+153]
	mov	BYTE PTR _monster[eax+153], dl
	je	SHORT $L85706
; Line 1136
	mov	dl, BYTE PTR _leader$[ebp]
	mov	BYTE PTR _monster[eax+212], dl
; Line 1137
	mov	BYTE PTR _monster[eax+213], 1
; Line 1138
	mov	cl, BYTE PTR _monster[ecx+152]
	mov	BYTE PTR _monster[eax+152], cl
$L85706:
; Line 1141
	cmp	BYTE PTR _monster[eax+152], 12		; 0000000cH
	je	SHORT $L85707
; Line 1143
	mov	ebx, DWORD PTR _nummonsters
	mov	ecx, DWORD PTR _monster[eax+72]
	mov	edx, DWORD PTR _monster[eax+220]
	imul	ebx, 228				; 000000e4H
	mov	ecx, DWORD PTR [edx+ecx*4+8]
	mov	DWORD PTR _monster[eax+84], ecx
	mov	edx, DWORD PTR _monster[ebx+96]
	dec	edx
	mov	cl, 88					; 00000058H
	call	@random@8
	inc	eax
	mov	DWORD PTR _monster[ebx+100], eax
; Line 1144
	and	DWORD PTR _monster[ebx+156], -5		; fffffffbH
; Line 1145
	and	DWORD PTR _monster[ebx+4], 0
$L85707:
; Line 1148
	inc	DWORD PTR _nummonsters
; Line 1149
	inc	DWORD PTR _placed$[ebp]
; Line 1150
	inc	DWORD PTR _j$[ebp]
; Line 1151
	xor	ebx, ebx
	jmp	SHORT $L85700
$L89625:
	xor	ebx, ebx
$L85704:
; Line 1125
	inc	DWORD PTR _try2$[ebp]
$L85700:
; Line 1121
	push	8
	mov	cl, 94					; 0000005eH
	pop	edx
	call	@random@8
	add	edi, DWORD PTR _offset_x[eax*4]
	mov	cl, 94					; 0000005eH
	push	8
	pop	edx
	call	@random@8
	add	esi, DWORD PTR _offset_x[eax*4]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _num$[ebp]
	jl	$L85699
$L85701:
; Line 1153
	mov	ecx, DWORD PTR _placed$[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jge	SHORT $L89615
	inc	DWORD PTR _try1$[ebp]
	cmp	DWORD PTR _try1$[ebp], 10		; 0000000aH
	jl	$L85686
$L89615:
; Line 1158
	test	BYTE PTR _leaderf$[ebp], 2
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $L85709
; Line 1159
	mov	eax, DWORD PTR _leader$[ebp]
	imul	eax, 228				; 000000e4H
	mov	BYTE PTR _monster[eax+214], cl
$L85709:
; Line 1161
	leave
	ret	8
@PlaceGroup@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@	; `string'
PUBLIC	_LoadDiabMonsts
EXTRN	_diabquad1x:DWORD
EXTRN	_diabquad1y:DWORD
EXTRN	_diabquad3x:DWORD
EXTRN	_diabquad3y:DWORD
EXTRN	_diabquad2x:DWORD
EXTRN	_diabquad2y:DWORD
EXTRN	_diabquad4x:DWORD
EXTRN	_diabquad4y:DWORD
;	COMDAT ??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@ DB 'Levels\L4Data\diab1.DU'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@ DB 'Levels\L4Data\diab2a.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@ DB 'Levels\L4Data\diab3a.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@ DB 'Levels\L4Data\diab4a.'
	DB	'DUN', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _LoadDiabMonsts
_TEXT	SEGMENT
_LoadDiabMonsts PROC NEAR				; COMDAT
; Line 1164
	push	esi
; Line 1167
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1168
	mov	eax, DWORD PTR _diabquad1y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _diabquad1x
	lea	edx, DWORD PTR [eax+eax]
	call	@SetMapMonsters@12
; Line 1169
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 1170
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1171
	mov	eax, DWORD PTR _diabquad2y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _diabquad2x
	lea	edx, DWORD PTR [eax+eax]
	call	@SetMapMonsters@12
; Line 1172
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 1173
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1174
	mov	eax, DWORD PTR _diabquad3y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _diabquad3x
	lea	edx, DWORD PTR [eax+eax]
	call	@SetMapMonsters@12
; Line 1175
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 1176
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1177
	mov	eax, DWORD PTR _diabquad4y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _diabquad4x
	lea	edx, DWORD PTR [eax+eax]
	call	@SetMapMonsters@12
; Line 1178
	mov	ecx, esi
	pop	esi
	jmp	@mem_free_dbg@4
_LoadDiabMonsts ENDP
_TEXT	ENDS
PUBLIC	_InitMonsters
PUBLIC	_PlaceUniques
PUBLIC	@AddMonster@20
EXTRN	_CheckDungeonClear:NEAR
EXTRN	@DoUnVision@12:NEAR
EXTRN	@DoVision@20:NEAR
EXTRN	_trigflag:BYTE
EXTRN	_trigs:BYTE
; Function compile flags: /Ogsy
;	COMDAT _InitMonsters
_TEXT	SEGMENT
_max$ = -452
_v24$ = -448
_scattertypes$ = -444
_InitMonsters PROC NEAR					; COMDAT
; Line 1184
	sub	esp, 452				; 000001c4H
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1210
	xor	edi, edi
	xor	ebp, ebp
; Line 1212
	cmp	BYTE PTR _gbMaxPlayers, 1
	mov	DWORD PTR _max$[esp+468], edi
	je	SHORT $L85741
; Line 1213
	call	_CheckDungeonClear
$L85741:
; Line 1215
	xor	esi, esi
	inc	esi
	cmp	BYTE PTR _setlevel, 0
	jne	SHORT $L85743
	push	edi
	push	edi
	push	edi
	xor	edx, edx
	mov	ecx, esi
	call	@AddMonster@20
; Line 1216
	push	edi
	push	edi
	push	edi
	xor	edx, edx
	mov	ecx, esi
	call	@AddMonster@20
; Line 1217
	push	edi
	push	edi
	push	edi
	xor	edx, edx
	mov	ecx, esi
	call	@AddMonster@20
; Line 1218
	push	edi
	push	edi
	push	edi
	xor	edx, edx
	mov	ecx, esi
	call	@AddMonster@20
; Line 1219
	cmp	BYTE PTR _setlevel, 0
	jne	SHORT $L85743
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	jne	SHORT $L85743
; Line 1220
	call	_LoadDiabMonsts
$L85743:
; Line 1222
	mov	eax, DWORD PTR _trigflag+16
; Line 1223
	cmp	BYTE PTR _currlevel, 15			; 0000000fH
	mov	DWORD PTR _v24$[esp+468], eax
	jne	SHORT $L85744
; Line 1224
	mov	DWORD PTR _v24$[esp+468], esi
$L85744:
; Line 1225
	mov	ebx, DWORD PTR _v24$[esp+468]
; Line 1226
	cmp	ebx, edi
	jle	SHORT $L85745
; Line 1227
	mov	esi, OFFSET FLAT:_trigs
$L85746:
; Line 1229
	push	-2					; fffffffeH
	pop	ebp
$L85749:
; Line 1231
	push	-2					; fffffffeH
	pop	edi
$L85752:
; Line 1233
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	0
	push	0
	add	edx, edi
	push	15					; 0000000fH
	add	ecx, ebp
	inc	edi
	call	@DoVision@20
; Line 1234
	cmp	edi, 2
	jl	SHORT $L85752
; Line 1235
	inc	ebp
; Line 1236
	cmp	ebp, 2
	jl	SHORT $L85749
; Line 1237
	add	esi, 16					; 00000010H
; Line 1238
	dec	ebx
; Line 1239
	jne	SHORT $L85746
; Line 1240
	xor	ebp, ebp
	xor	edi, edi
$L85745:
; Line 1242
	call	_PlaceQuestMonsters
; Line 1243
	cmp	BYTE PTR _setlevel, 0
	jne	$LABEL_42$85780
; Line 1244
	call	_PlaceUniques
; Line 1245
	push	16					; 00000010H
	pop	edi
$L85756:
; Line 1247
	push	16					; 00000010H
	pop	esi
$L85759:
; Line 1249
	mov	edx, esi
	mov	ecx, edi
	call	@SolidLoc@8
	test	eax, eax
	jne	SHORT $L85762
; Line 1250
	inc	ebp
$L85762:
; Line 1251
	inc	esi
; Line 1252
	cmp	esi, 96					; 00000060H
	jl	SHORT $L85759
; Line 1253
	inc	edi
; Line 1254
	cmp	edi, 96					; 00000060H
	jl	SHORT $L85756
; Line 1255
	mov	eax, ebp
	push	30					; 0000001eH
	cdq
	pop	ecx
	idiv	ecx
; Line 1256
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85763
; Line 1257
	mov	ecx, eax
	sar	ecx, 1
	add	eax, ecx
$L85763:
; Line 1258
	mov	ecx, DWORD PTR _nummonsters
; Line 1259
	mov	edx, 190				; 000000beH
	lea	esi, DWORD PTR [ecx+eax]
	cmp	esi, edx
	jle	SHORT $L85764
; Line 1260
	mov	eax, edx
	sub	eax, ecx
$L85764:
; Line 1261
	mov	esi, DWORD PTR _nummtypes
; Line 1262
	add	eax, ecx
; Line 1263
	xor	edx, edx
; Line 1264
	mov	DWORD PTR _totalmonsters, eax
; Line 1265
	test	esi, esi
	jle	SHORT $L85768
; Line 1266
	mov	ebp, OFFSET FLAT:_Monsters+1
$L85766:
; Line 1268
	test	BYTE PTR [ebp], 1
	je	SHORT $L85769
; Line 1274
	mov	edi, DWORD PTR _max$[esp+468]
	shl	edi, 2
	inc	DWORD PTR _max$[esp+468]
	mov	DWORD PTR _scattertypes$[esp+edi+468], edx
$L85769:
	inc	edx
	add	ebp, 328				; 00000148H
	cmp	edx, esi
	jl	SHORT $L85766
$L85768:
; Line 1276
	cmp	ecx, eax
	jge	SHORT $L89649
$L85772:
; Line 1278
	mov	edx, DWORD PTR _max$[esp+468]
	mov	cl, 95					; 0000005fH
	call	@random@8
; Line 1279
	cmp	BYTE PTR _currlevel, 1
	mov	esi, DWORD PTR _scattertypes$[esp+eax*4+468]
	je	SHORT $L85773
; Line 1281
	push	2
	mov	cl, 95					; 0000005fH
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85773
; Line 1283
	cmp	BYTE PTR _currlevel, 2
; Line 1284
	mov	cl, 95					; 0000005fH
	jne	SHORT $L85776
	push	2
	pop	edx
	call	@random@8
	inc	eax
	jmp	SHORT $LABEL_40$85777
$L85776:
; Line 1289
	push	3
	pop	edx
	call	@random@8
	add	eax, 3
	jmp	SHORT $LABEL_41$85778
$L85773:
; Line 1295
	xor	eax, eax
$LABEL_40$85777:
; Line 1286
	inc	eax
$LABEL_41$85778:
; Line 1291
	push	0
	push	0
	mov	edx, eax
	mov	ecx, esi
	call	@PlaceGroup@16
; Line 1292
	mov	eax, DWORD PTR _nummonsters
	cmp	eax, DWORD PTR _totalmonsters
	jl	SHORT $L85772
$L89649:
	xor	edi, edi
$LABEL_42$85780:
; Line 1300
	mov	ebx, DWORD PTR _v24$[esp+468]
; Line 1301
	cmp	ebx, edi
	jle	SHORT $L85784
; Line 1302
	mov	esi, OFFSET FLAT:_trigs
$L85782:
; Line 1304
	push	-2					; fffffffeH
	pop	ebp
$L85785:
; Line 1306
	push	-2					; fffffffeH
	pop	edi
$L85788:
; Line 1308
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	add	edx, edi
	push	15					; 0000000fH
	add	ecx, ebp
	inc	edi
	call	@DoUnVision@12
; Line 1309
	cmp	edi, 2
	jl	SHORT $L85788
; Line 1310
	inc	ebp
; Line 1311
	cmp	ebp, 2
	jl	SHORT $L85785
; Line 1312
	add	esi, 16					; 00000010H
; Line 1313
	dec	ebx
; Line 1314
	jne	SHORT $L85782
$L85784:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1316
	add	esp, 452				; 000001c4H
	ret	0
_InitMonsters ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _PlaceUniques
_TEXT	SEGMENT
_PlaceUniques PROC NEAR					; COMDAT
; Line 1323
	push	ebx
	push	ebp
; Line 1333
	xor	ebx, ebx
	xor	ebp, ebp
; Line 1334
	cmp	BYTE PTR _UniqMonst, -1
	je	$L89656
	push	esi
	push	edi
; Line 1335
	xor	ecx, ecx
; Line 1336
	mov	eax, OFFSET FLAT:_UniqMonst
$L85802:
; Line 1337
	shl	ecx, 5
	mov	cl, BYTE PTR _UniqMonst[ecx+12]
	cmp	cl, BYTE PTR _currlevel
	jne	$LABEL_25$85804
; Line 1344
	xor	esi, esi
; Line 1345
	xor	ecx, ecx
; Line 1346
	cmp	DWORD PTR _nummtypes, ebx
	jle	SHORT $L85809
; Line 1347
	mov	edi, OFFSET FLAT:_Monsters
$L85807:
; Line 1349
	test	esi, esi
	jne	SHORT $L85809
; Line 1351
	movzx	edx, BYTE PTR [edi]
	movsx	esi, BYTE PTR [eax]
	xor	ebx, ebx
	cmp	esi, edx
	setne	bl
	neg	ebx
; Line 1352
	add	edi, 328				; 00000148H
	mov	edx, ebx
; Line 1354
	inc	ecx
; Line 1355
	cmp	ecx, DWORD PTR _nummtypes
	lea	esi, DWORD PTR [edx+1]
	jl	SHORT $L85807
$L85809:
; Line 1358
	xor	ebx, ebx
	dec	ecx
	cmp	ebp, ebx
	jne	SHORT $L85813
; Line 1359
	cmp	BYTE PTR _quests+50, bl
	jne	SHORT $LABEL_23$85815
; Line 1361
	xor	esi, esi
$L85813:
; Line 1363
	cmp	ebp, 2
	jne	SHORT $L85816
; Line 1364
	cmp	BYTE PTR _quests+74, bl
	jne	SHORT $LABEL_23$85815
; Line 1366
	xor	esi, esi
$L85816:
; Line 1368
	cmp	ebp, 3
	jne	SHORT $L85818
; Line 1369
	cmp	BYTE PTR _quests+170, bl
	jne	SHORT $LABEL_23$85815
; Line 1371
	xor	esi, esi
$L85818:
; Line 1373
	cmp	ebp, 7
	jne	SHORT $LABEL_20$85821
; Line 1379
	cmp	BYTE PTR _quests+98, bl
	jne	SHORT $LABEL_23$85815
; Line 1380
	xor	esi, esi
$LABEL_20$85821:
; Line 1375
	cmp	ebp, 8
	jne	SHORT $LABEL_23$85815
	cmp	BYTE PTR _quests+266, bl
	jne	SHORT $LABEL_23$85815
; Line 1376
	xor	esi, esi
$LABEL_23$85815:
; Line 1384
	cmp	esi, ebx
	je	SHORT $LABEL_25$85804
; Line 1385
	mov	edx, ecx
	push	8
	mov	ecx, ebp
	call	@PlaceUniqueMonst@12
$LABEL_25$85804:
	inc	ebp
	mov	eax, ebp
	mov	ecx, ebp
	shl	eax, 5
	add	eax, OFFSET FLAT:_UniqMonst
	cmp	BYTE PTR [eax], -1
	jne	$L85802
	pop	edi
	pop	esi
$L89656:
	pop	ebp
	pop	ebx
; Line 1388
	ret	0
_PlaceUniques ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SetMapMonsters@12
_TEXT	SEGMENT
_startx$ = -16
_starty$ = 8
_v6$ = -4
_v13$ = -12
_v14$ = -8
@SetMapMonsters@12 PROC NEAR				; COMDAT
; _pMap$ = ecx
; _startx$ = edx
; Line 1391
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
; Line 1408
	push	2
	mov	DWORD PTR _startx$[ebp], edx
	pop	edx
	push	109					; 0000006dH
	mov	esi, ecx
	pop	ecx
	call	@AddMonsterType@8
; Line 1409
	xor	ebx, ebx
	xor	edi, edi
	push	ebx
	inc	edi
	push	ebx
	push	ebx
	xor	edx, edx
	mov	ecx, edi
	call	@AddMonster@20
; Line 1410
	xor	edx, edx
	mov	ecx, edi
	push	ebx
	push	ebx
	push	ebx
	call	@AddMonster@20
; Line 1411
	xor	edx, edx
	mov	ecx, edi
	push	ebx
	push	ebx
	push	ebx
	call	@AddMonster@20
; Line 1412
	xor	edx, edx
	mov	ecx, edi
	push	ebx
	push	ebx
	push	ebx
	call	@AddMonster@20
; Line 1413
	cmp	BYTE PTR _setlevel, bl
	je	SHORT $L85845
	cmp	BYTE PTR _setlvlnum, 5
	jne	SHORT $L85845
; Line 1414
	movsx	ecx, BYTE PTR _UniqMonst+128
	push	4
	pop	edi
	mov	edx, edi
	call	@AddMonsterType@8
; Line 1415
	movsx	ecx, BYTE PTR _UniqMonst+160
	mov	edx, edi
	call	@AddMonsterType@8
; Line 1416
	movsx	ecx, BYTE PTR _UniqMonst+192
	mov	edx, edi
	call	@AddMonsterType@8
; Line 1417
	xor	edx, edx
	mov	ecx, edi
	push	ebx
	call	@PlaceUniqueMonst@12
; Line 1418
	xor	edx, edx
	push	ebx
	push	5
	pop	ecx
	call	@PlaceUniqueMonst@12
; Line 1419
	xor	edx, edx
	push	ebx
	push	6
	pop	ecx
	call	@PlaceUniqueMonst@12
$L85845:
; Line 1423
	mov	cx, WORD PTR [esi]
	mov	ax, WORD PTR [esi+2]
	lea	edx, DWORD PTR [ecx+ecx]
	movzx	edx, dx
	mov	DWORD PTR _v6$[ebp], edx
; Line 1424
	lea	edx, DWORD PTR [eax+eax]
; Line 1425
	movzx	ecx, cx
	movzx	eax, ax
	movzx	edx, dx
	imul	ecx, eax
	mov	eax, edx
	imul	eax, DWORD PTR _v6$[ebp]
	add	ecx, eax
; Line 1427
	cmp	edx, ebx
	lea	eax, DWORD PTR [esi+ecx*2+4]
	mov	DWORD PTR _v14$[ebp], eax
	jle	SHORT $L85857
; Line 1429
	mov	ecx, DWORD PTR _starty$[ebp]
	mov	DWORD PTR _v13$[ebp], edx
	lea	edi, DWORD PTR [ecx+16]
$L85855:
; Line 1431
	xor	esi, esi
	cmp	DWORD PTR _v6$[ebp], ebx
	jle	SHORT $L85860
$L85858:
; Line 1432
	mov	ax, WORD PTR [eax]
	cmp	ax, bx
	je	SHORT $L85862
; Line 1433
	movzx	eax, ax
	push	2
	movsx	ecx, BYTE PTR _MonstConvTbl[eax-1]
	pop	edx
	call	@AddMonsterType@8
; Line 1435
	mov	edx, DWORD PTR _startx$[ebp]
	mov	ecx, DWORD PTR _nummonsters
	inc	DWORD PTR _nummonsters
	push	edi
	lea	edx, DWORD PTR [esi+edx+16]
	push	edx
	mov	edx, eax
	call	@PlaceMonster@16
$L85862:
	mov	eax, DWORD PTR _v14$[ebp]
	add	eax, 2
; Line 1438
	inc	esi
	cmp	esi, DWORD PTR _v6$[ebp]
	mov	DWORD PTR _v14$[ebp], eax
	jl	SHORT $L85858
$L85860:
; Line 1440
	inc	edi
; Line 1441
	dec	DWORD PTR _v13$[ebp]
; Line 1442
	jne	SHORT $L85855
$L85857:
	pop	edi
	pop	esi
	pop	ebx
; Line 1444
	leave
	ret	4
@SetMapMonsters@12 ENDP
_TEXT	ENDS
PUBLIC	@DeleteMonster@4
; Function compile flags: /Ogsy
;	COMDAT @DeleteMonster@4
_TEXT	SEGMENT
@DeleteMonster@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1451
	dec	DWORD PTR _nummonsters
; Line 1452
	mov	eax, DWORD PTR _nummonsters
; Line 1453
	lea	ecx, DWORD PTR _monstactive[ecx*4]
	push	esi
	lea	eax, DWORD PTR _monstactive[eax*4]
	mov	esi, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax], esi
; Line 1454
	mov	DWORD PTR [ecx], edx
	pop	esi
; Line 1455
	ret	0
@DeleteMonster@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @AddMonster@20
_TEXT	SEGMENT
_dir$ = 8
_mtype$ = 12
_InMap$ = 16
@AddMonster@20 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1459
	mov	eax, DWORD PTR _nummonsters
	cmp	eax, 200				; 000000c8H
	jge	SHORT $L85879
	push	esi
; Line 1460
	mov	esi, DWORD PTR _monstactive[eax*4]
	inc	eax
; Line 1461
	cmp	DWORD PTR _InMap$[esp], 0
	mov	DWORD PTR _nummonsters, eax
	je	SHORT $L85881
	push	edi
; Line 1462
	mov	edi, ecx
	imul	edi, 112				; 00000070H
	add	edi, edx
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _dMonster[edi*4], eax
	pop	edi
$L85881:
; Line 1463
	push	edx
	mov	edx, DWORD PTR _dir$[esp+4]
	push	ecx
	mov	ecx, esi
	push	DWORD PTR _mtype$[esp+8]
	call	@InitMonster@20
; Line 1464
	mov	eax, esi
	pop	esi
	jmp	SHORT $L85878
$L85879:
; Line 1467
	or	eax, -1
$L85878:
; Line 1468
	ret	12					; 0000000cH
@AddMonster@20 ENDP
_TEXT	ENDS
PUBLIC	@NewMonsterAnim@12
; Function compile flags: /Ogsy
;	COMDAT @NewMonsterAnim@12
_TEXT	SEGMENT
_md$ = 8
@NewMonsterAnim@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _anim$ = edx
; Line 1472
	mov	eax, DWORD PTR _md$[esp-4]
	imul	ecx, 228				; 000000e4H
	push	esi
	mov	esi, DWORD PTR [edx+eax*4+4]
; Line 1473
	and	DWORD PTR _monster[ecx+92], 0
	mov	DWORD PTR _monster[ecx+84], esi
; Line 1474
	mov	esi, DWORD PTR [edx+36]
; Line 1476
	and	DWORD PTR _monster[ecx+156], -7		; fffffff9H
	mov	DWORD PTR _monster[ecx+96], esi
	mov	DWORD PTR _monster[ecx+100], 1
; Line 1477
	mov	edx, DWORD PTR [edx+40]
; Line 1478
	mov	DWORD PTR _monster[ecx+72], eax
	mov	DWORD PTR _monster[ecx+88], edx
	pop	esi
; Line 1479
	ret	4
@NewMonsterAnim@12 ENDP
_TEXT	ENDS
PUBLIC	@M_Ranged@4
; Function compile flags: /Ogsy
;	COMDAT @M_Ranged@4
_TEXT	SEGMENT
@M_Ranged@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1483
	imul	ecx, 228				; 000000e4H
	mov	cl, BYTE PTR _monster[ecx+152]
; Line 1484
	cmp	cl, 3
	je	SHORT $L89678
	cmp	cl, 7
	je	SHORT $L89678
	cmp	cl, 14					; 0000000eH
	je	SHORT $L89678
	cmp	cl, 29					; 0000001dH
	je	SHORT $L89678
	xor	eax, eax
; Line 1485
	ret	0
$L89678:
; Line 1484
	xor	eax, eax
	inc	eax
; Line 1485
	ret	0
@M_Ranged@4 ENDP
_TEXT	ENDS
PUBLIC	@M_Talker@4
; Function compile flags: /Ogsy
;	COMDAT @M_Talker@4
_TEXT	SEGMENT
@M_Talker@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1489
	imul	ecx, 228				; 000000e4H
	mov	cl, BYTE PTR _monster[ecx+152]
; Line 1496
	cmp	cl, 28					; 0000001cH
	je	SHORT $L89683
	cmp	cl, 31					; 0000001fH
	je	SHORT $L89683
	cmp	cl, 18					; 00000012H
	je	SHORT $L89683
	cmp	cl, 22					; 00000016H
	je	SHORT $L89683
	cmp	cl, 23					; 00000017H
	je	SHORT $L89683
	cmp	cl, 30					; 0000001eH
	je	SHORT $L89683
	cmp	cl, 29					; 0000001dH
	je	SHORT $L89683
	xor	eax, eax
; Line 1497
	ret	0
$L89683:
; Line 1496
	xor	eax, eax
	inc	eax
; Line 1497
	ret	0
@M_Talker@4 ENDP
_TEXT	ENDS
PUBLIC	@M_Enemy@4
; Function compile flags: /Ogsy
;	COMDAT @M_Enemy@4
_TEXT	SEGMENT
_i$ = -28
_v19$ = -24
_v20$ = -32
_v21$ = -20
_j$ = -24
_v23$ = -16
_v24$ = -12
_v25$ = -8
_v26$ = -2
_v27$ = -1
@M_Enemy@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1500
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	mov	esi, ecx
; Line 1529
	or	DWORD PTR _v24$[ebp], -1
	mov	DWORD PTR _i$[ebp], esi
; Line 1532
	imul	esi, 228				; 000000e4H
	or	DWORD PTR _v23$[ebp], -1
	add	esi, OFFSET FLAT:_monster
; Line 1533
	xor	ebx, ebx
	push	edi
; Line 1534
	test	BYTE PTR [esi+156], 32			; 00000020H
	mov	DWORD PTR _v25$[ebp], ebx
	jne	$L85929
; Line 1535
	mov	DWORD PTR _v21$[ebp], ebx
	mov	edi, OFFSET FLAT:_plr+319
$L85927:
; Line 1538
	cmp	BYTE PTR [edi-290], bl
	je	$LABEL_18$85934
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [edi-267]
	jne	$LABEL_18$85934
	cmp	BYTE PTR [edi], bl
	jne	$LABEL_18$85934
	cmp	DWORD PTR [edi+89], ebx
	jne	SHORT $L85932
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	$LABEL_18$85934
$L85932:
; Line 1542
	mov	edx, DWORD PTR [edi-263]
	mov	ebx, DWORD PTR [esi+32]
	imul	edx, 112				; 00000070H
	imul	ebx, 112				; 00000070H
	mov	ecx, DWORD PTR [edi-259]
	mov	eax, DWORD PTR [esi+36]
	mov	dl, BYTE PTR _dung_map[edx+ecx]
	sub	dl, BYTE PTR _dung_map[ebx+eax]
	neg	dl
	sbb	edx, edx
; Line 1543
	sub	eax, ecx
	inc	edx
	push	eax
	mov	DWORD PTR _v19$[ebp], edx
	call	_abs
	mov	ebx, eax
; Line 1544
	mov	eax, DWORD PTR [esi+32]
	sub	eax, DWORD PTR [edi-263]
	push	eax
	call	_abs
	pop	ecx
	cmp	eax, ebx
	pop	ecx
	jg	SHORT $L85935
; Line 1545
	mov	eax, DWORD PTR [esi+36]
	sub	eax, DWORD PTR [edi-259]
; Line 1546
	jmp	SHORT $L85936
$L85935:
; Line 1547
	mov	eax, DWORD PTR [esi+32]
	sub	eax, DWORD PTR [edi-263]
$L85936:
; Line 1548
	push	eax
	call	_abs
	pop	ecx
; Line 1549
	xor	ebx, ebx
	mov	ecx, DWORD PTR _v19$[ebp]
	cmp	ecx, ebx
	je	SHORT $L85937
; Line 1550
	cmp	DWORD PTR _v25$[ebp], ebx
	je	SHORT $LABEL_17$85939
; Line 1552
	jmp	SHORT $L85941
$L85937:
	cmp	DWORD PTR _v25$[ebp], ebx
	jne	SHORT $LABEL_16$85942
$L85941:
; Line 1555
	cmp	eax, DWORD PTR _v23$[ebp]
	jl	SHORT $LABEL_17$85939
$LABEL_16$85942:
; Line 1558
	cmp	DWORD PTR _v24$[ebp], -1
	jne	SHORT $LABEL_18$85934
$LABEL_17$85939:
; Line 1561
	mov	edx, DWORD PTR _v21$[ebp]
	and	DWORD PTR [esi+156], -17		; ffffffefH
	mov	DWORD PTR _v24$[ebp], edx
; Line 1562
	mov	dl, BYTE PTR [edi-255]
	mov	BYTE PTR _v27$[ebp], dl
; Line 1563
	mov	dl, BYTE PTR [edi-251]
	mov	BYTE PTR _v26$[ebp], dl
; Line 1564
	mov	DWORD PTR _v23$[ebp], eax
; Line 1565
	mov	DWORD PTR _v25$[ebp], ecx
$LABEL_18$85934:
; Line 1568
	inc	DWORD PTR _v21$[ebp]
; Line 1569
	add	edi, 21720				; 000054d8H
; Line 1570
	lea	eax, DWORD PTR [edi-267]
	cmp	eax, OFFSET FLAT:_plr+86932
	jl	$L85927
$L85929:
; Line 1573
	cmp	DWORD PTR _nummonsters, ebx
	mov	DWORD PTR _j$[ebp], ebx
	jle	$L85951
	xor	eax, eax
	mov	DWORD PTR -20+[ebp], 4
$L85949:
; Line 1574
	mov	eax, DWORD PTR _monstactive[eax]
; Line 1576
	cmp	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR -36+[ebp], eax
	je	$L85950
; Line 1579
	mov	edi, eax
	imul	edi, 228				; 000000e4H
	mov	edx, DWORD PTR _monster[edi+32]
	cmp	edx, 1
	jne	SHORT $L85953
	cmp	DWORD PTR _monster[edi+36], ebx
	je	$L85950
$L85953:
; Line 1581
	mov	ecx, eax
	call	@M_Talker@4
	test	eax, eax
	je	SHORT $L85954
	cmp	DWORD PTR _monster[edi+208], ebx
	jne	$L85950
$L85954:
; Line 1585
	test	BYTE PTR [esi+156], 32			; 00000020H
	jne	SHORT $L85955
	sub	edx, DWORD PTR [esi+32]
	push	edx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L85958
	mov	eax, DWORD PTR _monster[edi+36]
	sub	eax, DWORD PTR [esi+36]
	push	eax
	call	_abs
	cmp	eax, 2
	pop	ecx
	jl	SHORT $L85957
$L85958:
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_Ranged@4
	test	eax, eax
	je	$L85950
$L85957:
	test	BYTE PTR [esi+156], 32			; 00000020H
	jne	SHORT $L85955
	test	BYTE PTR _monster[edi+156], 32		; 00000020H
; Line 1586
	je	$L85950
$L85955:
; Line 1590
	mov	edx, DWORD PTR _monster[edi+32]
	mov	ebx, DWORD PTR [esi+32]
	imul	edx, 112				; 00000070H
	imul	ebx, 112				; 00000070H
	mov	ecx, DWORD PTR _monster[edi+36]
	mov	eax, DWORD PTR [esi+36]
	mov	dl, BYTE PTR _dung_map[edx+ecx]
	sub	dl, BYTE PTR _dung_map[ebx+eax]
	neg	dl
	sbb	edx, edx
; Line 1591
	sub	eax, ecx
	inc	edx
	push	eax
	mov	DWORD PTR _v20$[ebp], edx
	call	_abs
	mov	ebx, eax
; Line 1592
	mov	eax, DWORD PTR [esi+32]
	sub	eax, DWORD PTR _monster[edi+32]
	push	eax
	call	_abs
	pop	ecx
	cmp	eax, ebx
	pop	ecx
	jg	SHORT $L85959
; Line 1593
	mov	eax, DWORD PTR [esi+36]
	sub	eax, DWORD PTR _monster[edi+36]
; Line 1594
	jmp	SHORT $L85960
$L85959:
; Line 1595
	mov	eax, DWORD PTR [esi+32]
	sub	eax, DWORD PTR _monster[edi+32]
$L85960:
; Line 1596
	push	eax
	call	_abs
	pop	ecx
; Line 1597
	xor	ebx, ebx
	mov	ecx, DWORD PTR _v20$[ebp]
	cmp	ecx, ebx
	je	SHORT $L85961
; Line 1598
	cmp	DWORD PTR _v25$[ebp], ebx
	je	SHORT $LABEL_40$85963
; Line 1600
	jmp	SHORT $L85965
$L85961:
	cmp	DWORD PTR _v25$[ebp], ebx
	jne	SHORT $LABEL_39$85966
$L85965:
; Line 1603
	cmp	eax, DWORD PTR _v23$[ebp]
	jl	SHORT $LABEL_40$85963
$LABEL_39$85966:
; Line 1606
	cmp	DWORD PTR _v24$[ebp], -1
	jne	SHORT $L85950
$LABEL_40$85963:
; Line 1609
	mov	edx, DWORD PTR -36+[ebp]
	or	DWORD PTR [esi+156], 16			; 00000010H
	mov	DWORD PTR _v24$[ebp], edx
; Line 1610
	mov	dl, BYTE PTR _monster[edi+40]
	mov	BYTE PTR _v27$[ebp], dl
; Line 1611
	mov	dl, BYTE PTR _monster[edi+44]
	mov	BYTE PTR _v26$[ebp], dl
; Line 1612
	mov	DWORD PTR _v23$[ebp], eax
; Line 1613
	mov	DWORD PTR _v25$[ebp], ecx
$L85950:
	inc	DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR -20+[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	add	DWORD PTR -20+[ebp], 4
	cmp	ecx, DWORD PTR _nummonsters
	jl	$L85949
$L85951:
; Line 1616
	mov	eax, DWORD PTR _v24$[ebp]
	cmp	eax, -1
	jne	SHORT $L85969
; Line 1617
	or	BYTE PTR [esi+157], 4
; Line 1618
	jmp	SHORT $L85970
$L85969:
; Line 1619
	and	BYTE PTR [esi+157], -5			; fffffffbH
; Line 1620
	mov	DWORD PTR [esi+76], eax
; Line 1621
	mov	al, BYTE PTR _v27$[ebp]
	mov	BYTE PTR [esi+80], al
; Line 1622
	mov	al, BYTE PTR _v26$[ebp]
	mov	BYTE PTR [esi+81], al
$L85970:
	pop	edi
	pop	esi
	pop	ebx
; Line 1624
	leave
	ret	0
@M_Enemy@4 ENDP
_TEXT	ENDS
PUBLIC	@M_GetDir@4
EXTRN	@GetDirection@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @M_GetDir@4
_TEXT	SEGMENT
@M_GetDir@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1629
	imul	ecx, 228				; 000000e4H
	movzx	eax, BYTE PTR _monster[ecx+81]
	mov	edx, DWORD PTR _monster[ecx+36]
	push	eax
	movzx	eax, BYTE PTR _monster[ecx+80]
	mov	ecx, DWORD PTR _monster[ecx+32]
	push	eax
	call	@GetDirection@16
; Line 1630
	ret	0
@M_GetDir@4 ENDP
_TEXT	ENDS
PUBLIC	@M_CheckEFlag@4
EXTRN	_dArch:BYTE
EXTRN	_dpiece_defs_map_2:BYTE
; Function compile flags: /Ogsy
;	COMDAT @M_CheckEFlag@4
_TEXT	SEGMENT
@M_CheckEFlag@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1633
	mov	eax, ecx
	push	esi
; Line 1641
	imul	eax, 228				; 000000e4H
	mov	esi, OFFSET FLAT:_dpiece_defs_map_2
	push	edi
	mov	ecx, DWORD PTR _monster[eax+32]
	mov	edx, DWORD PTR _monster[eax+36]
	imul	ecx, 112				; 00000070H
	add	edx, ecx
	xor	edi, edi
	lea	ecx, DWORD PTR [edx-111]
	shl	ecx, 5
	add	ecx, esi
; Line 1642
	cmp	ecx, esi
	jb	SHORT $LABEL_9$85984
; Line 1644
	push	2
	pop	esi
	push	ebx
$L85985:
; Line 1646
	movzx	ebx, WORD PTR [ecx+esi*2]
	or	edi, ebx
	inc	esi
; Line 1647
	cmp	esi, 10					; 0000000aH
	jl	SHORT $L85985
; Line 1648
	movsx	ecx, BYTE PTR _dArch[edx-111]
	or	ecx, edi
	pop	ebx
	je	SHORT $LABEL_9$85984
; Line 1649
	mov	DWORD PTR _monster[eax+104], 1
; Line 1650
	jmp	SHORT $L85990
$LABEL_9$85984:
; Line 1652
	and	DWORD PTR _monster[eax+104], 0
$L85990:
	pop	edi
	pop	esi
; Line 1653
	ret	0
@M_CheckEFlag@4 ENDP
_TEXT	ENDS
PUBLIC	@M_StartStand@8
; Function compile flags: /Ogsy
;	COMDAT @M_StartStand@8
_TEXT	SEGMENT
@M_StartStand@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _md$ = edx
; Line 1656
	push	ebx
	push	esi
	push	edi
	mov	ebx, edx
	mov	edi, ecx
; Line 1657
	call	@ClearMVars@4
; Line 1658
	mov	esi, edi
; Line 1659
	mov	ecx, edi
	imul	esi, 228				; 000000e4H
	push	ebx
	mov	eax, DWORD PTR _monster[esi+220]
	cmp	BYTE PTR [eax], 109			; 0000006dH
	lea	edx, DWORD PTR [eax+48]
	je	SHORT $L89709
; Line 1661
	lea	edx, DWORD PTR [eax+4]
$L89709:
	call	@NewMonsterAnim@12
; Line 1662
	lea	eax, DWORD PTR _monster[esi+4]
; Line 1671
	mov	DWORD PTR _monster[esi+72], ebx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _monster[esi+112], ecx
	xor	ecx, ecx
	mov	DWORD PTR _monster[esi+116], ecx
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _monster[esi+56], ecx
	mov	DWORD PTR _monster[esi+60], ecx
	mov	ecx, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _monster[esi+44], ecx
	mov	DWORD PTR _monster[esi+52], ecx
; Line 1672
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+48], eax
	call	@M_CheckEFlag@4
; Line 1673
	mov	ecx, edi
	pop	edi
	pop	esi
	pop	ebx
	jmp	@M_Enemy@4
@M_StartStand@8 ENDP
_TEXT	ENDS
PUBLIC	@M_StartDelay@8
; Function compile flags: /Ogsy
;	COMDAT @M_StartDelay@8
_TEXT	SEGMENT
@M_StartDelay@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _len$ = edx
; Line 1678
	test	edx, edx
	mov	eax, ecx
	jle	SHORT $L86004
; Line 1682
	imul	eax, 228				; 000000e4H
	cmp	BYTE PTR _monster[eax+152], 28		; 0000001cH
	je	SHORT $L86004
; Line 1683
	mov	DWORD PTR _monster[eax+116], edx
; Line 1684
	mov	DWORD PTR _monster[eax+4], 13		; 0000000dH
$L86004:
; Line 1686
	ret	0
@M_StartDelay@8 ENDP
_TEXT	ENDS
PUBLIC	@M_StartSpStand@8
; Function compile flags: /Ogsy
;	COMDAT @M_StartSpStand@8
_TEXT	SEGMENT
@M_StartSpStand@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _md$ = edx
; Line 1689
	push	ebx
	mov	ebx, ecx
	push	esi
; Line 1690
	mov	esi, ebx
	imul	esi, 228				; 000000e4H
	push	edi
	mov	edi, edx
	mov	edx, DWORD PTR _monster[esi+220]
	push	edi
	add	edx, 224				; 000000e0H
	call	@NewMonsterAnim@12
; Line 1694
	mov	eax, DWORD PTR _monster[esi+32]
; Line 1695
	mov	ecx, DWORD PTR _monster[esi+36]
	and	DWORD PTR _monster[esi+56], 0
	and	DWORD PTR _monster[esi+60], 0
; Line 1698
	mov	DWORD PTR _monster[esi+72], edi
	mov	DWORD PTR _monster[esi+4], 11		; 0000000bH
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+44], ecx
	mov	DWORD PTR _monster[esi+48], eax
	mov	DWORD PTR _monster[esi+52], ecx
	pop	edi
; Line 1699
	mov	ecx, ebx
	pop	esi
	pop	ebx
	jmp	@M_CheckEFlag@4
@M_StartSpStand@8 ENDP
_TEXT	ENDS
PUBLIC	@M_StartWalk@24
; Function compile flags: /Ogsy
;	COMDAT @M_StartWalk@24
_TEXT	SEGMENT
_i$ = -4
_xvel$ = -12
_yvel$ = 8
_xadd$ = 12
_yadd$ = 16
_EndDir$ = 20
_fy$ = -8
@M_StartWalk@24 PROC NEAR				; COMDAT
; _i$ = ecx
; _xvel$ = edx
; Line 1703
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
; Line 1704
	mov	esi, ecx
	mov	DWORD PTR _i$[ebp], ecx
	imul	esi, 228				; 000000e4H
	mov	ecx, DWORD PTR _xadd$[ebp]
	push	edi
	mov	eax, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _xvel$[ebp], edx
; Line 1705
	mov	edx, DWORD PTR _yadd$[ebp]
; Line 1709
	mov	DWORD PTR _monster[esi+48], eax
	lea	edi, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR _monster[esi+36]
	add	edx, ecx
	mov	ebx, edi
	mov	DWORD PTR _fy$[ebp], edx
	imul	ebx, 112				; 00000070H
; Line 1712
	mov	eax, DWORD PTR _fy$[ebp]
	add	ebx, DWORD PTR _fy$[ebp]
	mov	DWORD PTR _monster[esi+44], eax
; Line 1713
	mov	eax, DWORD PTR _xvel$[ebp]
	mov	DWORD PTR _monster[esi+64], eax
; Line 1714
	mov	eax, DWORD PTR _yvel$[ebp]
	mov	DWORD PTR _monster[esi+68], eax
; Line 1715
	mov	eax, DWORD PTR _xadd$[ebp]
	or	edx, -1
	mov	DWORD PTR _monster[esi+112], eax
	sub	edx, DWORD PTR _i$[ebp]
; Line 1716
	mov	eax, DWORD PTR _yadd$[ebp]
	mov	DWORD PTR _monster[esi+116], eax
; Line 1717
	mov	eax, DWORD PTR _EndDir$[ebp]
	mov	DWORD PTR _dMonster[ebx*4], edx
; Line 1719
	mov	edx, DWORD PTR _monster[esi+220]
	mov	DWORD PTR _monster[esi+52], ecx
	mov	ecx, DWORD PTR _i$[ebp]
	push	eax
	add	edx, 48					; 00000030H
	mov	DWORD PTR _monster[esi+4], 1
	mov	DWORD PTR _monster[esi+40], edi
	mov	DWORD PTR _monster[esi+120], eax
	mov	DWORD PTR _monster[esi+72], eax
	call	@NewMonsterAnim@12
; Line 1723
	mov	ecx, DWORD PTR _i$[ebp]
	xor	eax, eax
	mov	DWORD PTR _monster[esi+132], eax
	mov	DWORD PTR _monster[esi+136], eax
	mov	DWORD PTR _monster[esi+140], eax
	call	@M_CheckEFlag@4
	pop	edi
	pop	esi
	pop	ebx
; Line 1724
	leave
	ret	16					; 00000010H
@M_StartWalk@24 ENDP
_TEXT	ENDS
PUBLIC	@M_StartWalk2@32
EXTRN	@ChangeLightXY@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @M_StartWalk2@32
_TEXT	SEGMENT
_i$ = -4
_xvel$ = -8
_yvel$ = 8
_xoff$ = 12
_yoff$ = 16
_xadd$ = 20
_yadd$ = 24
_EndDir$ = 28
@M_StartWalk2@32 PROC NEAR				; COMDAT
; _i$ = ecx
; _xvel$ = edx
; Line 1727
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _xvel$[ebp], edx
	mov	DWORD PTR _i$[ebp], esi
; Line 1728
	imul	esi, 228				; 000000e4H
	mov	edx, DWORD PTR _monster[esi+32]
	push	edi
; Line 1731
	mov	edi, DWORD PTR _monster[esi+32]
	add	edx, DWORD PTR _xadd$[ebp]
	mov	DWORD PTR 20+[ebp], edi
	imul	edi, 112				; 00000070H
	mov	ecx, DWORD PTR _monster[esi+36]
	or	ebx, -1
	sub	ebx, DWORD PTR _i$[ebp]
	add	edi, ecx
	mov	eax, DWORD PTR _monster[esi+36]
; Line 1733
	mov	DWORD PTR _monster[esi+116], ecx
	mov	DWORD PTR _dMonster[edi*4], ebx
	mov	edi, DWORD PTR 20+[ebp]
	mov	DWORD PTR _monster[esi+112], edi
; Line 1734
	mov	DWORD PTR _monster[esi+48], edi
; Line 1740
	mov	edi, edx
	add	eax, DWORD PTR _yadd$[ebp]
	imul	edi, 112				; 00000070H
	mov	DWORD PTR _monster[esi+52], ecx
	mov	ecx, DWORD PTR _i$[ebp]
	add	edi, eax
	inc	ecx
; Line 1741
	cmp	BYTE PTR _monster[esi+188], 0
	mov	DWORD PTR _monster[esi+32], edx
	mov	DWORD PTR _monster[esi+36], eax
	mov	DWORD PTR _monster[esi+40], edx
	mov	DWORD PTR _monster[esi+44], eax
	mov	DWORD PTR _dMonster[edi*4], ecx
	je	SHORT $L86044
; Line 1742
	movzx	ecx, BYTE PTR _monster[esi+215]
	push	eax
	call	@ChangeLightXY@12
$L86044:
; Line 1746
	mov	eax, DWORD PTR _xvel$[ebp]
; Line 1750
	mov	edx, DWORD PTR _monster[esi+220]
	mov	edi, DWORD PTR _xoff$[ebp]
	mov	ebx, DWORD PTR _yoff$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _monster[esi+64], eax
	mov	eax, DWORD PTR _yvel$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _monster[esi+68], eax
	mov	eax, DWORD PTR _EndDir$[ebp]
	push	eax
	mov	DWORD PTR _monster[esi+56], edi
	mov	DWORD PTR _monster[esi+60], ebx
	mov	DWORD PTR _monster[esi+4], 2
	mov	DWORD PTR _monster[esi+120], eax
	mov	DWORD PTR _monster[esi+72], eax
	call	@NewMonsterAnim@12
; Line 1754
	mov	ecx, DWORD PTR _i$[ebp]
	and	DWORD PTR _monster[esi+140], 0
	shl	edi, 4
	shl	ebx, 4
	mov	DWORD PTR _monster[esi+132], edi
	mov	DWORD PTR _monster[esi+136], ebx
	call	@M_CheckEFlag@4
	pop	edi
	pop	esi
	pop	ebx
; Line 1755
	leave
	ret	24					; 00000018H
@M_StartWalk2@32 ENDP
_TEXT	ENDS
PUBLIC	@M_StartWalk3@40
; Function compile flags: /Ogsy
;	COMDAT @M_StartWalk3@40
_TEXT	SEGMENT
_i$ = -4
_xvel$ = -8
_yvel$ = 8
_xoff$ = 12
_yoff$ = 16
_xadd$ = 20
_yadd$ = 24
_mapx$ = 28
_mapy$ = 32
_EndDir$ = 36
_fx$ = 20
_fy$ = 24
@M_StartWalk3@40 PROC NEAR				; COMDAT
; _i$ = ecx
; _xvel$ = edx
; Line 1758
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
; Line 1759
	mov	eax, DWORD PTR _xadd$[ebp]
	mov	DWORD PTR _i$[ebp], esi
	imul	esi, 228				; 000000e4H
; Line 1760
	mov	ebx, DWORD PTR _monster[esi+36]
	push	edi
	mov	edi, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _xvel$[ebp], edx
	add	eax, edi
	mov	DWORD PTR _fx$[ebp], eax
	mov	eax, DWORD PTR _yadd$[ebp]
	add	eax, ebx
	mov	DWORD PTR _fy$[ebp], eax
; Line 1761
	mov	eax, DWORD PTR _mapx$[ebp]
	add	edi, eax
; Line 1762
	mov	eax, DWORD PTR _mapy$[ebp]
	add	ebx, eax
; Line 1764
	cmp	BYTE PTR _monster[esi+188], 0
	je	SHORT $L86070
; Line 1765
	movzx	ecx, BYTE PTR _monster[esi+215]
	push	ebx
	mov	edx, edi
	call	@ChangeLightXY@12
$L86070:
; Line 1767
	mov	ecx, DWORD PTR _monster[esi+32]
	mov	edx, DWORD PTR _monster[esi+36]
	imul	ecx, 112				; 00000070H
	add	ecx, edx
; Line 1768
	mov	edx, DWORD PTR _fx$[ebp]
	imul	edx, 112				; 00000070H
	or	eax, -1
; Line 1769
	mov	DWORD PTR _monster[esi+124], edi
	sub	eax, DWORD PTR _i$[ebp]
; Line 1771
	imul	edi, 112				; 00000070H
	mov	DWORD PTR _dMonster[ecx*4], eax
	mov	ecx, DWORD PTR _fy$[ebp]
	add	edx, ecx
	lea	edi, DWORD PTR _dFlags[edi+ebx]
	mov	DWORD PTR _monster[esi+128], ebx
; Line 1777
	mov	ebx, DWORD PTR _yoff$[ebp]
	mov	DWORD PTR _dMonster[edx*4], eax
	mov	eax, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _monster[esi+48], eax
	mov	eax, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _monster[esi+52], eax
	mov	eax, DWORD PTR _fx$[ebp]
	mov	DWORD PTR _monster[esi+40], eax
; Line 1779
	mov	eax, DWORD PTR _xvel$[ebp]
	mov	DWORD PTR _monster[esi+64], eax
; Line 1780
	mov	eax, DWORD PTR _yvel$[ebp]
	or	BYTE PTR [edi], 16			; 00000010H
; Line 1785
	mov	edx, DWORD PTR _monster[esi+220]
	mov	edi, DWORD PTR _xoff$[ebp]
	mov	DWORD PTR _monster[esi+68], eax
	mov	eax, DWORD PTR _fx$[ebp]
	mov	DWORD PTR _monster[esi+44], ecx
	mov	DWORD PTR _monster[esi+112], eax
	mov	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _monster[esi+116], eax
	mov	eax, DWORD PTR _EndDir$[ebp]
	add	edx, 48					; 00000030H
	push	eax
	mov	DWORD PTR _monster[esi+56], edi
	mov	DWORD PTR _monster[esi+60], ebx
	mov	DWORD PTR _monster[esi+4], 3
	mov	DWORD PTR _monster[esi+120], eax
	mov	DWORD PTR _monster[esi+72], eax
	call	@NewMonsterAnim@12
; Line 1789
	mov	ecx, DWORD PTR _i$[ebp]
	and	DWORD PTR _monster[esi+140], 0
	shl	edi, 4
	shl	ebx, 4
	mov	DWORD PTR _monster[esi+132], edi
	mov	DWORD PTR _monster[esi+136], ebx
	call	@M_CheckEFlag@4
	pop	edi
	pop	esi
	pop	ebx
; Line 1790
	leave
	ret	32					; 00000020H
@M_StartWalk3@40 ENDP
_TEXT	ENDS
PUBLIC	@M_StartAttack@4
; Function compile flags: /Ogsy
;	COMDAT @M_StartAttack@4
_TEXT	SEGMENT
@M_StartAttack@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1793
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1794
	call	@M_GetDir@4
; Line 1795
	mov	esi, edi
	mov	ebx, eax
	imul	esi, 228				; 000000e4H
	push	ebx
	mov	ecx, edi
	mov	edx, DWORD PTR _monster[esi+220]
	add	edx, 92					; 0000005cH
	call	@NewMonsterAnim@12
; Line 1800
	mov	ecx, DWORD PTR _monster[esi+36]
	mov	eax, DWORD PTR _monster[esi+32]
	and	DWORD PTR _monster[esi+56], 0
	and	DWORD PTR _monster[esi+60], 0
	mov	DWORD PTR _monster[esi+44], ecx
; Line 1802
	mov	DWORD PTR _monster[esi+52], ecx
; Line 1804
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+4], 4
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+48], eax
	mov	DWORD PTR _monster[esi+72], ebx
	pop	edi
	pop	esi
	pop	ebx
	jmp	@M_CheckEFlag@4
@M_StartAttack@4 ENDP
_TEXT	ENDS
PUBLIC	@M_StartRAttack@12
; Function compile flags: /Ogsy
;	COMDAT @M_StartRAttack@12
_TEXT	SEGMENT
_dam$ = 8
@M_StartRAttack@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _missile_type$ = edx
; Line 1808
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebp, edx
	mov	edi, ecx
; Line 1809
	call	@M_GetDir@4
; Line 1810
	mov	esi, edi
	mov	ebx, eax
	imul	esi, 228				; 000000e4H
	push	ebx
	mov	ecx, edi
	mov	edx, DWORD PTR _monster[esi+220]
	add	edx, 92					; 0000005cH
	call	@NewMonsterAnim@12
; Line 1817
	mov	ecx, DWORD PTR _monster[esi+36]
	and	DWORD PTR _monster[esi+56], 0
	mov	eax, DWORD PTR _dam$[esp+12]
	and	DWORD PTR _monster[esi+60], 0
	mov	DWORD PTR _monster[esi+116], eax
	mov	eax, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _monster[esi+44], ecx
; Line 1819
	mov	DWORD PTR _monster[esi+52], ecx
; Line 1821
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+4], 10		; 0000000aH
	mov	DWORD PTR _monster[esi+112], ebp
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+48], eax
	mov	DWORD PTR _monster[esi+72], ebx
	call	@M_CheckEFlag@4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1822
	ret	4
@M_StartRAttack@12 ENDP
_TEXT	ENDS
PUBLIC	@M_StartRSpAttack@12
; Function compile flags: /Ogsy
;	COMDAT @M_StartRSpAttack@12
_TEXT	SEGMENT
_dam$ = 8
@M_StartRSpAttack@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _missile_type$ = edx
; Line 1825
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebp, edx
	mov	edi, ecx
; Line 1826
	call	@M_GetDir@4
; Line 1827
	mov	esi, edi
	mov	ebx, eax
	imul	esi, 228				; 000000e4H
	push	ebx
	mov	ecx, edi
	mov	edx, DWORD PTR _monster[esi+220]
	add	edx, 224				; 000000e0H
	call	@NewMonsterAnim@12
; Line 1830
	xor	eax, eax
	mov	DWORD PTR _monster[esi+4], 12		; 0000000cH
; Line 1831
	mov	ecx, DWORD PTR _dam$[esp+12]
	mov	DWORD PTR _monster[esi+116], eax
	mov	DWORD PTR _monster[esi+120], ecx
; Line 1835
	mov	ecx, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _monster[esi+56], eax
	mov	DWORD PTR _monster[esi+60], eax
	mov	eax, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _monster[esi+44], ecx
; Line 1837
	mov	DWORD PTR _monster[esi+52], ecx
; Line 1839
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+112], ebp
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+48], eax
	mov	DWORD PTR _monster[esi+72], ebx
	call	@M_CheckEFlag@4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1840
	ret	4
@M_StartRSpAttack@12 ENDP
_TEXT	ENDS
PUBLIC	@M_StartSpAttack@4
; Function compile flags: /Ogsy
;	COMDAT @M_StartSpAttack@4
_TEXT	SEGMENT
@M_StartSpAttack@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1843
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1844
	call	@M_GetDir@4
; Line 1845
	mov	esi, edi
	mov	ebx, eax
	imul	esi, 228				; 000000e4H
	push	ebx
	mov	ecx, edi
	mov	edx, DWORD PTR _monster[esi+220]
	add	edx, 224				; 000000e0H
	call	@NewMonsterAnim@12
; Line 1850
	mov	ecx, DWORD PTR _monster[esi+36]
	mov	eax, DWORD PTR _monster[esi+32]
	and	DWORD PTR _monster[esi+56], 0
	and	DWORD PTR _monster[esi+60], 0
	mov	DWORD PTR _monster[esi+44], ecx
; Line 1852
	mov	DWORD PTR _monster[esi+52], ecx
; Line 1854
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+4], 7
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+48], eax
	mov	DWORD PTR _monster[esi+72], ebx
	pop	edi
	pop	esi
	pop	ebx
	jmp	@M_CheckEFlag@4
@M_StartSpAttack@4 ENDP
_TEXT	ENDS
PUBLIC	@M_StartEat@4
; Function compile flags: /Ogsy
;	COMDAT @M_StartEat@4
_TEXT	SEGMENT
@M_StartEat@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1858
	push	esi
	push	edi
	mov	edi, ecx
; Line 1859
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	mov	edx, DWORD PTR _monster[esi+220]
	push	DWORD PTR _monster[esi+72]
	add	edx, 224				; 000000e0H
	call	@NewMonsterAnim@12
; Line 1864
	mov	ecx, DWORD PTR _monster[esi+36]
	mov	eax, DWORD PTR _monster[esi+32]
	and	DWORD PTR _monster[esi+56], 0
	and	DWORD PTR _monster[esi+60], 0
	mov	DWORD PTR _monster[esi+44], ecx
; Line 1866
	mov	DWORD PTR _monster[esi+52], ecx
; Line 1867
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+4], 7
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+48], eax
	pop	edi
	pop	esi
	jmp	@M_CheckEFlag@4
@M_StartEat@4 ENDP
_TEXT	ENDS
PUBLIC	@M_ClearSquares@4
; Function compile flags: /Ogsy
;	COMDAT @M_ClearSquares@4
_TEXT	SEGMENT
_x$ = -4
_m2$ = -12
@M_ClearSquares@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1871
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1874
	mov	eax, ecx
	push	esi
	imul	eax, 228				; 000000e4H
; Line 1876
	or	esi, -1
	push	edi
	mov	edx, DWORD PTR _monster[eax+48]
	mov	eax, DWORD PTR _monster[eax+52]
	sub	esi, ecx
; Line 1877
	inc	ecx
	mov	DWORD PTR _m2$[ebp], ecx
; Line 1879
	lea	ecx, DWORD PTR [eax-1]
	lea	edi, DWORD PTR [eax+1]
	cmp	ecx, edi
	jg	SHORT $L86109
	push	ebx
$L86107:
; Line 1880
	test	ecx, ecx
	jl	SHORT $L86108
	cmp	ecx, 112				; 00000070H
	jge	SHORT $L86108
; Line 1881
	lea	ebx, DWORD PTR [edx-1]
	lea	edi, DWORD PTR [edx+1]
	cmp	ebx, edi
	mov	DWORD PTR _x$[ebp], ebx
	jg	SHORT $L86108
	mov	edi, ebx
	imul	edi, 112				; 00000070H
	add	edi, ecx
	lea	edi, DWORD PTR _dMonster[edi*4]
	mov	DWORD PTR -8+[ebp], edi
$L86111:
; Line 1882
	cmp	DWORD PTR _x$[ebp], 0
	jl	SHORT $L86112
	cmp	DWORD PTR _x$[ebp], 112			; 00000070H
	jge	SHORT $L86112
	mov	edi, DWORD PTR -8+[ebp]
	mov	edi, DWORD PTR [edi]
	cmp	edi, esi
	je	SHORT $L86115
	cmp	edi, DWORD PTR _m2$[ebp]
	jne	SHORT $L86112
$L86115:
; Line 1883
	mov	edi, DWORD PTR -8+[ebp]
	and	DWORD PTR [edi], 0
$L86112:
	inc	DWORD PTR _x$[ebp]
	add	DWORD PTR -8+[ebp], 448			; 000001c0H
	lea	edi, DWORD PTR [edx+1]
	cmp	DWORD PTR _x$[ebp], edi
	jle	SHORT $L86111
$L86108:
; Line 1879
	inc	ecx
	lea	edi, DWORD PTR [eax+1]
	cmp	ecx, edi
	jle	SHORT $L86107
	pop	ebx
$L86109:
; Line 1888
	lea	ecx, DWORD PTR [edx+1]
	cmp	ecx, 112				; 00000070H
	jge	SHORT $L86116
; Line 1889
	mov	ecx, edx
	imul	ecx, 112				; 00000070H
	lea	ecx, DWORD PTR _dFlags[ecx+eax+112]
	and	BYTE PTR [ecx], -17			; ffffffefH
$L86116:
; Line 1890
	cmp	edi, 112				; 00000070H
	pop	edi
	pop	esi
	jge	SHORT $L86117
; Line 1891
	imul	edx, 112				; 00000070H
	lea	eax, DWORD PTR _dFlags[edx+eax+1]
	and	BYTE PTR [eax], -17			; ffffffefH
$L86117:
; Line 1892
	leave
	ret	0
@M_ClearSquares@4 ENDP
_TEXT	ENDS
PUBLIC	@M_GetKnockback@4
PUBLIC	@DirOK@8
; Function compile flags: /Ogsy
;	COMDAT @M_GetKnockback@4
_TEXT	SEGMENT
@M_GetKnockback@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1895
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1896
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	mov	ebx, DWORD PTR _monster[esi+72]
	sub	ebx, 4
	and	ebx, 7
; Line 1897
	mov	edx, ebx
	call	@DirOK@8
	test	eax, eax
	je	$L86122
; Line 1898
	mov	ecx, edi
	call	@M_ClearSquares@4
; Line 1901
	mov	edx, DWORD PTR _monster[esi+220]
	push	DWORD PTR _monster[esi+72]
	mov	eax, ebx
	add	edx, 136				; 00000088H
	shl	eax, 2
	mov	ecx, DWORD PTR _offset_x[eax]
	mov	eax, DWORD PTR _offset_y[eax]
	add	DWORD PTR _monster[esi+48], ecx
	add	DWORD PTR _monster[esi+52], eax
	mov	ecx, edi
	call	@NewMonsterAnim@12
; Line 1906
	mov	ecx, DWORD PTR _monster[esi+52]
	mov	eax, DWORD PTR _monster[esi+48]
	and	DWORD PTR _monster[esi+56], 0
	and	DWORD PTR _monster[esi+60], 0
	mov	DWORD PTR _monster[esi+36], ecx
; Line 1908
	mov	DWORD PTR _monster[esi+44], ecx
; Line 1909
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+4], 5
	mov	DWORD PTR _monster[esi+32], eax
	mov	DWORD PTR _monster[esi+40], eax
	call	@M_CheckEFlag@4
; Line 1910
	mov	ecx, edi
	call	@M_ClearSquares@4
; Line 1911
	mov	eax, DWORD PTR _monster[esi+32]
	inc	edi
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _dMonster[eax*4], edi
$L86122:
	pop	edi
	pop	esi
	pop	ebx
; Line 1913
	ret	0
@M_GetKnockback@4 ENDP
_TEXT	ENDS
PUBLIC	@M_StartHit@12
PUBLIC	@M_Teleport@4
EXTRN	@PlayEffect@8:NEAR
EXTRN	_myplr:DWORD
EXTRN	@delta_monster_hp@12:NEAR
EXTRN	@NetSendCmdParam2@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @M_StartHit@12
_TEXT	SEGMENT
_dam$ = 8
@M_StartHit@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _pnum$ = edx
; Line 1916
	push	ebx
	push	ebp
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1917
	test	ebx, ebx
	jl	SHORT $L86130
; Line 1918
	mov	eax, edi
	mov	ecx, ebx
	imul	eax, 228				; 000000e4H
	lea	esi, DWORD PTR _monster[eax+191]
	mov	al, 1
	shl	al, cl
	or	BYTE PTR [esi], al
$L86130:
; Line 1919
	cmp	ebx, DWORD PTR _myplr
	mov	ebp, DWORD PTR _dam$[esp+12]
	jne	SHORT $L86131
; Line 1920
	mov	al, BYTE PTR _currlevel
	mov	ecx, edi
	push	eax
	mov	eax, edi
	imul	eax, 228				; 000000e4H
	mov	edx, DWORD PTR _monster[eax+148]
	call	@delta_monster_hp@12
; Line 1921
	mov	dl, 37					; 00000025H
	xor	ecx, ecx
	push	ebp
	push	edi
	call	@NetSendCmdParam2@16
$L86131:
; Line 1923
	xor	edx, edx
	mov	ecx, edi
	inc	edx
	call	@PlayEffect@8
; Line 1924
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	mov	eax, DWORD PTR _monster[esi+220]
	mov	al, BYTE PTR [eax]
	cmp	al, 29					; 0000001dH
	jb	SHORT $L86134
	cmp	al, 32					; 00000020H
	jbe	SHORT $L86133
$L86134:
	movsx	eax, BYTE PTR _monster[esi+192]
	add	eax, 3
	sar	ebp, 6
	cmp	ebp, eax
	jl	$L86139
$L86133:
; Line 1925
	test	ebx, ebx
	jl	SHORT $L86135
; Line 1928
	mov	eax, ebx
	and	DWORD PTR _monster[esi+156], -17	; ffffffefH
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _monster[esi+76], ebx
	mov	cl, BYTE PTR _plr[eax+64]
; Line 1929
	mov	al, BYTE PTR _plr[eax+68]
	mov	BYTE PTR _monster[esi+80], cl
; Line 1930
	mov	ecx, edi
	mov	BYTE PTR _monster[esi+81], al
	call	@M_GetDir@4
	mov	DWORD PTR _monster[esi+72], eax
$L86135:
; Line 1932
	mov	eax, DWORD PTR _monster[esi+220]
	mov	al, BYTE PTR [eax]
	cmp	al, 39					; 00000027H
	jne	SHORT $L86136
; Line 1933
	mov	ecx, edi
	call	@M_Teleport@4
; Line 1934
	jmp	SHORT $L86138
$L86136:
	cmp	al, 16					; 00000010H
	jb	SHORT $L86138
	cmp	al, 19					; 00000013H
	ja	SHORT $L86138
; Line 1935
	mov	BYTE PTR _monster[esi+8], 1
$L86138:
; Line 1937
	lea	ebx, DWORD PTR _monster[esi+4]
	cmp	DWORD PTR [ebx], 15			; 0000000fH
	je	SHORT $L86139
; Line 1938
	mov	edx, DWORD PTR _monster[esi+220]
	push	DWORD PTR _monster[esi+72]
	add	edx, 136				; 00000088H
	mov	ecx, edi
	call	@NewMonsterAnim@12
; Line 1943
	mov	ecx, DWORD PTR _monster[esi+52]
	mov	eax, DWORD PTR _monster[esi+48]
	and	DWORD PTR _monster[esi+56], 0
	and	DWORD PTR _monster[esi+60], 0
	mov	DWORD PTR _monster[esi+36], ecx
; Line 1945
	mov	DWORD PTR _monster[esi+44], ecx
; Line 1946
	mov	ecx, edi
	mov	DWORD PTR [ebx], 5
	mov	DWORD PTR _monster[esi+32], eax
	mov	DWORD PTR _monster[esi+40], eax
	call	@M_CheckEFlag@4
; Line 1947
	mov	ecx, edi
	call	@M_ClearSquares@4
; Line 1948
	mov	eax, DWORD PTR _monster[esi+32]
	inc	edi
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _dMonster[eax*4], edi
$L86139:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1951
	ret	4
@M_StartHit@12 ENDP
_TEXT	ENDS
PUBLIC	@M_DiabloDeath@8
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
EXTRN	_gbProcessPlayers:DWORD
EXTRN	@PlaySFX@4:NEAR
EXTRN	__ftol:NEAR
EXTRN	__fltused:NEAR
EXTRN	_gbSoundOn:BYTE
EXTRN	@NetSendCmdQuest@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @M_DiabloDeath@8
_TEXT	SEGMENT
_i$ = -8
_v17$ = -12
@M_DiabloDeath@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _sendmsg$ = edx
; Line 1954
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _i$[ebp], ecx
	push	edi
; Line 1975
	mov	ecx, 857				; 00000359H
	mov	esi, edx
	call	@PlaySFX@4
; Line 1977
	xor	edi, edi
	mov	BYTE PTR _quests+122, 3
	cmp	esi, edi
	je	SHORT $L86161
; Line 1978
	xor	ecx, ecx
	mov	dl, 5
	inc	ecx
	call	@NetSendCmdQuest@8
$L86161:
; Line 1980
	mov	al, BYTE PTR _gbSoundOn
	mov	DWORD PTR _gbProcessPlayers, edi
	mov	BYTE PTR _sgbSaveSoundOn, al
; Line 1982
	mov	eax, DWORD PTR _nummonsters
	cmp	eax, edi
	jle	$L86165
	xor	ecx, ecx
	mov	DWORD PTR -4+[ebp], 4
	mov	DWORD PTR -12+[ebp], eax
	push	ebx
$L86163:
; Line 1983
	mov	ebx, DWORD PTR _monstactive[ecx]
; Line 1984
	cmp	ebx, DWORD PTR _i$[ebp]
	je	$L86166
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 228				; 000000e4H
	cmp	BYTE PTR _monster[eax+160], 0
	je	$L86166
; Line 1986
	mov	esi, ebx
	mov	ecx, ebx
	imul	esi, 228				; 000000e4H
	mov	edx, DWORD PTR _monster[esi+220]
	push	DWORD PTR _monster[esi+72]
	add	edx, 180				; 000000b4H
	call	@NewMonsterAnim@12
; Line 1987
	mov	eax, DWORD PTR _monster[esi+52]
; Line 1988
	mov	DWORD PTR _monster[esi+56], edi
; Line 1989
	mov	DWORD PTR _monster[esi+60], edi
; Line 1990
	mov	DWORD PTR _monster[esi+112], edi
; Line 1991
	mov	ecx, DWORD PTR _monster[esi+48]
; Line 1995
	lea	edi, DWORD PTR _monster[esi+32]
; Line 1996
	mov	DWORD PTR _monster[esi+40], ecx
	mov	DWORD PTR _monster[esi+36], eax
	mov	DWORD PTR [edi], ecx
; Line 1997
	mov	ecx, ebx
	mov	DWORD PTR _monster[esi+44], eax
	mov	DWORD PTR _monster[esi+4], 6
	call	@M_CheckEFlag@4
; Line 1998
	mov	ecx, ebx
	call	@M_ClearSquares@4
; Line 1999
	mov	eax, DWORD PTR [edi]
	inc	ebx
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _monster[esi+36]
	xor	edi, edi
	mov	DWORD PTR _dMonster[eax*4], ebx
$L86166:
; Line 2001
	mov	ecx, DWORD PTR -4+[ebp]
	add	DWORD PTR -4+[ebp], 4
	dec	DWORD PTR -12+[ebp]
	jne	$L86163
	pop	ebx
$L86165:
; Line 2003
	mov	esi, DWORD PTR _i$[ebp]
	push	8
	imul	esi, 228				; 000000e4H
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	call	@AddLight@12
; Line 2004
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	1
	push	edi
	push	8
	call	@DoVision@20
; Line 2005
	mov	eax, DWORD PTR _ViewY
	sub	eax, DWORD PTR _monster[esi+36]
	push	eax
	call	_abs
	mov	edi, eax
; Line 2006
	mov	eax, DWORD PTR _ViewX
	sub	eax, DWORD PTR _monster[esi+32]
	push	eax
	call	_abs
	pop	ecx
	cmp	eax, edi
	pop	ecx
	jg	SHORT $L86167
; Line 2007
	mov	eax, DWORD PTR _ViewY
	sub	eax, DWORD PTR _monster[esi+36]
; Line 2008
	jmp	SHORT $L86168
$L86167:
; Line 2009
	mov	eax, DWORD PTR _ViewX
	sub	eax, DWORD PTR _monster[esi+32]
$L86168:
; Line 2010
	push	eax
	call	_abs
	pop	ecx
	mov	DWORD PTR _v17$[ebp], eax
; Line 2011
	push	20					; 00000014H
	pop	ecx
	cmp	eax, ecx
	jle	SHORT $L86169
; Line 2012
	mov	DWORD PTR _v17$[ebp], ecx
$L86169:
; Line 2016
	mov	eax, DWORD PTR _ViewX
; Line 2018
	mov	edi, DWORD PTR _ViewY
	mov	ecx, eax
	shl	ecx, 16					; 00000010H
	fild	DWORD PTR _v17$[ebp]
	mov	DWORD PTR _monster[esi+120], ecx
	mov	ecx, edi
	shl	ecx, 16					; 00000010H
	mov	DWORD PTR _monster[esi+124], ecx
	mov	ecx, DWORD PTR _monster[esi+32]
	shl	ecx, 16					; 00000010H
	shl	eax, 16					; 00000010H
; Line 2019
	fld1
	sub	eax, ecx
	fdivrp	ST(1), ST(0)
	mov	DWORD PTR -12+[ebp], eax
	fild	DWORD PTR -12+[ebp]
	fmul	ST(0), ST(1)
	call	__ftol
	mov	DWORD PTR _monster[esi+128], eax
; Line 2020
	mov	eax, DWORD PTR _monster[esi+36]
	shl	eax, 16					; 00000010H
	shl	edi, 16					; 00000010H
	sub	edi, eax
	mov	DWORD PTR -12+[ebp], edi
	fild	DWORD PTR -12+[ebp]
	fmul	ST(0), ST(1)
	call	__ftol
	mov	DWORD PTR _monster[esi+132], eax
	pop	edi
	fstp	ST(0)
	pop	esi
; Line 2021
	leave
	ret	0
@M_DiabloDeath@8 ENDP
_TEXT	ENDS
PUBLIC	@M2MStartHit@12
PUBLIC	??_C@_0CK@NMPO@Invalid?5monster?5?$CFd?5getting?5hit?5b@ ; `string'
PUBLIC	??_C@_0DD@FGPH@Monster?5?$CFd?5?$CC?$CFs?$CC?5getting?5hit?5by?5m@ ; `string'
EXTRN	_TermMsg:NEAR
;	COMDAT ??_C@_0CK@NMPO@Invalid?5monster?5?$CFd?5getting?5hit?5b@
_DATA	SEGMENT
??_C@_0CK@NMPO@Invalid?5monster?5?$CFd?5getting?5hit?5b@ DB 'Invalid mons'
	DB	'ter %d getting hit by monster', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DD@FGPH@Monster?5?$CFd?5?$CC?$CFs?$CC?5getting?5hit?5by?5m@
_DATA	SEGMENT
??_C@_0DD@FGPH@Monster?5?$CFd?5?$CC?$CFs?$CC?5getting?5hit?5by?5m@ DB 'Mo'
	DB	'nster %d "%s" getting hit by monster: MType NULL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M2MStartHit@12
_TEXT	SEGMENT
_i$ = -4
_dam$ = 8
@M2MStartHit@12 PROC NEAR				; COMDAT
; _mid$ = ecx
; _i$ = edx
; Line 2025
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	ebx, edx
; Line 2026
	cmp	edi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], ebx
	jb	SHORT $L86183
; Line 2027
	push	edi
	push	OFFSET FLAT:??_C@_0CK@NMPO@Invalid?5monster?5?$CFd?5getting?5hit?5b@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86183:
; Line 2030
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], 0
	jne	SHORT $L86186
; Line 2031
	push	DWORD PTR _monster[esi+216]
	push	edi
	push	OFFSET FLAT:??_C@_0DD@FGPH@Monster?5?$CFd?5?$CC?$CFs?$CC?5getting?5hit?5by?5m@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86186:
; Line 2034
	test	ebx, ebx
	jl	SHORT $L86188
; Line 2035
	mov	eax, ebx
	mov	dl, 1
	imul	eax, 228				; 000000e4H
	mov	ecx, ebx
	shl	dl, cl
	lea	eax, DWORD PTR _monster[eax+191]
	or	BYTE PTR [eax], dl
$L86188:
; Line 2037
	mov	al, BYTE PTR _currlevel
	mov	edx, DWORD PTR _monster[esi+148]
	push	eax
	mov	ecx, edi
	call	@delta_monster_hp@12
; Line 2038
	mov	ebx, DWORD PTR _dam$[ebp]
	mov	dl, 37					; 00000025H
	push	ebx
	push	edi
	xor	ecx, ecx
	call	@NetSendCmdParam2@16
; Line 2039
	xor	edx, edx
	mov	ecx, edi
	inc	edx
	call	@PlayEffect@8
; Line 2041
	mov	eax, DWORD PTR _monster[esi+220]
	mov	cl, BYTE PTR [eax]
	cmp	cl, 29					; 0000001dH
	jb	SHORT $L86191
	cmp	cl, 32					; 00000020H
	jbe	SHORT $L86190
$L86191:
	movsx	ecx, BYTE PTR _monster[esi+192]
	add	ecx, 3
	sar	ebx, 6
	cmp	ebx, ecx
	jl	$L86196
$L86190:
; Line 2042
	mov	ecx, DWORD PTR _i$[ebp]
	test	ecx, ecx
	jl	SHORT $L86192
; Line 2043
	imul	ecx, 228				; 000000e4H
	mov	ecx, DWORD PTR _monster[ecx+72]
	sub	ecx, 4
	and	ecx, 7
	mov	DWORD PTR _monster[esi+72], ecx
$L86192:
; Line 2045
	mov	al, BYTE PTR [eax]
	cmp	al, 39					; 00000027H
	jne	SHORT $L86193
; Line 2046
	mov	ecx, edi
	call	@M_Teleport@4
; Line 2047
	jmp	SHORT $L86195
$L86193:
	cmp	al, 16					; 00000010H
	jb	SHORT $L86195
	cmp	al, 19					; 00000013H
	ja	SHORT $L86195
; Line 2048
	mov	BYTE PTR _monster[esi+8], 1
$L86195:
; Line 2051
	cmp	DWORD PTR _monster[esi+4], 15		; 0000000fH
	je	SHORT $L86196
; Line 2052
	mov	eax, DWORD PTR _monster[esi+220]
	cmp	BYTE PTR [eax], 109			; 0000006dH
	je	SHORT $L86197
; Line 2053
	push	DWORD PTR _monster[esi+72]
	lea	edx, DWORD PTR [eax+136]
	mov	ecx, edi
	call	@NewMonsterAnim@12
; Line 2054
	mov	DWORD PTR _monster[esi+4], 5
$L86197:
; Line 2060
	mov	ecx, DWORD PTR _monster[esi+52]
	mov	eax, DWORD PTR _monster[esi+48]
	and	DWORD PTR _monster[esi+56], 0
	and	DWORD PTR _monster[esi+60], 0
	mov	DWORD PTR _monster[esi+36], ecx
; Line 2062
	mov	DWORD PTR _monster[esi+44], ecx
; Line 2063
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+32], eax
	mov	DWORD PTR _monster[esi+40], eax
	call	@M_CheckEFlag@4
; Line 2064
	mov	ecx, edi
	call	@M_ClearSquares@4
; Line 2065
	mov	eax, DWORD PTR _monster[esi+32]
	inc	edi
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _dMonster[eax*4], edi
$L86196:
	pop	edi
	pop	esi
	pop	ebx
; Line 2068
	leave
	ret	4
@M2MStartHit@12 ENDP
_TEXT	ENDS
PUBLIC	@MonstStartKill@12
PUBLIC	@M_FallenFear@8
PUBLIC	??_C@_0CD@LJIP@MonstStartKill?3?5Invalid?5monster?5@ ; `string'
PUBLIC	??_C@_0CL@FDEE@MonstStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@ ; `string'
EXTRN	@CheckQuestKill@8:NEAR
EXTRN	@SetRndSeed@4:NEAR
EXTRN	@AddPlrMonstExper@12:NEAR
EXTRN	@AddMissile@40:NEAR
EXTRN	@SpawnItem@16:NEAR
EXTRN	@CreateTypeItem@28:NEAR
;	COMDAT ??_C@_0CD@LJIP@MonstStartKill?3?5Invalid?5monster?5@
_DATA	SEGMENT
??_C@_0CD@LJIP@MonstStartKill?3?5Invalid?5monster?5@ DB 'MonstStartKill: '
	DB	'Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CL@FDEE@MonstStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@
_DATA	SEGMENT
??_C@_0CL@FDEE@MonstStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@ DB 'Mon'
	DB	'stStartKill: Monster %d "%s" MType NULL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MonstStartKill@12
_TEXT	SEGMENT
_sendmsg$ = 8
@MonstStartKill@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _pnum$ = edx
; Line 2071
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	mov	ebx, edx
; Line 2074
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86207
; Line 2075
	push	edi
	push	OFFSET FLAT:??_C@_0CD@LJIP@MonstStartKill?3?5Invalid?5monster?5@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86207:
; Line 2077
	mov	esi, edi
	xor	ebp, ebp
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], ebp
	jne	SHORT $L86209
; Line 2078
	push	DWORD PTR _monster[esi+216]
	push	edi
	push	OFFSET FLAT:??_C@_0CL@FDEE@MonstStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86209:
; Line 2081
	cmp	ebx, ebp
	jl	SHORT $L86211
; Line 2082
	mov	al, 1
	mov	ecx, ebx
	shl	al, cl
	or	BYTE PTR _monster[esi+191], al
$L86211:
; Line 2083
	cmp	ebx, 4
	jge	SHORT $L86212
	cmp	edi, 4
	jle	SHORT $L86212
; Line 2084
	mov	al, BYTE PTR _monster[esi+191]
	movzx	edx, WORD PTR _monster[esi+194]
	movsx	ecx, BYTE PTR _monster[esi+192]
	push	eax
	call	@AddPlrMonstExper@12
$L86212:
; Line 2085
	mov	eax, DWORD PTR _monster[esi+220]
; Line 2087
	mov	ecx, DWORD PTR _monster[esi+176]
	movzx	eax, BYTE PTR [eax]
	mov	DWORD PTR _monster[esi+148], ebp
	lea	eax, DWORD PTR _monstkills[eax*4]
	inc	DWORD PTR [eax]
	call	@SetRndSeed@4
; Line 2088
	push	2
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L86213
	mov	eax, DWORD PTR _monster[esi+216]
	cmp	eax, DWORD PTR _UniqMonst+4
	jne	SHORT $L86213
; Line 2089
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	ebp
	push	1
	push	ebp
	push	4
	inc	edx
	push	1
	inc	ecx
	call	@CreateTypeItem@28
; Line 2090
	jmp	SHORT $L86215
$L86213:
	cmp	edi, 3
	jle	SHORT $L86215
; Line 2091
	push	DWORD PTR _sendmsg$[esp+12]
	mov	edx, DWORD PTR _monster[esi+32]
	mov	ecx, edi
	push	DWORD PTR _monster[esi+36]
	call	@SpawnItem@16
$L86215:
; Line 2093
	mov	eax, DWORD PTR _monster[esi+220]
; Line 2094
	mov	ecx, edi
	cmp	BYTE PTR [eax], 110			; 0000006eH
	jne	SHORT $L86216
	xor	edx, edx
	inc	edx
	call	@M_DiabloDeath@8
; Line 2095
	jmp	SHORT $L86217
$L86216:
; Line 2096
	push	2
	pop	edx
	call	@PlayEffect@8
$L86217:
; Line 2098
	cmp	ebx, ebp
	jl	SHORT $L86218
; Line 2099
	mov	ecx, edi
	call	@M_GetDir@4
; Line 2100
	jmp	SHORT $L86219
$L86218:
; Line 2101
	mov	eax, DWORD PTR _monster[esi+72]
$L86219:
; Line 2103
	mov	edx, DWORD PTR _monster[esi+220]
	push	eax
	add	edx, 180				; 000000b4H
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+72], eax
	call	@NewMonsterAnim@12
; Line 2109
	mov	ecx, DWORD PTR _monster[esi+52]
	mov	eax, DWORD PTR _monster[esi+48]
	mov	DWORD PTR _monster[esi+36], ecx
; Line 2111
	mov	DWORD PTR _monster[esi+44], ecx
; Line 2112
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+4], 6
	mov	DWORD PTR _monster[esi+56], ebp
	mov	DWORD PTR _monster[esi+60], ebp
	mov	DWORD PTR _monster[esi+112], ebp
	mov	DWORD PTR _monster[esi+32], eax
	mov	DWORD PTR _monster[esi+40], eax
	call	@M_CheckEFlag@4
; Line 2113
	mov	ecx, edi
	call	@M_ClearSquares@4
; Line 2114
	mov	ecx, DWORD PTR _monster[esi+32]
; Line 2115
	mov	edx, DWORD PTR _sendmsg$[esp+12]
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _monster[esi+36]
	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR _dMonster[ecx*4], eax
	mov	ecx, edi
	call	@CheckQuestKill@8
; Line 2116
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	call	@M_FallenFear@8
; Line 2117
	mov	eax, DWORD PTR _monster[esi+220]
	mov	al, BYTE PTR [eax]
	cmp	al, 46					; 0000002eH
	jb	SHORT $L86220
	cmp	al, 49					; 00000031H
	ja	SHORT $L86220
; Line 2118
	movzx	eax, BYTE PTR _monster[esi+153]
	inc	eax
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	ebp
	push	eax
	push	edi
	push	1
	push	59					; 0000003bH
	push	ebp
	push	ebp
	push	ebp
	call	@AddMissile@40
$L86220:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2119
	ret	4
@MonstStartKill@12 ENDP
_TEXT	ENDS
PUBLIC	@M2MStartKill@8
PUBLIC	??_C@_0CM@ICJO@M2MStartKill?3?5Invalid?5monster?5?$CIa@ ; `string'
PUBLIC	??_C@_0CK@EJPI@M2MStartKill?3?5Invalid?5monster?5?$CIk@ ; `string'
PUBLIC	??_C@_0CJ@EFAN@M2MStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MT@ ; `string'
EXTRN	@delta_kill_monster@16:NEAR
EXTRN	@NetSendCmdLocParam1@20:NEAR
;	COMDAT ??_C@_0CM@ICJO@M2MStartKill?3?5Invalid?5monster?5?$CIa@
_DATA	SEGMENT
??_C@_0CM@ICJO@M2MStartKill?3?5Invalid?5monster?5?$CIa@ DB 'M2MStartKill:'
	DB	' Invalid monster (attacker) %d', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CK@EJPI@M2MStartKill?3?5Invalid?5monster?5?$CIk@
_DATA	SEGMENT
??_C@_0CK@EJPI@M2MStartKill?3?5Invalid?5monster?5?$CIk@ DB 'M2MStartKill:'
	DB	' Invalid monster (killed) %d', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@EFAN@M2MStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MT@
_DATA	SEGMENT
??_C@_0CJ@EFAN@M2MStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MT@ DB 'M2M'
	DB	'StartKill: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M2MStartKill@8
_TEXT	SEGMENT
@M2MStartKill@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _mid$ = edx
; Line 2122
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
; Line 2125
	cmp	ebx, 200				; 000000c8H
	mov	edi, edx
	jb	SHORT $L86228
; Line 2126
	push	ebx
	push	OFFSET FLAT:??_C@_0CM@ICJO@M2MStartKill?3?5Invalid?5monster?5?$CIa@ ; `string'
	call	_TermMsg
; Line 2127
	push	edi
	push	OFFSET FLAT:??_C@_0CK@EJPI@M2MStartKill?3?5Invalid?5monster?5?$CIk@ ; `string'
	call	_TermMsg
	add	esp, 16					; 00000010H
$L86228:
	push	ebp
; Line 2129
	mov	ebp, ebx
	imul	ebp, 228				; 000000e4H
	cmp	DWORD PTR _monster[ebp+220], 0
	jne	SHORT $L86231
; Line 2130
	mov	eax, edi
	imul	eax, 228				; 000000e4H
	push	DWORD PTR _monster[eax+216]
	push	edi
	push	OFFSET FLAT:??_C@_0CJ@EFAN@M2MStartKill?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MT@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86231:
; Line 2132
	mov	esi, edi
	mov	al, BYTE PTR _currlevel
	imul	esi, 228				; 000000e4H
	push	eax
	mov	ecx, edi
	mov	al, BYTE PTR _monster[esi+36]
	mov	dl, BYTE PTR _monster[esi+32]
	push	eax
	call	@delta_kill_monster@16
; Line 2133
	mov	al, BYTE PTR _monster[esi+36]
	mov	dl, 36					; 00000024H
	push	edi
	push	eax
	mov	al, BYTE PTR _monster[esi+32]
	xor	ecx, ecx
	push	eax
	call	@NetSendCmdLocParam1@20
; Line 2135
	mov	dl, 1
	mov	ecx, ebx
	shl	dl, cl
	lea	eax, DWORD PTR _monster[esi+191]
	or	BYTE PTR [eax], dl
	mov	al, BYTE PTR [eax]
; Line 2136
	cmp	ebx, 4
	jge	SHORT $L86233
; Line 2137
	movzx	edx, WORD PTR _monster[esi+194]
	movsx	ecx, BYTE PTR _monster[esi+192]
	push	eax
	call	@AddPlrMonstExper@12
$L86233:
; Line 2139
	mov	eax, DWORD PTR _monster[esi+220]
; Line 2141
	mov	ecx, DWORD PTR _monster[esi+176]
	movzx	eax, BYTE PTR [eax]
	and	DWORD PTR _monster[esi+148], 0
	lea	eax, DWORD PTR _monstkills[eax*4]
	inc	DWORD PTR [eax]
	call	@SetRndSeed@4
; Line 2143
	cmp	edi, 4
	jl	SHORT $L86234
; Line 2144
	mov	edx, DWORD PTR _monster[esi+32]
	push	1
	push	DWORD PTR _monster[esi+36]
	mov	ecx, edi
	call	@SpawnItem@16
$L86234:
; Line 2146
	mov	eax, DWORD PTR _monster[esi+220]
	cmp	BYTE PTR [eax], 110			; 0000006eH
	jne	SHORT $L86235
; Line 2147
	xor	edx, edx
	mov	ecx, edi
	inc	edx
	call	@M_DiabloDeath@8
; Line 2148
	jmp	SHORT $L86236
$L86235:
; Line 2149
	push	2
	mov	ecx, ebx
	pop	edx
	call	@PlayEffect@8
$L86236:
; Line 2151
	push	2
	mov	ecx, edi
	pop	edx
	call	@PlayEffect@8
; Line 2153
	mov	eax, DWORD PTR _monster[ebp+72]
; Line 2154
	mov	ecx, DWORD PTR _monster[esi+220]
	sub	eax, 4
; Line 2155
	xor	ebx, ebx
	and	eax, 7
	cmp	BYTE PTR [ecx], 109			; 0000006dH
	pop	ebp
	jne	SHORT $L86237
	xor	eax, eax
$L86237:
; Line 2158
	lea	edx, DWORD PTR [ecx+180]
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+72], eax
	call	@NewMonsterAnim@12
; Line 2163
	mov	ecx, DWORD PTR _monster[esi+52]
	mov	eax, DWORD PTR _monster[esi+48]
	mov	DWORD PTR _monster[esi+36], ecx
; Line 2165
	mov	DWORD PTR _monster[esi+44], ecx
; Line 2166
	mov	ecx, edi
	mov	DWORD PTR _monster[esi+4], 6
	mov	DWORD PTR _monster[esi+56], ebx
	mov	DWORD PTR _monster[esi+60], ebx
	mov	DWORD PTR _monster[esi+32], eax
	mov	DWORD PTR _monster[esi+40], eax
	call	@M_CheckEFlag@4
; Line 2167
	mov	ecx, edi
	call	@M_ClearSquares@4
; Line 2168
	mov	ecx, DWORD PTR _monster[esi+32]
	lea	eax, DWORD PTR [edi+1]
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _monster[esi+36]
; Line 2169
	xor	edx, edx
	inc	edx
	mov	DWORD PTR _dMonster[ecx*4], eax
	mov	ecx, edi
	call	@CheckQuestKill@8
; Line 2170
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	call	@M_FallenFear@8
; Line 2171
	mov	eax, DWORD PTR _monster[esi+220]
	mov	al, BYTE PTR [eax]
	cmp	al, 46					; 0000002eH
	jb	SHORT $L86238
	cmp	al, 49					; 00000031H
	ja	SHORT $L86238
; Line 2172
	movzx	eax, BYTE PTR _monster[esi+153]
	inc	eax
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	ebx
	push	eax
	push	edi
	push	1
	push	59					; 0000003bH
	push	ebx
	push	ebx
	push	ebx
	call	@AddMissile@40
$L86238:
	pop	edi
	pop	esi
	pop	ebx
; Line 2173
	ret	0
@M2MStartKill@8 ENDP
_TEXT	ENDS
PUBLIC	@M_StartKill@8
PUBLIC	??_C@_0CA@CHPM@M_StartKill?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@CHPM@M_StartKill?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@CHPM@M_StartKill?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_StartKil'
	DB	'l: Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_StartKill@8
_TEXT	SEGMENT
@M_StartKill@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _pnum$ = edx
; Line 2176
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 2177
	cmp	edi, 200				; 000000c8H
	mov	ebx, edx
	jb	SHORT $L86245
; Line 2178
	push	edi
	push	OFFSET FLAT:??_C@_0CA@CHPM@M_StartKill?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86245:
; Line 2181
	cmp	DWORD PTR _myplr, ebx
	jne	SHORT $L86249
; Line 2182
	mov	esi, edi
	mov	al, BYTE PTR _currlevel
	imul	esi, 228				; 000000e4H
	push	eax
	mov	ecx, edi
	mov	al, BYTE PTR _monster[esi+36]
	mov	dl, BYTE PTR _monster[esi+32]
	push	eax
	call	@delta_kill_monster@16
; Line 2184
	xor	ecx, ecx
	cmp	edi, ebx
	je	SHORT $L86248
	push	edi
	mov	dl, 36					; 00000024H
; Line 2185
	jmp	SHORT $L89776
$L86248:
; Line 2186
	movzx	ax, BYTE PTR _currlevel
	push	eax
	mov	dl, 87					; 00000057H
$L89776:
	mov	al, BYTE PTR _monster[esi+36]
	push	eax
	mov	al, BYTE PTR _monster[esi+32]
	push	eax
	call	@NetSendCmdLocParam1@20
$L86249:
; Line 2190
	push	1
	mov	edx, ebx
	mov	ecx, edi
	call	@MonstStartKill@12
	pop	edi
	pop	esi
	pop	ebx
; Line 2191
	ret	0
@M_StartKill@8 ENDP
_TEXT	ENDS
PUBLIC	@M_SyncStartKill@16
PUBLIC	??_C@_0CE@JLGP@M_SyncStartKill?3?5Invalid?5monster@ ; `string'
;	COMDAT ??_C@_0CE@JLGP@M_SyncStartKill?3?5Invalid?5monster@
_DATA	SEGMENT
??_C@_0CE@JLGP@M_SyncStartKill?3?5Invalid?5monster@ DB 'M_SyncStartKill: '
	DB	'Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_SyncStartKill@16
_TEXT	SEGMENT
_i$ = -4
_y$ = 8
_pnum$ = 12
@M_SyncStartKill@16 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 2194
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 2195
	cmp	esi, 200				; 000000c8H
	mov	ebx, edx
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L86260
; Line 2196
	push	esi
	push	OFFSET FLAT:??_C@_0CE@JLGP@M_SyncStartKill?3?5Invalid?5monster@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86260:
; Line 2198
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+148], 0
	je	SHORT $L86263
	cmp	DWORD PTR _monster[esi+4], 6
	je	SHORT $L86263
; Line 2202
	mov	eax, ebx
	mov	edi, DWORD PTR _y$[ebp]
	imul	eax, 112				; 00000070H
	add	eax, edi
	cmp	DWORD PTR _dMonster[eax*4], 0
	jne	SHORT $L86264
; Line 2203
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_ClearSquares@4
; Line 2204
	mov	DWORD PTR _monster[esi+32], ebx
; Line 2205
	mov	DWORD PTR _monster[esi+36], edi
; Line 2206
	mov	DWORD PTR _monster[esi+48], ebx
; Line 2207
	mov	DWORD PTR _monster[esi+52], edi
$L86264:
; Line 2211
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pnum$[ebp]
	push	15					; 0000000fH
	pop	edi
	cmp	DWORD PTR _monster[esi+4], edi
	push	0
	jne	SHORT $L86265
	call	@MonstStartKill@12
; Line 2212
	mov	DWORD PTR _monster[esi+4], edi
; Line 2213
	jmp	SHORT $L86263
$L86265:
; Line 2214
	call	@MonstStartKill@12
$L86263:
	pop	edi
	pop	esi
	pop	ebx
; Line 2216
	leave
	ret	8
@M_SyncStartKill@16 ENDP
_TEXT	ENDS
PUBLIC	@M_StartFadein@12
PUBLIC	??_C@_0CC@IBDL@M_StartFadein?3?5Invalid?5monster?5?$CF@ ; `string'
PUBLIC	??_C@_0CK@PIKK@M_StartFadein?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@ ; `string'
;	COMDAT ??_C@_0CC@IBDL@M_StartFadein?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT
??_C@_0CC@IBDL@M_StartFadein?3?5Invalid?5monster?5?$CF@ DB 'M_StartFadein'
	DB	': Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CK@PIKK@M_StartFadein?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@
_DATA	SEGMENT
??_C@_0CK@PIKK@M_StartFadein?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@ DB 'M_S'
	DB	'tartFadein: Monster %d "%s" MType NULL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_StartFadein@12
_TEXT	SEGMENT
_i$ = -4
_backwards$ = 8
@M_StartFadein@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _md$ = edx
; Line 2219
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 2220
	cmp	esi, 200				; 000000c8H
	mov	ebx, edx
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L86275
; Line 2221
	push	esi
	push	OFFSET FLAT:??_C@_0CC@IBDL@M_StartFadein?3?5Invalid?5monster?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86275:
; Line 2222
	imul	esi, 228				; 000000e4H
	lea	edi, DWORD PTR _monster[esi+220]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L86278
; Line 2223
	push	DWORD PTR _monster[esi+216]
	push	DWORD PTR _i$[ebp]
	push	OFFSET FLAT:??_C@_0CK@PIKK@M_StartFadein?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86278:
; Line 2225
	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR _i$[ebp]
	push	ebx
	add	edx, 224				; 000000e0H
	call	@NewMonsterAnim@12
; Line 2230
	mov	ecx, DWORD PTR _monster[esi+36]
	mov	eax, DWORD PTR _monster[esi+32]
	xor	edi, edi
	mov	DWORD PTR _monster[esi+44], ecx
; Line 2232
	mov	DWORD PTR _monster[esi+52], ecx
; Line 2233
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _monster[esi+4], 8
	mov	DWORD PTR _monster[esi+56], edi
	mov	DWORD PTR _monster[esi+60], edi
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+48], eax
	call	@M_CheckEFlag@4
; Line 2235
	lea	eax, DWORD PTR _monster[esi+156]
	mov	DWORD PTR _monster[esi+72], ebx
	and	DWORD PTR [eax], -2			; fffffffeH
; Line 2236
	cmp	DWORD PTR _backwards$[ebp], edi
	mov	ecx, DWORD PTR [eax]
	je	SHORT $L86280
; Line 2237
	or	ecx, 2
	mov	DWORD PTR [eax], ecx
; Line 2238
	mov	eax, DWORD PTR _monster[esi+96]
	mov	DWORD PTR _monster[esi+100], eax
$L86280:
	pop	edi
	pop	esi
	pop	ebx
; Line 2240
	leave
	ret	4
@M_StartFadein@12 ENDP
_TEXT	ENDS
PUBLIC	@M_StartFadeout@12
PUBLIC	??_C@_0CD@KGAD@M_StartFadeout?3?5Invalid?5monster?5@ ; `string'
PUBLIC	??_C@_0CL@JIMC@M_StartFadeout?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@ ; `string'
;	COMDAT ??_C@_0CD@KGAD@M_StartFadeout?3?5Invalid?5monster?5@
_DATA	SEGMENT
??_C@_0CD@KGAD@M_StartFadeout?3?5Invalid?5monster?5@ DB 'M_StartFadeout: '
	DB	'Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CL@JIMC@M_StartFadeout?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@
_DATA	SEGMENT
??_C@_0CL@JIMC@M_StartFadeout?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@ DB 'M_S'
	DB	'tartFadeout: Monster %d "%s" MType NULL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_StartFadeout@12
_TEXT	SEGMENT
_md$ = -4
_backwards$ = 8
@M_StartFadeout@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _md$ = edx
; Line 2243
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	ebx, ecx
	push	esi
; Line 2244
	cmp	ebx, 200				; 000000c8H
	push	edi
	mov	DWORD PTR _md$[ebp], edx
	jb	SHORT $L86289
; Line 2245
	push	ebx
	push	OFFSET FLAT:??_C@_0CD@KGAD@M_StartFadeout?3?5Invalid?5monster?5@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86289:
; Line 2246
	mov	esi, ebx
	imul	esi, 228				; 000000e4H
	lea	edi, DWORD PTR _monster[esi+220]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L86292
; Line 2247
	push	DWORD PTR _monster[esi+216]
	push	ebx
	push	OFFSET FLAT:??_C@_0CL@JIMC@M_StartFadeout?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86292:
; Line 2249
	mov	edx, DWORD PTR [edi]
	push	DWORD PTR _md$[ebp]
	add	edx, 224				; 000000e0H
	mov	ecx, ebx
	call	@NewMonsterAnim@12
; Line 2254
	mov	ecx, DWORD PTR _monster[esi+36]
	mov	eax, DWORD PTR _monster[esi+32]
	xor	edi, edi
	mov	DWORD PTR _monster[esi+44], ecx
; Line 2256
	mov	DWORD PTR _monster[esi+52], ecx
; Line 2257
	mov	ecx, ebx
	mov	DWORD PTR _monster[esi+4], 9
	mov	DWORD PTR _monster[esi+56], edi
	mov	DWORD PTR _monster[esi+60], edi
	mov	DWORD PTR _monster[esi+40], eax
	mov	DWORD PTR _monster[esi+48], eax
	call	@M_CheckEFlag@4
; Line 2258
	mov	eax, DWORD PTR _md$[ebp]
; Line 2259
	cmp	DWORD PTR _backwards$[ebp], edi
	mov	DWORD PTR _monster[esi+72], eax
	je	SHORT $L86294
; Line 2261
	mov	eax, DWORD PTR _monster[esi+96]
	or	DWORD PTR _monster[esi+156], 2
	mov	DWORD PTR _monster[esi+100], eax
$L86294:
	pop	edi
	pop	esi
	pop	ebx
; Line 2263
	leave
	ret	4
@M_StartFadeout@12 ENDP
_TEXT	ENDS
PUBLIC	@M_StartHeal@4
PUBLIC	??_C@_0CA@GFDF@M_StartHeal?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CI@ONMJ@M_StartHeal?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
;	COMDAT ??_C@_0CA@GFDF@M_StartHeal?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@GFDF@M_StartHeal?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_StartHea'
	DB	'l: Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@ONMJ@M_StartHeal?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT
??_C@_0CI@ONMJ@M_StartHeal?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ DB 'M_S'
	DB	'tartHeal: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_StartHeal@4
_TEXT	SEGMENT
@M_StartHeal@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 2266
	push	esi
	push	edi
	mov	edi, ecx
; Line 2269
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86300
; Line 2270
	push	edi
	push	OFFSET FLAT:??_C@_0CA@GFDF@M_StartHeal?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86300:
; Line 2271
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], 0
	jne	SHORT $L86303
; Line 2272
	push	DWORD PTR _monster[esi+216]
	push	edi
	push	OFFSET FLAT:??_C@_0CI@ONMJ@M_StartHeal?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86303:
; Line 2275
	mov	eax, DWORD PTR _monster[esi+220]
	mov	ecx, DWORD PTR _monster[esi+72]
; Line 2279
	push	5
	mov	ecx, DWORD PTR [eax+ecx*4+228]
	pop	edx
	mov	DWORD PTR _monster[esi+84], ecx
	mov	eax, DWORD PTR [eax+260]
	or	DWORD PTR _monster[esi+156], 2
	mov	cl, 97					; 00000061H
	mov	DWORD PTR _monster[esi+100], eax
	mov	DWORD PTR _monster[esi+4], 16		; 00000010H
	call	@random@8
	mov	ecx, eax
	mov	eax, DWORD PTR _monster[esi+144]
	add	ecx, 4
	pop	edi
	cdq
	shl	ecx, 4
	idiv	ecx
	mov	DWORD PTR _monster[esi+112], eax
	pop	esi
; Line 2280
	ret	0
@M_StartHeal@4 ENDP
_TEXT	ENDS
PUBLIC	@M_ChangeLightOffset@4
PUBLIC	??_C@_0CI@GMM@M_ChangeLightOffset?3?5Invalid?5mon@ ; `string'
EXTRN	@ChangeLightOff@12:NEAR
;	COMDAT ??_C@_0CI@GMM@M_ChangeLightOffset?3?5Invalid?5mon@
_DATA	SEGMENT
??_C@_0CI@GMM@M_ChangeLightOffset?3?5Invalid?5mon@ DB 'M_ChangeLightOffse'
	DB	't: Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_ChangeLightOffset@4
_TEXT	SEGMENT
@M_ChangeLightOffset@4 PROC NEAR			; COMDAT
; _monst$ = ecx
; Line 2283
	push	esi
	mov	esi, ecx
; Line 2286
	cmp	esi, 200				; 000000c8H
	jb	SHORT $L86314
; Line 2287
	push	esi
	push	OFFSET FLAT:??_C@_0CI@GMM@M_ChangeLightOffset?3?5Invalid?5mon@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86314:
; Line 2289
	mov	ecx, esi
	imul	ecx, 228				; 000000e4H
	mov	eax, DWORD PTR _monster[ecx+60]
	mov	esi, DWORD PTR _monster[ecx+56]
	add	eax, eax
	lea	edx, DWORD PTR [esi+eax]
; Line 2290
	sub	eax, esi
; Line 2292
	test	edx, edx
	jge	SHORT $L86316
; Line 2293
	or	esi, -1
; Line 2294
	neg	edx
; Line 2295
	jmp	SHORT $L86317
$L86316:
; Line 2296
	xor	esi, esi
	inc	esi
$L86317:
; Line 2299
	sar	edx, 3
	imul	edx, esi
; Line 2300
	test	eax, eax
	jge	SHORT $L86318
; Line 2301
	or	esi, -1
; Line 2302
	neg	eax
; Line 2303
	jmp	SHORT $L86319
$L86318:
; Line 2304
	xor	esi, esi
	inc	esi
$L86319:
; Line 2307
	sar	eax, 3
	imul	eax, esi
	movzx	ecx, BYTE PTR _monster[ecx+215]
	push	eax
	call	@ChangeLightOff@12
	pop	esi
; Line 2308
	ret	0
@M_ChangeLightOffset@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoStand@4
PUBLIC	??_C@_0BO@JMIC@M_DoStand?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CG@IJKO@M_DoStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
;	COMDAT ??_C@_0BO@JMIC@M_DoStand?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@JMIC@M_DoStand?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoStand: I'
	DB	'nvalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CG@IJKO@M_DoStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT
??_C@_0CG@IJKO@M_DoStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ DB 'M_D'
	DB	'oStand: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoStand@4
_TEXT	SEGMENT
@M_DoStand@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2311
	push	esi
	push	edi
	mov	edi, ecx
; Line 2314
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86325
; Line 2315
	push	edi
	push	OFFSET FLAT:??_C@_0BO@JMIC@M_DoStand?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86325:
; Line 2316
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], 0
	jne	SHORT $L86328
; Line 2317
	push	DWORD PTR _monster[esi+216]
	push	edi
	push	OFFSET FLAT:??_C@_0CG@IJKO@M_DoStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86328:
; Line 2320
	mov	eax, DWORD PTR _monster[esi+220]
; Line 2321
	mov	ecx, DWORD PTR _monster[esi+72]
	cmp	BYTE PTR [eax], 109			; 0000006dH
	jne	SHORT $L86330
	mov	eax, DWORD PTR [eax+ecx*4+52]
; Line 2322
	jmp	SHORT $L89792
$L86330:
; Line 2323
	mov	eax, DWORD PTR [eax+ecx*4+8]
$L89792:
	mov	DWORD PTR _monster[esi+84], eax
; Line 2325
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	SHORT $L86332
; Line 2326
	mov	ecx, edi
	call	@M_Enemy@4
$L86332:
; Line 2328
	inc	DWORD PTR _monster[esi+116]
	pop	edi
; Line 2330
	xor	eax, eax
	pop	esi
; Line 2331
	ret	0
@M_DoStand@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoWalk@4
PUBLIC	??_C@_0BN@HJBA@M_DoWalk?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CF@JJMM@M_DoWalk?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType?5@ ; `string'
;	COMDAT ??_C@_0BN@HJBA@M_DoWalk?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@HJBA@M_DoWalk?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoWalk: Inv'
	DB	'alid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CF@JJMM@M_DoWalk?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType?5@
_DATA	SEGMENT
??_C@_0CF@JJMM@M_DoWalk?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType?5@ DB 'M_'
	DB	'DoWalk: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoWalk@4
_TEXT	SEGMENT
@M_DoWalk@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2334
	push	ebx
	mov	ebx, ecx
; Line 2337
	cmp	ebx, 200				; 000000c8H
	push	edi
	jb	SHORT $L86338
; Line 2338
	push	ebx
	push	OFFSET FLAT:??_C@_0BN@HJBA@M_DoWalk?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86338:
	push	esi
; Line 2339
	mov	esi, ebx
	imul	esi, 228				; 000000e4H
	xor	edi, edi
	cmp	DWORD PTR _monster[esi+220], edi
	jne	SHORT $L86341
; Line 2340
	push	DWORD PTR _monster[esi+216]
	push	ebx
	push	OFFSET FLAT:??_C@_0CF@JJMM@M_DoWalk?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType?5@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86341:
; Line 2343
	mov	ecx, DWORD PTR _monster[esi+220]
	mov	eax, DWORD PTR _monster[esi+140]
	cmp	eax, DWORD PTR [ecx+84]
	jne	SHORT $L86343
; Line 2344
	lea	eax, DWORD PTR _monster[esi+32]
	mov	edi, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ecx
	imul	edx, 112				; 00000070H
	add	edx, edi
	and	DWORD PTR _dMonster[edx*4], 0
; Line 2345
	mov	edx, DWORD PTR _monster[esi+112]
	add	edx, ecx
; Line 2347
	lea	ecx, DWORD PTR [ebx+1]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _monster[esi+116]
	add	eax, edi
	mov	edi, edx
	imul	edi, 112				; 00000070H
	add	edi, eax
; Line 2348
	cmp	BYTE PTR _monster[esi+188], 0
	mov	DWORD PTR _monster[esi+36], eax
	mov	DWORD PTR _dMonster[edi*4], ecx
	je	SHORT $L86344
; Line 2349
	movzx	ecx, BYTE PTR _monster[esi+215]
	push	eax
	call	@ChangeLightXY@12
$L86344:
; Line 2350
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, ebx
	call	@M_StartStand@8
; Line 2351
	xor	edi, edi
	inc	edi
; Line 2352
	jmp	SHORT $L86346
$L86343:
	cmp	DWORD PTR _monster[esi+92], edi
	jne	SHORT $L86346
; Line 2354
	mov	ecx, DWORD PTR _monster[esi+64]
	inc	eax
; Line 2355
	mov	edx, DWORD PTR _monster[esi+68]
	mov	DWORD PTR _monster[esi+140], eax
	lea	eax, DWORD PTR _monster[esi+132]
	add	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR [eax]
	lea	ecx, DWORD PTR _monster[esi+136]
; Line 2356
	sar	eax, 4
	add	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [ecx]
; Line 2357
	sar	ecx, 4
	mov	DWORD PTR _monster[esi+56], eax
	mov	DWORD PTR _monster[esi+60], ecx
$L86346:
; Line 2360
	cmp	BYTE PTR _monster[esi+188], 0
	pop	esi
	je	SHORT $L86347
; Line 2361
	mov	ecx, ebx
	call	@M_ChangeLightOffset@4
$L86347:
; Line 2363
	mov	eax, edi
	pop	edi
	pop	ebx
; Line 2364
	ret	0
@M_DoWalk@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoWalk2@4
PUBLIC	??_C@_0BO@KGGF@M_DoWalk2?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CG@KAFN@M_DoWalk2?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
;	COMDAT ??_C@_0BO@KGGF@M_DoWalk2?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@KGGF@M_DoWalk2?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoWalk2: I'
	DB	'nvalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CG@KAFN@M_DoWalk2?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT
??_C@_0CG@KAFN@M_DoWalk2?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ DB 'M_D'
	DB	'oWalk2: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoWalk2@4
_TEXT	SEGMENT
@M_DoWalk2@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2367
	push	ebp
	mov	ebp, ecx
; Line 2370
	cmp	ebp, 200				; 000000c8H
	push	edi
	jb	SHORT $L86353
; Line 2371
	push	ebp
	push	OFFSET FLAT:??_C@_0BO@KGGF@M_DoWalk2?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86353:
	push	ebx
	push	esi
; Line 2372
	mov	esi, ebp
	xor	ebx, ebx
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], ebx
	jne	SHORT $L86356
; Line 2373
	push	DWORD PTR _monster[esi+216]
	push	ebp
	push	OFFSET FLAT:??_C@_0CG@KAFN@M_DoWalk2?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86356:
; Line 2375
	mov	ecx, DWORD PTR _monster[esi+220]
	mov	eax, DWORD PTR _monster[esi+140]
	cmp	eax, DWORD PTR [ecx+84]
	jne	SHORT $L86358
; Line 2376
	mov	eax, DWORD PTR _monster[esi+112]
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _monster[esi+116]
; Line 2377
	cmp	BYTE PTR _monster[esi+188], bl
	mov	DWORD PTR _dMonster[eax*4], ebx
	je	SHORT $L86359
; Line 2378
	movzx	ecx, BYTE PTR _monster[esi+215]
	push	DWORD PTR _monster[esi+36]
	mov	edx, DWORD PTR _monster[esi+32]
	call	@ChangeLightXY@12
$L86359:
; Line 2379
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, ebp
	call	@M_StartStand@8
; Line 2380
	xor	edi, edi
	inc	edi
; Line 2381
	jmp	SHORT $L86360
$L86358:
; Line 2382
	cmp	DWORD PTR _monster[esi+92], ebx
	jne	SHORT $L86361
; Line 2384
	mov	ecx, DWORD PTR _monster[esi+64]
	inc	eax
; Line 2385
	mov	edx, DWORD PTR _monster[esi+68]
	mov	DWORD PTR _monster[esi+140], eax
	lea	eax, DWORD PTR _monster[esi+132]
	add	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR [eax]
	lea	ecx, DWORD PTR _monster[esi+136]
; Line 2386
	sar	eax, 4
	add	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [ecx]
; Line 2387
	sar	ecx, 4
	mov	DWORD PTR _monster[esi+56], eax
	mov	DWORD PTR _monster[esi+60], ecx
$L86361:
; Line 2389
	xor	edi, edi
$L86360:
; Line 2391
	cmp	BYTE PTR _monster[esi+188], bl
	pop	esi
	pop	ebx
	je	SHORT $L86362
; Line 2392
	mov	ecx, ebp
	call	@M_ChangeLightOffset@4
$L86362:
; Line 2394
	mov	eax, edi
	pop	edi
	pop	ebp
; Line 2395
	ret	0
@M_DoWalk2@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@DGCG@M_DoWalk3?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CG@FHKJ@M_DoWalk3?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
PUBLIC	@M_DoWalk3@4
;	COMDAT ??_C@_0BO@DGCG@M_DoWalk3?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@DGCG@M_DoWalk3?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoWalk3: I'
	DB	'nvalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CG@FHKJ@M_DoWalk3?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT
??_C@_0CG@FHKJ@M_DoWalk3?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ DB 'M_D'
	DB	'oWalk3: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoWalk3@4
_TEXT	SEGMENT
@M_DoWalk3@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2398
	push	ebp
	mov	ebp, ecx
; Line 2401
	cmp	ebp, 200				; 000000c8H
	push	edi
	jb	SHORT $L86368
; Line 2402
	push	ebp
	push	OFFSET FLAT:??_C@_0BO@DGCG@M_DoWalk3?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86368:
	push	ebx
	push	esi
; Line 2403
	mov	esi, ebp
	xor	ebx, ebx
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], ebx
	jne	SHORT $L86371
; Line 2404
	push	DWORD PTR _monster[esi+216]
	push	ebp
	push	OFFSET FLAT:??_C@_0CG@FHKJ@M_DoWalk3?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86371:
; Line 2406
	mov	ecx, DWORD PTR _monster[esi+220]
	mov	eax, DWORD PTR _monster[esi+140]
	cmp	eax, DWORD PTR [ecx+84]
	jne	SHORT $L86373
; Line 2407
	lea	eax, DWORD PTR _monster[esi+32]
	lea	ecx, DWORD PTR _monster[esi+36]
; Line 2409
	mov	edi, DWORD PTR _monster[esi+116]
	mov	edx, DWORD PTR [eax]
	imul	edx, 112				; 00000070H
	add	edx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], edi
; Line 2410
	mov	ecx, DWORD PTR _monster[esi+128]
	mov	DWORD PTR _dMonster[edx*4], ebx
	mov	edx, DWORD PTR _monster[esi+112]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _monster[esi+124]
	imul	eax, 112				; 00000070H
	lea	eax, DWORD PTR _dFlags[eax+ecx]
; Line 2411
	mov	ecx, edx
	imul	ecx, 112				; 00000070H
	and	BYTE PTR [eax], -17			; ffffffefH
	add	ecx, edi
; Line 2412
	cmp	BYTE PTR _monster[esi+188], bl
	lea	eax, DWORD PTR [ebp+1]
	mov	DWORD PTR _dMonster[ecx*4], eax
	je	SHORT $L86374
; Line 2413
	movzx	ecx, BYTE PTR _monster[esi+215]
	push	edi
	call	@ChangeLightXY@12
$L86374:
; Line 2414
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, ebp
	call	@M_StartStand@8
; Line 2415
	xor	edi, edi
	inc	edi
; Line 2416
	jmp	SHORT $L86375
$L86373:
; Line 2417
	cmp	DWORD PTR _monster[esi+92], ebx
	jne	SHORT $L86376
; Line 2419
	mov	ecx, DWORD PTR _monster[esi+64]
	inc	eax
; Line 2420
	mov	edx, DWORD PTR _monster[esi+68]
	mov	DWORD PTR _monster[esi+140], eax
	lea	eax, DWORD PTR _monster[esi+132]
	add	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR [eax]
	lea	ecx, DWORD PTR _monster[esi+136]
; Line 2421
	sar	eax, 4
	add	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [ecx]
; Line 2422
	sar	ecx, 4
	mov	DWORD PTR _monster[esi+56], eax
	mov	DWORD PTR _monster[esi+60], ecx
$L86376:
; Line 2424
	xor	edi, edi
$L86375:
; Line 2426
	cmp	BYTE PTR _monster[esi+188], bl
	pop	esi
	pop	ebx
	je	SHORT $L86377
; Line 2427
	mov	ecx, ebp
	call	@M_ChangeLightOffset@4
$L86377:
; Line 2429
	mov	eax, edi
	pop	edi
	pop	ebp
; Line 2430
	ret	0
@M_DoWalk3@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@ODLB@M_TryM2MHit?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CI@BACF@M_TryM2MHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
PUBLIC	@M_TryM2MHit@20
PUBLIC	@CheckMonsterHit@8
;	COMDAT ??_C@_0CA@ODLB@M_TryM2MHit?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@ODLB@M_TryM2MHit?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_TryM2MHi'
	DB	't: Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@BACF@M_TryM2MHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT
??_C@_0CI@BACF@M_TryM2MHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ DB 'M_T'
	DB	'ryM2MHit: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_TryM2MHit@20
_TEXT	SEGMENT
_i$ = -8
_mid$ = -4
_hper$ = 8
_mind$ = 12
_maxd$ = 16
_ret$ = -12
@M_TryM2MHit@20 PROC NEAR				; COMDAT
; _i$ = ecx
; _mid$ = edx
; Line 2433
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
; Line 2436
	cmp	edi, 200				; 000000c8H
	mov	DWORD PTR _mid$[ebp], edi
	mov	DWORD PTR _i$[ebp], ecx
	jb	SHORT $L86391
; Line 2437
	push	edi
	push	OFFSET FLAT:??_C@_0CA@ODLB@M_TryM2MHit?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86391:
; Line 2439
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], 0
	jne	SHORT $L86394
; Line 2440
	push	DWORD PTR _monster[esi+216]
	push	edi
	push	OFFSET FLAT:??_C@_0CI@BACF@M_TryM2MHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86394:
; Line 2441
	test	DWORD PTR _monster[esi+148], -64	; ffffffc0H
	jle	$L86407
	mov	eax, DWORD PTR _monster[esi+220]
	cmp	BYTE PTR [eax], 32			; 00000020H
	jne	SHORT $L86397
	cmp	BYTE PTR _monster[esi+8], 2
	je	$L86407
$L86397:
; Line 2442
	push	100					; 00000064H
	mov	cl, 4
	pop	edx
	call	@random@8
	mov	ebx, eax
; Line 2443
	push	15					; 0000000fH
	pop	edi
	cmp	DWORD PTR _monster[esi+4], edi
	jne	SHORT $L86399
; Line 2444
	xor	ebx, ebx
$L86399:
; Line 2445
	mov	ecx, DWORD PTR _mid$[ebp]
	lea	edx, DWORD PTR _ret$[ebp]
	call	@CheckMonsterHit@8
	test	eax, eax
	jne	SHORT $L86407
	cmp	ebx, DWORD PTR _hper$[ebp]
	jge	SHORT $L86407
; Line 2446
	mov	edx, DWORD PTR _maxd$[ebp]
	mov	cl, 5
	sub	edx, DWORD PTR _mind$[ebp]
	inc	edx
	call	@random@8
	add	eax, DWORD PTR _mind$[ebp]
	shl	eax, 6
; Line 2447
	sub	DWORD PTR _monster[esi+148], eax
; Line 2448
	test	DWORD PTR _monster[esi+148], -64	; ffffffc0H
	jg	SHORT $L86402
; Line 2449
	cmp	DWORD PTR _monster[esi+4], edi
; Line 2450
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mid$[ebp]
	jne	SHORT $L86403
	call	@M2MStartKill@8
$L89805:
; Line 2451
	mov	DWORD PTR _monster[esi+4], edi
; Line 2452
	jmp	SHORT $L86407
$L86403:
; Line 2453
	call	@M2MStartKill@8
; Line 2455
	jmp	SHORT $L86407
$L86402:
; Line 2456
	cmp	DWORD PTR _monster[esi+4], edi
; Line 2457
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	push	eax
	jne	SHORT $L86406
	call	@M2MStartHit@12
; Line 2459
	jmp	SHORT $L89805
$L86406:
; Line 2460
	call	@M2MStartHit@12
$L86407:
	pop	edi
	pop	esi
	pop	ebx
; Line 2465
	leave
	ret	12					; 0000000cH
@M_TryM2MHit@20 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@HCPJ@M_TryH2HHit?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CI@MDJD@M_TryH2HHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
PUBLIC	@M_TryH2HHit@20
EXTRN	@PosOkPlayer@12:NEAR
EXTRN	_missileactive:BYTE
EXTRN	_missile:BYTE
EXTRN	_nummissiles:DWORD
EXTRN	@SetPlayerOld@4:NEAR
EXTRN	@FixPlayerLocation@8:NEAR
EXTRN	@StartPlrBlock@8:NEAR
EXTRN	@FixPlrWalkTags@4:NEAR
EXTRN	@StartPlrHit@12:NEAR
EXTRN	@SyncPlrKill@8:NEAR
;	COMDAT ??_C@_0CA@HCPJ@M_TryH2HHit?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@HCPJ@M_TryH2HHit?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_TryH2HHi'
	DB	't: Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@MDJD@M_TryH2HHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT
??_C@_0CI@MDJD@M_TryH2HHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ DB 'M_T'
	DB	'ryH2HHit: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_TryH2HHit@20
_TEXT	SEGMENT
_i$ = -12
_pnum$ = -4
_Hit$ = 8
_MinDam$ = 12
_MaxDam$ = 16
_v19$ = 8
_v22$ = 8
_v36$ = -8
_hper$ = -8
@M_TryH2HHit@20 PROC NEAR				; COMDAT
; _i$ = ecx
; _pnum$ = edx
; Line 2468
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 2506
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _pnum$[ebp], edx
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L86451
; Line 2507
	push	esi
	push	OFFSET FLAT:??_C@_0CA@HCPJ@M_TryH2HHit?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86451:
; Line 2509
	mov	ebx, esi
	imul	ebx, 228				; 000000e4H
	cmp	DWORD PTR _monster[ebx+220], 0
	jne	SHORT $L86454
; Line 2510
	push	DWORD PTR _monster[ebx+216]
	push	esi
	push	OFFSET FLAT:??_C@_0CI@MDJD@M_TryH2HHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86454:
; Line 2511
	test	BYTE PTR _monster[ebx+156], 16		; 00000010H
	je	SHORT $L86456
; Line 2512
	push	DWORD PTR _MaxDam$[ebp]
	mov	edx, DWORD PTR _pnum$[ebp]
	mov	ecx, esi
	push	DWORD PTR _MinDam$[ebp]
	push	DWORD PTR _Hit$[ebp]
	call	@M_TryM2MHit@20
; Line 2513
	jmp	$L86507
$L86456:
; Line 2516
	mov	esi, DWORD PTR _pnum$[ebp]
	imul	esi, 21720				; 000054d8H
	test	DWORD PTR _plr[esi+408], -64		; ffffffc0H
	jle	$L86507
	cmp	BYTE PTR _plr[esi+317], 0
	jne	$L86507
	test	BYTE PTR _plr[esi+288], 1
	jne	$L86507
; Line 2517
	mov	eax, DWORD PTR _monster[ebx+32]
	sub	eax, DWORD PTR _plr[esi+56]
	push	eax
	call	_abs
	mov	edi, eax
; Line 2518
	mov	eax, DWORD PTR _monster[ebx+36]
	sub	eax, DWORD PTR _plr[esi+60]
	push	eax
	call	_abs
	pop	ecx
; Line 2520
	cmp	edi, 2
	pop	ecx
	jge	$L86507
	cmp	eax, 2
	jge	$L86507
; Line 2521
	push	100					; 00000064H
	mov	cl, 98					; 00000062H
	pop	edx
	call	@random@8
; Line 2532
	movsx	ecx, BYTE PTR _plr[esi+440]
	mov	DWORD PTR _v36$[ebp], eax
	push	5
	movsx	eax, BYTE PTR _monster[ebx+192]
	sub	eax, ecx
	pop	ecx
	lea	edi, DWORD PTR [eax+eax+30]
	mov	eax, DWORD PTR _plr[esi+372]
	cdq
	idiv	ecx
	sub	edi, DWORD PTR _plr[esi+21552]
	sub	edi, DWORD PTR _plr[esi+21564]
	sub	edi, eax
	add	edi, DWORD PTR _Hit$[ebp]
; Line 2533
	cmp	edi, 15					; 0000000fH
	jge	SHORT $L86460
; Line 2534
	push	15					; 0000000fH
	pop	edi
$L86460:
; Line 2535
	mov	al, BYTE PTR _currlevel
	cmp	al, 14					; 0000000eH
	jne	SHORT $L86461
; Line 2536
	cmp	edi, 20					; 00000014H
	jge	SHORT $LABEL_23$86463
; Line 2538
	push	20					; 00000014H
	pop	edi
$L86461:
; Line 2540
	cmp	al, 15					; 0000000fH
	jne	SHORT $LABEL_20$86465
; Line 2546
	cmp	edi, 25					; 00000019H
	jge	SHORT $LABEL_23$86463
; Line 2547
	push	25					; 00000019H
	pop	edi
$LABEL_20$86465:
; Line 2542
	cmp	al, 16					; 00000010H
	jne	SHORT $LABEL_23$86463
	cmp	edi, 30					; 0000001eH
	jge	SHORT $LABEL_23$86463
; Line 2543
	push	30					; 0000001eH
	pop	edi
$LABEL_23$86463:
; Line 2551
	mov	eax, DWORD PTR _plr[esi]
; Line 2552
	test	eax, eax
	je	SHORT $L86470
	cmp	eax, 4
	jne	SHORT $L86469
$L86470:
	cmp	BYTE PTR _plr[esi+316], 0
	jne	SHORT $L86468
$L86469:
; Line 2553
	push	100					; 00000064H
	pop	eax
; Line 2554
	jmp	SHORT $L86471
$L86468:
; Line 2555
	push	100					; 00000064H
	mov	cl, 98					; 00000062H
	pop	edx
	call	@random@8
$L86471:
; Line 2560
	movsx	ecx, BYTE PTR _monster[ebx+192]
	movsx	edx, BYTE PTR _plr[esi+440]
	sub	edx, ecx
	mov	ecx, DWORD PTR _plr[esi+396]
	lea	ecx, DWORD PTR [ecx+edx*2]
	add	ecx, DWORD PTR _plr[esi+372]
; Line 2561
	jns	SHORT $L86475
; Line 2562
	xor	ecx, ecx
$L86475:
; Line 2563
	cmp	ecx, 100				; 00000064H
	jle	SHORT $L86477
; Line 2564
	push	100					; 00000064H
	pop	ecx
$L86477:
; Line 2565
	cmp	DWORD PTR _v36$[ebp], edi
	jge	$L86507
; Line 2566
	cmp	eax, ecx
	jl	$L86481
; Line 2567
	mov	eax, DWORD PTR _monster[ebx+220]
	cmp	BYTE PTR [eax], 3
	jne	$L86494
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	$L86494
; Line 2570
	mov	ecx, DWORD PTR _nummissiles
	and	DWORD PTR _v19$[ebp], 0
	or	edx, -1
	test	ecx, ecx
	mov	DWORD PTR _hper$[ebp], edx
	jle	SHORT $L86485
$L86483:
; Line 2571
	mov	eax, DWORD PTR _v19$[ebp]
	mov	edi, DWORD PTR _missileactive[eax*4]
	mov	eax, edi
; Line 2572
	imul	eax, 176				; 000000b0H
	cmp	DWORD PTR _missile[eax], 13		; 0000000dH
	jne	SHORT $L86484
; Line 2573
	mov	edx, DWORD PTR _pnum$[ebp]
	cmp	DWORD PTR _missile[eax+116], edx
	jne	SHORT $L86487
; Line 2574
	mov	edx, edi
; Line 2575
	mov	DWORD PTR _hper$[ebp], edi
; Line 2576
	jmp	SHORT $L86484
$L86487:
; Line 2577
	mov	edx, DWORD PTR _hper$[ebp]
$L86484:
; Line 2570
	inc	DWORD PTR _v19$[ebp]
	cmp	DWORD PTR _v19$[ebp], ecx
	jl	SHORT $L86483
$L86485:
; Line 2582
	mov	eax, DWORD PTR _plr[esi+412]
; Line 2583
	cmp	eax, 64					; 00000040H
	jle	SHORT $L86494
; Line 2584
	mov	ecx, DWORD PTR _plr[esi+404]
; Line 2585
	cmp	ecx, 64					; 00000040H
	mov	DWORD PTR _v22$[ebp], ecx
	jle	SHORT $L86494
; Line 2586
	lea	edi, DWORD PTR [eax-64]
; Line 2588
	mov	eax, DWORD PTR _plr[esi+408]
	cmp	eax, edi
; Line 2590
	mov	DWORD PTR _plr[esi+412], edi
	sete	cl
	sub	eax, edi
	sets	al
; Line 2591
	or	al, cl
	jne	SHORT $L86492
; Line 2593
	test	edx, edx
	mov	DWORD PTR _plr[esi+408], edi
	jl	SHORT $L86492
; Line 2594
	mov	eax, edx
	imul	eax, 176				; 000000b0H
	mov	DWORD PTR _missile[eax+144], edi
$L86492:
; Line 2597
	mov	eax, DWORD PTR _v22$[ebp]
; Line 2599
	lea	ecx, DWORD PTR _plr[esi+400]
	add	eax, -64				; ffffffc0H
	cmp	DWORD PTR [ecx], eax
	mov	DWORD PTR _plr[esi+404], eax
	jle	SHORT $L86494
; Line 2601
	test	edx, edx
	mov	DWORD PTR [ecx], eax
	jl	SHORT $L86494
; Line 2602
	imul	edx, 176				; 000000b0H
	mov	DWORD PTR _missile[edx+148], eax
$L86494:
; Line 2607
	mov	edx, DWORD PTR _MaxDam$[ebp]
	mov	cl, 99					; 00000063H
	sub	edx, DWORD PTR _MinDam$[ebp]
	inc	edx
	shl	edx, 6
	call	@random@8
	mov	edi, eax
	mov	eax, DWORD PTR _plr[esi+21588]
	add	eax, DWORD PTR _MinDam$[ebp]
	shl	eax, 6
	add	edi, eax
; Line 2608
	cmp	edi, 64					; 00000040H
	jge	SHORT $L86495
; Line 2609
	push	64					; 00000040H
	pop	edi
$L86495:
; Line 2610
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L86496
; Line 2611
	sub	DWORD PTR _plr[esi+408], edi
; Line 2612
	sub	DWORD PTR _plr[esi+400], edi
$L86496:
; Line 2614
	test	BYTE PTR _plr[esi+21586], 64		; 00000040H
	je	SHORT $L86499
; Line 2615
	push	3
	mov	cl, 99					; 00000063H
	pop	edx
	call	@random@8
; Line 2618
	mov	edx, DWORD PTR _pnum$[ebp]
	inc	eax
	lea	ecx, DWORD PTR _monster[ebx+148]
	shl	eax, 6
	sub	DWORD PTR [ecx], eax
	test	DWORD PTR [ecx], -64			; ffffffc0H
	mov	ecx, DWORD PTR _i$[ebp]
	jle	SHORT $L86498
	push	eax
	call	@M_StartHit@12
; Line 2619
	jmp	SHORT $L86499
$L86498:
; Line 2620
	call	@M_StartKill@8
$L86499:
; Line 2622
	test	BYTE PTR _monster[ebx+157], 16		; 00000010H
	jne	SHORT $L86500
	mov	eax, DWORD PTR _monster[ebx+220]
	cmp	BYTE PTR [eax], 50			; 00000032H
	jne	SHORT $L86500
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L86500
; Line 2623
	add	DWORD PTR _monster[ebx+148], edi
$L86500:
; Line 2624
	mov	eax, DWORD PTR _plr[esi+412]
; Line 2625
	cmp	DWORD PTR _plr[esi+408], eax
	jle	SHORT $L86501
; Line 2626
	mov	DWORD PTR _plr[esi+408], eax
; Line 2627
	mov	eax, DWORD PTR _plr[esi+404]
	mov	DWORD PTR _plr[esi+400], eax
$L86501:
; Line 2629
	test	DWORD PTR _plr[esi+408], -64		; ffffffc0H
; Line 2630
	mov	ecx, DWORD PTR _pnum$[ebp]
	jle	$L86502
	push	0
	mov	edx, edi
	call	@StartPlrHit@12
; Line 2631
	test	BYTE PTR _monster[ebx+156], -128	; ffffff80H
	je	$L86507
; Line 2632
	cmp	DWORD PTR _plr[esi], 7
	je	SHORT $L86504
; Line 2633
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	1
	xor	edx, edx
	call	@StartPlrHit@12
$L86504:
; Line 2634
	mov	ebx, DWORD PTR _monster[ebx+72]
; Line 2637
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	eax, ebx
	shl	eax, 2
	mov	edi, DWORD PTR _offset_x[eax]
	mov	ebx, DWORD PTR _offset_y[eax]
	add	edi, DWORD PTR _plr[esi+56]
	add	ebx, DWORD PTR _plr[esi+60]
	push	ebx
	mov	edx, edi
	call	@PosOkPlayer@12
	test	eax, eax
	je	SHORT $L86507
; Line 2641
	mov	edx, DWORD PTR _plr[esi+112]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	DWORD PTR _plr[esi+56], edi
	mov	DWORD PTR _plr[esi+60], ebx
	call	@FixPlayerLocation@8
; Line 2642
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@FixPlrWalkTags@4
; Line 2643
	imul	edi, 112				; 00000070H
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	al, cl
	inc	al
	mov	BYTE PTR _dPlayer[edi+ebx], al
; Line 2644
	call	@SetPlayerOld@4
; Line 2647
	jmp	SHORT $L86507
$L86502:
; Line 2648
	xor	edx, edx
	call	@SyncPlrKill@8
; Line 2650
	jmp	SHORT $L86507
$L86481:
; Line 2651
	push	DWORD PTR _monster[ebx+36]
	mov	edx, DWORD PTR _plr[esi+60]
	mov	ecx, DWORD PTR _plr[esi+56]
	push	DWORD PTR _monster[ebx+32]
	call	@GetDirection@16
; Line 2652
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, eax
	call	@StartPlrBlock@8
$L86507:
	pop	edi
	pop	esi
	pop	ebx
; Line 2658
	leave
	ret	12					; 0000000cH
@M_TryH2HHit@20 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@FMDJ@M_DoAttack?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CH@CFOD@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@ ; `string'
PUBLIC	??_C@_0CH@COCK@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDat@ ; `string'
PUBLIC	@M_DoAttack@4
;	COMDAT ??_C@_0BP@FMDJ@M_DoAttack?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@FMDJ@M_DoAttack?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoAttack:'
	DB	' Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CH@CFOD@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@
_DATA	SEGMENT
??_C@_0CH@CFOD@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@ DB 'M_D'
	DB	'oAttack: Monster %d "%s" MType NULL', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CH@COCK@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDat@
_DATA	SEGMENT
??_C@_0CH@COCK@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDat@ DB 'M_D'
	DB	'oAttack: Monster %d "%s" MData NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoAttack@4
_TEXT	SEGMENT
@M_DoAttack@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2662
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 2665
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86513
; Line 2666
	push	edi
	push	OFFSET FLAT:??_C@_0BP@FMDJ@M_DoAttack?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86513:
; Line 2668
	mov	esi, edi
	imul	esi, 228				; 000000e4H
; Line 2669
	lea	ebx, DWORD PTR _monster[esi+220]
	cmp	DWORD PTR [ebx], 0
	jne	SHORT $L86519
; Line 2670
	push	DWORD PTR _monster[esi+216]
	push	edi
	push	OFFSET FLAT:??_C@_0CH@CFOD@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
; Line 2671
	cmp	DWORD PTR [ebx], 0
	jne	SHORT $L86519
; Line 2672
	push	DWORD PTR _monster[esi+216]
	push	edi
	push	OFFSET FLAT:??_C@_0CH@COCK@M_DoAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDat@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86519:
; Line 2674
	mov	eax, DWORD PTR _monster[esi+224]
	movzx	eax, BYTE PTR [eax+106]
	cmp	DWORD PTR _monster[esi+100], eax
	jne	SHORT $L86522
; Line 2675
	movzx	eax, BYTE PTR _monster[esi+198]
	push	eax
	mov	edx, DWORD PTR _monster[esi+76]
	movzx	eax, BYTE PTR _monster[esi+197]
	push	eax
	mov	ecx, edi
	movzx	eax, BYTE PTR _monster[esi+196]
	push	eax
	call	@M_TryH2HHit@20
; Line 2676
	cmp	BYTE PTR _monster[esi+152], 24		; 00000018H
	je	SHORT $L86522
; Line 2677
	xor	edx, edx
	mov	ecx, edi
	call	@PlayEffect@8
$L86522:
; Line 2679
	mov	eax, DWORD PTR _monster[esi+220]
	mov	al, BYTE PTR [eax]
	cmp	al, 60					; 0000003cH
	jb	SHORT $L86523
	cmp	al, 63					; 0000003fH
	ja	SHORT $L86523
	cmp	DWORD PTR _monster[esi+100], 9
	jne	SHORT $L86523
; Line 2680
	movzx	eax, BYTE PTR _monster[esi+198]
	dec	eax
	mov	edx, DWORD PTR _monster[esi+76]
	dec	eax
	mov	ecx, edi
	push	eax
	movzx	eax, BYTE PTR _monster[esi+197]
	dec	eax
	dec	eax
	push	eax
	movzx	eax, BYTE PTR _monster[esi+196]
	add	eax, 10					; 0000000aH
	push	eax
	call	@M_TryH2HHit@20
; Line 2681
	xor	edx, edx
	mov	ecx, edi
	call	@PlayEffect@8
$L86523:
; Line 2683
	mov	eax, DWORD PTR _monster[esi+220]
	mov	al, BYTE PTR [eax]
	cmp	al, 76					; 0000004cH
	jb	SHORT $L86524
	cmp	al, 79					; 0000004fH
	ja	SHORT $L86524
	cmp	DWORD PTR _monster[esi+100], 13		; 0000000dH
	jne	SHORT $L86524
; Line 2684
	movzx	eax, BYTE PTR _monster[esi+198]
	add	eax, 4
	mov	edx, DWORD PTR _monster[esi+76]
	push	eax
	mov	ecx, edi
	movzx	eax, BYTE PTR _monster[esi+197]
	add	eax, 4
	push	eax
	movzx	eax, BYTE PTR _monster[esi+196]
	sub	eax, 20					; 00000014H
	push	eax
	call	@M_TryH2HHit@20
; Line 2685
	xor	edx, edx
	mov	ecx, edi
	call	@PlayEffect@8
$L86524:
; Line 2687
	cmp	BYTE PTR _monster[esi+152], 24		; 00000018H
	jne	SHORT $L86525
	cmp	DWORD PTR _monster[esi+100], 1
	jne	SHORT $L86525
; Line 2688
	xor	edx, edx
	mov	ecx, edi
	call	@PlayEffect@8
$L86525:
; Line 2689
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	SHORT $L86526
; Line 2690
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, edi
	call	@M_StartStand@8
; Line 2691
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86510
$L86526:
; Line 2694
	xor	eax, eax
$L86510:
	pop	edi
	pop	esi
	pop	ebx
; Line 2695
	ret	0
@M_DoAttack@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@IGLH@M_DoRAttack?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CI@GLGF@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
PUBLIC	??_C@_0CI@GAKM@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@ ; `string'
PUBLIC	@M_DoRAttack@4
;	COMDAT ??_C@_0CA@IGLH@M_DoRAttack?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@IGLH@M_DoRAttack?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoRAttac'
	DB	'k: Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@GLGF@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT
??_C@_0CI@GLGF@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ DB 'M_D'
	DB	'oRAttack: Monster %d "%s" MType NULL', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@GAKM@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@
_DATA	SEGMENT
??_C@_0CI@GAKM@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@ DB 'M_D'
	DB	'oRAttack: Monster %d "%s" MData NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoRAttack@4
_TEXT	SEGMENT
@M_DoRAttack@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 2698
	push	ebx
	mov	ebx, ecx
; Line 2701
	cmp	ebx, 200				; 000000c8H
	push	esi
	jb	SHORT $L86533
; Line 2702
	push	ebx
	push	OFFSET FLAT:??_C@_0CA@IGLH@M_DoRAttack?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86533:
; Line 2703
	mov	esi, ebx
	push	edi
	imul	esi, 228				; 000000e4H
	lea	edi, DWORD PTR _monster[esi+220]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L86539
; Line 2704
	push	DWORD PTR _monster[esi+216]
	push	ebx
	push	OFFSET FLAT:??_C@_0CI@GLGF@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
; Line 2705
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L86539
; Line 2706
	push	DWORD PTR _monster[esi+216]
	push	ebx
	push	OFFSET FLAT:??_C@_0CI@GAKM@M_DoRAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86539:
; Line 2708
	mov	eax, DWORD PTR _monster[esi+224]
	movzx	eax, BYTE PTR [eax+106]
	cmp	DWORD PTR _monster[esi+100], eax
	jne	SHORT $L86541
; Line 2709
	mov	eax, DWORD PTR _monster[esi+112]
	cmp	eax, -1
	je	SHORT $L86547
; Line 2710
	xor	ecx, ecx
	cmp	eax, 52					; 00000034H
	sete	cl
	lea	ecx, DWORD PTR [ecx+ecx+1]
	mov	eax, ecx
; Line 2714
	test	eax, eax
	jle	SHORT $L86547
	mov	edi, eax
$L86545:
; Line 2725
	push	0
	mov	edx, DWORD PTR _monster[esi+36]
	push	DWORD PTR _monster[esi+116]
	mov	ecx, DWORD PTR _monster[esi+32]
	movzx	eax, BYTE PTR _monster[esi+81]
	push	ebx
	push	1
	push	DWORD PTR _monster[esi+112]
	push	DWORD PTR _monster[esi+72]
	push	eax
	movzx	eax, BYTE PTR _monster[esi+80]
	push	eax
	call	@AddMissile@40
	dec	edi
	jne	SHORT $L86545
$L86547:
; Line 2728
	xor	edx, edx
	mov	ecx, ebx
	call	@PlayEffect@8
$L86541:
; Line 2731
	mov	eax, DWORD PTR _monster[esi+100]
	pop	edi
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	SHORT $L86548
; Line 2732
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, ebx
	call	@M_StartStand@8
; Line 2733
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86529
$L86548:
; Line 2736
	xor	eax, eax
$L86529:
	pop	esi
	pop	ebx
; Line 2737
	ret	0
@M_DoRAttack@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@PDAD@M_DoRSpAttack?3?5Invalid?5monster?5?$CF@ ; `string'
PUBLIC	??_C@_0CK@OJEH@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@ ; `string'
PUBLIC	??_C@_0CK@OCIO@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@ ; `string'
PUBLIC	@M_DoRSpAttack@4
;	COMDAT ??_C@_0CC@PDAD@M_DoRSpAttack?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT
??_C@_0CC@PDAD@M_DoRSpAttack?3?5Invalid?5monster?5?$CF@ DB 'M_DoRSpAttack'
	DB	': Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CK@OJEH@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@
_DATA	SEGMENT
??_C@_0CK@OJEH@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@ DB 'M_D'
	DB	'oRSpAttack: Monster %d "%s" MType NULL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CK@OCIO@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@
_DATA	SEGMENT
??_C@_0CK@OCIO@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@ DB 'M_D'
	DB	'oRSpAttack: Monster %d "%s" MData NULL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoRSpAttack@4
_TEXT	SEGMENT
@M_DoRSpAttack@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 2740
	push	ebx
	mov	ebx, ecx
; Line 2741
	cmp	ebx, 200				; 000000c8H
	push	esi
	jb	SHORT $L86553
; Line 2742
	push	ebx
	push	OFFSET FLAT:??_C@_0CC@PDAD@M_DoRSpAttack?3?5Invalid?5monster?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86553:
; Line 2743
	mov	esi, ebx
	push	edi
	imul	esi, 228				; 000000e4H
	lea	edi, DWORD PTR _monster[esi+220]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L89827
; Line 2744
	push	DWORD PTR _monster[esi+216]
	push	ebx
	push	OFFSET FLAT:??_C@_0CK@OJEH@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
; Line 2745
	cmp	DWORD PTR [edi], 0
$L89827:
	pop	edi
	jne	SHORT $L86559
; Line 2746
	push	DWORD PTR _monster[esi+216]
	push	ebx
	push	OFFSET FLAT:??_C@_0CK@OCIO@M_DoRSpAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5M@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86559:
; Line 2748
	mov	eax, DWORD PTR _monster[esi+224]
	movzx	eax, BYTE PTR [eax+110]
	cmp	DWORD PTR _monster[esi+100], eax
	jne	SHORT $L86561
	cmp	DWORD PTR _monster[esi+92], 0
	jne	SHORT $L86561
; Line 2759
	push	0
	mov	edx, DWORD PTR _monster[esi+36]
	push	DWORD PTR _monster[esi+120]
	mov	ecx, DWORD PTR _monster[esi+32]
	movzx	eax, BYTE PTR _monster[esi+81]
	push	ebx
	push	1
	push	DWORD PTR _monster[esi+112]
	push	DWORD PTR _monster[esi+72]
	push	eax
	movzx	eax, BYTE PTR _monster[esi+80]
	push	eax
	call	@AddMissile@40
; Line 2760
	mov	ecx, ebx
	push	3
	pop	edx
	call	@PlayEffect@8
$L86561:
; Line 2763
	cmp	BYTE PTR _monster[esi+152], 26		; 0000001aH
	jne	SHORT $L86566
	cmp	DWORD PTR _monster[esi+100], 3
	jne	SHORT $L86566
; Line 2764
	lea	eax, DWORD PTR _monster[esi+116]
	mov	ecx, DWORD PTR [eax]
; Line 2766
	test	ecx, ecx
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], edx
	jne	SHORT $L86564
; Line 2767
	or	DWORD PTR _monster[esi+156], 4
; Line 2768
	jmp	SHORT $L86566
$L86564:
	cmp	edx, 15					; 0000000fH
	jne	SHORT $L86566
; Line 2769
	and	DWORD PTR _monster[esi+156], -5		; fffffffbH
$L86566:
; Line 2773
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	SHORT $L86567
; Line 2774
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, ebx
	call	@M_StartStand@8
; Line 2775
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86551
$L86567:
; Line 2778
	xor	eax, eax
$L86551:
	pop	esi
	pop	ebx
; Line 2779
	ret	0
@M_DoRSpAttack@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoSAttack@4
PUBLIC	??_C@_0CA@IEAK@M_DoSAttack?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CI@GKEA@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
PUBLIC	??_C@_0CI@GBIJ@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@ ; `string'
;	COMDAT ??_C@_0CA@IEAK@M_DoSAttack?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@IEAK@M_DoSAttack?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoSAttac'
	DB	'k: Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@GKEA@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT
??_C@_0CI@GKEA@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ DB 'M_D'
	DB	'oSAttack: Monster %d "%s" MType NULL', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@GBIJ@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@
_DATA	SEGMENT
??_C@_0CI@GBIJ@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@ DB 'M_D'
	DB	'oSAttack: Monster %d "%s" MData NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoSAttack@4
_TEXT	SEGMENT
@M_DoSAttack@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 2782
	push	ebx
	mov	ebx, ecx
; Line 2783
	cmp	ebx, 200				; 000000c8H
	push	esi
	jb	SHORT $L86572
; Line 2784
	push	ebx
	push	OFFSET FLAT:??_C@_0CA@IEAK@M_DoSAttack?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86572:
; Line 2785
	mov	esi, ebx
	push	edi
	imul	esi, 228				; 000000e4H
	lea	edi, DWORD PTR _monster[esi+220]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L89831
; Line 2786
	push	DWORD PTR _monster[esi+216]
	push	ebx
	push	OFFSET FLAT:??_C@_0CI@GKEA@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
; Line 2787
	cmp	DWORD PTR [edi], 0
$L89831:
	pop	edi
	jne	SHORT $L86578
; Line 2788
	push	DWORD PTR _monster[esi+216]
	push	ebx
	push	OFFSET FLAT:??_C@_0CI@GBIJ@M_DoSAttack?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MDa@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86578:
; Line 2790
	mov	eax, DWORD PTR _monster[esi+224]
	movzx	eax, BYTE PTR [eax+110]
	cmp	DWORD PTR _monster[esi+100], eax
	jne	SHORT $L86580
; Line 2791
	movzx	eax, BYTE PTR _monster[esi+201]
	push	eax
	mov	edx, DWORD PTR _monster[esi+76]
	movzx	eax, BYTE PTR _monster[esi+200]
	push	eax
	mov	ecx, ebx
	movzx	eax, BYTE PTR _monster[esi+199]
	push	eax
	call	@M_TryH2HHit@20
$L86580:
; Line 2793
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	SHORT $L86581
; Line 2794
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, ebx
	call	@M_StartStand@8
; Line 2795
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86570
$L86581:
; Line 2798
	xor	eax, eax
$L86570:
	pop	esi
	pop	ebx
; Line 2799
	ret	0
@M_DoSAttack@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoFadein@4
PUBLIC	??_C@_0BP@LCOO@M_DoFadein?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BP@LCOO@M_DoFadein?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@LCOO@M_DoFadein?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoFadein:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoFadein@4
_TEXT	SEGMENT
@M_DoFadein@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2802
	push	esi
	push	edi
	mov	edi, ecx
; Line 2803
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86586
; Line 2804
	push	edi
	push	OFFSET FLAT:??_C@_0BP@LCOO@M_DoFadein?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86586:
; Line 2807
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	mov	eax, DWORD PTR _monster[esi+156]
	and	eax, 2
	je	SHORT $L86589
	cmp	DWORD PTR _monster[esi+100], 1
	je	SHORT $L86588
$L86589:
	test	eax, eax
	jne	SHORT $L86590
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	SHORT $L86590
$L86588:
; Line 2811
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, edi
	call	@M_StartStand@8
; Line 2812
	and	DWORD PTR _monster[esi+156], -3		; fffffffdH
; Line 2814
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86584
$L86590:
; Line 2808
	xor	eax, eax
$L86584:
	pop	edi
	pop	esi
; Line 2815
	ret	0
@M_DoFadein@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoFadeout@4
PUBLIC	??_C@_0CA@ODA@M_DoFadeout?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@ODA@M_DoFadeout?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@ODA@M_DoFadeout?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoFadeout'
	DB	': Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoFadeout@4
_TEXT	SEGMENT
@M_DoFadeout@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 2818
	push	esi
	mov	esi, ecx
; Line 2821
	cmp	esi, 200				; 000000c8H
	jb	SHORT $L86596
; Line 2822
	push	esi
	push	OFFSET FLAT:??_C@_0CA@ODA@M_DoFadeout?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86596:
; Line 2825
	mov	eax, esi
	imul	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR _monster[eax+156]
	mov	edx, ecx
	and	edx, 2
	je	SHORT $L86599
	cmp	DWORD PTR _monster[eax+100], 1
	je	SHORT $L86598
$L86599:
	test	edx, edx
	jne	SHORT $L86600
	mov	edx, DWORD PTR _monster[eax+100]
	cmp	edx, DWORD PTR _monster[eax+96]
	jne	SHORT $L86600
$L86598:
; Line 2829
	mov	edx, DWORD PTR _monster[eax+220]
	movzx	edx, BYTE PTR [edx]
; Line 2830
	cmp	edx, 72					; 00000048H
	jl	SHORT $L86602
	cmp	edx, 75					; 0000004bH
	jg	SHORT $L86602
; Line 2834
	and	ecx, -3					; fffffffdH
	jmp	SHORT $L89838
$L86602:
; Line 2831
	and	ecx, -3					; fffffffdH
; Line 2832
	or	ecx, 1
$L89838:
; Line 2837
	mov	edx, DWORD PTR _monster[eax+72]
	mov	DWORD PTR _monster[eax+156], ecx
	mov	ecx, esi
	call	@M_StartStand@8
; Line 2839
	xor	eax, eax
	inc	eax
	pop	esi
; Line 2840
	ret	0
$L86600:
; Line 2826
	xor	eax, eax
	pop	esi
; Line 2840
	ret	0
@M_DoFadeout@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoHeal@4
PUBLIC	??_C@_0BN@CGGK@M_DoHeal?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BN@CGGK@M_DoHeal?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@CGGK@M_DoHeal?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoHeal: Inv'
	DB	'alid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoHeal@4
_TEXT	SEGMENT
@M_DoHeal@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2843
	push	esi
	mov	esi, ecx
; Line 2854
	cmp	esi, 200				; 000000c8H
	jb	SHORT $L86616
; Line 2855
	push	esi
	push	OFFSET FLAT:??_C@_0BN@CGGK@M_DoHeal?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86616:
; Line 2857
	mov	eax, esi
	imul	eax, 228				; 000000e4H
	test	BYTE PTR _monster[eax+156], 8
	je	SHORT $L86618
; Line 2858
	and	DWORD PTR _monster[eax+156], -5		; fffffffbH
$L89842:
; Line 2859
	mov	DWORD PTR _monster[eax+4], 7
; Line 2860
	jmp	SHORT $L86622
$L86618:
	cmp	DWORD PTR _monster[eax+100], 1
	jne	SHORT $L86622
; Line 2863
	mov	ecx, DWORD PTR _monster[eax+156]
; Line 2866
	mov	edx, DWORD PTR _monster[eax+112]
	add	edx, DWORD PTR _monster[eax+148]
; Line 2867
	mov	esi, DWORD PTR _monster[eax+144]
	and	ecx, -3					; fffffffdH
	or	ecx, 4
; Line 2868
	cmp	edx, esi
	mov	DWORD PTR _monster[eax+156], ecx
	jl	SHORT $L86621
; Line 2870
	and	ecx, -5					; fffffffbH
	mov	DWORD PTR _monster[eax+148], esi
	mov	DWORD PTR _monster[eax+156], ecx
; Line 2872
	jmp	SHORT $L89842
$L86621:
; Line 2873
	mov	DWORD PTR _monster[eax+148], edx
$L86622:
; Line 2876
	xor	eax, eax
	pop	esi
; Line 2877
	ret	0
@M_DoHeal@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoTalk@4
PUBLIC	??_C@_0BN@MODE@M_DoTalk?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JLPK@SS?5Talk?5?$DN?5?$CFi?0?5Flags?5?$DN?5?$CFi?$AA@ ; `string'
EXTRN	_setpc_h:DWORD
EXTRN	_setpc_w:DWORD
EXTRN	@DRLG_MRectTrans@16:NEAR
EXTRN	@ObjChangeMap@16:NEAR
EXTRN	_alltext:BYTE
EXTRN	@effect_is_playing@4:NEAR
EXTRN	@InitQTextMsg@4:NEAR
EXTRN	@SpawnUnique@12:NEAR
EXTRN	_tempstr:BYTE
EXTRN	_TransVal:BYTE
;	COMDAT ??_C@_0BN@MODE@M_DoTalk?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@MODE@M_DoTalk?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoTalk: Inv'
	DB	'alid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JLPK@SS?5Talk?5?$DN?5?$CFi?0?5Flags?5?$DN?5?$CFi?$AA@
_DATA	SEGMENT
??_C@_0BJ@JLPK@SS?5Talk?5?$DN?5?$CFi?0?5Flags?5?$DN?5?$CFi?$AA@ DB 'SS Ta'
	DB	'lk = %i, Flags = %i', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoTalk@4
_TEXT	SEGMENT
@M_DoTalk@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2880
	push	esi
	push	edi
	mov	edi, ecx
; Line 2892
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86635
; Line 2893
	push	edi
	push	OFFSET FLAT:??_C@_0BN@MODE@M_DoTalk?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86635:
; Line 2895
	mov	esi, edi
	mov	ecx, edi
	imul	esi, 228				; 000000e4H
	mov	edx, DWORD PTR _monster[esi+72]
	call	@M_StartStand@8
; Line 2898
	mov	eax, DWORD PTR _monster[esi+208]
	mov	BYTE PTR _monster[esi+8], 7
	shl	eax, 4
	mov	ecx, DWORD PTR _alltext[eax+12]
	call	@effect_is_playing@4
	test	eax, eax
	jne	$L86652
; Line 2899
	mov	ecx, DWORD PTR _monster[esi+208]
	push	ebp
	call	@InitQTextMsg@4
; Line 2900
	mov	eax, DWORD PTR _monster[esi+216]
	cmp	eax, DWORD PTR _UniqMonst+4
	jne	SHORT $L89848
; Line 2901
	mov	eax, DWORD PTR _monster[esi+208]
; Line 2902
	cmp	eax, 144				; 00000090H
	jne	SHORT $L86640
; Line 2903
	mov	BYTE PTR _quests+50, 2
$L86640:
; Line 2904
	xor	ebp, ebp
	inc	ebp
; Line 2905
	cmp	eax, 145				; 00000091H
	mov	DWORD PTR _quests+68, ebp
	jne	SHORT $L86641
	test	BYTE PTR _monster[esi+156], 64		; 00000040H
	jne	SHORT $L86641
; Line 2906
	mov	eax, DWORD PTR _monster[esi+36]
	mov	edx, DWORD PTR _monster[esi+32]
	inc	eax
	push	ebp
	push	eax
	inc	edx
	mov	ecx, edi
	call	@SpawnItem@16
; Line 2907
	or	DWORD PTR _monster[esi+156], 64		; 00000040H
	jmp	SHORT $L86641
$L89848:
	xor	ebp, ebp
	inc	ebp
$L86641:
; Line 2912
	mov	eax, DWORD PTR _monster[esi+216]
	cmp	eax, DWORD PTR _UniqMonst+68
	jne	SHORT $L86642
	cmp	DWORD PTR _monster[esi+208], 148	; 00000094H
	jne	SHORT $L86642
	test	BYTE PTR _monster[esi+156], 64		; 00000040H
	jne	SHORT $L86642
; Line 2913
	mov	edx, DWORD PTR _monster[esi+36]
; Line 2914
	mov	ecx, DWORD PTR _monster[esi+32]
; Line 2917
	xor	eax, eax
	inc	edx
	push	eax
	push	ebp
	push	24					; 00000018H
	push	eax
	push	eax
	inc	ecx
	mov	BYTE PTR _quests+74, 2
	mov	DWORD PTR _quests+92, ebp
	call	@CreateTypeItem@28
; Line 2918
	or	DWORD PTR _monster[esi+156], 64		; 00000040H
$L86642:
; Line 2920
	mov	eax, DWORD PTR _monster[esi+216]
	cmp	eax, DWORD PTR _UniqMonst+100
	jne	$L86646
; Line 2921
	cmp	DWORD PTR _monster[esi+208], 20		; 00000014H
	jne	$L86644
	test	BYTE PTR _monster[esi+156], 64		; 00000040H
	jne	$L86644
; Line 2922
	mov	eax, DWORD PTR _setpc_h
	mov	edx, DWORD PTR _setpc_y
	sar	eax, 1
	mov	ecx, DWORD PTR _setpc_x
	push	ebx
	lea	eax, DWORD PTR [eax+edx-2]
	push	eax
	mov	eax, DWORD PTR _setpc_w
	sar	eax, 1
	lea	eax, DWORD PTR [eax+ecx+2]
	push	eax
	call	@ObjChangeMap@16
; Line 2925
	mov	eax, DWORD PTR _setpc_h
	mov	edx, DWORD PTR _setpc_y
	mov	ecx, DWORD PTR _setpc_x
	mov	bl, BYTE PTR _TransVal
	sar	eax, 1
	add	eax, edx
	mov	BYTE PTR _TransVal, 9
	push	eax
	mov	eax, DWORD PTR _setpc_w
	sar	eax, 1
	lea	eax, DWORD PTR [eax+ecx+4]
	push	eax
	call	@DRLG_MRectTrans@16
; Line 2928
	cmp	BYTE PTR _quests+170, 1
	mov	BYTE PTR _TransVal, bl
	mov	BYTE PTR _quests+183, 2
	pop	ebx
	jne	SHORT $L86645
; Line 2929
	mov	BYTE PTR _quests+170, 2
$L86645:
; Line 2930
	or	DWORD PTR _monster[esi+156], 64		; 00000040H
$L86644:
; Line 2932
	cmp	BYTE PTR _quests+183, 2
	jae	SHORT $L86646
; Line 2933
	push	DWORD PTR _monster[esi+156]
	mov	edi, OFFSET FLAT:_tempstr
	push	DWORD PTR _monster[esi+208]
	push	OFFSET FLAT:??_C@_0BJ@JLPK@SS?5Talk?5?$DN?5?$CFi?0?5Flags?5?$DN?5?$CFi?$AA@ ; `string'
	push	edi
	call	_sprintf
; Line 2934
	push	edi
	call	_TermMsg
	add	esp, 20					; 00000014H
$L86646:
; Line 2937
	mov	eax, DWORD PTR _monster[esi+216]
	cmp	eax, DWORD PTR _UniqMonst+228
	jne	SHORT $L86650
; Line 2938
	mov	eax, DWORD PTR _monster[esi+208]
; Line 2939
	cmp	eax, 81					; 00000051H
	jne	SHORT $L86649
; Line 2940
	mov	BYTE PTR _quests+98, 2
; Line 2941
	mov	DWORD PTR _quests+116, ebp
$L86649:
; Line 2943
	cmp	eax, 83					; 00000053H
	jne	SHORT $L86650
	test	BYTE PTR _monster[esi+156], 64		; 00000040H
	jne	SHORT $L86650
; Line 2944
	mov	eax, DWORD PTR _monster[esi+36]
	mov	edx, DWORD PTR _monster[esi+32]
	inc	eax
	inc	edx
	push	eax
	push	6
	pop	ecx
	call	@SpawnUnique@12
; Line 2945
	or	DWORD PTR _monster[esi+156], 64		; 00000040H
$L86650:
; Line 2948
	mov	eax, DWORD PTR _monster[esi+216]
	pop	ebp
; Line 2949
	cmp	eax, DWORD PTR _UniqMonst+260
	jne	SHORT $L86651
; Line 2950
	mov	BYTE PTR _quests+279, 2
$L86651:
; Line 2951
	cmp	eax, DWORD PTR _UniqMonst+132
	jne	SHORT $L86652
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L86652
; Line 2952
	or	BYTE PTR _monster[esi+160], -1
; Line 2953
	and	DWORD PTR _monster[esi+208], 0
; Line 2954
	mov	BYTE PTR _quests+375, 6
; Line 2955
	mov	BYTE PTR _monster[esi+8], 1
$L86652:
	pop	edi
; Line 2958
	xor	eax, eax
	pop	esi
; Line 2959
	ret	0
@M_DoTalk@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@KLMH@M_Teleport?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	@PosOkMonst@12
;	COMDAT ??_C@_0BP@KLMH@M_Teleport?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@KLMH@M_Teleport?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_Teleport:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_Teleport@4
_TEXT	SEGMENT
_i$ = -16
_tren$ = -12
_k$ = -8
_j$ = -4
_x$ = -36
_y$ = -36
__mx$ = -32
__my$ = -24
_rx$ = -28
_ry$ = -20
@M_Teleport@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2967
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	mov	ebx, ecx
	push	esi
; Line 2972
	cmp	ebx, 200				; 000000c8H
	push	edi
	mov	DWORD PTR _i$[ebp], ebx
	jb	SHORT $L86668
; Line 2973
	push	ebx
	push	OFFSET FLAT:??_C@_0BP@KLMH@M_Teleport?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86668:
; Line 2977
	mov	esi, ebx
	and	DWORD PTR _tren$[ebp], 0
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 2978
	cmp	DWORD PTR [esi+4], 15			; 0000000fH
	je	$L86681
; Line 2979
	movzx	eax, BYTE PTR [esi+80]
	mov	DWORD PTR __mx$[ebp], eax
; Line 2981
	push	2
	movzx	eax, BYTE PTR [esi+81]
	pop	edx
	mov	cl, 100					; 00000064H
	mov	DWORD PTR __my$[ebp], eax
	call	@random@8
	lea	eax, DWORD PTR [eax+eax-1]
; Line 2982
	mov	cl, 100					; 00000064H
	push	2
	mov	DWORD PTR _rx$[ebp], eax
	pop	edx
	call	@random@8
; Line 2984
	or	DWORD PTR _j$[ebp], -1
	mov	edi, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [eax+eax-1]
	mov	DWORD PTR _ry$[ebp], eax
	jmp	SHORT $L86671
$L89858:
	mov	ebx, DWORD PTR _i$[ebp]
$L86671:
	cmp	DWORD PTR _tren$[ebp], 0
	jne	SHORT $L89857
; Line 2985
	mov	ebx, DWORD PTR __my$[ebp]
	or	DWORD PTR _k$[ebp], -1
	sub	ebx, DWORD PTR _ry$[ebp]
$L86674:
	xor	eax, eax
	cmp	DWORD PTR _tren$[ebp], eax
	jne	SHORT $L86672
; Line 2986
	cmp	DWORD PTR _j$[ebp], eax
	jne	SHORT $L86678
	cmp	DWORD PTR _k$[ebp], eax
	je	SHORT $L86675
$L86678:
; Line 2987
	mov	edi, DWORD PTR _j$[ebp]
; Line 2988
	mov	DWORD PTR _y$[ebp], ebx
	imul	edi, DWORD PTR _rx$[ebp]
	add	edi, DWORD PTR __mx$[ebp]
; Line 2989
	cmp	ebx, eax
	jl	SHORT $L86675
	cmp	ebx, 112				; 00000070H
	jge	SHORT $L86675
	cmp	edi, eax
	jl	SHORT $L86675
	cmp	edi, 112				; 00000070H
	jge	SHORT $L86675
	cmp	edi, DWORD PTR [esi+32]
	je	SHORT $L86675
	cmp	ebx, DWORD PTR [esi+36]
	je	SHORT $L86675
; Line 2990
	mov	ecx, DWORD PTR _i$[ebp]
	push	ebx
	mov	edx, edi
	call	@PosOkMonst@12
	test	eax, eax
	je	SHORT $L86675
; Line 2991
	mov	DWORD PTR _tren$[ebp], 1
$L86675:
; Line 2985
	inc	DWORD PTR _k$[ebp]
	add	ebx, DWORD PTR _ry$[ebp]
	cmp	DWORD PTR _k$[ebp], 1
	jl	SHORT $L86674
$L86672:
; Line 2984
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], 1
	jle	SHORT $L89858
; Line 2998
	cmp	DWORD PTR _tren$[ebp], 0
	je	SHORT $L86681
	mov	ebx, DWORD PTR _i$[ebp]
$L89857:
; Line 2999
	mov	ecx, ebx
	call	@M_ClearSquares@4
; Line 3000
	mov	eax, DWORD PTR [esi+32]
; Line 3001
	mov	edx, edi
	imul	eax, 112				; 00000070H
	imul	edx, 112				; 00000070H
	add	eax, DWORD PTR [esi+36]
	lea	ecx, DWORD PTR [ebx+1]
; Line 3002
	mov	DWORD PTR [esi+48], edi
	and	DWORD PTR _dMonster[eax*4], 0
	mov	eax, DWORD PTR _y$[ebp]
	add	edx, eax
; Line 3003
	mov	DWORD PTR [esi+52], eax
	mov	DWORD PTR _dMonster[edx*4], ecx
; Line 3004
	mov	ecx, ebx
	call	@M_GetDir@4
; Line 3005
	mov	ecx, ebx
	mov	DWORD PTR [esi+72], eax
	call	@M_CheckEFlag@4
$L86681:
	pop	edi
	pop	esi
	pop	ebx
; Line 3007
	leave
	ret	0
@M_Teleport@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoGotHit@4
PUBLIC	??_C@_0BP@LNOF@M_DoGotHit?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CH@INE@M_DoGotHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@ ; `string'
;	COMDAT ??_C@_0BP@LNOF@M_DoGotHit?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@LNOF@M_DoGotHit?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoGotHit:'
	DB	' Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CH@INE@M_DoGotHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@
_DATA	SEGMENT
??_C@_0CH@INE@M_DoGotHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@ DB 'M_Do'
	DB	'GotHit: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoGotHit@4
_TEXT	SEGMENT
@M_DoGotHit@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3010
	push	esi
	push	edi
	mov	edi, ecx
; Line 3011
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86686
; Line 3012
	push	edi
	push	OFFSET FLAT:??_C@_0BP@LNOF@M_DoGotHit?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86686:
; Line 3014
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], 0
	jne	SHORT $L86689
; Line 3015
	push	DWORD PTR _monster[esi+216]
	push	edi
	push	OFFSET FLAT:??_C@_0CH@INE@M_DoGotHit?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTyp@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86689:
; Line 3016
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	SHORT $L86691
; Line 3017
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, edi
	call	@M_StartStand@8
; Line 3019
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86684
$L86691:
; Line 3022
	xor	eax, eax
$L86684:
	pop	edi
	pop	esi
; Line 3023
	ret	0
@M_DoGotHit@4 ENDP
_TEXT	ENDS
PUBLIC	@M_UpdateLeader@4
PUBLIC	??_C@_0CD@OA@M_UpdateLeader?3?5Invalid?5monster?5@ ; `string'
;	COMDAT ??_C@_0CD@OA@M_UpdateLeader?3?5Invalid?5monster?5@
_DATA	SEGMENT
??_C@_0CD@OA@M_UpdateLeader?3?5Invalid?5monster?5@ DB 'M_UpdateLeader: In'
	DB	'valid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_UpdateLeader@4
_TEXT	SEGMENT
@M_UpdateLeader@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 3026
	push	esi
	push	edi
	mov	edi, ecx
; Line 3029
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86698
; Line 3030
	push	edi
	push	OFFSET FLAT:??_C@_0CD@OA@M_UpdateLeader?3?5Invalid?5monster?5@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86698:
; Line 3032
	mov	esi, DWORD PTR _nummonsters
	xor	edx, edx
	test	esi, esi
	jle	SHORT $L86702
$L86700:
; Line 3033
	mov	eax, DWORD PTR _monstactive[edx*4]
; Line 3034
	imul	eax, 228				; 000000e4H
	lea	ecx, DWORD PTR _monster[eax+213]
	cmp	BYTE PTR [ecx], 1
	jne	SHORT $L86701
	movzx	eax, BYTE PTR _monster[eax+212]
	cmp	eax, edi
	jne	SHORT $L86701
; Line 3035
	and	BYTE PTR [ecx], 0
$L86701:
; Line 3032
	inc	edx
	cmp	edx, esi
	jl	SHORT $L86700
$L86702:
; Line 3038
	mov	eax, edi
	pop	edi
	imul	eax, 228				; 000000e4H
	pop	esi
	cmp	BYTE PTR _monster[eax+213], 1
	jne	SHORT $L86704
; Line 3039
	movzx	eax, BYTE PTR _monster[eax+212]
	imul	eax, 228				; 000000e4H
	lea	eax, DWORD PTR _monster[eax+214]
	dec	BYTE PTR [eax]
$L86704:
; Line 3041
	ret	0
@M_UpdateLeader@4 ENDP
_TEXT	ENDS
PUBLIC	_DoEnding
PUBLIC	??_C@_0BF@DCOL@gendata?2DiabVic2?4smk?$AA@	; `string'
PUBLIC	??_C@_0BF@NCIE@gendata?2DiabVic1?4smk?$AA@	; `string'
PUBLIC	??_C@_0BF@JCMO@gendata?2DiabVic3?4smk?$AA@	; `string'
PUBLIC	??_C@_0BE@JJDA@gendata?2Diabend?4smk?$AA@	; `string'
PUBLIC	??_C@_0BF@BNCB@gendata?2loopdend?4smk?$AA@	; `string'
EXTRN	_SNetLeaveGame@4:NEAR
EXTRN	__imp__Sleep@4:NEAR
EXTRN	_loop_movie:DWORD
EXTRN	@play_movie@8:NEAR
EXTRN	_music_stop:NEAR
EXTRN	@music_start@4:NEAR
EXTRN	@sound_get_or_set_music_volume@4:NEAR
EXTRN	_gbMusicOn:BYTE
;	COMDAT ??_C@_0BF@DCOL@gendata?2DiabVic2?4smk?$AA@
_DATA	SEGMENT
??_C@_0BF@DCOL@gendata?2DiabVic2?4smk?$AA@ DB 'gendata\DiabVic2.smk', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NCIE@gendata?2DiabVic1?4smk?$AA@
_DATA	SEGMENT
??_C@_0BF@NCIE@gendata?2DiabVic1?4smk?$AA@ DB 'gendata\DiabVic1.smk', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JCMO@gendata?2DiabVic3?4smk?$AA@
_DATA	SEGMENT
??_C@_0BF@JCMO@gendata?2DiabVic3?4smk?$AA@ DB 'gendata\DiabVic3.smk', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@JJDA@gendata?2Diabend?4smk?$AA@
_DATA	SEGMENT
??_C@_0BE@JJDA@gendata?2Diabend?4smk?$AA@ DB 'gendata\Diabend.smk', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BNCB@gendata?2loopdend?4smk?$AA@
_DATA	SEGMENT
??_C@_0BF@BNCB@gendata?2loopdend?4smk?$AA@ DB 'gendata\loopdend.smk', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DoEnding
_TEXT	SEGMENT
_DoEnding PROC NEAR					; COMDAT
; Line 3048
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L86708
; Line 3049
	push	1073741828				; 40000004H
	call	_SNetLeaveGame@4
$L86708:
; Line 3052
	call	_music_stop
; Line 3054
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L86709
; Line 3055
	push	1000					; 000003e8H
	call	DWORD PTR __imp__Sleep@4
$L86709:
; Line 3058
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L86710
; Line 3059
	mov	ecx, OFFSET FLAT:??_C@_0BF@DCOL@gendata?2DiabVic2?4smk?$AA@ ; `string'
; Line 3060
	jmp	SHORT $L89872
$L86710:
	cmp	al, 2
; Line 3061
	mov	ecx, OFFSET FLAT:??_C@_0BF@NCIE@gendata?2DiabVic1?4smk?$AA@ ; `string'
	je	SHORT $L89872
; Line 3063
	mov	ecx, OFFSET FLAT:??_C@_0BF@JCMO@gendata?2DiabVic3?4smk?$AA@ ; `string'
$L89872:
	xor	edx, edx
	call	@play_movie@8
	push	ebx
	push	esi
; Line 3065
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BE@JJDA@gendata?2Diabend?4smk?$AA@ ; `string'
	call	@play_movie@8
; Line 3067
	movzx	ebx, BYTE PTR _gbMusicOn
; Line 3070
	xor	ecx, ecx
	mov	BYTE PTR _gbMusicOn, 1
	inc	ecx
	call	@sound_get_or_set_music_volume@4
; Line 3071
	xor	ecx, ecx
	mov	esi, eax
	call	@sound_get_or_set_music_volume@4
; Line 3073
	push	2
	pop	ecx
	call	@music_start@4
; Line 3075
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@BNCB@gendata?2loopdend?4smk?$AA@ ; `string'
	inc	edx
	mov	DWORD PTR _loop_movie, 1
	call	@play_movie@8
; Line 3076
	and	DWORD PTR _loop_movie, 0
; Line 3077
	call	_music_stop
; Line 3079
	mov	ecx, esi
	call	@sound_get_or_set_music_volume@4
; Line 3080
	mov	BYTE PTR _gbMusicOn, bl
	pop	esi
	pop	ebx
; Line 3081
	ret	0
_DoEnding ENDP
_TEXT	ENDS
PUBLIC	_PrepDoEnding
EXTRN	_gbRunGame:DWORD
EXTRN	_cineflag:BYTE
EXTRN	_deathflag:DWORD
; Function compile flags: /Ogsy
;	COMDAT _PrepDoEnding
_TEXT	SEGMENT
_PrepDoEnding PROC NEAR					; COMDAT
; Line 3089
	mov	al, BYTE PTR _sgbSaveSoundOn
; Line 3095
	mov	ecx, DWORD PTR _gnDifficulty
	mov	BYTE PTR _gbSoundOn, al
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	and	DWORD PTR _gbRunGame, 0
	and	DWORD PTR _deathflag, 0
	lea	eax, DWORD PTR _plr[eax+21648]
	inc	ecx
	mov	BYTE PTR _cineflag, 1
; Line 3096
	mov	edx, DWORD PTR [eax]
	cmp	edx, ecx
	jbe	SHORT $L86723
; Line 3097
	mov	ecx, edx
$L86723:
; Line 3098
	push	64					; 00000040H
	mov	DWORD PTR [eax], ecx
	mov	eax, OFFSET FLAT:_plr+408
	pop	ecx
$L86724:
; Line 3103
	cmp	BYTE PTR _gbMaxPlayers, 1
	mov	DWORD PTR [eax-408], 11			; 0000000bH
	mov	BYTE PTR [eax-92], 1
	jbe	SHORT $L86725
; Line 3104
	test	DWORD PTR [eax], -64			; ffffffc0H
	jne	SHORT $L86728
; Line 3105
	mov	DWORD PTR [eax], ecx
$L86728:
; Line 3106
	test	DWORD PTR [eax+20], -64			; ffffffc0H
	jne	SHORT $L86725
; Line 3107
	mov	DWORD PTR [eax+20], ecx
$L86725:
; Line 3100
	add	eax, 21720				; 000054d8H
	cmp	eax, OFFSET FLAT:_plr+87288
	jl	SHORT $L86724
; Line 3110
	ret	0
_PrepDoEnding ENDP
_TEXT	ENDS
PUBLIC	@M_DoDeath@4
PUBLIC	??_C@_0BO@FLDI@M_DoDeath?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CG@MEGD@M_DoDeath?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
EXTRN	@AddDead@16:NEAR
;	COMDAT ??_C@_0BO@FLDI@M_DoDeath?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@FLDI@M_DoDeath?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoDeath: I'
	DB	'nvalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CG@MEGD@M_DoDeath?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT
??_C@_0CG@MEGD@M_DoDeath?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ DB 'M_D'
	DB	'oDeath: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoDeath@4
_TEXT	SEGMENT
@M_DoDeath@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3116
	push	esi
	push	edi
	mov	edi, ecx
; Line 3120
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86737
; Line 3121
	push	edi
	push	OFFSET FLAT:??_C@_0BO@FLDI@M_DoDeath?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86737:
; Line 3122
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], 0
	jne	SHORT $L86740
; Line 3123
	push	DWORD PTR _monster[esi+216]
	push	edi
	push	OFFSET FLAT:??_C@_0CG@MEGD@M_DoDeath?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86740:
; Line 3127
	mov	ecx, DWORD PTR _monster[esi+220]
	lea	eax, DWORD PTR _monster[esi+112]
	inc	DWORD PTR [eax]
	cmp	BYTE PTR [ecx], 110			; 0000006eH
	mov	eax, DWORD PTR [eax]
	jne	SHORT $L86742
; Line 3128
	mov	ecx, DWORD PTR _monster[esi+32]
	sub	ecx, DWORD PTR _ViewX
; Line 3129
	jns	SHORT $L86743
; Line 3130
	or	ecx, -1
; Line 3131
	jmp	SHORT $L86744
$L86743:
; Line 3132
	xor	edx, edx
	test	ecx, ecx
	setg	dl
	mov	ecx, edx
$L86744:
; Line 3135
	mov	esi, DWORD PTR _monster[esi+36]
	add	DWORD PTR _ViewX, ecx
	sub	esi, DWORD PTR _ViewY
; Line 3136
	jns	SHORT $L86745
; Line 3137
	or	ecx, -1
; Line 3138
	jmp	SHORT $L86746
$L86745:
; Line 3139
	xor	ecx, ecx
	test	esi, esi
	setg	cl
$L86746:
; Line 3141
	add	DWORD PTR _ViewY, ecx
; Line 3143
	cmp	eax, 140				; 0000008cH
	jne	SHORT $L86749
; Line 3144
	call	_PrepDoEnding
; Line 3145
	jmp	SHORT $L86749
$L86742:
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	SHORT $L86749
; Line 3146
	cmp	BYTE PTR _monster[esi+188], 0
; Line 3147
	mov	edx, DWORD PTR _monster[esi+36]
	push	DWORD PTR _monster[esi+72]
	jne	SHORT $L86750
	mov	al, BYTE PTR [ecx+317]
; Line 3148
	jmp	SHORT $L89881
$L86750:
; Line 3149
	mov	al, BYTE PTR _monster[esi+190]
$L89881:
	mov	ecx, DWORD PTR _monster[esi+32]
	push	eax
	call	@AddDead@16
; Line 3152
	mov	eax, DWORD PTR _monster[esi+32]
; Line 3154
	mov	ecx, edi
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _monster[esi+108], 1
	and	DWORD PTR _dMonster[eax*4], 0
	call	@M_UpdateLeader@4
$L86749:
	pop	edi
; Line 3156
	xor	eax, eax
	pop	esi
; Line 3157
	ret	0
@M_DoDeath@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoSpStand@4
PUBLIC	??_C@_0CA@BLEI@M_DoSpStand?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CI@LEAM@M_DoSpStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
;	COMDAT ??_C@_0CA@BLEI@M_DoSpStand?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@BLEI@M_DoSpStand?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoSpStan'
	DB	'd: Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@LEAM@M_DoSpStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@
_DATA	SEGMENT
??_C@_0CI@LEAM@M_DoSpStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ DB 'M_D'
	DB	'oSpStand: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoSpStand@4
_TEXT	SEGMENT
@M_DoSpStand@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 3160
	push	ebx
	mov	ebx, ecx
; Line 3161
	cmp	ebx, 200				; 000000c8H
	push	esi
	jb	SHORT $L86758
; Line 3162
	push	ebx
	push	OFFSET FLAT:??_C@_0CA@BLEI@M_DoSpStand?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86758:
; Line 3163
	mov	esi, ebx
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], 0
	jne	SHORT $L86761
; Line 3164
	push	DWORD PTR _monster[esi+216]
	push	ebx
	push	OFFSET FLAT:??_C@_0CI@LEAM@M_DoSpStand?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MTy@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86761:
; Line 3166
	mov	eax, DWORD PTR _monster[esi+224]
	push	edi
	lea	edi, DWORD PTR _monster[esi+100]
	movzx	eax, BYTE PTR [eax+110]
	cmp	DWORD PTR [edi], eax
	jne	SHORT $L86763
; Line 3167
	push	3
	mov	ecx, ebx
	pop	edx
	call	@PlayEffect@8
$L86763:
; Line 3169
	mov	eax, DWORD PTR [edi]
	pop	edi
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	SHORT $L86764
; Line 3170
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, ebx
	call	@M_StartStand@8
; Line 3171
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86756
$L86764:
; Line 3174
	xor	eax, eax
$L86756:
	pop	esi
	pop	ebx
; Line 3175
	ret	0
@M_DoSpStand@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoDelay@4
PUBLIC	??_C@_0BO@KEPF@M_DoDelay?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CG@JEG@M_DoDelay?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
;	COMDAT ??_C@_0BO@KEPF@M_DoDelay?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@KEPF@M_DoDelay?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoDelay: I'
	DB	'nvalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CG@JEG@M_DoDelay?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@
_DATA	SEGMENT
??_C@_0CG@JEG@M_DoDelay?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ DB 'M_Do'
	DB	'Delay: Monster %d "%s" MType NULL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoDelay@4
_TEXT	SEGMENT
@M_DoDelay@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3178
	push	ebp
	mov	ebp, ecx
; Line 3182
	cmp	ebp, 200				; 000000c8H
	push	esi
	jb	SHORT $L86771
; Line 3183
	push	ebp
	push	OFFSET FLAT:??_C@_0BO@KEPF@M_DoDelay?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86771:
; Line 3184
	mov	esi, ebp
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+220], 0
	jne	SHORT $L86774
; Line 3185
	push	DWORD PTR _monster[esi+216]
	push	ebp
	push	OFFSET FLAT:??_C@_0CG@JEG@M_DoDelay?3?5Monster?5?$CFd?5?$CC?$CFs?$CC?5MType@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L86774:
; Line 3187
	mov	ecx, ebp
	call	@M_GetDir@4
	mov	ecx, DWORD PTR _monster[esi+220]
; Line 3188
	cmp	BYTE PTR _monster[esi+152], 28		; 0000001cH
	mov	eax, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR _monster[esi+84], eax
	jne	SHORT $L86777
; Line 3189
	lea	eax, DWORD PTR _monster[esi+116]
	push	8
	pop	edx
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, edx
	jg	SHORT $L86778
	test	ecx, ecx
	jge	SHORT $L86777
$L86778:
; Line 3190
	mov	DWORD PTR [eax], edx
$L86777:
; Line 3193
	lea	eax, DWORD PTR _monster[esi+116]
	mov	ecx, DWORD PTR [eax]
; Line 3196
	test	ecx, ecx
	lea	edx, DWORD PTR [ecx-1]
	mov	DWORD PTR [eax], edx
	jne	SHORT $L86779
; Line 3198
	mov	edx, DWORD PTR _monster[esi+72]
	push	ebx
	push	edi
	lea	edi, DWORD PTR _monster[esi+100]
	mov	ecx, ebp
	mov	ebx, DWORD PTR [edi]
	call	@M_StartStand@8
; Line 3199
	mov	DWORD PTR [edi], ebx
; Line 3200
	xor	eax, eax
	pop	edi
	inc	eax
	pop	ebx
	jmp	SHORT $L86767
$L86779:
; Line 3203
	xor	eax, eax
$L86767:
	pop	esi
	pop	ebp
; Line 3204
	ret	0
@M_DoDelay@4 ENDP
_TEXT	ENDS
PUBLIC	@M_DoStone@4
PUBLIC	??_C@_0BO@FKMK@M_DoStone?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BO@FKMK@M_DoStone?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@FKMK@M_DoStone?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_DoStone: I'
	DB	'nvalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_DoStone@4
_TEXT	SEGMENT
@M_DoStone@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3207
	push	esi
	mov	esi, ecx
; Line 3208
	cmp	esi, 200				; 000000c8H
	jb	SHORT $L86784
; Line 3209
	push	esi
	push	OFFSET FLAT:??_C@_0BO@FKMK@M_DoStone?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86784:
; Line 3211
	mov	eax, esi
	pop	esi
	imul	eax, 228				; 000000e4H
	cmp	DWORD PTR _monster[eax+148], 0
	jne	SHORT $L86786
; Line 3212
	mov	ecx, DWORD PTR _monster[eax+32]
; Line 3213
	mov	DWORD PTR _monster[eax+108], 1
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _monster[eax+36]
	and	DWORD PTR _dMonster[ecx*4], 0
$L86786:
; Line 3216
	xor	eax, eax
; Line 3217
	ret	0
@M_DoStone@4 ENDP
_TEXT	ENDS
PUBLIC	@M_WalkDir@8
PUBLIC	??_C@_0BO@LBJG@M_WalkDir?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BO@LBJG@M_WalkDir?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@LBJG@M_WalkDir?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_WalkDir: I'
	DB	'nvalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_WalkDir@8
_TEXT	SEGMENT
@M_WalkDir@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _md$ = edx
; Line 3220
	push	esi
	mov	esi, ecx
	push	edi
; Line 3223
	cmp	esi, 200				; 000000c8H
	mov	edi, edx
	jb	SHORT $L86794
; Line 3224
	push	esi
	push	OFFSET FLAT:??_C@_0BO@LBJG@M_WalkDir?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86794:
; Line 3226
	mov	eax, esi
	imul	eax, 228				; 000000e4H
	mov	eax, DWORD PTR _monster[eax+220]
	mov	eax, DWORD PTR [eax+84]
	dec	eax
; Line 3227
	cmp	edi, 7
	ja	$L86797
	jmp	DWORD PTR $L89900[edi*4]
$L86800:
; Line 3229
	lea	eax, DWORD PTR [eax+eax*2]
	push	4
	push	-1
	push	-1
	mov	eax, DWORD PTR _MWVel[eax*4+4]
	neg	eax
	push	eax
	xor	edx, edx
; Line 3230
	jmp	$L89894
$L86801:
; Line 3232
	lea	eax, DWORD PTR [eax+eax*2]
	push	5
	shl	eax, 2
	push	-1
	push	0
	mov	ecx, DWORD PTR _MWVel[eax]
	mov	edx, DWORD PTR _MWVel[eax+4]
	neg	ecx
; Line 3233
	jmp	$L89895
$L86802:
; Line 3235
	push	6
	push	0
	push	1
	push	-1
	lea	eax, DWORD PTR [eax+eax*2]
	push	1
	push	-16					; fffffff0H
	push	-32					; ffffffe0H
	mov	edx, DWORD PTR _MWVel[eax*4+8]
; Line 3236
	jmp	SHORT $L89898
$L86803:
; Line 3238
	lea	eax, DWORD PTR [eax+eax*2]
	push	7
	shl	eax, 2
	push	0
	push	1
	mov	edx, DWORD PTR _MWVel[eax+4]
	push	-16					; fffffff0H
	push	-32					; ffffffe0H
; Line 3239
	jmp	SHORT $L89899
$L86804:
; Line 3241
	push	0
	push	1
	push	1
	push	-32					; ffffffe0H
	lea	eax, DWORD PTR [eax+eax*2]
	push	0
	xor	edx, edx
	push	DWORD PTR _MWVel[eax*4+4]
; Line 3242
	jmp	SHORT $L89897
$L86805:
; Line 3244
	lea	eax, DWORD PTR [eax+eax*2]
	push	1
	shl	eax, 2
	push	1
	push	0
	mov	edx, DWORD PTR _MWVel[eax+4]
	push	-16					; fffffff0H
	push	32					; 00000020H
	neg	edx
$L89899:
	push	DWORD PTR _MWVel[eax]
$L89897:
	mov	ecx, esi
	call	@M_StartWalk2@32
; Line 3245
	jmp	SHORT $L86797
$L86806:
; Line 3247
	push	2
	push	1
	lea	eax, DWORD PTR [eax+eax*2]
	push	0
	push	1
	push	-1
	mov	edx, DWORD PTR _MWVel[eax*4+8]
	push	-16					; fffffff0H
	push	32					; 00000020H
	neg	edx
$L89898:
	push	0
	mov	ecx, esi
	call	@M_StartWalk3@40
; Line 3248
	jmp	SHORT $L86797
$L86807:
; Line 3250
	lea	eax, DWORD PTR [eax+eax*2]
	push	3
	shl	eax, 2
	push	0
	push	-1
	mov	ecx, DWORD PTR _MWVel[eax]
	mov	edx, DWORD PTR _MWVel[eax+4]
	neg	ecx
	neg	edx
$L89895:
	push	ecx
$L89894:
	mov	ecx, esi
	call	@M_StartWalk@24
$L86797:
	pop	edi
	pop	esi
; Line 3253
	ret	0
$L89900:
	DD	$L86804
	DD	$L86805
	DD	$L86806
	DD	$L86807
	DD	$L86800
	DD	$L86801
	DD	$L86802
	DD	$L86803
@M_WalkDir@8 ENDP
_TEXT	ENDS
PUBLIC	@GroupUnity@4
PUBLIC	@CheckNoSolid@8
PUBLIC	@LineClearF@20
PUBLIC	??_C@_0BP@FFLL@GroupUnity?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BP@FFLL@GroupUnity?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@FFLL@GroupUnity?3?5Invalid?5monster?5?$CFd?$AA@ DB 'GroupUnity:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @GroupUnity@4
_TEXT	SEGMENT
_i$ = -4
@GroupUnity@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3256
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 3269
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L86822
; Line 3270
	push	esi
	push	OFFSET FLAT:??_C@_0BP@FFLL@GroupUnity?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86822:
; Line 3272
	imul	esi, 228				; 000000e4H
	cmp	BYTE PTR _monster[esi+213], 0
	je	$L86824
; Line 3273
	movzx	ebx, BYTE PTR _monster[esi+212]
; Line 3280
	mov	edi, ebx
	mov	edx, DWORD PTR _monster[esi+32]
	imul	edi, 228				; 000000e4H
	mov	ecx, OFFSET FLAT:@CheckNoSolid@8
	push	DWORD PTR _monster[edi+44]
	push	DWORD PTR _monster[edi+40]
	push	DWORD PTR _monster[esi+36]
	call	@LineClearF@20
; Line 3281
	test	al, al
	je	SHORT $L86826
; Line 3284
	cmp	BYTE PTR _monster[esi+213], 2
	jne	SHORT $L86831
	mov	eax, DWORD PTR _monster[esi+32]
	sub	eax, DWORD PTR _monster[edi+40]
	push	eax
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	SHORT $L86831
	mov	eax, DWORD PTR _monster[esi+36]
	sub	eax, DWORD PTR _monster[edi+44]
	push	eax
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	SHORT $L86831
; Line 3285
	inc	BYTE PTR _monster[edi+214]
; Line 3286
	mov	BYTE PTR _monster[esi+213], 1
; Line 3288
	jmp	SHORT $L86831
$L86826:
; Line 3289
	cmp	BYTE PTR _monster[esi+213], 1
	jne	$LABEL_18$86830
; Line 3291
	dec	BYTE PTR _monster[edi+214]
; Line 3292
	mov	BYTE PTR _monster[esi+213], 2
; Line 3294
	jmp	SHORT $L86831
$L86824:
; Line 3295
	xor	ebx, ebx
$L86831:
; Line 3297
	cmp	BYTE PTR _monster[esi+213], 1
	jne	SHORT $LABEL_18$86830
; Line 3299
	mov	eax, ebx
	lea	ecx, DWORD PTR _monster[esi+160]
	imul	eax, 228				; 000000e4H
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR _monster[eax+160]
	jle	SHORT $L86833
; Line 3300
	mov	edx, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _monster[eax+168], edx
; Line 3301
	mov	edx, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _monster[eax+172], edx
; Line 3302
	mov	cl, BYTE PTR [ecx]
	dec	cl
	mov	BYTE PTR _monster[eax+160], cl
$L86833:
; Line 3304
	cmp	BYTE PTR _monster[eax+152], 12		; 0000000cH
	jne	$L86840
; Line 3305
	lea	edx, DWORD PTR _monster[eax+156]
	mov	ecx, DWORD PTR [edx]
	test	cl, 4
	je	$L86840
; Line 3307
	and	ecx, -5					; fffffffbH
	mov	DWORD PTR _monster[eax+4], 7
	mov	DWORD PTR [edx], ecx
; Line 3310
	jmp	$L86840
$LABEL_18$86830:
; Line 3313
	mov	al, BYTE PTR _monster[esi+188]
; Line 3314
	test	al, al
	je	$L86840
; Line 3315
	movzx	eax, al
	shl	eax, 5
	test	BYTE PTR _UniqMonst[eax-10], 2
	je	$L86840
; Line 3316
	mov	ebx, DWORD PTR _nummonsters
; Line 3317
	xor	edi, edi
	test	ebx, ebx
	jle	SHORT $L86840
$L86838:
; Line 3318
	mov	eax, DWORD PTR _monstactive[edi*4]
; Line 3319
	imul	eax, 228				; 000000e4H
	cmp	BYTE PTR _monster[eax+213], 1
	jne	SHORT $L86839
	movzx	ecx, BYTE PTR _monster[eax+212]
	cmp	ecx, DWORD PTR _i$[ebp]
	jne	SHORT $L86839
; Line 3320
	lea	ecx, DWORD PTR _monster[esi+160]
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR _monster[eax+160]
	jle	SHORT $L86843
; Line 3321
	mov	edx, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _monster[eax+168], edx
; Line 3322
	mov	edx, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _monster[eax+172], edx
; Line 3323
	mov	cl, BYTE PTR [ecx]
	dec	cl
	mov	BYTE PTR _monster[eax+160], cl
$L86843:
; Line 3325
	cmp	BYTE PTR _monster[eax+152], 12		; 0000000cH
	jne	SHORT $L86839
; Line 3326
	lea	edx, DWORD PTR _monster[eax+156]
	mov	ecx, DWORD PTR [edx]
	test	cl, 4
	je	SHORT $L86839
; Line 3328
	and	ecx, -5					; fffffffbH
	mov	DWORD PTR _monster[eax+4], 7
	mov	DWORD PTR [edx], ecx
$L86839:
	inc	edi
	cmp	edi, ebx
	jl	SHORT $L86838
$L86840:
	pop	edi
	pop	esi
	pop	ebx
; Line 3335
	leave
	ret	0
@GroupUnity@4 ENDP
_TEXT	ENDS
PUBLIC	@M_CallWalk@8
; Function compile flags: /Ogsy
;	COMDAT @M_CallWalk@8
_TEXT	SEGMENT
@M_CallWalk@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _md$ = edx
; Line 3338
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, edx
	mov	ebp, ecx
; Line 3355
	mov	esi, edi
; Line 3359
	call	@DirOK@8
; Line 3360
	mov	cl, 101					; 00000065H
	mov	bl, al
	push	2
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L86859
; Line 3361
	test	bl, bl
	jne	SHORT $LABEL_10$86861
; Line 3364
	mov	esi, DWORD PTR _left[edi*4]
; Line 3366
	mov	ecx, ebp
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $LABEL_10$86861
; Line 3368
	mov	esi, DWORD PTR _right[edi*4]
; Line 3369
	jmp	SHORT $L86863
$L86859:
; Line 3370
	test	bl, bl
	jne	SHORT $LABEL_10$86861
; Line 3373
	mov	esi, DWORD PTR _right[edi*4]
; Line 3375
	mov	ecx, ebp
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $LABEL_10$86861
; Line 3377
	mov	esi, DWORD PTR _left[edi*4]
$L86863:
; Line 3380
	mov	edx, esi
	mov	ecx, ebp
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $LABEL_10$86861
; Line 3381
	xor	ebx, ebx
; Line 3382
	jmp	SHORT $LABEL_11$86867
$LABEL_10$86861:
; Line 3385
	xor	ebx, ebx
	inc	ebx
$LABEL_11$86867:
; Line 3387
	push	2
	mov	cl, 102					; 00000066H
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L86868
; Line 3388
	test	ebx, ebx
	jne	SHORT $LABEL_20$86870
; Line 3390
	shl	edi, 2
; Line 3392
	mov	ecx, ebp
	mov	eax, DWORD PTR _right[edi]
	mov	esi, DWORD PTR _right[eax*4]
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $LABEL_20$86870
; Line 3394
	mov	eax, DWORD PTR _left[edi]
	mov	esi, DWORD PTR _left[eax*4]
; Line 3395
	jmp	SHORT $L86872
$L86868:
; Line 3396
	test	ebx, ebx
	jne	SHORT $LABEL_20$86870
; Line 3398
	shl	edi, 2
; Line 3400
	mov	ecx, ebp
	mov	eax, DWORD PTR _left[edi]
	mov	esi, DWORD PTR _left[eax*4]
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $LABEL_20$86870
; Line 3402
	mov	eax, DWORD PTR _right[edi]
	mov	esi, DWORD PTR _right[eax*4]
$L86872:
; Line 3405
	mov	edx, esi
	mov	ecx, ebp
	call	@DirOK@8
	test	eax, eax
	je	SHORT $L86875
$LABEL_20$86870:
; Line 3408
	mov	edx, esi
	mov	ecx, ebp
	call	@M_WalkDir@8
; Line 3409
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86850
$L86875:
; Line 3411
	xor	eax, eax
$L86850:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3412
	ret	0
@M_CallWalk@8 ENDP
_TEXT	ENDS
PUBLIC	@M_PathWalk@4
PUBLIC	@PosOkMonst3@12
PUBLIC	??_C@_0BP@LNLM@M_PathWalk?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
EXTRN	@FindPath@28:NEAR
;	COMDAT ??_C@_0BP@LNLM@M_PathWalk?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@LNLM@M_PathWalk?3?5Invalid?5monster?5?$CFd?$AA@ DB 'M_PathWalk:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @M_PathWalk@4
_TEXT	SEGMENT
_path$ = -28
@M_PathWalk@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3415
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	esi, ecx
; Line 3420
	cmp	esi, 200				; 000000c8H
	jb	SHORT $L86885
; Line 3421
	push	esi
	push	OFFSET FLAT:??_C@_0BP@LNLM@M_PathWalk?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86885:
; Line 3424
	mov	eax, esi
	mov	ecx, OFFSET FLAT:@PosOkMonst3@12
	imul	eax, 228				; 000000e4H
	test	BYTE PTR _monster[eax+157], 2
	jne	SHORT $L86887
; Line 3425
	mov	ecx, OFFSET FLAT:@PosOkMonst@12
$L86887:
; Line 3427
	lea	edx, DWORD PTR _path$[ebp]
	push	edx
	movzx	edx, BYTE PTR _monster[eax+81]
	push	edx
	movzx	edx, BYTE PTR _monster[eax+80]
	push	edx
	mov	edx, esi
	push	DWORD PTR _monster[eax+36]
	push	DWORD PTR _monster[eax+32]
	call	@FindPath@28
	test	eax, eax
	je	SHORT $L86888
; Line 3428
	movsx	eax, BYTE PTR _path$[ebp]
	mov	ecx, esi
	movsx	edx, BYTE PTR _plr2monst[eax]
	call	@M_CallWalk@8
; Line 3429
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86878
$L86888:
; Line 3432
	xor	eax, eax
$L86878:
	pop	esi
; Line 3433
	leave
	ret	0
@M_PathWalk@4 ENDP
_TEXT	ENDS
PUBLIC	@M_CallWalk2@8
; Function compile flags: /Ogsy
;	COMDAT @M_CallWalk2@8
_TEXT	SEGMENT
@M_CallWalk2@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _md$ = edx
; Line 3436
	push	ebx
	push	esi
	push	edi
	mov	esi, edx
	mov	ebx, ecx
; Line 3441
	call	@DirOK@8
; Line 3442
	mov	cl, 101					; 00000065H
	mov	edi, eax
	push	2
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L86896
; Line 3443
	test	edi, edi
	jne	SHORT $L89917
	mov	edi, esi
	mov	ecx, ebx
	shl	edi, 2
	mov	esi, DWORD PTR _left[edi]
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $L89917
	mov	esi, DWORD PTR _right[edi]
; Line 3444
	jmp	SHORT $L89921
$L86896:
; Line 3445
	test	edi, edi
	jne	SHORT $L89917
	mov	edi, esi
	mov	ecx, ebx
	shl	edi, 2
	mov	esi, DWORD PTR _right[edi]
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $L89917
	mov	esi, DWORD PTR _left[edi]
$L89921:
	mov	ecx, ebx
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $L89917
	xor	edi, edi
	jmp	SHORT $L86898
$L89917:
	xor	edi, edi
; Line 3449
	mov	edx, esi
	mov	ecx, ebx
	inc	edi
	call	@M_WalkDir@8
$L86898:
; Line 3451
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 3452
	ret	0
@M_CallWalk2@8 ENDP
_TEXT	ENDS
PUBLIC	@M_DumbWalk@8
; Function compile flags: /Ogsy
;	COMDAT @M_DumbWalk@8
_TEXT	SEGMENT
@M_DumbWalk@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _md$ = edx
; Line 3455
	push	ebx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx
; Line 3457
	call	@DirOK@8
	mov	ebx, eax
; Line 3458
	test	ebx, ebx
	je	SHORT $L86905
; Line 3459
	mov	edx, esi
	mov	ecx, edi
	call	@M_WalkDir@8
$L86905:
	pop	edi
; Line 3461
	mov	eax, ebx
	pop	esi
	pop	ebx
; Line 3462
	ret	0
@M_DumbWalk@8 ENDP
_TEXT	ENDS
PUBLIC	@M_RoundWalk@12
; Function compile flags: /Ogsy
;	COMDAT @M_RoundWalk@12
_TEXT	SEGMENT
_i$ = -4
_dir$ = 8
@M_RoundWalk@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _md$ = edx
; Line 3465
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 3480
	mov	edi, DWORD PTR _dir$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR [edi], 0
	je	SHORT $L86919
; Line 3481
	mov	eax, DWORD PTR _left[edx*4]
	mov	esi, DWORD PTR _left[eax*4]
; Line 3482
	jmp	SHORT $L86920
$L86919:
; Line 3483
	mov	eax, DWORD PTR _right[edx*4]
	mov	esi, DWORD PTR _right[eax*4]
$L86920:
; Line 3485
	mov	edx, esi
	call	@DirOK@8
	mov	bl, al
; Line 3486
	test	bl, bl
	jne	SHORT $LABEL_12$86922
; Line 3489
	cmp	DWORD PTR [edi], 0
; Line 3493
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edi, esi
	jne	SHORT $L86923
	shl	edi, 2
	lea	ebx, DWORD PTR _left[edi]
	mov	esi, DWORD PTR [ebx]
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $LABEL_11$86925
; Line 3495
	mov	eax, DWORD PTR [ebx]
	mov	esi, DWORD PTR _left[eax*4]
; Line 3499
	jmp	SHORT $L89929
$L86923:
; Line 3504
	shl	edi, 2
	lea	ebx, DWORD PTR _right[edi]
	mov	esi, DWORD PTR [ebx]
; Line 3506
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $LABEL_11$86925
; Line 3507
	mov	eax, DWORD PTR [ebx]
	mov	esi, DWORD PTR _right[eax*4]
$L89929:
; Line 3509
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, esi
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $LABEL_11$86925
	mov	eax, DWORD PTR _dir$[ebp]
	xor	ecx, ecx
$LABEL_14$86927:
	cmp	DWORD PTR [eax], ecx
	sete	cl
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _opposite[edi]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk@8
	jmp	SHORT $L86912
$LABEL_11$86925:
; Line 3513
	mov	bl, 1
$LABEL_12$86922:
; Line 3515
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, esi
	call	@M_WalkDir@8
; Line 3516
	mov	al, bl
$L86912:
	pop	edi
	pop	esi
	pop	ebx
; Line 3517
	leave
	ret	4
@M_RoundWalk@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@NPOI@MAI_Zombie?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BP@NPOI@MAI_Zombie?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@NPOI@MAI_Zombie?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Zombie:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Zombie@4
_TEXT	SEGMENT
_i$ = -4
_md$ = -12
_v$ = -8
@MAI_Zombie@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3520
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 3525
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L86939
; Line 3526
	push	esi
	push	OFFSET FLAT:??_C@_0BP@NPOI@MAI_Zombie?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86939:
; Line 3529
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 3530
	cmp	DWORD PTR [esi+4], 0
	jne	$L86952
; Line 3534
	mov	ebx, DWORD PTR [esi+32]
; Line 3535
	mov	edi, DWORD PTR [esi+36]
; Line 3536
	mov	eax, ebx
	imul	eax, 112				; 00000070H
	test	BYTE PTR _dFlags[eax+edi], 2
	je	$L86952
; Line 3540
	movzx	eax, BYTE PTR [esi+80]
	sub	ebx, eax
; Line 3543
	push	100					; 00000064H
	movzx	eax, BYTE PTR [esi+81]
	sub	edi, eax
	mov	eax, DWORD PTR [esi+72]
	pop	edx
	mov	cl, 103					; 00000067H
	mov	DWORD PTR _md$[ebp], eax
	call	@random@8
	mov	DWORD PTR _v$[ebp], eax
; Line 3544
	push	ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L86944
	push	edi
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L86944
; Line 3556
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax+eax+10]
	cmp	DWORD PTR _v$[ebp], eax
	jge	$L86949
; Line 3557
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartAttack@4
	jmp	$L86949
$L86944:
; Line 3545
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax+eax+10]
	cmp	DWORD PTR _v$[ebp], eax
	jge	SHORT $L86949
; Line 3546
	push	ebx
	call	_abs
	pop	ecx
	movzx	ecx, BYTE PTR [esi+153]
	lea	ecx, DWORD PTR [ecx+ecx+4]
	cmp	eax, ecx
	jge	SHORT $L86947
	push	edi
	call	_abs
	pop	ecx
	movzx	ecx, BYTE PTR [esi+153]
	lea	ecx, DWORD PTR [ecx+ecx+4]
	cmp	eax, ecx
	jge	SHORT $L86947
; Line 3552
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_GetDir@4
; Line 3553
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, eax
	call	@M_CallWalk@8
	jmp	SHORT $L86949
$L86947:
; Line 3547
	push	100					; 00000064H
	mov	cl, 104					; 00000068H
	pop	edx
	call	@random@8
	movzx	ecx, BYTE PTR [esi+153]
	lea	ecx, DWORD PTR [ecx+ecx+20]
	cmp	eax, ecx
	jge	SHORT $L86948
; Line 3548
	push	8
	mov	cl, 104					; 00000068H
	pop	edx
	call	@random@8
	mov	DWORD PTR _md$[ebp], eax
$L86948:
; Line 3550
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_DumbWalk@8
$L86949:
; Line 3560
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $L86952
; Line 3561
	mov	eax, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+220]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR [esi+84], eax
$L86952:
	pop	edi
	pop	esi
	pop	ebx
; Line 3562
	leave
	ret	0
@MAI_Zombie@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@DJPB@MAI_SkelSd?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BP@DJPB@MAI_SkelSd?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@DJPB@MAI_SkelSd?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_SkelSd:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_SkelSd@4
_TEXT	SEGMENT
_i$ = -4
@MAI_SkelSd@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3565
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
; Line 3569
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[esp+12], esi
	jb	SHORT $L86963
; Line 3570
	push	esi
	push	OFFSET FLAT:??_C@_0BP@DJPB@MAI_SkelSd?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86963:
; Line 3572
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 3573
	cmp	DWORD PTR [esi+4], 0
	jne	$L86966
	cmp	BYTE PTR [esi+160], 0
	je	$L86966
; Line 3577
	mov	ecx, DWORD PTR [esi+32]
; Line 3578
	mov	edx, DWORD PTR [esi+36]
; Line 3579
	movzx	eax, BYTE PTR [esi+80]
	push	ebp
	push	edi
; Line 3581
	push	DWORD PTR [esi+172]
	mov	edi, ecx
	sub	edi, eax
	mov	ebp, edx
	movzx	eax, BYTE PTR [esi+81]
	push	DWORD PTR [esi+168]
	sub	ebp, eax
	call	@GetDirection@16
	mov	ebx, eax
; Line 3583
	push	edi
	mov	DWORD PTR [esi+72], ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L86968
	push	ebp
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L86968
; Line 3590
	cmp	DWORD PTR [esi+112], 13			; 0000000dH
	je	SHORT $L86974
	push	100					; 00000064H
	mov	cl, 105					; 00000069H
	pop	edx
	call	@random@8
	movzx	ecx, BYTE PTR [esi+153]
	lea	ecx, DWORD PTR [ecx+ecx+20]
	cmp	eax, ecx
	jl	SHORT $L86974
; Line 3593
	push	10					; 0000000aH
	mov	cl, 105					; 00000069H
	pop	edx
	call	@random@8
	movzx	ecx, BYTE PTR [esi+153]
	push	5
	pop	edx
	sub	edx, ecx
	lea	edx, DWORD PTR [eax+edx*2]
$L89935:
	mov	ecx, DWORD PTR _i$[esp+20]
	call	@M_StartDelay@8
	jmp	SHORT $L86971
$L86974:
; Line 3591
	mov	ecx, DWORD PTR _i$[esp+20]
	call	@M_StartAttack@4
; Line 3592
	jmp	SHORT $L86971
$L86968:
; Line 3584
	cmp	DWORD PTR [esi+112], 13			; 0000000dH
	je	SHORT $L86970
	push	100					; 00000064H
	mov	cl, 106					; 0000006aH
	pop	edx
	call	@random@8
	movzx	ecx, BYTE PTR [esi+153]
	push	35					; 00000023H
	shl	ecx, 2
	pop	edx
	sub	edx, ecx
	cmp	eax, edx
	jge	SHORT $L86970
; Line 3587
	push	10					; 0000000aH
	mov	cl, 106					; 0000006aH
	pop	edx
	call	@random@8
	mov	edx, eax
	movzx	eax, BYTE PTR [esi+153]
	push	15					; 0000000fH
	add	eax, eax
	pop	ecx
	sub	ecx, eax
	add	edx, ecx
	jmp	SHORT $L89935
$L86970:
; Line 3585
	mov	ecx, DWORD PTR _i$[esp+20]
	mov	edx, ebx
	call	@M_CallWalk@8
$L86971:
; Line 3597
	cmp	DWORD PTR [esi+4], 0
	pop	edi
	pop	ebp
	jne	SHORT $L86966
; Line 3598
	mov	eax, DWORD PTR [esi+220]
	mov	eax, DWORD PTR [eax+ebx*4+8]
	mov	DWORD PTR [esi+84], eax
$L86966:
	pop	esi
	pop	ebx
; Line 3599
	pop	ecx
	ret	0
@MAI_SkelSd@4 ENDP
_TEXT	ENDS
PUBLIC	@MAI_Path@4
PUBLIC	@LineClearF1@24
PUBLIC	@PosOkMonst2@12
PUBLIC	??_C@_0BN@OAOL@MAI_Path?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
EXTRN	@MonstCheckDoors@4:NEAR
;	COMDAT ??_C@_0BN@OAOL@MAI_Path?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@OAOL@MAI_Path?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Path: Inv'
	DB	'alid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Path@4
_TEXT	SEGMENT
@MAI_Path@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3602
	push	esi
	push	edi
	mov	edi, ecx
; Line 3606
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L86983
; Line 3607
	push	edi
	push	OFFSET FLAT:??_C@_0BN@OAOL@MAI_Path?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86983:
; Line 3609
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 3610
	mov	eax, DWORD PTR [esi+220]
	cmp	BYTE PTR [eax], 109			; 0000006dH
	je	SHORT $L86989
; Line 3611
	cmp	BYTE PTR [esi+160], 0
; Line 3612
	je	$L86995
; Line 3613
	cmp	DWORD PTR [esi+4], 0
; Line 3614
	jne	SHORT $L86995
; Line 3615
	mov	al, BYTE PTR [esi+8]
	cmp	al, 1
	je	SHORT $L86988
	cmp	al, 4
	je	SHORT $L86988
	cmp	al, 5
; Line 3616
	jne	SHORT $L86995
$L86988:
; Line 3617
	cmp	DWORD PTR [esi+32], 1
	jne	SHORT $L86989
	cmp	DWORD PTR [esi+36], 0
; Line 3618
	je	SHORT $L86995
$L86989:
; Line 3628
	movzx	eax, BYTE PTR [esi+81]
	push	eax
	mov	edx, edi
	movzx	eax, BYTE PTR [esi+80]
	push	eax
	mov	ecx, OFFSET FLAT:@PosOkMonst2@12
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	call	@LineClearF1@24
	test	eax, eax
	je	SHORT $L86991
	mov	al, BYTE PTR [esi+28]
	cmp	al, 5
	jb	SHORT $L86994
	cmp	al, 8
	jae	SHORT $L86994
$L86991:
; Line 3629
	test	BYTE PTR [esi+157], 2
	je	SHORT $L86992
; Line 3630
	mov	ecx, edi
	call	@MonstCheckDoors@4
$L86992:
; Line 3631
	inc	BYTE PTR [esi+28]
; Line 3632
	cmp	BYTE PTR [esi+28], 5
; Line 3633
	jb	SHORT $L86995
; Line 3634
	mov	ecx, edi
	call	@M_PathWalk@4
	test	eax, eax
	je	SHORT $L86994
; Line 3635
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86979
$L86994:
; Line 3638
	mov	eax, DWORD PTR [esi+220]
	cmp	BYTE PTR [eax], 109			; 0000006dH
	je	SHORT $L86995
; Line 3639
	and	BYTE PTR [esi+28], 0
$L86995:
; Line 3641
	xor	eax, eax
$L86979:
	pop	edi
	pop	esi
; Line 3642
	ret	0
@MAI_Path@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JLFM@MAI_Snake?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BO@JLFM@MAI_Snake?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@JLFM@MAI_Snake?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Snake: I'
	DB	'nvalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Snake@4
_TEXT	SEGMENT
_i$ = -4
_v5$ = -8
_pattern$ = -28
_micaster$ = -20
_midir$ = -16
_v1$ = -12
@MAI_Snake@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3645
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	esi, ecx
; Line 3687
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87035
; Line 3688
	push	esi
	push	OFFSET FLAT:??_C@_0BO@JLFM@MAI_Snake?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87035:
; Line 3693
	imul	esi, 228				; 000000e4H
	and	BYTE PTR _pattern$[ebp+2], 0
	or	BYTE PTR _pattern$[ebp+3], -1
	or	BYTE PTR _pattern$[ebp+4], -1
	and	BYTE PTR _pattern$[ebp+5], 0
	add	esi, OFFSET FLAT:_monster
; Line 3694
	mov	BYTE PTR _pattern$[ebp], 1
; Line 3695
	mov	BYTE PTR _pattern$[ebp+1], 1
; Line 3697
	mov	eax, DWORD PTR [esi+76]
	cmp	DWORD PTR [esi+4], 0
	mov	DWORD PTR _micaster$[ebp], eax
; Line 3698
	jne	$L87046
	cmp	BYTE PTR [esi+160], 0
	je	$L87046
; Line 3699
	mov	ecx, DWORD PTR [esi+32]
	push	ebx
; Line 3702
	movzx	edx, BYTE PTR [esi+80]
	movzx	eax, BYTE PTR [esi+81]
	push	edi
; Line 3703
	mov	edi, ecx
; Line 3708
	push	DWORD PTR [esi+172]
	mov	DWORD PTR _v1$[ebp], edx
	sub	edi, edx
	mov	edx, DWORD PTR [esi+36]
	push	DWORD PTR [esi+168]
	mov	ebx, edx
	mov	DWORD PTR _v5$[ebp], eax
	sub	ebx, eax
	call	@GetDirection@16
	mov	DWORD PTR _midir$[ebp], eax
; Line 3709
	mov	DWORD PTR [esi+72], eax
; Line 3710
	push	edi
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87041
; Line 3711
	push	ebx
	call	_abs
; Line 3713
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87041
; Line 3714
	mov	eax, DWORD PTR [esi+112]
; Line 3717
	cmp	eax, 13					; 0000000dH
	je	SHORT $L87044
	cmp	eax, 14					; 0000000eH
	je	SHORT $L87044
	push	100					; 00000064H
	mov	cl, 105					; 00000069H
	pop	edx
	call	@random@8
	lea	edi, DWORD PTR [esi+153]
	movzx	ecx, BYTE PTR [edi]
	add	ecx, 20					; 00000014H
	cmp	eax, ecx
	jl	SHORT $L87044
; Line 3724
	push	10					; 0000000aH
	mov	cl, 105					; 00000069H
	pop	edx
	call	@random@8
	movzx	ecx, BYTE PTR [edi]
	push	10					; 0000000aH
; Line 3725
	jmp	$L89945
$L87044:
; Line 3718
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartAttack@4
	jmp	$LABEL_49$87045
$L87041:
; Line 3731
	push	edi
	call	_abs
; Line 3733
	cmp	eax, 3
	pop	ecx
	jge	$L87050
	push	ebx
	call	_abs
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L87050
; Line 3738
	push	DWORD PTR _v5$[ebp]
	mov	ebx, DWORD PTR _i$[ebp]
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:@PosOkMonst@12
	push	DWORD PTR _v1$[ebp]
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	call	@LineClearF1@24
	test	eax, eax
	je	SHORT $L87050
	push	14					; 0000000eH
	pop	edi
	cmp	DWORD PTR [esi+112], edi
	je	SHORT $L87050
; Line 3739
	push	0
	push	0
	push	ebx
	mov	edx, DWORD PTR [esi+36]
	push	DWORD PTR _micaster$[ebp]
	mov	ecx, DWORD PTR [esi+32]
	push	20					; 00000014H
	push	DWORD PTR _midir$[ebp]
	push	DWORD PTR _v5$[ebp]
	push	DWORD PTR _v1$[ebp]
	call	@AddMissile@40
	cmp	eax, -1
	je	$LABEL_49$87045
; Line 3740
	xor	edx, edx
	mov	ecx, ebx
	call	@PlayEffect@8
; Line 3743
	mov	ecx, DWORD PTR [esi+32]
	or	eax, -1
	imul	ecx, 112				; 00000070H
	sub	eax, ebx
	add	ecx, DWORD PTR [esi+36]
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR _dMonster[ecx*4], eax
; Line 3745
	jmp	$LABEL_49$87045
$L87050:
; Line 3748
	cmp	DWORD PTR [esi+112], 13			; 0000000dH
	je	SHORT $L87056
; Line 3749
	push	100					; 00000064H
	mov	cl, 106					; 0000006aH
	pop	edx
	call	@random@8
; Line 3751
	movzx	ecx, BYTE PTR [esi+153]
	push	35					; 00000023H
	add	ecx, ecx
	pop	edx
	sub	edx, ecx
	cmp	eax, edx
	jge	SHORT $L87056
; Line 3752
	push	10					; 0000000aH
	mov	cl, 106					; 0000006aH
	pop	edx
	call	@random@8
	movzx	ecx, BYTE PTR [esi+153]
	push	15					; 0000000fH
$L89945:
	pop	edx
	sub	edx, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	add	eax, edx
	mov	edx, eax
$LABEL_11$87048:
	call	@M_StartDelay@8
	jmp	$LABEL_49$87045
$L87056:
; Line 3757
	mov	ecx, DWORD PTR [esi+12]
; Line 3758
	mov	edx, DWORD PTR _midir$[ebp]
; Line 3759
	push	8
	movsx	eax, BYTE PTR _pattern$[ebp+ecx]
	add	eax, edx
	pop	edi
	test	eax, eax
	jl	SHORT $L87058
; Line 3761
	cmp	eax, edi
	lea	edx, DWORD PTR [eax-8]
	jge	SHORT $L87060
; Line 3762
	mov	edx, eax
; Line 3763
	jmp	SHORT $L87060
$L87058:
; Line 3764
	lea	edx, DWORD PTR [eax+8]
$L87060:
; Line 3766
	lea	eax, DWORD PTR [ecx+1]
; Line 3767
	cmp	eax, 5
	mov	DWORD PTR [esi+12], eax
	jle	SHORT $L87061
; Line 3768
	and	DWORD PTR [esi+12], 0
$L87061:
; Line 3769
	mov	eax, DWORD PTR [esi+16]
; Line 3770
	mov	ecx, edx
	sub	ecx, eax
; Line 3771
	js	SHORT $L87062
; Line 3772
	cmp	ecx, edi
	jl	SHORT $L87064
; Line 3773
	sub	ecx, edi
; Line 3774
	jmp	SHORT $L87064
$L87062:
; Line 3775
	add	ecx, edi
$L87064:
; Line 3777
	test	ecx, ecx
	jle	SHORT $LABEL_47$87066
; Line 3783
	cmp	ecx, 4
	jl	SHORT $L87068
; Line 3784
	jne	SHORT $L87069
; Line 3785
	mov	DWORD PTR [esi+16], edx
; Line 3786
	jmp	SHORT $LABEL_47$87066
$L87069:
; Line 3788
	lea	ecx, DWORD PTR [eax-1]
; Line 3789
	test	ecx, ecx
	jge	SHORT $L87070
; Line 3790
	add	eax, 7
; Line 3791
	jmp	SHORT $LABEL_46$87071
$L87070:
; Line 3793
	cmp	ecx, edi
	jl	SHORT $L87075
; Line 3794
	add	eax, -9					; fffffff7H
; Line 3795
	jmp	SHORT $LABEL_46$87071
$L87068:
; Line 3798
	lea	ecx, DWORD PTR [eax+1]
; Line 3799
	test	ecx, ecx
	jge	SHORT $L87074
; Line 3800
	add	eax, 9
	jmp	SHORT $LABEL_46$87071
$L87074:
; Line 3805
	cmp	ecx, edi
	jl	SHORT $L87075
; Line 3806
	add	eax, -7					; fffffff9H
; Line 3807
	jmp	SHORT $LABEL_46$87071
$L87075:
; Line 3810
	mov	eax, ecx
$LABEL_46$87071:
; Line 3802
	mov	DWORD PTR [esi+16], eax
$LABEL_47$87066:
; Line 3779
	mov	edx, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_DumbWalk@8
	test	eax, eax
	jne	SHORT $LABEL_49$87045
; Line 3780
	mov	edx, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk2@8
$LABEL_49$87045:
	cmp	DWORD PTR [esi+4], 0
	pop	edi
	pop	ebx
	jne	SHORT $L87046
	mov	eax, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+220]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR [esi+84], eax
$L87046:
	pop	esi
; Line 3813
	leave
	ret	0
@MAI_Snake@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@FFIA@MAI_Bat?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BM@FFIA@MAI_Bat?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BM@FFIA@MAI_Bat?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Bat: Inval'
	DB	'id monster %d', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Bat@4
_TEXT	SEGMENT
_i$ = -4
_md$ = -8
_v$ = -12
_pnum$ = -24
_fx$ = -20
_fy$ = -16
@MAI_Bat@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3816
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 3821
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87088
; Line 3822
	push	esi
	push	OFFSET FLAT:??_C@_0BM@FFIA@MAI_Bat?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87088:
; Line 3824
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 3825
	mov	eax, DWORD PTR [esi+76]
; Line 3826
	cmp	DWORD PTR [esi+4], 0
	mov	DWORD PTR _pnum$[ebp], eax
	jne	$L87091
	cmp	BYTE PTR [esi+160], 0
	je	$L87091
; Line 3830
	mov	ecx, DWORD PTR [esi+32]
; Line 3832
	push	DWORD PTR [esi+172]
	movzx	eax, BYTE PTR [esi+80]
	mov	edx, DWORD PTR [esi+36]
	push	DWORD PTR [esi+168]
	mov	edi, ecx
	mov	ebx, edx
	sub	edi, eax
	movzx	eax, BYTE PTR [esi+81]
	sub	ebx, eax
	call	@GetDirection@16
; Line 3834
	mov	cl, 107					; 0000006bH
	mov	DWORD PTR _md$[ebp], eax
	push	100					; 00000064H
	mov	DWORD PTR [esi+72], eax
	pop	edx
	call	@random@8
; Line 3835
	cmp	BYTE PTR [esi+8], 2
	mov	DWORD PTR _v$[ebp], eax
	jne	SHORT $L87092
; Line 3836
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $L87093
; Line 3837
	mov	eax, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _opposite[eax*4]
	call	@M_CallWalk@8
; Line 3838
	inc	DWORD PTR [esi+12]
; Line 3839
	jmp	$L87091
$L87093:
; Line 3840
	push	2
	mov	cl, 108					; 0000006cH
	pop	edx
	call	@random@8
; Line 3841
	mov	ecx, DWORD PTR _i$[ebp]
	test	eax, eax
	mov	eax, DWORD PTR _md$[ebp]
	je	SHORT $L87095
	mov	edx, DWORD PTR _left[eax*4]
; Line 3842
	jmp	SHORT $L89950
$L87095:
; Line 3843
	mov	edx, DWORD PTR _right[eax*4]
$L89950:
	call	@M_CallWalk@8
; Line 3844
	mov	BYTE PTR [esi+8], 1
; Line 3846
	jmp	$L87091
$L87092:
; Line 3849
	movzx	eax, BYTE PTR [esi+80]
	mov	DWORD PTR _fx$[ebp], eax
; Line 3850
	movzx	eax, BYTE PTR [esi+81]
	mov	DWORD PTR _fy$[ebp], eax
; Line 3854
	mov	eax, DWORD PTR [esi+220]
	cmp	BYTE PTR [eax], 40			; 00000028H
	jne	$L87097
	push	edi
	call	_abs
	cmp	eax, 5
	pop	ecx
	jge	SHORT $L87098
	push	ebx
	call	_abs
	cmp	eax, 5
	pop	ecx
	jl	SHORT $L87097
$L87098:
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax*4+33]
	cmp	DWORD PTR _v$[ebp], eax
	jge	SHORT $L87097
	push	DWORD PTR _fy$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, OFFSET FLAT:@PosOkMonst@12
	push	DWORD PTR _fx$[ebp]
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	call	@LineClearF1@24
	test	eax, eax
	je	SHORT $L87097
; Line 3855
	push	0
	push	0
	push	DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi+32]
	push	DWORD PTR _pnum$[ebp]
	push	20					; 00000014H
	push	DWORD PTR _md$[ebp]
	push	DWORD PTR _fy$[ebp]
	push	DWORD PTR _fx$[ebp]
	call	@AddMissile@40
	cmp	eax, -1
	je	$L87103
; Line 3856
	mov	ecx, DWORD PTR [esi+32]
	or	eax, -1
	imul	ecx, 112				; 00000070H
	sub	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [esi+36]
; Line 3857
	mov	DWORD PTR [esi+4], 14			; 0000000eH
	mov	DWORD PTR _dMonster[ecx*4], eax
; Line 3859
	jmp	$L87103
$L87097:
	push	edi
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87102
	push	ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87102
; Line 3866
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax*4+8]
	cmp	DWORD PTR _v$[ebp], eax
	jge	$L87103
; Line 3867
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartAttack@4
; Line 3870
	mov	eax, DWORD PTR [esi+220]
	and	DWORD PTR [esi+12], 0
	mov	BYTE PTR [esi+8], 2
	cmp	BYTE PTR [eax], 41			; 00000029H
	jne	SHORT $L87103
; Line 3871
	movzx	edi, BYTE PTR [esi+80]
	push	0
	push	10					; 0000000aH
	pop	edx
	mov	cl, 109					; 0000006dH
	call	@random@8
	inc	eax
	mov	ecx, edi
	movzx	edx, BYTE PTR [esi+81]
	push	eax
	lea	eax, DWORD PTR [edi+1]
	push	DWORD PTR _i$[ebp]
	push	1
	push	8
	push	-1
	push	0
	push	eax
	call	@AddMissile@40
	jmp	SHORT $L87103
$L87102:
; Line 3863
	mov	ecx, DWORD PTR [esi+116]
	cmp	ecx, 20					; 00000014H
	jle	SHORT $L87105
	movzx	eax, BYTE PTR [esi+153]
	add	eax, 13					; 0000000dH
	cmp	DWORD PTR _v$[ebp], eax
	jl	SHORT $L87104
$L87105:
	mov	eax, DWORD PTR [esi+112]
	cmp	eax, 1
	je	SHORT $L87106
	cmp	eax, 2
	je	SHORT $L87106
	cmp	eax, 3
	jne	SHORT $L87103
$L87106:
	test	ecx, ecx
	jne	SHORT $L87103
	movzx	eax, BYTE PTR [esi+153]
	add	eax, 63					; 0000003fH
	cmp	DWORD PTR _v$[ebp], eax
	jge	SHORT $L87103
$L87104:
; Line 3864
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk@8
$L87103:
; Line 3875
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $L87091
; Line 3876
	mov	eax, DWORD PTR [esi+220]
	mov	ecx, DWORD PTR _md$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+8]
	mov	DWORD PTR [esi+84], eax
$L87091:
	pop	edi
	pop	esi
	pop	ebx
; Line 3877
	leave
	ret	0
@MAI_Bat@4 ENDP
_TEXT	ENDS
PUBLIC	@LineClear@16
PUBLIC	??_C@_0CA@KGNH@MAI_SkelBow?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@KGNH@MAI_SkelBow?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@KGNH@MAI_SkelBow?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_SkelBo'
	DB	'w: Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_SkelBow@4
_TEXT	SEGMENT
_i$ = -4
_md$ = -16
_v$ = -8
_walking$ = -12
@MAI_SkelBow@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 3880
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 3885
	and	DWORD PTR _walking$[ebp], 0
	push	esi
	mov	esi, ecx
; Line 3886
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87121
; Line 3887
	push	esi
	push	OFFSET FLAT:??_C@_0CA@KGNH@MAI_SkelBow?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87121:
; Line 3889
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 3890
	cmp	DWORD PTR [esi+4], 0
	jne	$L87124
	cmp	BYTE PTR [esi+160], 0
	je	$L87124
; Line 3894
	movzx	eax, BYTE PTR [esi+80]
	push	ebx
; Line 3895
	mov	ebx, DWORD PTR [esi+36]
; Line 3897
	mov	ecx, DWORD PTR _i$[ebp]
	push	edi
	mov	edi, DWORD PTR [esi+32]
	sub	edi, eax
	movzx	eax, BYTE PTR [esi+81]
	sub	ebx, eax
	call	@M_GetDir@4
; Line 3899
	mov	cl, 110					; 0000006eH
	mov	DWORD PTR _md$[ebp], eax
	push	100					; 00000064H
	mov	DWORD PTR [esi+72], eax
	pop	edx
	call	@random@8
	mov	DWORD PTR _v$[ebp], eax
; Line 3901
	push	edi
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	SHORT $L87126
	push	ebx
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	SHORT $L87126
; Line 3905
	mov	ecx, DWORD PTR [esi+116]
	cmp	ecx, 20					; 00000014H
	jle	SHORT $L87128
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax+eax+13]
	cmp	DWORD PTR _v$[ebp], eax
	jl	SHORT $L87127
$L87128:
	mov	eax, DWORD PTR [esi+112]
	cmp	eax, 1
	je	SHORT $L87129
	cmp	eax, 2
	je	SHORT $L87129
	cmp	eax, 3
	jne	SHORT $L87126
$L87129:
	test	ecx, ecx
	jne	SHORT $L87126
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax+eax+63]
	cmp	DWORD PTR _v$[ebp], eax
	jge	SHORT $L87126
$L87127:
; Line 3906
	mov	eax, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _opposite[eax*4]
	call	@M_DumbWalk@8
	mov	DWORD PTR _walking$[ebp], eax
$L87126:
; Line 3912
	cmp	DWORD PTR _walking$[ebp], 0
	movzx	edi, BYTE PTR [esi+80]
	movzx	ebx, BYTE PTR [esi+81]
	jne	SHORT $L87132
; Line 3913
	push	100					; 00000064H
	mov	cl, 110					; 0000006eH
	pop	edx
	call	@random@8
	movzx	ecx, BYTE PTR [esi+153]
	lea	ecx, DWORD PTR [ecx+ecx+3]
	cmp	eax, ecx
	jge	SHORT $L87132
; Line 3914
	mov	edx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi+32]
	push	ebx
	push	edi
	call	@LineClear@16
	test	eax, eax
	je	SHORT $L87132
; Line 3915
	mov	ecx, DWORD PTR _i$[ebp]
	push	4
	xor	edx, edx
	call	@M_StartRAttack@12
$L87132:
; Line 3919
	cmp	DWORD PTR [esi+4], 0
	pop	edi
	pop	ebx
	jne	SHORT $L87124
; Line 3920
	mov	eax, DWORD PTR [esi+220]
	mov	ecx, DWORD PTR _md$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+8]
	mov	DWORD PTR [esi+84], eax
$L87124:
	pop	esi
; Line 3921
	leave
	ret	0
@MAI_SkelBow@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@NKOK@MAI_Fat?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BM@NKOK@MAI_Fat?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BM@NKOK@MAI_Fat?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Fat: Inval'
	DB	'id monster %d', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Fat@4
_TEXT	SEGMENT
_i$ = -8
_md$ = -12
_v$ = -4
@MAI_Fat@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3924
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	esi, ecx
; Line 3928
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87143
; Line 3929
	push	esi
	push	OFFSET FLAT:??_C@_0BM@NKOK@MAI_Fat?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87143:
; Line 3931
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 3932
	cmp	DWORD PTR [esi+4], 0
	jne	$L87146
	cmp	BYTE PTR [esi+160], 0
	je	$L87146
; Line 3936
	movzx	eax, BYTE PTR [esi+80]
	push	ebx
; Line 3937
	mov	ebx, DWORD PTR [esi+36]
; Line 3938
	mov	ecx, DWORD PTR _i$[ebp]
	push	edi
	mov	edi, DWORD PTR [esi+32]
	sub	edi, eax
	movzx	eax, BYTE PTR [esi+81]
	sub	ebx, eax
	call	@M_GetDir@4
; Line 3940
	mov	cl, 111					; 0000006fH
	mov	DWORD PTR _md$[ebp], eax
	push	100					; 00000064H
	mov	DWORD PTR [esi+72], eax
	pop	edx
	call	@random@8
	mov	DWORD PTR _v$[ebp], eax
; Line 3941
	push	edi
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87148
	push	ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87148
; Line 3948
	movzx	eax, BYTE PTR [esi+153]
	lea	ecx, DWORD PTR [eax*4+15]
	cmp	DWORD PTR _v$[ebp], ecx
	jge	SHORT $L87154
; Line 3949
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartAttack@4
; Line 3950
	jmp	SHORT $L87149
$L87154:
	lea	eax, DWORD PTR [eax*4+20]
	cmp	DWORD PTR _v$[ebp], eax
	jge	SHORT $L87149
; Line 3951
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartSpAttack@4
	jmp	SHORT $L87149
$L87148:
; Line 3945
	mov	ecx, DWORD PTR [esi+116]
	cmp	ecx, 20					; 00000014H
	jle	SHORT $L87151
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax*4+20]
	cmp	DWORD PTR _v$[ebp], eax
	jl	SHORT $L87150
$L87151:
	mov	eax, DWORD PTR [esi+112]
	cmp	eax, 1
	je	SHORT $L87152
	cmp	eax, 2
	je	SHORT $L87152
	cmp	eax, 3
	jne	SHORT $L87149
$L87152:
	test	ecx, ecx
	jne	SHORT $L87149
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax*4+70]
	cmp	DWORD PTR _v$[ebp], eax
	jge	SHORT $L87149
$L87150:
; Line 3946
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk@8
$L87149:
; Line 3954
	cmp	DWORD PTR [esi+4], 0
	pop	edi
	pop	ebx
	jne	SHORT $L87146
; Line 3955
	mov	eax, DWORD PTR [esi+220]
	mov	ecx, DWORD PTR _md$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+8]
	mov	DWORD PTR [esi+84], eax
$L87146:
	pop	esi
; Line 3956
	leave
	ret	0
@MAI_Fat@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JGAD@MAI_Sneak?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
EXTRN	_lightmax:BYTE
EXTRN	_dTransVal:BYTE
;	COMDAT ??_C@_0BO@JGAD@MAI_Sneak?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@JGAD@MAI_Sneak?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Sneak: I'
	DB	'nvalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Sneak@4
_TEXT	SEGMENT
_i$ = -12
_v4$ = -8
_v15$ = -16
_v17$ = -4
@MAI_Sneak@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 3959
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 3980
	cmp	edi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], edi
	jb	SHORT $L87177
; Line 3981
	push	edi
	push	OFFSET FLAT:??_C@_0BO@JGAD@MAI_Sneak?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87177:
; Line 3984
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 3985
	cmp	DWORD PTR [esi+4], 0
	jne	$L87215
; Line 3987
	mov	ecx, DWORD PTR [esi+32]
	mov	eax, DWORD PTR [esi+36]
	mov	edx, ecx
	imul	edx, 112				; 00000070H
	mov	dl, BYTE PTR _dTransVal[edx+eax]
	cmp	dl, BYTE PTR _lightmax
	je	$L87215
; Line 3988
	movzx	edx, BYTE PTR [esi+80]
	sub	ecx, edx
	mov	DWORD PTR _v17$[ebp], ecx
; Line 3989
	movzx	ecx, BYTE PTR [esi+81]
	sub	eax, ecx
; Line 3990
	mov	ecx, edi
	mov	DWORD PTR _v4$[ebp], eax
	call	@M_GetDir@4
	mov	ebx, eax
; Line 3991
	movzx	eax, BYTE PTR [esi+153]
	push	5
	pop	edi
	sub	edi, eax
; Line 3992
	cmp	DWORD PTR [esi+112], 5
	jne	SHORT $L87184
; Line 3994
	mov	BYTE PTR [esi+8], 2
; Line 3995
	jmp	SHORT $L89974
$L87184:
; Line 3996
	push	DWORD PTR _v17$[ebp]
	call	_abs
	pop	ecx
; Line 3998
	lea	ecx, DWORD PTR [edi+3]
	cmp	eax, ecx
	jge	SHORT $L87188
	push	DWORD PTR _v4$[ebp]
	call	_abs
	pop	ecx
	lea	ecx, DWORD PTR [edi+3]
	cmp	eax, ecx
	jge	SHORT $L87188
	cmp	DWORD PTR [esi+12], 8
	jle	SHORT $L87187
$L87188:
; Line 4001
	mov	BYTE PTR [esi+8], 1
$L89974:
; Line 4000
	and	DWORD PTR [esi+12], 0
$L87187:
; Line 4004
	cmp	BYTE PTR [esi+8], 2
	jne	SHORT $L87193
; Line 4005
	test	BYTE PTR [esi+156], 16			; 00000010H
	je	SHORT $L87192
; Line 4006
	mov	eax, DWORD PTR [esi+76]
	mov	edx, DWORD PTR [esi+36]
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR [esi+32]
	push	DWORD PTR _plr[eax+84]
	push	DWORD PTR _plr[eax+80]
	call	@GetDirection@16
	mov	ebx, eax
$L87192:
; Line 4008
	mov	eax, DWORD PTR [esi+220]
	mov	ebx, DWORD PTR _opposite[ebx*4]
	cmp	BYTE PTR [eax], 31			; 0000001fH
	jne	SHORT $L87193
; Line 4009
	push	2
	mov	cl, 112					; 00000070H
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L87194
; Line 4010
	mov	ebx, DWORD PTR _left[ebx*4]
; Line 4011
	jmp	SHORT $L87193
$L87194:
; Line 4012
	mov	ebx, DWORD PTR _right[ebx*4]
$L87193:
; Line 4017
	push	100					; 00000064H
	mov	cl, 112					; 00000070H
	pop	edx
	mov	DWORD PTR [esi+72], ebx
	call	@random@8
	mov	DWORD PTR _v15$[ebp], eax
; Line 4018
	push	DWORD PTR _v17$[ebp]
	call	_abs
	cmp	eax, edi
	pop	ecx
	jge	SHORT $L87196
	push	DWORD PTR _v4$[ebp]
	call	_abs
	cmp	eax, edi
	pop	ecx
	jge	SHORT $L87196
	test	BYTE PTR [esi+156], 1
	je	SHORT $L87196
; Line 4019
	mov	ecx, DWORD PTR _i$[ebp]
	push	0
	mov	edx, ebx
	call	@M_StartFadein@12
; Line 4020
	jmp	$L87210
$L87196:
; Line 4022
	push	DWORD PTR _v17$[ebp]
	inc	edi
	call	_abs
	cmp	eax, edi
	pop	ecx
	jge	SHORT $L87200
	push	DWORD PTR _v4$[ebp]
	call	_abs
	cmp	eax, edi
	pop	ecx
	jl	SHORT $L87199
$L87200:
	test	BYTE PTR [esi+156], 1
	je	SHORT $L87198
$L87199:
; Line 4028
	cmp	BYTE PTR [esi+8], 2
	je	SHORT $L87207
	push	DWORD PTR _v17$[ebp]
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87206
	push	DWORD PTR _v4$[ebp]
	call	_abs
	cmp	eax, 2
	pop	ecx
	jl	SHORT $L87210
$L87206:
	mov	ecx, DWORD PTR [esi+116]
	cmp	ecx, 20					; 00000014H
	jle	SHORT $L87208
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax*4+14]
	cmp	DWORD PTR _v15$[ebp], eax
	jl	SHORT $L87207
$L87208:
	mov	eax, DWORD PTR [esi+112]
	cmp	eax, 1
	je	SHORT $L87209
	cmp	eax, 2
	je	SHORT $L87209
	cmp	eax, 3
	jne	SHORT $L87210
$L87209:
	test	ecx, ecx
	jne	SHORT $L87210
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax*4+64]
	cmp	DWORD PTR _v15$[ebp], eax
	jge	SHORT $L87210
$L87207:
; Line 4030
	mov	ecx, DWORD PTR _i$[ebp]
	inc	DWORD PTR [esi+12]
	mov	edx, ebx
	call	@M_CallWalk@8
; Line 4032
	jmp	SHORT $L87210
$L87198:
; Line 4033
	mov	ecx, DWORD PTR _i$[ebp]
	push	1
	mov	edx, ebx
	call	@M_StartFadeout@12
$L87210:
; Line 4036
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $L87215
; Line 4037
	push	DWORD PTR _v17$[ebp]
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87214
	push	DWORD PTR _v4$[ebp]
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87214
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax*4+10]
	cmp	DWORD PTR _v15$[ebp], eax
	jge	SHORT $L87214
; Line 4040
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartAttack@4
	jmp	SHORT $L87215
$L87214:
; Line 4038
	mov	eax, DWORD PTR [esi+220]
	mov	eax, DWORD PTR [eax+ebx*4+8]
	mov	DWORD PTR [esi+84], eax
$L87215:
	pop	edi
	pop	esi
	pop	ebx
; Line 4044
	leave
	ret	0
@MAI_Sneak@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@FJNL@MAI_Fireman?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@FJNL@MAI_Fireman?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@FJNL@MAI_Fireman?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Firema'
	DB	'n: Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Fireman@4
_TEXT	SEGMENT
_i$ = -4
_md$ = -8
_pnum$ = -20
_fx$ = -16
_fy$ = -12
@MAI_Fireman@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 4048
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 4054
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87227
; Line 4055
	push	esi
	push	OFFSET FLAT:??_C@_0CA@FJNL@MAI_Fireman?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87227:
; Line 4057
	imul	esi, 228				; 000000e4H
; Line 4058
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L87230
	cmp	BYTE PTR _monster[esi+160], 0
	je	$L87230
; Line 4061
	mov	eax, DWORD PTR _monster[esi+76]
; Line 4065
	mov	ebx, DWORD PTR _monster[esi+36]
	movzx	ecx, BYTE PTR _monster[esi+81]
	mov	edi, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _pnum$[ebp], eax
	movzx	eax, BYTE PTR _monster[esi+80]
	mov	DWORD PTR _fy$[ebp], ecx
	sub	ebx, ecx
; Line 4067
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _fx$[ebp], eax
	sub	edi, eax
	call	@M_GetDir@4
	mov	edx, eax
; Line 4068
	mov	al, BYTE PTR _monster[esi+8]
	cmp	al, 1
	mov	DWORD PTR _md$[ebp], edx
	jne	SHORT $L87231
; Line 4070
	push	DWORD PTR _fy$[ebp]
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	DWORD PTR _fx$[ebp]
	call	@LineClear@16
	test	eax, eax
	je	$L87240
	push	0
	push	0
	push	DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	DWORD PTR _pnum$[ebp]
	push	50					; 00000032H
	push	DWORD PTR _md$[ebp]
	push	DWORD PTR _fy$[ebp]
	push	DWORD PTR _fx$[ebp]
	call	@AddMissile@40
	cmp	eax, -1
	je	$L87240
; Line 4073
	and	DWORD PTR _monster[esi+12], 0
	mov	DWORD PTR _monster[esi+4], 14		; 0000000eH
; Line 4075
	jmp	SHORT $L89978
$L87231:
	cmp	al, 5
	jne	SHORT $L87234
; Line 4076
	cmp	DWORD PTR _monster[esi+12], 3
	jne	SHORT $L87235
; Line 4078
	mov	ecx, DWORD PTR _i$[ebp]
	push	1
	mov	BYTE PTR _monster[esi+8], 1
	call	@M_StartFadeout@12
; Line 4079
	jmp	SHORT $L87240
$L87235:
	push	DWORD PTR _fy$[ebp]
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	DWORD PTR _fx$[ebp]
	call	@LineClear@16
	test	eax, eax
	je	SHORT $L87237
; Line 4080
	mov	ecx, DWORD PTR _i$[ebp]
	push	4
	push	51					; 00000033H
	pop	edx
	call	@M_StartRAttack@12
$L89979:
; Line 4081
	inc	DWORD PTR _monster[esi+12]
; Line 4082
	jmp	SHORT $L87240
$L87237:
; Line 4083
	push	10					; 0000000aH
	mov	cl, 112					; 00000070H
	pop	edx
	call	@random@8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, eax
	add	edx, 5
	call	@M_StartDelay@8
; Line 4086
	jmp	SHORT $L89979
$L87234:
	cmp	al, 2
	jne	SHORT $L87240
; Line 4087
	mov	ecx, DWORD PTR _i$[ebp]
	push	0
	call	@M_StartFadein@12
$L89978:
; Line 4088
	mov	BYTE PTR _monster[esi+8], 5
$L87240:
; Line 4090
	mov	eax, DWORD PTR _md$[ebp]
; Line 4091
	push	100					; 00000064H
	pop	edx
	mov	cl, 112					; 00000070H
	mov	DWORD PTR _monster[esi+72], eax
	call	@random@8
; Line 4092
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L87230
; Line 4095
	push	edi
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87242
	push	ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87242
	cmp	BYTE PTR _monster[esi+8], 1
	jne	SHORT $L87242
; Line 4096
	movzx	eax, BYTE PTR _monster[esi+198]
	push	eax
	mov	edx, DWORD PTR _monster[esi+76]
	movzx	eax, BYTE PTR _monster[esi+197]
	mov	ecx, DWORD PTR _i$[ebp]
	push	eax
	movzx	eax, BYTE PTR _monster[esi+196]
	push	eax
	call	@M_TryH2HHit@20
; Line 4098
	mov	edi, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _monster[esi+8], 2
	mov	edx, DWORD PTR _opposite[edi*4]
	call	@M_CallWalk@8
	test	eax, eax
	jne	SHORT $L87230
; Line 4099
	mov	edx, edi
; Line 4102
	jmp	SHORT $L89980
$L87242:
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk@8
	test	eax, eax
	jne	SHORT $L87230
	mov	al, BYTE PTR _monster[esi+8]
	cmp	al, 1
	je	SHORT $L87246
	cmp	al, 2
	jne	SHORT $L87230
$L87246:
; Line 4103
	mov	edx, DWORD PTR _md$[ebp]
$L89980:
	mov	ecx, DWORD PTR _i$[ebp]
	push	0
	call	@M_StartFadein@12
; Line 4104
	mov	BYTE PTR _monster[esi+8], 5
$L87230:
	pop	edi
	pop	esi
	pop	ebx
; Line 4106
	leave
	ret	0
@MAI_Fireman@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@GOIG@MAI_Fallen?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BP@GOIG@MAI_Fallen?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@GOIG@MAI_Fallen?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Fallen:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Fallen@4
_TEXT	SEGMENT
@MAI_Fallen@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4109
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 4114
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L87259
; Line 4115
	push	edi
	push	OFFSET FLAT:??_C@_0BP@GOIG@MAI_Fallen?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87259:
; Line 4117
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	cmp	BYTE PTR _monster[esi+8], 5
	jne	SHORT $L87263
; Line 4118
	lea	eax, DWORD PTR _monster[esi+12]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $L87262
; Line 4119
	dec	ecx
	mov	DWORD PTR [eax], ecx
; Line 4120
	jmp	SHORT $L87263
$L87262:
; Line 4121
	mov	BYTE PTR _monster[esi+8], 1
$L87263:
; Line 4125
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L87265
	cmp	BYTE PTR _monster[esi+160], 0
	je	$L87265
; Line 4129
	push	2
	pop	ebx
	cmp	BYTE PTR _monster[esi+8], bl
	jne	SHORT $L87267
; Line 4130
	lea	eax, DWORD PTR _monster[esi+12]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	lea	edx, DWORD PTR [ecx-1]
	mov	DWORD PTR [eax], edx
	jne	SHORT $L87267
; Line 4132
	mov	eax, DWORD PTR _monster[esi+72]
	mov	ecx, edi
	mov	BYTE PTR _monster[esi+8], 1
	mov	edx, DWORD PTR _opposite[eax*4]
	call	@M_StartStand@8
$L87267:
; Line 4136
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, DWORD PTR _monster[esi+96]
	jne	$L87268
; Line 4137
	push	4
	mov	cl, 113					; 00000071H
	pop	edx
	call	@random@8
	test	eax, eax
	jne	$L87265
; Line 4140
	test	BYTE PTR _monster[esi+156], 8
	jne	SHORT $L87272
; Line 4141
	mov	edx, DWORD PTR _monster[esi+72]
	mov	ecx, edi
	call	@M_StartSpStand@8
; Line 4142
	movzx	eax, BYTE PTR _monster[esi+153]
; Line 4143
	mov	edi, DWORD PTR _monster[esi+144]
	lea	ecx, DWORD PTR [eax+eax+2]
	lea	eax, DWORD PTR _monster[esi+148]
	mov	ebx, edi
	mov	edx, DWORD PTR [eax]
	sub	ebx, ecx
	cmp	ebx, edx
	jl	SHORT $L87271
; Line 4144
	add	edx, ecx
	mov	DWORD PTR [eax], edx
; Line 4145
	jmp	SHORT $L87272
$L87271:
; Line 4146
	mov	DWORD PTR [eax], edi
$L87272:
; Line 4148
	movzx	eax, BYTE PTR _monster[esi+153]
	lea	edx, DWORD PTR [eax+eax+4]
; Line 4149
	mov	edi, edx
	neg	edi
	mov	DWORD PTR -4+[ebp], edi
	jmp	SHORT $L89990
$L87273:
; Line 4150
	mov	ecx, DWORD PTR -4+[ebp]
	jmp	SHORT $L89991
$L87276:
; Line 4151
	test	edi, edi
	jl	SHORT $L87277
	cmp	edi, 112				; 00000070H
	jge	SHORT $L87277
	test	ecx, ecx
	jl	SHORT $L87277
	cmp	ecx, 112				; 00000070H
	jge	SHORT $L87277
; Line 4152
	mov	eax, DWORD PTR _monster[esi+32]
	add	eax, ecx
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _monster[esi+36]
	add	eax, edi
	mov	eax, DWORD PTR _dMonster[eax*4]
; Line 4153
	test	eax, eax
	jle	SHORT $L87277
; Line 4154
	dec	eax
; Line 4155
	imul	eax, 228				; 000000e4H
	cmp	BYTE PTR _monster[eax+152], 8
	jne	SHORT $L87277
; Line 4156
	mov	BYTE PTR _monster[eax+8], 5
; Line 4157
	movzx	ebx, BYTE PTR _monster[esi+153]
	imul	ebx, 30					; 0000001eH
	add	ebx, 105				; 00000069H
	mov	DWORD PTR _monster[eax+12], ebx
$L87277:
; Line 4150
	inc	ecx
$L89991:
	cmp	ecx, edx
	jle	SHORT $L87276
; Line 4149
	inc	edi
$L89990:
	cmp	edi, edx
	jle	SHORT $L87273
; Line 4163
	jmp	SHORT $L87265
$L87268:
	mov	al, BYTE PTR _monster[esi+8]
	cmp	al, bl
	jne	SHORT $L87283
; Line 4165
	mov	edx, DWORD PTR _monster[esi+72]
$L89992:
	mov	ecx, edi
	call	@M_CallWalk@8
; Line 4166
	jmp	SHORT $L87265
$L87283:
	cmp	al, 5
	jne	SHORT $L87285
; Line 4167
	movzx	ecx, BYTE PTR _monster[esi+80]
	mov	eax, DWORD PTR _monster[esi+32]
	sub	eax, ecx
; Line 4168
	movzx	ecx, BYTE PTR _monster[esi+81]
	mov	esi, DWORD PTR _monster[esi+36]
; Line 4169
	push	eax
	sub	esi, ecx
	call	_abs
	cmp	eax, ebx
	pop	ecx
	jge	SHORT $L87286
	push	esi
	call	_abs
	cmp	eax, ebx
	pop	ecx
	jge	SHORT $L87286
; Line 4170
	mov	ecx, edi
	call	@M_StartAttack@4
; Line 4171
	jmp	SHORT $L87265
$L87286:
; Line 4172
	mov	ecx, edi
	call	@M_GetDir@4
; Line 4173
	mov	edx, eax
; Line 4175
	jmp	SHORT $L89992
$L87285:
; Line 4176
	mov	ecx, edi
	call	@MAI_SkelSd@4
$L87265:
	pop	edi
	pop	esi
	pop	ebx
; Line 4178
	leave
	ret	0
@MAI_Fallen@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@IIJG@MAI_Cleaver?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@IIJG@MAI_Cleaver?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@IIJG@MAI_Cleaver?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Cleave'
	DB	'r: Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Cleaver@4
_TEXT	SEGMENT
_i$ = -4
@MAI_Cleaver@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 4181
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
; Line 4185
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[esp+12], esi
	jb	SHORT $L87299
; Line 4186
	push	esi
	push	OFFSET FLAT:??_C@_0CA@IIJG@MAI_Cleaver?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87299:
; Line 4188
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 4189
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $L87302
	cmp	BYTE PTR [esi+160], 0
	je	SHORT $L87302
; Line 4193
	mov	ecx, DWORD PTR [esi+32]
; Line 4194
	mov	edx, DWORD PTR [esi+36]
; Line 4195
	movzx	eax, BYTE PTR [esi+80]
	push	ebp
	push	edi
; Line 4198
	push	DWORD PTR [esi+172]
	mov	edi, ecx
	sub	edi, eax
	mov	ebp, edx
	movzx	eax, BYTE PTR [esi+81]
	push	DWORD PTR [esi+168]
	sub	ebp, eax
	call	@GetDirection@16
	mov	ebx, eax
; Line 4201
	push	edi
	mov	DWORD PTR [esi+72], ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87304
	push	ebp
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87304
; Line 4204
	mov	ecx, DWORD PTR _i$[esp+20]
	call	@M_StartAttack@4
	jmp	SHORT $L87305
$L87304:
; Line 4202
	mov	ecx, DWORD PTR _i$[esp+20]
	mov	edx, ebx
	call	@M_CallWalk@8
$L87305:
; Line 4206
	cmp	DWORD PTR [esi+4], 0
	pop	edi
	pop	ebp
	jne	SHORT $L87302
; Line 4207
	mov	eax, DWORD PTR [esi+220]
	mov	eax, DWORD PTR [eax+ebx*4+8]
	mov	DWORD PTR [esi+84], eax
$L87302:
	pop	esi
	pop	ebx
; Line 4208
	pop	ecx
	ret	0
@MAI_Cleaver@4 ENDP
_TEXT	ENDS
PUBLIC	@MAI_Round@8
PUBLIC	??_C@_0BO@MFHM@MAI_Round?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BO@MFHM@MAI_Round?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@MFHM@MAI_Round?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Round: I'
	DB	'nvalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Round@8
_TEXT	SEGMENT
_i$ = -4
_special$ = -24
_v28$ = -20
_v29$ = -20
_v30$ = -16
_md$ = -12
_v32$ = -8
@MAI_Round@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _special$ = edx
; Line 4211
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	esi, ecx
; Line 4243
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _special$[ebp], edx
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87336
; Line 4244
	push	esi
	push	OFFSET FLAT:??_C@_0BO@MFHM@MAI_Round?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87336:
; Line 4245
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 4246
	cmp	DWORD PTR [esi+4], 0
	jne	$L87376
	cmp	BYTE PTR [esi+160], 0
	je	$L87376
; Line 4249
	movzx	eax, BYTE PTR [esi+81]
	mov	edx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi+32]
	push	ebx
	push	edi
; Line 4253
	push	DWORD PTR [esi+172]
	mov	DWORD PTR _v28$[ebp], eax
	movzx	edi, BYTE PTR [esi+80]
	push	DWORD PTR [esi+168]
	mov	eax, edx
	sub	eax, DWORD PTR _v28$[ebp]
	mov	ebx, ecx
	sub	ebx, edi
	mov	DWORD PTR _v32$[ebp], eax
	call	@GetDirection@16
; Line 4254
	cmp	BYTE PTR [esi+160], 255			; 000000ffH
	mov	DWORD PTR _md$[ebp], eax
	jae	SHORT $L87341
; Line 4255
	mov	ecx, DWORD PTR _i$[ebp]
	call	@MonstCheckDoors@4
$L87341:
; Line 4256
	push	100					; 00000064H
	mov	cl, 114					; 00000072H
	pop	edx
	call	@random@8
	mov	DWORD PTR _v30$[ebp], eax
; Line 4257
	push	ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87343
	push	DWORD PTR _v32$[ebp]
	call	_abs
	cmp	eax, 2
	pop	ecx
	jl	$L87358
$L87343:
	cmp	BYTE PTR [esi+160], -1
	jne	$L87358
; Line 4258
	imul	edi, 112				; 00000070H
	mov	eax, DWORD PTR _v28$[ebp]
; Line 4259
	mov	ecx, DWORD PTR [esi+36]
	lea	edi, DWORD PTR _dung_map[edi+eax]
	mov	eax, DWORD PTR [esi+32]
	imul	eax, 112				; 00000070H
	mov	DWORD PTR _v29$[ebp], edi
	mov	al, BYTE PTR _dung_map[eax+ecx]
	cmp	al, BYTE PTR [edi]
	jne	$L87358
; Line 4260
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87352
; Line 4261
	push	ebx
	call	_abs
; Line 4263
	cmp	eax, 4
	pop	ecx
	jge	SHORT $L87348
; Line 4264
	push	DWORD PTR _v32$[ebp]
	call	_abs
; Line 4266
	cmp	eax, 4
	pop	ecx
	jl	$LABEL_26$87349
$L87348:
; Line 4269
	push	4
	mov	cl, 115					; 00000073H
	pop	edx
	call	@random@8
	test	eax, eax
	jne	$LABEL_26$87349
; Line 4271
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87352
; Line 4272
	and	DWORD PTR [esi+12], eax
; Line 4273
	push	2
	pop	edx
	mov	cl, 116					; 00000074H
	call	@random@8
	mov	DWORD PTR [esi+16], eax
$L87352:
; Line 4277
	push	DWORD PTR _v32$[ebp]
	mov	BYTE PTR [esi+8], 4
	call	_abs
; Line 4278
	push	ebx
	mov	edi, eax
	call	_abs
	pop	ecx
	cmp	eax, edi
	pop	ecx
	jg	SHORT $L87354
; Line 4279
	push	DWORD PTR _v32$[ebp]
; Line 4280
	jmp	SHORT $L90008
$L87354:
; Line 4281
	push	ebx
$L90008:
	call	_abs
	pop	ecx
; Line 4284
	add	eax, eax
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, eax
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [esi+12], edx
	jl	SHORT $L87357
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@DirOK@8
	test	al, al
	jne	SHORT $L87358
$L87357:
; Line 4285
	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [esi+36]
	imul	eax, 112				; 00000070H
	mov	al, BYTE PTR _dung_map[eax+ecx]
	mov	ecx, DWORD PTR _v29$[ebp]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $L87358
; Line 4287
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	@M_RoundWalk@12
	test	al, al
	jne	SHORT $LABEL_26$87349
; Line 4288
	push	10					; 0000000aH
	mov	cl, 125					; 0000007dH
	pop	edx
	call	@random@8
; Line 4289
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+10]
	call	@M_StartDelay@8
; Line 4291
	jmp	SHORT $LABEL_26$87349
$L87358:
; Line 4296
	mov	BYTE PTR [esi+8], 1
$LABEL_26$87349:
; Line 4298
	cmp	BYTE PTR [esi+8], 1
	jne	$L87367
; Line 4299
	push	ebx
	call	_abs
	pop	ecx
	push	2
	pop	edi
	cmp	eax, edi
	jge	SHORT $L87364
	push	DWORD PTR _v32$[ebp]
	call	_abs
	cmp	eax, edi
	pop	ecx
	jge	SHORT $L87364
; Line 4308
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax+eax+23]
	cmp	DWORD PTR _v30$[ebp], eax
	jge	$L87367
; Line 4309
	mov	eax, DWORD PTR _md$[ebp]
; Line 4310
	cmp	DWORD PTR _special$[ebp], 0
	mov	DWORD PTR [esi+72], eax
	je	SHORT $L87374
	mov	eax, DWORD PTR [esi+144]
	sar	eax, 1
	cmp	DWORD PTR [esi+148], eax
	jge	SHORT $L87374
	mov	edx, edi
	mov	cl, 117					; 00000075H
	call	@random@8
	test	eax, eax
	je	SHORT $L87374
; Line 4311
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartSpAttack@4
; Line 4312
	jmp	SHORT $L87367
$L87374:
; Line 4313
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartAttack@4
	jmp	SHORT $L87367
$L87364:
; Line 4301
	mov	ecx, DWORD PTR [esi+116]
; Line 4305
	cmp	ecx, 20					; 00000014H
	jle	SHORT $L87369
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax+eax+28]
	cmp	DWORD PTR _v30$[ebp], eax
	jl	SHORT $L87368
$L87369:
	mov	eax, DWORD PTR [esi+112]
	cmp	eax, 1
	je	SHORT $L87370
	cmp	eax, edi
	je	SHORT $L87370
	cmp	eax, 3
	jne	SHORT $L87367
$L87370:
	test	ecx, ecx
	jne	SHORT $L87367
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax+eax+78]
	cmp	DWORD PTR _v30$[ebp], eax
	jge	SHORT $L87367
$L87368:
; Line 4306
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk@8
$L87367:
; Line 4316
	cmp	DWORD PTR [esi+4], 0
	pop	edi
	pop	ebx
	jne	SHORT $L87376
; Line 4317
	mov	eax, DWORD PTR [esi+220]
	mov	ecx, DWORD PTR _md$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+8]
	mov	DWORD PTR [esi+84], eax
$L87376:
	pop	esi
; Line 4319
	leave
	ret	0
@MAI_Round@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MAI_GoatMc@4
_TEXT	SEGMENT
@MAI_GoatMc@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4323
	xor	edx, edx
	inc	edx
	jmp	@MAI_Round@8
@MAI_GoatMc@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@PDPB@MAI_Ranged?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	@MAI_Ranged@12
;	COMDAT ??_C@_0BP@PDPB@MAI_Ranged?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@PDPB@MAI_Ranged?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Ranged:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Ranged@12
_TEXT	SEGMENT
_i$ = -4
_missile_type$ = -12
_special$ = 8
_md$ = -8
_mx$ = -20
_my$ = -16
@MAI_Ranged@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _missile_type$ = edx
; Line 4327
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR _missile_type$[ebp], edx
; Line 4332
	cmp	edi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], edi
	jb	SHORT $L87394
; Line 4333
	push	edi
	push	OFFSET FLAT:??_C@_0BP@PDPB@MAI_Ranged?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87394:
; Line 4335
	mov	esi, edi
	imul	esi, 228				; 000000e4H
; Line 4336
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L87409
; Line 4340
	mov	al, BYTE PTR _monster[esi+160]
	cmp	al, -1
	je	SHORT $L87398
	test	BYTE PTR _monster[esi+156], 16		; 00000010H
	jne	SHORT $L87398
; Line 4365
	test	al, al
	je	$L87409
; Line 4366
	push	DWORD PTR _monster[esi+172]
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	DWORD PTR _monster[esi+168]
	call	@GetDirection@16
; Line 4367
	mov	edx, eax
	mov	ecx, edi
	call	@M_CallWalk@8
	jmp	$L87409
$L87398:
; Line 4342
	movzx	ecx, BYTE PTR _monster[esi+81]
	movzx	eax, BYTE PTR _monster[esi+80]
; Line 4343
	mov	edi, DWORD PTR _monster[esi+32]
	push	ebx
; Line 4344
	mov	ebx, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _my$[ebp], ecx
	sub	ebx, ecx
; Line 4345
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _mx$[ebp], eax
	sub	edi, eax
	call	@M_GetDir@4
; Line 4346
	cmp	BYTE PTR _monster[esi+160], 255		; 000000ffH
	mov	DWORD PTR _md$[ebp], eax
	jae	SHORT $L87400
; Line 4347
	mov	ecx, DWORD PTR _i$[ebp]
	call	@MonstCheckDoors@4
$L87400:
; Line 4348
	mov	eax, DWORD PTR _md$[ebp]
; Line 4349
	cmp	DWORD PTR _monster[esi+112], 10		; 0000000aH
	mov	DWORD PTR _monster[esi+72], eax
	jne	SHORT $L87401
; Line 4350
	push	20					; 00000014H
	mov	cl, 118					; 00000076H
	pop	edx
	call	@random@8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, eax
	call	@M_StartDelay@8
; Line 4351
	jmp	SHORT $L87404
$L87401:
	push	edi
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	SHORT $L87404
	push	ebx
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	SHORT $L87404
; Line 4352
	push	100					; 00000064H
	mov	cl, 119					; 00000077H
	pop	edx
	call	@random@8
	movzx	ecx, BYTE PTR _monster[esi+153]
	add	ecx, 7
	lea	ecx, DWORD PTR [ecx+ecx*4]
	add	ecx, ecx
	cmp	eax, ecx
	jge	SHORT $L87404
; Line 4353
	mov	eax, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _opposite[eax*4]
	call	@M_CallWalk@8
$L87404:
; Line 4355
	cmp	DWORD PTR _monster[esi+4], 0
	pop	ebx
	jne	SHORT $L87409
; Line 4356
	push	DWORD PTR _my$[ebp]
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	DWORD PTR _mx$[ebp]
	call	@LineClear@16
	test	eax, eax
	je	SHORT $L87406
; Line 4357
	cmp	DWORD PTR _special$[ebp], 0
; Line 4358
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _missile_type$[ebp]
	push	4
	je	SHORT $L87407
	call	@M_StartRSpAttack@12
; Line 4359
	jmp	SHORT $L87409
$L87407:
; Line 4360
	call	@M_StartRAttack@12
; Line 4361
	jmp	SHORT $L87409
$L87406:
; Line 4362
	mov	eax, DWORD PTR _monster[esi+220]
	mov	ecx, DWORD PTR _md$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+8]
	mov	DWORD PTR _monster[esi+84], eax
$L87409:
	pop	edi
	pop	esi
; Line 4369
	leave
	ret	4
@MAI_Ranged@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MAI_GoatBow@4
_TEXT	SEGMENT
@MAI_GoatBow@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 4373
	push	0
	xor	edx, edx
	call	@MAI_Ranged@12
; Line 4374
	ret	0
@MAI_GoatBow@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MAI_Succ@4
_TEXT	SEGMENT
@MAI_Succ@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4378
	push	0
	push	24					; 00000018H
	pop	edx
	call	@MAI_Ranged@12
; Line 4379
	ret	0
@MAI_Succ@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MAI_AcidUniq@4
_TEXT	SEGMENT
@MAI_AcidUniq@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 4383
	push	1
	push	57					; 00000039H
	pop	edx
	call	@MAI_Ranged@12
; Line 4384
	ret	0
@MAI_AcidUniq@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@GOAH@MAI_Scav?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
EXTRN	_dDead:BYTE
;	COMDAT ??_C@_0BN@GOAH@MAI_Scav?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@GOAH@MAI_Scav?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Scav: Inv'
	DB	'alid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Scav@4
_TEXT	SEGMENT
_i$ = -8
_v20$ = -4
@MAI_Scav@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4387
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	mov	ebx, ecx
	push	esi
; Line 4411
	cmp	ebx, 200				; 000000c8H
	push	edi
	mov	DWORD PTR _i$[ebp], ebx
	jb	SHORT $L87445
; Line 4412
	push	ebx
	push	OFFSET FLAT:??_C@_0BN@GOAH@MAI_Scav?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87445:
; Line 4415
	mov	esi, ebx
	xor	edi, edi
	imul	esi, 228				; 000000e4H
	mov	DWORD PTR _v20$[ebp], edi
	cmp	DWORD PTR _monster[esi+4], edi
	jne	$L87458
; Line 4416
	mov	eax, DWORD PTR _monster[esi+144]
	sar	eax, 1
	cmp	DWORD PTR _monster[esi+148], eax
	jge	SHORT $L87448
; Line 4417
	cmp	BYTE PTR _monster[esi+8], 3
	je	SHORT $LABEL_10$87451
; Line 4419
	lea	ecx, DWORD PTR _monster[esi+213]
	cmp	BYTE PTR [ecx], 0
	je	SHORT $L87452
; Line 4420
	movzx	eax, BYTE PTR _monster[esi+212]
	imul	eax, 228				; 000000e4H
	add	eax, OFFSET FLAT:_monster+214
; Line 4421
	dec	BYTE PTR [eax]
; Line 4422
	and	BYTE PTR [ecx], 0
$L87452:
; Line 4424
	mov	BYTE PTR _monster[esi+8], 3
; Line 4425
	mov	DWORD PTR _monster[esi+20], 10		; 0000000aH
$L87448:
; Line 4427
	cmp	BYTE PTR _monster[esi+8], 3
	jne	$LABEL_52$87457
$LABEL_10$87451:
; Line 4434
	lea	eax, DWORD PTR _monster[esi+20]
	mov	ecx, DWORD PTR [eax]
; Line 4435
	cmp	ecx, edi
	je	$LABEL_52$87457
; Line 4436
	dec	ecx
	mov	DWORD PTR [eax], ecx
; Line 4438
	mov	eax, DWORD PTR _monster[esi+32]
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _monster[esi+36]
	cmp	BYTE PTR _dDead[eax+ecx], 0
	je	SHORT $L87460
; Line 4439
	mov	ecx, ebx
	call	@M_StartEat@4
; Line 4440
	test	BYTE PTR _monster[esi+156], 8
	jne	SHORT $L87461
; Line 4441
	add	DWORD PTR _monster[esi+148], 64		; 00000040H
$L87461:
; Line 4442
	mov	eax, DWORD PTR _monster[esi+144]
	mov	ecx, eax
	sar	ecx, 2
	sar	eax, 1
	add	ecx, eax
	cmp	DWORD PTR _monster[esi+148], ecx
	jl	$LABEL_52$87457
; Line 4443
	mov	BYTE PTR _monster[esi+8], 1
; Line 4444
	mov	DWORD PTR _monster[esi+12], edi
; Line 4445
	mov	DWORD PTR _monster[esi+16], edi
; Line 4447
	jmp	$LABEL_52$87457
$L87460:
; Line 4448
	cmp	DWORD PTR _monster[esi+12], edi
	jne	$L87486
; Line 4450
	push	2
	mov	cl, 120					; 00000078H
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L87466
; Line 4451
	push	-4					; fffffffcH
	pop	edi
$L87467:
; Line 4453
	cmp	DWORD PTR _v20$[ebp], 0
	jne	SHORT $L87469
; Line 4455
	push	-4					; fffffffcH
	pop	ebx
$L87471:
; Line 4457
	cmp	DWORD PTR _v20$[ebp], 0
	jne	SHORT $L87473
; Line 4459
	test	edi, edi
	jl	SHORT $L90027
	cmp	edi, 112				; 00000070H
	jge	SHORT $L90027
	test	ebx, ebx
	jl	SHORT $L90027
	cmp	ebx, 112				; 00000070H
	jge	SHORT $L90027
; Line 4460
	mov	edx, DWORD PTR _monster[esi+32]
; Line 4461
	mov	eax, DWORD PTR _monster[esi+36]
; Line 4469
	lea	ecx, DWORD PTR [edx+ebx]
	imul	ecx, 112				; 00000070H
	add	ecx, eax
	cmp	BYTE PTR _dDead[ecx+edi], 0
	je	SHORT $L90026
	lea	ecx, DWORD PTR [eax+edi]
	push	ecx
	lea	ecx, DWORD PTR [edx+ebx]
	push	ecx
	push	eax
	mov	ecx, OFFSET FLAT:@CheckNoSolid@8
	call	@LineClearF@20
	test	al, al
	je	SHORT $L90026
	mov	DWORD PTR _v20$[ebp], 1
	jmp	SHORT $L90027
$L90026:
	and	DWORD PTR _v20$[ebp], 0
$L90027:
; Line 4471
	inc	ebx
; Line 4472
	cmp	ebx, 4
	jle	SHORT $L87471
$L87473:
; Line 4473
	inc	edi
; Line 4474
	cmp	edi, 4
	jle	SHORT $L87467
$L87469:
; Line 4475
	dec	ebx
; Line 4476
	dec	edi
; Line 4477
	jmp	SHORT $L87476
$L87466:
; Line 4478
	push	4
	pop	edi
$L87477:
; Line 4480
	cmp	DWORD PTR _v20$[ebp], 0
	jne	SHORT $L87479
; Line 4482
	push	4
	pop	ebx
$L87481:
; Line 4484
	cmp	DWORD PTR _v20$[ebp], 0
	jne	SHORT $L87483
; Line 4486
	test	edi, edi
	jl	SHORT $L90029
	cmp	edi, 112				; 00000070H
	jge	SHORT $L90029
	test	ebx, ebx
	jl	SHORT $L90029
	cmp	ebx, 112				; 00000070H
	jge	SHORT $L90029
; Line 4487
	mov	edx, DWORD PTR _monster[esi+32]
; Line 4488
	mov	eax, DWORD PTR _monster[esi+36]
; Line 4496
	lea	ecx, DWORD PTR [edx+ebx]
	imul	ecx, 112				; 00000070H
	add	ecx, eax
	cmp	BYTE PTR _dDead[ecx+edi], 0
	je	SHORT $L90028
	lea	ecx, DWORD PTR [eax+edi]
	push	ecx
	lea	ecx, DWORD PTR [edx+ebx]
	push	ecx
	push	eax
	mov	ecx, OFFSET FLAT:@CheckNoSolid@8
	call	@LineClearF@20
	test	al, al
	je	SHORT $L90028
	mov	DWORD PTR _v20$[ebp], 1
	jmp	SHORT $L90029
$L90028:
	and	DWORD PTR _v20$[ebp], 0
$L90029:
; Line 4498
	dec	ebx
; Line 4499
	cmp	ebx, -4					; fffffffcH
	jge	SHORT $L87481
$L87483:
; Line 4500
	dec	edi
; Line 4501
	cmp	edi, -4					; fffffffcH
	jge	SHORT $L87477
$L87479:
; Line 4502
	inc	ebx
; Line 4503
	inc	edi
$L87476:
; Line 4505
	cmp	DWORD PTR _v20$[ebp], 0
	je	SHORT $L87486
; Line 4506
	mov	eax, DWORD PTR _monster[esi+32]
	lea	eax, DWORD PTR [eax+ebx+1]
	mov	DWORD PTR _monster[esi+12], eax
; Line 4507
	mov	eax, DWORD PTR _monster[esi+36]
	lea	eax, DWORD PTR [eax+edi+1]
	mov	DWORD PTR _monster[esi+16], eax
$L87486:
; Line 4510
	mov	eax, DWORD PTR _monster[esi+12]
; Line 4511
	xor	edi, edi
	cmp	eax, edi
	je	SHORT $LABEL_52$87457
; Line 4512
	mov	ecx, DWORD PTR _monster[esi+16]
	mov	edx, DWORD PTR _monster[esi+36]
	dec	ecx
	dec	eax
	push	ecx
	mov	ecx, DWORD PTR _monster[esi+32]
	push	eax
	call	@GetDirection@16
; Line 4514
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, eax
	mov	DWORD PTR _monster[esi+72], eax
	call	@M_CallWalk@8
$LABEL_52$87457:
; Line 4429
	cmp	DWORD PTR _monster[esi+4], edi
	jne	SHORT $L87458
; Line 4430
	mov	ecx, DWORD PTR _i$[ebp]
	call	@MAI_SkelSd@4
$L87458:
	pop	edi
	pop	esi
	pop	ebx
; Line 4520
	leave
	ret	0
@MAI_Scav@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@JOMI@MAI_Garg?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BN@JOMI@MAI_Garg?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@JOMI@MAI_Garg?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Garg: Inv'
	DB	'alid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Garg@4
_TEXT	SEGMENT
_md$ = -4
@MAI_Garg@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4523
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, ecx
	push	esi
; Line 4527
	cmp	ebp, 200				; 000000c8H
	push	edi
	jb	SHORT $L87498
; Line 4528
	push	ebp
	push	OFFSET FLAT:??_C@_0BN@JOMI@MAI_Garg?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87498:
; Line 4530
	mov	esi, ebp
; Line 4533
	mov	ecx, ebp
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
	mov	edi, DWORD PTR [esi+32]
	mov	ebx, DWORD PTR [esi+36]
	sub	edi, DWORD PTR [esi+168]
	sub	ebx, DWORD PTR [esi+172]
	call	@M_GetDir@4
	mov	DWORD PTR _md$[esp+20], eax
; Line 4534
	mov	al, BYTE PTR [esi+160]
	test	al, al
	je	SHORT $L87500
	test	BYTE PTR [esi+156], 4
	je	SHORT $L87500
; Line 4535
	mov	ecx, ebp
	call	@M_Enemy@4
; Line 4536
	movzx	ecx, BYTE PTR [esi+80]
	mov	eax, DWORD PTR [esi+32]
; Line 4537
	mov	edi, DWORD PTR [esi+36]
	sub	eax, ecx
	movzx	ecx, BYTE PTR [esi+81]
; Line 4538
	push	eax
	sub	edi, ecx
	call	_abs
	pop	ecx
	movzx	ecx, BYTE PTR [esi+153]
	inc	ecx
	inc	ecx
	cmp	eax, ecx
	jge	SHORT $L87503
	push	edi
	call	_abs
	pop	ecx
	movzx	ecx, BYTE PTR [esi+153]
	inc	ecx
	inc	ecx
	cmp	eax, ecx
	jge	SHORT $L87503
; Line 4539
	and	DWORD PTR [esi+156], -5			; fffffffbH
$L87503:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 4559
	pop	ecx
	ret	0
$L87500:
; Line 4544
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $L87503
	test	al, al
	je	SHORT $L87503
; Line 4548
	mov	eax, DWORD PTR [esi+144]
	sar	eax, 1
	cmp	DWORD PTR [esi+148], eax
	jge	SHORT $L87504
	test	BYTE PTR [esi+156], 8
	jne	SHORT $L87504
; Line 4549
	mov	BYTE PTR [esi+8], 2
$L87504:
; Line 4550
	cmp	BYTE PTR [esi+8], 2
	jne	SHORT $L87509
; Line 4551
	push	edi
	call	_abs
	pop	ecx
	movzx	ecx, BYTE PTR [esi+153]
	inc	ecx
	inc	ecx
	cmp	eax, ecx
	jge	SHORT $L87507
	push	ebx
	call	_abs
	pop	ecx
	movzx	ecx, BYTE PTR [esi+153]
	inc	ecx
	inc	ecx
	cmp	eax, ecx
	jge	SHORT $L87507
; Line 4554
	mov	eax, DWORD PTR _md$[esp+20]
	mov	ecx, ebp
	mov	edx, DWORD PTR _opposite[eax*4]
	call	@M_CallWalk@8
	test	eax, eax
	jne	SHORT $L87509
; Line 4555
	mov	BYTE PTR [esi+8], 1
	jmp	SHORT $L87509
$L87507:
; Line 4553
	mov	ecx, ebp
	mov	BYTE PTR [esi+8], 1
	call	@M_StartHeal@4
$L87509:
	pop	edi
; Line 4558
	mov	ecx, ebp
	pop	esi
	pop	ebp
	pop	ebx
	xor	edx, edx
; Line 4559
	add	esp, 4
	jmp	@MAI_Round@8
@MAI_Garg@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@HJCM@MAI_RoundRanged?3?5Invalid?5monster@ ; `string'
PUBLIC	@MAI_RoundRanged@20
;	COMDAT ??_C@_0CE@HJCM@MAI_RoundRanged?3?5Invalid?5monster@
_DATA	SEGMENT
??_C@_0CE@HJCM@MAI_RoundRanged?3?5Invalid?5monster@ DB 'MAI_RoundRanged: '
	DB	'Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_RoundRanged@20
_TEXT	SEGMENT
_i$ = -4
_missile_type$ = -24
_checkdoors$ = 8
_dam$ = 12
_lessmissiles$ = 16
_x2$ = -16
_md$ = -8
_y2$ = -12
_checkdoorsa$ = 8
@MAI_RoundRanged@20 PROC NEAR				; COMDAT
; _i$ = ecx
; _missile_type$ = edx
; Line 4562
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	esi, ecx
; Line 4600
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _missile_type$[ebp], edx
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87550
; Line 4601
	push	esi
	push	OFFSET FLAT:??_C@_0CE@HJCM@MAI_RoundRanged?3?5Invalid?5monster@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87550:
; Line 4602
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 4603
	cmp	DWORD PTR [esi+4], 0
	jne	$L87596
	cmp	BYTE PTR [esi+160], 0
	je	$L87596
; Line 4604
	mov	edx, DWORD PTR [esi+36]
; Line 4608
	mov	ecx, DWORD PTR [esi+32]
	movzx	eax, BYTE PTR [esi+81]
	push	ebx
	push	edi
; Line 4610
	push	DWORD PTR [esi+172]
	mov	ebx, edx
	mov	DWORD PTR _y2$[ebp], eax
	sub	ebx, eax
	movzx	eax, BYTE PTR [esi+80]
	push	DWORD PTR [esi+168]
	mov	edi, ecx
	mov	DWORD PTR -20+[ebp], ebx
	mov	DWORD PTR _x2$[ebp], eax
	sub	edi, eax
	call	@GetDirection@16
; Line 4611
	cmp	BYTE PTR _checkdoors$[ebp], 0
	mov	DWORD PTR _md$[ebp], eax
	je	SHORT $L87555
	cmp	BYTE PTR [esi+160], 255			; 000000ffH
	jae	SHORT $L87555
; Line 4612
	mov	ecx, DWORD PTR _i$[ebp]
	call	@MonstCheckDoors@4
$L87555:
; Line 4613
	mov	edx, 10000				; 00002710H
	mov	cl, 121					; 00000079H
	call	@random@8
	mov	DWORD PTR _checkdoorsa$[ebp], eax
; Line 4614
	push	edi
	call	_abs
; Line 4616
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87557
; Line 4617
	push	ebx
	call	_abs
; Line 4619
	cmp	eax, 2
	pop	ecx
	jl	$LABEL_50$87558
$L87557:
; Line 4622
	cmp	BYTE PTR [esi+160], -1
	jne	$LABEL_50$87558
; Line 4625
	mov	eax, DWORD PTR [esi+32]
	mov	edx, DWORD PTR _x2$[ebp]
	imul	eax, 112				; 00000070H
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR [esi+36]
	mov	al, BYTE PTR _dung_map[eax+ecx]
	mov	ecx, DWORD PTR _y2$[ebp]
	cmp	al, BYTE PTR _dung_map[edx+ecx]
	jne	$LABEL_50$87558
; Line 4627
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87568
; Line 4628
	push	edi
	call	_abs
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L87564
; Line 4629
	push	ebx
	call	_abs
; Line 4631
	cmp	eax, 3
	pop	ecx
	jl	$LABEL_28$87565
$L87564:
; Line 4635
	mov	ecx, DWORD PTR _lessmissiles$[ebp]
	push	4
	pop	edx
	shl	edx, cl
	mov	cl, 122					; 0000007aH
	call	@random@8
	test	eax, eax
	jne	$LABEL_28$87565
; Line 4637
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87568
; Line 4638
	and	DWORD PTR [esi+12], eax
; Line 4639
	push	2
	pop	edx
	mov	cl, 123					; 0000007bH
	call	@random@8
	mov	DWORD PTR [esi+16], eax
$L87568:
; Line 4643
	push	ebx
	mov	BYTE PTR [esi+8], 4
	call	_abs
; Line 4644
	push	edi
	mov	ebx, eax
	call	_abs
	pop	ecx
	cmp	eax, ebx
	pop	ecx
	jg	SHORT $L87570
; Line 4645
	mov	ebx, DWORD PTR -20+[ebp]
; Line 4646
	push	ebx
	call	_abs
; Line 4647
	jmp	SHORT $L90057
$L87570:
; Line 4648
	push	edi
	call	_abs
; Line 4649
	mov	ebx, DWORD PTR -20+[ebp]
$L90057:
	pop	ecx
; Line 4653
	add	eax, eax
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, eax
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [esi+12], edx
	jl	SHORT $L87572
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@DirOK@8
	test	al, al
	je	SHORT $L87572
$LABEL_50$87558:
; Line 4655
	mov	BYTE PTR [esi+8], 1
; Line 4656
	jmp	SHORT $LABEL_28$87565
$L87572:
; Line 4657
	movzx	eax, BYTE PTR [esi+153]
	inc	eax
	mov	ecx, DWORD PTR _lessmissiles$[ebp]
	imul	eax, 500				; 000001f4H
	sar	eax, cl
	cmp	DWORD PTR _checkdoorsa$[ebp], eax
	jge	SHORT $L87576
	push	DWORD PTR _y2$[ebp]
	mov	edx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi+32]
	push	DWORD PTR _x2$[ebp]
	call	@LineClear@16
	test	al, al
	je	SHORT $L87576
; Line 4658
	push	DWORD PTR _dam$[ebp]
	mov	edx, DWORD PTR _missile_type$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartRSpAttack@12
; Line 4659
	jmp	SHORT $LABEL_28$87565
$L87576:
; Line 4660
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	@M_RoundWalk@12
$LABEL_28$87565:
; Line 4663
	cmp	BYTE PTR [esi+8], 1
	jne	$L87590
; Line 4666
	push	edi
	call	_abs
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L87585
	push	ebx
	call	_abs
	cmp	eax, 3
	pop	ecx
	jl	SHORT $L87584
$L87585:
	movzx	eax, BYTE PTR [esi+153]
	inc	eax
	mov	ecx, DWORD PTR _lessmissiles$[ebp]
	inc	eax
	imul	eax, 500				; 000001f4H
	sar	eax, cl
	cmp	DWORD PTR _checkdoorsa$[ebp], eax
	jl	SHORT $L87583
$L87584:
	movzx	eax, BYTE PTR [esi+153]
	inc	eax
	mov	ecx, DWORD PTR _lessmissiles$[ebp]
	imul	eax, 500				; 000001f4H
	sar	eax, cl
	cmp	DWORD PTR _checkdoorsa$[ebp], eax
	jge	SHORT $L87582
$L87583:
	push	DWORD PTR _y2$[ebp]
	mov	edx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi+32]
	push	DWORD PTR _x2$[ebp]
	call	@LineClear@16
	test	al, al
	je	SHORT $L87582
; Line 4667
	push	DWORD PTR _dam$[ebp]
	mov	edx, DWORD PTR _missile_type$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartRSpAttack@12
; Line 4668
	jmp	$L87590
$L87582:
; Line 4669
	push	edi
	call	_abs
; Line 4671
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87588
	push	ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87588
; Line 4679
	movzx	eax, BYTE PTR [esi+153]
	add	eax, 6
	imul	eax, 1000				; 000003e8H
	cmp	DWORD PTR _checkdoorsa$[ebp], eax
	jge	SHORT $L87590
; Line 4680
	mov	eax, DWORD PTR _md$[ebp]
; Line 4681
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [esi+72], eax
	call	@M_StartAttack@4
	jmp	SHORT $L87590
$L87588:
; Line 4673
	push	100					; 00000064H
	mov	cl, 124					; 0000007cH
	pop	edx
	call	@random@8
; Line 4674
	movzx	edx, BYTE PTR [esi+153]
; Line 4676
	lea	ecx, DWORD PTR [edx+5]
	imul	ecx, 1000				; 000003e8H
	cmp	eax, ecx
	jl	SHORT $L87591
	mov	ecx, DWORD PTR [esi+112]
	cmp	ecx, 1
	je	SHORT $L87592
	cmp	ecx, 2
	je	SHORT $L87592
	cmp	ecx, 3
	jne	SHORT $L87590
$L87592:
	cmp	DWORD PTR [esi+116], 0
	jne	SHORT $L87590
	add	edx, 8
	imul	edx, 1000				; 000003e8H
	cmp	eax, edx
	jge	SHORT $L87590
$L87591:
; Line 4677
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk@8
$L87590:
; Line 4685
	cmp	DWORD PTR [esi+4], 0
	pop	edi
	pop	ebx
	jne	SHORT $L87596
; Line 4686
	push	10					; 0000000aH
	mov	cl, 125					; 0000007dH
	pop	edx
	call	@random@8
; Line 4687
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+5]
	call	@M_StartDelay@8
$L87596:
	pop	esi
; Line 4690
	leave
	ret	12					; 0000000cH
@MAI_RoundRanged@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MAI_Magma@4
_TEXT	SEGMENT
@MAI_Magma@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4694
	push	0
	push	4
	push	1
	push	21					; 00000015H
	pop	edx
	call	@MAI_RoundRanged@20
; Line 4695
	ret	0
@MAI_Magma@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MAI_Storm@4
_TEXT	SEGMENT
@MAI_Storm@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4699
	push	0
	push	4
	push	1
	push	22					; 00000016H
	pop	edx
	call	@MAI_RoundRanged@20
; Line 4700
	ret	0
@MAI_Storm@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MAI_Acid@4
_TEXT	SEGMENT
@MAI_Acid@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4704
	push	1
	push	4
	push	0
	push	57					; 00000039H
	pop	edx
	call	@MAI_RoundRanged@20
; Line 4705
	ret	0
@MAI_Acid@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MAI_Diablo@4
_TEXT	SEGMENT
@MAI_Diablo@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4709
	push	0
	push	40					; 00000028H
	push	0
	push	67					; 00000043H
	pop	edx
	call	@MAI_RoundRanged@20
; Line 4710
	ret	0
@MAI_Diablo@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@INOC@MAI_RR2?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	@MAI_RR2@12
;	COMDAT ??_C@_0BM@INOC@MAI_RR2?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BM@INOC@MAI_RR2?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_RR2: Inval'
	DB	'id monster %d', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_RR2@12
_TEXT	SEGMENT
_i$ = -4
_mistype$ = -28
_dam$ = 8
_x2$ = -24
_y2$ = -20
_v38$ = -12
_md$ = -8
@MAI_RR2@12 PROC NEAR					; COMDAT
; _i$ = ecx
; _mistype$ = edx
; Line 4713
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, ecx
	push	esi
; Line 4754
	cmp	ebx, 200				; 000000c8H
	push	edi
	mov	DWORD PTR _mistype$[ebp], edx
	mov	DWORD PTR _i$[ebp], ebx
	jb	SHORT $L87647
; Line 4755
	push	ebx
	push	OFFSET FLAT:??_C@_0BM@INOC@MAI_RR2?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87647:
; Line 4756
	mov	esi, ebx
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 4757
	movzx	eax, BYTE PTR [esi+81]
	mov	edi, DWORD PTR [esi+36]
; Line 4758
	mov	ecx, DWORD PTR [esi+32]
	sub	edi, eax
	movzx	eax, BYTE PTR [esi+80]
	sub	ecx, eax
	push	ecx
	call	_abs
	cmp	eax, 5
	pop	ecx
	jge	$L87652
	push	edi
	call	_abs
	cmp	eax, 5
	pop	ecx
	jge	$L87652
; Line 4762
	cmp	DWORD PTR [esi+4], 0
	jne	$L87653
	cmp	BYTE PTR [esi+160], 0
	je	$L87653
; Line 4763
	mov	edx, DWORD PTR [esi+36]
; Line 4769
	push	DWORD PTR [esi+172]
	movzx	eax, BYTE PTR [esi+81]
	mov	ecx, DWORD PTR [esi+32]
	push	DWORD PTR [esi+168]
	mov	ebx, edx
	mov	DWORD PTR _y2$[ebp], eax
	sub	ebx, eax
	mov	edi, ecx
	movzx	eax, BYTE PTR [esi+80]
	mov	DWORD PTR -16+[ebp], ebx
	mov	DWORD PTR _x2$[ebp], eax
	sub	edi, eax
	call	@GetDirection@16
; Line 4770
	cmp	BYTE PTR [esi+160], 255			; 000000ffH
	mov	DWORD PTR _md$[ebp], eax
	jae	SHORT $L87656
; Line 4771
	mov	ecx, DWORD PTR _i$[ebp]
	call	@MonstCheckDoors@4
$L87656:
; Line 4772
	push	100					; 00000064H
	mov	cl, 121					; 00000079H
	pop	edx
	call	@random@8
	mov	DWORD PTR _v38$[ebp], eax
; Line 4773
	push	edi
	call	_abs
; Line 4775
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87658
	push	ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jl	$L87671
$L87658:
; Line 4777
	cmp	BYTE PTR [esi+160], -1
	jne	$L87671
; Line 4779
	mov	eax, DWORD PTR [esi+32]
	mov	edx, DWORD PTR _x2$[ebp]
	imul	eax, 112				; 00000070H
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR [esi+36]
	mov	al, BYTE PTR _dung_map[eax+ecx]
	mov	ecx, DWORD PTR _y2$[ebp]
	cmp	al, BYTE PTR _dung_map[edx+ecx]
	jne	$L87671
; Line 4780
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87667
; Line 4781
	push	edi
	call	_abs
; Line 4783
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L87664
; Line 4784
	push	ebx
	call	_abs
; Line 4786
	cmp	eax, 3
	pop	ecx
	jl	$LABEL_26$87665
$L87664:
; Line 4789
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87667
; Line 4790
	and	DWORD PTR [esi+12], 0
; Line 4791
	push	2
	pop	edx
	mov	cl, 123					; 0000007bH
	call	@random@8
	mov	DWORD PTR [esi+16], eax
$L87667:
; Line 4796
	push	ebx
	mov	BYTE PTR [esi+8], 4
	mov	DWORD PTR [esi+20], 4
	call	_abs
; Line 4797
	push	edi
	mov	ebx, eax
	call	_abs
	pop	ecx
	cmp	eax, ebx
	pop	ecx
	jg	SHORT $L87669
; Line 4798
	mov	ebx, DWORD PTR -16+[ebp]
; Line 4799
	push	ebx
	call	_abs
; Line 4800
	jmp	SHORT $L90081
$L87669:
; Line 4801
	push	edi
	call	_abs
; Line 4802
	mov	ebx, DWORD PTR -16+[ebp]
$L90081:
	pop	ecx
; Line 4806
	add	eax, eax
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, eax
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [esi+12], edx
	jl	SHORT $L87672
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@DirOK@8
	test	al, al
	jne	SHORT $L87671
$L87672:
; Line 4807
	movzx	eax, BYTE PTR [esi+153]
	add	eax, 16					; 00000010H
	lea	eax, DWORD PTR [eax+eax*4]
	cmp	DWORD PTR _v38$[ebp], eax
	jge	SHORT $LABEL_26$87665
; Line 4808
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	@M_RoundWalk@12
	jmp	SHORT $LABEL_26$87665
$L87671:
; Line 4858
	mov	BYTE PTR [esi+8], 1
$LABEL_26$87665:
; Line 4810
	cmp	BYTE PTR [esi+8], 1
	jne	$LABEL_48$87677
; Line 4815
	push	edi
	call	_abs
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L87683
	push	ebx
	call	_abs
	cmp	eax, 3
	pop	ecx
	jl	SHORT $L87682
$L87683:
	movzx	eax, BYTE PTR [esi+153]
	inc	eax
	inc	eax
	lea	eax, DWORD PTR [eax+eax*4]
	cmp	DWORD PTR _v38$[ebp], eax
	jl	SHORT $L87681
$L87682:
	movzx	eax, BYTE PTR [esi+153]
	inc	eax
	lea	eax, DWORD PTR [eax+eax*4]
	cmp	DWORD PTR _v38$[ebp], eax
	jl	SHORT $L87681
	cmp	DWORD PTR [esi+20], 4
	jne	SHORT $L87680
$L87681:
	push	DWORD PTR _y2$[ebp]
	mov	edx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi+32]
	push	DWORD PTR _x2$[ebp]
	call	@LineClear@16
	test	al, al
; Line 4817
	jne	SHORT $L87695
$L87680:
; Line 4818
	push	edi
	call	_abs
	pop	ecx
; Line 4820
	push	2
	pop	edi
	cmp	eax, edi
	jge	SHORT $L87686
	push	ebx
	call	_abs
	cmp	eax, edi
	pop	ecx
	jge	SHORT $L87686
; Line 4832
	push	100					; 00000064H
	mov	cl, 124					; 0000007cH
	pop	edx
	call	@random@8
; Line 4834
	movzx	ecx, BYTE PTR [esi+153]
	add	ecx, 4
	lea	ecx, DWORD PTR [ecx+ecx*4]
	add	ecx, ecx
	cmp	eax, ecx
	jge	SHORT $LABEL_47$87691
; Line 4844
	mov	eax, DWORD PTR _md$[ebp]
; Line 4845
	mov	edx, edi
	mov	cl, 124					; 0000007cH
	mov	DWORD PTR [esi+72], eax
	call	@random@8
; Line 4847
	test	eax, eax
	je	SHORT $L87695
; Line 4848
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartAttack@4
; Line 4849
	jmp	SHORT $LABEL_47$87691
$L87695:
; Line 4852
	push	DWORD PTR _dam$[ebp]
	mov	edx, DWORD PTR _mistype$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartRSpAttack@12
; Line 4853
	jmp	SHORT $LABEL_47$87691
$L87686:
; Line 4822
	push	100					; 00000064H
	mov	cl, 124					; 0000007cH
	pop	edx
	call	@random@8
; Line 4823
	movzx	ecx, BYTE PTR [esi+153]
; Line 4827
	lea	edx, DWORD PTR [ecx+ecx*4+25]
	add	edx, edx
	cmp	eax, edx
	jl	SHORT $L87689
	mov	edx, DWORD PTR [esi+112]
	cmp	edx, 1
	je	SHORT $L87690
	cmp	edx, edi
	je	SHORT $L87690
	cmp	edx, 3
	jne	SHORT $LABEL_47$87691
$L87690:
	cmp	DWORD PTR [esi+116], 0
	jne	SHORT $LABEL_47$87691
	lea	ecx, DWORD PTR [ecx+ecx*4+40]
	add	ecx, ecx
	cmp	eax, ecx
	jge	SHORT $LABEL_47$87691
$L87689:
; Line 4828
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk@8
$LABEL_47$87691:
; Line 4836
	mov	DWORD PTR [esi+20], 1
$LABEL_48$87677:
; Line 4838
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $L87653
; Line 4839
	push	10					; 0000000aH
	mov	cl, 125					; 0000007dH
	pop	edx
	call	@random@8
; Line 4840
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+5]
	call	@M_StartDelay@8
; Line 4842
	jmp	SHORT $L87653
$L87652:
; Line 4759
	mov	ecx, ebx
	call	@MAI_SkelSd@4
$L87653:
	pop	edi
	pop	esi
	pop	ebx
; Line 4861
	leave
	ret	4
@MAI_RR2@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MAI_Mega@4
_TEXT	SEGMENT
@MAI_Mega@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4865
	push	0
	push	49					; 00000031H
	pop	edx
	call	@MAI_RR2@12
; Line 4866
	ret	0
@MAI_Mega@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@MIEG@MAI_Golum?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BO@MIEG@MAI_Golum?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@MIEG@MAI_Golum?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Golum: I'
	DB	'nvalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Golum@4
_TEXT	SEGMENT
_i$ = -4
_md$ = -12
_have_enemy$ = -8
@MAI_Golum@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 4869
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 4875
	cmp	edi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], edi
	jb	SHORT $L87715
; Line 4876
	push	edi
	push	OFFSET FLAT:??_C@_0BO@MIEG@MAI_Golum?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87715:
; Line 4878
	mov	esi, edi
	imul	esi, 228				; 000000e4H
; Line 4879
	cmp	DWORD PTR _monster[esi+32], 1
	jne	SHORT $L87717
	cmp	DWORD PTR _monster[esi+36], 0
	je	$L87719
$L87717:
; Line 4885
	mov	eax, DWORD PTR _monster[esi+4]
	cmp	eax, 6
	je	$L87719
	cmp	eax, 11					; 0000000bH
	je	$L87719
	cmp	eax, 1
	jl	SHORT $L87718
	cmp	eax, 3
	jle	$L87719
$L87718:
; Line 4889
	test	BYTE PTR _monster[esi+156], 16		; 00000010H
	jne	SHORT $L87720
; Line 4890
	mov	ecx, edi
	call	@M_Enemy@4
$L87720:
; Line 4892
	mov	eax, DWORD PTR _monster[esi+156]
	not	eax
	shr	eax, 10					; 0000000aH
	and	eax, 1
; Line 4894
	cmp	DWORD PTR _monster[esi+4], 4
	mov	DWORD PTR _have_enemy$[ebp], eax
	je	$L87719
; Line 4898
	mov	eax, DWORD PTR _monster[esi+76]
; Line 4900
	mov	ecx, DWORD PTR _monster[esi+32]
; Line 4902
	imul	eax, 228				; 000000e4H
	mov	edx, DWORD PTR _monster[esi+36]
	mov	edi, ecx
; Line 4904
	push	DWORD PTR _monster[eax+36]
	sub	edi, DWORD PTR _monster[eax+40]
	mov	ebx, edx
	push	DWORD PTR _monster[eax+32]
	sub	ebx, DWORD PTR _monster[eax+44]
	call	@GetDirection@16
	mov	DWORD PTR _md$[ebp], eax
; Line 4905
	mov	DWORD PTR _monster[esi+72], eax
; Line 4906
	push	edi
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	$L87723
	push	ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	$L87723
; Line 4909
	cmp	DWORD PTR _have_enemy$[ebp], 0
	je	$L87724
; Line 4910
	mov	eax, DWORD PTR _monster[esi+76]
; Line 4911
	imul	eax, 228				; 000000e4H
	mov	cl, BYTE PTR _monster[eax+32]
	mov	BYTE PTR _monster[esi+80], cl
; Line 4912
	mov	cl, BYTE PTR _monster[eax+36]
; Line 4913
	lea	eax, DWORD PTR _monster[eax+160]
	mov	BYTE PTR _monster[esi+81], cl
	cmp	BYTE PTR [eax], 0
	jne	SHORT $L87730
; Line 4914
	or	BYTE PTR [eax], -1
; Line 4915
	mov	eax, DWORD PTR _monster[esi+76]
	imul	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR _monster[esi+32]
	mov	DWORD PTR _monster[eax+168], ecx
; Line 4916
	mov	eax, DWORD PTR _monster[esi+76]
	imul	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR _monster[esi+36]
; Line 4917
	xor	edx, edx
	mov	DWORD PTR _monster[eax+172], ecx
$L87728:
; Line 4918
	xor	ecx, ecx
$L87731:
; Line 4919
	mov	eax, DWORD PTR _monster[esi+32]
	add	eax, ecx
	imul	eax, 112				; 00000070H
	add	eax, edx
	add	eax, DWORD PTR _monster[esi+36]
	mov	eax, DWORD PTR _dMonster[eax*4-904]
; Line 4920
	test	eax, eax
	jle	SHORT $L87732
; Line 4921
	imul	eax, 228				; 000000e4H
	or	BYTE PTR _monster[eax+160], -1
$L87732:
	inc	ecx
	cmp	ecx, 5
	jl	SHORT $L87731
	inc	edx
	cmp	edx, 5
	jl	SHORT $L87728
$L87730:
; Line 4925
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartAttack@4
; Line 4926
	jmp	SHORT $L87719
$L87723:
; Line 4907
	cmp	DWORD PTR _have_enemy$[ebp], 0
	je	SHORT $L87724
	mov	ecx, DWORD PTR _i$[ebp]
	call	@MAI_Path@4
	test	eax, eax
	jne	SHORT $L87719
$L87724:
; Line 4929
	lea	esi, DWORD PTR _monster[esi+28]
	inc	BYTE PTR [esi]
	mov	al, BYTE PTR [esi]
; Line 4930
	cmp	al, 8
	jbe	SHORT $L87735
; Line 4931
	mov	BYTE PTR [esi], 5
$L87735:
; Line 4933
	mov	ebx, DWORD PTR _i$[ebp]
	mov	eax, ebx
	mov	ecx, ebx
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[eax+112]
	call	@M_CallWalk@8
; Line 4934
	test	eax, eax
	jne	SHORT $L87719
; Line 4935
	mov	ecx, DWORD PTR _md$[ebp]
	lea	esi, DWORD PTR [ecx-1]
	and	esi, 7
; Line 4936
	xor	edi, edi
$L87737:
	test	eax, eax
	jne	SHORT $L90093
; Line 4937
	inc	esi
; Line 4938
	mov	ecx, ebx
	and	esi, 7
	mov	edx, esi
	call	@DirOK@8
	inc	edi
	cmp	edi, 8
	jl	SHORT $L87737
; Line 4940
	test	eax, eax
	je	SHORT $L87719
$L90093:
; Line 4943
	mov	edx, esi
	mov	ecx, ebx
	call	@M_WalkDir@8
$L87719:
	pop	edi
	pop	esi
	pop	ebx
; Line 4945
	leave
	ret	0
@MAI_Golum@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@NIAC@MAI_SkelKing?3?5Invalid?5monster?5?$CFd@ ; `string'
PUBLIC	@M_SpawnSkel@12
;	COMDAT ??_C@_0CB@NIAC@MAI_SkelKing?3?5Invalid?5monster?5?$CFd@
_DATA	SEGMENT
??_C@_0CB@NIAC@MAI_SkelKing?3?5Invalid?5monster?5?$CFd@ DB 'MAI_SkelKing:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_SkelKing@4
_TEXT	SEGMENT
_i$ = -4
_v4$ = -12
_v32$ = -28
_x2$ = -24
_v35$ = -16
_y2$ = -32
_md$ = -8
@MAI_SkelKing@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 4948
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	esi, ecx
; Line 4985
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87773
; Line 4986
	push	esi
	push	OFFSET FLAT:??_C@_0CB@NIAC@MAI_SkelKing?3?5Invalid?5monster?5?$CFd@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87773:
; Line 4987
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 4988
	cmp	DWORD PTR [esi+4], 0
	jne	$L87817
	cmp	BYTE PTR [esi+160], 0
	je	$L87817
; Line 4989
	mov	edx, DWORD PTR [esi+36]
	push	ebx
; Line 4990
	movzx	ebx, BYTE PTR [esi+81]
; Line 4993
	mov	ecx, DWORD PTR [esi+32]
	mov	eax, edx
	push	edi
	sub	eax, ebx
; Line 4995
	push	DWORD PTR [esi+172]
	mov	DWORD PTR -20+[ebp], eax
	mov	DWORD PTR _v4$[ebp], eax
	mov	edi, ecx
	movzx	eax, BYTE PTR [esi+80]
	push	DWORD PTR [esi+168]
	mov	DWORD PTR _y2$[ebp], ebx
	mov	DWORD PTR _x2$[ebp], eax
	sub	edi, eax
	call	@GetDirection@16
; Line 4996
	cmp	BYTE PTR [esi+160], 255			; 000000ffH
	mov	DWORD PTR _md$[ebp], eax
	jae	SHORT $L87778
; Line 4997
	mov	ecx, DWORD PTR _i$[ebp]
	call	@MonstCheckDoors@4
$L87778:
; Line 4998
	push	100					; 00000064H
	mov	cl, 126					; 0000007eH
	pop	edx
	call	@random@8
	mov	DWORD PTR _v35$[ebp], eax
; Line 4999
	push	edi
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87780
	push	DWORD PTR _v4$[ebp]
	call	_abs
	cmp	eax, 2
	pop	ecx
	jl	$L87795
$L87780:
	cmp	BYTE PTR [esi+160], -1
	jne	$L87795
; Line 5000
	mov	eax, DWORD PTR _x2$[ebp]
; Line 5001
	mov	ecx, DWORD PTR [esi+32]
	imul	eax, 112				; 00000070H
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR [esi+36]
	lea	eax, DWORD PTR _dung_map[eax+ebx]
	mov	DWORD PTR _v32$[ebp], eax
	mov	cl, BYTE PTR _dung_map[ecx+edx]
	cmp	cl, BYTE PTR [eax]
	jne	$L87795
; Line 5002
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87789
; Line 5003
	push	edi
	call	_abs
; Line 5005
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L87785
; Line 5006
	push	DWORD PTR _v4$[ebp]
	call	_abs
; Line 5008
	cmp	eax, 3
	pop	ecx
	jl	$LABEL_26$87786
$L87785:
; Line 5011
	push	4
	mov	cl, 127					; 0000007fH
	pop	edx
	call	@random@8
	test	eax, eax
	jne	$LABEL_26$87786
; Line 5013
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87789
; Line 5014
	and	DWORD PTR [esi+12], eax
; Line 5015
	push	2
	pop	edx
	mov	cl, 128					; 00000080H
	call	@random@8
	mov	DWORD PTR [esi+16], eax
$L87789:
; Line 5019
	push	DWORD PTR _v4$[ebp]
	mov	BYTE PTR [esi+8], 4
	call	_abs
; Line 5020
	push	edi
	mov	ebx, eax
	call	_abs
	pop	ecx
	cmp	eax, ebx
	pop	ecx
	jg	SHORT $L87791
; Line 5021
	mov	eax, DWORD PTR -20+[ebp]
; Line 5022
	push	eax
	mov	DWORD PTR _v4$[ebp], eax
	call	_abs
	pop	ecx
; Line 5023
	jmp	SHORT $L87792
$L87791:
; Line 5024
	push	edi
	call	_abs
	pop	ecx
; Line 5025
	mov	ecx, DWORD PTR -20+[ebp]
	mov	DWORD PTR _v4$[ebp], ecx
$L87792:
; Line 5027
	mov	ecx, DWORD PTR [esi+12]
; Line 5029
	add	eax, eax
	cmp	ecx, eax
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [esi+12], edx
	jl	SHORT $L87794
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@DirOK@8
	test	al, al
	jne	SHORT $L87795
$L87794:
; Line 5030
	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [esi+36]
	imul	eax, 112				; 00000070H
	mov	al, BYTE PTR _dung_map[eax+ecx]
	mov	ecx, DWORD PTR _v32$[ebp]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $L87795
; Line 5032
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	@M_RoundWalk@12
	test	al, al
	jne	SHORT $LABEL_26$87786
; Line 5033
	push	10					; 0000000aH
	mov	cl, 125					; 0000007dH
	pop	edx
	call	@random@8
; Line 5034
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+10]
	call	@M_StartDelay@8
; Line 5036
	jmp	SHORT $LABEL_26$87786
$L87795:
; Line 5041
	mov	BYTE PTR [esi+8], 1
$LABEL_26$87786:
; Line 5043
	cmp	BYTE PTR [esi+8], 1
	jne	$L87813
; Line 5046
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	$L87801
	push	edi
	call	_abs
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L87804
	push	DWORD PTR _v4$[ebp]
	call	_abs
	cmp	eax, 3
	pop	ecx
	jl	SHORT $L87803
$L87804:
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax*4+35]
	cmp	DWORD PTR _v35$[ebp], eax
	jl	SHORT $L87802
$L87803:
	cmp	DWORD PTR _v35$[ebp], 6
	jge	SHORT $L87801
$L87802:
	push	DWORD PTR _y2$[ebp]
	mov	edx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi+32]
	push	DWORD PTR _x2$[ebp]
	call	@LineClear@16
	test	al, al
	je	SHORT $L87801
; Line 5047
	mov	eax, DWORD PTR _md$[ebp]
; Line 5049
	mov	ecx, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	edi, DWORD PTR _offset_x[eax]
	mov	ebx, DWORD PTR _offset_y[eax]
	add	edi, DWORD PTR [esi+32]
	add	ebx, DWORD PTR [esi+36]
	push	ebx
	mov	edx, edi
	call	@PosOkMonst@12
	test	eax, eax
	je	$L87813
	cmp	DWORD PTR _nummonsters, 200		; 000000c8H
	jge	$L87813
; Line 5050
	push	DWORD PTR _md$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@M_SpawnSkel@12
; Line 5051
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_StartSpStand@8
; Line 5053
	jmp	$L87813
$L87801:
; Line 5054
	push	edi
	call	_abs
; Line 5056
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87808
	push	DWORD PTR _v4$[ebp]
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87808
; Line 5067
	movzx	eax, BYTE PTR [esi+153]
	add	eax, 20					; 00000014H
	cmp	DWORD PTR _v35$[ebp], eax
	jge	SHORT $L87813
; Line 5068
	mov	eax, DWORD PTR _md$[ebp]
; Line 5069
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [esi+72], eax
	call	@M_StartAttack@4
	jmp	SHORT $L87813
$L87808:
; Line 5058
	push	100					; 00000064H
	mov	cl, 129					; 00000081H
	pop	edx
	call	@random@8
; Line 5059
	movzx	ecx, BYTE PTR [esi+153]
; Line 5061
	lea	edx, DWORD PTR [ecx+25]
	cmp	eax, edx
	jl	SHORT $L87810
	mov	edx, DWORD PTR [esi+112]
	cmp	edx, 1
	je	SHORT $L87812
	cmp	edx, 2
	je	SHORT $L87812
	cmp	edx, 3
	jne	SHORT $L87811
$L87812:
	cmp	DWORD PTR [esi+116], 0
	jne	SHORT $L87811
	add	ecx, 75					; 0000004bH
	cmp	eax, ecx
	jl	SHORT $L87810
$L87811:
; Line 5062
	push	10					; 0000000aH
	mov	cl, 130					; 00000082H
	pop	edx
	call	@random@8
; Line 5063
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+10]
	call	@M_StartDelay@8
; Line 5064
	jmp	SHORT $L87813
$L87810:
; Line 5065
	mov	edx, DWORD PTR _md$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk@8
$L87813:
; Line 5073
	cmp	DWORD PTR [esi+4], 0
	pop	edi
	pop	ebx
	jne	SHORT $L87817
; Line 5074
	mov	eax, DWORD PTR [esi+220]
	mov	ecx, DWORD PTR _md$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4+8]
	mov	DWORD PTR [esi+84], eax
$L87817:
	pop	esi
; Line 5076
	leave
	ret	0
@MAI_SkelKing@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@KHBL@MAI_Rhino?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BO@KHBL@MAI_Rhino?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@KHBL@MAI_Rhino?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Rhino: I'
	DB	'nvalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Rhino@4
_TEXT	SEGMENT
_i$ = -4
_v4$ = -8
_v30$ = -28
_v1$ = -20
_midir$ = -12
_v2$ = -16
@MAI_Rhino@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 5080
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	esi, ecx
; Line 5114
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87847
; Line 5115
	push	esi
	push	OFFSET FLAT:??_C@_0BO@KHBL@MAI_Rhino?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87847:
; Line 5116
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 5117
	cmp	DWORD PTR [esi+4], 0
	jne	$L87887
	cmp	BYTE PTR [esi+160], 0
	je	$L87887
; Line 5118
	mov	edx, DWORD PTR [esi+36]
; Line 5122
	mov	ecx, DWORD PTR [esi+32]
	movzx	eax, BYTE PTR [esi+81]
	push	ebx
	push	edi
; Line 5124
	push	DWORD PTR [esi+172]
	mov	ebx, edx
	mov	DWORD PTR _v2$[ebp], eax
	sub	ebx, eax
	movzx	eax, BYTE PTR [esi+80]
	push	DWORD PTR [esi+168]
	mov	edi, ecx
	mov	DWORD PTR -24+[ebp], ebx
	mov	DWORD PTR _v4$[ebp], ebx
	mov	DWORD PTR _v1$[ebp], eax
	sub	edi, eax
	call	@GetDirection@16
; Line 5125
	cmp	BYTE PTR [esi+160], 255			; 000000ffH
	mov	DWORD PTR _midir$[ebp], eax
	jae	SHORT $L87852
; Line 5126
	mov	ecx, DWORD PTR _i$[ebp]
	call	@MonstCheckDoors@4
$L87852:
; Line 5127
	push	100					; 00000064H
	mov	cl, 131					; 00000083H
	pop	edx
	call	@random@8
	mov	DWORD PTR _v30$[ebp], eax
; Line 5128
	push	edi
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87854
	push	ebx
	call	_abs
	cmp	eax, 2
	pop	ecx
	jl	$L87866
$L87854:
; Line 5129
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87862
; Line 5130
	push	edi
	call	_abs
; Line 5132
	cmp	eax, 5
	pop	ecx
	jge	SHORT $L87858
; Line 5133
	push	ebx
	call	_abs
; Line 5135
	cmp	eax, 5
	pop	ecx
	jl	$LABEL_23$87859
$L87858:
; Line 5138
	push	4
	mov	cl, 132					; 00000084H
	pop	edx
	call	@random@8
	test	eax, eax
	je	$LABEL_23$87859
; Line 5140
	cmp	BYTE PTR [esi+8], 4
	je	SHORT $L87862
; Line 5141
	and	DWORD PTR [esi+12], 0
; Line 5142
	push	2
	pop	edx
	mov	cl, 133					; 00000085H
	call	@random@8
	mov	DWORD PTR [esi+16], eax
$L87862:
; Line 5146
	push	ebx
	mov	BYTE PTR [esi+8], 4
	call	_abs
; Line 5147
	push	edi
	mov	ebx, eax
	call	_abs
	pop	ecx
	cmp	eax, ebx
	pop	ecx
	jg	SHORT $L87864
; Line 5148
	mov	eax, DWORD PTR -24+[ebp]
; Line 5149
	push	eax
	mov	DWORD PTR _v4$[ebp], eax
	call	_abs
	pop	ecx
; Line 5150
	jmp	SHORT $L87865
$L87864:
; Line 5151
	push	edi
	call	_abs
	pop	ecx
; Line 5152
	mov	ecx, DWORD PTR -24+[ebp]
	mov	DWORD PTR _v4$[ebp], ecx
$L87865:
; Line 5154
	mov	ecx, DWORD PTR [esi+12]
; Line 5156
	add	eax, eax
	cmp	ecx, eax
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [esi+12], edx
	jge	SHORT $L87866
	mov	eax, DWORD PTR [esi+32]
	mov	edx, DWORD PTR _v1$[ebp]
	imul	eax, 112				; 00000070H
	imul	edx, 112				; 00000070H
	mov	ecx, DWORD PTR [esi+36]
	mov	al, BYTE PTR _dung_map[eax+ecx]
	mov	ecx, DWORD PTR _v2$[ebp]
	cmp	al, BYTE PTR _dung_map[edx+ecx]
	jne	SHORT $L87866
; Line 5158
	mov	edx, DWORD PTR _midir$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	@M_RoundWalk@12
	test	al, al
	jne	SHORT $LABEL_23$87859
; Line 5159
	push	10					; 0000000aH
	mov	cl, 125					; 0000007dH
	pop	edx
	call	@random@8
; Line 5160
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+10]
	call	@M_StartDelay@8
; Line 5162
	jmp	SHORT $LABEL_23$87859
$L87866:
; Line 5165
	mov	BYTE PTR [esi+8], 1
$LABEL_23$87859:
; Line 5167
	cmp	BYTE PTR [esi+8], 1
	jne	$L87883
; Line 5177
	push	edi
	call	_abs
	cmp	eax, 5
	pop	ecx
	jge	SHORT $L87873
	push	DWORD PTR _v4$[ebp]
	call	_abs
	cmp	eax, 5
	pop	ecx
	jl	$L87872
$L87873:
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax+eax+43]
	cmp	DWORD PTR _v30$[ebp], eax
	jge	SHORT $L87872
	push	DWORD PTR _v2$[ebp]
	mov	ebx, DWORD PTR _i$[ebp]
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:@PosOkMonst@12
	push	DWORD PTR _v1$[ebp]
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	call	@LineClearF1@24
	test	al, al
	je	SHORT $L87872
; Line 5178
	xor	edi, edi
	mov	edx, DWORD PTR [esi+36]
	push	edi
	push	edi
	push	ebx
	mov	ecx, DWORD PTR [esi+32]
	push	DWORD PTR [esi+76]
	push	20					; 00000014H
	push	DWORD PTR _midir$[ebp]
	push	DWORD PTR _v2$[ebp]
	push	DWORD PTR _v1$[ebp]
	call	@AddMissile@40
	cmp	eax, -1
	je	$L87883
; Line 5179
	mov	eax, DWORD PTR [esi+224]
	cmp	DWORD PTR [eax+20], edi
	je	SHORT $L87875
; Line 5180
	push	3
	mov	ecx, ebx
	pop	edx
	call	@PlayEffect@8
$L87875:
; Line 5183
	mov	ecx, DWORD PTR [esi+32]
	or	eax, -1
	imul	ecx, 112				; 00000070H
	sub	eax, ebx
	add	ecx, DWORD PTR [esi+36]
	mov	DWORD PTR [esi+4], 14			; 0000000eH
	mov	DWORD PTR _dMonster[ecx*4], eax
; Line 5185
	jmp	$L87883
$L87872:
; Line 5186
	push	edi
	call	_abs
; Line 5188
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87878
	push	DWORD PTR _v4$[ebp]
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87878
; Line 5201
	movzx	eax, BYTE PTR [esi+153]
	lea	eax, DWORD PTR [eax+eax+28]
	cmp	DWORD PTR _v30$[ebp], eax
	jge	SHORT $L87883
; Line 5202
	mov	eax, DWORD PTR _midir$[ebp]
; Line 5203
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [esi+72], eax
	call	@M_StartAttack@4
	jmp	SHORT $L87883
$L87878:
; Line 5190
	push	100					; 00000064H
	mov	cl, 134					; 00000086H
	pop	edx
	call	@random@8
; Line 5191
	movzx	ecx, BYTE PTR [esi+153]
	add	ecx, ecx
; Line 5195
	lea	edx, DWORD PTR [ecx+33]
	cmp	eax, edx
	jl	SHORT $L87880
	mov	edx, DWORD PTR [esi+112]
	cmp	edx, 1
	je	SHORT $L87882
	cmp	edx, 2
	je	SHORT $L87882
	cmp	edx, 3
	jne	SHORT $L87881
$L87882:
	cmp	DWORD PTR [esi+116], 0
	jne	SHORT $L87881
	add	ecx, 83					; 00000053H
	cmp	eax, ecx
	jl	SHORT $L87880
$L87881:
; Line 5196
	push	10					; 0000000aH
	mov	cl, 135					; 00000087H
	pop	edx
	call	@random@8
; Line 5197
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+10]
	call	@M_StartDelay@8
; Line 5198
	jmp	SHORT $L87883
$L87880:
; Line 5199
	mov	edx, DWORD PTR _midir$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@M_CallWalk@8
$L87883:
; Line 5207
	cmp	DWORD PTR [esi+4], 0
	pop	edi
	pop	ebx
	jne	SHORT $L87887
; Line 5208
	mov	eax, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+220]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR [esi+84], eax
$L87887:
	pop	esi
; Line 5210
	leave
	ret	0
@MAI_Rhino@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@FK@MAI_Counselor?3?5Invalid?5monster?5?$CF@ ; `string'
;	COMDAT ??_C@_0CC@FK@MAI_Counselor?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT
??_C@_0CC@FK@MAI_Counselor?3?5Invalid?5monster?5?$CF@ DB 'MAI_Counselor: '
	DB	'Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Counselor@4
_TEXT	SEGMENT
_i$ = -16
_v16$ = -8
_v17$ = -8
_md$ = -12
_y2$ = -4
_v39$ = -8
@MAI_Counselor@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5213
	sub	esp, 16					; 00000010H
	push	esi
	mov	esi, ecx
; Line 5253
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[esp+20], esi
	jb	SHORT $L87923
; Line 5254
	push	esi
	push	OFFSET FLAT:??_C@_0CC@FK@MAI_Counselor?3?5Invalid?5monster?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87923:
; Line 5256
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L87943
	cmp	BYTE PTR _monster[esi+160], 0
	je	$L87943
; Line 5257
	mov	ecx, DWORD PTR _monster[esi+32]
; Line 5260
	mov	edx, DWORD PTR _monster[esi+36]
; Line 5261
	movzx	eax, BYTE PTR _monster[esi+81]
	push	ebx
	push	ebp
	movzx	ebx, BYTE PTR _monster[esi+80]
	push	edi
	mov	edi, ecx
; Line 5263
	push	DWORD PTR _monster[esi+172]
	mov	ebp, edx
	sub	edi, ebx
	mov	DWORD PTR _y2$[esp+36], eax
	push	DWORD PTR _monster[esi+168]
	sub	ebp, eax
	call	@GetDirection@16
; Line 5264
	cmp	BYTE PTR _monster[esi+160], 255		; 000000ffH
	mov	DWORD PTR _md$[esp+32], eax
	jae	SHORT $L87928
; Line 5265
	mov	ecx, DWORD PTR _i$[esp+32]
	call	@MonstCheckDoors@4
$L87928:
; Line 5266
	push	100					; 00000064H
	mov	cl, 121					; 00000079H
	pop	edx
	call	@random@8
	mov	DWORD PTR _v39$[esp+32], eax
; Line 5267
	mov	al, BYTE PTR _monster[esi+8]
; Line 5268
	cmp	al, 2
	jne	SHORT $L87929
; Line 5269
	lea	ecx, DWORD PTR _monster[esi+12]
	mov	eax, DWORD PTR [ecx]
; Line 5273
	lea	edx, DWORD PTR [eax+1]
; Line 5275
	mov	DWORD PTR [ecx], edx
	lea	ecx, DWORD PTR [eax-3]
	test	ecx, ecx
	setl	cl
	cmp	eax, 3
	sete	al
; Line 5276
	or	cl, al
	je	$LABEL_21$87932
; Line 5277
	mov	eax, DWORD PTR _md$[esp+32]
	mov	ecx, DWORD PTR _i$[esp+32]
	mov	edx, DWORD PTR _opposite[eax*4]
	call	@M_CallWalk@8
; Line 5278
	jmp	$LABEL_39$87931
$L87929:
; Line 5282
	cmp	al, 4
	jne	$L87933
; Line 5283
	push	ebp
	call	_abs
; Line 5284
	push	edi
	mov	DWORD PTR _v16$[esp+40], eax
	call	_abs
	cmp	eax, DWORD PTR _v16$[esp+40]
	pop	ecx
	pop	ecx
	jg	SHORT $L87934
; Line 5285
	push	ebp
; Line 5286
	jmp	SHORT $L90130
$L87934:
; Line 5287
	push	edi
$L90130:
	call	_abs
	pop	ecx
	mov	DWORD PTR _v17$[esp+32], eax
; Line 5291
	push	edi
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L87938
	push	ebp
	call	_abs
	cmp	eax, 2
	pop	ecx
	jl	SHORT $LABEL_21$87932
$L87938:
	cmp	BYTE PTR _monster[esi+160], -1
	jne	SHORT $LABEL_21$87932
	mov	eax, DWORD PTR _monster[esi+32]
	mov	ecx, DWORD PTR _monster[esi+36]
	imul	eax, 112				; 00000070H
	imul	ebx, 112				; 00000070H
	mov	al, BYTE PTR _dung_map[eax+ecx]
	mov	ecx, DWORD PTR _y2$[esp+32]
	cmp	al, BYTE PTR _dung_map[ebx+ecx]
	jne	SHORT $LABEL_21$87932
; Line 5302
	lea	eax, DWORD PTR _monster[esi+12]
	mov	ecx, DWORD PTR [eax]
; Line 5303
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _v17$[esp+32]
	add	eax, eax
; Line 5304
	cmp	ecx, eax
	jl	SHORT $L87942
; Line 5306
	mov	edx, DWORD PTR _md$[esp+32]
	mov	ecx, DWORD PTR _i$[esp+32]
	call	@DirOK@8
	test	eax, eax
	jne	SHORT $LABEL_21$87932
$L87942:
; Line 5309
	mov	edx, DWORD PTR _md$[esp+32]
	mov	ecx, DWORD PTR _i$[esp+32]
	lea	eax, DWORD PTR _monster[esi+16]
	push	eax
	call	@M_RoundWalk@12
	jmp	$LABEL_39$87931
$LABEL_21$87932:
; Line 5297
	mov	edx, DWORD PTR _md$[esp+32]
	mov	ecx, DWORD PTR _i$[esp+32]
	push	1
	mov	BYTE PTR _monster[esi+8], 1
	call	@M_StartFadein@12
; Line 5298
	jmp	$LABEL_39$87931
$L87933:
; Line 5317
	cmp	al, 1
	jne	$LABEL_39$87931
; Line 5319
	push	edi
	call	_abs
; Line 5321
	cmp	eax, 2
	pop	ecx
	jge	$L87946
	push	ebp
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	$L87946
; Line 5346
	mov	eax, DWORD PTR _md$[esp+32]
	mov	ecx, DWORD PTR _monster[esi+148]
	mov	DWORD PTR _monster[esi+72], eax
	mov	eax, DWORD PTR _monster[esi+144]
	sar	eax, 1
	sub	ecx, eax
; Line 5347
	jns	SHORT $L87959
; Line 5348
	mov	BYTE PTR _monster[esi+8], 2
	jmp	$LABEL_29$87957
$L87959:
; Line 5357
	cmp	DWORD PTR _monster[esi+112], 13		; 0000000dH
	je	SHORT $L87963
	push	100					; 00000064H
	mov	cl, 105					; 00000069H
	pop	edx
	call	@random@8
	movzx	ecx, BYTE PTR _monster[esi+153]
	lea	ecx, DWORD PTR [ecx+ecx+20]
	cmp	eax, ecx
	jge	$L87955
$L87963:
; Line 5358
	mov	edi, DWORD PTR _i$[esp+32]
	xor	ebx, ebx
	push	ebx
	or	edx, -1
	mov	ecx, edi
	call	@M_StartRAttack@12
; Line 5359
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	ebx
	push	4
	push	edi
	push	1
	push	11					; 0000000bH
	push	DWORD PTR _monster[esi+72]
	push	ebx
	push	ebx
	call	@AddMissile@40
; Line 5360
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	ebx
	push	4
	push	edi
	push	1
	push	12					; 0000000cH
	push	DWORD PTR _monster[esi+72]
	push	ebx
	push	ebx
	call	@AddMissile@40
; Line 5361
	jmp	$LABEL_39$87931
$L87946:
; Line 5323
	movzx	eax, BYTE PTR _monster[esi+153]
	add	eax, 10					; 0000000aH
	lea	eax, DWORD PTR [eax+eax*4]
	cmp	DWORD PTR _v39$[esp+32], eax
	jge	SHORT $L87949
; Line 5325
	push	DWORD PTR _y2$[esp+32]
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	ebx
	call	@LineClear@16
	test	eax, eax
	je	SHORT $L87949
; Line 5328
	movzx	edx, BYTE PTR _monster[esi+198]
	lea	edi, DWORD PTR _monster[esi+197]
	mov	cl, 77					; 0000004dH
	movzx	eax, BYTE PTR [edi]
	sub	edx, eax
	inc	edx
	call	@random@8
; Line 5332
	movzx	ecx, BYTE PTR [edi]
	add	ecx, eax
	movzx	eax, BYTE PTR _monster[esi+153]
	push	ecx
	mov	ecx, DWORD PTR _i$[esp+36]
	movzx	edx, BYTE PTR _counsmiss[eax]
	call	@M_StartRAttack@12
; Line 5333
	jmp	SHORT $LABEL_39$87931
$L87949:
; Line 5336
	push	100					; 00000064H
	mov	cl, 124					; 0000007cH
	pop	edx
	call	@random@8
	cmp	eax, 30					; 0000001eH
	jge	SHORT $L87955
; Line 5338
	mov	BYTE PTR _monster[esi+8], 4
$LABEL_29$87957:
; Line 5351
	mov	edx, DWORD PTR _md$[esp+32]
	mov	ecx, DWORD PTR _i$[esp+32]
	and	DWORD PTR _monster[esi+12], 0
	push	0
	call	@M_StartFadeout@12
; Line 5352
	jmp	SHORT $LABEL_39$87931
$L87955:
; Line 5364
	push	10					; 0000000aH
	mov	cl, 105					; 00000069H
	pop	edx
	call	@random@8
; Line 5365
	movzx	ecx, BYTE PTR _monster[esi+153]
	push	5
	pop	edx
	sub	edx, ecx
	mov	ecx, DWORD PTR _i$[esp+32]
	lea	edx, DWORD PTR [eax+edx*2]
	call	@M_StartDelay@8
$LABEL_39$87931:
	cmp	DWORD PTR _monster[esi+4], 0
	pop	edi
	pop	ebp
	pop	ebx
	jne	SHORT $L87943
	push	10					; 0000000aH
	mov	cl, 125					; 0000007dH
	pop	edx
	call	@random@8
	mov	ecx, DWORD PTR _i$[esp+20]
	lea	edx, DWORD PTR [eax+5]
	pop	esi
; Line 5368
	add	esp, 16					; 00000010H
	jmp	@M_StartDelay@8
$L87943:
	pop	esi
	add	esp, 16					; 00000010H
	ret	0
@MAI_Counselor@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@FJCE@MAI_Garbud?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BP@FJCE@MAI_Garbud?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@FJCE@MAI_Garbud?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Garbud:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Garbud@4
_TEXT	SEGMENT
_i$ = -4
_md$ = -8
@MAI_Garbud@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 5371
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	mov	esi, ecx
; Line 5375
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L87973
; Line 5376
	push	esi
	push	OFFSET FLAT:??_C@_0BP@FJCE@MAI_Garbud?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87973:
; Line 5378
	imul	esi, 228				; 000000e4H
; Line 5379
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L87982
; Line 5385
	mov	ecx, DWORD PTR _i$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _monster[esi+36]
	push	edi
	mov	edi, DWORD PTR _monster[esi+32]
	call	@M_GetDir@4
	mov	DWORD PTR _md$[ebp], eax
; Line 5390
	mov	eax, DWORD PTR _monster[esi+208]
	mov	ecx, 147				; 00000093H
	cmp	eax, ecx
	jge	SHORT $L87976
	cmp	eax, 143				; 0000008fH
	jle	SHORT $L87976
	mov	edx, edi
	imul	edx, 112				; 00000070H
	test	BYTE PTR _dFlags[edx+ebx], 2
	jne	SHORT $L87976
	lea	edx, DWORD PTR _monster[esi+8]
	cmp	BYTE PTR [edx], 7
	jne	SHORT $L87976
; Line 5392
	inc	eax
	mov	BYTE PTR [edx], 6
	mov	DWORD PTR _monster[esi+208], eax
$L87976:
; Line 5395
	imul	edi, 112				; 00000070H
	test	BYTE PTR _dFlags[edi+ebx], 2
	pop	edi
	pop	ebx
	je	SHORT $L87979
; Line 5396
	cmp	DWORD PTR _monster[esi+208], ecx
	jne	SHORT $L87979
; Line 5397
	mov	ecx, 842				; 0000034aH
	call	@effect_is_playing@4
	test	eax, eax
	jne	SHORT $L87979
	lea	eax, DWORD PTR _monster[esi+8]
	cmp	BYTE PTR [eax], 7
	jne	SHORT $L87979
; Line 5399
	or	BYTE PTR _monster[esi+160], -1
; Line 5400
	and	DWORD PTR _monster[esi+208], 0
	mov	BYTE PTR [eax], 1
$L87979:
; Line 5405
	mov	al, BYTE PTR _monster[esi+8]
	cmp	al, 1
	je	SHORT $L87981
	cmp	al, 4
	jne	SHORT $L87980
$L87981:
; Line 5406
	mov	ecx, DWORD PTR _i$[ebp]
	xor	edx, edx
	inc	edx
	call	@MAI_Round@8
$L87980:
; Line 5408
	mov	eax, DWORD PTR _md$[ebp]
	mov	DWORD PTR _monster[esi+72], eax
; Line 5410
	cmp	DWORD PTR _monster[esi+4], 0
	jne	SHORT $L87982
; Line 5411
	mov	ecx, DWORD PTR _monster[esi+220]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR _monster[esi+84], eax
$L87982:
	pop	esi
; Line 5412
	leave
	ret	0
@MAI_Garbud@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@BAEO@MAI_Zhar?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BN@BAEO@MAI_Zhar?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@BAEO@MAI_Zhar?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Zhar: Inv'
	DB	'alid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Zhar@4
_TEXT	SEGMENT
_i$ = -8
_md$ = -4
@MAI_Zhar@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 5415
	push	ecx
	push	ecx
	push	ebp
	mov	ebp, ecx
; Line 5419
	cmp	ebp, 200				; 000000c8H
	push	esi
	mov	DWORD PTR _i$[esp+16], ebp
	jb	SHORT $L87993
; Line 5420
	push	ebp
	push	OFFSET FLAT:??_C@_0BN@BAEO@MAI_Zhar?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L87993:
; Line 5422
	mov	esi, ebp
	imul	esi, 228				; 000000e4H
; Line 5423
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L88004
	push	ebx
; Line 5427
	mov	ebx, DWORD PTR _monster[esi+36]
	push	edi
; Line 5428
	mov	edi, DWORD PTR _monster[esi+32]
; Line 5429
	mov	ecx, ebp
	call	@M_GetDir@4
; Line 5430
	cmp	DWORD PTR _monster[esi+208], 148	; 00000094H
	mov	DWORD PTR _md$[esp+24], eax
	jne	SHORT $L87996
	mov	eax, edi
	imul	eax, 112				; 00000070H
	test	BYTE PTR _dFlags[eax+ebx], 2
	jne	SHORT $L87996
	lea	eax, DWORD PTR _monster[esi+8]
	cmp	BYTE PTR [eax], 7
	jne	SHORT $L87996
; Line 5431
	mov	DWORD PTR _monster[esi+208], 149	; 00000095H
; Line 5432
	mov	BYTE PTR [eax], 6
$L87996:
; Line 5435
	imul	edi, 112				; 00000070H
	test	BYTE PTR _dFlags[edi+ebx], 2
	je	SHORT $L88001
; Line 5436
	movzx	eax, BYTE PTR _monster[esi+80]
	mov	edi, DWORD PTR _monster[esi+32]
; Line 5437
	mov	ebx, DWORD PTR _monster[esi+36]
	sub	edi, eax
	movzx	eax, BYTE PTR _monster[esi+81]
	sub	ebx, eax
; Line 5438
	push	ebx
	call	_abs
	push	edi
	mov	ebp, eax
	call	_abs
	pop	ecx
	cmp	eax, ebp
	pop	ecx
	jle	SHORT $L87998
; Line 5439
	push	edi
; Line 5440
	jmp	SHORT $L90141
$L87998:
; Line 5441
	push	ebx
$L90141:
	call	_abs
; Line 5442
	cmp	DWORD PTR _monster[esi+208], 149	; 00000095H
	pop	ecx
	jne	SHORT $L88001
; Line 5443
	mov	ecx, 856				; 00000358H
	call	@effect_is_playing@4
	test	eax, eax
	jne	SHORT $L88001
	lea	eax, DWORD PTR _monster[esi+8]
	cmp	BYTE PTR [eax], 7
	jne	SHORT $L88001
; Line 5444
	or	BYTE PTR _monster[esi+160], -1
; Line 5445
	and	DWORD PTR _monster[esi+208], 0
; Line 5446
	mov	BYTE PTR [eax], 1
$L88001:
; Line 5451
	mov	al, BYTE PTR _monster[esi+8]
	pop	edi
	cmp	al, 1
	pop	ebx
	je	SHORT $L88003
	cmp	al, 2
	je	SHORT $L88003
	cmp	al, 4
	jne	SHORT $L88002
$L88003:
; Line 5452
	mov	ecx, DWORD PTR _i$[esp+16]
	call	@MAI_Counselor@4
$L88002:
; Line 5454
	mov	eax, DWORD PTR _md$[esp+16]
	mov	DWORD PTR _monster[esi+72], eax
; Line 5456
	cmp	DWORD PTR _monster[esi+4], 0
	jne	SHORT $L88004
; Line 5457
	mov	ecx, DWORD PTR _monster[esi+220]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR _monster[esi+84], eax
$L88004:
	pop	esi
	pop	ebp
; Line 5458
	pop	ecx
	pop	ecx
	ret	0
@MAI_Zhar@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@BDBE@MAI_SnotSpil?3?5Invalid?5monster?5?$CFd@ ; `string'
EXTRN	_RedoPlayerVision:NEAR
;	COMDAT ??_C@_0CB@BDBE@MAI_SnotSpil?3?5Invalid?5monster?5?$CFd@
_DATA	SEGMENT
??_C@_0CB@BDBE@MAI_SnotSpil?3?5Invalid?5monster?5?$CFd@ DB 'MAI_SnotSpil:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_SnotSpil@4
_TEXT	SEGMENT
_i$ = -4
@MAI_SnotSpil@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5461
	push	ecx
	push	ebp
	mov	ebp, ecx
; Line 5465
	cmp	ebp, 200				; 000000c8H
	push	esi
	mov	DWORD PTR _i$[esp+12], ebp
	jb	SHORT $L88013
; Line 5466
	push	ebp
	push	OFFSET FLAT:??_C@_0CB@BDBE@MAI_SnotSpil?3?5Invalid?5monster?5?$CFd@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88013:
; Line 5468
	mov	esi, ebp
	imul	esi, 228				; 000000e4H
; Line 5469
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L88024
	push	ebx
; Line 5474
	mov	ebx, DWORD PTR _monster[esi+36]
	push	edi
	mov	edi, DWORD PTR _monster[esi+32]
; Line 5475
	mov	ecx, ebp
	call	@M_GetDir@4
; Line 5477
	cmp	DWORD PTR _monster[esi+208], 20		; 00000014H
	mov	ebp, eax
	push	21					; 00000015H
	pop	ecx
	jne	SHORT $L88016
	mov	eax, edi
	imul	eax, 112				; 00000070H
	test	BYTE PTR _dFlags[eax+ebx], 2
	jne	SHORT $L88016
	lea	eax, DWORD PTR _monster[esi+8]
	cmp	BYTE PTR [eax], 7
	jne	SHORT $L88016
; Line 5478
	mov	DWORD PTR _monster[esi+208], ecx
; Line 5479
	mov	BYTE PTR [eax], 6
$L88016:
; Line 5482
	cmp	DWORD PTR _monster[esi+208], ecx
	jne	SHORT $L88017
	cmp	BYTE PTR _quests+183, 3
	jne	SHORT $L88017
; Line 5483
	and	DWORD PTR _monster[esi+208], 0
; Line 5484
	mov	BYTE PTR _monster[esi+8], 1
$L88017:
; Line 5487
	imul	edi, 112				; 00000070H
	test	BYTE PTR _dFlags[edi+ebx], 2
	pop	edi
	pop	ebx
	je	$L88022
; Line 5488
	cmp	DWORD PTR _monster[esi+208], 22		; 00000016H
	jne	SHORT $L88020
; Line 5489
	mov	ecx, 852				; 00000354H
	call	@effect_is_playing@4
	test	eax, eax
	jne	SHORT $L88020
	cmp	BYTE PTR _monster[esi+8], 7
	jne	SHORT $L88020
; Line 5490
	mov	edx, DWORD PTR _setpc_y
	mov	eax, DWORD PTR _setpc_h
	mov	ecx, DWORD PTR _setpc_x
	lea	eax, DWORD PTR [edx+eax+1]
	push	eax
	mov	eax, DWORD PTR _setpc_w
	lea	eax, DWORD PTR [ecx+eax+1]
	push	eax
	call	@ObjChangeMap@16
; Line 5491
	mov	BYTE PTR _quests+183, 3
; Line 5492
	call	_RedoPlayerVision
; Line 5493
	or	BYTE PTR _monster[esi+160], -1
; Line 5494
	and	DWORD PTR _monster[esi+208], 0
; Line 5495
	mov	BYTE PTR _monster[esi+8], 1
$L88020:
; Line 5498
	cmp	BYTE PTR _quests+183, 3
	jne	SHORT $L88022
; Line 5499
	mov	al, BYTE PTR _monster[esi+8]
	cmp	al, 1
	je	SHORT $L88023
	cmp	al, 5
	jne	SHORT $L88022
$L88023:
; Line 5500
	mov	ecx, DWORD PTR _i$[esp+12]
	call	@MAI_Fallen@4
$L88022:
; Line 5504
	mov	DWORD PTR _monster[esi+72], ebp
; Line 5506
	cmp	DWORD PTR _monster[esi+4], 0
	jne	SHORT $L88024
; Line 5507
	mov	eax, DWORD PTR _monster[esi+220]
	mov	eax, DWORD PTR [eax+ebp*4+8]
	mov	DWORD PTR _monster[esi+84], eax
$L88024:
	pop	esi
	pop	ebp
; Line 5508
	pop	ecx
	ret	0
@MAI_SnotSpil@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@GFEE@MAI_Lazurus?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BD@DHCH@gendata?2fprst3?4smk?$AA@	; `string'
EXTRN	@ObjChangeMapResync@16:NEAR
EXTRN	@PlayInGameMovie@4:NEAR
;	COMDAT ??_C@_0CA@GFEE@MAI_Lazurus?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@GFEE@MAI_Lazurus?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Lazuru'
	DB	's: Invalid monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@DHCH@gendata?2fprst3?4smk?$AA@
_DATA	SEGMENT
??_C@_0BD@DHCH@gendata?2fprst3?4smk?$AA@ DB 'gendata\fprst3.smk', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Lazurus@4
_TEXT	SEGMENT
_i$ = -4
@MAI_Lazurus@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5513
	push	ecx
	push	ebx
	mov	ebx, ecx
; Line 5517
	cmp	ebx, 200				; 000000c8H
	push	esi
	mov	DWORD PTR _i$[esp+12], ebx
	jb	SHORT $L88033
; Line 5518
	push	ebx
	push	OFFSET FLAT:??_C@_0CA@GFEE@MAI_Lazurus?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88033:
; Line 5520
	mov	esi, ebx
	imul	esi, 228				; 000000e4H
; Line 5521
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L88044
	push	ebp
; Line 5526
	mov	ebp, DWORD PTR _monster[esi+36]
	push	edi
	mov	edi, DWORD PTR _monster[esi+32]
; Line 5527
	mov	ecx, ebx
	call	@M_GetDir@4
; Line 5528
	imul	edi, 112				; 00000070H
	mov	ebx, eax
	test	BYTE PTR _dFlags[edi+ebp], 2
	je	$L88041
; Line 5529
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	35					; 00000023H
	pop	edi
	jne	$L90150
; Line 5530
	cmp	DWORD PTR _monster[esi+208], edi
	jne	$L88040
	cmp	BYTE PTR _monster[esi+8], 6
	jne	SHORT $L88038
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+56], edi
	jne	SHORT $L88038
	cmp	DWORD PTR _plr[eax+60], 46		; 0000002eH
	jne	SHORT $L88038
; Line 5531
	mov	ecx, OFFSET FLAT:??_C@_0BD@DHCH@gendata?2fprst3?4smk?$AA@ ; `string'
	call	@PlayInGameMovie@4
; Line 5532
	mov	DWORD PTR _monster[esi+4], 17		; 00000011H
; Line 5533
	mov	BYTE PTR _quests+375, 5
$L88038:
; Line 5536
	cmp	DWORD PTR _monster[esi+208], edi
	jne	SHORT $L88040
	mov	ecx, 847				; 0000034fH
	call	@effect_is_playing@4
	test	eax, eax
	jne	SHORT $L88040
	cmp	BYTE PTR _monster[esi+8], 7
	jne	SHORT $L88040
; Line 5537
	push	24					; 00000018H
	push	20					; 00000014H
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	inc	ecx
	call	@ObjChangeMapResync@16
; Line 5538
	call	_RedoPlayerVision
; Line 5539
	or	BYTE PTR _monster[esi+160], -1
; Line 5540
	and	DWORD PTR _monster[esi+208], 0
; Line 5541
	mov	BYTE PTR _quests+375, 6
; Line 5542
	mov	BYTE PTR _monster[esi+8], 1
$L88040:
; Line 5546
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L88041
$L90150:
	cmp	DWORD PTR _monster[esi+208], edi
	jne	SHORT $L88041
	cmp	BYTE PTR _monster[esi+8], 6
	jne	SHORT $L88041
	cmp	BYTE PTR _quests+375, 3
	ja	SHORT $L88041
; Line 5547
	mov	DWORD PTR _monster[esi+4], 17		; 00000011H
$L88041:
; Line 5551
	mov	al, BYTE PTR _monster[esi+8]
	pop	edi
	cmp	al, 1
	pop	ebp
	je	SHORT $L88043
	cmp	al, 2
	je	SHORT $L88043
	cmp	al, 4
	jne	SHORT $L88042
$L88043:
; Line 5553
	mov	ecx, DWORD PTR _i$[esp+12]
	and	DWORD PTR _monster[esi+208], 0
	call	@MAI_Counselor@4
$L88042:
; Line 5556
	mov	DWORD PTR _monster[esi+72], ebx
; Line 5558
	mov	eax, DWORD PTR _monster[esi+4]
	test	eax, eax
	je	SHORT $L88045
	cmp	eax, 17					; 00000011H
	jne	SHORT $L88044
$L88045:
; Line 5559
	mov	eax, DWORD PTR _monster[esi+220]
	mov	eax, DWORD PTR [eax+ebx*4+8]
	mov	DWORD PTR _monster[esi+84], eax
$L88044:
	pop	esi
	pop	ebx
; Line 5560
	pop	ecx
	ret	0
@MAI_Lazurus@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@IEHF@MAI_Lazhelp?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@IEHF@MAI_Lazhelp?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@IEHF@MAI_Lazhelp?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Lazhel'
	DB	'p: Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Lazhelp@4
_TEXT	SEGMENT
_i$ = -4
@MAI_Lazhelp@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5564
	push	ecx
	push	ebp
	mov	ebp, ecx
; Line 5574
	cmp	ebp, 200				; 000000c8H
	push	esi
	mov	DWORD PTR _i$[esp+12], ebp
	jb	SHORT $L88056
; Line 5575
	push	ebp
	push	OFFSET FLAT:??_C@_0CA@IEHF@MAI_Lazhelp?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88056:
; Line 5577
	mov	esi, ebp
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L88067
	push	ebx
; Line 5578
	mov	ebx, DWORD PTR _monster[esi+36]
	push	edi
; Line 5579
	mov	edi, DWORD PTR _monster[esi+32]
; Line 5580
	mov	ecx, ebp
	call	@M_GetDir@4
; Line 5581
	imul	edi, 112				; 00000070H
	mov	ebp, eax
	test	BYTE PTR _dFlags[edi+ebx], 2
	pop	edi
	pop	ebx
	je	SHORT $LABEL_10$88063
; Line 5582
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L88060
; Line 5583
	cmp	BYTE PTR _quests+375, 5
	ja	SHORT $L88061
; Line 5584
	mov	BYTE PTR _monster[esi+8], 6
; Line 5585
	jmp	SHORT $LABEL_10$88063
$L88061:
; Line 5587
	and	DWORD PTR _monster[esi+208], 0
$L88060:
; Line 5589
	mov	BYTE PTR _monster[esi+8], 1
$LABEL_10$88063:
; Line 5592
	cmp	BYTE PTR _monster[esi+8], 1
	jne	SHORT $L88066
; Line 5593
	mov	ecx, DWORD PTR _i$[esp+12]
	call	@MAI_Succ@4
$L88066:
; Line 5595
	cmp	DWORD PTR _monster[esi+4], 0
	mov	DWORD PTR _monster[esi+72], ebp
	jne	SHORT $L88067
; Line 5596
	mov	eax, DWORD PTR _monster[esi+220]
	mov	eax, DWORD PTR [eax+ebp*4+8]
	mov	DWORD PTR _monster[esi+84], eax
$L88067:
	pop	esi
	pop	ebp
; Line 5598
	pop	ecx
	ret	0
@MAI_Lazhelp@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@HLJF@MAI_Lachdanan?3?5Invalid?5monster?5?$CF@ ; `string'
;	COMDAT ??_C@_0CC@HLJF@MAI_Lachdanan?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT
??_C@_0CC@HLJF@MAI_Lachdanan?3?5Invalid?5monster?5?$CF@ DB 'MAI_Lachdanan'
	DB	': Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Lachdanan@4
_TEXT	SEGMENT
_md$ = -4
@MAI_Lachdanan@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5602
	push	ecx
	push	ebp
	mov	ebp, ecx
; Line 5606
	cmp	ebp, 200				; 000000c8H
	push	esi
	jb	SHORT $L88076
; Line 5607
	push	ebp
	push	OFFSET FLAT:??_C@_0CC@HLJF@MAI_Lachdanan?3?5Invalid?5monster?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88076:
; Line 5609
	mov	esi, ebp
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 5610
	cmp	DWORD PTR [esi+4], 0
	jne	$L88083
	push	ebx
; Line 5615
	mov	ebx, DWORD PTR [esi+36]
	push	edi
	mov	edi, DWORD PTR [esi+32]
; Line 5616
	mov	ecx, ebp
	call	@M_GetDir@4
; Line 5617
	cmp	DWORD PTR [esi+208], 81			; 00000051H
	mov	DWORD PTR _md$[esp+20], eax
	jne	SHORT $L88079
	mov	eax, edi
	imul	eax, 112				; 00000070H
	test	BYTE PTR _dFlags[eax+ebx], 2
	jne	SHORT $L88079
	cmp	BYTE PTR [esi+8], 7
	jne	SHORT $L88079
; Line 5618
	mov	DWORD PTR [esi+208], 82			; 00000052H
; Line 5619
	mov	BYTE PTR [esi+8], 6
$L88079:
; Line 5622
	imul	edi, 112				; 00000070H
	test	BYTE PTR _dFlags[edi+ebx], 2
	pop	edi
	pop	ebx
	je	SHORT $L88082
; Line 5623
	cmp	DWORD PTR [esi+208], 83			; 00000053H
	jne	SHORT $L88082
; Line 5624
	mov	ecx, 846				; 0000034eH
	call	@effect_is_playing@4
	test	eax, eax
	jne	SHORT $L88082
	cmp	BYTE PTR [esi+8], 7
	jne	SHORT $L88082
; Line 5625
	and	DWORD PTR [esi+208], eax
; Line 5627
	or	edx, -1
	mov	ecx, ebp
	mov	BYTE PTR _quests+98, 3
	call	@M_StartKill@8
$L88082:
; Line 5632
	mov	eax, DWORD PTR _md$[esp+12]
; Line 5634
	cmp	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+72], eax
	jne	SHORT $L88083
; Line 5635
	mov	ecx, DWORD PTR [esi+220]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR [esi+84], eax
$L88083:
	pop	esi
	pop	ebp
; Line 5636
	pop	ecx
	ret	0
@MAI_Lachdanan@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@DMCD@MAI_Warlord?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@DMCD@MAI_Warlord?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@DMCD@MAI_Warlord?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MAI_Warlor'
	DB	'd: Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MAI_Warlord@4
_TEXT	SEGMENT
_i$ = -4
@MAI_Warlord@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5639
	push	ecx
	push	ebp
	mov	ebp, ecx
; Line 5643
	cmp	ebp, 200				; 000000c8H
	push	esi
	mov	DWORD PTR _i$[esp+12], ebp
	jb	SHORT $L88092
; Line 5644
	push	ebp
	push	OFFSET FLAT:??_C@_0CA@DMCD@MAI_Warlord?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88092:
; Line 5646
	mov	esi, ebp
	imul	esi, 228				; 000000e4H
; Line 5647
	cmp	DWORD PTR _monster[esi+4], 0
	jne	$L88099
	push	ebx
; Line 5652
	mov	ebx, DWORD PTR _monster[esi+36]
	push	edi
	mov	edi, DWORD PTR _monster[esi+32]
; Line 5653
	mov	ecx, ebp
	call	@M_GetDir@4
; Line 5654
	imul	edi, 112				; 00000070H
	mov	ebp, eax
	test	BYTE PTR _dFlags[edi+ebx], 2
	pop	edi
	pop	ebx
	je	SHORT $L88097
; Line 5655
	mov	eax, DWORD PTR _monster[esi+208]
	cmp	eax, 110				; 0000006eH
	jne	SHORT $L88097
	cmp	BYTE PTR _monster[esi+8], 6
	jne	SHORT $L88096
; Line 5656
	mov	DWORD PTR _monster[esi+4], 17		; 00000011H
$L88096:
; Line 5657
	cmp	eax, 110				; 0000006eH
	jne	SHORT $L88097
	mov	ecx, 853				; 00000355H
	call	@effect_is_playing@4
	test	eax, eax
	jne	SHORT $L88097
	lea	eax, DWORD PTR _monster[esi+8]
	cmp	BYTE PTR [eax], 7
	jne	SHORT $L88097
; Line 5658
	or	BYTE PTR _monster[esi+160], -1
; Line 5659
	and	DWORD PTR _monster[esi+208], 0
; Line 5660
	mov	BYTE PTR [eax], 1
$L88097:
; Line 5664
	cmp	BYTE PTR _monster[esi+8], 1
	jne	SHORT $L88098
; Line 5665
	mov	ecx, DWORD PTR _i$[esp+12]
	call	@MAI_SkelSd@4
$L88098:
; Line 5667
	mov	DWORD PTR _monster[esi+72], ebp
; Line 5669
	mov	eax, DWORD PTR _monster[esi+4]
	test	eax, eax
	je	SHORT $L88100
	cmp	eax, 17					; 00000011H
	jne	SHORT $L88099
$L88100:
; Line 5670
	mov	eax, DWORD PTR _monster[esi+220]
	mov	eax, DWORD PTR [eax+ebp*4+8]
	mov	DWORD PTR _monster[esi+84], eax
$L88099:
	pop	esi
	pop	ebp
; Line 5671
	pop	ecx
	ret	0
@MAI_Warlord@4 ENDP
_TEXT	ENDS
PUBLIC	_DeleteMonsterList
; Function compile flags: /Ogsy
;	COMDAT _DeleteMonsterList
_TEXT	SEGMENT
_DeleteMonsterList PROC NEAR				; COMDAT
; Line 5674
	push	esi
; Line 5676
	mov	eax, OFFSET FLAT:_monster+36
	xor	esi, esi
$L88103:
; Line 5677
	cmp	DWORD PTR [eax+72], esi
	je	SHORT $L88104
; Line 5678
	mov	DWORD PTR [eax-4], 1
; Line 5679
	mov	DWORD PTR [eax], esi
; Line 5680
	mov	DWORD PTR [eax+4], esi
; Line 5681
	mov	DWORD PTR [eax+8], esi
; Line 5682
	mov	DWORD PTR [eax+12], esi
; Line 5683
	mov	DWORD PTR [eax+16], esi
; Line 5684
	mov	DWORD PTR [eax+72], esi
$L88104:
	add	eax, 228				; 000000e4H
	cmp	eax, OFFSET FLAT:_monster+948
	jl	SHORT $L88103
; Line 5688
	push	4
	pop	ecx
; Line 5689
	cmp	DWORD PTR _nummonsters, ecx
	jle	SHORT $L88109
$L88108:
; Line 5690
	mov	eax, DWORD PTR _monstactive[ecx*4]
	imul	eax, 228				; 000000e4H
	cmp	DWORD PTR _monster[eax+108], esi
	je	SHORT $L88110
; Line 5691
	call	@DeleteMonster@4
; Line 5692
	xor	ecx, ecx
; Line 5693
	jmp	SHORT $L88111
$L88110:
; Line 5694
	inc	ecx
$L88111:
; Line 5689
	cmp	ecx, DWORD PTR _nummonsters
	jl	SHORT $L88108
$L88109:
	pop	esi
; Line 5697
	ret	0
_DeleteMonsterList ENDP
_TEXT	ENDS
PUBLIC	_ProcessMonsters
PUBLIC	??_C@_0CK@PKLN@Illegal?5enemy?5monster?5?$CFd?5for?5mon@ ; `string'
PUBLIC	??_C@_0CJ@MDKJ@Illegal?5enemy?5player?5?$CFd?5for?5mons@ ; `string'
;	COMDAT ??_C@_0CK@PKLN@Illegal?5enemy?5monster?5?$CFd?5for?5mon@
_DATA	SEGMENT
??_C@_0CK@PKLN@Illegal?5enemy?5monster?5?$CFd?5for?5mon@ DB 'Illegal enem'
	DB	'y monster %d for monster "%s"', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@MDKJ@Illegal?5enemy?5player?5?$CFd?5for?5mons@
_DATA	SEGMENT
??_C@_0CJ@MDKJ@Illegal?5enemy?5player?5?$CFd?5for?5mons@ DB 'Illegal enem'
	DB	'y player %d for monster "%s"', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ProcessMonsters
_TEXT	SEGMENT
_v24$ = -8
_v25$ = -4
_ProcessMonsters PROC NEAR				; COMDAT
; Line 5700
	push	ecx
	push	ecx
; Line 5728
	call	_DeleteMonsterList
; Line 5729
	and	DWORD PTR _v24$[esp+8], 0
; Line 5730
	cmp	DWORD PTR _nummonsters, 0
	jle	$LABEL_60$88140
	push	ebx
	push	ebp
	push	esi
	push	edi
$L88141:
; Line 5734
	mov	eax, DWORD PTR _v24$[esp+24]
	and	DWORD PTR _v25$[esp+24], 0
; Line 5737
	cmp	BYTE PTR _gbMaxPlayers, 1
	mov	ebp, DWORD PTR _monstactive[eax*4]
	jbe	SHORT $L88145
; Line 5738
	mov	eax, ebp
	imul	eax, 228				; 000000e4H
	lea	esi, DWORD PTR _monster[eax+180]
	mov	ecx, DWORD PTR [esi]
	call	@SetRndSeed@4
; Line 5739
	call	_GetRndSeed
	mov	DWORD PTR [esi], eax
$L88145:
; Line 5741
	mov	esi, ebp
	imul	esi, 228				; 000000e4H
	test	BYTE PTR _monster[esi+156], 8
	jne	SHORT $L88147
; Line 5742
	mov	ecx, DWORD PTR _monster[esi+148]
; Line 5743
	cmp	ecx, DWORD PTR _monster[esi+144]
	jge	SHORT $L88147
	test	ecx, -64				; ffffffc0H
	jle	SHORT $L88147
; Line 5744
	movsx	eax, BYTE PTR _monster[esi+192]
; Line 5745
	cmp	al, 1
	jle	SHORT $L88150
; Line 5746
	movsx	eax, al
	sar	eax, 1
$L88150:
; Line 5747
	add	eax, ecx
	mov	DWORD PTR _monster[esi+148], eax
$L88147:
; Line 5750
	mov	eax, DWORD PTR _monster[esi+32]
	mov	ecx, DWORD PTR _monster[esi+36]
	imul	eax, 112				; 00000070H
	lea	ebx, DWORD PTR _dFlags[eax+ecx]
; Line 5751
	test	BYTE PTR [ebx], 2
	je	SHORT $L88152
	cmp	BYTE PTR _monster[esi+160], 0
	jne	SHORT $L88152
	mov	eax, DWORD PTR _monster[esi+220]
	cmp	BYTE PTR [eax], 51			; 00000033H
	jne	SHORT $L88152
; Line 5752
	mov	ecx, 838				; 00000346H
	call	@PlaySFX@4
$L88152:
; Line 5753
	test	BYTE PTR _monster[esi+156], 16		; 00000010H
; Line 5754
	lea	edi, DWORD PTR _monster[esi+76]
	mov	eax, DWORD PTR [edi]
	je	SHORT $L88153
; Line 5755
	cmp	eax, 200				; 000000c8H
	jb	SHORT $L88154
; Line 5756
	push	DWORD PTR _monster[esi+216]
	push	eax
	push	OFFSET FLAT:??_C@_0CK@PKLN@Illegal?5enemy?5monster?5?$CFd?5for?5mon@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L88154:
; Line 5757
	mov	eax, DWORD PTR [edi]
; Line 5758
	imul	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR _monster[eax+40]
; Line 5759
	mov	DWORD PTR _monster[esi+168], ecx
; Line 5760
	mov	BYTE PTR _monster[esi+80], cl
; Line 5761
	mov	eax, DWORD PTR _monster[eax+44]
; Line 5762
	mov	BYTE PTR _monster[esi+81], al
; Line 5764
	jmp	SHORT $L90197
$L88153:
; Line 5766
	cmp	eax, 4
	jb	SHORT $L88157
; Line 5767
	push	DWORD PTR _monster[esi+216]
	push	eax
	push	OFFSET FLAT:??_C@_0CJ@MDKJ@Illegal?5enemy?5player?5?$CFd?5for?5mons@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
$L88157:
; Line 5768
	mov	eax, DWORD PTR [edi]
; Line 5770
	imul	eax, 21720				; 000054d8H
; Line 5772
	mov	cl, BYTE PTR _plr[eax+64]
	mov	BYTE PTR _monster[esi+80], cl
; Line 5773
	mov	cl, BYTE PTR _plr[eax+68]
	mov	BYTE PTR _monster[esi+81], cl
; Line 5774
	mov	cl, BYTE PTR [ebx]
	shr	ecx, 1
	not	cl
	test	cl, 1
	je	SHORT $L88161
; Line 5775
	lea	ecx, DWORD PTR _monster[esi+160]
	mov	al, BYTE PTR [ecx]
; Line 5776
	test	al, al
	je	SHORT $L88167
	cmp	BYTE PTR _monster[esi+152], 110		; 0000006eH
	je	SHORT $L88167
; Line 5777
	dec	al
	mov	BYTE PTR [ecx], al
; Line 5778
	jmp	SHORT $L88167
$L88161:
; Line 5782
	mov	ecx, DWORD PTR _plr[eax+64]
	or	BYTE PTR _monster[esi+160], -1
; Line 5783
	mov	eax, DWORD PTR _plr[eax+68]
	mov	DWORD PTR _monster[esi+168], ecx
$L90197:
	mov	DWORD PTR _monster[esi+172], eax
$L88167:
; Line 5789
	test	BYTE PTR _monster[esi+157], 1
	je	SHORT $L88169
; Line 5790
	mov	ecx, ebp
	call	@MAI_Path@4
; Line 5791
	test	al, al
	jne	SHORT $LABEL_30$88171
$L88169:
; Line 5795
	movzx	eax, BYTE PTR _monster[esi+152]
	mov	ecx, ebp
	call	DWORD PTR _AiProc[eax*4]
$LABEL_30$88171:
; Line 5797
	mov	eax, DWORD PTR _monster[esi+4]
	cmp	eax, 17					; 00000011H
	ja	$L88197
	jmp	DWORD PTR $L90198[eax*4]
$L88177:
; Line 5799
	mov	ecx, ebp
	call	@M_DoStand@4
; Line 5800
	jmp	$LABEL_48$88178
$L88179:
; Line 5802
	mov	ecx, ebp
	call	@M_DoWalk@4
; Line 5803
	jmp	$LABEL_48$88178
$L88180:
; Line 5805
	mov	ecx, ebp
	call	@M_DoWalk2@4
; Line 5806
	jmp	SHORT $LABEL_48$88178
$L88181:
; Line 5808
	mov	ecx, ebp
	call	@M_DoWalk3@4
; Line 5809
	jmp	SHORT $LABEL_48$88178
$L88182:
; Line 5811
	mov	ecx, ebp
	call	@M_DoAttack@4
; Line 5812
	jmp	SHORT $LABEL_48$88178
$L88183:
; Line 5814
	mov	ecx, ebp
	call	@M_DoGotHit@4
; Line 5815
	jmp	SHORT $LABEL_48$88178
$L88184:
; Line 5817
	mov	ecx, ebp
	call	@M_DoDeath@4
; Line 5818
	jmp	SHORT $LABEL_48$88178
$L88185:
; Line 5820
	mov	ecx, ebp
	call	@M_DoSAttack@4
; Line 5821
	jmp	SHORT $LABEL_48$88178
$L88186:
; Line 5823
	mov	ecx, ebp
	call	@M_DoFadein@4
; Line 5824
	jmp	SHORT $LABEL_48$88178
$L88187:
; Line 5826
	mov	ecx, ebp
	call	@M_DoFadeout@4
; Line 5827
	jmp	SHORT $LABEL_48$88178
$L88188:
; Line 5829
	mov	ecx, ebp
	call	@M_DoRAttack@4
; Line 5830
	jmp	SHORT $LABEL_48$88178
$L88189:
; Line 5832
	mov	ecx, ebp
	call	@M_DoSpStand@4
; Line 5833
	jmp	SHORT $LABEL_48$88178
$L88190:
; Line 5835
	mov	ecx, ebp
	call	@M_DoRSpAttack@4
; Line 5836
	jmp	SHORT $LABEL_48$88178
$L88191:
; Line 5838
	mov	ecx, ebp
	call	@M_DoDelay@4
; Line 5839
	jmp	SHORT $LABEL_48$88178
$L88194:
; Line 5843
	mov	ecx, ebp
	call	@M_DoStone@4
; Line 5844
	jmp	SHORT $LABEL_48$88178
$L88195:
; Line 5846
	mov	ecx, ebp
	call	@M_DoHeal@4
; Line 5847
	jmp	SHORT $LABEL_48$88178
$L88196:
; Line 5849
	mov	ecx, ebp
	call	@M_DoTalk@4
$LABEL_48$88178:
; Line 5851
	mov	DWORD PTR _v25$[esp+24], eax
$L88197:
; Line 5856
	cmp	DWORD PTR _v25$[esp+24], 0
	je	SHORT $LABEL_51$88193
; Line 5858
	mov	ecx, ebp
	call	@GroupUnity@4
	jmp	$L88167
$LABEL_51$88193:
; Line 5861
	cmp	DWORD PTR _monster[esi+4], 15		; 0000000fH
	je	SHORT $L88204
; Line 5862
	mov	ecx, DWORD PTR _monster[esi+156]
; Line 5863
	lea	eax, DWORD PTR _monster[esi+92]
; Line 5864
	inc	DWORD PTR [eax]
; Line 5865
	test	cl, 4
	jne	SHORT $L88204
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _monster[esi+88]
	jl	SHORT $L88204
; Line 5866
	and	DWORD PTR [eax], 0
; Line 5868
	test	cl, 2
	je	SHORT $L88201
; Line 5869
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, 1
	lea	ecx, DWORD PTR [eax-1]
	mov	DWORD PTR _monster[esi+100], ecx
	jne	SHORT $L88204
; Line 5871
	mov	eax, DWORD PTR _monster[esi+96]
	mov	DWORD PTR _monster[esi+100], eax
; Line 5872
	jmp	SHORT $L88204
$L88201:
	inc	DWORD PTR _monster[esi+100]
	mov	eax, DWORD PTR _monster[esi+100]
	cmp	eax, DWORD PTR _monster[esi+96]
	jle	SHORT $L88204
; Line 5873
	mov	DWORD PTR _monster[esi+100], 1
$L88204:
; Line 5877
	inc	DWORD PTR _v24$[esp+24]
; Line 5878
	mov	eax, DWORD PTR _v24$[esp+24]
	cmp	eax, DWORD PTR _nummonsters
	jl	$L88141
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$LABEL_60$88140:
; Line 5881
	add	esp, 8
; Line 5880
	jmp	_DeleteMonsterList
$L90198:
; Line 5881
	DD	$L88177
	DD	$L88179
	DD	$L88180
	DD	$L88181
	DD	$L88182
	DD	$L88183
	DD	$L88184
	DD	$L88185
	DD	$L88186
	DD	$L88187
	DD	$L88188
	DD	$L88189
	DD	$L88190
	DD	$L88191
	DD	$LABEL_51$88193
	DD	$L88194
	DD	$L88195
	DD	$L88196
_ProcessMonsters ENDP
_TEXT	ENDS
PUBLIC	_FreeMonsters
EXTRN	_FreeMissiles2:NEAR
; Function compile flags: /Ogsy
;	COMDAT _FreeMonsters
_TEXT	SEGMENT
_i$ = -4
_FreeMonsters PROC NEAR					; COMDAT
; Line 5885
	push	ecx
; Line 5890
	and	DWORD PTR _i$[esp+4], 0
	cmp	DWORD PTR _nummtypes, 0
	jle	SHORT $L88212
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, OFFSET FLAT:_Monsters+4
$L88210:
; Line 5891
	movzx	ebx, BYTE PTR [edi-4]
; Line 5892
	xor	ebp, ebp
	mov	esi, edi
$L88213:
; Line 5893
	cmp	BYTE PTR _animletter[ebp], 115		; 00000073H
	jne	SHORT $L88217
	mov	eax, ebx
	shl	eax, 7
	cmp	DWORD PTR _monsterdata[eax+12], 0
	je	SHORT $L88214
$L88217:
; Line 5894
	mov	ecx, DWORD PTR [esi]
; Line 5895
	and	DWORD PTR [esi], 0
; Line 5896
	call	@mem_free_dbg@4
$L88214:
	inc	ebp
	add	esi, 44					; 0000002cH
	cmp	ebp, 6
	jl	SHORT $L88213
	inc	DWORD PTR _i$[esp+20]
	add	edi, 328				; 00000148H
	mov	eax, DWORD PTR _i$[esp+20]
	cmp	eax, DWORD PTR _nummtypes
	jl	SHORT $L88210
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$L88212:
; Line 5902
	add	esp, 4
; Line 5901
	jmp	_FreeMissiles2
_FreeMonsters ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@KBEL@DirOK?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BK@KBEL@DirOK?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BK@KBEL@DirOK?3?5Invalid?5monster?5?$CFd?$AA@ DB 'DirOK: Invalid m'
	DB	'onster %d', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DirOK@8
_TEXT	SEGMENT
_i$ = -20
_j$ = -4
_v22$ = -24
_v26$ = -16
@DirOK@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _mdir$ = edx
; Line 5905
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 5935
	cmp	esi, 200				; 000000c8H
	mov	ebx, edx
	mov	DWORD PTR _i$[ebp], esi
	jb	SHORT $L88249
; Line 5936
	push	esi
	push	OFFSET FLAT:??_C@_0BK@KBEL@DirOK?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88249:
; Line 5939
	mov	eax, esi
	mov	edi, DWORD PTR _offset_x[ebx*4]
	imul	eax, 228				; 000000e4H
; Line 5940
	mov	esi, DWORD PTR _offset_y[ebx*4]
	mov	DWORD PTR -28+[ebp], eax
	add	edi, DWORD PTR _monster[eax+32]
	add	esi, DWORD PTR _monster[eax+36]
; Line 5941
	js	$L88252
	cmp	esi, 112				; 00000070H
	jge	$L88252
	test	edi, edi
	jl	$L88252
	cmp	edi, 112				; 00000070H
	jge	$L88252
	mov	ecx, DWORD PTR _i$[ebp]
	push	esi
	mov	edx, edi
	call	@PosOkMonst@12
	test	eax, eax
	je	$L88252
; Line 5943
	cmp	ebx, 6
	jne	SHORT $L88253
; Line 5944
	lea	edx, DWORD PTR [esi+1]
	mov	ecx, edi
	call	@SolidLoc@8
	test	eax, eax
	jne	$L88252
; Line 5945
	mov	eax, edi
	imul	eax, 112				; 00000070H
	mov	al, BYTE PTR _dFlags[eax+esi+1]
; Line 5946
	jmp	SHORT $L90220
$L88253:
; Line 5950
	cmp	ebx, 2
	jne	SHORT $L88256
; Line 5951
	lea	ecx, DWORD PTR [edi+1]
	mov	edx, esi
	call	@SolidLoc@8
	test	eax, eax
; Line 5952
	jne	$L88252
; Line 5953
	mov	eax, edi
	imul	eax, 112				; 00000070H
	mov	al, BYTE PTR _dFlags[eax+esi+112]
$L90220:
	shr	eax, 4
	not	al
	and	al, 1
; Line 5954
	jmp	SHORT $LABEL_18$88255
$L88256:
; Line 5955
	cmp	ebx, 4
	jne	SHORT $L88259
; Line 5956
	lea	ecx, DWORD PTR [edi+1]
	mov	edx, esi
	call	@SolidLoc@8
	test	eax, eax
; Line 5957
	jne	$L88252
; Line 5958
	lea	edx, DWORD PTR [esi+1]
; Line 5959
	jmp	SHORT $L88261
$L88259:
; Line 5960
	test	ebx, ebx
	jne	SHORT $LABEL_24$88263
; Line 5962
	lea	ecx, DWORD PTR [edi-1]
	mov	edx, esi
	call	@SolidLoc@8
	test	eax, eax
; Line 5963
	jne	$L88252
; Line 5964
	lea	edx, DWORD PTR [esi-1]
$L88261:
; Line 5966
	mov	ecx, edi
	call	@SolidLoc@8
	neg	eax
	sbb	al, al
	inc	al
$LABEL_18$88255:
; Line 5969
	test	al, al
; Line 5970
	je	$L88252
$LABEL_24$88263:
; Line 5972
	mov	ebx, DWORD PTR -28+[ebp]
	cmp	BYTE PTR _monster[ebx+213], 1
	jne	SHORT $L88266
; Line 5973
	lea	ebx, DWORD PTR _monster[ebx+212]
; Line 5975
	movzx	eax, BYTE PTR [ebx]
	imul	eax, 228				; 000000e4H
	sub	edi, DWORD PTR _monster[eax+40]
	push	edi
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	$L88252
	movzx	eax, BYTE PTR [ebx]
	imul	eax, 228				; 000000e4H
	sub	esi, DWORD PTR _monster[eax+44]
	push	esi
	call	_abs
	cmp	eax, 4
	pop	ecx
	jge	$L88252
$L88272:
; Line 5982
	xor	eax, eax
	inc	eax
	jmp	$L88223
$L88266:
; Line 5980
	mov	al, BYTE PTR _monster[ebx+188]
; Line 5981
	test	al, al
	je	SHORT $L88272
	movzx	eax, al
	shl	eax, 5
	test	BYTE PTR _UniqMonst[eax-10], 2
	je	SHORT $L88272
; Line 5983
	and	DWORD PTR _v26$[ebp], 0
; Line 5984
	lea	edx, DWORD PTR [edi-3]
; Line 5985
	add	edi, 3
; Line 5986
	cmp	edx, edi
	mov	DWORD PTR -32+[ebp], edi
	jg	$L88276
; Line 5988
	lea	edi, DWORD PTR [esi+3]
; Line 5991
	mov	ecx, edx
	add	esi, -3					; fffffffdH
	imul	ecx, 112				; 00000070H
	lea	eax, DWORD PTR [ecx+esi]
	mov	DWORD PTR _v22$[ebp], edi
	lea	eax, DWORD PTR _dMonster[eax*4]
	mov	DWORD PTR -12+[ebp], eax
$L88274:
; Line 5993
	cmp	esi, edi
	mov	DWORD PTR _j$[ebp], esi
	jg	SHORT $L88279
	mov	eax, DWORD PTR -12+[ebp]
; Line 6011
	mov	edi, DWORD PTR _v22$[ebp]
	mov	DWORD PTR -8+[ebp], eax
$L88277:
; Line 5994
	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $L88284
	cmp	DWORD PTR _j$[ebp], 112			; 00000070H
	jge	SHORT $L88284
	test	ecx, ecx
	jl	SHORT $L88284
	cmp	ecx, 12544				; 00003100H
	jge	SHORT $L88284
; Line 5995
	mov	eax, DWORD PTR -8+[ebp]
	mov	eax, DWORD PTR [eax]
; Line 5996
	test	eax, eax
	sete	bl
; Line 5997
	test	eax, eax
	jge	SHORT $L88281
; Line 5998
	neg	eax
; Line 5999
	sete	bl
$L88281:
; Line 6001
	test	bl, bl
	jne	SHORT $L88282
; Line 6002
	dec	eax
$L88282:
; Line 6007
	imul	eax, 228				; 000000e4H
	cmp	BYTE PTR _monster[eax+213], 1
	jne	SHORT $L88284
	movzx	ebx, BYTE PTR _monster[eax+212]
	cmp	ebx, DWORD PTR _i$[ebp]
	jne	SHORT $L88284
	cmp	DWORD PTR _monster[eax+40], edx
	jne	SHORT $L88284
	mov	ebx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _monster[eax+44], ebx
	jne	SHORT $L88284
; Line 6008
	inc	DWORD PTR _v26$[ebp]
$L88284:
; Line 5993
	inc	DWORD PTR _j$[ebp]
	add	DWORD PTR -8+[ebp], 4
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _v22$[ebp]
	jle	SHORT $L88277
	mov	ebx, DWORD PTR -28+[ebp]
$L88279:
; Line 6014
	add	DWORD PTR -12+[ebp], 448		; 000001c0H
	inc	edx
	add	ecx, 112				; 00000070H
; Line 6015
	cmp	edx, DWORD PTR -32+[ebp]
	jle	$L88274
$L88276:
; Line 6017
	movzx	eax, BYTE PTR _monster[ebx+214]
	xor	ecx, ecx
	cmp	DWORD PTR _v26$[ebp], eax
	sete	cl
	mov	eax, ecx
	jmp	SHORT $L88223
$L88252:
; Line 5942
	xor	eax, eax
$L88223:
	pop	edi
	pop	esi
	pop	ebx
; Line 6018
	leave
	ret	0
@DirOK@8 ENDP
_TEXT	ENDS
PUBLIC	@PosOkMissile@8
EXTRN	_nMissileTable:BYTE
; Function compile flags: /Ogsy
;	COMDAT @PosOkMissile@8
_TEXT	SEGMENT
@PosOkMissile@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 6022
	imul	ecx, 112				; 00000070H
	push	esi
	lea	eax, DWORD PTR [ecx+edx]
	mov	esi, DWORD PTR _dPiece[eax*4]
	xor	eax, eax
	cmp	BYTE PTR _nMissileTable[esi], al
	pop	esi
	jne	SHORT $L90224
	test	BYTE PTR _dFlags[ecx+edx], 16		; 00000010H
	jne	SHORT $L90224
	inc	eax
$L90224:
; Line 6023
	ret	0
@PosOkMissile@8 ENDP
_TEXT	ENDS
EXTRN	_nSolidTable:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CheckNoSolid@8
_TEXT	SEGMENT
@CheckNoSolid@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 6027
	imul	ecx, 112				; 00000070H
	add	ecx, edx
	mov	eax, DWORD PTR _dPiece[ecx*4]
	xor	ecx, ecx
	cmp	BYTE PTR _nSolidTable[eax], cl
	sete	cl
	mov	eax, ecx
; Line 6028
	ret	0
@CheckNoSolid@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @LineClearF@20
_TEXT	SEGMENT
_Clear$ = -20
_x1$ = -12
_y1$ = 8
_x2$ = 12
_y2$ = 16
_v7$ = -8
_v13$ = -8
_v21$ = -8
_v26$ = -16
_v29$ = -4
@LineClearF@20 PROC NEAR				; COMDAT
; _Clear$ = ecx
; _x1$ = edx
; Line 6031
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 6056
	mov	eax, DWORD PTR _y1$[ebp]
	push	ebx
	push	esi
; Line 6060
	mov	esi, DWORD PTR _x2$[ebp]
	push	edi
	mov	edi, DWORD PTR _y2$[ebp]
	sub	edi, eax
	mov	ebx, edx
; Line 6061
	push	edi
	mov	DWORD PTR _x1$[ebp], ebx
	mov	DWORD PTR _Clear$[ebp], ecx
	mov	DWORD PTR _v29$[ebp], ebx
	mov	DWORD PTR _v26$[ebp], eax
	sub	esi, ebx
	call	_abs
; Line 6062
	push	esi
	mov	DWORD PTR _v7$[ebp], eax
	call	_abs
	cmp	eax, DWORD PTR _v7$[ebp]
	pop	ecx
	pop	ecx
	jg	$L88332
; Line 6063
	test	edi, edi
	jge	SHORT $L88333
; Line 6064
	mov	eax, DWORD PTR _y1$[ebp]
; Line 6065
	mov	ecx, DWORD PTR _y2$[ebp]
; Line 6066
	mov	DWORD PTR _y2$[ebp], eax
; Line 6069
	mov	eax, DWORD PTR _x2$[ebp]
	neg	edi
	mov	DWORD PTR _y1$[ebp], ecx
	mov	DWORD PTR _v29$[ebp], eax
; Line 6070
	mov	DWORD PTR _x2$[ebp], ebx
; Line 6071
	neg	esi
$L88333:
; Line 6073
	lea	eax, DWORD PTR [esi+esi]
; Line 6075
	test	esi, esi
	mov	DWORD PTR -24+[ebp], eax
	jg	SHORT $L88334
; Line 6077
	add	esi, edi
	lea	ebx, DWORD PTR [eax+edi]
	add	esi, esi
; Line 6078
	or	DWORD PTR _v21$[ebp], -1
; Line 6079
	jmp	SHORT $L88337
$L88334:
; Line 6080
	mov	ebx, eax
; Line 6081
	sub	esi, edi
	sub	ebx, edi
	add	esi, esi
; Line 6082
	mov	DWORD PTR _v21$[ebp], 1
$L88337:
; Line 6086
	mov	ecx, DWORD PTR _y1$[ebp]
	mov	edi, DWORD PTR _v29$[ebp]
	cmp	ecx, DWORD PTR _y2$[ebp]
	jne	SHORT $L88339
	cmp	edi, DWORD PTR _x2$[ebp]
	je	$L88356
$L88339:
; Line 6088
	xor	ecx, ecx
	cmp	DWORD PTR _v21$[ebp], ecx
	setl	cl
	xor	edx, edx
	test	ebx, ebx
	setle	dl
	cmp	edx, ecx
	jne	SHORT $L88340
; Line 6090
	mov	ecx, DWORD PTR _v21$[ebp]
	mov	edx, DWORD PTR _v29$[ebp]
	add	ebx, esi
	lea	edi, DWORD PTR [ecx+edx]
; Line 6091
	mov	DWORD PTR _v29$[ebp], edi
; Line 6092
	jmp	SHORT $L88341
$L88340:
; Line 6093
	add	ebx, eax
$L88341:
; Line 6095
	mov	edx, DWORD PTR _y1$[ebp]
	inc	edx
	cmp	edx, DWORD PTR _v26$[ebp]
	mov	DWORD PTR _y1$[ebp], edx
	jne	SHORT $L88343
	cmp	edi, DWORD PTR _x1$[ebp]
	je	SHORT $L88337
$L88343:
	mov	ecx, edi
	call	DWORD PTR _Clear$[ebp]
	test	eax, eax
	je	$LABEL_29$88344
; Line 6084
	mov	eax, DWORD PTR -24+[ebp]
	jmp	SHORT $L88337
$L88332:
; Line 6099
	test	esi, esi
	jge	SHORT $L88346
; Line 6101
	mov	eax, DWORD PTR _x2$[ebp]
; Line 6105
	mov	ecx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _v29$[ebp], eax
	mov	eax, DWORD PTR _y1$[ebp]
	neg	esi
	mov	DWORD PTR _x2$[ebp], ebx
	mov	DWORD PTR _y1$[ebp], ecx
; Line 6106
	mov	DWORD PTR _y2$[ebp], eax
; Line 6107
	neg	edi
$L88346:
; Line 6109
	lea	eax, DWORD PTR [edi+edi]
; Line 6111
	test	edi, edi
	mov	DWORD PTR -24+[ebp], eax
	jg	SHORT $L88347
; Line 6113
	add	edi, esi
	lea	ebx, DWORD PTR [eax+esi]
	add	edi, edi
; Line 6114
	or	DWORD PTR _v13$[ebp], -1
; Line 6115
	jmp	SHORT $L88349
$L88347:
; Line 6116
	mov	ebx, eax
; Line 6117
	sub	edi, esi
	sub	ebx, esi
	add	edi, edi
; Line 6118
	mov	DWORD PTR _v13$[ebp], 1
	jmp	SHORT $L88349
$L90245:
	mov	eax, DWORD PTR -24+[ebp]
$L88349:
; Line 6122
	mov	ecx, DWORD PTR _v29$[ebp]
	mov	esi, DWORD PTR _y1$[ebp]
	cmp	ecx, DWORD PTR _x2$[ebp]
	jne	SHORT $L88352
	mov	ecx, esi
	cmp	ecx, DWORD PTR _y2$[ebp]
	je	SHORT $LABEL_29$88344
$L88352:
; Line 6124
	xor	ecx, ecx
	cmp	DWORD PTR _v13$[ebp], ecx
	setl	cl
	xor	edx, edx
	test	ebx, ebx
	setle	dl
	cmp	edx, ecx
	jne	SHORT $L88353
; Line 6132
	mov	ecx, DWORD PTR _v13$[ebp]
	mov	edx, DWORD PTR _y1$[ebp]
	add	ebx, edi
	lea	esi, DWORD PTR [ecx+edx]
	mov	DWORD PTR _y1$[ebp], esi
	jmp	SHORT $L88354
$L88353:
; Line 6129
	add	ebx, eax
$L88354:
; Line 6132
	mov	ecx, DWORD PTR _v29$[ebp]
	inc	ecx
	cmp	ecx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _v29$[ebp], ecx
	jne	SHORT $L88355
	cmp	esi, DWORD PTR _v26$[ebp]
	je	SHORT $L88349
$L88355:
	mov	edx, esi
	call	DWORD PTR _Clear$[ebp]
	test	eax, eax
	jne	SHORT $L90245
$LABEL_29$88344:
; Line 6134
	mov	eax, DWORD PTR _v29$[ebp]
	cmp	eax, DWORD PTR _x2$[ebp]
	je	SHORT $L88356
; Line 6135
	xor	eax, eax
	jmp	SHORT $L88357
$L88356:
; Line 6137
	mov	ecx, DWORD PTR _y2$[ebp]
	xor	eax, eax
	cmp	DWORD PTR _y1$[ebp], ecx
	sete	al
$L88357:
	pop	edi
	pop	esi
	pop	ebx
; Line 6140
	leave
	ret	12					; 0000000cH
@LineClearF@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @LineClear@16
_TEXT	SEGMENT
_x2$ = 8
_y2$ = 12
@LineClear@16 PROC NEAR					; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 6144
	push	DWORD PTR _y2$[esp-4]
	mov	eax, edx
	mov	edx, ecx
	mov	ecx, OFFSET FLAT:@PosOkMissile@8
	push	DWORD PTR _x2$[esp]
	push	eax
	call	@LineClearF@20
; Line 6145
	ret	8
@LineClear@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @LineClearF1@24
_TEXT	SEGMENT
_v21$ = -4
_v26$ = -8
_v27$ = -12
_Clear$ = -20
_monst$ = -16
_x1$ = 8
_y1$ = 12
_x2$ = 16
_y2$ = 20
_v8$ = -24
_v14$ = -4
@LineClearF1@24 PROC NEAR				; COMDAT
; _Clear$ = ecx
; _monst$ = edx
; Line 6148
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 6174
	mov	eax, DWORD PTR _x1$[ebp]
	push	ebx
; Line 6176
	mov	ebx, DWORD PTR _x2$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _Clear$[ebp], ecx
	mov	ecx, DWORD PTR _y1$[ebp]
	mov	esi, ebx
	sub	edi, ecx
	sub	esi, eax
; Line 6177
	push	edi
	mov	DWORD PTR _monst$[ebp], edx
	mov	DWORD PTR _v26$[ebp], eax
	mov	DWORD PTR _v27$[ebp], ecx
	mov	DWORD PTR -4+[ebp], esi
	call	_abs
; Line 6178
	push	esi
	mov	DWORD PTR _v8$[ebp], eax
	call	_abs
	cmp	eax, DWORD PTR _v8$[ebp]
	pop	ecx
	pop	ecx
	jg	$L88405
; Line 6179
	test	edi, edi
	jge	SHORT $L88406
; Line 6180
	mov	eax, DWORD PTR _y1$[ebp]
; Line 6181
	mov	ecx, DWORD PTR _y2$[ebp]
; Line 6182
	mov	DWORD PTR _y2$[ebp], eax
; Line 6183
	mov	eax, DWORD PTR _x1$[ebp]
; Line 6184
	neg	edi
	mov	DWORD PTR _y1$[ebp], ecx
; Line 6185
	mov	DWORD PTR _x1$[ebp], ebx
; Line 6186
	mov	DWORD PTR _x2$[ebp], eax
; Line 6187
	neg	esi
$L88406:
; Line 6189
	lea	ebx, DWORD PTR [esi+esi]
; Line 6191
	test	esi, esi
	mov	DWORD PTR -24+[ebp], ebx
	jg	SHORT $L88407
; Line 6193
	add	esi, edi
	add	ebx, edi
	add	esi, esi
; Line 6194
	or	DWORD PTR _v21$[ebp], -1
; Line 6195
	jmp	SHORT $L88410
$L88407:
; Line 6197
	sub	esi, edi
	sub	ebx, edi
	add	esi, esi
; Line 6198
	mov	DWORD PTR _v21$[ebp], 1
$L88410:
; Line 6202
	mov	eax, DWORD PTR _y1$[ebp]
	mov	edi, DWORD PTR _x1$[ebp]
	cmp	eax, DWORD PTR _y2$[ebp]
	jne	SHORT $L88412
	cmp	edi, DWORD PTR _x2$[ebp]
	je	$L88429
$L88412:
; Line 6204
	xor	eax, eax
	cmp	DWORD PTR _v21$[ebp], eax
	setl	al
	xor	ecx, ecx
	test	ebx, ebx
	setle	cl
	cmp	ecx, eax
	jne	SHORT $L88413
; Line 6206
	mov	eax, DWORD PTR _v21$[ebp]
	add	ebx, esi
	add	edi, eax
; Line 6207
	mov	DWORD PTR _x1$[ebp], edi
; Line 6208
	jmp	SHORT $L88414
$L88413:
; Line 6209
	add	ebx, DWORD PTR -24+[ebp]
$L88414:
; Line 6211
	inc	DWORD PTR _y1$[ebp]
	mov	eax, DWORD PTR _y1$[ebp]
	cmp	eax, DWORD PTR _v27$[ebp]
	jne	SHORT $L88416
	cmp	edi, DWORD PTR _v26$[ebp]
	je	SHORT $L88410
$L88416:
	push	DWORD PTR _y1$[ebp]
	mov	ecx, DWORD PTR _monst$[ebp]
	mov	edx, edi
	call	DWORD PTR _Clear$[ebp]
	test	eax, eax
	jne	SHORT $L88410
; Line 6200
	jmp	$LABEL_29$88417
$L88405:
; Line 6215
	test	esi, esi
	jge	SHORT $L88419
; Line 6216
	mov	eax, DWORD PTR _x1$[ebp]
; Line 6221
	mov	ecx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _x2$[ebp], eax
	mov	eax, DWORD PTR _y1$[ebp]
	neg	esi
	mov	DWORD PTR _x1$[ebp], ebx
	mov	DWORD PTR _y1$[ebp], ecx
; Line 6222
	mov	DWORD PTR _y2$[ebp], eax
; Line 6223
	neg	edi
$L88419:
; Line 6225
	lea	eax, DWORD PTR [edi+edi]
; Line 6227
	test	edi, edi
	mov	DWORD PTR -24+[ebp], eax
	jg	SHORT $L88420
; Line 6229
	add	edi, esi
	lea	ebx, DWORD PTR [eax+esi]
	add	edi, edi
; Line 6230
	or	DWORD PTR _v14$[ebp], -1
; Line 6231
	jmp	SHORT $L88422
$L88420:
; Line 6232
	mov	ebx, eax
; Line 6233
	sub	edi, esi
	sub	ebx, esi
	add	edi, edi
; Line 6234
	mov	DWORD PTR _v14$[ebp], 1
	jmp	SHORT $L88422
$L90261:
	mov	eax, DWORD PTR -24+[ebp]
$L88422:
; Line 6238
	mov	ecx, DWORD PTR _x1$[ebp]
	mov	esi, DWORD PTR _y1$[ebp]
	cmp	ecx, DWORD PTR _x2$[ebp]
	jne	SHORT $L88425
	cmp	esi, DWORD PTR _y2$[ebp]
	je	SHORT $LABEL_29$88417
$L88425:
; Line 6240
	xor	ecx, ecx
	cmp	DWORD PTR _v14$[ebp], ecx
	setl	cl
	xor	edx, edx
	test	ebx, ebx
	setle	dl
	cmp	edx, ecx
	jne	SHORT $L88426
; Line 6242
	mov	ecx, DWORD PTR _v14$[ebp]
	mov	edx, DWORD PTR _y1$[ebp]
	add	ebx, edi
	lea	esi, DWORD PTR [ecx+edx]
; Line 6243
	mov	DWORD PTR _y1$[ebp], esi
; Line 6244
	jmp	SHORT $L88423
$L88426:
; Line 6245
	add	ebx, eax
$L88423:
; Line 6247
	mov	edx, DWORD PTR _x1$[ebp]
	inc	edx
	cmp	edx, DWORD PTR _v26$[ebp]
	mov	DWORD PTR _x1$[ebp], edx
	jne	SHORT $L88428
	cmp	esi, DWORD PTR _v27$[ebp]
	je	SHORT $L88422
$L88428:
	mov	ecx, DWORD PTR _monst$[ebp]
	push	esi
	call	DWORD PTR _Clear$[ebp]
	test	eax, eax
	jne	SHORT $L90261
$LABEL_29$88417:
; Line 6249
	mov	eax, DWORD PTR _x2$[ebp]
	cmp	DWORD PTR _x1$[ebp], eax
	je	SHORT $L88429
; Line 6250
	xor	eax, eax
	jmp	SHORT $L88430
$L88429:
; Line 6252
	mov	ecx, DWORD PTR _y2$[ebp]
	xor	eax, eax
	cmp	DWORD PTR _y1$[ebp], ecx
	sete	al
$L88430:
	pop	edi
	pop	esi
	pop	ebx
; Line 6255
	leave
	ret	16					; 00000010H
@LineClearF1@24 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@MBEK@SyncMonsterAnim?3?5Invalid?5monster@ ; `string'
PUBLIC	@SyncMonsterAnim@4
;	COMDAT ??_C@_0CE@MBEK@SyncMonsterAnim?3?5Invalid?5monster@
_DATA	SEGMENT
??_C@_0CE@MBEK@SyncMonsterAnim?3?5Invalid?5monster@ DB 'SyncMonsterAnim: '
	DB	'Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SyncMonsterAnim@4
_TEXT	SEGMENT
@SyncMonsterAnim@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 6258
	push	esi
	mov	esi, ecx
; Line 6274
	cmp	esi, 200				; 000000c8H
	jb	SHORT $L88448
; Line 6275
	push	esi
	push	OFFSET FLAT:??_C@_0CE@MBEK@SyncMonsterAnim?3?5Invalid?5monster@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88448:
; Line 6277
	mov	eax, esi
	imul	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR _monster[eax]
; Line 6280
	mov	dl, BYTE PTR _monster[eax+188]
	imul	ecx, 328				; 00000148H
; Line 6283
	test	dl, dl
	mov	esi, DWORD PTR _Monsters[ecx+320]
	lea	ecx, DWORD PTR _Monsters[ecx]
	mov	DWORD PTR _monster[eax+220], ecx
	mov	DWORD PTR _monster[eax+224], esi
	je	SHORT $L88450
; Line 6284
	movzx	edx, dl
	shl	edx, 5
	mov	esi, DWORD PTR _UniqMonst[edx-28]
; Line 6285
	jmp	SHORT $L88451
$L88450:
; Line 6286
	mov	esi, DWORD PTR [esi+80]
$L88451:
; Line 6289
	mov	edx, DWORD PTR _monster[eax+72]
	mov	DWORD PTR _monster[eax+216], esi
	mov	esi, DWORD PTR _monster[eax+4]
; Line 6290
	cmp	esi, 17					; 00000011H
	ja	SHORT $L88464
	movzx	esi, BYTE PTR $L90268[esi]
	jmp	DWORD PTR $L90270[esi*4]
$L88456:
; Line 6294
	mov	ecx, DWORD PTR [ecx+edx*4+8]
; Line 6295
	jmp	SHORT $LABEL_13$88457
$L88458:
; Line 6299
	mov	ecx, DWORD PTR [ecx+edx*4+52]
; Line 6300
	jmp	SHORT $LABEL_13$88457
$L88459:
; Line 6303
	mov	ecx, DWORD PTR [ecx+edx*4+96]
; Line 6304
	jmp	SHORT $LABEL_13$88457
$L88460:
; Line 6306
	mov	ecx, DWORD PTR [ecx+edx*4+140]
; Line 6307
	jmp	SHORT $LABEL_13$88457
$L88461:
; Line 6309
	mov	ecx, DWORD PTR [ecx+edx*4+184]
; Line 6310
	jmp	SHORT $LABEL_13$88457
$L88462:
; Line 6317
	mov	ecx, DWORD PTR [ecx+edx*4+228]
$LABEL_13$88457:
; Line 6319
	mov	DWORD PTR _monster[eax+84], ecx
	pop	esi
; Line 6335
	ret	0
$L88463:
; Line 6322
	mov	edx, DWORD PTR [ecx+edx*4+96]
; Line 6325
	mov	ecx, DWORD PTR [ecx+128]
; Line 6326
	jmp	SHORT $L90269
$L88464:
; Line 6328
	mov	edx, DWORD PTR [ecx+edx*4+8]
; Line 6331
	mov	ecx, DWORD PTR [ecx+40]
$L90269:
	mov	DWORD PTR _monster[eax+100], 1
	mov	DWORD PTR _monster[eax+84], edx
; Line 6334
	mov	DWORD PTR _monster[eax+96], ecx
	pop	esi
; Line 6335
	ret	0
$L90270:
	DD	$L88456
	DD	$L88458
	DD	$L88459
	DD	$L88460
	DD	$L88461
	DD	$L88462
	DD	$L88463
	DD	$L88464
$L90268:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	0
	DB	6
	DB	7
	DB	5
	DB	0
@SyncMonsterAnim@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @M_FallenFear@8
_TEXT	SEGMENT
_x$ = -16
_y$ = -12
_v12$ = -8
@M_FallenFear@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 6338
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 6356
	xor	eax, eax
	mov	DWORD PTR _y$[ebp], edx
; Line 6357
	cmp	DWORD PTR _nummonsters, eax
	mov	DWORD PTR _x$[ebp], ecx
	mov	DWORD PTR _v12$[ebp], eax
	jle	$L88486
	push	ebx
	push	esi
	push	edi
; Line 6358
	mov	edi, OFFSET FLAT:_monster+32
	mov	DWORD PTR -4+[ebp], 4
$L88484:
; Line 6361
	mov	esi, DWORD PTR _monstactive[eax]
	xor	ebx, ebx
; Line 6362
	imul	esi, 228				; 000000e4H
	mov	eax, DWORD PTR _monster[esi+220]
	movzx	eax, BYTE PTR [eax]
; Line 6363
	cmp	eax, 12					; 0000000cH
	jle	SHORT $L90277
; Line 6364
	add	eax, -13				; fffffff3H
; Line 6366
	jmp	SHORT $L90278
$L90277:
; Line 6367
	je	SHORT $L88490
	add	eax, -4					; fffffffcH
	test	eax, eax
	je	SHORT $L88490
; Line 6371
	dec	eax
$L90278:
; Line 6372
	test	eax, eax
	sete	cl
; Line 6374
	test	cl, cl
	je	SHORT $L88492
; Line 6375
	push	5
; Line 6376
	jmp	SHORT $L90279
$L88492:
; Line 6377
	dec	eax
; Line 6378
	test	eax, eax
	je	SHORT $L88494
; Line 6379
	cmp	eax, 1
	jne	SHORT $LABEL_16$88496
; Line 6381
	push	2
; Line 6382
	jmp	SHORT $L90279
$L88494:
; Line 6383
	push	3
	jmp	SHORT $L90279
$L88490:
; Line 6368
	push	7
$L90279:
	pop	eax
$LABEL_15$88491:
; Line 6387
	mov	ebx, eax
$LABEL_16$88496:
; Line 6393
	cmp	BYTE PTR _monster[esi+152], 8
	jne	SHORT $L88498
	test	ebx, ebx
	je	SHORT $L88498
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _monster[esi+32]
	push	eax
	call	_abs
	cmp	eax, 5
	pop	ecx
	jge	SHORT $L88498
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _monster[esi+36]
	push	eax
	call	_abs
	cmp	eax, 5
	pop	ecx
	jge	SHORT $L88498
	test	DWORD PTR _monster[esi+148], -64	; ffffffc0H
	jle	SHORT $L88498
; Line 6396
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	BYTE PTR _monster[esi+8], 2
	mov	DWORD PTR _monster[esi+12], ebx
	push	DWORD PTR [edi+4]
	push	DWORD PTR [edi]
	call	@GetDirection@16
	mov	DWORD PTR _monster[esi+72], eax
$L88498:
; Line 6399
	mov	eax, DWORD PTR -4+[ebp]
	add	DWORD PTR -4+[ebp], 4
	add	edi, 228				; 000000e4H
	inc	DWORD PTR _v12$[ebp]
; Line 6400
	mov	ecx, DWORD PTR _v12$[ebp]
	cmp	ecx, DWORD PTR _nummonsters
	jl	$L88484
	pop	edi
	pop	esi
	pop	ebx
$L88486:
; Line 6402
	leave
	ret	0
@M_FallenFear@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@PGAC@Total?5kills?5?3?5?$CFi?$AA@	; `string'
PUBLIC	??_C@_0BD@JGJE@Hit?5Points?5?3?5?$CFi?9?$CFi?$AA@ ; `string'
PUBLIC	??_C@_0L@DOFD@Resists?5?3?5?$AA@		; `string'
PUBLIC	??_C@_06LMLO@Magic?5?$AA@			; `string'
PUBLIC	??_C@_05BLKB@Fire?5?$AA@			; `string'
PUBLIC	??_C@_0L@FFDP@Lightning?5?$AA@			; `string'
PUBLIC	??_C@_09CBB@Immune?5?3?5?$AA@			; `string'
PUBLIC	??_C@_0BE@DLNG@No?5magic?5resistance?$AA@	; `string'
PUBLIC	@PrintMonstHistory@4
EXTRN	_pinfoflag:DWORD
EXTRN	_strcpy:NEAR
EXTRN	_strcat:NEAR
EXTRN	_strlen:NEAR
EXTRN	@AddPanelString@8:NEAR
;	COMDAT ??_C@_0BB@PGAC@Total?5kills?5?3?5?$CFi?$AA@
_DATA	SEGMENT
??_C@_0BB@PGAC@Total?5kills?5?3?5?$CFi?$AA@ DB 'Total kills : %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@JGJE@Hit?5Points?5?3?5?$CFi?9?$CFi?$AA@
_DATA	SEGMENT
??_C@_0BD@JGJE@Hit?5Points?5?3?5?$CFi?9?$CFi?$AA@ DB 'Hit Points : %i-%i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06LMLO@Magic?5?$AA@
_DATA	SEGMENT
??_C@_06LMLO@Magic?5?$AA@ DB 'Magic ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05BLKB@Fire?5?$AA@
_DATA	SEGMENT
??_C@_05BLKB@Fire?5?$AA@ DB 'Fire ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DOFD@Resists?5?3?5?$AA@
_DATA	SEGMENT
??_C@_0L@DOFD@Resists?5?3?5?$AA@ DB 'Resists : ', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FFDP@Lightning?5?$AA@
_DATA	SEGMENT
??_C@_0L@FFDP@Lightning?5?$AA@ DB 'Lightning ', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CBB@Immune?5?3?5?$AA@
_DATA	SEGMENT
??_C@_09CBB@Immune?5?3?5?$AA@ DB 'Immune : ', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DLNG@No?5magic?5resistance?$AA@
_DATA	SEGMENT
??_C@_0BE@DLNG@No?5magic?5resistance?$AA@ DB 'No magic resistance', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PrintMonstHistory@4
_TEXT	SEGMENT
@PrintMonstHistory@4 PROC NEAR				; COMDAT
; _mt$ = ecx
; Line 6405
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
; Line 6416
	mov	esi, OFFSET FLAT:_tempstr
	lea	ebp, DWORD PTR _monstkills[edi*4]
	push	DWORD PTR [ebp]
	push	OFFSET FLAT:??_C@_0BB@PGAC@Total?5kills?5?3?5?$CFi?$AA@ ; `string'
	push	esi
	call	_sprintf
; Line 6417
	xor	ebx, ebx
	add	esp, 12					; 0000000cH
	inc	ebx
	mov	ecx, esi
	mov	edx, ebx
	call	@AddPanelString@8
; Line 6418
	cmp	DWORD PTR [ebp], 30			; 0000001eH
	jl	SHORT $L88511
; Line 6419
	mov	eax, edi
	shl	eax, 7
; Line 6421
	cmp	BYTE PTR _gbMaxPlayers, bl
	mov	ecx, DWORD PTR _monsterdata[eax+88]
	mov	eax, DWORD PTR _monsterdata[eax+92]
	jne	SHORT $L88512
; Line 6422
	sar	ecx, 1
; Line 6423
	sar	eax, 1
$L88512:
; Line 6425
	cmp	ecx, ebx
	jge	SHORT $L88513
; Line 6426
	mov	ecx, ebx
$L88513:
; Line 6427
	cmp	eax, ebx
	jge	SHORT $L88514
; Line 6428
	mov	eax, ebx
$L88514:
; Line 6429
	mov	edx, DWORD PTR _gnDifficulty
	cmp	edx, ebx
	jne	SHORT $L88515
; Line 6430
	lea	ecx, DWORD PTR [ecx+ecx*2+1]
; Line 6431
	lea	eax, DWORD PTR [eax+eax*2+1]
$L88515:
; Line 6433
	cmp	edx, 2
	jne	SHORT $L88516
; Line 6434
	lea	ecx, DWORD PTR [ecx*4+3]
; Line 6435
	lea	eax, DWORD PTR [eax*4+3]
$L88516:
; Line 6437
	push	eax
	push	ecx
	push	OFFSET FLAT:??_C@_0BD@JGJE@Hit?5Points?5?3?5?$CFi?9?$CFi?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 6438
	mov	edx, ebx
	mov	ecx, esi
	call	@AddPanelString@8
$L88511:
; Line 6440
	cmp	DWORD PTR [ebp], 15			; 0000000fH
	jl	$L88539
; Line 6441
	shl	edi, 7
; Line 6442
	cmp	DWORD PTR _gnDifficulty, 2
	jne	SHORT $L88519
; Line 6443
	mov	ax, WORD PTR _monsterdata[edi+118]
; Line 6444
	jmp	SHORT $L88522
$L88519:
; Line 6445
	mov	ax, WORD PTR _monsterdata[edi+116]
$L88522:
; Line 6446
	and	eax, 63					; 0000003fH
	mov	ebx, eax
; Line 6447
	je	$L88525
; Line 6448
	test	bl, 7
	mov	edi, OFFSET FLAT:??_C@_06LMLO@Magic?5?$AA@ ; `string'
	mov	ebp, OFFSET FLAT:??_C@_05BLKB@Fire?5?$AA@ ; `string'
	je	SHORT $L88526
; Line 6449
	push	OFFSET FLAT:??_C@_0L@DOFD@Resists?5?3?5?$AA@ ; `string'
	push	esi
	call	_strcpy
	pop	ecx
; Line 6450
	test	bl, 1
	pop	ecx
	je	SHORT $L88528
; Line 6451
	push	edi
	push	esi
	call	_strcat
	pop	ecx
	pop	ecx
$L88528:
; Line 6452
	test	bl, 2
	je	SHORT $L88530
; Line 6453
	push	ebp
	push	esi
	call	_strcat
	pop	ecx
	pop	ecx
$L88530:
; Line 6454
	test	bl, 4
	je	SHORT $L88532
; Line 6455
	push	OFFSET FLAT:??_C@_0L@FFDP@Lightning?5?$AA@ ; `string'
	push	esi
	call	_strcat
	pop	ecx
	pop	ecx
$L88532:
; Line 6456
	push	esi
	call	_strlen
	and	BYTE PTR _tempstr[eax-1], 0
	pop	ecx
; Line 6457
	xor	edx, edx
	mov	ecx, esi
	inc	edx
	call	@AddPanelString@8
$L88526:
; Line 6459
	test	bl, 56					; 00000038H
	je	SHORT $L88539
; Line 6460
	push	OFFSET FLAT:??_C@_09CBB@Immune?5?3?5?$AA@ ; `string'
	push	esi
	call	_strcpy
	pop	ecx
; Line 6461
	test	bl, 8
	pop	ecx
	je	SHORT $L88536
; Line 6462
	push	edi
	push	esi
	call	_strcat
	pop	ecx
	pop	ecx
$L88536:
; Line 6463
	test	bl, 16					; 00000010H
	je	SHORT $L88537
; Line 6464
	push	ebp
	push	esi
	call	_strcat
	pop	ecx
	pop	ecx
$L88537:
; Line 6465
	test	bl, 32					; 00000020H
	je	SHORT $L88538
; Line 6466
	push	OFFSET FLAT:??_C@_0L@FFDP@Lightning?5?$AA@ ; `string'
	push	esi
	call	_strcat
	pop	ecx
	pop	ecx
$L88538:
; Line 6467
	push	esi
	call	_strlen
	and	BYTE PTR _tempstr[eax-1], 0
; Line 6470
	jmp	SHORT $L90284
$L88525:
; Line 6471
	push	OFFSET FLAT:??_C@_0BE@DLNG@No?5magic?5resistance?$AA@ ; `string'
	push	esi
	call	_strcpy
	pop	ecx
$L90284:
	pop	ecx
; Line 6472
	xor	edx, edx
	mov	ecx, esi
	inc	edx
	call	@AddPanelString@8
$L88539:
	pop	edi
	pop	esi
	pop	ebp
; Line 6475
	mov	DWORD PTR _pinfoflag, 1
	pop	ebx
; Line 6476
	ret	0
@PrintMonstHistory@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@BEKG@Some?5Magic?5Resistances?$AA@	; `string'
PUBLIC	??_C@_0P@JAMA@No?5resistances?$AA@		; `string'
PUBLIC	??_C@_0BG@HGOK@Some?5Magic?5Immunities?$AA@	; `string'
PUBLIC	??_C@_0O@OIFE@No?5Immunities?$AA@		; `string'
PUBLIC	_PrintUniqueHistory
EXTRN	_pcursmonst:DWORD
;	COMDAT ??_C@_0BH@BEKG@Some?5Magic?5Resistances?$AA@
_DATA	SEGMENT
??_C@_0BH@BEKG@Some?5Magic?5Resistances?$AA@ DB 'Some Magic Resistances', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@JAMA@No?5resistances?$AA@
_DATA	SEGMENT
??_C@_0P@JAMA@No?5resistances?$AA@ DB 'No resistances', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@HGOK@Some?5Magic?5Immunities?$AA@
_DATA	SEGMENT
??_C@_0BG@HGOK@Some?5Magic?5Immunities?$AA@ DB 'Some Magic Immunities', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@OIFE@No?5Immunities?$AA@
_DATA	SEGMENT
??_C@_0O@OIFE@No?5Immunities?$AA@ DB 'No Immunities', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _PrintUniqueHistory
_TEXT	SEGMENT
_PrintUniqueHistory PROC NEAR				; COMDAT
; Line 6484
	mov	eax, DWORD PTR _pcursmonst
	push	ebx
	imul	eax, 228				; 000000e4H
	push	esi
; Line 6487
	mov	esi, OFFSET FLAT:_tempstr
	lea	eax, DWORD PTR _monster[eax+204]
	mov	bl, BYTE PTR [eax]
	and	bl, 63					; 0000003fH
	je	SHORT $L88543
; Line 6486
	test	BYTE PTR [eax], 7
	je	SHORT $L88544
; Line 6487
	push	OFFSET FLAT:??_C@_0BH@BEKG@Some?5Magic?5Resistances?$AA@ ; `string'
; Line 6488
	jmp	SHORT $L90288
$L88544:
; Line 6489
	push	OFFSET FLAT:??_C@_0P@JAMA@No?5resistances?$AA@ ; `string'
$L90288:
	push	esi
	call	_strcpy
	pop	ecx
; Line 6490
	xor	edx, edx
	pop	ecx
	inc	edx
	mov	ecx, esi
	call	@AddPanelString@8
; Line 6491
	test	bl, 56					; 00000038H
	je	SHORT $L88551
; Line 6492
	push	OFFSET FLAT:??_C@_0BG@HGOK@Some?5Magic?5Immunities?$AA@ ; `string'
; Line 6493
	jmp	SHORT $L90289
$L88543:
; Line 6496
	push	OFFSET FLAT:??_C@_0P@JAMA@No?5resistances?$AA@ ; `string'
	push	esi
	call	_strcpy
	pop	ecx
; Line 6497
	xor	edx, edx
	pop	ecx
	inc	edx
	mov	ecx, esi
	call	@AddPanelString@8
$L88551:
; Line 6499
	push	OFFSET FLAT:??_C@_0O@OIFE@No?5Immunities?$AA@ ; `string'
$L90289:
	push	esi
	call	_strcpy
	pop	ecx
; Line 6501
	xor	edx, edx
	pop	ecx
	inc	edx
	mov	ecx, esi
$LABEL_4$88550:
	call	@AddPanelString@8
	pop	esi
; Line 6502
	mov	DWORD PTR _pinfoflag, 1
	pop	ebx
; Line 6503
	ret	0
_PrintUniqueHistory ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@DGBE@MissToMonst?3?5Invalid?5missile?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CA@CKBO@MissToMonst?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	@MissToMonst@12
;	COMDAT ??_C@_0CA@DGBE@MissToMonst?3?5Invalid?5missile?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@DGBE@MissToMonst?3?5Invalid?5missile?5?$CFd?$AA@ DB 'MissToMons'
	DB	't: Invalid missile %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CA@CKBO@MissToMonst?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@CKBO@MissToMonst?3?5Invalid?5monster?5?$CFd?$AA@ DB 'MissToMons'
	DB	't: Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MissToMonst@12
_TEXT	SEGMENT
_y$ = 8
_v31$ = -12
_v32$ = -8
@MissToMonst@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 6507
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
; Line 6542
	cmp	ebx, 125				; 0000007dH
	mov	edi, edx
	jb	SHORT $L88592
; Line 6543
	push	ebx
	push	OFFSET FLAT:??_C@_0CA@DGBE@MissToMonst?3?5Invalid?5missile?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88592:
; Line 6544
	imul	ebx, 176				; 000000b0H
	add	ebx, OFFSET FLAT:_missile
; Line 6545
	mov	esi, DWORD PTR [ebx+116]
; Line 6547
	cmp	esi, 200				; 000000c8H
	mov	DWORD PTR -4+[ebp], esi
	jb	SHORT $L88594
; Line 6548
	push	esi
	push	OFFSET FLAT:??_C@_0CA@CKBO@MissToMonst?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88594:
; Line 6551
	imul	esi, 228				; 000000e4H
	mov	eax, DWORD PTR [ebx+4]
	add	esi, OFFSET FLAT:_monster
; Line 6553
	mov	ecx, DWORD PTR -4+[ebp]
	mov	DWORD PTR _v32$[ebp], eax
	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [esi+32], edi
	imul	edi, 112				; 00000070H
; Line 6554
	mov	ebx, DWORD PTR [ebx+44]
	mov	DWORD PTR _v31$[ebp], eax
	mov	eax, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+1]
	add	edi, eax
; Line 6555
	mov	DWORD PTR [esi+72], ebx
; Line 6556
	mov	DWORD PTR [esi+36], eax
	mov	DWORD PTR _dMonster[edi*4], edx
; Line 6557
	mov	edx, ebx
	call	@M_StartStand@8
; Line 6558
	mov	eax, DWORD PTR [esi+220]
	mov	al, BYTE PTR [eax]
; Line 6559
	cmp	al, 72					; 00000048H
	jl	SHORT $L88597
	cmp	al, 75					; 0000004bH
	jg	SHORT $L88597
; Line 6565
	mov	edx, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR -4+[ebp]
	push	0
	call	@M_StartFadein@12
	jmp	SHORT $L88599
$L88597:
; Line 6561
	mov	ecx, DWORD PTR -4+[ebp]
	or	edx, -1
	test	BYTE PTR [esi+156], 16			; 00000010H
	push	0
	je	SHORT $L88598
	call	@M2MStartHit@12
; Line 6562
	jmp	SHORT $L88599
$L88598:
; Line 6563
	call	@M_StartHit@12
$L88599:
; Line 6569
	mov	eax, DWORD PTR _v32$[ebp]
	imul	eax, 112				; 00000070H
	test	BYTE PTR [esi+156], 16			; 00000010H
	je	$L88601
	add	eax, DWORD PTR _v31$[ebp]
	lea	ebx, DWORD PTR _dMonster[eax*4]
; Line 6570
	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	jle	$L88622
; Line 6571
	mov	ecx, DWORD PTR [esi+220]
	mov	cl, BYTE PTR [ecx]
; Line 6572
	cmp	cl, 40					; 00000028H
	je	$L88622
	cmp	cl, 72					; 00000048H
	jl	SHORT $L88606
	cmp	cl, 75					; 0000004bH
	jle	$L88622
$L88606:
; Line 6573
	movzx	ecx, BYTE PTR [esi+201]
	push	ecx
	lea	edx, DWORD PTR [eax-1]
	movzx	ecx, BYTE PTR [esi+200]
	push	ecx
	mov	ecx, DWORD PTR -4+[ebp]
	push	500					; 000001f4H
	call	@M_TryM2MHit@20
; Line 6574
	mov	eax, DWORD PTR [esi+220]
	mov	al, BYTE PTR [eax]
; Line 6575
	cmp	al, 89					; 00000059H
	jl	SHORT $L88610
	cmp	al, 92					; 0000005cH
	jle	$L88622
$L88610:
; Line 6576
	mov	esi, DWORD PTR [esi+72]
; Line 6579
	mov	ecx, DWORD PTR [ebx]
	mov	eax, esi
	shl	eax, 2
	mov	esi, DWORD PTR _offset_x[eax]
	mov	edi, DWORD PTR _offset_y[eax]
	add	esi, DWORD PTR _v32$[ebp]
	add	edi, DWORD PTR _v31$[ebp]
	dec	ecx
	push	edi
	mov	edx, esi
	call	@PosOkMonst@12
	test	eax, eax
	je	$L88622
; Line 6581
	mov	ecx, esi
	mov	eax, DWORD PTR [ebx]
	imul	ecx, 112				; 00000070H
	add	ecx, edi
	mov	DWORD PTR _dMonster[ecx*4], eax
; Line 6582
	and	DWORD PTR [ebx], 0
; Line 6583
	dec	eax
; Line 6584
	imul	eax, 228				; 000000e4H
	mov	DWORD PTR _monster[eax+32], esi
; Line 6585
	mov	DWORD PTR _monster[eax+40], esi
; Line 6586
	mov	DWORD PTR _monster[eax+36], edi
; Line 6587
	mov	DWORD PTR _monster[eax+44], edi
; Line 6592
	jmp	$L88622
$L88601:
; Line 6593
	mov	ecx, DWORD PTR _v31$[ebp]
	lea	edi, DWORD PTR _dPlayer[eax+ecx]
; Line 6594
	mov	cl, BYTE PTR [edi]
	movsx	eax, cl
; Line 6597
	test	cl, cl
	lea	ebx, DWORD PTR [eax-1]
	mov	DWORD PTR 8+[ebp], ebx
	jle	$L88622
; Line 6598
	mov	eax, DWORD PTR [esi+220]
	mov	al, BYTE PTR [eax]
; Line 6599
	cmp	al, 40					; 00000028H
	je	$L88622
	cmp	al, 72					; 00000048H
	jl	SHORT $L88615
	cmp	al, 75					; 0000004bH
	jle	$L88622
$L88615:
; Line 6600
	movzx	eax, BYTE PTR [esi+201]
	mov	ecx, DWORD PTR -4+[ebp]
	push	eax
	movzx	eax, BYTE PTR [esi+200]
	push	eax
	push	500					; 000001f4H
	mov	edx, ebx
	call	@M_TryH2HHit@20
; Line 6601
	movsx	eax, BYTE PTR [edi]
	dec	eax
	cmp	ebx, eax
	jne	$L88622
; Line 6602
	mov	eax, DWORD PTR [esi+220]
	mov	al, BYTE PTR [eax]
; Line 6603
	cmp	al, 89					; 00000059H
	jl	SHORT $L88620
	cmp	al, 92					; 0000005cH
	jle	$L88622
$L88620:
; Line 6605
	imul	ebx, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[ebx]
; Line 6606
	cmp	eax, 7
	je	SHORT $L88621
	cmp	eax, 8
	je	SHORT $L88621
; Line 6607
	mov	ecx, DWORD PTR 8+[ebp]
	push	1
	xor	edx, edx
	call	@StartPlrHit@12
$L88621:
; Line 6608
	mov	esi, DWORD PTR [esi+72]
; Line 6611
	mov	ecx, DWORD PTR 8+[ebp]
	mov	eax, esi
	shl	eax, 2
	mov	esi, DWORD PTR _offset_x[eax]
	mov	edi, DWORD PTR _offset_y[eax]
	add	esi, DWORD PTR _v32$[ebp]
	add	edi, DWORD PTR _v31$[ebp]
	push	edi
	mov	edx, esi
	call	@PosOkPlayer@12
	test	eax, eax
	je	SHORT $L88622
; Line 6615
	mov	edx, DWORD PTR _plr[ebx+112]
	mov	DWORD PTR _plr[ebx+56], esi
	mov	DWORD PTR _plr[ebx+60], edi
	mov	ebx, DWORD PTR 8+[ebp]
	mov	ecx, ebx
	call	@FixPlayerLocation@8
; Line 6616
	mov	ecx, ebx
	call	@FixPlrWalkTags@4
; Line 6617
	imul	esi, 112				; 00000070H
	mov	al, bl
; Line 6618
	mov	ecx, ebx
	inc	al
	mov	BYTE PTR _dPlayer[esi+edi], al
	call	@SetPlayerOld@4
$L88622:
	pop	edi
	pop	esi
	pop	ebx
; Line 6625
	leave
	ret	4
@MissToMonst@12 ENDP
_TEXT	ENDS
EXTRN	_dMissile:BYTE
EXTRN	_object:BYTE
EXTRN	_dObject:BYTE
; Function compile flags: /Ogsy
;	COMDAT @PosOkMonst@12
_TEXT	SEGMENT
_i$ = -4
_y$ = 8
@PosOkMonst@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 6628
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 6633
	mov	esi, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, edx
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, esi
	mov	ecx, edi
	xor	ebx, ebx
	call	@SolidLoc@8
	test	eax, eax
	jne	$L88646
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	cmp	BYTE PTR _dPlayer[ecx+esi], al
	jne	$L88646
	lea	eax, DWORD PTR [ecx+esi]
	cmp	DWORD PTR _dMonster[eax*4], ebx
	jne	$L88646
; Line 6634
	mov	dl, BYTE PTR _dObject[ecx+esi]
	xor	eax, eax
	inc	eax
	test	dl, dl
	je	SHORT $L90302
; Line 6635
	jle	SHORT $L90297
	movsx	edx, dl
	dec	edx
	jmp	SHORT $L90298
$L90297:
	movsx	edi, dl
	or	edx, -1
	sub	edx, edi
$L90298:
; Line 6636
	imul	edx, 120				; 00000078H
	cmp	DWORD PTR _object[edx+56], 0
; Line 6640
	jne	SHORT $L88646
$L90302:
	mov	cl, BYTE PTR _dMissile[ecx+esi]
	test	cl, cl
	je	SHORT $L88645
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $L88645
; Line 6641
	movsx	ecx, cl
; Line 6642
	test	ecx, ecx
	jle	SHORT $L88645
; Line 6643
	imul	ecx, 176				; 000000b0H
	cmp	DWORD PTR _missile[ecx], 5
; Line 6645
	je	SHORT $L90303
; Line 6646
	mov	edx, DWORD PTR _nummissiles
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $L88645
$L88641:
; Line 6647
	mov	esi, DWORD PTR _missileactive[ecx*4]
	imul	esi, 176				; 000000b0H
	cmp	DWORD PTR _missile[esi], 5
	jne	SHORT $L88642
; Line 6648
	xor	ebx, ebx
	inc	ebx
$L88642:
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $L88641
; Line 6652
	test	ebx, ebx
	je	SHORT $L88645
$L90303:
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 228				; 000000e4H
	test	BYTE PTR _monster[ecx+204], 16		; 00000010H
	je	SHORT $L88646
	mov	ecx, DWORD PTR _monster[ecx+220]
	cmp	BYTE PTR [ecx], 110			; 0000006eH
	jne	SHORT $L88645
$L88646:
; Line 6653
	xor	eax, eax
$L88645:
	pop	edi
	pop	esi
	pop	ebx
; Line 6657
	leave
	ret	4
@PosOkMonst@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @PosOkMonst2@12
_TEXT	SEGMENT
_y$ = 8
@PosOkMonst2@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 6660
	push	ebx
	push	ebp
	push	esi
; Line 6665
	mov	esi, DWORD PTR _y$[esp+8]
	push	edi
	mov	edi, edx
	mov	ebx, ecx
	mov	edx, esi
	mov	ecx, edi
	xor	ebp, ebp
	call	@SolidLoc@8
	neg	eax
	sbb	eax, eax
	inc	eax
; Line 6666
	je	$L88669
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	mov	dl, BYTE PTR _dObject[ecx+esi]
	test	dl, dl
	je	SHORT $L88660
; Line 6667
	jle	SHORT $L90307
	movsx	edx, dl
	dec	edx
	jmp	SHORT $L90308
$L90307:
	movsx	edi, dl
	or	edx, -1
	sub	edx, edi
$L90308:
; Line 6668
	imul	edx, 120				; 00000078H
	cmp	DWORD PTR _object[edx+56], 0
	je	SHORT $L88660
; Line 6669
	xor	eax, eax
$L88660:
; Line 6672
	test	eax, eax
	je	SHORT $L88669
	mov	cl, BYTE PTR _dMissile[ecx+esi]
	test	cl, cl
	je	SHORT $L88669
	test	ebx, ebx
	jl	SHORT $L88669
; Line 6673
	movsx	ecx, cl
; Line 6674
	test	ecx, ecx
	jle	SHORT $L88669
; Line 6675
	imul	ecx, 176				; 000000b0H
	cmp	DWORD PTR _missile[ecx], 5
; Line 6677
	je	SHORT $L90311
; Line 6678
	mov	edx, DWORD PTR _nummissiles
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $L88669
$L88665:
; Line 6679
	mov	esi, DWORD PTR _missileactive[ecx*4]
	imul	esi, 176				; 000000b0H
	cmp	DWORD PTR _missile[esi], 5
	jne	SHORT $L88666
; Line 6680
	xor	ebp, ebp
	inc	ebp
$L88666:
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $L88665
; Line 6684
	test	ebp, ebp
	je	SHORT $L88669
$L90311:
	mov	ecx, ebx
	imul	ecx, 228				; 000000e4H
	test	BYTE PTR _monster[ecx+204], 16		; 00000010H
	je	SHORT $L88670
	mov	ecx, DWORD PTR _monster[ecx+220]
	cmp	BYTE PTR [ecx], 110			; 0000006eH
	jne	SHORT $L88669
$L88670:
; Line 6685
	xor	eax, eax
$L88669:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 6689
	ret	4
@PosOkMonst2@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @PosOkMonst3@12
_TEXT	SEGMENT
_i$ = -8
_x$ = -12
_y$ = 8
_fire$ = -4
@PosOkMonst3@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 6692
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, edx
	push	edi
	mov	DWORD PTR _x$[ebp], esi
; Line 6698
	imul	esi, 112				; 00000070H
	mov	edi, DWORD PTR _y$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR _fire$[ebp], ebx
	mov	al, BYTE PTR _dObject[esi+edi]
	test	al, al
	je	SHORT $L88687
; Line 6699
	jle	SHORT $L90316
	movsx	eax, al
	dec	eax
	jmp	SHORT $L90317
$L90316:
	movsx	ecx, al
	or	eax, -1
	sub	eax, ecx
$L90317:
; Line 6700
	imul	eax, 120				; 00000078H
; Line 6701
	xor	ebx, ebx
	mov	ecx, DWORD PTR _object[eax]
	inc	ebx
; Line 6707
	cmp	ecx, ebx
	je	SHORT $L88686
	cmp	ecx, 2
	je	SHORT $L88686
	cmp	ecx, 42					; 0000002aH
	je	SHORT $L88686
	cmp	ecx, 43					; 0000002bH
	je	SHORT $L88686
	cmp	ecx, 74					; 0000004aH
	je	SHORT $L88686
	cmp	ecx, 75					; 0000004bH
	je	SHORT $L88686
; Line 6708
	xor	ebx, ebx
$L88686:
; Line 6710
	cmp	DWORD PTR _object[eax+56], 0
	je	SHORT $L88687
	test	ebx, ebx
; Line 6711
	je	$L88689
$L88687:
; Line 6714
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, edi
	call	@SolidLoc@8
	test	eax, eax
	je	SHORT $L88690
	test	ebx, ebx
	je	$L88689
$L88690:
	cmp	BYTE PTR _dPlayer[esi+edi], 0
	jne	$L88689
	lea	eax, DWORD PTR [esi+edi]
	xor	edx, edx
	cmp	DWORD PTR _dMonster[eax*4], edx
	jne	SHORT $L88689
; Line 6718
	mov	cl, BYTE PTR _dMissile[esi+edi]
	xor	eax, eax
	inc	eax
	test	cl, cl
	je	SHORT $L88677
	cmp	DWORD PTR _i$[ebp], edx
	jl	SHORT $L88677
; Line 6719
	movsx	ecx, cl
; Line 6720
	cmp	ecx, edx
	jle	SHORT $L88677
; Line 6721
	imul	ecx, 176				; 000000b0H
	cmp	DWORD PTR _missile[ecx], 5
; Line 6723
	je	SHORT $L90320
; Line 6724
	mov	ecx, DWORD PTR _nummissiles
	test	ecx, ecx
	jle	SHORT $L88677
$L88695:
; Line 6725
	mov	esi, DWORD PTR _missileactive[edx*4]
	imul	esi, 176				; 000000b0H
	cmp	DWORD PTR _missile[esi], 5
	jne	SHORT $L88696
; Line 6726
	mov	DWORD PTR _fire$[ebp], eax
$L88696:
; Line 6724
	inc	edx
	cmp	edx, ecx
	jl	SHORT $L88695
; Line 6730
	cmp	DWORD PTR _fire$[ebp], 0
	je	SHORT $L88677
$L90320:
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 228				; 000000e4H
	test	BYTE PTR _monster[ecx+204], 16		; 00000010H
	je	SHORT $L88689
	mov	ecx, DWORD PTR _monster[ecx+220]
	cmp	BYTE PTR [ecx], 110			; 0000006eH
	jne	SHORT $L88677
$L88689:
; Line 6715
	xor	eax, eax
$L88677:
	pop	edi
	pop	esi
	pop	ebx
; Line 6734
	leave
	ret	4
@PosOkMonst3@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @IsSkel@4
_TEXT	SEGMENT
@IsSkel@4 PROC NEAR					; COMDAT
; _mt$ = ecx
; Line 6740
	cmp	ecx, 8
	jl	SHORT $L90325
	cmp	ecx, 11					; 0000000bH
	jle	SHORT $L90327
$L90325:
	cmp	ecx, 20					; 00000014H
	jl	SHORT $L90326
	cmp	ecx, 23					; 00000017H
	jle	SHORT $L90327
$L90326:
	cmp	ecx, 24					; 00000018H
	jl	SHORT $L90328
	cmp	ecx, 27					; 0000001bH
	jg	SHORT $L90328
$L90327:
	xor	eax, eax
	inc	eax
; Line 6741
	ret	0
$L90328:
; Line 6740
	xor	eax, eax
; Line 6741
	ret	0
@IsSkel@4 ENDP
_TEXT	ENDS
PUBLIC	@IsGoat@4
; Function compile flags: /Ogsy
;	COMDAT @IsGoat@4
_TEXT	SEGMENT
@IsGoat@4 PROC NEAR					; COMDAT
; _mt$ = ecx
; Line 6746
	cmp	ecx, 34					; 00000022H
	jl	SHORT $L90333
	cmp	ecx, 37					; 00000025H
	jle	SHORT $L90335
$L90333:
	cmp	ecx, 42					; 0000002aH
	jl	SHORT $L90334
	cmp	ecx, 45					; 0000002dH
	jg	SHORT $L90334
$L90335:
	xor	eax, eax
	inc	eax
; Line 6747
	ret	0
$L90334:
; Line 6746
	xor	eax, eax
; Line 6747
	ret	0
@IsGoat@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @M_SpawnSkel@12
_TEXT	SEGMENT
_x$ = -16
_y$ = -12
_dir$ = 8
_j$ = -4
_skeltypes$ = -8
@M_SpawnSkel@12 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 6750
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 6754
	mov	eax, DWORD PTR _nummtypes
	mov	DWORD PTR _y$[ebp], edx
	push	ebx
	xor	edx, edx
	push	esi
	push	edi
	test	eax, eax
	mov	DWORD PTR _x$[ebp], ecx
	jle	$L88722
	mov	ebx, OFFSET FLAT:_Monsters
	mov	DWORD PTR -4+[ebp], eax
	mov	esi, ebx
	mov	edi, 328				; 00000148H
$L88718:
; Line 6755
	movzx	ecx, BYTE PTR [esi]
	call	@IsSkel@4
	test	eax, eax
	je	SHORT $L88719
; Line 6756
	inc	edx
$L88719:
; Line 6754
	add	esi, edi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L88718
; Line 6759
	test	edx, edx
	je	SHORT $L88722
; Line 6760
	mov	cl, 136					; 00000088H
	call	@random@8
; Line 6762
	mov	edx, DWORD PTR _nummtypes
	xor	esi, esi
	cmp	edx, esi
	mov	DWORD PTR _skeltypes$[ebp], eax
	mov	DWORD PTR _j$[ebp], esi
	jle	SHORT $L88725
$L88723:
	mov	eax, DWORD PTR _skeltypes$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jg	SHORT $L88725
; Line 6763
	movzx	ecx, BYTE PTR [ebx]
	call	@IsSkel@4
	test	eax, eax
	je	SHORT $L88724
; Line 6764
	inc	DWORD PTR _j$[ebp]
$L88724:
; Line 6762
	inc	esi
	add	ebx, edi
	cmp	esi, edx
	jl	SHORT $L88723
$L88725:
; Line 6766
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	dec	esi
	push	1
	push	esi
	push	DWORD PTR _dir$[ebp]
	call	@AddMonster@20
	mov	esi, eax
; Line 6767
	cmp	esi, -1
	je	SHORT $L88727
; Line 6768
	mov	edx, DWORD PTR _dir$[ebp]
	mov	ecx, esi
	call	@M_StartSpStand@8
$L88727:
; Line 6770
	mov	eax, esi
	jmp	SHORT $L88713
$L88722:
; Line 6773
	or	eax, -1
$L88713:
	pop	edi
	pop	esi
	pop	ebx
; Line 6774
	leave
	ret	4
@M_SpawnSkel@12 ENDP
_TEXT	ENDS
PUBLIC	@ActivateSpawn@16
; Function compile flags: /Ogsy
;	COMDAT @ActivateSpawn@16
_TEXT	SEGMENT
_y$ = 8
_dir$ = 12
@ActivateSpawn@16 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 6777
	push	esi
	push	edi
; Line 6778
	mov	edi, edx
	mov	esi, DWORD PTR _y$[esp+4]
	imul	edi, 112				; 00000070H
	add	edi, esi
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR _dMonster[edi*4], eax
; Line 6779
	mov	eax, ecx
	imul	eax, 228				; 000000e4H
	mov	DWORD PTR _monster[eax+32], edx
; Line 6781
	mov	DWORD PTR _monster[eax+40], edx
; Line 6783
	mov	DWORD PTR _monster[eax+48], edx
; Line 6785
	mov	edx, DWORD PTR _dir$[esp+4]
	mov	DWORD PTR _monster[eax+36], esi
	mov	DWORD PTR _monster[eax+44], esi
	mov	DWORD PTR _monster[eax+52], esi
	call	@M_StartSpStand@8
	pop	edi
	pop	esi
; Line 6786
	ret	8
@ActivateSpawn@16 ENDP
_TEXT	ENDS
PUBLIC	@SpawnSkeleton@12
; Function compile flags: /Ogsy
;	COMDAT @SpawnSkeleton@12
_TEXT	SEGMENT
_ii$ = -16
_x$ = -12
_y$ = 8
_j$ = 8
_rs$ = 8
_savail$ = -8
_monstok$ = -52
@SpawnSkeleton@12 PROC NEAR				; COMDAT
; _ii$ = ecx
; _x$ = edx
; Line 6789
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	ebx
	mov	DWORD PTR _ii$[ebp], ecx
	push	esi
; Line 6794
	or	ecx, -1
	cmp	DWORD PTR _ii$[ebp], ecx
	mov	esi, edx
	push	edi
	mov	DWORD PTR _x$[ebp], esi
; Line 6795
	je	SHORT $L90356
; Line 6797
	mov	ebx, DWORD PTR _y$[ebp]
	push	ebx
	call	@PosOkMonst@12
	test	eax, eax
	je	SHORT $L88755
; Line 6798
	push	ebx
	push	esi
	mov	edx, ebx
	mov	ecx, esi
	call	@GetDirection@16
; Line 6799
	push	eax
	push	ebx
; Line 6800
	jmp	$L90359
$L88755:
; Line 6803
	and	DWORD PTR _savail$[ebp], 0
; Line 6805
	lea	ecx, DWORD PTR [ebx-1]
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR _j$[ebp], ecx
	cmp	ecx, eax
	jg	SHORT $L90356
	lea	eax, DWORD PTR _monstok$[ebp]
	mov	DWORD PTR -4+[ebp], eax
$L88756:
; Line 6807
	lea	edi, DWORD PTR [esi-1]
	lea	eax, DWORD PTR [esi+1]
	cmp	edi, eax
	jg	SHORT $L88761
; Line 6806
	mov	esi, DWORD PTR -4+[ebp]
$L88759:
; Line 6808
	push	DWORD PTR _j$[ebp]
	mov	edx, edi
	or	ecx, -1
	call	@PosOkMonst@12
; Line 6809
	or	DWORD PTR _savail$[ebp], eax
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR _x$[ebp]
; Line 6810
	add	esi, 12					; 0000000cH
	inc	edi
	inc	eax
	cmp	edi, eax
	jle	SHORT $L88759
; Line 6807
	mov	esi, DWORD PTR _x$[ebp]
$L88761:
; Line 6812
	add	DWORD PTR -4+[ebp], 4
	inc	DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR [ebx+1]
	cmp	DWORD PTR _j$[ebp], eax
	jle	SHORT $L88756
; Line 6814
	cmp	DWORD PTR _savail$[ebp], 0
	jne	SHORT $L88762
$L90356:
; Line 6815
	xor	eax, eax
	jmp	SHORT $L88743
$L88762:
; Line 6818
	push	15					; 0000000fH
	mov	cl, 137					; 00000089H
	pop	edx
	call	@random@8
	inc	eax
; Line 6819
	xor	ecx, ecx
; Line 6820
	xor	edx, edx
	mov	DWORD PTR _rs$[ebp], eax
; Line 6821
	test	eax, eax
	jle	SHORT $L90355
$L88764:
; Line 6822
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	edi, ecx
	add	edi, eax
	cmp	DWORD PTR _monstok$[ebp+edi*4], 0
	je	SHORT $L88766
; Line 6823
	dec	DWORD PTR _rs$[ebp]
$L88766:
; Line 6824
	cmp	DWORD PTR _rs$[ebp], 0
	jle	SHORT $L90355
; Line 6825
	inc	ecx
; Line 6826
	cmp	ecx, 3
	jne	SHORT $L88764
; Line 6827
	xor	ecx, ecx
; Line 6828
	inc	edx
; Line 6829
	cmp	edx, 3
	jne	SHORT $L88764
; Line 6830
	xor	edx, edx
; Line 6821
	jmp	SHORT $L88764
$L90355:
; Line 6837
	push	ebx
	lea	esi, DWORD PTR [ecx+esi-1]
	push	DWORD PTR _x$[ebp]
	lea	edi, DWORD PTR [edx+ebx-1]
	mov	edx, edi
	mov	ecx, esi
	call	@GetDirection@16
; Line 6838
	push	eax
	push	edi
$L90359:
	mov	ecx, DWORD PTR _ii$[ebp]
	mov	edx, esi
	call	@ActivateSpawn@16
; Line 6840
	xor	eax, eax
	inc	eax
$L88743:
	pop	edi
	pop	esi
	pop	ebx
; Line 6841
	leave
	ret	4
@SpawnSkeleton@12 ENDP
_TEXT	ENDS
PUBLIC	_PreSpawnSkeleton
; Function compile flags: /Ogsy
;	COMDAT _PreSpawnSkeleton
_TEXT	SEGMENT
_skeltypes$ = -4
_PreSpawnSkeleton PROC NEAR				; COMDAT
; Line 6844
	push	ecx
; Line 6849
	mov	eax, DWORD PTR _nummtypes
	push	ebx
	push	ebp
	xor	edx, edx
	push	esi
	push	edi
	test	eax, eax
; Line 6850
	jle	SHORT $L88780
; Line 6852
	mov	edi, OFFSET FLAT:_Monsters
	mov	ebp, eax
	mov	esi, edi
	mov	ebx, 328				; 00000148H
$L88776:
; Line 6853
	movzx	ecx, BYTE PTR [esi]
	call	@IsSkel@4
	test	eax, eax
	je	SHORT $L88777
; Line 6854
	inc	edx
$L88777:
; Line 6852
	add	esi, ebx
	dec	ebp
	jne	SHORT $L88776
; Line 6857
	test	edx, edx
	je	SHORT $L88780
; Line 6858
	mov	cl, 136					; 00000088H
	call	@random@8
; Line 6860
	mov	esi, DWORD PTR _nummtypes
	xor	ebp, ebp
	xor	edx, edx
	mov	DWORD PTR _skeltypes$[esp+20], eax
	test	esi, esi
	jle	SHORT $L88783
$L88781:
	cmp	ebp, DWORD PTR _skeltypes$[esp+20]
	jg	SHORT $L88783
; Line 6861
	movzx	ecx, BYTE PTR [edi]
	call	@IsSkel@4
	test	eax, eax
	je	SHORT $L88782
; Line 6862
	inc	ebp
$L88782:
; Line 6860
	inc	edx
	add	edi, ebx
	cmp	edx, esi
	jl	SHORT $L88781
$L88783:
; Line 6864
	dec	edx
	push	0
	push	edx
	push	0
	xor	edx, edx
	xor	ecx, ecx
	call	@AddMonster@20
	mov	esi, eax
; Line 6865
	cmp	esi, -1
	je	SHORT $L88785
; Line 6866
	xor	edx, edx
	mov	ecx, esi
	call	@M_StartStand@8
$L88785:
; Line 6868
	mov	eax, esi
	jmp	SHORT $L88770
$L88780:
; Line 6871
	or	eax, -1
$L88770:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 6872
	pop	ecx
	ret	0
_PreSpawnSkeleton ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@BCCD@TalktoMonster?3?5Invalid?5monster?5?$CF@ ; `string'
PUBLIC	@TalktoMonster@4
EXTRN	@RemoveInvItem@8:NEAR
EXTRN	@PlrHasItem@12:NEAR
;	COMDAT ??_C@_0CC@BCCD@TalktoMonster?3?5Invalid?5monster?5?$CF@
_DATA	SEGMENT
??_C@_0CC@BCCD@TalktoMonster?3?5Invalid?5monster?5?$CF@ DB 'TalktoMonster'
	DB	': Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @TalktoMonster@4
_TEXT	SEGMENT
_itm$ = -4
@TalktoMonster@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 6875
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 6879
	cmp	esi, 200				; 000000c8H
	push	edi
	jb	SHORT $L88793
; Line 6880
	push	esi
	push	OFFSET FLAT:??_C@_0CC@BCCD@TalktoMonster?3?5Invalid?5monster?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88793:
; Line 6882
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 6885
	mov	al, BYTE PTR [esi+152]
	mov	edi, DWORD PTR [esi+76]
	cmp	al, 23					; 00000017H
	mov	DWORD PTR [esi+4], 17			; 00000011H
	je	SHORT $L88796
	cmp	al, 30					; 0000001eH
	jne	$L88799
$L88796:
; Line 6886
	push	7
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L88797
	cmp	BYTE PTR _quests+183, 2
	jne	SHORT $L88797
	lea	eax, DWORD PTR _itm$[ebp]
	mov	ecx, edi
	push	eax
	push	12					; 0000000cH
	pop	edx
	call	@PlrHasItem@12
	test	eax, eax
	je	SHORT $L88797
; Line 6887
	mov	edx, DWORD PTR _itm$[ebp]
	mov	ecx, edi
	call	@RemoveInvItem@8
; Line 6888
	mov	BYTE PTR _quests+170, 3
; Line 6889
	mov	DWORD PTR [esi+208], 22			; 00000016H
; Line 6890
	mov	BYTE PTR [esi+8], 6
$L88797:
; Line 6892
	push	4
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L88799
	cmp	DWORD PTR [esi+208], 81			; 00000051H
	jl	SHORT $L88799
; Line 6893
	lea	eax, DWORD PTR _itm$[ebp]
	mov	ecx, edi
	push	eax
	push	15					; 0000000fH
	pop	edx
	call	@PlrHasItem@12
	test	eax, eax
	je	SHORT $L88799
; Line 6894
	mov	edx, DWORD PTR _itm$[ebp]
	mov	ecx, edi
	call	@RemoveInvItem@8
; Line 6895
	mov	DWORD PTR [esi+208], 83			; 00000053H
; Line 6896
	mov	BYTE PTR [esi+8], 6
$L88799:
	pop	edi
	pop	esi
; Line 6900
	leave
	ret	0
@TalktoMonster@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@OGLB@SpawnGolum?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	@SpawnGolum@16
EXTRN	@NetSendCmdGolem@24:NEAR
;	COMDAT ??_C@_0BP@OGLB@SpawnGolum?3?5Invalid?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@OGLB@SpawnGolum?3?5Invalid?5monster?5?$CFd?$AA@ DB 'SpawnGolum:'
	DB	' Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SpawnGolum@16
_TEXT	SEGMENT
_y$ = 8
_mi$ = 12
@SpawnGolum@16 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 6903
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 6904
	cmp	edi, 200				; 000000c8H
	mov	ebx, edx
	jb	SHORT $L88810
; Line 6905
	push	edi
	push	OFFSET FLAT:??_C@_0BP@OGLB@SpawnGolum?3?5Invalid?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88810:
; Line 6908
	mov	esi, edi
	mov	edx, ebx
	imul	esi, 228				; 000000e4H
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _monster[esi+32], ebx
	add	edx, eax
; Line 6909
	mov	DWORD PTR _monster[esi+36], eax
; Line 6911
	mov	DWORD PTR _monster[esi+44], eax
; Line 6913
	mov	DWORD PTR _monster[esi+52], eax
; Line 6917
	mov	eax, DWORD PTR _mi$[ebp]
	mov	DWORD PTR _monster[esi+40], ebx
	mov	DWORD PTR _monster[esi+48], ebx
	imul	eax, 176				; 000000b0H
	mov	ebx, edi
	lea	eax, DWORD PTR _missile[eax+48]
	imul	ebx, 21720				; 000054d8H
	lea	ecx, DWORD PTR [edi+1]
	mov	DWORD PTR 8+[ebp], eax
	mov	eax, DWORD PTR _plr[ebx+432]
	mov	DWORD PTR _dMonster[edx*4], ecx
	push	3
	and	BYTE PTR _monster[esi+28], 0
	cdq
	pop	ecx
	or	DWORD PTR _monster[esi+156], 32		; 00000020H
	idiv	ecx
	mov	edx, DWORD PTR 8+[ebp]
	mov	BYTE PTR _monster[esi+202], 25		; 00000019H
	mov	ecx, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	ecx, 6
	add	eax, ecx
; Line 6919
	mov	cl, BYTE PTR [edx]
	mov	dl, BYTE PTR _plr[ebx+440]
	add	eax, eax
	mov	DWORD PTR _monster[esi+144], eax
	mov	DWORD PTR _monster[esi+148], eax
	mov	al, cl
	mov	bl, 5
	add	al, 8
	add	dl, dl
	mov	BYTE PTR 11+[ebp], al
	imul	bl
; Line 6920
	add	cl, 4
	add	dl, al
; Line 6921
	mov	al, BYTE PTR 11+[ebp]
	add	cl, cl
	mov	BYTE PTR _monster[esi+196], dl
	mov	BYTE PTR _monster[esi+197], cl
	add	al, al
; Line 6922
	xor	edx, edx
	mov	ecx, edi
	mov	BYTE PTR _monster[esi+198], al
	call	@M_StartSpStand@8
; Line 6923
	mov	ecx, edi
	call	@M_Enemy@4
; Line 6924
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L88812
; Line 6931
	mov	al, BYTE PTR _currlevel
	mov	dl, BYTE PTR _monster[esi+36]
	push	eax
	mov	al, BYTE PTR _monster[esi+76]
	push	DWORD PTR _monster[esi+148]
	mov	cl, BYTE PTR _monster[esi+32]
	push	eax
	mov	al, BYTE PTR _monster[esi+72]
	push	eax
	call	@NetSendCmdGolem@24
$L88812:
	pop	edi
	pop	esi
	pop	ebx
; Line 6933
	pop	ebp
	ret	8
@SpawnGolum@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@PBFC@CanTalkToMonst?3?5Invalid?5monster?5@ ; `string'
PUBLIC	@CanTalkToMonst@4
;	COMDAT ??_C@_0CD@PBFC@CanTalkToMonst?3?5Invalid?5monster?5@
_DATA	SEGMENT
??_C@_0CD@PBFC@CanTalkToMonst?3?5Invalid?5monster?5@ DB 'CanTalkToMonst: '
	DB	'Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @CanTalkToMonst@4
_TEXT	SEGMENT
@CanTalkToMonst@4 PROC NEAR				; COMDAT
; _m$ = ecx
; Line 6936
	push	esi
	mov	esi, ecx
; Line 6937
	cmp	esi, 200				; 000000c8H
	jb	SHORT $L88817
; Line 6938
	push	esi
	push	OFFSET FLAT:??_C@_0CD@PBFC@CanTalkToMonst?3?5Invalid?5monster?5@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88817:
; Line 6941
	imul	esi, 228				; 000000e4H
	mov	al, BYTE PTR _monster[esi+8]
	pop	esi
	cmp	al, 6
	jne	SHORT $L88819
; Line 6942
	xor	eax, eax
	inc	eax
; Line 6946
	ret	0
$L88819:
; Line 6945
	xor	ecx, ecx
	cmp	al, 7
	sete	cl
	mov	eax, ecx
; Line 6946
	ret	0
@CanTalkToMonst@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@FNNK@CheckMonsterHit?3?5Invalid?5monster@ ; `string'
;	COMDAT ??_C@_0CE@FNNK@CheckMonsterHit?3?5Invalid?5monster@
_DATA	SEGMENT
??_C@_0CE@FNNK@CheckMonsterHit?3?5Invalid?5monster@ DB 'CheckMonsterHit: '
	DB	'Invalid monster %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @CheckMonsterHit@8
_TEXT	SEGMENT
@CheckMonsterHit@8 PROC NEAR				; COMDAT
; _m$ = ecx
; _ret$ = edx
; Line 6949
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
; Line 6950
	cmp	edi, 200				; 000000c8H
	jb	SHORT $L88826
; Line 6951
	push	edi
	push	OFFSET FLAT:??_C@_0CE@FNNK@CheckMonsterHit?3?5Invalid?5monster@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L88826:
; Line 6954
	mov	ecx, edi
	imul	ecx, 228				; 000000e4H
	cmp	BYTE PTR _monster[ecx+152], 12		; 0000000cH
	jne	SHORT $L88828
	lea	edx, DWORD PTR _monster[ecx+156]
	mov	eax, DWORD PTR [edx]
	test	al, 4
	je	SHORT $L88828
; Line 6956
	and	al, -5					; fffffffbH
	mov	DWORD PTR _monster[ecx+4], 7
	mov	DWORD PTR [edx], eax
; Line 6957
	xor	eax, eax
	inc	eax
	mov	DWORD PTR [esi], eax
; Line 6958
	jmp	SHORT $L88824
$L88828:
; Line 6961
	mov	eax, DWORD PTR _monster[ecx+220]
	mov	al, BYTE PTR [eax]
	cmp	al, 105					; 00000069H
	jb	SHORT $L88830
	cmp	al, 108					; 0000006cH
	ja	SHORT $L88830
	xor	eax, eax
	inc	eax
	cmp	BYTE PTR _monster[ecx+8], al
	je	SHORT $L88830
; Line 6964
	and	DWORD PTR [esi], 0
; Line 6967
	jmp	SHORT $L88824
$L88830:
; Line 6962
	xor	eax, eax
$L88824:
	pop	edi
	pop	esi
; Line 6968
	ret	0
@CheckMonsterHit@8 ENDP
_TEXT	ENDS
PUBLIC	@encode_enemy@4
; Function compile flags: /Ogsy
;	COMDAT @encode_enemy@4
_TEXT	SEGMENT
@encode_enemy@4 PROC NEAR				; COMDAT
; _m$ = ecx
; Line 6974
	imul	ecx, 228				; 000000e4H
; Line 6975
	test	BYTE PTR _monster[ecx+156], 16		; 00000010H
	mov	eax, DWORD PTR _monster[ecx+76]
	je	SHORT $L88836
; Line 6976
	add	eax, 4
$L88836:
; Line 6979
	ret	0
@encode_enemy@4 ENDP
_TEXT	ENDS
PUBLIC	@decode_enemy@8
; Function compile flags: /Ogsy
;	COMDAT @decode_enemy@8
_TEXT	SEGMENT
@decode_enemy@8 PROC NEAR				; COMDAT
; _m$ = ecx
; _enemy$ = edx
; Line 6982
	mov	eax, ecx
; Line 6984
	imul	eax, 228				; 000000e4H
	cmp	edx, 4
	jge	SHORT $L88842
	and	DWORD PTR _monster[eax+156], -17	; ffffffefH
; Line 6985
	mov	DWORD PTR _monster[eax+76], edx
; Line 6986
	imul	edx, 21720				; 000054d8H
	mov	cl, BYTE PTR _plr[edx+64]
	mov	BYTE PTR _monster[eax+80], cl
; Line 6987
	mov	cl, BYTE PTR _plr[edx+68]
; Line 6988
	jmp	SHORT $L90386
$L88842:
; Line 6989
	or	DWORD PTR _monster[eax+156], 16		; 00000010H
; Line 6990
	sub	edx, 4
; Line 6992
	mov	ecx, edx
	mov	DWORD PTR _monster[eax+76], edx
	imul	ecx, 228				; 000000e4H
	mov	dl, BYTE PTR _monster[ecx+40]
	mov	BYTE PTR _monster[eax+80], dl
; Line 6993
	mov	cl, BYTE PTR _monster[ecx+44]
$L90386:
	mov	BYTE PTR _monster[eax+81], cl
; Line 6995
	ret	0
@decode_enemy@8 ENDP
_TEXT	ENDS
END
