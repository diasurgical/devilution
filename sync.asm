; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/sync.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@KCAH@bad?5sync?5command?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @sync_all_monsters@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sync_one_monster
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @sync_monster_active@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @sync_monster_pos@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @sync_monster_active2@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncPlrInv@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncData@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @sync_monster_data@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sync_clear_pkt
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_sync_word_6AA708:WORD:0c8H
COMM	_syncmonsters:DWORD
COMM	_sync_word_6AA89C:WORD:0c8H
COMM	_syncitems:DWORD
COMM	_sgnSyncPInv:DWORD
_DATA	ENDS
PUBLIC	@sync_all_monsters@8
PUBLIC	_sync_one_monster
PUBLIC	@sync_monster_active@4
PUBLIC	@sync_monster_active2@4
PUBLIC	@SyncPlrInv@4
EXTRN	_nummonsters:DWORD
EXTRN	_currlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT @sync_all_monsters@8
_TEXT	SEGMENT
@sync_all_monsters@8 PROC NEAR				; COMDAT
; _packet$ = ecx
; _size$ = edx
; File Source/sync.cpp
; Line 20
	cmp	DWORD PTR _nummonsters, 1
	push	esi
	mov	esi, ecx
	mov	eax, edx
	jl	SHORT $L84994
	cmp	edx, 43					; 0000002bH
	jb	SHORT $L84994
	push	ebx
	push	ebp
	push	edi
; Line 24
	mov	BYTE PTR [esi], 35			; 00000023H
; Line 26
	mov	al, BYTE PTR _currlevel
	xor	edi, edi
	lea	ebx, DWORD PTR [edx-38]
	lea	ebp, DWORD PTR [esi+38]
	mov	BYTE PTR [esi+1], al
; Line 27
	mov	WORD PTR [esi+2], di
; Line 28
	call	@SyncPlrInv@4
; Line 29
	call	_sync_one_monster
; Line 30
	cmp	DWORD PTR _nummonsters, edi
	jle	SHORT $L84999
$L84997:
; Line 32
	cmp	ebx, 5
	jb	SHORT $L84999
	cmp	edi, 2
	jge	SHORT $L85002
	mov	ecx, ebp
	call	@sync_monster_active2@4
	test	eax, eax
	jne	SHORT $L85000
$L85002:
	mov	ecx, ebp
	call	@sync_monster_active@4
	test	eax, eax
	je	SHORT $L84999
$L85000:
; Line 34
	add	WORD PTR [esi+2], 5
; Line 35
	sub	ebx, 5
; Line 36
	add	ebp, 5
; Line 37
	inc	edi
; Line 38
	cmp	edi, DWORD PTR _nummonsters
	jl	SHORT $L84997
$L84999:
	pop	edi
; Line 40
	mov	eax, ebx
	pop	ebp
	pop	ebx
$L84994:
	pop	esi
; Line 43
	ret	0
@sync_all_monsters@8 ENDP
_TEXT	ENDS
EXTRN	_abs:NEAR
EXTRN	_myplr:DWORD
EXTRN	_plr:BYTE
EXTRN	_monstactive:BYTE
EXTRN	_monster:BYTE
; Function compile flags: /Ogsy
;	COMDAT _sync_one_monster
_TEXT	SEGMENT
_i$ = -4
_sync_one_monster PROC NEAR				; COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 56
	and	DWORD PTR _i$[ebp], 0
	cmp	DWORD PTR _nummonsters, 0
	jle	$L85014
	push	ebx
	push	esi
	push	edi
$L85012:
; Line 57
	mov	eax, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _monstactive[eax*4]
; Line 59
	mov	eax, DWORD PTR _myplr
	mov	esi, edi
	imul	eax, 21720				; 000054d8H
	imul	esi, 228				; 000000e4H
	mov	eax, DWORD PTR _plr[eax+60]
	sub	eax, DWORD PTR _monster[esi+36]
	push	eax
	call	_abs
	mov	ebx, eax
; Line 60
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+56]
	sub	eax, DWORD PTR _monster[esi+32]
	push	eax
	call	_abs
	pop	ecx
; Line 63
	add	eax, ebx
	cmp	BYTE PTR _monster[esi+160], 0
	pop	ecx
	lea	ecx, DWORD PTR [edi+edi]
	lea	edx, DWORD PTR _sync_word_6AA708[ecx]
	mov	WORD PTR [edx], ax
; Line 64
	jne	SHORT $L85015
; Line 65
	add	eax, 4096				; 00001000H
	mov	WORD PTR [edx], ax
; Line 66
	jmp	SHORT $L85013
$L85015:
; Line 67
	lea	eax, DWORD PTR _sync_word_6AA89C[ecx]
; Line 68
	mov	cx, WORD PTR [eax]
	test	cx, cx
	je	SHORT $L85013
; Line 69
	dec	ecx
	mov	WORD PTR [eax], cx
$L85013:
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nummonsters
	jl	$L85012
	pop	edi
	pop	esi
	pop	ebx
$L85014:
; Line 72
	leave
	ret	0
_sync_one_monster ENDP
_TEXT	ENDS
PUBLIC	@sync_monster_pos@8
; Function compile flags: /Ogsy
;	COMDAT @sync_monster_active@4
_TEXT	SEGMENT
@sync_monster_active@4 PROC NEAR			; COMDAT
; _packet$ = ecx
; Line 75
	push	ebx
	push	ebp
; Line 84
	mov	ebp, DWORD PTR _nummonsters
	push	esi
	or	edx, -1
	xor	esi, esi
	test	ebp, ebp
	mov	ebx, edx
; Line 85
	jle	SHORT $L85199
	push	edi
$L85026:
; Line 87
	mov	eax, DWORD PTR _monstactive[esi*4]
; Line 88
	movzx	edi, WORD PTR _sync_word_6AA708[eax*2]
	cmp	edi, ebx
	jae	SHORT $L85031
	cmp	WORD PTR _sync_word_6AA89C[eax*2], 65534 ; 0000fffeH
	jae	SHORT $L85031
; Line 89
	mov	ebx, edi
; Line 90
	mov	edx, eax
$L85031:
; Line 92
	inc	esi
; Line 93
	cmp	esi, ebp
	jl	SHORT $L85026
; Line 94
	cmp	edx, -1
	pop	edi
	jne	SHORT $L85033
$L85199:
; Line 95
	xor	eax, eax
	jmp	SHORT $L85020
$L85033:
; Line 96
	call	@sync_monster_pos@8
; Line 97
	xor	eax, eax
	inc	eax
$L85020:
	pop	esi
	pop	ebp
	pop	ebx
; Line 98
	ret	0
@sync_monster_active@4 ENDP
_TEXT	ENDS
EXTRN	@encode_enemy@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @sync_monster_pos@8
_TEXT	SEGMENT
_v6$ = -4
@sync_monster_pos@8 PROC NEAR				; COMDAT
; _packet$ = ecx
; _mon_id$ = edx
; Line 101
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	ebx, edx
	push	edi
; Line 113
	mov	edi, ebx
	mov	esi, ecx
	imul	edi, 228				; 000000e4H
	mov	BYTE PTR [esi], bl
; Line 115
	mov	ecx, ebx
	mov	al, BYTE PTR _monster[edi+32]
	mov	BYTE PTR [esi+1], al
	mov	al, BYTE PTR _monster[edi+36]
	mov	BYTE PTR [esi+2], al
	call	@encode_enemy@4
	mov	BYTE PTR [esi+3], al
; Line 117
	lea	eax, DWORD PTR [ebx+ebx]
	mov	cx, WORD PTR _sync_word_6AA708[eax]
	mov	DWORD PTR _v6$[ebp], ecx
; Line 118
	mov	ecx, 255				; 000000ffH
	cmp	WORD PTR _v6$[ebp], cx
; Line 119
	ja	SHORT $L85046
	mov	cl, BYTE PTR _v6$[ebp]
$L85046:
; Line 120
	mov	BYTE PTR [esi+4], cl
; Line 122
	or	WORD PTR _sync_word_6AA708[eax], -1
; Line 123
	xor	ecx, ecx
	cmp	BYTE PTR _monster[edi+160], cl
	pop	edi
	pop	esi
	pop	ebx
	setne	cl
	or	edx, -1
	sub	edx, ecx
	mov	WORD PTR _sync_word_6AA89C[eax], dx
; Line 124
	leave
	ret	0
@sync_monster_pos@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @sync_monster_active2@4
_TEXT	SEGMENT
_packet$ = -8
_v6$ = -4
@sync_monster_active2@4 PROC NEAR			; COMDAT
; _packet$ = ecx
; Line 127
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 136
	mov	esi, DWORD PTR _nummonsters
	mov	DWORD PTR _packet$[ebp], ecx
	or	ecx, -1
	test	esi, esi
	mov	edx, 65534				; 0000fffeH
; Line 137
	jle	SHORT $L85208
; Line 138
	mov	eax, DWORD PTR _syncmonsters
	push	ebx
	push	edi
; Line 139
	mov	DWORD PTR _v6$[ebp], esi
$L85057:
; Line 141
	cmp	eax, esi
	jl	SHORT $L85060
; Line 142
	xor	eax, eax
$L85060:
; Line 143
	mov	edi, DWORD PTR _monstactive[eax*4]
; Line 144
	movzx	ebx, WORD PTR _sync_word_6AA89C[edi*2]
	cmp	ebx, edx
	jae	SHORT $L85062
; Line 145
	mov	edx, ebx
; Line 146
	mov	ecx, edi
$L85062:
; Line 148
	inc	eax
; Line 149
	dec	DWORD PTR _v6$[ebp]
; Line 150
	jne	SHORT $L85057
	pop	edi
; Line 152
	cmp	ecx, -1
	mov	DWORD PTR _syncmonsters, eax
	pop	ebx
	jne	SHORT $L85064
$L85208:
; Line 153
	xor	eax, eax
	jmp	SHORT $L85050
$L85064:
; Line 154
	mov	edx, ecx
	mov	ecx, DWORD PTR _packet$[ebp]
	call	@sync_monster_pos@8
; Line 155
	xor	eax, eax
	inc	eax
$L85050:
	pop	esi
; Line 156
	leave
	ret	0
@sync_monster_active2@4 ENDP
_TEXT	ENDS
EXTRN	_itemactive:BYTE
EXTRN	_item:BYTE
EXTRN	_numitems:DWORD
; Function compile flags: /Ogsy
;	COMDAT @SyncPlrInv@4
_TEXT	SEGMENT
_v4$ = -4
_v5$ = -8
@SyncPlrInv@4 PROC NEAR					; COMDAT
; _pSync$ = ecx
; Line 160
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 168
	mov	eax, DWORD PTR _numitems
	push	esi
	test	eax, eax
	jg	SHORT $L85074
; Line 169
	or	BYTE PTR [ecx+6], 255			; 000000ffH
; Line 170
	jmp	$L85087
$L85074:
; Line 171
	mov	edx, DWORD PTR _syncitems
; Line 172
	cmp	edx, eax
	jl	SHORT $L85076
; Line 173
	xor	edx, edx
$L85076:
; Line 174
	mov	eax, DWORD PTR _itemactive[edx*4]
; Line 175
	inc	edx
	mov	DWORD PTR _syncitems, edx
; Line 176
	mov	BYTE PTR [ecx+6], al
; Line 178
	imul	eax, 368				; 00000170H
	mov	dl, BYTE PTR _item[eax+12]
	mov	BYTE PTR [ecx+7], dl
; Line 179
	mov	dl, BYTE PTR _item[eax+16]
	mov	BYTE PTR [ecx+8], dl
; Line 180
	mov	dx, WORD PTR _item[eax+360]
	mov	WORD PTR [ecx+9], dx
; Line 181
	cmp	DWORD PTR _item[eax+360], 23		; 00000017H
	jne	$L85077
; Line 183
	mov	dl, BYTE PTR _item[eax+68]
	and	BYTE PTR _v4$[ebp], 0
	mov	BYTE PTR _v4$[ebp+1], dl
; Line 184
	and	BYTE PTR _v5$[ebp], 0
; Line 185
	movsx	dx, BYTE PTR _item[eax+69]
	or	edx, DWORD PTR _v4$[ebp]
	mov	WORD PTR [ecx+11], dx
; Line 186
	movsx	edx, BYTE PTR _item[eax+70]
	movsx	esi, BYTE PTR _item[eax+71]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _item[eax+72]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _item[eax+73]
	shl	edx, 8
	or	edx, esi
	mov	DWORD PTR [ecx+13], edx
; Line 187
	mov	dl, BYTE PTR _item[eax+74]
	mov	BYTE PTR [ecx+17], dl
; Line 188
	mov	dl, BYTE PTR _item[eax+75]
	mov	BYTE PTR [ecx+18], dl
; Line 189
	mov	dl, BYTE PTR _item[eax+76]
	mov	BYTE PTR [ecx+19], dl
; Line 190
	mov	dl, BYTE PTR _item[eax+77]
	mov	BYTE PTR [ecx+20], dl
; Line 191
	mov	dl, BYTE PTR _item[eax+78]
	mov	BYTE PTR [ecx+21], dl
; Line 192
	mov	dl, BYTE PTR _item[eax+79]
	mov	BYTE PTR _v5$[ebp+1], dl
; Line 193
	mov	dx, WORD PTR _item[eax+192]
	sub	dx, 19					; 00000013H
	shl	edx, 6
	or	dx, WORD PTR _item[eax+196]
	or	edx, DWORD PTR _v5$[ebp]
	mov	WORD PTR [ecx+22], dx
; Line 194
	movsx	edx, BYTE PTR _item[eax+80]
	movsx	esi, BYTE PTR _item[eax+81]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _item[eax+82]
	movsx	eax, BYTE PTR _item[eax+83]
	shl	edx, 8
	or	edx, esi
	shl	edx, 8
	or	edx, eax
	mov	DWORD PTR [ecx+24], edx
; Line 195
	jmp	SHORT $L85087
$L85077:
; Line 196
	mov	dx, WORD PTR _item[eax+4]
	mov	WORD PTR [ecx+11], dx
; Line 197
	mov	edx, DWORD PTR _item[eax]
	mov	DWORD PTR [ecx+13], edx
; Line 198
	mov	dl, BYTE PTR _item[eax+56]
	mov	BYTE PTR [ecx+17], dl
; Line 199
	mov	dl, BYTE PTR _item[eax+236]
	mov	BYTE PTR [ecx+18], dl
; Line 200
	mov	dl, BYTE PTR _item[eax+240]
	mov	BYTE PTR [ecx+19], dl
; Line 201
	mov	dl, BYTE PTR _item[eax+228]
	mov	BYTE PTR [ecx+20], dl
; Line 202
	mov	dl, BYTE PTR _item[eax+232]
	mov	BYTE PTR [ecx+21], dl
; Line 203
	cmp	DWORD PTR _item[eax+360], 0
	jne	SHORT $L85087
; Line 204
	mov	ax, WORD PTR _item[eax+196]
	mov	WORD PTR [ecx+22], ax
$L85087:
; Line 207
	mov	edx, DWORD PTR _sgnSyncPInv
	mov	eax, DWORD PTR _myplr
	mov	esi, edx
	imul	eax, 21720				; 000054d8H
	imul	esi, 368				; 00000170H
	lea	eax, DWORD PTR _plr[eax+esi+892]
	pop	esi
; Line 208
	cmp	DWORD PTR [eax+8], -1
	jne	SHORT $L85088
; Line 209
	or	BYTE PTR [ecx+28], 255			; 000000ffH
; Line 210
	jmp	SHORT $L85089
$L85088:
; Line 211
	mov	BYTE PTR [ecx+28], dl
; Line 212
	mov	dx, WORD PTR [eax+360]
	mov	WORD PTR [ecx+29], dx
; Line 213
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR [ecx+31], dx
; Line 214
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+33], edx
; Line 215
	mov	al, BYTE PTR [eax+56]
	mov	BYTE PTR [ecx+37], al
$L85089:
; Line 217
	inc	DWORD PTR _sgnSyncPInv
	cmp	DWORD PTR _sgnSyncPInv, 7
	jl	SHORT $L85090
; Line 218
	and	DWORD PTR _sgnSyncPInv, 0
$L85090:
; Line 219
	leave
	ret	0
@SyncPlrInv@4 ENDP
_TEXT	ENDS
PUBLIC	@SyncData@8
PUBLIC	@sync_monster_data@8
PUBLIC	??_C@_0BB@KCAH@bad?5sync?5command?$AA@		; `string'
EXTRN	_TermMsg:NEAR
EXTRN	_gbBufferMsgs:BYTE
EXTRN	@delta_sync_monster@8:NEAR
;	COMDAT ??_C@_0BB@KCAH@bad?5sync?5command?$AA@
_DATA	SEGMENT
??_C@_0BB@KCAH@bad?5sync?5command?$AA@ DB 'bad sync command', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SyncData@8
_TEXT	SEGMENT
@SyncData@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _packet$ = edx
; Line 223
	push	ebp
	push	esi
	mov	esi, edx
	push	edi
	mov	ebp, ecx
; Line 233
	cmp	BYTE PTR [esi], 35			; 00000023H
	lea	edi, DWORD PTR [esi+38]
	je	SHORT $L85102
; Line 234
	push	OFFSET FLAT:??_C@_0BB@KCAH@bad?5sync?5command?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L85102:
; Line 235
	cmp	BYTE PTR _gbBufferMsgs, 1
	je	SHORT $L85108
	cmp	ebp, DWORD PTR _myplr
	je	SHORT $L85108
; Line 236
	mov	ax, WORD PTR [esi+2]
; Line 237
	cmp	ax, 5
	jb	SHORT $L85108
	push	ebx
; Line 238
	push	5
	movzx	eax, ax
	xor	edx, edx
	pop	ecx
	div	ecx
	mov	ebx, eax
$L85106:
; Line 240
	mov	al, BYTE PTR _currlevel
	cmp	al, BYTE PTR [esi+1]
	jne	SHORT $L85109
; Line 241
	mov	edx, edi
	mov	ecx, ebp
	call	@sync_monster_data@8
$L85109:
; Line 242
	mov	dl, BYTE PTR [esi+1]
	mov	ecx, edi
	call	@delta_sync_monster@8
; Line 243
	add	edi, 5
; Line 244
	dec	ebx
; Line 245
	jne	SHORT $L85106
	pop	ebx
$L85108:
; Line 248
	movzx	eax, WORD PTR [esi+2]
	pop	edi
	pop	esi
	add	eax, 38					; 00000026H
	pop	ebp
; Line 249
	ret	0
@SyncData@8 ENDP
_TEXT	ENDS
EXTRN	@M_StartStand@8:NEAR
EXTRN	@M_ClearSquares@4:NEAR
EXTRN	@M_WalkDir@8:NEAR
EXTRN	@DirOK@8:NEAR
EXTRN	@decode_enemy@8:NEAR
EXTRN	@GetDirection@16:NEAR
EXTRN	_dMonster:BYTE
; Function compile flags: /Ogsy
;	COMDAT @sync_monster_data@8
_TEXT	SEGMENT
_pnum$ = -8
_v6$ = -4
_v11$ = -8
_v14$ = -8
@sync_monster_data@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _packet$ = edx
; Line 253
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
; Line 274
	xor	eax, eax
	mov	DWORD PTR _pnum$[ebp], ecx
; Line 275
	movzx	ebx, BYTE PTR [edi]
; Line 277
	mov	esi, ebx
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+148], eax
	je	$L85147
; Line 278
	mov	ecx, DWORD PTR _nummonsters
	cmp	ecx, eax
	jle	SHORT $L85137
$L85135:
; Line 280
	cmp	DWORD PTR _monstactive[eax*4], ebx
	je	SHORT $L85137
; Line 282
	inc	eax
; Line 283
	cmp	eax, ecx
	jl	SHORT $L85135
$L85137:
; Line 285
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+60]
	sub	eax, DWORD PTR _monster[esi+36]
	push	eax
	call	_abs
	mov	DWORD PTR _v6$[ebp], eax
; Line 286
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+56]
	sub	eax, DWORD PTR _monster[esi+32]
	push	eax
	call	_abs
	add	eax, DWORD PTR _v6$[ebp]
	pop	ecx
	pop	ecx
; Line 287
	mov	ecx, 255				; 000000ffH
	cmp	eax, ecx
	jbe	SHORT $L85139
; Line 288
	mov	eax, ecx
$L85139:
; Line 289
	movzx	ecx, BYTE PTR [edi+4]
; Line 290
	cmp	eax, ecx
	jb	$L85147
	jne	SHORT $L85142
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jg	$L85147
$L85142:
; Line 291
	movzx	eax, BYTE PTR [edi+1]
; Line 292
	cmp	DWORD PTR _monster[esi+40], eax
	jne	SHORT $L85146
	movzx	ecx, BYTE PTR [edi+2]
	cmp	DWORD PTR _monster[esi+44], ecx
	je	$L85147
$L85146:
; Line 293
	mov	ecx, DWORD PTR _monster[esi+4]
; Line 294
	cmp	ecx, 14					; 0000000eH
	je	$L85147
	cmp	ecx, 15					; 0000000fH
	je	$L85147
; Line 295
	mov	ecx, DWORD PTR _monster[esi+32]
	sub	ecx, eax
	push	ecx
	call	_abs
; Line 296
	mov	ecx, DWORD PTR _monster[esi+36]
	mov	DWORD PTR _v11$[ebp], eax
	movzx	eax, BYTE PTR [edi+2]
	sub	ecx, eax
	push	ecx
	call	_abs
; Line 297
	cmp	DWORD PTR _v11$[ebp], 2
	pop	ecx
	pop	ecx
	jg	SHORT $L85150
	cmp	eax, 2
	jg	SHORT $L85150
; Line 315
	mov	eax, DWORD PTR _monster[esi+4]
; Line 316
	cmp	eax, 1
	jl	SHORT $L85166
	cmp	eax, 3
	jle	$LABEL_23$85154
$L85166:
; Line 322
	movzx	eax, BYTE PTR [edi+2]
	mov	edx, DWORD PTR _monster[esi+36]
	mov	ecx, DWORD PTR _monster[esi+32]
	push	eax
	movzx	eax, BYTE PTR [edi+1]
	push	eax
	call	@GetDirection@16
	mov	edx, eax
; Line 325
	mov	ecx, ebx
	mov	DWORD PTR _v14$[ebp], edx
	call	@DirOK@8
	test	eax, eax
	je	$LABEL_23$85154
; Line 327
	mov	ecx, ebx
	call	@M_ClearSquares@4
; Line 328
	mov	ecx, DWORD PTR _monster[esi+32]
; Line 329
	mov	edx, DWORD PTR _v14$[ebp]
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _monster[esi+36]
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR _dMonster[ecx*4], eax
	mov	ecx, ebx
	call	@M_WalkDir@8
	jmp	SHORT $L85165
$L85150:
; Line 298
	movzx	eax, BYTE PTR [edi+1]
	movzx	ecx, BYTE PTR [edi+2]
	imul	eax, 112				; 00000070H
	add	eax, ecx
	cmp	DWORD PTR _dMonster[eax*4], 0
	jne	SHORT $LABEL_23$85154
; Line 303
	mov	ecx, ebx
	call	@M_ClearSquares@4
; Line 304
	movzx	ecx, BYTE PTR [edi+1]
	movzx	edx, BYTE PTR [edi+2]
	imul	ecx, 112				; 00000070H
	add	ecx, edx
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR _dMonster[ecx*4], eax
; Line 307
	mov	ecx, ebx
	movzx	eax, BYTE PTR [edi+1]
	mov	DWORD PTR _monster[esi+32], eax
	movzx	eax, BYTE PTR [edi+2]
	mov	DWORD PTR _monster[esi+36], eax
	movzx	edx, BYTE PTR [edi+3]
	call	@decode_enemy@8
; Line 312
	movzx	eax, BYTE PTR _monster[esi+81]
	movzx	edx, BYTE PTR [edi+2]
	movzx	ecx, BYTE PTR [edi+1]
	push	eax
	movzx	eax, BYTE PTR _monster[esi+80]
	push	eax
	call	@GetDirection@16
; Line 313
	mov	edx, eax
	mov	ecx, ebx
	call	@M_StartStand@8
$L85165:
; Line 331
	or	BYTE PTR _monster[esi+160], -1
$LABEL_23$85154:
; Line 300
	movzx	edx, BYTE PTR [edi+3]
	mov	ecx, ebx
	call	@decode_enemy@8
$L85147:
	pop	edi
	pop	esi
	pop	ebx
; Line 337
	leave
	ret	0
@sync_monster_data@8 ENDP
_TEXT	ENDS
PUBLIC	_sync_clear_pkt
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT _sync_clear_pkt
_TEXT	SEGMENT
_sync_clear_pkt PROC NEAR				; COMDAT
; Line 341
	mov	eax, DWORD PTR _myplr
; Line 342
	push	400					; 00000190H
	shl	eax, 4
	push	255					; 000000ffH
	push	OFFSET FLAT:_sync_word_6AA89C
	mov	DWORD PTR _syncmonsters, eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 343
	ret	0
_sync_clear_pkt ENDP
_TEXT	ENDS
END
