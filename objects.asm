; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/objects.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_06FPNA@L1Braz?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MHFE@L1Doors?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05PENN@Lever?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JKDN@Chest1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06GFIE@Chest2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06GGBN@Banner?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08ILAE@SkulPile?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KJML@SkulFire?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KIKL@SkulStik?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CHFE@CruxSk1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07NION@CruxSk2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HCHK@CruxSk3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05COAH@Book1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NBLO@Book2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08CDG@Rockstan?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05OBOH@Angel?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MPBD@Chest3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08CJOP@Burncros?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07LKCG@Candle2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MBDB@Nude2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07GJJH@Switch4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06PKLH@TNudeM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FCFB@TNudeW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FMPH@TSoul?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HJLE@L2Doors?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MGBG@WTorch4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07JDPD@WTorch3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MLKJ@Sarc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06GNGL@Flame1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JHGK@Prsrplt1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08HGED@Traphole?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08IFGF@MiniWatr?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07DJGE@WTorch2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MGNN@WTorch1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DOEO@BCase?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DJBI@BShelf?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PEKB@WeapStnd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HHNL@Barrel?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08EIEN@Barrelex?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OCGA@LShrineG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JBBK@RShrineG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NOEK@Bloodfnt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MBFF@Decap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HJGP@Pedistl?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07OMBE@L3Doors?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07IGIK@PFountn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JGCJ@Armstand?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08IFN@Goatshrn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FFL@Cauldren?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07IPLO@MFountn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07DMNM@TFountn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CHJN@Altboy?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05INOM@Mcirl?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08OAJC@Bkslbrnt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08POAC@Mushptch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MLFE@LzStand?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@NBCG@Mysterious?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OCEO@Hidden?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06ONLG@Gloomy?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05EFIN@Weird?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MBHH@Magical?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05HGNM@Stone?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09IEGM@Religious?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09LFEN@Enchanted?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@MLKM@Thaumaturgic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JMIB@Fascinating?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07EAE@Cryptic?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KHKA@Eldritch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05OOD@Eerie?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06KJBJ@Divine?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KHMI@Holy?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JMLC@Sacred?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09PCPL@Spiritual?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06BFCB@Spooky?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09ONFI@Abandoned?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06LPMH@Creepy?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05HCPP@Quiet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KGNO@Secluded?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06EEEE@Ornate?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GLEI@Glimmering?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07NIEH@Tainted?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@POGO@The?5Great?5Conflict?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@ECO@The?5Wages?5of?5Sin?5are?5War?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KECO@The?5Tale?5of?5the?5Horadrim?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@OFJD@The?5Dark?5Exile?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@HKF@The?5Sin?5War?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MFIA@The?5Binding?5of?5the?5Three?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GEM@The?5Realms?5Beyond?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@OJJG@Tale?5of?5the?5Three?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@IMEI@The?5Black?5King?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@NDGK@Objects?2?$CFs?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CALL@Open?5Door?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@OCCM@Closed?5Door?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLMJ@Blocked?5Door?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@LDLA@Small?5Chest?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DKPC@Chest?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@DKOD@Large?5Chest?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@KNNF@Crucified?5Skeleton?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@HEA@Ancient?5Tome?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@EMJD@Book?5of?5Vileness?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@HALA@Skull?5Lever?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@POBI@Mythical?5Book?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EOD@Sarcophagus?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09NKNP@Bookshelf?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CKCC@?$CFs?5Shrine?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CJEB@Skeleton?5Tome?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PJKE@Bookcase?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@LNEK@Library?5Book?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@NLAA@Blood?5Fountain?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@COBF@Decapitated?5Body?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@OJEC@Book?5of?5the?5Blind?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@EIIO@Book?5of?5Blood?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@MMPH@Pedestal?5of?5Blood?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CLIO@Purifying?5Spring?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05KFDN@Armor?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@KGBJ@Goat?5Shrine?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JNFK@Cauldron?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JGJK@Murky?5Pool?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@NGJD@Fountain?5of?5Tears?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@MAIJ@Steel?5Tome?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@LHNE@Weapon?5Rack?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@CKOP@Mushroom?5Patch?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@LPBH@Vile?5Stand?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FCBE@Slain?5Hero?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CKNM@Trapped?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _qmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitObjectGFX
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FreeObjectGFX
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RndLocOk@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitRndLocObj@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitRndLocBigObj@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitRndLocObj5x5@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ClrAllObjects
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddTortures
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddCandles
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddBookLever@36
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitRndBarrels
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddL1Objs@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddL2Objs@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddL3Objs@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WallTrapLocOk@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddL2Torches
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @TorchLocOK@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddObjTraps
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddChestTraps
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadMapObjects@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadMapObjs@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddDiabObjs
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddStoryBooks
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddHookedBodies@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddL4Goodies
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddLazStand
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitObjects
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetMapObjects@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeleteObject_@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetupObject@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetObjMapRange@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetBookMsg@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddL1Door@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddSCambBook@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddChest@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddL2Door@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddL3Door@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddSarc@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddFlameTrap@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddFlameLvr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddTrap@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddObjLight@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddBarrel@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddShrine@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddBookcase@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddPurifyingFountain@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddArmorStand@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddDecap@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddVilebook@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddMagicCircle@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddBookstand@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddPedistal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddStoryBook@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddWeaponRack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddTorturedBody@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @GetRndObjLoc@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddMushPatch
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _AddSlainHero
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddObject@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Obj_Light@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Obj_Circle@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Obj_StopAnim@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Obj_Door@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Obj_Sarc@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ActivateTrapLine@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Obj_FlameTrap@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Obj_Trap@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Obj_BCrossDamage@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ProcessObjects
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ObjSetMicro@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @objects_set_door_piece@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ObjSetMini@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ObjL1Special@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ObjL2Special@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DoorSet@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RedoPlayerVision
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateL1RDoor@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateL1LDoor@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateL2RDoor@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateL2LDoor@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateL3RDoor@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateL3LDoor@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MonstCheckDoors@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ObjChangeMap@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ObjChangeMapResync@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateL1Door@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateLever@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateBook@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateBookLever@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateSChambBk@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateChest@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateMushPatch@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateInnSignChest@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateSlainHero@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateTrapLvr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateSarc@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateL2Door@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateL3Door@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperatePedistal@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @TryDisarm@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ItemMiscIdIdx@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateShrine@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateSkelBook@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateBookCase@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateDecap@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateArmorStand@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @FindValidShrine@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateGoatShrine@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateCauldron@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateFountains@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateWeaponRack@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateStoryBook@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateLazStand@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OperateObject@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncOpL1Door@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncOpL2Door@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncOpL3Door@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncOpObject@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @BreakCrux@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @BreakBarrel@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @BreakObject@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncBreakObj@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncL1Doors@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncCrux@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncLever@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncQSTLever@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncPedistal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncL2Doors@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncL3Doors@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncObjectAnim@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @GetObjectStr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_ObjTypeConv
PUBLIC	_AllObjects
PUBLIC	_ObjMasterLoadList
PUBLIC	_bxadd
PUBLIC	_byadd
PUBLIC	_shrinestrs
PUBLIC	_shrinemin
PUBLIC	_shrinemax
PUBLIC	_shrineavail
PUBLIC	_StoryBookName
PUBLIC	_StoryText
PUBLIC	??_C@_06FPNA@L1Braz?$AA@			; `string'
PUBLIC	??_C@_07MHFE@L1Doors?$AA@			; `string'
PUBLIC	??_C@_05PENN@Lever?$AA@				; `string'
PUBLIC	??_C@_06JKDN@Chest1?$AA@			; `string'
PUBLIC	??_C@_06GFIE@Chest2?$AA@			; `string'
PUBLIC	??_C@_06GGBN@Banner?$AA@			; `string'
PUBLIC	??_C@_08ILAE@SkulPile?$AA@			; `string'
PUBLIC	??_C@_08KJML@SkulFire?$AA@			; `string'
PUBLIC	??_C@_08KIKL@SkulStik?$AA@			; `string'
PUBLIC	??_C@_07CHFE@CruxSk1?$AA@			; `string'
PUBLIC	??_C@_07NION@CruxSk2?$AA@			; `string'
PUBLIC	??_C@_07HCHK@CruxSk3?$AA@			; `string'
PUBLIC	??_C@_05COAH@Book1?$AA@				; `string'
PUBLIC	??_C@_05NBLO@Book2?$AA@				; `string'
PUBLIC	??_C@_08CDG@Rockstan?$AA@			; `string'
PUBLIC	??_C@_05OBOH@Angel?$AA@				; `string'
PUBLIC	??_C@_06MPBD@Chest3?$AA@			; `string'
PUBLIC	??_C@_08CJOP@Burncros?$AA@			; `string'
PUBLIC	??_C@_07LKCG@Candle2?$AA@			; `string'
PUBLIC	??_C@_05MBDB@Nude2?$AA@				; `string'
PUBLIC	??_C@_07GJJH@Switch4?$AA@			; `string'
PUBLIC	??_C@_06PKLH@TNudeM?$AA@			; `string'
PUBLIC	??_C@_06FCFB@TNudeW?$AA@			; `string'
PUBLIC	??_C@_05FMPH@TSoul?$AA@				; `string'
PUBLIC	??_C@_07HJLE@L2Doors?$AA@			; `string'
PUBLIC	??_C@_07MGBG@WTorch4?$AA@			; `string'
PUBLIC	??_C@_07JDPD@WTorch3?$AA@			; `string'
PUBLIC	??_C@_04MLKJ@Sarc?$AA@				; `string'
PUBLIC	??_C@_06GNGL@Flame1?$AA@			; `string'
PUBLIC	??_C@_08JHGK@Prsrplt1?$AA@			; `string'
PUBLIC	??_C@_08HGED@Traphole?$AA@			; `string'
PUBLIC	??_C@_08IFGF@MiniWatr?$AA@			; `string'
PUBLIC	??_C@_07DJGE@WTorch2?$AA@			; `string'
PUBLIC	??_C@_07MGNN@WTorch1?$AA@			; `string'
PUBLIC	??_C@_05DOEO@BCase?$AA@				; `string'
PUBLIC	??_C@_06DJBI@BShelf?$AA@			; `string'
PUBLIC	??_C@_08PEKB@WeapStnd?$AA@			; `string'
PUBLIC	??_C@_06HHNL@Barrel?$AA@			; `string'
PUBLIC	??_C@_08EIEN@Barrelex?$AA@			; `string'
PUBLIC	??_C@_08OCGA@LShrineG?$AA@			; `string'
PUBLIC	??_C@_08JBBK@RShrineG?$AA@			; `string'
PUBLIC	??_C@_08NOEK@Bloodfnt?$AA@			; `string'
PUBLIC	??_C@_05MBFF@Decap?$AA@				; `string'
PUBLIC	??_C@_07HJGP@Pedistl?$AA@			; `string'
PUBLIC	??_C@_07OMBE@L3Doors?$AA@			; `string'
PUBLIC	??_C@_07IGIK@PFountn?$AA@			; `string'
PUBLIC	??_C@_08JGCJ@Armstand?$AA@			; `string'
PUBLIC	??_C@_08IFN@Goatshrn?$AA@			; `string'
PUBLIC	??_C@_08FFL@Cauldren?$AA@			; `string'
PUBLIC	??_C@_07IPLO@MFountn?$AA@			; `string'
PUBLIC	??_C@_07DMNM@TFountn?$AA@			; `string'
PUBLIC	??_C@_06CHJN@Altboy?$AA@			; `string'
PUBLIC	??_C@_05INOM@Mcirl?$AA@				; `string'
PUBLIC	??_C@_08OAJC@Bkslbrnt?$AA@			; `string'
PUBLIC	??_C@_08POAC@Mushptch?$AA@			; `string'
PUBLIC	??_C@_07MLFE@LzStand?$AA@			; `string'
PUBLIC	??_C@_0L@NBCG@Mysterious?$AA@			; `string'
PUBLIC	??_C@_06OCEO@Hidden?$AA@			; `string'
PUBLIC	??_C@_06ONLG@Gloomy?$AA@			; `string'
PUBLIC	??_C@_05EFIN@Weird?$AA@				; `string'
PUBLIC	??_C@_07MBHH@Magical?$AA@			; `string'
PUBLIC	??_C@_05HGNM@Stone?$AA@				; `string'
PUBLIC	??_C@_09IEGM@Religious?$AA@			; `string'
PUBLIC	??_C@_09LFEN@Enchanted?$AA@			; `string'
PUBLIC	??_C@_0N@MLKM@Thaumaturgic?$AA@			; `string'
PUBLIC	??_C@_0M@JMIB@Fascinating?$AA@			; `string'
PUBLIC	??_C@_07EAE@Cryptic?$AA@			; `string'
PUBLIC	??_C@_08KHKA@Eldritch?$AA@			; `string'
PUBLIC	??_C@_05OOD@Eerie?$AA@				; `string'
PUBLIC	??_C@_06KJBJ@Divine?$AA@			; `string'
PUBLIC	??_C@_04KHMI@Holy?$AA@				; `string'
PUBLIC	??_C@_06JMLC@Sacred?$AA@			; `string'
PUBLIC	??_C@_09PCPL@Spiritual?$AA@			; `string'
PUBLIC	??_C@_06BFCB@Spooky?$AA@			; `string'
PUBLIC	??_C@_09ONFI@Abandoned?$AA@			; `string'
PUBLIC	??_C@_06LPMH@Creepy?$AA@			; `string'
PUBLIC	??_C@_05HCPP@Quiet?$AA@				; `string'
PUBLIC	??_C@_08KGNO@Secluded?$AA@			; `string'
PUBLIC	??_C@_06EEEE@Ornate?$AA@			; `string'
PUBLIC	??_C@_0L@GLEI@Glimmering?$AA@			; `string'
PUBLIC	??_C@_07NIEH@Tainted?$AA@			; `string'
PUBLIC	??_C@_0BD@POGO@The?5Great?5Conflict?$AA@	; `string'
PUBLIC	??_C@_0BJ@ECO@The?5Wages?5of?5Sin?5are?5War?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KECO@The?5Tale?5of?5the?5Horadrim?$AA@ ; `string'
PUBLIC	??_C@_0P@OFJD@The?5Dark?5Exile?$AA@		; `string'
PUBLIC	??_C@_0M@HKF@The?5Sin?5War?$AA@			; `string'
PUBLIC	??_C@_0BJ@MFIA@The?5Binding?5of?5the?5Three?$AA@ ; `string'
PUBLIC	??_C@_0BC@GEM@The?5Realms?5Beyond?$AA@		; `string'
PUBLIC	??_C@_0BC@OJJG@Tale?5of?5the?5Three?$AA@	; `string'
PUBLIC	??_C@_0P@IMEI@The?5Black?5King?$AA@		; `string'
_DATA	SEGMENT
COMM	_trapid:DWORD
COMM	_trapdir:DWORD
COMM	_pObjCels:DWORD:028H
COMM	_ObjFileList:BYTE:028H
COMM	_objectactive:DWORD:07fH
COMM	_nobjects:DWORD
COMM	_leverid:DWORD
COMM	_objectavail:DWORD:07fH
COMM	_object:BYTE:03b88H
COMM	_InitObjFlag:DWORD
COMM	_numobjfiles:DWORD
_ObjTypeConv DD	00H
	DD	04H
	DD	014H
	DD	015H
	DD	016H
	DD	018H
	DD	0bH
	DD	0cH
	DD	0dH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	019H
	DD	029H
	DD	01aH
	DD	00H
	DD	08H
	DD	09H
	DD	0aH
	DD	050H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	031H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	054H
	DD	055H
	DD	03H
	DD	0eH
	DD	0fH
	DD	010H
	DD	011H
	DD	012H
	DD	013H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01cH
	DD	00H
	DD	035H
	DD	036H
	DD	024H
	DD	025H
	DD	026H
	DD	027H
	DD	028H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01bH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01dH
	DD	01eH
	DD	01fH
	DD	020H
	DD	021H
	DD	022H
	DD	023H
	DD	05H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	07H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	049H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	053H
	DD	00H
	DD	00H
	DD	059H
	DD	05aH
	DD	02fH
	DD	02eH
	DD	05eH
	ORG $+4
_AllObjects DB	01H
	DB	00H
	DB	01H
	DB	04H
	DB	01H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	01H
	DD	01aH
	DD	040H
	DD	01H
	DD	01H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	01H
	DB	01H
	DB	04H
	DB	01H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	040H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	01H
	DB	01H
	DB	01H
	DB	01H
	DB	04H
	DB	01H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	040H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	01H
	DB	03H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	0ffH
	ORG $+1
	DD	01H
	DD	02H
	DD	0bH
	DD	060H
	DD	01H
	DD	01H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	02H
	DB	01H
	DB	04H
	DB	01H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	01H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	01H
	DB	03H
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	01H
	DB	04H
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	01H
	DB	010H
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	03H
	DB	012H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	0ffH
	ORG $+1
	DD	01H
	DD	02H
	DD	04H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	03H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	03H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	03H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	03H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	06H
	DB	01H
	DB	04H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	00H
	DD	01H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	0fH
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	01H
	DB	03H
	ORG $+2
	DD	00H
	DB	02H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	0fH
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	01H
	DB	03H
	ORG $+2
	DD	00H
	DB	02H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	0fH
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	01H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	0eH
	DB	05H
	DB	05H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	02H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	00H
	DD	0aH
	DD	0a0H
	DD	01H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	013H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	03H
	DD	06H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	014H
	DB	010H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	01H
	DB	015H
	DB	0dH
	DB	010H
	DB	00H
	DB	0ffH
	DB	06H
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	015H
	DB	0dH
	DB	010H
	DB	00H
	DB	06H
	DB	06H
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	015H
	DB	0dH
	DB	010H
	DB	00H
	DB	06H
	DB	06H
	ORG $+1
	DD	00H
	DD	03H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	015H
	DB	0dH
	DB	010H
	DB	00H
	DB	06H
	DB	06H
	ORG $+1
	DD	00H
	DD	04H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	016H
	DB	0dH
	DB	010H
	DB	00H
	DB	06H
	DB	06H
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	016H
	DB	0dH
	DB	010H
	DB	00H
	DB	06H
	DB	06H
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	016H
	DB	0dH
	DB	010H
	DB	00H
	DB	06H
	DB	06H
	ORG $+1
	DD	00H
	DD	03H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	017H
	DB	0dH
	DB	010H
	DB	00H
	DB	0ffH
	DB	06H
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	017H
	DB	0dH
	DB	010H
	DB	00H
	DB	0ffH
	DB	06H
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	017H
	DB	0dH
	DB	010H
	DB	00H
	DB	0ffH
	DB	06H
	ORG $+1
	DD	00H
	DD	03H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	017H
	DB	0dH
	DB	010H
	DB	00H
	DB	0ffH
	DB	06H
	ORG $+1
	DD	00H
	DD	04H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	017H
	DB	0dH
	DB	010H
	DB	00H
	DB	0ffH
	DB	06H
	ORG $+1
	DD	00H
	DD	05H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	0dH
	DB	06H
	DB	06H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	04H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	018H
	DB	05H
	DB	08H
	DB	02H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	040H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	01H
	DB	01H
	DB	018H
	DB	05H
	DB	08H
	DB	02H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	040H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	019H
	DB	05H
	DB	08H
	DB	02H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	01H
	DD	09H
	DD	060H
	DD	00H
	DD	01H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	01aH
	DB	05H
	DB	08H
	DB	02H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	01H
	DD	09H
	DD	060H
	DD	00H
	DD	01H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	021H
	DB	05H
	DB	08H
	DB	02H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	01H
	DD	09H
	DD	060H
	DD	00H
	DD	01H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	020H
	DB	05H
	DB	08H
	DB	02H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	01H
	DD	09H
	DD	060H
	DD	00H
	DD	01H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	01bH
	DB	01H
	DB	04H
	DB	01H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	05H
	DD	080H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	01H
	DB	02H
	DB	01cH
	DB	01H
	DB	04H
	DB	01H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	014H
	DD	060H
	DD	00H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	02H
	DB	01H
	DB	04H
	DB	01H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	02H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	02H
	DB	01fH
	DB	01H
	DB	04H
	DB	01H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	01H
	DD	0aH
	DD	040H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	0cH
	DB	03H
	DB	04H
	DB	01H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	01eH
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	040H
	DD	00H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	01eH
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	040H
	DD	00H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	022H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	024H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	025H
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	09H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	01H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	026H
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	0aH
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	01H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	027H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	0bH
	DD	080H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	028H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	0bH
	DD	080H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	04H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	022H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	03H
	DD	00H
	DD	060H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	022H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	04H
	DD	00H
	DD	060H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	012H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	0ffH
	ORG $+1
	DD	01H
	DD	02H
	DD	04H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	03H
	DB	029H
	DB	00H
	DB	00H
	DB	00H
	DB	07H
	DB	0ffH
	ORG $+1
	DD	01H
	DD	02H
	DD	0aH
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	02aH
	DB	0dH
	DB	010H
	DB	00H
	DB	08H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	00H
	DB	01H
	DB	03H
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	01H
	DB	04H
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	01H
	DB	010H
	DB	01H
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	01H
	DB	0cH
	DB	07H
	DB	07H
	DB	02H
	DB	0ffH
	DB	08H
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	0cH
	DB	05H
	DB	05H
	DB	02H
	DB	0ffH
	DB	09H
	ORG $+1
	DD	00H
	DD	04H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	02bH
	DB	05H
	DB	05H
	DB	02H
	DB	0ffH
	DB	09H
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	02cH
	DB	09H
	DB	0cH
	DB	03H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	040H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	01H
	DB	01H
	DB	02cH
	DB	09H
	DB	0cH
	DB	03H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	040H
	DD	00H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	01H
	DB	03H
	DB	02dH
	DB	00H
	DB	00H
	DB	00H
	DB	09H
	DB	0ffH
	ORG $+1
	DD	01H
	DD	02H
	DD	0aH
	DD	080H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	02eH
	DB	00H
	DB	00H
	DB	00H
	DB	0aH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	02eH
	DB	00H
	DB	00H
	DB	00H
	DB	0aH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	03H
	DB	02fH
	DB	00H
	DB	00H
	DB	00H
	DB	0bH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	02H
	DD	0aH
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	030H
	DB	0dH
	DB	010H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	031H
	DB	00H
	DB	00H
	DB	00H
	DB	0dH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	02H
	DD	0aH
	DD	080H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	03H
	DB	032H
	DB	00H
	DB	00H
	DB	00H
	DB	0eH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	02H
	DD	04H
	DD	080H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	033H
	DB	00H
	DB	00H
	DB	01H
	DB	0ffH
	DB	0fH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	080H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	034H
	DB	00H
	DB	00H
	DB	01H
	DB	0ffH
	DB	0fH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	00H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	034H
	DB	00H
	DB	00H
	DB	01H
	DB	0ffH
	DB	0fH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	00H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	035H
	DB	04H
	DB	0cH
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	012H
	DB	02H
	DB	0cH
	DB	00H
	DB	0ffH
	DB	0fH
	ORG $+1
	DD	01H
	DD	02H
	DD	04H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	01H
	DB	0cH
	DB	0dH
	DB	0dH
	DB	04H
	DB	0ffH
	DB	0bH
	ORG $+1
	DD	00H
	DD	04H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	02eH
	DB	0dH
	DB	0dH
	DB	00H
	DB	0ffH
	DB	0bH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	02H
	DB	024H
	DB	0dH
	DB	0dH
	DB	00H
	DB	0ffH
	DB	0bH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	02H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	0ffH
	ORG $+1
	DD	01H
	DD	00H
	DD	0aH
	DD	0a0H
	DD	01H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	024H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	02H
	DB	024H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	0ffH
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	060H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DB	02H
	DB	036H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	01H
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	01H
	DB	02H
	DB	037H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0fH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	080H
	DD	01H
	DD	00H
	DD	01H
	DB	00H
	DB	03H
	ORG $+2
	DD	00H
	DB	01H
	DB	02aH
	DB	09H
	DB	09H
	DB	03H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	02H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	00H
	DB	02H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	01H
	DD	00H
	DD	060H
	DD	01H
	DD	01H
	DD	01H
	DB	00H
	DB	01H
	ORG $+2
	DD	01H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_06FPNA@L1Braz?$AA@
_DATA	SEGMENT
??_C@_06FPNA@L1Braz?$AA@ DB 'L1Braz', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MHFE@L1Doors?$AA@
_DATA	SEGMENT
??_C@_07MHFE@L1Doors?$AA@ DB 'L1Doors', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05PENN@Lever?$AA@
_DATA	SEGMENT
??_C@_05PENN@Lever?$AA@ DB 'Lever', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JKDN@Chest1?$AA@
_DATA	SEGMENT
??_C@_06JKDN@Chest1?$AA@ DB 'Chest1', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06GFIE@Chest2?$AA@
_DATA	SEGMENT
??_C@_06GFIE@Chest2?$AA@ DB 'Chest2', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06GGBN@Banner?$AA@
_DATA	SEGMENT
??_C@_06GGBN@Banner?$AA@ DB 'Banner', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08ILAE@SkulPile?$AA@
_DATA	SEGMENT
??_C@_08ILAE@SkulPile?$AA@ DB 'SkulPile', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KJML@SkulFire?$AA@
_DATA	SEGMENT
??_C@_08KJML@SkulFire?$AA@ DB 'SkulFire', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KIKL@SkulStik?$AA@
_DATA	SEGMENT
??_C@_08KIKL@SkulStik?$AA@ DB 'SkulStik', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CHFE@CruxSk1?$AA@
_DATA	SEGMENT
??_C@_07CHFE@CruxSk1?$AA@ DB 'CruxSk1', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07NION@CruxSk2?$AA@
_DATA	SEGMENT
??_C@_07NION@CruxSk2?$AA@ DB 'CruxSk2', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HCHK@CruxSk3?$AA@
_DATA	SEGMENT
??_C@_07HCHK@CruxSk3?$AA@ DB 'CruxSk3', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05COAH@Book1?$AA@
_DATA	SEGMENT
??_C@_05COAH@Book1?$AA@ DB 'Book1', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05NBLO@Book2?$AA@
_DATA	SEGMENT
??_C@_05NBLO@Book2?$AA@ DB 'Book2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08CDG@Rockstan?$AA@
_DATA	SEGMENT
??_C@_08CDG@Rockstan?$AA@ DB 'Rockstan', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05OBOH@Angel?$AA@
_DATA	SEGMENT
??_C@_05OBOH@Angel?$AA@ DB 'Angel', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MPBD@Chest3?$AA@
_DATA	SEGMENT
??_C@_06MPBD@Chest3?$AA@ DB 'Chest3', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08CJOP@Burncros?$AA@
_DATA	SEGMENT
??_C@_08CJOP@Burncros?$AA@ DB 'Burncros', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07LKCG@Candle2?$AA@
_DATA	SEGMENT
??_C@_07LKCG@Candle2?$AA@ DB 'Candle2', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MBDB@Nude2?$AA@
_DATA	SEGMENT
??_C@_05MBDB@Nude2?$AA@ DB 'Nude2', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07GJJH@Switch4?$AA@
_DATA	SEGMENT
??_C@_07GJJH@Switch4?$AA@ DB 'Switch4', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06PKLH@TNudeM?$AA@
_DATA	SEGMENT
??_C@_06PKLH@TNudeM?$AA@ DB 'TNudeM', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06FCFB@TNudeW?$AA@
_DATA	SEGMENT
??_C@_06FCFB@TNudeW?$AA@ DB 'TNudeW', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FMPH@TSoul?$AA@
_DATA	SEGMENT
??_C@_05FMPH@TSoul?$AA@ DB 'TSoul', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HJLE@L2Doors?$AA@
_DATA	SEGMENT
??_C@_07HJLE@L2Doors?$AA@ DB 'L2Doors', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MGBG@WTorch4?$AA@
_DATA	SEGMENT
??_C@_07MGBG@WTorch4?$AA@ DB 'WTorch4', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07JDPD@WTorch3?$AA@
_DATA	SEGMENT
??_C@_07JDPD@WTorch3?$AA@ DB 'WTorch3', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04MLKJ@Sarc?$AA@
_DATA	SEGMENT
??_C@_04MLKJ@Sarc?$AA@ DB 'Sarc', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06GNGL@Flame1?$AA@
_DATA	SEGMENT
??_C@_06GNGL@Flame1?$AA@ DB 'Flame1', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08JHGK@Prsrplt1?$AA@
_DATA	SEGMENT
??_C@_08JHGK@Prsrplt1?$AA@ DB 'Prsrplt1', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08HGED@Traphole?$AA@
_DATA	SEGMENT
??_C@_08HGED@Traphole?$AA@ DB 'Traphole', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08IFGF@MiniWatr?$AA@
_DATA	SEGMENT
??_C@_08IFGF@MiniWatr?$AA@ DB 'MiniWatr', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07DJGE@WTorch2?$AA@
_DATA	SEGMENT
??_C@_07DJGE@WTorch2?$AA@ DB 'WTorch2', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MGNN@WTorch1?$AA@
_DATA	SEGMENT
??_C@_07MGNN@WTorch1?$AA@ DB 'WTorch1', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05DOEO@BCase?$AA@
_DATA	SEGMENT
??_C@_05DOEO@BCase?$AA@ DB 'BCase', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06DJBI@BShelf?$AA@
_DATA	SEGMENT
??_C@_06DJBI@BShelf?$AA@ DB 'BShelf', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PEKB@WeapStnd?$AA@
_DATA	SEGMENT
??_C@_08PEKB@WeapStnd?$AA@ DB 'WeapStnd', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06HHNL@Barrel?$AA@
_DATA	SEGMENT
??_C@_06HHNL@Barrel?$AA@ DB 'Barrel', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08EIEN@Barrelex?$AA@
_DATA	SEGMENT
??_C@_08EIEN@Barrelex?$AA@ DB 'Barrelex', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08OCGA@LShrineG?$AA@
_DATA	SEGMENT
??_C@_08OCGA@LShrineG?$AA@ DB 'LShrineG', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08JBBK@RShrineG?$AA@
_DATA	SEGMENT
??_C@_08JBBK@RShrineG?$AA@ DB 'RShrineG', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08NOEK@Bloodfnt?$AA@
_DATA	SEGMENT
??_C@_08NOEK@Bloodfnt?$AA@ DB 'Bloodfnt', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MBFF@Decap?$AA@
_DATA	SEGMENT
??_C@_05MBFF@Decap?$AA@ DB 'Decap', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HJGP@Pedistl?$AA@
_DATA	SEGMENT
??_C@_07HJGP@Pedistl?$AA@ DB 'Pedistl', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07OMBE@L3Doors?$AA@
_DATA	SEGMENT
??_C@_07OMBE@L3Doors?$AA@ DB 'L3Doors', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07IGIK@PFountn?$AA@
_DATA	SEGMENT
??_C@_07IGIK@PFountn?$AA@ DB 'PFountn', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08JGCJ@Armstand?$AA@
_DATA	SEGMENT
??_C@_08JGCJ@Armstand?$AA@ DB 'Armstand', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08IFN@Goatshrn?$AA@
_DATA	SEGMENT
??_C@_08IFN@Goatshrn?$AA@ DB 'Goatshrn', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08FFL@Cauldren?$AA@
_DATA	SEGMENT
??_C@_08FFL@Cauldren?$AA@ DB 'Cauldren', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07IPLO@MFountn?$AA@
_DATA	SEGMENT
??_C@_07IPLO@MFountn?$AA@ DB 'MFountn', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07DMNM@TFountn?$AA@
_DATA	SEGMENT
??_C@_07DMNM@TFountn?$AA@ DB 'TFountn', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CHJN@Altboy?$AA@
_DATA	SEGMENT
??_C@_06CHJN@Altboy?$AA@ DB 'Altboy', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05INOM@Mcirl?$AA@
_DATA	SEGMENT
??_C@_05INOM@Mcirl?$AA@ DB 'Mcirl', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08OAJC@Bkslbrnt?$AA@
_DATA	SEGMENT
??_C@_08OAJC@Bkslbrnt?$AA@ DB 'Bkslbrnt', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08POAC@Mushptch?$AA@
_DATA	SEGMENT
??_C@_08POAC@Mushptch?$AA@ DB 'Mushptch', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MLFE@LzStand?$AA@
_DATA	SEGMENT
??_C@_07MLFE@LzStand?$AA@ DB 'LzStand', 00H		; `string'
_DATA	ENDS
_DATA	SEGMENT
	ORG $+4
_ObjMasterLoadList DD FLAT:??_C@_06FPNA@L1Braz?$AA@
	DD	FLAT:??_C@_07MHFE@L1Doors?$AA@
	DD	FLAT:??_C@_05PENN@Lever?$AA@
	DD	FLAT:??_C@_06JKDN@Chest1?$AA@
	DD	FLAT:??_C@_06GFIE@Chest2?$AA@
	DD	FLAT:??_C@_06GGBN@Banner?$AA@
	DD	FLAT:??_C@_08ILAE@SkulPile?$AA@
	DD	FLAT:??_C@_08KJML@SkulFire?$AA@
	DD	FLAT:??_C@_08KIKL@SkulStik?$AA@
	DD	FLAT:??_C@_07CHFE@CruxSk1?$AA@
	DD	FLAT:??_C@_07NION@CruxSk2?$AA@
	DD	FLAT:??_C@_07HCHK@CruxSk3?$AA@
	DD	FLAT:??_C@_05COAH@Book1?$AA@
	DD	FLAT:??_C@_05NBLO@Book2?$AA@
	DD	FLAT:??_C@_08CDG@Rockstan?$AA@
	DD	FLAT:??_C@_05OBOH@Angel?$AA@
	DD	FLAT:??_C@_06MPBD@Chest3?$AA@
	DD	FLAT:??_C@_08CJOP@Burncros?$AA@
	DD	FLAT:??_C@_07LKCG@Candle2?$AA@
	DD	FLAT:??_C@_05MBDB@Nude2?$AA@
	DD	FLAT:??_C@_07GJJH@Switch4?$AA@
	DD	FLAT:??_C@_06PKLH@TNudeM?$AA@
	DD	FLAT:??_C@_06FCFB@TNudeW?$AA@
	DD	FLAT:??_C@_05FMPH@TSoul?$AA@
	DD	FLAT:??_C@_07HJLE@L2Doors?$AA@
	DD	FLAT:??_C@_07MGBG@WTorch4?$AA@
	DD	FLAT:??_C@_07JDPD@WTorch3?$AA@
	DD	FLAT:??_C@_04MLKJ@Sarc?$AA@
	DD	FLAT:??_C@_06GNGL@Flame1?$AA@
	DD	FLAT:??_C@_08JHGK@Prsrplt1?$AA@
	DD	FLAT:??_C@_08HGED@Traphole?$AA@
	DD	FLAT:??_C@_08IFGF@MiniWatr?$AA@
	DD	FLAT:??_C@_07DJGE@WTorch2?$AA@
	DD	FLAT:??_C@_07MGNN@WTorch1?$AA@
	DD	FLAT:??_C@_05DOEO@BCase?$AA@
	DD	FLAT:??_C@_06DJBI@BShelf?$AA@
	DD	FLAT:??_C@_08PEKB@WeapStnd?$AA@
	DD	FLAT:??_C@_06HHNL@Barrel?$AA@
	DD	FLAT:??_C@_08EIEN@Barrelex?$AA@
	DD	FLAT:??_C@_08OCGA@LShrineG?$AA@
	DD	FLAT:??_C@_08JBBK@RShrineG?$AA@
	DD	FLAT:??_C@_08NOEK@Bloodfnt?$AA@
	DD	FLAT:??_C@_05MBFF@Decap?$AA@
	DD	FLAT:??_C@_07HJGP@Pedistl?$AA@
	DD	FLAT:??_C@_07OMBE@L3Doors?$AA@
	DD	FLAT:??_C@_07IGIK@PFountn?$AA@
	DD	FLAT:??_C@_08JGCJ@Armstand?$AA@
	DD	FLAT:??_C@_08IFN@Goatshrn?$AA@
	DD	FLAT:??_C@_08FFL@Cauldren?$AA@
	DD	FLAT:??_C@_07IPLO@MFountn?$AA@
	DD	FLAT:??_C@_07DMNM@TFountn?$AA@
	DD	FLAT:??_C@_06CHJN@Altboy?$AA@
	DD	FLAT:??_C@_05INOM@Mcirl?$AA@
	DD	FLAT:??_C@_08OAJC@Bkslbrnt?$AA@
	DD	FLAT:??_C@_08POAC@Mushptch?$AA@
	DD	FLAT:??_C@_07MLFE@LzStand?$AA@
_bxadd	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	01H
_byadd	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
_DATA	ENDS
;	COMDAT ??_C@_0L@NBCG@Mysterious?$AA@
_DATA	SEGMENT
??_C@_0L@NBCG@Mysterious?$AA@ DB 'Mysterious', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06OCEO@Hidden?$AA@
_DATA	SEGMENT
??_C@_06OCEO@Hidden?$AA@ DB 'Hidden', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06ONLG@Gloomy?$AA@
_DATA	SEGMENT
??_C@_06ONLG@Gloomy?$AA@ DB 'Gloomy', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05EFIN@Weird?$AA@
_DATA	SEGMENT
??_C@_05EFIN@Weird?$AA@ DB 'Weird', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MBHH@Magical?$AA@
_DATA	SEGMENT
??_C@_07MBHH@Magical?$AA@ DB 'Magical', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05HGNM@Stone?$AA@
_DATA	SEGMENT
??_C@_05HGNM@Stone?$AA@ DB 'Stone', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09IEGM@Religious?$AA@
_DATA	SEGMENT
??_C@_09IEGM@Religious?$AA@ DB 'Religious', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09LFEN@Enchanted?$AA@
_DATA	SEGMENT
??_C@_09LFEN@Enchanted?$AA@ DB 'Enchanted', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@MLKM@Thaumaturgic?$AA@
_DATA	SEGMENT
??_C@_0N@MLKM@Thaumaturgic?$AA@ DB 'Thaumaturgic', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@JMIB@Fascinating?$AA@
_DATA	SEGMENT
??_C@_0M@JMIB@Fascinating?$AA@ DB 'Fascinating', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07EAE@Cryptic?$AA@
_DATA	SEGMENT
??_C@_07EAE@Cryptic?$AA@ DB 'Cryptic', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KHKA@Eldritch?$AA@
_DATA	SEGMENT
??_C@_08KHKA@Eldritch?$AA@ DB 'Eldritch', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05OOD@Eerie?$AA@
_DATA	SEGMENT
??_C@_05OOD@Eerie?$AA@ DB 'Eerie', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06KJBJ@Divine?$AA@
_DATA	SEGMENT
??_C@_06KJBJ@Divine?$AA@ DB 'Divine', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04KHMI@Holy?$AA@
_DATA	SEGMENT
??_C@_04KHMI@Holy?$AA@ DB 'Holy', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JMLC@Sacred?$AA@
_DATA	SEGMENT
??_C@_06JMLC@Sacred?$AA@ DB 'Sacred', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09PCPL@Spiritual?$AA@
_DATA	SEGMENT
??_C@_09PCPL@Spiritual?$AA@ DB 'Spiritual', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06BFCB@Spooky?$AA@
_DATA	SEGMENT
??_C@_06BFCB@Spooky?$AA@ DB 'Spooky', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09ONFI@Abandoned?$AA@
_DATA	SEGMENT
??_C@_09ONFI@Abandoned?$AA@ DB 'Abandoned', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06LPMH@Creepy?$AA@
_DATA	SEGMENT
??_C@_06LPMH@Creepy?$AA@ DB 'Creepy', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05HCPP@Quiet?$AA@
_DATA	SEGMENT
??_C@_05HCPP@Quiet?$AA@ DB 'Quiet', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KGNO@Secluded?$AA@
_DATA	SEGMENT
??_C@_08KGNO@Secluded?$AA@ DB 'Secluded', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06EEEE@Ornate?$AA@
_DATA	SEGMENT
??_C@_06EEEE@Ornate?$AA@ DB 'Ornate', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GLEI@Glimmering?$AA@
_DATA	SEGMENT
??_C@_0L@GLEI@Glimmering?$AA@ DB 'Glimmering', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07NIEH@Tainted?$AA@
_DATA	SEGMENT
??_C@_07NIEH@Tainted?$AA@ DB 'Tainted', 00H		; `string'
_DATA	ENDS
_DATA	SEGMENT
_shrinestrs DD	FLAT:??_C@_0L@NBCG@Mysterious?$AA@
	DD	FLAT:??_C@_06OCEO@Hidden?$AA@
	DD	FLAT:??_C@_06ONLG@Gloomy?$AA@
	DD	FLAT:??_C@_05EFIN@Weird?$AA@
	DD	FLAT:??_C@_07MBHH@Magical?$AA@
	DD	FLAT:??_C@_05HGNM@Stone?$AA@
	DD	FLAT:??_C@_09IEGM@Religious?$AA@
	DD	FLAT:??_C@_09LFEN@Enchanted?$AA@
	DD	FLAT:??_C@_0N@MLKM@Thaumaturgic?$AA@
	DD	FLAT:??_C@_0M@JMIB@Fascinating?$AA@
	DD	FLAT:??_C@_07EAE@Cryptic?$AA@
	DD	FLAT:??_C@_07MBHH@Magical?$AA@
	DD	FLAT:??_C@_08KHKA@Eldritch?$AA@
	DD	FLAT:??_C@_05OOD@Eerie?$AA@
	DD	FLAT:??_C@_06KJBJ@Divine?$AA@
	DD	FLAT:??_C@_04KHMI@Holy?$AA@
	DD	FLAT:??_C@_06JMLC@Sacred?$AA@
	DD	FLAT:??_C@_09PCPL@Spiritual?$AA@
	DD	FLAT:??_C@_06BFCB@Spooky?$AA@
	DD	FLAT:??_C@_09ONFI@Abandoned?$AA@
	DD	FLAT:??_C@_06LPMH@Creepy?$AA@
	DD	FLAT:??_C@_05HCPP@Quiet?$AA@
	DD	FLAT:??_C@_08KGNO@Secluded?$AA@
	DD	FLAT:??_C@_06EEEE@Ornate?$AA@
	DD	FLAT:??_C@_0L@GLEI@Glimmering?$AA@
	DD	FLAT:??_C@_07NIEH@Tainted?$AA@
_shrinemin DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+2
_shrinemax DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	08H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	ORG $+2
_shrineavail DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
_DATA	ENDS
;	COMDAT ??_C@_0BD@POGO@The?5Great?5Conflict?$AA@
_DATA	SEGMENT
??_C@_0BD@POGO@The?5Great?5Conflict?$AA@ DB 'The Great Conflict', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@ECO@The?5Wages?5of?5Sin?5are?5War?$AA@
_DATA	SEGMENT
??_C@_0BJ@ECO@The?5Wages?5of?5Sin?5are?5War?$AA@ DB 'The Wages of Sin are'
	DB	' War', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KECO@The?5Tale?5of?5the?5Horadrim?$AA@
_DATA	SEGMENT
??_C@_0BJ@KECO@The?5Tale?5of?5the?5Horadrim?$AA@ DB 'The Tale of the Hora'
	DB	'drim', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@OFJD@The?5Dark?5Exile?$AA@
_DATA	SEGMENT
??_C@_0P@OFJD@The?5Dark?5Exile?$AA@ DB 'The Dark Exile', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@HKF@The?5Sin?5War?$AA@
_DATA	SEGMENT
??_C@_0M@HKF@The?5Sin?5War?$AA@ DB 'The Sin War', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MFIA@The?5Binding?5of?5the?5Three?$AA@
_DATA	SEGMENT
??_C@_0BJ@MFIA@The?5Binding?5of?5the?5Three?$AA@ DB 'The Binding of the T'
	DB	'hree', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GEM@The?5Realms?5Beyond?$AA@
_DATA	SEGMENT
??_C@_0BC@GEM@The?5Realms?5Beyond?$AA@ DB 'The Realms Beyond', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@OJJG@Tale?5of?5the?5Three?$AA@
_DATA	SEGMENT
??_C@_0BC@OJJG@Tale?5of?5the?5Three?$AA@ DB 'Tale of the Three', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@IMEI@The?5Black?5King?$AA@
_DATA	SEGMENT
??_C@_0P@IMEI@The?5Black?5King?$AA@ DB 'The Black King', 00H ; `string'
_DATA	ENDS
_DATA	SEGMENT
	ORG $+2
_StoryBookName DD FLAT:??_C@_0BD@POGO@The?5Great?5Conflict?$AA@
	DD	FLAT:??_C@_0BJ@ECO@The?5Wages?5of?5Sin?5are?5War?$AA@
	DD	FLAT:??_C@_0BJ@KECO@The?5Tale?5of?5the?5Horadrim?$AA@
	DD	FLAT:??_C@_0P@OFJD@The?5Dark?5Exile?$AA@
	DD	FLAT:??_C@_0M@HKF@The?5Sin?5War?$AA@
	DD	FLAT:??_C@_0BJ@MFIA@The?5Binding?5of?5the?5Three?$AA@
	DD	FLAT:??_C@_0BC@GEM@The?5Realms?5Beyond?$AA@
	DD	FLAT:??_C@_0BC@OJJG@Tale?5of?5the?5Three?$AA@
	DD	FLAT:??_C@_0P@IMEI@The?5Black?5King?$AA@
_StoryText DD	0f9H
	DD	0faH
	DD	0fbH
	DD	0fcH
	DD	0fdH
	DD	0feH
	DD	0ffH
	DD	0100H
	DD	0101H
_DATA	ENDS
PUBLIC	_InitObjectGFX
PUBLIC	??_C@_0P@NDGK@Objects?2?$CFs?4CEL?$AA@		; `string'
EXTRN	_numthemes:DWORD
EXTRN	_themes:BYTE
EXTRN	_sprintf:NEAR
EXTRN	@QuestStatus@4:NEAR
EXTRN	@LoadFileInMem@8:NEAR
EXTRN	_memset:NEAR
EXTRN	_currlevel:BYTE
;	COMDAT ??_C@_0P@NDGK@Objects?2?$CFs?4CEL?$AA@
; File Source/objects.cpp
_DATA	SEGMENT
??_C@_0P@NDGK@Objects?2?$CFs?4CEL?$AA@ DB 'Objects\%s.CEL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _InitObjectGFX
_TEXT	SEGMENT
_fileload$ = -88
_filestr$ = -32
_InitObjectGFX PROC NEAR				; COMDAT
; Line 358
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
; Line 372
	push	56					; 00000038H
	lea	eax, DWORD PTR _fileload$[ebp]
	push	0
	push	eax
	call	_memset
; Line 373
	or	bl, -1
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR _AllObjects, bl
	je	$L85088
	push	esi
	push	edi
; Line 374
	mov	eax, OFFSET FLAT:_AllObjects
	mov	esi, OFFSET FLAT:_AllObjects+1
$L85086:
; Line 377
	cmp	BYTE PTR [eax], 1
	jne	SHORT $L85093
	movzx	eax, BYTE PTR _currlevel
	movsx	ecx, BYTE PTR [esi+1]
	cmp	eax, ecx
	jl	SHORT $L85093
	movsx	ecx, BYTE PTR [esi+2]
	cmp	eax, ecx
	jg	SHORT $L85093
; Line 378
	movsx	eax, BYTE PTR [esi]
	mov	BYTE PTR _fileload$[ebp+eax], 1
$L85093:
; Line 379
	mov	al, BYTE PTR [esi+4]
; Line 380
	cmp	al, bl
	je	SHORT $L85098
; Line 382
	mov	edx, DWORD PTR _numthemes
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $L85098
	movzx	eax, al
$L85096:
; Line 383
	cmp	DWORD PTR _themes[ecx*8], eax
	jne	SHORT $L85097
; Line 384
	movsx	edi, BYTE PTR [esi]
	mov	BYTE PTR _fileload$[ebp+edi], 1
$L85097:
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $L85096
$L85098:
; Line 387
	mov	al, BYTE PTR [esi+5]
; Line 388
	cmp	al, bl
	je	SHORT $L85102
; Line 389
	movsx	ecx, al
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85102
; Line 390
	movsx	eax, BYTE PTR [esi]
	mov	BYTE PTR _fileload$[ebp+eax], 1
$L85102:
; Line 392
	add	esi, 44					; 0000002cH
; Line 393
	lea	eax, DWORD PTR [esi-1]
; Line 394
	cmp	BYTE PTR [eax], bl
	jne	SHORT $L85086
	pop	edi
	pop	esi
$L85088:
; Line 396
	xor	ebx, ebx
$L85105:
; Line 398
	cmp	BYTE PTR _fileload$[ebp+ebx], 0
	je	SHORT $L85108
; Line 400
	mov	eax, DWORD PTR _numobjfiles
; Line 401
	push	DWORD PTR _ObjMasterLoadList[ebx*4]
	mov	BYTE PTR _ObjFileList[eax], bl
	lea	eax, DWORD PTR _filestr$[ebp]
	push	OFFSET FLAT:??_C@_0P@NDGK@Objects?2?$CFs?4CEL?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 402
	xor	edx, edx
	lea	ecx, DWORD PTR _filestr$[ebp]
	call	@LoadFileInMem@8
; Line 403
	mov	ecx, DWORD PTR _numobjfiles
	inc	DWORD PTR _numobjfiles
; Line 404
	mov	DWORD PTR _pObjCels[ecx*4], eax
$L85108:
; Line 406
	inc	ebx
; Line 407
	cmp	ebx, 56					; 00000038H
	jl	SHORT $L85105
	pop	ebx
; Line 408
	leave
	ret	0
_InitObjectGFX ENDP
_TEXT	ENDS
PUBLIC	_FreeObjectGFX
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _FreeObjectGFX
_TEXT	SEGMENT
_FreeObjectGFX PROC NEAR				; COMDAT
; Line 413
	push	esi
; Line 417
	xor	esi, esi
	cmp	DWORD PTR _numobjfiles, esi
	jle	SHORT $L85115
$L85113:
	lea	eax, DWORD PTR _pObjCels[esi*4]
; Line 418
	mov	ecx, DWORD PTR [eax]
; Line 419
	and	DWORD PTR [eax], 0
; Line 420
	call	@mem_free_dbg@4
	inc	esi
	cmp	esi, DWORD PTR _numobjfiles
	jl	SHORT $L85113
$L85115:
; Line 422
	and	DWORD PTR _numobjfiles, 0
	pop	esi
; Line 423
	ret	0
_FreeObjectGFX ENDP
_TEXT	ENDS
PUBLIC	@RndLocOk@8
EXTRN	_dFlags:BYTE
EXTRN	_dMonster:BYTE
EXTRN	_dObject:BYTE
EXTRN	_dPiece:BYTE
EXTRN	_leveltype:BYTE
EXTRN	_nSolidTable:BYTE
EXTRN	_dPlayer:BYTE
; Function compile flags: /Ogsy
;	COMDAT @RndLocOk@8
_TEXT	SEGMENT
@RndLocOk@8 PROC NEAR					; COMDAT
; _xp$ = ecx
; _yp$ = edx
; Line 434
	imul	ecx, 112				; 00000070H
	push	esi
; Line 435
	xor	eax, eax
	lea	esi, DWORD PTR [ecx+edx]
; Line 436
	shl	esi, 2
	cmp	DWORD PTR _dMonster[esi], eax
	jne	SHORT $L85127
	cmp	BYTE PTR _dPlayer[ecx+edx], al
	jne	SHORT $L85127
	cmp	BYTE PTR _dObject[ecx+edx], al
	jne	SHORT $L85127
	test	BYTE PTR _dFlags[ecx+edx], 8
	jne	SHORT $L85127
; Line 437
	mov	esi, DWORD PTR _dPiece[esi]
; Line 438
	cmp	BYTE PTR _nSolidTable[esi], al
	jne	SHORT $L85127
	cmp	BYTE PTR _leveltype, 1
	jne	SHORT $L85128
	cmp	esi, 126				; 0000007eH
	jle	SHORT $L85128
	cmp	esi, 144				; 00000090H
	jl	SHORT $L85127
$L85128:
; Line 439
	mov	al, 1
$L85127:
	pop	esi
; Line 442
	ret	0
@RndLocOk@8 ENDP
_TEXT	ENDS
PUBLIC	@InitRndLocObj@12
PUBLIC	@AddObject@12
EXTRN	@random@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @InitRndLocObj@12
_TEXT	SEGMENT
_objtype$ = 8
_i$ = -4
@InitRndLocObj@12 PROC NEAR				; COMDAT
; _min$ = ecx
; _max$ = edx
; Line 445
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 451
	and	DWORD PTR _i$[ebp], 0
	push	ebx
	push	esi
	mov	esi, ecx
; Line 452
	sub	edx, esi
	mov	cl, 139					; 0000008bH
	call	@random@8
	mov	ebx, eax
	add	ebx, esi
; Line 453
	test	ebx, ebx
	jle	$L88295
	push	edi
$L85144:
; Line 456
	push	80					; 00000050H
	mov	cl, 139					; 0000008bH
	pop	edx
	call	@random@8
	mov	esi, eax
; Line 457
	mov	cl, 139					; 0000008bH
	push	80					; 00000050H
	add	esi, 16					; 00000010H
	pop	edx
	call	@random@8
	mov	edi, eax
; Line 458
	lea	ecx, DWORD PTR [esi-1]
	add	edi, 16					; 00000010H
	lea	edx, DWORD PTR [edi-1]
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85144
; Line 459
	lea	edx, DWORD PTR [edi-1]
	mov	ecx, esi
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85144
; Line 460
	lea	ecx, DWORD PTR [esi+1]
	lea	edx, DWORD PTR [edi-1]
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85144
; Line 462
	lea	ecx, DWORD PTR [esi-1]
	mov	edx, edi
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85144
; Line 463
	mov	ecx, esi
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85144
; Line 464
	lea	ecx, DWORD PTR [esi+1]
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85144
; Line 465
	lea	edx, DWORD PTR [edi+1]
	lea	ecx, DWORD PTR [esi-1]
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85144
; Line 466
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, esi
	call	@RndLocOk@8
	test	al, al
	je	$L85144
; Line 467
	lea	edx, DWORD PTR [edi+1]
	lea	ecx, DWORD PTR [esi+1]
	call	@RndLocOk@8
	test	al, al
	je	$L85144
; Line 468
	mov	ecx, DWORD PTR _objtype$[ebp]
	push	edi
	mov	edx, esi
	call	@AddObject@12
; Line 469
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], ebx
	jl	$L85144
	pop	edi
$L88295:
	pop	esi
	pop	ebx
; Line 481
	leave
	ret	4
@InitRndLocObj@12 ENDP
_TEXT	ENDS
PUBLIC	@InitRndLocBigObj@12
; Function compile flags: /Ogsy
;	COMDAT @InitRndLocBigObj@12
_TEXT	SEGMENT
_objtype$ = 8
_numobjs$ = -8
_i$ = -4
@InitRndLocBigObj@12 PROC NEAR				; COMDAT
; _min$ = ecx
; _max$ = edx
; Line 484
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 490
	and	DWORD PTR _i$[ebp], 0
	push	esi
	mov	esi, ecx
; Line 491
	mov	cl, 140					; 0000008cH
	sub	edx, esi
	call	@random@8
	add	eax, esi
; Line 492
	test	eax, eax
	mov	DWORD PTR _numobjs$[ebp], eax
	jle	$L88300
	push	ebx
	push	edi
$L85171:
; Line 495
	push	80					; 00000050H
	mov	cl, 140					; 0000008cH
	pop	edx
	call	@random@8
	mov	edi, eax
; Line 496
	mov	cl, 140					; 0000008cH
	push	80					; 00000050H
	add	edi, 16					; 00000010H
	pop	edx
	call	@random@8
	mov	esi, eax
; Line 497
	lea	ecx, DWORD PTR [edi-1]
	add	esi, 16					; 00000010H
	lea	edx, DWORD PTR [esi-2]
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85171
; Line 498
	lea	edx, DWORD PTR [esi-2]
	mov	ecx, edi
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85171
; Line 499
	lea	ecx, DWORD PTR [edi+1]
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85171
; Line 501
	lea	edx, DWORD PTR [esi-1]
	lea	ecx, DWORD PTR [edi-1]
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85171
; Line 502
	mov	ecx, edi
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85171
; Line 503
	lea	ecx, DWORD PTR [edi+1]
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85171
; Line 504
	lea	ebx, DWORD PTR [edi-1]
	mov	edx, esi
	mov	ecx, ebx
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85171
; Line 505
	mov	ecx, edi
	call	@RndLocOk@8
	test	al, al
	je	$L85171
; Line 506
	lea	ecx, DWORD PTR [edi+1]
	call	@RndLocOk@8
	test	al, al
	je	$L85171
; Line 507
	lea	edx, DWORD PTR [esi+1]
	mov	ecx, ebx
	call	@RndLocOk@8
	test	al, al
	je	$L85171
; Line 508
	mov	ecx, edi
	call	@RndLocOk@8
	test	al, al
	je	$L85171
; Line 509
	lea	ecx, DWORD PTR [edi+1]
	call	@RndLocOk@8
	test	al, al
	je	$L85171
; Line 510
	mov	ecx, DWORD PTR _objtype$[ebp]
	push	esi
	mov	edx, edi
	call	@AddObject@12
; Line 511
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numobjs$[ebp]
	jl	$L85171
	pop	edi
	pop	ebx
$L88300:
	pop	esi
; Line 526
	leave
	ret	4
@InitRndLocBigObj@12 ENDP
_TEXT	ENDS
PUBLIC	@InitRndLocObj5x5@12
; Function compile flags: /Ogsy
;	COMDAT @InitRndLocObj5x5@12
_TEXT	SEGMENT
_objtype$ = 8
_v12$ = -20
_v13$ = -16
_v14$ = -12
_v15$ = -8
_v16$ = -4
@InitRndLocObj5x5@12 PROC NEAR				; COMDAT
; _min$ = ecx
; _max$ = edx
; Line 529
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 545
	and	DWORD PTR _v13$[ebp], 0
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	sub	edx, esi
; Line 546
	mov	cl, 139					; 0000008bH
	call	@random@8
	mov	ebx, eax
	add	ebx, esi
; Line 547
	test	ebx, ebx
	jle	$L85208
$L85206:
; Line 549
	and	DWORD PTR _v14$[ebp], 0
$L85210:
; Line 552
	push	80					; 00000050H
	mov	cl, 139					; 0000008bH
	pop	edx
	mov	DWORD PTR _v12$[ebp], 1
	call	@random@8
	mov	edi, eax
; Line 555
	mov	cl, 139					; 0000008bH
	push	80					; 00000050H
	add	edi, 16					; 00000010H
	pop	edx
	mov	DWORD PTR _v15$[ebp], -2		; fffffffeH
	call	@random@8
	mov	esi, eax
	add	esi, 16					; 00000010H
$L85212:
; Line 557
	mov	DWORD PTR _v16$[ebp], -2		; fffffffeH
$L85215:
; Line 560
	mov	eax, DWORD PTR _v16$[ebp]
	lea	ecx, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR _v15$[ebp]
	lea	edx, DWORD PTR [esi+eax]
	call	@RndLocOk@8
	test	al, al
	jne	SHORT $L85218
; Line 561
	and	DWORD PTR _v12$[ebp], 0
$L85218:
; Line 562
	inc	DWORD PTR _v16$[ebp]
; Line 563
	cmp	DWORD PTR _v16$[ebp], 2
	jle	SHORT $L85215
; Line 564
	inc	DWORD PTR _v15$[ebp]
; Line 565
	cmp	DWORD PTR _v15$[ebp], 2
	jle	SHORT $L85212
; Line 566
	cmp	DWORD PTR _v12$[ebp], 0
	jne	SHORT $L88309
; Line 568
	inc	DWORD PTR _v14$[ebp]
	cmp	DWORD PTR _v14$[ebp], 20000		; 00004e20H
	jle	SHORT $L85210
; Line 550
	jmp	SHORT $L85208
$L88309:
; Line 571
	mov	ecx, DWORD PTR _objtype$[ebp]
	push	esi
	mov	edx, edi
	call	@AddObject@12
; Line 572
	inc	DWORD PTR _v13$[ebp]
; Line 573
	cmp	DWORD PTR _v13$[ebp], ebx
	jl	$L85206
$L85208:
	pop	edi
	pop	esi
	pop	ebx
; Line 575
	leave
	ret	4
@InitRndLocObj5x5@12 ENDP
_TEXT	ENDS
PUBLIC	_ClrAllObjects
; Function compile flags: /Ogsy
;	COMDAT _ClrAllObjects
_TEXT	SEGMENT
_ClrAllObjects PROC NEAR				; COMDAT
; Line 578
	push	esi
	push	edi
; Line 582
	mov	eax, OFFSET FLAT:_object+20
	xor	esi, esi
$L85224:
; Line 584
	mov	DWORD PTR [eax-16], esi
; Line 585
	mov	DWORD PTR [eax-12], esi
; Line 586
	mov	DWORD PTR [eax], esi
; Line 587
	mov	DWORD PTR [eax+4], esi
; Line 588
	mov	DWORD PTR [eax+8], esi
; Line 589
	mov	DWORD PTR [eax+12], esi
; Line 590
	mov	DWORD PTR [eax+16], esi
; Line 591
	mov	DWORD PTR [eax+28], esi
; Line 592
	mov	DWORD PTR [eax+68], esi
; Line 593
	mov	DWORD PTR [eax+72], esi
; Line 594
	mov	DWORD PTR [eax+76], esi
; Line 595
	mov	DWORD PTR [eax+80], esi
; Line 596
	add	eax, 120				; 00000078H
; Line 597
	lea	ecx, DWORD PTR [eax-12]
	cmp	ecx, OFFSET FLAT:_object+15248
	jl	SHORT $L85224
; Line 599
	push	508					; 000001fcH
	push	esi
	push	OFFSET FLAT:_objectactive
	xor	edi, edi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 600
	mov	DWORD PTR _nobjects, esi
$L85229:
; Line 602
	mov	DWORD PTR _objectavail[edi*4], edi
; Line 603
	inc	edi
; Line 604
	cmp	edi, 127				; 0000007fH
	jl	SHORT $L85229
; Line 606
	xor	eax, eax
	mov	DWORD PTR _trapdir, esi
	inc	eax
	pop	edi
	mov	DWORD PTR _trapid, eax
; Line 607
	mov	DWORD PTR _leverid, eax
	pop	esi
; Line 608
	ret	0
_ClrAllObjects ENDP
_TEXT	ENDS
PUBLIC	_AddTortures
; Function compile flags: /Ogsy
;	COMDAT _AddTortures
_TEXT	SEGMENT
_v2$ = -4
_AddTortures PROC NEAR					; COMDAT
; Line 613
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 618
	xor	esi, esi
$L85236:
; Line 621
	lea	eax, DWORD PTR _dPiece[esi*4]
	push	4
	mov	DWORD PTR _v2$[ebp], eax
	pop	edi
$L85241:
; Line 623
	mov	eax, DWORD PTR _v2$[ebp]
	cmp	DWORD PTR [eax], 367			; 0000016fH
	jne	$L85244
; Line 624
	lea	eax, DWORD PTR [esi+1]
	lea	edx, DWORD PTR [edi-4]
	push	eax
	push	36					; 00000024H
	pop	ecx
	call	@AddObject@12
; Line 625
	lea	eax, DWORD PTR [esi-1]
	lea	ebx, DWORD PTR [edi-2]
	push	eax
	push	38					; 00000026H
	mov	edx, ebx
	pop	ecx
	call	@AddObject@12
; Line 626
	lea	eax, DWORD PTR [esi+3]
	lea	edx, DWORD PTR [edi-4]
	push	eax
	push	37					; 00000025H
	pop	ecx
	call	@AddObject@12
; Line 627
	lea	eax, DWORD PTR [esi-1]
	mov	edx, edi
	push	eax
	push	39					; 00000027H
	pop	ecx
	call	@AddObject@12
; Line 628
	lea	eax, DWORD PTR [esi+5]
	lea	edx, DWORD PTR [edi-4]
	push	eax
	push	40					; 00000028H
	pop	ecx
	call	@AddObject@12
; Line 629
	lea	eax, DWORD PTR [esi+3]
	lea	edx, DWORD PTR [edi-3]
	push	eax
	push	29					; 0000001dH
	pop	ecx
	call	@AddObject@12
; Line 630
	lea	eax, DWORD PTR [esi+5]
	mov	edx, edi
	push	eax
	push	30					; 0000001eH
	pop	ecx
	call	@AddObject@12
; Line 631
	push	esi
	push	31					; 0000001fH
	mov	edx, ebx
	pop	ecx
	call	@AddObject@12
; Line 632
	lea	eax, DWORD PTR [esi+2]
	lea	edx, DWORD PTR [edi-1]
	push	eax
	push	32					; 00000020H
	pop	ecx
	call	@AddObject@12
; Line 633
	lea	eax, DWORD PTR [esi+4]
	mov	edx, ebx
	push	eax
	push	33					; 00000021H
	pop	ecx
	call	@AddObject@12
; Line 634
	lea	eax, DWORD PTR [esi+1]
	mov	edx, ebx
	push	eax
	push	34					; 00000022H
	pop	ecx
	call	@AddObject@12
; Line 635
	lea	eax, DWORD PTR [esi+2]
	mov	edx, edi
	push	eax
	push	35					; 00000023H
	pop	ecx
	call	@AddObject@12
$L85244:
; Line 637
	add	DWORD PTR _v2$[ebp], 448		; 000001c0H
; Line 638
	inc	edi
; Line 639
	lea	eax, DWORD PTR [edi-4]
	cmp	eax, 112				; 00000070H
	jl	$L85241
; Line 640
	inc	esi
; Line 641
	cmp	esi, 112				; 00000070H
	jl	$L85236
	pop	edi
	pop	esi
	pop	ebx
; Line 642
	leave
	ret	0
_AddTortures ENDP
_TEXT	ENDS
PUBLIC	_AddCandles
EXTRN	_quests:BYTE
; Function compile flags: /Ogsy
;	COMDAT _AddCandles
_TEXT	SEGMENT
_AddCandles PROC NEAR					; COMDAT
; Line 651
	mov	eax, DWORD PTR _quests+320
	push	ebx
	push	esi
	mov	esi, DWORD PTR _quests+316
; Line 652
	lea	ebx, DWORD PTR [eax+1]
	push	edi
; Line 653
	push	ebx
	push	87					; 00000057H
	lea	edx, DWORD PTR [esi-2]
	pop	ecx
	mov	edi, eax
	call	@AddObject@12
; Line 654
	push	ebx
	push	87					; 00000057H
	lea	edx, DWORD PTR [esi+3]
	pop	ecx
	call	@AddObject@12
; Line 655
	inc	edi
; Line 656
	lea	edx, DWORD PTR [esi-1]
	inc	edi
	push	edi
	push	87					; 00000057H
	pop	ecx
	call	@AddObject@12
; Line 657
	push	edi
	push	87					; 00000057H
	lea	edx, DWORD PTR [esi+2]
	pop	ecx
	call	@AddObject@12
	pop	edi
	pop	esi
	pop	ebx
; Line 658
	ret	0
_AddCandles ENDP
_TEXT	ENDS
PUBLIC	@AddBookLever@36
PUBLIC	@SetObjMapRange@24
PUBLIC	@SetBookMsg@8
EXTRN	_setpc_x:DWORD
EXTRN	_setpc_y:DWORD
; Function compile flags: /Ogsy
;	COMDAT @AddBookLever@36
_TEXT	SEGMENT
_x1$ = 16
_y1$ = 20
_x2$ = 24
_y2$ = 28
_msg$ = 32
_v17$ = -12
_v18$ = -8
_v19$ = -4
@AddBookLever@36 PROC NEAR				; COMDAT
; _lx1$ = ecx
; _ly1$ = edx
; Line 661
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 674
	and	DWORD PTR _v18$[ebp], 0
	push	ebx
	push	esi
	push	edi
$L85277:
; Line 677
	push	80					; 00000050H
	mov	cl, 139					; 0000008bH
	pop	edx
	mov	DWORD PTR _v17$[ebp], 1
	call	@random@8
	mov	esi, eax
; Line 678
	mov	cl, 139					; 0000008bH
	push	80					; 00000050H
	add	esi, 16					; 00000010H
	pop	edx
	call	@random@8
	mov	edi, eax
; Line 679
	push	-2					; fffffffeH
	add	edi, 16					; 00000010H
	pop	ebx
$L85279:
; Line 681
	mov	DWORD PTR _v19$[ebp], -2		; fffffffeH
$L85282:
; Line 684
	mov	eax, DWORD PTR _v19$[ebp]
	lea	edx, DWORD PTR [ebx+edi]
	lea	ecx, DWORD PTR [eax+esi]
	call	@RndLocOk@8
	test	al, al
	jne	SHORT $L85285
; Line 685
	and	DWORD PTR _v17$[ebp], 0
$L85285:
; Line 686
	inc	DWORD PTR _v19$[ebp]
; Line 687
	cmp	DWORD PTR _v19$[ebp], 2
	jle	SHORT $L85282
; Line 688
	inc	ebx
; Line 689
	cmp	ebx, 2
	jle	SHORT $L85279
; Line 690
	cmp	DWORD PTR _v17$[ebp], 0
	jne	SHORT $L85278
; Line 692
	inc	DWORD PTR _v18$[ebp]
	cmp	DWORD PTR _v18$[ebp], 20000		; 00004e20H
	jle	SHORT $L85277
; Line 675
	jmp	$L85267
$L85278:
; Line 696
	push	8
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85288
; Line 697
	push	edi
	push	71					; 00000047H
	mov	edx, esi
	pop	ecx
	call	@AddObject@12
$L85288:
; Line 699
	push	11					; 0000000bH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85289
; Line 700
	push	edi
	push	88					; 00000058H
	mov	edx, esi
	pop	ecx
	call	@AddObject@12
$L85289:
; Line 702
	push	9
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85290
; Line 703
	mov	eax, DWORD PTR _setpc_x
	lea	esi, DWORD PTR [eax+eax+25]
; Line 704
	mov	eax, DWORD PTR _setpc_y
; Line 705
	mov	edx, esi
	lea	edi, DWORD PTR [eax+eax+40]
	push	edi
	push	72					; 00000048H
	pop	ecx
	call	@AddObject@12
$L85290:
; Line 707
	imul	esi, 112				; 00000070H
; Line 708
	push	DWORD PTR _leverid
	mov	edx, DWORD PTR _x1$[ebp]
	movsx	esi, BYTE PTR _dObject[esi+edi]
	push	DWORD PTR _y2$[ebp]
	dec	esi
	mov	ecx, esi
	push	DWORD PTR _x2$[ebp]
	push	DWORD PTR _y1$[ebp]
	call	@SetObjMapRange@24
; Line 709
	mov	edx, DWORD PTR _msg$[ebp]
	mov	ecx, esi
	call	@SetBookMsg@8
; Line 711
	mov	eax, esi
	inc	DWORD PTR _leverid
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _object[eax+36]
	inc	ecx
	mov	DWORD PTR _object[eax+108], ecx
$L85267:
	pop	edi
	pop	esi
	pop	ebx
; Line 712
	leave
	ret	28					; 0000001cH
@AddBookLever@36 ENDP
_TEXT	ENDS
PUBLIC	_InitRndBarrels
; Function compile flags: /Ogsy
;	COMDAT _InitRndBarrels
_TEXT	SEGMENT
_v8$ = -12
_v9$ = -8
_v10$ = -4
_InitRndBarrels PROC NEAR				; COMDAT
; Line 715
	sub	esp, 12					; 0000000cH
; Line 728
	and	DWORD PTR _v10$[esp+12], 0
	push	ebp
; Line 729
	push	5
	mov	cl, 143					; 0000008fH
	pop	edx
	call	@random@8
	mov	ebp, eax
	add	ebp, 3
; Line 730
	test	ebp, ebp
	jle	$L85306
	push	ebx
	push	esi
	push	edi
$L85307:
; Line 733
	push	80					; 00000050H
	mov	cl, 143					; 0000008fH
	pop	edx
	call	@random@8
; Line 734
	push	80					; 00000050H
	mov	esi, eax
	pop	edx
	mov	cl, 143					; 0000008fH
	add	esi, 16					; 00000010H
	call	@random@8
	mov	edi, eax
; Line 735
	mov	ecx, esi
	add	edi, 16					; 00000010H
	mov	edx, edi
	call	@RndLocOk@8
	test	al, al
	je	SHORT $L85307
; Line 736
	push	4
	mov	cl, 143					; 0000008fH
	pop	edx
	call	@random@8
; Line 737
	push	edi
	xor	edx, edx
	test	eax, eax
	push	58					; 0000003aH
	setne	dl
	pop	ecx
	sub	ecx, edx
	mov	edx, esi
	call	@AddObject@12
; Line 738
	mov	bl, 1
; Line 740
	mov	DWORD PTR _v9$[esp+28], 1
; Line 741
	xor	edx, edx
	jmp	SHORT $L88347
$L85311:
	test	bl, bl
	je	SHORT $L85312
; Line 742
	and	DWORD PTR _v8$[esp+28], 0
; Line 743
	xor	bl, bl
$L85313:
; Line 745
	cmp	DWORD PTR _v8$[esp+28], 3
	jge	SHORT $L85317
; Line 747
	push	8
	mov	cl, 143					; 0000008fH
	pop	edx
	call	@random@8
; Line 748
	shl	eax, 2
	add	esi, DWORD PTR _bxadd[eax]
; Line 749
	add	edi, DWORD PTR _byadd[eax]
; Line 750
	inc	DWORD PTR _v8$[esp+28]
; Line 751
	mov	edx, edi
	mov	ecx, esi
	call	@RndLocOk@8
	mov	bl, al
; Line 752
	test	bl, bl
	je	SHORT $L85313
; Line 754
	push	5
	mov	cl, 143					; 0000008fH
	pop	edx
	call	@random@8
; Line 755
	push	edi
	xor	edx, edx
	test	eax, eax
	push	58					; 0000003aH
	setne	dl
	pop	ecx
	sub	ecx, edx
	mov	edx, esi
	call	@AddObject@12
; Line 756
	inc	DWORD PTR _v9$[esp+28]
$L85317:
; Line 758
	mov	edx, DWORD PTR _v9$[esp+28]
	sar	edx, 1
$L88347:
	mov	cl, 143					; 0000008fH
	call	@random@8
	test	eax, eax
	je	SHORT $L85311
$L85312:
; Line 760
	inc	DWORD PTR _v10$[esp+28]
; Line 761
	cmp	DWORD PTR _v10$[esp+28], ebp
	jl	$L85307
	pop	edi
	pop	esi
	pop	ebx
$L85306:
	pop	ebp
; Line 763
	add	esp, 12					; 0000000cH
	ret	0
_InitRndBarrels ENDP
_TEXT	ENDS
PUBLIC	@AddL1Objs@16
; Function compile flags: /Ogsy
;	COMDAT @AddL1Objs@16
_TEXT	SEGMENT
_x1$ = -8
_x2$ = 8
_y2$ = 12
_y$ = -4
@AddL1Objs@16 PROC NEAR					; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 766
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 774
	cmp	edx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _x1$[ebp], ecx
	mov	DWORD PTR _y$[ebp], edx
	jge	$L85334
	push	ebx
	push	esi
	push	edi
$L85332:
; Line 775
	mov	ebx, DWORD PTR _x1$[ebp]
; Line 776
	cmp	ebx, DWORD PTR _x2$[ebp]
	jge	SHORT $L85340
; Line 777
	mov	eax, ebx
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _y$[ebp]
	lea	edi, DWORD PTR _dPiece[eax*4]
$L85338:
; Line 779
	mov	esi, DWORD PTR [edi]
; Line 780
	cmp	esi, 270				; 0000010eH
	jne	SHORT $L85341
; Line 781
	push	DWORD PTR _y$[ebp]
	mov	edx, ebx
	xor	ecx, ecx
	call	@AddObject@12
$L85341:
; Line 782
	cmp	esi, 44					; 0000002cH
	je	SHORT $L85343
	cmp	esi, 51					; 00000033H
	je	SHORT $L85343
	cmp	esi, 214				; 000000d6H
	jne	SHORT $L85342
$L85343:
; Line 783
	push	DWORD PTR _y$[ebp]
	xor	ecx, ecx
	mov	edx, ebx
	inc	ecx
	call	@AddObject@12
$L85342:
; Line 784
	cmp	esi, 46					; 0000002eH
	je	SHORT $L85345
	cmp	esi, 56					; 00000038H
	jne	SHORT $L85344
$L85345:
; Line 785
	push	DWORD PTR _y$[ebp]
	mov	edx, ebx
	push	2
	pop	ecx
	call	@AddObject@12
$L85344:
; Line 786
	inc	ebx
; Line 787
	add	edi, 448				; 000001c0H
; Line 788
	cmp	ebx, DWORD PTR _x2$[ebp]
	jl	SHORT $L85338
$L85340:
; Line 774
	inc	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _y2$[ebp]
	jl	SHORT $L85332
	pop	edi
	pop	esi
	pop	ebx
$L85334:
; Line 791
	leave
	ret	8
@AddL1Objs@16 ENDP
_TEXT	ENDS
PUBLIC	@AddL2Objs@16
; Function compile flags: /Ogsy
;	COMDAT @AddL2Objs@16
_TEXT	SEGMENT
_x1$ = -8
_x2$ = 8
_y2$ = 12
_y$ = -4
@AddL2Objs@16 PROC NEAR					; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 794
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 802
	cmp	edx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _x1$[ebp], ecx
	mov	DWORD PTR _y$[ebp], edx
	jge	SHORT $L85362
	push	ebx
	push	esi
	push	edi
$L85360:
; Line 803
	mov	ebx, DWORD PTR _x1$[ebp]
; Line 804
	cmp	ebx, DWORD PTR _x2$[ebp]
	jge	SHORT $L85368
; Line 805
	mov	eax, ebx
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _y$[ebp]
	lea	esi, DWORD PTR _dPiece[eax*4]
$L85366:
; Line 807
	mov	edi, DWORD PTR [esi]
; Line 808
	cmp	edi, 13					; 0000000dH
	je	SHORT $L85370
	cmp	edi, 541				; 0000021dH
	jne	SHORT $L85369
$L85370:
; Line 809
	push	DWORD PTR _y$[ebp]
	mov	edx, ebx
	push	42					; 0000002aH
	pop	ecx
	call	@AddObject@12
$L85369:
; Line 810
	cmp	edi, 17					; 00000011H
	je	SHORT $L85372
	cmp	edi, 542				; 0000021eH
	jne	SHORT $L85371
$L85372:
; Line 811
	push	DWORD PTR _y$[ebp]
	mov	edx, ebx
	push	43					; 0000002bH
	pop	ecx
	call	@AddObject@12
$L85371:
; Line 812
	inc	ebx
; Line 813
	add	esi, 448				; 000001c0H
; Line 814
	cmp	ebx, DWORD PTR _x2$[ebp]
	jl	SHORT $L85366
$L85368:
; Line 802
	inc	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _y2$[ebp]
	jl	SHORT $L85360
	pop	edi
	pop	esi
	pop	ebx
$L85362:
; Line 817
	leave
	ret	8
@AddL2Objs@16 ENDP
_TEXT	ENDS
PUBLIC	@AddL3Objs@16
; Function compile flags: /Ogsy
;	COMDAT @AddL3Objs@16
_TEXT	SEGMENT
_x1$ = -8
_x2$ = 8
_y2$ = 12
_y$ = -4
@AddL3Objs@16 PROC NEAR					; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 820
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 828
	cmp	edx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _x1$[ebp], ecx
	mov	DWORD PTR _y$[ebp], edx
	jge	SHORT $L85389
	push	ebx
	push	esi
	push	edi
$L85387:
; Line 829
	mov	edi, DWORD PTR _x1$[ebp]
; Line 830
	cmp	edi, DWORD PTR _x2$[ebp]
	jge	SHORT $L85395
; Line 831
	mov	eax, edi
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _y$[ebp]
	lea	esi, DWORD PTR _dPiece[eax*4]
$L85393:
; Line 833
	mov	ebx, DWORD PTR [esi]
; Line 834
	cmp	ebx, 531				; 00000213H
	jne	SHORT $L85396
; Line 835
	push	DWORD PTR _y$[ebp]
	mov	edx, edi
	push	74					; 0000004aH
	pop	ecx
	call	@AddObject@12
$L85396:
; Line 836
	cmp	ebx, 534				; 00000216H
	jne	SHORT $L85397
; Line 837
	push	DWORD PTR _y$[ebp]
	mov	edx, edi
	push	75					; 0000004bH
	pop	ecx
	call	@AddObject@12
$L85397:
; Line 838
	inc	edi
; Line 839
	add	esi, 448				; 000001c0H
; Line 840
	cmp	edi, DWORD PTR _x2$[ebp]
	jl	SHORT $L85393
$L85395:
; Line 828
	inc	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _y2$[ebp]
	jl	SHORT $L85387
	pop	edi
	pop	esi
	pop	ebx
$L85389:
; Line 843
	leave
	ret	8
@AddL3Objs@16 ENDP
_TEXT	ENDS
PUBLIC	@WallTrapLocOk@8
; Function compile flags: /Ogsy
;	COMDAT @WallTrapLocOk@8
_TEXT	SEGMENT
@WallTrapLocOk@8 PROC NEAR				; COMDAT
; _xp$ = ecx
; _yp$ = edx
; Line 847
	imul	ecx, 112				; 00000070H
	mov	al, BYTE PTR _dFlags[ecx+edx]
	not	eax
	sar	eax, 3
	and	eax, 1
; Line 848
	ret	0
@WallTrapLocOk@8 ENDP
_TEXT	ENDS
PUBLIC	_AddL2Torches
; Function compile flags: /Ogsy
;	COMDAT _AddL2Torches
_TEXT	SEGMENT
_v5$ = -16
_v7$ = -8
_AddL2Torches PROC NEAR					; COMDAT
; Line 851
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 897
	or	DWORD PTR -4+[ebp], -1
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _v7$[ebp], OFFSET FLAT:_dPiece
$L85410:
	mov	eax, DWORD PTR -4+[ebp]
	xor	esi, esi
	lea	edi, DWORD PTR _dObject[eax]
	mov	eax, DWORD PTR _v7$[ebp]
	mov	DWORD PTR _v5$[ebp], eax
$L85413:
	mov	eax, DWORD PTR -4+[ebp]
	mov	ecx, esi
	lea	ebx, DWORD PTR [eax+1]
	mov	edx, ebx
	call	@WallTrapLocOk@8
	test	al, al
	je	$LABEL_18$85417
	mov	eax, DWORD PTR _v5$[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	eax, 1
	mov	DWORD PTR -12+[ebp], eax
	jne	SHORT $L85418
	push	3
	mov	cl, 145					; 00000091H
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $LABEL_18$85417
	push	ebx
	push	46					; 0000002eH
	mov	edx, esi
	pop	ecx
	call	@AddObject@12
$L85418:
; Line 876
	cmp	DWORD PTR -12+[ebp], 5
	jne	SHORT $L85420
; Line 877
	push	3
	mov	cl, 145					; 00000091H
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $LABEL_18$85417
; Line 879
	push	ebx
	push	47					; 0000002fH
	mov	edx, esi
	pop	ecx
	call	@AddObject@12
$L85420:
; Line 881
	cmp	DWORD PTR -12+[ebp], 37			; 00000025H
	jne	SHORT $L85422
; Line 882
	push	10					; 0000000aH
	mov	cl, 145					; 00000091H
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $LABEL_18$85417
	cmp	BYTE PTR [edi-111], al
	jne	SHORT $LABEL_18$85417
; Line 884
	push	ebx
	lea	edx, DWORD PTR [esi-1]
	push	44					; 0000002cH
	jmp	SHORT $L88380
$L85422:
; Line 886
	cmp	DWORD PTR -12+[ebp], 41			; 00000029H
	jne	SHORT $LABEL_18$85417
; Line 887
	push	10					; 0000000aH
	mov	cl, 145					; 00000091H
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $LABEL_18$85417
	cmp	BYTE PTR [edi], al
	jne	SHORT $LABEL_18$85417
; Line 888
	push	DWORD PTR -4+[ebp]
	mov	edx, esi
	push	45					; 0000002dH
$L88380:
	pop	ecx
	call	@AddObject@12
$LABEL_18$85417:
; Line 891
	add	DWORD PTR _v5$[ebp], 448		; 000001c0H
; Line 892
	inc	esi
; Line 893
	add	edi, 112				; 00000070H
; Line 894
	cmp	esi, 112				; 00000070H
	jl	$L85413
; Line 895
	add	DWORD PTR _v7$[ebp], 4
; Line 897
	inc	DWORD PTR -4+[ebp]
	cmp	DWORD PTR _v7$[ebp], OFFSET FLAT:_dPiece+448
	jl	$L85410
	pop	edi
	pop	esi
	pop	ebx
; Line 898
	leave
	ret	0
_AddL2Torches ENDP
_TEXT	ENDS
PUBLIC	@TorchLocOK@8
EXTRN	_nTrapTable:BYTE
; Function compile flags: /Ogsy
;	COMDAT @TorchLocOK@8
_TEXT	SEGMENT
@TorchLocOK@8 PROC NEAR					; COMDAT
; _xp$ = ecx
; _yp$ = edx
; Line 902
	imul	ecx, 112				; 00000070H
	test	BYTE PTR _dFlags[ecx+edx], 8
	je	SHORT $L85436
; Line 903
	xor	eax, eax
; Line 906
	ret	0
$L85436:
; Line 905
	add	ecx, edx
	mov	eax, DWORD PTR _dPiece[ecx*4]
	xor	ecx, ecx
	cmp	BYTE PTR _nTrapTable[eax], cl
	setne	cl
	mov	eax, ecx
; Line 906
	ret	0
@TorchLocOK@8 ENDP
_TEXT	ENDS
PUBLIC	_AddObjTraps
; Function compile flags: /Ogsy
;	COMDAT _AddObjTraps
_TEXT	SEGMENT
_v8$ = -12
_v14$ = -28
_v15$ = -8
_x$ = -4
_AddObjTraps PROC NEAR					; COMDAT
; Line 909
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 929
	mov	al, BYTE PTR _currlevel
	cmp	al, 1
	jne	SHORT $L85454
; Line 930
	mov	DWORD PTR _v15$[ebp], 10		; 0000000aH
$L85454:
; Line 931
	cmp	al, 2
	jb	SHORT $L85455
; Line 932
	mov	DWORD PTR _v15$[ebp], 15		; 0000000fH
$L85455:
; Line 933
	cmp	al, 5
	jb	SHORT $L85456
; Line 934
	mov	DWORD PTR _v15$[ebp], 20		; 00000014H
$L85456:
; Line 935
	cmp	al, 7
	jb	SHORT $L85457
; Line 936
	mov	DWORD PTR _v15$[ebp], 25		; 00000019H
$L85457:
; Line 938
	mov	eax, OFFSET FLAT:_dPiece
	push	ebx
	mov	ecx, eax
	mov	ebx, 448				; 000001c0H
	push	esi
	sub	ecx, ebx
	push	edi
	xor	edi, edi
	lea	edx, DWORD PTR [ecx+4]
	sub	eax, 4
	mov	DWORD PTR -20+[ebp], edx
	mov	DWORD PTR -36+[ebp], eax
$L85458:
; Line 941
	and	DWORD PTR _x$[ebp], 0
	and	DWORD PTR -16+[ebp], 0
; Line 943
	lea	esi, DWORD PTR _dObject[edi]
; Line 944
	mov	DWORD PTR _v14$[ebp], ecx
	mov	DWORD PTR -24+[ebp], eax
	lea	ecx, DWORD PTR [esi+112]
	mov	DWORD PTR -32+[ebp], ecx
$L85463:
; Line 947
	cmp	BYTE PTR [esi], 0
	jle	$LABEL_28$85481
	push	100					; 00000064H
	mov	cl, 144					; 00000090H
	pop	edx
	call	@random@8
	cmp	eax, DWORD PTR _v15$[ebp]
	jge	$LABEL_28$85481
; Line 948
	mov	al, BYTE PTR [esi]
	dec	al
	movsx	esi, al
; Line 949
	imul	esi, 120				; 00000078H
	mov	DWORD PTR -12+[ebp], esi
	mov	eax, DWORD PTR _object[esi]
	imul	eax, 44					; 0000002cH
	cmp	DWORD PTR _AllObjects[eax+40], 0
	je	$LABEL_28$85481
; Line 950
	push	2
	mov	cl, 144					; 00000090H
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85469
; Line 952
	mov	eax, DWORD PTR -24+[ebp]
; Line 988
	lea	edx, DWORD PTR [edi-1]
	mov	DWORD PTR _v8$[ebp], edx
	mov	ecx, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[ecx], 0
	jne	SHORT $L85472
$L85470:
; Line 952
	sub	eax, 4
; Line 953
	dec	edx
	mov	ecx, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[ecx], 0
	je	SHORT $L85470
	mov	DWORD PTR _v8$[ebp], edx
$L85472:
; Line 955
	mov	ecx, DWORD PTR _x$[ebp]
	call	@TorchLocOK@8
	test	eax, eax
	je	$LABEL_28$85481
	mov	eax, edi
	sub	eax, DWORD PTR _v8$[ebp]
	cmp	eax, 1
	jle	$LABEL_28$85481
; Line 956
	push	DWORD PTR _v8$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	push	54					; 00000036H
	pop	ecx
	call	@AddObject@12
; Line 957
	mov	eax, DWORD PTR -16+[ebp]
	mov	ecx, DWORD PTR _v8$[ebp]
	mov	al, BYTE PTR _dObject[eax+ecx]
; Line 958
	jmp	SHORT $LABEL_27$85474
$L85469:
; Line 961
	mov	eax, DWORD PTR _x$[ebp]
	lea	esi, DWORD PTR [eax-1]
; Line 962
	mov	eax, DWORD PTR _v14$[ebp]
	jmp	SHORT $L88396
$L85476:
; Line 963
	dec	esi
	sub	eax, ebx
$L88396:
	mov	ecx, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[ecx], 0
	je	SHORT $L85476
; Line 965
	mov	edx, edi
	mov	ecx, esi
	call	@TorchLocOK@8
	test	eax, eax
	je	SHORT $LABEL_28$85481
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, esi
	cmp	eax, 1
	jle	SHORT $LABEL_28$85481
; Line 966
	push	edi
	push	53					; 00000035H
	mov	edx, esi
	pop	ecx
	call	@AddObject@12
; Line 967
	imul	esi, 112				; 00000070H
	mov	al, BYTE PTR _dObject[esi+edi]
	mov	esi, DWORD PTR -12+[ebp]
$LABEL_27$85474:
; Line 969
	dec	al
; Line 971
	mov	ecx, DWORD PTR _x$[ebp]
	movsx	eax, al
	imul	eax, 120				; 00000078H
	mov	DWORD PTR _object[eax+92], edi
	mov	DWORD PTR _object[eax+88], ecx
; Line 972
	mov	DWORD PTR _object[esi+72], 1
$LABEL_28$85481:
; Line 980
	add	DWORD PTR -16+[ebp], 112		; 00000070H
; Line 982
	mov	esi, DWORD PTR -32+[ebp]
	inc	DWORD PTR _x$[ebp]
	add	DWORD PTR -24+[ebp], ebx
	add	DWORD PTR _v14$[ebp], ebx
; Line 983
	add	DWORD PTR -32+[ebp], 112		; 00000070H
; Line 984
	cmp	DWORD PTR -16+[ebp], 12544		; 00003100H
	jl	$L85463
; Line 985
	mov	eax, DWORD PTR -36+[ebp]
; Line 986
	mov	ecx, DWORD PTR -20+[ebp]
; Line 987
	add	DWORD PTR -20+[ebp], 4
	inc	edi
	add	eax, 4
; Line 988
	cmp	DWORD PTR -20+[ebp], OFFSET FLAT:_dPiece+4
	mov	DWORD PTR -36+[ebp], eax
	jl	$L85458
	pop	edi
	pop	esi
	pop	ebx
; Line 989
	leave
	ret	0
_AddObjTraps ENDP
_TEXT	ENDS
PUBLIC	_AddChestTraps
; Function compile flags: /Ogsy
;	COMDAT _AddChestTraps
_TEXT	SEGMENT
_v0$ = -4
_AddChestTraps PROC NEAR				; COMDAT
; Line 992
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1001
	and	DWORD PTR _v0$[ebp], 0
	push	ebx
	push	esi
	push	edi
$L85493:
; Line 1003
	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR -8+[ebp], 112			; 00000070H
	lea	ebx, DWORD PTR _dObject[eax]
$L85497:
; Line 1006
	mov	al, BYTE PTR [ebx]
	test	al, al
	jbe	SHORT $L85502
; Line 1007
	dec	al
	movsx	esi, al
; Line 1008
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi]
; Line 1009
	cmp	eax, 5
	jl	SHORT $L85502
	cmp	eax, 7
	jg	SHORT $L85502
	lea	edi, DWORD PTR _object[esi+72]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L85502
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 10					; 0000000aH
	jge	SHORT $L85502
; Line 1010
	add	DWORD PTR _object[esi], 63		; 0000003fH
; Line 1014
	xor	cl, cl
	cmp	BYTE PTR _leveltype, 2
	mov	DWORD PTR [edi], 1
	jne	SHORT $L85503
	push	2
; Line 1015
	jmp	SHORT $L88404
$L85503:
; Line 1016
	push	3
$L88404:
	pop	edx
	call	@random@8
; Line 1017
	mov	DWORD PTR _object[esi+100], eax
$L85502:
; Line 1020
	add	ebx, 112				; 00000070H
; Line 1022
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85497
; Line 1023
	inc	DWORD PTR _v0$[ebp]
; Line 1024
	cmp	DWORD PTR _v0$[ebp], 112		; 00000070H
	jl	$L85493
	pop	edi
	pop	esi
	pop	ebx
; Line 1025
	leave
	ret	0
_AddChestTraps ENDP
_TEXT	ENDS
PUBLIC	@LoadMapObjects@32
EXTRN	@ObjIndex@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @LoadMapObjects@32
_TEXT	SEGMENT
_startx$ = -12
_starty$ = 8
_x1$ = 12
_y1$ = 16
_w$ = 20
_h$ = 24
_leveridx$ = 28
_v15$ = -4
_v18$ = -20
_v19$ = -16
_y$ = 8
@LoadMapObjects@32 PROC NEAR				; COMDAT
; _pMap$ = ecx
; _startx$ = edx
; Line 1028
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _startx$[ebp], edx
; Line 1046
	mov	DWORD PTR _InitObjFlag, 1
; Line 1047
	movzx	edx, BYTE PTR [ecx]
; Line 1048
	movzx	eax, BYTE PTR [ecx+2]
	push	ebx
	push	esi
	push	edi
; Line 1053
	lea	edi, DWORD PTR [edx+edx]
	lea	esi, DWORD PTR [eax+eax]
; Line 1056
	mov	ebx, edi
	imul	ebx, esi
	imul	eax, edx
	lea	eax, DWORD PTR [eax+ebx*2+2]
	mov	DWORD PTR _v19$[ebp], edi
; Line 1057
	test	esi, esi
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _v18$[ebp], esi
	mov	DWORD PTR _v15$[ebp], eax
	jle	SHORT $L85540
; Line 1058
	mov	ecx, DWORD PTR _starty$[ebp]
	push	-16					; fffffff0H
	pop	eax
	sub	eax, ecx
; Line 1059
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _y$[ebp], ecx
	add	ecx, eax
	mov	DWORD PTR -8+[ebp], ecx
$L85538:
; Line 1061
	xor	ebx, ebx
	test	edi, edi
	jle	SHORT $L85543
$L85541:
; Line 1062
	mov	eax, DWORD PTR _v15$[ebp]
	mov	al, BYTE PTR [eax]
	test	al, al
	je	SHORT $L85544
; Line 1063
	mov	ecx, DWORD PTR _startx$[ebp]
	push	DWORD PTR _y$[ebp]
	movzx	eax, al
	lea	esi, DWORD PTR [ebx+ecx+16]
	mov	ecx, DWORD PTR _ObjTypeConv[eax*4]
	mov	edx, esi
	call	@AddObject@12
; Line 1064
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, esi
	call	@ObjIndex@8
; Line 1065
	mov	ecx, DWORD PTR _h$[ebp]
	mov	esi, DWORD PTR _y1$[ebp]
	push	DWORD PTR _leveridx$[ebp]
	mov	edx, DWORD PTR _x1$[ebp]
	add	ecx, esi
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, edx
	push	ecx
	push	esi
	mov	ecx, eax
	call	@SetObjMapRange@24
; Line 1066
	mov	edi, DWORD PTR _v19$[ebp]
; Line 1067
	mov	esi, DWORD PTR _v18$[ebp]
$L85544:
; Line 1069
	add	DWORD PTR _v15$[ebp], 2
	inc	ebx
	cmp	ebx, edi
	jl	SHORT $L85541
$L85543:
; Line 1071
	inc	DWORD PTR _y$[ebp]
	inc	DWORD PTR -8+[ebp]
; Line 1072
	cmp	DWORD PTR -8+[ebp], esi
	jl	SHORT $L85538
$L85540:
; Line 1074
	and	DWORD PTR _InitObjFlag, 0
	pop	edi
	pop	esi
	pop	ebx
; Line 1075
	leave
	ret	24					; 00000018H
@LoadMapObjects@32 ENDP
_TEXT	ENDS
PUBLIC	@LoadMapObjs@12
; Function compile flags: /Ogsy
;	COMDAT @LoadMapObjs@12
_TEXT	SEGMENT
_startx$ = -8
_starty$ = 8
_v13$ = -4
_y$ = 8
@LoadMapObjs@12 PROC NEAR				; COMDAT
; _pMap$ = ecx
; _startx$ = edx
; Line 1078
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1093
	mov	DWORD PTR _InitObjFlag, 1
	mov	DWORD PTR _startx$[ebp], edx
; Line 1095
	movzx	eax, BYTE PTR [ecx]
	movzx	edx, BYTE PTR [ecx+2]
	push	ebx
	push	esi
	push	edi
; Line 1100
	lea	edi, DWORD PTR [eax+eax]
	lea	esi, DWORD PTR [edx+edx]
; Line 1101
	mov	ebx, edi
	imul	ebx, esi
	imul	eax, edx
	lea	eax, DWORD PTR [eax+ebx*2+2]
; Line 1102
	test	esi, esi
	lea	ebx, DWORD PTR [ecx+eax*2]
	jle	SHORT $L85567
; Line 1104
	mov	eax, DWORD PTR _starty$[ebp]
	mov	DWORD PTR _v13$[ebp], esi
	add	eax, 16					; 00000010H
	mov	DWORD PTR _y$[ebp], eax
$L85565:
; Line 1106
	xor	esi, esi
	test	edi, edi
	jle	SHORT $L85570
$L85568:
; Line 1107
	mov	al, BYTE PTR [ebx]
	test	al, al
	je	SHORT $L85571
; Line 1108
	mov	ecx, DWORD PTR _startx$[ebp]
	push	DWORD PTR _y$[ebp]
	movzx	eax, al
	lea	edx, DWORD PTR [esi+ecx+16]
	mov	ecx, DWORD PTR _ObjTypeConv[eax*4]
	call	@AddObject@12
$L85571:
; Line 1109
	inc	ebx
	inc	ebx
	inc	esi
	cmp	esi, edi
	jl	SHORT $L85568
$L85570:
; Line 1111
	inc	DWORD PTR _y$[ebp]
; Line 1112
	dec	DWORD PTR _v13$[ebp]
; Line 1113
	jne	SHORT $L85565
$L85567:
; Line 1115
	and	DWORD PTR _InitObjFlag, 0
	pop	edi
	pop	esi
	pop	ebx
; Line 1116
	leave
	ret	4
@LoadMapObjs@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@	; `string'
PUBLIC	_AddDiabObjs
EXTRN	_diabquad1x:DWORD
EXTRN	_diabquad1y:DWORD
EXTRN	_diabquad3x:DWORD
EXTRN	_diabquad3y:DWORD
EXTRN	_diabquad2x:DWORD
EXTRN	_diabquad2y:DWORD
EXTRN	_diabquad4x:DWORD
EXTRN	_diabquad4y:DWORD
;	COMDAT ??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@ DB 'Levels\L4Data\diab1.DU'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@ DB 'Levels\L4Data\diab2a.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@ DB 'Levels\L4Data\diab3a.'
	DB	'DUN', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _AddDiabObjs
_TEXT	SEGMENT
_AddDiabObjs PROC NEAR					; COMDAT
; Line 1119
	push	esi
; Line 1124
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1125
	push	1
	push	12					; 0000000cH
	push	11					; 0000000bH
	mov	esi, eax
	push	DWORD PTR _diabquad2y
	mov	eax, DWORD PTR _diabquad1y
	add	eax, eax
	mov	ecx, esi
	push	DWORD PTR _diabquad2x
	push	eax
	mov	eax, DWORD PTR _diabquad1x
	lea	edx, DWORD PTR [eax+eax]
	call	@LoadMapObjects@32
; Line 1126
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 1127
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1128
	push	2
	push	11					; 0000000bH
	push	11					; 0000000bH
	mov	esi, eax
	push	DWORD PTR _diabquad3y
	mov	eax, DWORD PTR _diabquad2y
	add	eax, eax
	mov	ecx, esi
	push	DWORD PTR _diabquad3x
	push	eax
	mov	eax, DWORD PTR _diabquad2x
	lea	edx, DWORD PTR [eax+eax]
	call	@LoadMapObjects@32
; Line 1129
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 1130
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1131
	push	3
	push	9
	push	9
	mov	esi, eax
	push	DWORD PTR _diabquad4y
	mov	eax, DWORD PTR _diabquad3y
	add	eax, eax
	mov	ecx, esi
	push	DWORD PTR _diabquad4x
	push	eax
	mov	eax, DWORD PTR _diabquad3x
	lea	edx, DWORD PTR [eax+eax]
	call	@LoadMapObjects@32
; Line 1132
	mov	ecx, esi
	pop	esi
	jmp	@mem_free_dbg@4
_AddDiabObjs ENDP
_TEXT	ENDS
PUBLIC	_AddStoryBooks
; Function compile flags: /Ogsy
;	COMDAT _AddStoryBooks
_TEXT	SEGMENT
_y$ = -12
_v6$ = -8
_v7$ = -4
_AddStoryBooks PROC NEAR				; COMDAT
; Line 1138
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1148
	and	DWORD PTR _v6$[ebp], 0
	push	ebx
	push	esi
	push	edi
$L85589:
; Line 1151
	push	80					; 00000050H
	mov	cl, 139					; 0000008bH
	pop	edx
	mov	DWORD PTR _y$[ebp], 1
	call	@random@8
; Line 1152
	push	80					; 00000050H
	mov	esi, eax
	pop	edx
	mov	cl, 139					; 0000008bH
	add	esi, 16					; 00000010H
	call	@random@8
	mov	edi, eax
; Line 1153
	push	-2					; fffffffeH
	add	edi, 16					; 00000010H
	pop	ebx
$L85591:
; Line 1155
	mov	DWORD PTR _v7$[ebp], -3			; fffffffdH
$L85594:
; Line 1158
	mov	eax, DWORD PTR _v7$[ebp]
	lea	edx, DWORD PTR [ebx+edi]
	lea	ecx, DWORD PTR [eax+esi]
	call	@RndLocOk@8
	test	al, al
	jne	SHORT $L85597
; Line 1159
	and	DWORD PTR _y$[ebp], 0
$L85597:
; Line 1160
	inc	DWORD PTR _v7$[ebp]
; Line 1161
	cmp	DWORD PTR _v7$[ebp], 3
	jle	SHORT $L85594
; Line 1162
	inc	ebx
; Line 1163
	cmp	ebx, 2
	jle	SHORT $L85591
; Line 1164
	cmp	DWORD PTR _y$[ebp], 0
	jne	SHORT $L85590
; Line 1166
	inc	DWORD PTR _v6$[ebp]
	cmp	DWORD PTR _v6$[ebp], 20000		; 00004e20H
	jle	SHORT $L85589
; Line 1149
	jmp	SHORT $L85579
$L85590:
; Line 1169
	push	edi
	push	86					; 00000056H
	mov	edx, esi
	pop	ecx
	call	@AddObject@12
; Line 1170
	lea	eax, DWORD PTR [edi+1]
	lea	edx, DWORD PTR [esi-2]
	push	eax
	push	87					; 00000057H
	pop	ebx
	mov	DWORD PTR -12+[ebp], eax
	mov	ecx, ebx
	call	@AddObject@12
; Line 1171
	push	edi
	lea	edx, DWORD PTR [esi-2]
	mov	ecx, ebx
	call	@AddObject@12
; Line 1172
	lea	eax, DWORD PTR [edi-1]
	lea	edx, DWORD PTR [esi-1]
	push	eax
	mov	ecx, ebx
	call	@AddObject@12
; Line 1173
	lea	eax, DWORD PTR [edi-1]
	lea	edx, DWORD PTR [esi+1]
	push	eax
	mov	ecx, ebx
	call	@AddObject@12
; Line 1174
	add	esi, 2
; Line 1175
	push	edi
	mov	edx, esi
	mov	ecx, ebx
	call	@AddObject@12
; Line 1176
	push	DWORD PTR -12+[ebp]
	mov	edx, esi
	mov	ecx, ebx
	call	@AddObject@12
$L85579:
	pop	edi
	pop	esi
	pop	ebx
; Line 1177
	leave
	ret	0
_AddStoryBooks ENDP
_TEXT	ENDS
PUBLIC	@AddHookedBodies@4
EXTRN	@SkipThemeRoom@8:NEAR
EXTRN	_dungeon:BYTE
; Function compile flags: /Ogsy
;	COMDAT @AddHookedBodies@4
_TEXT	SEGMENT
_freq$ = -12
_x$ = -8
_y$ = -4
@AddHookedBodies@4 PROC NEAR				; COMDAT
; _freq$ = ecx
; Line 1180
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1194
	and	DWORD PTR _y$[ebp], 0
	push	ebx
	push	esi
	push	edi
; Line 1196
	push	16					; 00000010H
	mov	DWORD PTR _freq$[ebp], ecx
	pop	ebx
$L85614:
; Line 1199
	mov	eax, DWORD PTR _y$[ebp]
	and	DWORD PTR _x$[ebp], 0
; Line 1200
	push	17					; 00000011H
	lea	esi, DWORD PTR _dungeon[eax]
	pop	edi
$L85618:
; Line 1202
	mov	al, BYTE PTR [esi]
	cmp	al, 1
	je	SHORT $L85622
	cmp	al, 2
	jne	$LABEL_22$85630
$L85622:
; Line 1203
	mov	edx, DWORD PTR _freq$[ebp]
	xor	cl, cl
	call	@random@8
	test	eax, eax
	jne	SHORT $LABEL_22$85630
; Line 1205
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	call	@SkipThemeRoom@8
	test	al, al
	je	SHORT $LABEL_22$85630
; Line 1206
	mov	al, BYTE PTR [esi]
	cmp	al, 1
	jne	SHORT $L85626
	cmp	BYTE PTR [esi+40], 6
	jne	SHORT $L85626
; Line 1221
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 1222
	test	eax, eax
	je	SHORT $L85633
; Line 1223
	dec	eax
; Line 1224
	test	eax, eax
	je	SHORT $L85634
; Line 1225
	cmp	eax, 1
	jne	SHORT $LABEL_22$85630
; Line 1226
	push	ebx
	push	40					; 00000028H
; Line 1227
	jmp	SHORT $L88445
$L85634:
; Line 1228
	push	ebx
	push	37					; 00000025H
; Line 1230
	jmp	SHORT $L88445
$L85633:
; Line 1231
	push	ebx
	push	36					; 00000024H
$L88445:
	mov	edx, edi
	pop	ecx
	jmp	SHORT $L88442
$L85626:
; Line 1207
	push	2
	pop	edx
	cmp	al, dl
	jne	SHORT $LABEL_22$85630
	cmp	BYTE PTR [esi+1], 6
	jne	SHORT $LABEL_22$85630
; Line 1208
	xor	cl, cl
	call	@random@8
; Line 1209
	test	eax, eax
	je	SHORT $L85628
; Line 1210
	cmp	eax, 1
	jne	SHORT $LABEL_22$85630
; Line 1213
	push	39					; 00000027H
; Line 1214
	jmp	SHORT $L88443
$L85628:
; Line 1216
	push	38					; 00000026H
$L88443:
	pop	ecx
; Line 1218
	lea	edx, DWORD PTR [edi-1]
	push	ebx
$L88442:
	call	@AddObject@12
$LABEL_22$85630:
; Line 1238
	inc	DWORD PTR _x$[ebp]
; Line 1239
	inc	edi
	inc	edi
; Line 1240
	add	esi, 40					; 00000028H
; Line 1241
	cmp	edi, 97					; 00000061H
	jl	$L85618
; Line 1242
	inc	DWORD PTR _y$[ebp]
; Line 1243
	inc	ebx
	inc	ebx
; Line 1244
	cmp	ebx, 96					; 00000060H
	jl	$L85614
	pop	edi
	pop	esi
	pop	ebx
; Line 1245
	leave
	ret	0
@AddHookedBodies@4 ENDP
_TEXT	ENDS
PUBLIC	_AddL4Goodies
; Function compile flags: /Ogsy
;	COMDAT _AddL4Goodies
_TEXT	SEGMENT
_AddL4Goodies PROC NEAR					; COMDAT
; Line 1248
	push	esi
	push	edi
; Line 1249
	push	6
	pop	esi
	mov	ecx, esi
	call	@AddHookedBodies@4
; Line 1250
	push	29					; 0000001dH
	push	2
	pop	edi
	mov	edx, esi
	mov	ecx, edi
	call	@InitRndLocObj@12
; Line 1251
	push	30					; 0000001eH
	mov	edx, esi
	mov	ecx, edi
	call	@InitRndLocObj@12
; Line 1252
	push	31					; 0000001fH
	mov	edx, esi
	mov	ecx, edi
	call	@InitRndLocObj@12
; Line 1253
	push	32					; 00000020H
	mov	edx, esi
	mov	ecx, edi
	call	@InitRndLocObj@12
; Line 1254
	push	33					; 00000021H
	mov	edx, esi
	mov	ecx, edi
	call	@InitRndLocObj@12
; Line 1255
	push	34					; 00000022H
	mov	edx, esi
	mov	ecx, edi
	call	@InitRndLocObj@12
; Line 1256
	push	35					; 00000023H
	mov	edx, esi
	mov	ecx, edi
	call	@InitRndLocObj@12
; Line 1257
	push	67					; 00000043H
	mov	edx, esi
	mov	ecx, edi
	call	@InitRndLocObj@12
; Line 1258
	push	80					; 00000050H
	push	3
	xor	ecx, ecx
	pop	edx
	inc	ecx
	call	@InitRndLocObj@12
	pop	edi
	pop	esi
; Line 1259
	ret	0
_AddL4Goodies ENDP
_TEXT	ENDS
PUBLIC	_AddLazStand
; Function compile flags: /Ogsy
;	COMDAT _AddLazStand
_TEXT	SEGMENT
_v5$ = -12
_v6$ = -8
_v7$ = -4
_AddLazStand PROC NEAR					; COMDAT
; Line 1262
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1272
	and	DWORD PTR _v6$[ebp], 0
	push	ebx
	push	esi
	push	edi
$L85649:
; Line 1275
	push	80					; 00000050H
	mov	cl, 139					; 0000008bH
	pop	edx
	mov	DWORD PTR _v5$[ebp], 1
	call	@random@8
; Line 1276
	push	80					; 00000050H
	mov	edi, eax
	pop	edx
	mov	cl, 139					; 0000008bH
	add	edi, 16					; 00000010H
	call	@random@8
	mov	esi, eax
; Line 1277
	push	-3					; fffffffdH
	add	esi, 16					; 00000010H
	pop	ebx
$L85651:
; Line 1279
	mov	DWORD PTR _v7$[ebp], -2			; fffffffeH
$L85654:
; Line 1282
	mov	eax, DWORD PTR _v7$[ebp]
	lea	edx, DWORD PTR [ebx+esi]
	lea	ecx, DWORD PTR [eax+edi]
	call	@RndLocOk@8
	test	al, al
	jne	SHORT $L85657
; Line 1283
	and	DWORD PTR _v5$[ebp], 0
$L85657:
; Line 1284
	inc	DWORD PTR _v7$[ebp]
; Line 1285
	cmp	DWORD PTR _v7$[ebp], 3
	jle	SHORT $L85654
; Line 1286
	inc	ebx
; Line 1287
	cmp	ebx, 3
	jle	SHORT $L85651
; Line 1288
	cmp	DWORD PTR _v5$[ebp], 0
	jne	SHORT $L85650
; Line 1290
	inc	DWORD PTR _v6$[ebp]
	cmp	DWORD PTR _v6$[ebp], 10000		; 00002710H
	jle	SHORT $L85649
; Line 1291
	xor	ecx, ecx
	push	95					; 0000005fH
	inc	ecx
	mov	edx, ecx
	call	@InitRndLocObj@12
; Line 1292
	jmp	SHORT $L85639
$L85650:
; Line 1295
	push	esi
	push	95					; 0000005fH
	mov	edx, edi
	pop	ecx
	call	@AddObject@12
; Line 1296
	lea	ebx, DWORD PTR [esi+2]
	mov	edx, edi
	push	ebx
	push	30					; 0000001eH
	pop	ecx
	call	@AddObject@12
; Line 1297
	push	ebx
	push	87					; 00000057H
	lea	edx, DWORD PTR [edi+1]
	pop	ecx
	call	@AddObject@12
; Line 1298
	push	ebx
	push	31					; 0000001fH
	lea	edx, DWORD PTR [edi+2]
	pop	ecx
	call	@AddObject@12
; Line 1299
	lea	ebx, DWORD PTR [esi-2]
	mov	edx, edi
	push	ebx
	push	33					; 00000021H
	pop	ecx
	call	@AddObject@12
; Line 1300
	push	ebx
	push	87					; 00000057H
	lea	edx, DWORD PTR [edi+1]
	pop	ecx
	call	@AddObject@12
; Line 1301
	push	ebx
	push	34					; 00000022H
	lea	edx, DWORD PTR [edi+2]
	pop	ecx
	call	@AddObject@12
; Line 1303
	lea	eax, DWORD PTR [esi-1]
	dec	edi
	push	eax
	push	87					; 00000057H
	mov	edx, edi
	pop	ecx
	call	@AddObject@12
; Line 1304
	push	esi
	push	35					; 00000023H
	mov	edx, edi
	pop	ecx
	call	@AddObject@12
; Line 1305
	inc	esi
	mov	edx, edi
	push	esi
	push	87					; 00000057H
	pop	ecx
	call	@AddObject@12
$L85639:
	pop	edi
	pop	esi
	pop	ebx
; Line 1306
	leave
	ret	0
_AddLazStand ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@	; `string'
PUBLIC	_InitObjects
PUBLIC	_AddMushPatch
PUBLIC	_AddSlainHero
EXTRN	_setpc_h:DWORD
EXTRN	_setpc_w:DWORD
EXTRN	_gbMaxPlayers:BYTE
EXTRN	_GetRndSeed:NEAR
EXTRN	_myplr:DWORD
EXTRN	_plr:BYTE
;	COMDAT ??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@ DB 'Levels\L2Data\Blind2.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@ DB 'Levels\L4Data\Warlord'
	DB	'.DUN', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _InitObjects
_TEXT	SEGMENT
_v8$ = -4
_InitObjects PROC NEAR					; COMDAT
; Line 1309
	push	ecx
; Line 1324
	call	_ClrAllObjects
; Line 1325
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	jne	SHORT $L85664
; Line 1428
	add	esp, 4
; Line 1326
	jmp	_AddDiabObjs
$L85664:
	push	ebx
	push	ebp
; Line 1328
	xor	ebp, ebp
	push	esi
	inc	ebp
	push	edi
	mov	DWORD PTR _InitObjFlag, ebp
; Line 1329
	call	_GetRndSeed
; Line 1330
	cmp	BYTE PTR _currlevel, 9
	jne	SHORT $L85666
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85666
; Line 1331
	call	_AddSlainHero
$L85666:
; Line 1332
	mov	al, BYTE PTR _currlevel
	cmp	al, BYTE PTR _quests+24
	jne	SHORT $L85667
	cmp	BYTE PTR _quests+26, 1
	jne	SHORT $L85667
; Line 1333
	call	_AddMushPatch
$L85667:
; Line 1334
	cmp	BYTE PTR _currlevel, 4
	jne	SHORT $L85668
; Line 1335
	call	_AddStoryBooks
$L85668:
; Line 1336
	cmp	BYTE PTR _currlevel, 8
	jne	SHORT $L85669
; Line 1337
	call	_AddStoryBooks
$L85669:
; Line 1338
	cmp	BYTE PTR _currlevel, 12			; 0000000cH
	jne	SHORT $L85670
; Line 1339
	call	_AddStoryBooks
$L85670:
; Line 1340
	cmp	BYTE PTR _leveltype, 1
	push	112					; 00000070H
	pop	edi
	jne	SHORT $L85671
; Line 1342
	push	6
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85672
; Line 1343
	call	_AddTortures
$L85672:
; Line 1345
	push	13					; 0000000dH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85673
; Line 1346
	call	_AddCandles
$L85673:
; Line 1348
	push	7
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85674
; Line 1349
	mov	eax, DWORD PTR _setpc_y
	lea	eax, DWORD PTR [eax+eax+19]
	push	eax
	mov	eax, DWORD PTR _setpc_x
	push	97					; 00000061H
	lea	edx, DWORD PTR [eax+eax+26]
	pop	ecx
	call	@AddObject@12
$L85674:
; Line 1350
	push	48					; 00000030H
	push	15					; 0000000fH
	pop	edx
	push	10					; 0000000aH
	pop	ecx
	call	@InitRndLocBigObj@12
; Line 1351
	push	edi
	push	edi
	xor	edx, edx
	xor	ecx, ecx
	call	@AddL1Objs@16
; Line 1352
	call	_InitRndBarrels
$L85671:
; Line 1354
	cmp	BYTE PTR _leveltype, 2
	jne	$L88461
; Line 1356
	xor	ecx, ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85676
; Line 1357
	push	23					; 00000017H
	mov	edx, ebp
	mov	ecx, ebp
	call	@InitRndLocObj5x5@12
$L85676:
; Line 1359
	push	14					; 0000000eH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85677
; Line 1360
	push	41					; 00000029H
	mov	edx, ebp
	mov	ecx, ebp
	call	@InitRndLocObj5x5@12
$L85677:
; Line 1361
	push	edi
	push	edi
	xor	edx, edx
	xor	ecx, ecx
	call	@AddL2Objs@16
; Line 1362
	call	_AddL2Torches
; Line 1364
	push	8
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	$L88460
; Line 1365
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85679
; Line 1366
	mov	ebx, 237				; 000000edH
; Line 1367
	jmp	SHORT $L85683
$L85679:
	cmp	al, 1
	jne	SHORT $L85681
; Line 1368
	mov	ebx, 245				; 000000f5H
; Line 1369
	jmp	SHORT $L85683
$L85681:
	cmp	al, 2
; Line 1370
	mov	ebx, 241				; 000000f1H
	je	SHORT $L85683
	mov	ebx, DWORD PTR _v8$[esp+20]
$L85683:
; Line 1373
	mov	eax, DWORD PTR _setpc_y
	mov	ecx, DWORD PTR _setpc_h
	mov	edx, DWORD PTR _setpc_w
	push	ebx
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	BYTE PTR _quests+206, bl
	push	ecx
	mov	ecx, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [edx+ecx+1]
	push	edx
	push	eax
	push	ecx
	push	edi
	push	edi
	xor	edx, edx
	xor	ecx, ecx
	call	@AddBookLever@36
; Line 1374
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1375
	mov	eax, DWORD PTR _setpc_y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax]
	call	@LoadMapObjs@12
; Line 1376
	mov	ecx, esi
	call	@mem_free_dbg@4
	jmp	SHORT $L85678
$L88460:
	mov	ebx, DWORD PTR _v8$[esp+20]
$L85678:
; Line 1379
	push	9
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85685
; Line 1380
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85686
; Line 1381
	mov	ebx, 236				; 000000ecH
; Line 1382
	jmp	SHORT $L85690
$L85686:
	cmp	al, 1
	jne	SHORT $L85688
; Line 1383
	mov	ebx, 244				; 000000f4H
; Line 1384
	jmp	SHORT $L85690
$L85688:
	cmp	al, 2
	jne	SHORT $L85690
; Line 1385
	mov	ebx, 240				; 000000f0H
$L85690:
; Line 1388
	mov	eax, DWORD PTR _setpc_y
	push	ebx
	mov	BYTE PTR _quests+230, bl
	lea	ecx, DWORD PTR [eax+7]
	add	eax, 3
	push	ecx
	mov	ecx, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [ecx+2]
	push	edx
	push	eax
	push	ecx
	push	edi
	push	edi
	xor	edx, edx
	xor	ecx, ecx
	call	@AddBookLever@36
; Line 1389
	mov	eax, DWORD PTR _setpc_y
	lea	eax, DWORD PTR [eax+eax+32]
	push	eax
	mov	eax, DWORD PTR _setpc_x
	push	73					; 00000049H
	lea	edx, DWORD PTR [eax+eax+25]
	pop	ecx
	call	@AddObject@12
$L85685:
; Line 1391
	call	_InitRndBarrels
	jmp	SHORT $L85675
$L88461:
	mov	ebx, DWORD PTR _v8$[esp+20]
$L85675:
; Line 1393
	cmp	BYTE PTR _leveltype, 3
	jne	SHORT $L85691
; Line 1394
	push	edi
	push	edi
	xor	edx, edx
	xor	ecx, ecx
	call	@AddL3Objs@16
; Line 1395
	call	_InitRndBarrels
$L85691:
; Line 1397
	cmp	BYTE PTR _leveltype, 4
	jne	$L85692
; Line 1399
	push	11					; 0000000bH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	$L85693
; Line 1400
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85694
; Line 1401
	mov	ebx, 238				; 000000eeH
; Line 1402
	jmp	SHORT $L85698
$L85694:
	cmp	al, 1
	jne	SHORT $L85696
; Line 1403
	mov	ebx, 246				; 000000f6H
; Line 1404
	jmp	SHORT $L85698
$L85696:
	cmp	al, 2
	jne	SHORT $L85698
; Line 1405
	mov	ebx, 242				; 000000f2H
$L85698:
; Line 1408
	mov	eax, DWORD PTR _setpc_y
	mov	ecx, DWORD PTR _setpc_h
	mov	edx, DWORD PTR _setpc_w
	add	ecx, eax
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR _setpc_x
	mov	BYTE PTR _quests+278, bl
	add	edx, ecx
	push	edx
	push	eax
	push	ecx
	push	edi
	push	edi
	xor	edx, edx
	xor	ecx, ecx
	call	@AddBookLever@36
; Line 1409
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 1410
	mov	eax, DWORD PTR _setpc_y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax]
	call	@LoadMapObjs@12
; Line 1411
	mov	ecx, esi
	call	@mem_free_dbg@4
$L85693:
; Line 1414
	push	15					; 0000000fH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85700
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85700
; Line 1415
	call	_AddLazStand
$L85700:
; Line 1416
	call	_InitRndBarrels
; Line 1417
	call	_AddL4Goodies
$L85692:
; Line 1419
	push	5
	push	10					; 0000000aH
	pop	edx
	push	5
	pop	ecx
	call	@InitRndLocObj@12
; Line 1420
	push	6
	pop	edx
	push	edx
	push	3
	pop	ecx
	call	@InitRndLocObj@12
; Line 1421
	push	7
	push	5
	pop	edx
	mov	ecx, ebp
	call	@InitRndLocObj@12
; Line 1422
	cmp	BYTE PTR _leveltype, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	je	SHORT $L85701
; Line 1423
	call	_AddObjTraps
$L85701:
; Line 1424
	cmp	BYTE PTR _leveltype, 1
	jbe	SHORT $L85702
; Line 1425
	call	_AddChestTraps
$L85702:
; Line 1426
	and	DWORD PTR _InitObjFlag, 0
; Line 1428
	pop	ecx
	ret	0
_InitObjects ENDP
_TEXT	ENDS
PUBLIC	@SetMapObjects@12
; Function compile flags: /Ogsy
;	COMDAT @SetMapObjects@12
_TEXT	SEGMENT
_startx$ = -8
_starty$ = 8
_v12$ = -4
_fileload$ = -268
_filestr$ = -44
_v22$ = -12
_y$ = 8
@SetMapObjects@12 PROC NEAR				; COMDAT
; _pMap$ = ecx
; _startx$ = edx
; Line 1434
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _startx$[ebp], edx
	mov	esi, ecx
; Line 1459
	call	_ClrAllObjects
; Line 1460
	push	224					; 000000e0H
	lea	eax, DWORD PTR _fileload$[ebp]
	push	0
	push	eax
	call	_memset
; Line 1462
	mov	al, BYTE PTR _AllObjects
	xor	edx, edx
	add	esp, 12					; 0000000cH
	inc	edx
	cmp	al, -1
	mov	DWORD PTR _InitObjFlag, edx
	je	SHORT $L85734
; Line 1463
	mov	ecx, OFFSET FLAT:_AllObjects+1
$L85732:
; Line 1465
	cmp	al, dl
	jne	SHORT $L85735
	movsx	eax, BYTE PTR [ecx+3]
	movzx	edi, BYTE PTR _leveltype
	cmp	edi, eax
	jne	SHORT $L85735
; Line 1466
	movsx	eax, BYTE PTR [ecx]
	mov	DWORD PTR _fileload$[ebp+eax*4], edx
$L85735:
; Line 1468
	mov	al, BYTE PTR [ecx+43]
	add	ecx, 44					; 0000002cH
	cmp	al, -1
	jne	SHORT $L85732
$L85734:
; Line 1470
	movzx	ecx, BYTE PTR [esi]
; Line 1472
	movzx	eax, BYTE PTR [esi+2]
; Line 1476
	lea	ebx, DWORD PTR [ecx+ecx]
	lea	edi, DWORD PTR [eax+eax]
	mov	DWORD PTR _v12$[ebp], ebx
; Line 1477
	imul	ebx, edi
	imul	eax, ecx
	lea	eax, DWORD PTR [eax+ebx*2+2]
; Line 1479
	test	edi, edi
	lea	eax, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _v22$[ebp], eax
	jle	SHORT $L85744
; Line 1480
	mov	esi, edi
$L85742:
; Line 1482
	mov	ebx, DWORD PTR _v12$[ebp]
	test	ebx, ebx
	jle	SHORT $L85748
$L85746:
; Line 1485
	mov	cl, BYTE PTR [eax]
	test	cl, cl
	je	SHORT $L85749
; Line 1486
	movzx	ecx, cl
	mov	ecx, DWORD PTR _ObjTypeConv[ecx*4]
	imul	ecx, 44					; 0000002cH
	movsx	ecx, BYTE PTR _AllObjects[ecx+1]
	mov	DWORD PTR _fileload$[ebp+ecx*4], edx
$L85749:
; Line 1487
	inc	eax
	inc	eax
; Line 1488
	dec	ebx
; Line 1489
	jne	SHORT $L85746
$L85748:
; Line 1491
	dec	esi
; Line 1492
	jne	SHORT $L85742
$L85744:
; Line 1494
	xor	ebx, ebx
$L85752:
; Line 1496
	cmp	DWORD PTR _fileload$[ebp+ebx*4], 0
	je	SHORT $L85755
; Line 1498
	mov	eax, DWORD PTR _numobjfiles
; Line 1499
	push	DWORD PTR _ObjMasterLoadList[ebx*4]
	mov	BYTE PTR _ObjFileList[eax], bl
	lea	eax, DWORD PTR _filestr$[ebp]
	push	OFFSET FLAT:??_C@_0P@NDGK@Objects?2?$CFs?4CEL?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1500
	xor	edx, edx
	lea	ecx, DWORD PTR _filestr$[ebp]
	call	@LoadFileInMem@8
; Line 1501
	mov	ecx, DWORD PTR _numobjfiles
	inc	DWORD PTR _numobjfiles
; Line 1502
	mov	DWORD PTR _pObjCels[ecx*4], eax
$L85755:
; Line 1504
	inc	ebx
; Line 1505
	cmp	ebx, 56					; 00000038H
	jl	SHORT $L85752
; Line 1506
	mov	ebx, DWORD PTR _v22$[ebp]
; Line 1507
	test	edi, edi
	jle	SHORT $L85759
; Line 1508
	mov	eax, DWORD PTR _starty$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _y$[ebp], eax
$L85757:
; Line 1510
	xor	esi, esi
	cmp	DWORD PTR _v12$[ebp], esi
	jle	SHORT $L85762
$L85760:
; Line 1511
	mov	al, BYTE PTR [ebx]
	test	al, al
	je	SHORT $L85763
; Line 1512
	mov	ecx, DWORD PTR _startx$[ebp]
	push	DWORD PTR _y$[ebp]
	movzx	eax, al
	lea	edx, DWORD PTR [esi+ecx+16]
	mov	ecx, DWORD PTR _ObjTypeConv[eax*4]
	call	@AddObject@12
$L85763:
; Line 1513
	inc	ebx
	inc	ebx
	inc	esi
	cmp	esi, DWORD PTR _v12$[ebp]
	jl	SHORT $L85760
$L85762:
; Line 1515
	inc	DWORD PTR _y$[ebp]
; Line 1516
	dec	edi
; Line 1517
	jne	SHORT $L85757
$L85759:
; Line 1519
	and	DWORD PTR _InitObjFlag, 0
	pop	edi
	pop	esi
	pop	ebx
; Line 1520
	leave
	ret	4
@SetMapObjects@12 ENDP
_TEXT	ENDS
PUBLIC	@DeleteObject_@8
; Function compile flags: /Ogsy
;	COMDAT @DeleteObject_@8
_TEXT	SEGMENT
_v3$ = -1
@DeleteObject_@8 PROC NEAR				; COMDAT
; _oi$ = ecx
; _i$ = edx
; Line 1525
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1530
	mov	eax, ecx
	push	ebx
	imul	eax, 120				; 00000078H
	push	esi
	push	edi
	mov	edi, edx
	mov	edx, DWORD PTR _object[eax+4]
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _object[eax+8]
	and	BYTE PTR _dObject[edx+eax], 0
; Line 1531
	mov	eax, DWORD PTR _nobjects
; Line 1532
	cmp	eax, 1
; Line 1534
	mov	edx, OFFSET FLAT:_objectavail+508
	lea	esi, DWORD PTR [eax-1]
	sete	BYTE PTR _v3$[ebp]
	test	esi, esi
	setl	bl
	shl	eax, 2
	sub	edx, eax
; Line 1535
	mov	DWORD PTR _nobjects, esi
; Line 1536
	test	bl, bl
	mov	DWORD PTR [edx], ecx
	jne	SHORT $L85773
	cmp	BYTE PTR _v3$[ebp], bl
	jne	SHORT $L85773
	cmp	edi, esi
	je	SHORT $L85773
; Line 1537
	mov	eax, DWORD PTR _objectactive[esi*4]
	mov	DWORD PTR _objectactive[edi*4], eax
$L85773:
	pop	edi
	pop	esi
	pop	ebx
; Line 1538
	leave
	ret	0
@DeleteObject_@8 ENDP
_TEXT	ENDS
PUBLIC	@SetupObject@16
; Function compile flags: /Ogsy
;	COMDAT @SetupObject@16
_TEXT	SEGMENT
_y$ = 8
_ot$ = 12
@SetupObject@16 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 1541
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 1554
	imul	esi, 120				; 00000078H
	mov	edi, DWORD PTR _ot$[esp+8]
; Line 1558
	mov	eax, DWORD PTR _y$[esp+8]
	mov	DWORD PTR _object[esi], edi
	imul	edi, 44					; 0000002cH
	movsx	ecx, BYTE PTR _AllObjects[edi+1]
	mov	DWORD PTR _object[esi+4], edx
	mov	DWORD PTR _object[esi+8], eax
; Line 1561
	movsx	edx, BYTE PTR _ObjFileList
	xor	ebx, ebx
	xor	eax, eax
	jmp	SHORT $L88483
$L85794:
; Line 1562
	movsx	edx, BYTE PTR _ObjFileList[eax+1]
	inc	eax
$L88483:
; Line 1561
	cmp	edx, ecx
	jne	SHORT $L85794
; Line 1563
	mov	eax, DWORD PTR _pObjCels[eax*4]
	mov	DWORD PTR _object[esi+20], eax
; Line 1564
	mov	eax, DWORD PTR _AllObjects[edi+8]
; Line 1566
	cmp	eax, ebx
	mov	DWORD PTR _object[esi+16], eax
	je	SHORT $L85796
; Line 1567
	mov	edx, DWORD PTR _AllObjects[edi+12]
; Line 1569
	mov	cl, 146					; 00000092H
	mov	DWORD PTR _object[esi+24], edx
	call	@random@8
	mov	DWORD PTR _object[esi+28], eax
; Line 1570
	mov	eax, DWORD PTR _AllObjects[edi+16]
; Line 1572
	mov	cl, 146					; 00000092H
	mov	DWORD PTR _object[esi+32], eax
	lea	edx, DWORD PTR [eax-1]
	call	@random@8
	inc	eax
; Line 1573
	jmp	SHORT $L85797
$L85796:
; Line 1576
	mov	eax, DWORD PTR _AllObjects[edi+16]
	mov	DWORD PTR _object[esi+24], 1000		; 000003e8H
	mov	DWORD PTR _object[esi+32], eax
; Line 1577
	mov	eax, DWORD PTR _AllObjects[edi+12]
; Line 1578
	mov	DWORD PTR _object[esi+28], ebx
$L85797:
; Line 1580
	mov	DWORD PTR _object[esi+36], eax
; Line 1581
	mov	eax, DWORD PTR _AllObjects[edi+20]
	mov	DWORD PTR _object[esi+40], eax
; Line 1582
	mov	eax, DWORD PTR _AllObjects[edi+24]
	mov	DWORD PTR _object[esi+56], eax
; Line 1583
	mov	eax, DWORD PTR _AllObjects[edi+28]
	mov	DWORD PTR _object[esi+60], eax
; Line 1584
	mov	eax, DWORD PTR _AllObjects[edi+32]
	mov	DWORD PTR _object[esi+12], eax
; Line 1585
	mov	al, BYTE PTR _AllObjects[edi+36]
	mov	BYTE PTR _object[esi+52], al
; Line 1587
	mov	al, BYTE PTR _AllObjects[edi+37]
	mov	DWORD PTR _object[esi+48], ebx
	mov	BYTE PTR _object[esi+64], al
; Line 1588
	mov	DWORD PTR _object[esi+68], ebx
; Line 1589
	mov	DWORD PTR _object[esi+72], ebx
; Line 1590
	mov	DWORD PTR _object[esi+76], ebx
	pop	edi
	pop	esi
	pop	ebx
; Line 1591
	ret	8
@SetupObject@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SetObjMapRange@24
_TEXT	SEGMENT
_y1$ = 8
_x2$ = 12
_y2$ = 16
_v$ = 20
@SetObjMapRange@24 PROC NEAR				; COMDAT
; _i$ = ecx
; _x1$ = edx
; Line 1595
	imul	ecx, 120				; 00000078H
; Line 1596
	mov	eax, DWORD PTR _y1$[esp-4]
	mov	DWORD PTR _object[ecx+92], eax
; Line 1597
	mov	eax, DWORD PTR _x2$[esp-4]
	mov	DWORD PTR _object[ecx+96], eax
; Line 1598
	mov	eax, DWORD PTR _y2$[esp-4]
	mov	DWORD PTR _object[ecx+100], eax
; Line 1599
	mov	eax, DWORD PTR _v$[esp-4]
	mov	DWORD PTR _object[ecx+88], edx
	mov	DWORD PTR _object[ecx+116], eax
; Line 1600
	ret	16					; 00000010H
@SetObjMapRange@24 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SetBookMsg@8
_TEXT	SEGMENT
@SetBookMsg@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _msg$ = edx
; Line 1604
	imul	ecx, 120				; 00000078H
	mov	DWORD PTR _object[ecx+112], edx
; Line 1605
	ret	0
@SetBookMsg@8 ENDP
_TEXT	ENDS
PUBLIC	@AddL1Door@16
; Function compile flags: /Ogsy
;	COMDAT @AddL1Door@16
_TEXT	SEGMENT
_y$ = 8
_ot$ = 12
@AddL1Door@16 PROC NEAR					; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 1608
	mov	eax, ecx
; Line 1618
	xor	ecx, ecx
	imul	eax, 120				; 00000078H
	imul	edx, 112				; 00000070H
	inc	ecx
; Line 1619
	cmp	DWORD PTR _ot$[esp-4], ecx
	mov	DWORD PTR _object[eax+76], ecx
; Line 1620
	mov	ecx, DWORD PTR _y$[esp-4]
	jne	SHORT $L85831
	add	edx, ecx
	lea	ecx, DWORD PTR _dPiece[edx*4]
; Line 1621
	mov	edx, DWORD PTR [ecx]
; Line 1622
	mov	ecx, DWORD PTR [ecx-4]
; Line 1623
	jmp	SHORT $L85834
$L85831:
; Line 1625
	add	ecx, edx
	mov	edx, DWORD PTR _dPiece[ecx*4]
; Line 1626
	mov	ecx, DWORD PTR _dPiece[ecx*4-448]
$L85834:
; Line 1628
	and	DWORD PTR _object[eax+100], 0
; Line 1629
	mov	DWORD PTR _object[eax+88], edx
; Line 1630
	mov	DWORD PTR _object[eax+92], ecx
; Line 1631
	ret	8
@AddL1Door@16 ENDP
_TEXT	ENDS
PUBLIC	@AddSCambBook@4
; Function compile flags: /Ogsy
;	COMDAT @AddSCambBook@4
_TEXT	SEGMENT
@AddSCambBook@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1635
	imul	ecx, 120				; 00000078H
	mov	eax, DWORD PTR _setpc_x
; Line 1636
	mov	edx, DWORD PTR _setpc_y
	push	esi
; Line 1637
	mov	esi, DWORD PTR _setpc_w
	mov	DWORD PTR _object[ecx+88], eax
	mov	DWORD PTR _object[ecx+92], edx
	lea	eax, DWORD PTR [esi+eax+1]
	pop	esi
	mov	DWORD PTR _object[ecx+96], eax
; Line 1638
	mov	eax, DWORD PTR _setpc_h
	lea	eax, DWORD PTR [eax+edx+1]
	mov	DWORD PTR _object[ecx+100], eax
; Line 1639
	mov	eax, DWORD PTR _object[ecx+36]
	inc	eax
	mov	DWORD PTR _object[ecx+108], eax
; Line 1640
	ret	0
@AddSCambBook@4 ENDP
_TEXT	ENDS
PUBLIC	@AddChest@8
EXTRN	_setlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT @AddChest@8
_TEXT	SEGMENT
@AddChest@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _t$ = edx
; Line 1645
	push	esi
	push	edi
; Line 1646
	push	2
	mov	edi, edx
	mov	esi, ecx
	pop	edx
	mov	cl, 147					; 00000093H
	call	@random@8
	test	eax, eax
	jne	SHORT $L85843
; Line 1647
	mov	eax, esi
	imul	eax, 120				; 00000078H
	lea	eax, DWORD PTR _object[eax+36]
	add	DWORD PTR [eax], 3
$L85843:
; Line 1648
	imul	esi, 120				; 00000078H
	call	_GetRndSeed
	mov	DWORD PTR _object[esi+84], eax
; Line 1649
	mov	eax, edi
	sub	eax, 5
	je	SHORT $L85848
	dec	eax
	je	SHORT $L85850
	dec	eax
	je	SHORT $L85852
	sub	eax, 61					; 0000003dH
	je	SHORT $L85848
	dec	eax
	je	SHORT $L85850
	dec	eax
	jne	SHORT $L85845
$L85852:
; Line 1668
	cmp	BYTE PTR _setlevel, 0
	je	SHORT $L85853
; Line 1669
	mov	DWORD PTR _object[esi+88], 3
; Line 1670
	jmp	SHORT $L85845
$L85853:
; Line 1672
	push	4
; Line 1673
	jmp	SHORT $L88499
$L85850:
; Line 1660
	cmp	BYTE PTR _setlevel, 0
	je	SHORT $L85851
; Line 1661
	mov	DWORD PTR _object[esi+88], 2
; Line 1662
	jmp	SHORT $L85845
$L85851:
; Line 1664
	push	3
; Line 1665
	jmp	SHORT $L88499
$L85848:
; Line 1652
	cmp	BYTE PTR _setlevel, 0
	je	SHORT $L85849
; Line 1653
	mov	DWORD PTR _object[esi+88], 1
; Line 1654
	jmp	SHORT $L85845
$L85849:
; Line 1656
	push	2
$L88499:
	mov	cl, 147					; 00000093H
	pop	edx
	call	@random@8
	mov	DWORD PTR _object[esi+88], eax
$L85845:
; Line 1675
	push	8
	mov	cl, 147					; 00000093H
	pop	edx
	call	@random@8
	mov	DWORD PTR _object[esi+92], eax
	pop	edi
	pop	esi
; Line 1676
	ret	0
@AddChest@8 ENDP
_TEXT	ENDS
PUBLIC	@AddL2Door@16
PUBLIC	@ObjSetMicro@12
; Function compile flags: /Ogsy
;	COMDAT @AddL2Door@16
_TEXT	SEGMENT
_y$ = 8
_ot$ = 12
@AddL2Door@16 PROC NEAR					; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 1680
	push	esi
	mov	esi, ecx
; Line 1684
	imul	esi, 120				; 00000078H
; Line 1685
	cmp	DWORD PTR _ot$[esp], 42			; 0000002aH
	mov	eax, edx
; Line 1686
	mov	edx, DWORD PTR _y$[esp]
	mov	DWORD PTR _object[esi+76], 1
	mov	ecx, eax
	jne	SHORT $L85864
	push	538					; 0000021aH
; Line 1687
	jmp	SHORT $L88503
$L85864:
; Line 1688
	push	540					; 0000021cH
$L88503:
	call	@ObjSetMicro@12
; Line 1689
	and	DWORD PTR _object[esi+100], 0
	pop	esi
; Line 1690
	ret	8
@AddL2Door@16 ENDP
_TEXT	ENDS
PUBLIC	@AddL3Door@16
; Function compile flags: /Ogsy
;	COMDAT @AddL3Door@16
_TEXT	SEGMENT
_y$ = 8
_ot$ = 12
@AddL3Door@16 PROC NEAR					; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 1693
	push	esi
	mov	esi, ecx
; Line 1697
	imul	esi, 120				; 00000078H
; Line 1698
	cmp	DWORD PTR _ot$[esp], 74			; 0000004aH
	mov	eax, edx
; Line 1699
	mov	edx, DWORD PTR _y$[esp]
	mov	DWORD PTR _object[esi+76], 1
	mov	ecx, eax
	jne	SHORT $L85876
	push	531					; 00000213H
; Line 1700
	jmp	SHORT $L88507
$L85876:
; Line 1701
	push	534					; 00000216H
$L88507:
	call	@ObjSetMicro@12
; Line 1702
	and	DWORD PTR _object[esi+100], 0
	pop	esi
; Line 1703
	ret	8
@AddL3Door@16 ENDP
_TEXT	ENDS
PUBLIC	@AddSarc@4
EXTRN	_PreSpawnSkeleton:NEAR
; Function compile flags: /Ogsy
;	COMDAT @AddSarc@4
_TEXT	SEGMENT
@AddSarc@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1706
	push	esi
; Line 1707
	mov	esi, ecx
	imul	esi, 120				; 00000078H
	or	al, -1
	push	edi
	sub	al, cl
	mov	ecx, DWORD PTR _object[esi+4]
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _object[esi+8]
; Line 1708
	push	10					; 0000000aH
	lea	edi, DWORD PTR _object[esi+88]
	mov	BYTE PTR _dObject[ecx+edx-1], al
	pop	edx
	mov	cl, 153					; 00000099H
	call	@random@8
	mov	DWORD PTR [edi], eax
; Line 1709
	call	_GetRndSeed
; Line 1710
	cmp	DWORD PTR [edi], 8
	mov	DWORD PTR _object[esi+84], eax
	jl	SHORT $L85881
; Line 1711
	call	_PreSpawnSkeleton
	mov	DWORD PTR _object[esi+92], eax
$L85881:
	pop	edi
	pop	esi
; Line 1712
	ret	0
@AddSarc@4 ENDP
_TEXT	ENDS
PUBLIC	@AddFlameTrap@4
; Function compile flags: /Ogsy
;	COMDAT @AddFlameTrap@4
_TEXT	SEGMENT
@AddFlameTrap@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1716
	imul	ecx, 120				; 00000078H
	mov	eax, DWORD PTR _trapid
; Line 1717
	and	DWORD PTR _object[ecx+92], 0
; Line 1719
	and	DWORD PTR _object[ecx+100], 0
	mov	DWORD PTR _object[ecx+88], eax
	mov	eax, DWORD PTR _trapdir
	mov	DWORD PTR _object[ecx+96], eax
; Line 1720
	ret	0
@AddFlameTrap@4 ENDP
_TEXT	ENDS
PUBLIC	@AddFlameLvr@4
; Function compile flags: /Ogsy
;	COMDAT @AddFlameLvr@4
_TEXT	SEGMENT
@AddFlameLvr@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1726
	imul	ecx, 120				; 00000078H
	mov	eax, DWORD PTR _trapid
	mov	DWORD PTR _object[ecx+88], eax
; Line 1727
	mov	DWORD PTR _object[ecx+92], 49		; 00000031H
; Line 1728
	ret	0
@AddFlameLvr@4 ENDP
_TEXT	ENDS
PUBLIC	@AddTrap@4
; Function compile flags: /Ogsy
;	COMDAT @AddTrap@4
_TEXT	SEGMENT
@AddTrap@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1735
	movzx	eax, BYTE PTR _currlevel
	push	esi
	push	3
	mov	esi, ecx
	pop	ecx
	cdq
	idiv	ecx
	mov	cl, 148					; 00000094H
	mov	edx, eax
	inc	edx
	call	@random@8
; Line 1736
	test	eax, eax
	jne	SHORT $L85892
; Line 1737
	mov	ecx, esi
	imul	ecx, 120				; 00000078H
	and	DWORD PTR _object[ecx+96], eax
$L85892:
; Line 1738
	xor	ecx, ecx
	inc	ecx
	cmp	eax, ecx
	jne	SHORT $L85893
; Line 1739
	mov	edx, esi
	imul	edx, 120				; 00000078H
	mov	DWORD PTR _object[edx+96], ecx
$L85893:
; Line 1740
	cmp	eax, 2
	jne	SHORT $L85894
; Line 1741
	mov	eax, esi
	imul	eax, 120				; 00000078H
	mov	DWORD PTR _object[eax+96], 7
$L85894:
; Line 1742
	imul	esi, 120				; 00000078H
	and	DWORD PTR _object[esi+100], 0
	pop	esi
; Line 1743
	ret	0
@AddTrap@4 ENDP
_TEXT	ENDS
PUBLIC	@AddObjLight@8
EXTRN	@DoLighting@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @AddObjLight@8
_TEXT	SEGMENT
@AddObjLight@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _r$ = edx
; Line 1747
	cmp	DWORD PTR _InitObjFlag, 0
	je	SHORT $L85900
	push	esi
; Line 1748
	mov	esi, ecx
	imul	esi, 120				; 00000078H
	push	-1
	push	edx
	mov	edx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	call	@DoLighting@16
; Line 1749
	or	DWORD PTR _object[esi+88], -1
	pop	esi
; Line 1753
	ret	0
$L85900:
; Line 1751
	imul	ecx, 120				; 00000078H
	and	DWORD PTR _object[ecx+88], 0
; Line 1753
	ret	0
@AddObjLight@8 ENDP
_TEXT	ENDS
PUBLIC	@AddBarrel@4
; Function compile flags: /Ogsy
;	COMDAT @AddBarrel@4
_TEXT	SEGMENT
@AddBarrel@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1756
	push	esi
	mov	esi, ecx
; Line 1757
	imul	esi, 120				; 00000078H
	push	edi
	and	DWORD PTR _object[esi+88], 0
; Line 1758
	call	_GetRndSeed
; Line 1759
	push	10					; 0000000aH
	mov	cl, 149					; 00000095H
	pop	edx
	mov	DWORD PTR _object[esi+84], eax
	lea	edi, DWORD PTR _object[esi+92]
	call	@random@8
; Line 1760
	mov	cl, 149					; 00000095H
	mov	DWORD PTR [edi], eax
	push	3
	pop	edx
	call	@random@8
; Line 1762
	cmp	DWORD PTR [edi], 8
	mov	DWORD PTR _object[esi+96], eax
	jl	SHORT $L85905
; Line 1763
	call	_PreSpawnSkeleton
	mov	DWORD PTR _object[esi+100], eax
$L85905:
	pop	edi
	pop	esi
; Line 1764
	ret	0
@AddBarrel@4 ENDP
_TEXT	ENDS
PUBLIC	@AddShrine@4
; Function compile flags: /Ogsy
;	COMDAT @AddShrine@4
_TEXT	SEGMENT
_slist$ = -104
@AddShrine@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1767
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
; Line 1779
	mov	esi, ecx
	imul	esi, 120				; 00000078H
	xor	ecx, ecx
	xor	eax, eax
	inc	ecx
	push	edi
	movzx	edi, BYTE PTR _currlevel
	mov	DWORD PTR _object[esi+68], ecx
$L85916:
; Line 1781
	movsx	edx, BYTE PTR _shrinemin[eax]
	cmp	edi, edx
	jl	SHORT $L85922
	movsx	edx, BYTE PTR _shrinemax[eax]
	cmp	edi, edx
	jg	SHORT $L85922
; Line 1786
	mov	DWORD PTR _slist$[ebp+eax*4], ecx
	jmp	SHORT $L85923
$L85922:
; Line 1783
	and	DWORD PTR _slist$[ebp+eax*4], 0
$L85923:
; Line 1788
	cmp	BYTE PTR _gbMaxPlayers, cl
	jne	SHORT $L85924
; Line 1789
	cmp	BYTE PTR _shrineavail[eax], 2
; Line 1790
	jmp	SHORT $L88533
$L85924:
; Line 1791
	cmp	BYTE PTR _shrineavail[eax], cl
$L88533:
	sete	dl
; Line 1792
	test	dl, dl
	je	SHORT $L85926
; Line 1793
	and	DWORD PTR _slist$[ebp+eax*4], 0
$L85926:
; Line 1794
	inc	eax
; Line 1795
	cmp	eax, 26					; 0000001aH
	jl	SHORT $L85916
$L85927:
; Line 1797
	push	26					; 0000001aH
	mov	cl, 150					; 00000096H
	pop	edx
	call	@random@8
; Line 1798
	cmp	DWORD PTR _slist$[ebp+eax*4], 0
	je	SHORT $L85927
; Line 1800
	push	2
	mov	cl, 150					; 00000096H
	pop	edx
	mov	DWORD PTR _object[esi+88], eax
	call	@random@8
	test	eax, eax
	je	SHORT $L85930
; Line 1801
	mov	DWORD PTR _object[esi+36], 12		; 0000000cH
; Line 1802
	mov	DWORD PTR _object[esi+32], 22		; 00000016H
$L85930:
	pop	edi
	pop	esi
; Line 1804
	leave
	ret	0
@AddShrine@4 ENDP
_TEXT	ENDS
PUBLIC	@AddBookcase@4
; Function compile flags: /Ogsy
;	COMDAT @AddBookcase@4
_TEXT	SEGMENT
@AddBookcase@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1809
	push	esi
	mov	esi, ecx
; Line 1813
	imul	esi, 120				; 00000078H
	call	_GetRndSeed
	mov	DWORD PTR _object[esi+84], eax
; Line 1814
	mov	DWORD PTR _object[esi+68], 1
	pop	esi
; Line 1815
	ret	0
@AddBookcase@4 ENDP
_TEXT	ENDS
PUBLIC	@AddPurifyingFountain@4
; Function compile flags: /Ogsy
;	COMDAT @AddPurifyingFountain@4
_TEXT	SEGMENT
@AddPurifyingFountain@4 PROC NEAR			; COMDAT
; _i$ = ecx
; Line 1818
	push	esi
; Line 1821
	mov	esi, ecx
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi+4]
	mov	edx, DWORD PTR _object[esi+8]
	imul	eax, 112				; 00000070H
	lea	eax, DWORD PTR _dObject[eax+edx]
; Line 1822
	or	dl, -1
	sub	dl, cl
	mov	BYTE PTR [eax-1], dl
; Line 1823
	mov	BYTE PTR [eax-112], dl
; Line 1824
	mov	BYTE PTR [eax-113], dl
; Line 1825
	call	_GetRndSeed
	mov	DWORD PTR _object[esi+84], eax
	pop	esi
; Line 1826
	ret	0
@AddPurifyingFountain@4 ENDP
_TEXT	ENDS
PUBLIC	@AddArmorStand@4
EXTRN	_armorFlag:DWORD
; Function compile flags: /Ogsy
;	COMDAT @AddArmorStand@4
_TEXT	SEGMENT
@AddArmorStand@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1830
	cmp	DWORD PTR _armorFlag, 0
	push	esi
	mov	esi, ecx
	jne	SHORT $L85942
; Line 1831
	mov	eax, esi
	imul	eax, 120				; 00000078H
	and	BYTE PTR _object[eax+64], 0
; Line 1832
	mov	DWORD PTR _object[eax+16], 2
$L85942:
; Line 1835
	call	_GetRndSeed
	imul	esi, 120				; 00000078H
	mov	DWORD PTR _object[esi+84], eax
	pop	esi
; Line 1836
	ret	0
@AddArmorStand@4 ENDP
_TEXT	ENDS
PUBLIC	@AddDecap@4
; Function compile flags: /Ogsy
;	COMDAT @AddDecap@4
_TEXT	SEGMENT
@AddDecap@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1839
	push	esi
	mov	esi, ecx
; Line 1846
	imul	esi, 120				; 00000078H
	call	_GetRndSeed
; Line 1847
	push	8
	mov	cl, 151					; 00000097H
	pop	edx
	mov	DWORD PTR _object[esi+84], eax
	call	@random@8
; Line 1849
	inc	eax
	mov	DWORD PTR _object[esi+68], 1
	mov	DWORD PTR _object[esi+36], eax
	pop	esi
; Line 1850
	ret	0
@AddDecap@4 ENDP
_TEXT	ENDS
PUBLIC	@AddVilebook@4
EXTRN	_setlvlnum:BYTE
; Function compile flags: /Ogsy
;	COMDAT @AddVilebook@4
_TEXT	SEGMENT
@AddVilebook@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1854
	cmp	BYTE PTR _setlevel, 0
	je	SHORT $L85953
; Line 1855
	cmp	BYTE PTR _setlvlnum, 5
	jne	SHORT $L85953
; Line 1856
	imul	ecx, 120				; 00000078H
	mov	DWORD PTR _object[ecx+36], 4
$L85953:
; Line 1858
	ret	0
@AddVilebook@4 ENDP
_TEXT	ENDS
PUBLIC	@AddMagicCircle@4
; Function compile flags: /Ogsy
;	COMDAT @AddMagicCircle@4
_TEXT	SEGMENT
@AddMagicCircle@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1862
	push	esi
	mov	esi, ecx
; Line 1867
	call	_GetRndSeed
; Line 1868
	mov	ecx, esi
	pop	esi
	imul	ecx, 120				; 00000078H
	and	DWORD PTR _object[ecx+108], 0
; Line 1869
	mov	DWORD PTR _object[ecx+84], eax
; Line 1870
	xor	eax, eax
	inc	eax
	mov	DWORD PTR _object[ecx+68], eax
; Line 1871
	mov	DWORD PTR _object[ecx+104], eax
; Line 1872
	ret	0
@AddMagicCircle@4 ENDP
_TEXT	ENDS
PUBLIC	@AddBookstand@4
; Function compile flags: /Ogsy
;	COMDAT @AddBookstand@4
_TEXT	SEGMENT
@AddBookstand@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1875
	push	esi
	mov	esi, ecx
; Line 1876
	call	_GetRndSeed
	imul	esi, 120				; 00000078H
	mov	DWORD PTR _object[esi+84], eax
	pop	esi
; Line 1877
	ret	0
@AddBookstand@4 ENDP
_TEXT	ENDS
PUBLIC	@AddPedistal@4
; Function compile flags: /Ogsy
;	COMDAT @AddPedistal@4
_TEXT	SEGMENT
@AddPedistal@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1880
	mov	eax, ecx
; Line 1892
	mov	ecx, DWORD PTR _setpc_x
	imul	eax, 120				; 00000078H
	mov	edx, DWORD PTR _setpc_y
	push	esi
; Line 1893
	mov	esi, DWORD PTR _setpc_w
	mov	DWORD PTR _object[eax+88], ecx
	add	esi, ecx
; Line 1897
	mov	ecx, DWORD PTR _setpc_h
	add	ecx, edx
	mov	DWORD PTR _object[eax+96], esi
	mov	DWORD PTR _object[eax+92], edx
	mov	DWORD PTR _object[eax+100], ecx
	pop	esi
; Line 1898
	ret	0
@AddPedistal@4 ENDP
_TEXT	ENDS
PUBLIC	@AddStoryBook@4
EXTRN	_glSeedTbl:BYTE
EXTRN	@SetRndSeed@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @AddStoryBook@4
_TEXT	SEGMENT
@AddStoryBook@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1903
	push	esi
	mov	esi, ecx
; Line 1907
	mov	ecx, DWORD PTR _glSeedTbl+64
	call	@SetRndSeed@4
; Line 1908
	xor	cl, cl
	push	3
	pop	edx
	call	@random@8
; Line 1910
	mov	ecx, esi
; Line 1911
	mov	dl, BYTE PTR _currlevel
	imul	ecx, 120				; 00000078H
	cmp	dl, 4
	mov	DWORD PTR _object[ecx+88], eax
	jne	SHORT $L85976
; Line 1912
	lea	esi, DWORD PTR [eax+eax*2]
	mov	esi, DWORD PTR _StoryText[esi*4]
	mov	DWORD PTR _object[ecx+92], esi
$L85976:
; Line 1913
	cmp	dl, 8
	jne	SHORT $L85977
; Line 1914
	lea	esi, DWORD PTR [eax+eax*2]
	mov	esi, DWORD PTR _StoryText[esi*4+4]
	mov	DWORD PTR _object[ecx+92], esi
$L85977:
; Line 1915
	cmp	dl, 12					; 0000000cH
	jne	SHORT $L85978
; Line 1916
	lea	esi, DWORD PTR [eax+eax*2]
	mov	esi, DWORD PTR _StoryText[esi*4+8]
	mov	DWORD PTR _object[ecx+92], esi
$L85978:
; Line 1917
	movzx	edx, dl
	shr	edx, 2
	lea	esi, DWORD PTR [eax+eax*2]
; Line 1918
	add	eax, eax
	push	5
	lea	edx, DWORD PTR [edx+esi-1]
	mov	DWORD PTR _object[ecx+96], edx
	mov	edx, eax
	pop	eax
	pop	esi
	sub	eax, edx
; Line 1919
	mov	DWORD PTR _object[ecx+36], eax
; Line 1920
	inc	eax
	mov	DWORD PTR _object[ecx+100], eax
; Line 1921
	ret	0
@AddStoryBook@4 ENDP
_TEXT	ENDS
PUBLIC	@AddWeaponRack@4
EXTRN	_weaponFlag:DWORD
; Function compile flags: /Ogsy
;	COMDAT @AddWeaponRack@4
_TEXT	SEGMENT
@AddWeaponRack@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1925
	cmp	DWORD PTR _weaponFlag, 0
	push	esi
	mov	esi, ecx
	jne	SHORT $L85983
; Line 1926
	mov	eax, esi
	imul	eax, 120				; 00000078H
	and	BYTE PTR _object[eax+64], 0
; Line 1927
	mov	DWORD PTR _object[eax+16], 2
$L85983:
; Line 1929
	call	_GetRndSeed
	imul	esi, 120				; 00000078H
	mov	DWORD PTR _object[esi+84], eax
	pop	esi
; Line 1930
	ret	0
@AddWeaponRack@4 ENDP
_TEXT	ENDS
PUBLIC	@AddTorturedBody@4
; Function compile flags: /Ogsy
;	COMDAT @AddTorturedBody@4
_TEXT	SEGMENT
@AddTorturedBody@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1933
	push	esi
	mov	esi, ecx
; Line 1934
	imul	esi, 120				; 00000078H
	call	_GetRndSeed
; Line 1936
	push	4
	xor	cl, cl
	pop	edx
	mov	DWORD PTR _object[esi+84], eax
	mov	DWORD PTR _object[esi+68], 1
	call	@random@8
	inc	eax
	mov	DWORD PTR _object[esi+36], eax
	pop	esi
; Line 1937
	ret	0
@AddTorturedBody@4 ENDP
_TEXT	ENDS
PUBLIC	@GetRndObjLoc@12
; Function compile flags: /Ogsy
;	COMDAT @GetRndObjLoc@12
_TEXT	SEGMENT
_yy$ = 8
_v10$ = -12
_v11$ = -8
_v12$ = -4
@GetRndObjLoc@12 PROC NEAR				; COMDAT
; _randarea$ = ecx
; _xx$ = edx
; Line 1940
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
; Line 1953
	test	ecx, ecx
	push	edi
	mov	ebx, edx
	mov	DWORD PTR _v12$[ebp], ecx
	je	SHORT $L88575
; Line 1954
	and	DWORD PTR _v10$[ebp], 0
$LABEL_3$86007:
; Line 1957
	inc	DWORD PTR _v10$[ebp]
	cmp	DWORD PTR _v10$[ebp], 1000		; 000003e8H
	jle	SHORT $L86008
	cmp	DWORD PTR _v12$[ebp], 1
	jle	SHORT $L86008
; Line 1958
	dec	DWORD PTR _v12$[ebp]
$L86008:
; Line 1959
	push	112					; 00000070H
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 1961
	xor	cl, cl
	mov	DWORD PTR [ebx], eax
	push	112					; 00000070H
	pop	edx
	call	@random@8
; Line 1965
	and	DWORD PTR _v11$[ebp], 0
	mov	esi, eax
	mov	eax, DWORD PTR _yy$[ebp]
	mov	DWORD PTR [eax], esi
	xor	al, al
; Line 1966
	cmp	DWORD PTR _v12$[ebp], 0
	jle	SHORT $L88575
$L86011:
; Line 1968
	test	al, al
	jne	SHORT $LABEL_3$86007
; Line 1969
	xor	edi, edi
$L86013:
; Line 1971
	test	al, al
	jne	SHORT $L86015
; Line 1973
	mov	ecx, DWORD PTR [ebx]
	lea	edx, DWORD PTR [edi+esi]
	add	ecx, DWORD PTR _v11$[ebp]
	inc	edi
	call	@RndLocOk@8
	neg	al
	sbb	al, al
	inc	al
; Line 1974
	cmp	edi, DWORD PTR _v12$[ebp]
	jl	SHORT $L86013
$L86015:
; Line 1975
	inc	DWORD PTR _v11$[ebp]
; Line 1976
	mov	ecx, DWORD PTR _v11$[ebp]
	cmp	ecx, DWORD PTR _v12$[ebp]
	jl	SHORT $L86011
; Line 1977
	test	al, al
; Line 1978
	jne	SHORT $LABEL_3$86007
$L88575:
	pop	edi
	pop	esi
	pop	ebx
; Line 1984
	leave
	ret	4
@GetRndObjLoc@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _AddMushPatch
_TEXT	SEGMENT
_y$ = -8
_x$ = -4
_AddMushPatch PROC NEAR					; COMDAT
; Line 1987
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1992
	cmp	DWORD PTR _nobjects, 127		; 0000007fH
	jge	SHORT $L86023
	push	ebx
; Line 1993
	mov	ebx, DWORD PTR _objectavail
; Line 1994
	lea	eax, DWORD PTR _y$[ebp]
	push	esi
	push	eax
	push	5
	lea	edx, DWORD PTR _x$[ebp]
	pop	ecx
	call	@GetRndObjLoc@12
; Line 1995
	mov	esi, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	eax, esi
	or	cl, -1
	imul	eax, 112				; 00000070H
	add	eax, edx
	sub	cl, bl
; Line 1998
	add	edx, 2
	mov	BYTE PTR _dObject[eax+113], cl
	push	edx
	mov	BYTE PTR _dObject[eax+225], cl
	push	94					; 0000005eH
	mov	BYTE PTR _dObject[eax+114], cl
	lea	edx, DWORD PTR [esi+2]
	pop	ecx
	call	@AddObject@12
	pop	esi
	pop	ebx
$L86023:
; Line 2000
	leave
	ret	0
_AddMushPatch ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _AddSlainHero
_TEXT	SEGMENT
_x$ = -8
_y$ = -4
_AddSlainHero PROC NEAR					; COMDAT
; Line 2003
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2007
	lea	eax, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR _x$[ebp]
	push	eax
	push	5
	pop	ecx
	call	@GetRndObjLoc@12
; Line 2008
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	push	96					; 00000060H
	lea	edx, DWORD PTR [eax+2]
	pop	ecx
	call	@AddObject@12
; Line 2009
	leave
	ret	0
_AddSlainHero ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @AddObject@12
_TEXT	SEGMENT
_oy$ = 8
@AddObject@12 PROC NEAR					; COMDAT
; _ot$ = ecx
; _ox$ = edx
; Line 2022
	mov	eax, DWORD PTR _nobjects
	push	ebp
	push	esi
	cmp	eax, 127				; 0000007fH
	mov	ebp, edx
	mov	esi, ecx
	jge	$L86039
; Line 2025
	shl	eax, 2
; Line 2026
	mov	ecx, OFFSET FLAT:_objectavail+504
	push	ebx
	mov	ebx, DWORD PTR _objectavail
	sub	ecx, eax
	mov	DWORD PTR _objectactive[eax], ebx
	push	edi
	mov	eax, DWORD PTR [ecx]
; Line 2027
	mov	ecx, ebp
	imul	ecx, 112				; 00000070H
	mov	edi, DWORD PTR _oy$[esp+12]
	mov	DWORD PTR _objectavail, eax
	mov	al, bl
; Line 2028
	push	esi
	inc	al
	push	edi
	mov	BYTE PTR _dObject[ecx+edi], al
	mov	ecx, ebx
	call	@SetupObject@16
; Line 2029
	cmp	esi, 92					; 0000005cH
	ja	$L86077
	movzx	eax, BYTE PTR $L88587[esi]
	jmp	DWORD PTR $L88591[eax*4]
$L86046:
; Line 2038
	push	esi
	push	edi
	mov	edx, ebp
	mov	ecx, ebx
	call	@AddL1Door@16
; Line 2039
	jmp	$L86077
$L86047:
; Line 2046
	mov	edx, esi
	mov	ecx, ebx
	call	@AddChest@8
; Line 2047
	jmp	$L86077
$L86048:
; Line 2049
	mov	ecx, ebx
	call	@AddVilebook@4
; Line 2050
	jmp	$L86077
$L86049:
; Line 2053
	mov	ecx, ebx
	call	@AddBookstand@4
$LABEL_31$86045:
; Line 2055
	push	5
; Line 2056
	jmp	$L88588
$L86050:
; Line 2058
	mov	ecx, ebx
	call	@AddTorturedBody@4
; Line 2059
	jmp	$L86077
$L86051:
; Line 2061
	mov	ecx, ebx
	call	@AddSCambBook@4
; Line 2062
	jmp	$L86077
$L86052:
; Line 2065
	push	esi
	push	edi
	mov	edx, ebp
	mov	ecx, ebx
	call	@AddL2Door@16
; Line 2066
	jmp	$L86077
$L86053:
; Line 2071
	push	8
; Line 2072
	jmp	$L88588
$L86054:
; Line 2074
	mov	ecx, ebx
	call	@AddSarc@4
; Line 2075
	jmp	$L86077
$L86055:
; Line 2077
	mov	ecx, ebx
	call	@AddFlameTrap@4
; Line 2078
	jmp	$L86077
$L86056:
; Line 2080
	mov	ecx, ebx
	call	@AddFlameLvr@4
; Line 2081
	jmp	$L86077
$L86057:
; Line 2083
	mov	eax, ebx
	imul	eax, 120				; 00000078H
	mov	DWORD PTR _object[eax+36], 1
; Line 2084
	jmp	$L86077
$L86058:
; Line 2087
	mov	ecx, ebx
	call	@AddTrap@4
; Line 2088
	jmp	SHORT $L86077
$L86059:
; Line 2091
	mov	ecx, ebx
	call	@AddBarrel@4
; Line 2092
	jmp	SHORT $L86077
$L86060:
; Line 2095
	mov	ecx, ebx
	call	@AddShrine@4
; Line 2100
	jmp	SHORT $L86077
$L86062:
; Line 2103
	mov	ecx, ebx
	call	@AddBookcase@4
; Line 2107
	jmp	SHORT $L86077
$L86064:
; Line 2109
	mov	ecx, ebx
	call	@AddDecap@4
; Line 2110
	jmp	SHORT $L86077
$L86065:
; Line 2112
	mov	ecx, ebx
	call	@AddPedistal@4
; Line 2113
	jmp	SHORT $L86077
$L86066:
; Line 2116
	push	esi
	push	edi
	mov	edx, ebp
	mov	ecx, ebx
	call	@AddL3Door@16
; Line 2117
	jmp	SHORT $L86077
$L86068:
; Line 2123
	mov	ecx, ebx
	call	@AddArmorStand@4
; Line 2124
	jmp	SHORT $L86077
$L86069:
; Line 2126
	mov	ecx, ebx
	call	@AddBookstand@4
; Line 2130
	jmp	SHORT $L86077
$L86071:
; Line 2132
	mov	ecx, ebx
	call	@AddPurifyingFountain@4
; Line 2136
	jmp	SHORT $L86077
$L86073:
; Line 2139
	mov	ecx, ebx
	call	@AddMagicCircle@4
; Line 2140
	jmp	SHORT $L86077
$L86074:
; Line 2142
	mov	ecx, ebx
	call	@AddStoryBook@4
; Line 2143
	jmp	SHORT $L86077
$L86075:
; Line 2145
	push	3
$L88588:
	pop	edx
	mov	ecx, ebx
	call	@AddObjLight@8
; Line 2146
	jmp	SHORT $L86077
$L86076:
; Line 2149
	mov	ecx, ebx
	call	@AddWeaponRack@4
$L86077:
; Line 2155
	imul	ebx, 120				; 00000078H
; Line 2156
	inc	DWORD PTR _nobjects
	pop	edi
	mov	eax, DWORD PTR _object[ebx+40]
	sub	eax, 64					; 00000040H
; Line 2157
	sar	eax, 1
	mov	DWORD PTR _object[ebx+44], eax
	pop	ebx
$L86039:
	pop	esi
	pop	ebp
; Line 2159
	ret	4
$L88591:
	DD	$LABEL_31$86045
	DD	$L86046
	DD	$L86047
	DD	$L86048
	DD	$L86049
	DD	$L86050
	DD	$L86051
	DD	$L86052
	DD	$L86053
	DD	$L86054
	DD	$L86055
	DD	$L86056
	DD	$L86057
	DD	$L86058
	DD	$L86059
	DD	$L86060
	DD	$L86069
	DD	$L86062
	DD	$L86064
	DD	$L86065
	DD	$L86066
	DD	$L86071
	DD	$L86068
	DD	$L86073
	DD	$L86074
	DD	$L86075
	DD	$L86076
	DD	$L86077
$L88587:
	DB	0
	DB	1
	DB	1
	DB	0
	DB	27					; 0000001bH
	DB	2
	DB	2
	DB	2
	DB	0
	DB	0
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	3
	DB	4
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	5
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	6
	DB	7
	DB	7
	DB	8
	DB	8
	DB	8
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	27					; 0000001bH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	16					; 00000010H
	DB	0
	DB	16					; 00000010H
	DB	18					; 00000012H
	DB	2
	DB	2
	DB	2
	DB	27					; 0000001bH
	DB	27					; 0000001bH
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	27					; 0000001bH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	21					; 00000015H
	DB	16					; 00000010H
	DB	27					; 0000001bH
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	27					; 0000001bH
	DB	22					; 00000016H
	DB	26					; 0000001aH
	DB	4
	DB	26					; 0000001aH
@AddObject@12 ENDP
_TEXT	ENDS
PUBLIC	@Obj_Light@8
EXTRN	_lightflag:DWORD
EXTRN	@AddLight@12:NEAR
EXTRN	@AddUnLight@4:NEAR
EXTRN	_abs:NEAR
; Function compile flags: /Ogsy
;	COMDAT @Obj_Light@8
_TEXT	SEGMENT
_lr$ = -4
_v5$ = -8
_y$ = -12
_v10$ = -16
@Obj_Light@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _lr$ = edx
; Line 2162
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
; Line 2175
	imul	esi, 120				; 00000078H
	push	edi
	mov	DWORD PTR _lr$[esp+32], edx
	cmp	DWORD PTR _object[esi+88], -1
	je	$L86096
; Line 2176
	and	DWORD PTR _v10$[esp+32], 0
; Line 2179
	mov	eax, DWORD PTR _object[esi+8]
; Line 2180
	cmp	DWORD PTR _lightflag, 0
	mov	ebx, DWORD PTR _object[esi+4]
	lea	ebp, DWORD PTR [edx+10]
	mov	DWORD PTR _y$[esp+32], eax
	jne	$LABEL_15$86094
; Line 2186
	mov	edi, OFFSET FLAT:_plr+56
$L86098:
; Line 2188
	cmp	BYTE PTR [edi-27], 0
	je	SHORT $L86103
; Line 2189
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [edi-4]
	jne	SHORT $L86103
; Line 2190
	mov	eax, DWORD PTR [edi]
	sub	eax, ebx
	push	eax
	call	_abs
	mov	DWORD PTR _v5$[esp+36], eax
; Line 2191
	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR _y$[esp+36]
	push	eax
	call	_abs
; Line 2192
	cmp	DWORD PTR _v5$[esp+40], ebp
	pop	ecx
	pop	ecx
	jge	SHORT $L86103
	cmp	eax, ebp
	jge	SHORT $L86103
; Line 2193
	mov	DWORD PTR _v10$[esp+32], 1
$L86103:
; Line 2196
	add	edi, 21720				; 000054d8H
; Line 2197
	lea	eax, DWORD PTR [edi-4]
	cmp	eax, OFFSET FLAT:_plr+86932
	jge	SHORT $L88596
; Line 2187
	cmp	DWORD PTR _v10$[esp+32], 0
	je	SHORT $L86098
$L86107:
; Line 2203
	cmp	DWORD PTR _object[esi+88], 0
	jne	SHORT $L86108
; Line 2204
	push	DWORD PTR _lr$[esp+32]
	mov	edx, DWORD PTR _y$[esp+36]
	mov	ecx, ebx
	call	@AddLight@12
	mov	DWORD PTR _object[esi+80], eax
$L86108:
; Line 2205
	mov	DWORD PTR _object[esi+88], 1
$L86096:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2208
	add	esp, 16					; 00000010H
	ret	0
$L88596:
; Line 2198
	cmp	DWORD PTR _v10$[esp+32], 0
	jne	SHORT $L86107
$LABEL_15$86094:
; Line 2182
	cmp	DWORD PTR _object[esi+88], 1
	jne	SHORT $L86095
; Line 2183
	mov	ecx, DWORD PTR _object[esi+80]
	call	@AddUnLight@4
$L86095:
; Line 2184
	and	DWORD PTR _object[esi+88], 0
; Line 2185
	jmp	SHORT $L86096
@Obj_Light@8 ENDP
_TEXT	ENDS
PUBLIC	@ObjChangeMapResync@16
PUBLIC	@Obj_Circle@4
EXTRN	@ClrPlrPath@4:NEAR
EXTRN	_sgbMouseDown:BYTE
EXTRN	@track_repeat_walk@4:NEAR
EXTRN	@AddMissile@40:NEAR
EXTRN	@StartStand@8:NEAR
EXTRN	__imp__ReleaseCapture@0:NEAR
; Function compile flags: /Ogsy
;	COMDAT @Obj_Circle@4
_TEXT	SEGMENT
@Obj_Circle@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2224
	mov	eax, DWORD PTR _myplr
	imul	ecx, 120				; 00000078H
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _object[ecx+4]
	push	ebx
	cmp	DWORD PTR _plr[eax+56], edx
	push	esi
	mov	esi, DWORD PTR _object[ecx+8]
	jne	$L86120
	cmp	DWORD PTR _plr[eax+60], esi
	jne	$L86120
; Line 2232
	mov	eax, DWORD PTR _object[ecx]
; Line 2233
	cmp	eax, 84					; 00000054H
	jne	SHORT $L86124
; Line 2234
	mov	DWORD PTR _object[ecx+36], 2
$L86124:
; Line 2235
	cmp	eax, 85					; 00000055H
	jne	SHORT $L86125
; Line 2236
	mov	DWORD PTR _object[ecx+36], 4
$L86125:
; Line 2237
	cmp	edx, 45					; 0000002dH
	jne	SHORT $L86126
; Line 2238
	cmp	esi, 47					; 0000002fH
	jne	SHORT $L86129
; Line 2239
	mov	DWORD PTR _object[ecx+108], 2
; Line 2240
	jmp	$L86130
$L86126:
; Line 2242
	cmp	edx, 26					; 0000001aH
	jne	SHORT $L86129
	cmp	esi, 46					; 0000002eH
	jne	SHORT $L86129
; Line 2243
	mov	DWORD PTR _object[ecx+108], 1
; Line 2244
	jmp	$L86130
$L86129:
; Line 2246
	xor	ebx, ebx
; Line 2247
	cmp	edx, 35					; 00000023H
	mov	DWORD PTR _object[ecx+108], ebx
	jne	$L86130
	cmp	esi, 36					; 00000024H
	jne	$L86130
	cmp	DWORD PTR _object[ecx+104], 3
	jne	$L86130
; Line 2251
	push	DWORD PTR _object[ecx+100]
	mov	edx, DWORD PTR _object[ecx+92]
	mov	DWORD PTR _object[ecx+108], 4
	push	DWORD PTR _object[ecx+96]
	mov	ecx, DWORD PTR _object[ecx+88]
	call	@ObjChangeMapResync@16
; Line 2252
	cmp	BYTE PTR _quests+362, 2
	jne	SHORT $L86131
; Line 2253
	mov	BYTE PTR _quests+375, 4
$L86131:
; Line 2254
	mov	ecx, DWORD PTR _myplr
	push	ebx
	mov	eax, ecx
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	ecx
	push	ebx
	mov	edx, DWORD PTR _plr[eax+60]
	mov	ecx, DWORD PTR _plr[eax+56]
	push	3
	push	DWORD PTR _plr[eax+112]
	push	46					; 0000002eH
	push	35					; 00000023H
	call	@AddMissile@40
; Line 2255
	xor	ecx, ecx
	call	@track_repeat_walk@4
; Line 2256
	mov	BYTE PTR _sgbMouseDown, bl
; Line 2257
	call	DWORD PTR __imp__ReleaseCapture@0
; Line 2258
	mov	ecx, DWORD PTR _myplr
	call	@ClrPlrPath@4
; Line 2259
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	pop	esi
	pop	ebx
	jmp	@StartStand@8
$L86120:
; Line 2225
	mov	eax, DWORD PTR _object[ecx]
; Line 2226
	cmp	eax, 84					; 00000054H
	jne	SHORT $L86121
; Line 2227
	mov	DWORD PTR _object[ecx+36], 1
$L86121:
; Line 2228
	cmp	eax, 85					; 00000055H
	jne	SHORT $L86122
; Line 2229
	mov	DWORD PTR _object[ecx+36], 3
$L86122:
; Line 2230
	and	DWORD PTR _object[ecx+108], 0
$L86130:
	pop	esi
	pop	ebx
; Line 2262
	ret	0
@Obj_Circle@4 ENDP
_TEXT	ENDS
PUBLIC	@Obj_StopAnim@4
; Function compile flags: /Ogsy
;	COMDAT @Obj_StopAnim@4
_TEXT	SEGMENT
@Obj_StopAnim@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 2267
	imul	ecx, 120				; 00000078H
	mov	eax, DWORD PTR _object[ecx+36]
	cmp	eax, DWORD PTR _object[ecx+32]
	jne	SHORT $L86135
; Line 2268
	and	DWORD PTR _object[ecx+28], 0
; Line 2269
	mov	DWORD PTR _object[ecx+24], 1000		; 000003e8H
$L86135:
; Line 2271
	ret	0
@Obj_StopAnim@4 ENDP
_TEXT	ENDS
PUBLIC	@Obj_Door@4
EXTRN	_dItem:BYTE
EXTRN	_dDead:BYTE
; Function compile flags: /Ogsy
;	COMDAT @Obj_Door@4
_TEXT	SEGMENT
@Obj_Door@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2278
	imul	ecx, 120				; 00000078H
	push	ebx
	xor	ebx, ebx
	cmp	DWORD PTR _object[ecx+100], ebx
	je	SHORT $L86141
; Line 2280
	mov	eax, DWORD PTR _object[ecx+4]
	mov	edx, DWORD PTR _object[ecx+8]
; Line 2288
	imul	eax, 112				; 00000070H
	add	eax, edx
	mov	BYTE PTR _object[ecx+64], 2
	mov	DWORD PTR _object[ecx+60], 1
	cmp	BYTE PTR _dItem[eax], bl
	jne	SHORT $L88612
	cmp	BYTE PTR _dDead[eax], bl
	jne	SHORT $L88612
	cmp	BYTE PTR _dPlayer[eax], bl
	jne	SHORT $L88612
	cmp	DWORD PTR _dMonster[eax*4], ebx
	jne	SHORT $L88612
	xor	eax, eax
	inc	eax
	jmp	SHORT $L88613
$L88612:
	xor	eax, eax
$L88613:
	xor	edx, edx
	cmp	eax, ebx
	sete	dl
	inc	edx
	pop	ebx
	mov	DWORD PTR _object[ecx+100], edx
; Line 2293
	ret	0
$L86141:
; Line 2290
	mov	DWORD PTR _object[ecx+60], ebx
; Line 2291
	mov	BYTE PTR _object[ecx+64], 3
	pop	ebx
; Line 2293
	ret	0
@Obj_Door@4 ENDP
_TEXT	ENDS
PUBLIC	@Obj_Sarc@4
; Function compile flags: /Ogsy
;	COMDAT @Obj_Sarc@4
_TEXT	SEGMENT
@Obj_Sarc@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2297
	imul	ecx, 120				; 00000078H
	mov	eax, DWORD PTR _object[ecx+36]
	cmp	eax, DWORD PTR _object[ecx+32]
	jne	SHORT $L86146
; Line 2298
	and	DWORD PTR _object[ecx+16], 0
$L86146:
; Line 2299
	ret	0
@Obj_Sarc@4 ENDP
_TEXT	ENDS
PUBLIC	@ActivateTrapLine@8
; Function compile flags: /Ogsy
;	COMDAT @ActivateTrapLine@8
_TEXT	SEGMENT
_tid$ = -4
@ActivateTrapLine@8 PROC NEAR				; COMDAT
; _ttype$ = ecx
; _tid$ = edx
; Line 2302
	push	ecx
	push	ebx
; Line 2310
	xor	ebx, ebx
; Line 2312
	cmp	DWORD PTR _nobjects, ebx
	push	ebp
	mov	DWORD PTR _tid$[esp+12], edx
	mov	ebp, ecx
	jle	SHORT $L86160
	push	esi
	push	edi
	xor	edi, edi
	inc	edi
$L86158:
; Line 2313
	mov	esi, DWORD PTR _objectactive[ebx*4]
; Line 2314
	imul	esi, 120				; 00000078H
	cmp	DWORD PTR _object[esi], ebp
	jne	SHORT $L86159
	mov	eax, DWORD PTR _tid$[esp+20]
	cmp	DWORD PTR _object[esi+88], eax
	jne	SHORT $L86159
; Line 2315
	mov	edx, DWORD PTR _object[esi+8]
; Line 2316
	mov	ecx, DWORD PTR _object[esi+4]
; Line 2320
	push	edi
	mov	DWORD PTR _object[esi+100], edi
	mov	DWORD PTR _object[esi+16], edi
	mov	DWORD PTR _object[esi+24], edi
	call	@AddLight@12
	mov	DWORD PTR _object[esi+80], eax
$L86159:
	inc	ebx
	cmp	ebx, DWORD PTR _nobjects
	jl	SHORT $L86158
	pop	edi
	pop	esi
$L86160:
	pop	ebp
	pop	ebx
; Line 2323
	pop	ecx
	ret	0
@ActivateTrapLine@8 ENDP
_TEXT	ENDS
PUBLIC	@Obj_FlameTrap@4
EXTRN	@ChangeLightRadius@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @Obj_FlameTrap@4
_TEXT	SEGMENT
@Obj_FlameTrap@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 2330
	imul	ecx, 120				; 00000078H
	push	ebx
	xor	ebx, ebx
	cmp	DWORD PTR _object[ecx+92], ebx
	push	esi
	je	SHORT $L86169
; Line 2331
	lea	esi, DWORD PTR _object[ecx+100]
	cmp	DWORD PTR [esi], ebx
	je	$L86191
; Line 2332
	lea	eax, DWORD PTR _object[ecx+36]
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [eax]
; Line 2333
	cmp	eax, 1
	jne	SHORT $L86171
; Line 2335
	mov	ecx, DWORD PTR _object[ecx+80]
	mov	DWORD PTR [esi], ebx
	pop	esi
	pop	ebx
	jmp	@AddUnLight@4
$L86171:
; Line 2336
	cmp	eax, 4
; Line 2337
	jmp	$L88631
$L86169:
; Line 2340
	cmp	DWORD PTR _object[ecx+100], ebx
	jne	$L86175
; Line 2341
	cmp	DWORD PTR _object[ecx+96], 2
; Line 2343
	mov	edx, DWORD PTR _object[ecx+8]
	mov	eax, DWORD PTR _object[ecx+4]
	push	5
	pop	esi
	jne	SHORT $L86176
	dec	eax
	dec	eax
	imul	eax, 112				; 00000070H
	add	eax, edx
	lea	edx, DWORD PTR _dPlayer[eax]
	lea	eax, DWORD PTR _dMonster[eax*4]
$L86177:
; Line 2345
	cmp	BYTE PTR [edx], bl
	jne	SHORT $L86181
	cmp	DWORD PTR [eax], ebx
	je	SHORT $L86180
$L86181:
; Line 2346
	mov	DWORD PTR _object[ecx+100], 1
$L86180:
; Line 2347
	add	eax, 448				; 000001c0H
	add	edx, 112				; 00000070H
	dec	esi
	jne	SHORT $L86177
; Line 2349
	jmp	SHORT $L86185
$L86176:
; Line 2350
	imul	eax, 112				; 00000070H
; Line 2351
	dec	edx
	dec	edx
	add	eax, edx
	lea	edx, DWORD PTR _dPlayer[eax]
	lea	eax, DWORD PTR _dMonster[eax*4]
$L86183:
; Line 2353
	cmp	BYTE PTR [edx], bl
	jne	SHORT $L86187
	cmp	DWORD PTR [eax], ebx
	je	SHORT $L86186
$L86187:
; Line 2354
	mov	DWORD PTR _object[ecx+100], 1
$L86186:
; Line 2355
	add	eax, 4
	inc	edx
	dec	esi
	jne	SHORT $L86183
$L86185:
; Line 2358
	cmp	DWORD PTR _object[ecx+100], ebx
	je	SHORT $L86191
; Line 2359
	mov	edx, DWORD PTR _object[ecx+88]
	mov	ecx, DWORD PTR _object[ecx]
	pop	esi
	pop	ebx
	jmp	@ActivateTrapLine@8
$L86175:
; Line 2361
	lea	eax, DWORD PTR _object[ecx+36]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _object[ecx+32]
	jne	SHORT $L86190
; Line 2362
	mov	DWORD PTR [eax], 11			; 0000000bH
$L86190:
; Line 2363
	mov	eax, DWORD PTR [eax]
	cmp	eax, 5
$L88631:
	jg	SHORT $L86191
; Line 2364
	mov	ecx, DWORD PTR _object[ecx+80]
	pop	esi
	mov	edx, eax
	pop	ebx
	jmp	@ChangeLightRadius@8
$L86191:
	pop	esi
	pop	ebx
; Line 2366
	ret	0
@Obj_FlameTrap@4 ENDP
_TEXT	ENDS
PUBLIC	@Obj_Trap@4
EXTRN	@PlaySfxLoc@12:NEAR
EXTRN	@GetDirection@16:NEAR
EXTRN	_deltaload:DWORD
; Function compile flags: /Ogsy
;	COMDAT @Obj_Trap@4
_TEXT	SEGMENT
_sx$ = -16
_sy$ = -12
_dx$ = -4
@Obj_Trap@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 2369
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	push	edi
	mov	edi, ecx
; Line 2375
	imul	edi, 120				; 00000078H
	cmp	DWORD PTR _object[edi+100], 0
	jne	$L86213
; Line 2376
	mov	eax, DWORD PTR _object[edi+88]
	mov	ecx, DWORD PTR _object[edi+92]
	imul	eax, 112				; 00000070H
	movsx	esi, BYTE PTR _dObject[eax+ecx]
	dec	esi
; Line 2377
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi]
	cmp	eax, 43					; 0000002bH
	jg	$L88635
	cmp	eax, 42					; 0000002aH
	jge	$L86209
	test	eax, eax
	jle	$L86213
	cmp	eax, 2
	jle	$L86209
	cmp	eax, 3
	jle	$L86213
	cmp	eax, 7
	jle	SHORT $L86211
	cmp	eax, 28					; 0000001cH
	jne	$L86213
$L86211:
; Line 2393
	cmp	BYTE PTR _object[esi+64], 0
	jne	$L86213
$L86212:
; Line 2399
	mov	eax, DWORD PTR _object[edi+4]
	push	ebx
	mov	DWORD PTR _object[edi+100], 1
; Line 2402
	mov	ebx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	mov	DWORD PTR _sx$[ebp], eax
	mov	eax, DWORD PTR _object[edi+8]
; Line 2403
	lea	edx, DWORD PTR [ebx+1]
	mov	DWORD PTR _sy$[ebp], eax
	lea	eax, DWORD PTR [ebx-1]
	cmp	eax, edx
	mov	DWORD PTR _dx$[ebp], ecx
	mov	DWORD PTR -28+[ebp], edx
	jg	SHORT $L86216
; Line 2404
	lea	edx, DWORD PTR [ecx-1]
	inc	ecx
	mov	DWORD PTR -20+[ebp], edx
	mov	DWORD PTR -8+[ebp], ecx
$L86214:
	mov	ecx, DWORD PTR -20+[ebp]
	cmp	ecx, DWORD PTR -8+[ebp]
	jg	SHORT $L86215
	mov	edx, ecx
	imul	edx, 112				; 00000070H
	lea	edx, DWORD PTR _dPlayer[edx+eax]
	jmp	SHORT $L86217
$L88635:
; Line 2377
	cmp	eax, 48					; 00000030H
	je	SHORT $L86211
	cmp	eax, 73					; 00000049H
	jle	$L86213
	cmp	eax, 75					; 0000004bH
	jg	SHORT $L86213
$L86209:
; Line 2384
	cmp	DWORD PTR _object[esi+100], 0
	je	SHORT $L86213
; Line 2386
	jmp	SHORT $L86212
$L88642:
; Line 2404
	mov	edx, DWORD PTR -24+[ebp]
$L86217:
; Line 2405
	cmp	BYTE PTR [edx], 0
	je	SHORT $L86218
; Line 2406
	mov	DWORD PTR _dx$[ebp], ecx
; Line 2407
	mov	ebx, eax
$L86218:
	inc	ecx
	add	edx, 112				; 00000070H
	cmp	ecx, DWORD PTR -8+[ebp]
	mov	DWORD PTR -24+[ebp], edx
	jle	SHORT $L88642
$L86215:
; Line 2403
	inc	eax
	cmp	eax, DWORD PTR -28+[ebp]
	jle	SHORT $L86214
	mov	ecx, DWORD PTR _dx$[ebp]
$L86216:
; Line 2411
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86221
; Line 2412
	mov	edx, DWORD PTR _sy$[ebp]
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR _sx$[ebp]
	call	@GetDirection@16
; Line 2413
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _sx$[ebp]
	push	0
	push	0
	push	-1
	push	1
	push	DWORD PTR _object[edi+96]
	push	eax
	push	ebx
	push	DWORD PTR _dx$[ebp]
	call	@AddMissile@40
; Line 2414
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	72					; 00000048H
	pop	ecx
	call	@PlaySfxLoc@12
$L86221:
; Line 2416
	and	DWORD PTR _object[esi+72], 0
	pop	ebx
$L86213:
	pop	edi
	pop	esi
; Line 2419
	leave
	ret	0
@Obj_Trap@4 ENDP
_TEXT	ENDS
PUBLIC	@Obj_BCrossDamage@4
EXTRN	_drawhpflag:DWORD
EXTRN	@SyncPlrKill@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @Obj_BCrossDamage@4
_TEXT	SEGMENT
_i$ = -4
_v6$ = -4
_damage$ = -20
@Obj_BCrossDamage@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 2423
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
; Line 2434
	mov	esi, DWORD PTR _myplr
	push	edi
	imul	esi, 21720				; 000054d8H
; Line 2436
	push	8
	mov	DWORD PTR _i$[ebp], ecx
	pop	eax
	mov	DWORD PTR _damage$[ebp], 6
	cmp	DWORD PTR _plr[esi], eax
	mov	DWORD PTR _damage$[ebp+4], eax
; Line 2437
	mov	DWORD PTR _damage$[ebp+8], 10		; 0000000aH
; Line 2438
	mov	DWORD PTR _damage$[ebp+12], 12		; 0000000cH
; Line 2439
	je	$L86234
; Line 2440
	movsx	ecx, BYTE PTR _plr[esi+458]
; Line 2441
	test	ecx, ecx
	jle	SHORT $L86233
; Line 2442
	movzx	eax, BYTE PTR _leveltype
	push	100					; 00000064H
	lea	ebx, DWORD PTR _damage$[ebp+eax*4-4]
	mov	edi, DWORD PTR [ebx]
	mov	eax, edi
	imul	eax, ecx
	cdq
	pop	ecx
	idiv	ecx
	sub	edi, eax
	mov	DWORD PTR [ebx], edi
$L86233:
; Line 2443
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _plr[esi+56]
	imul	eax, 120				; 00000078H
	cmp	edx, DWORD PTR _object[eax+4]
	jne	$L86234
	mov	eax, DWORD PTR _object[eax+8]
	mov	ecx, DWORD PTR _plr[esi+60]
	dec	eax
	cmp	ecx, eax
	jne	SHORT $L86234
; Line 2444
	movzx	eax, BYTE PTR _leveltype
	mov	edi, DWORD PTR _damage$[ebp+eax*4-4]
; Line 2445
	lea	eax, DWORD PTR _plr[esi+408]
; Line 2446
	sub	DWORD PTR _plr[esi+400], edi
	sub	DWORD PTR [eax], edi
	mov	eax, DWORD PTR [eax]
; Line 2447
	test	eax, -64				; ffffffc0H
	jg	SHORT $L86235
; Line 2448
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	call	@SyncPlrKill@8
; Line 2449
	mov	DWORD PTR _drawhpflag, 1
; Line 2450
	jmp	SHORT $L86234
$L86235:
; Line 2452
	mov	al, BYTE PTR _plr[esi+352]
	xor	ebx, ebx
	inc	ebx
	test	al, al
	jne	SHORT $L86236
; Line 2453
	mov	eax, 787				; 00000313H
; Line 2454
	jmp	SHORT $L86240
$L86236:
	cmp	al, bl
	jne	SHORT $L86238
; Line 2455
	mov	eax, 678				; 000002a6H
; Line 2456
	jmp	SHORT $L86240
$L86238:
	cmp	al, 2
; Line 2457
	mov	eax, 575				; 0000023fH
	je	SHORT $L86240
	mov	eax, DWORD PTR _v6$[ebp]
$L86240:
; Line 2459
	push	ecx
	mov	ecx, eax
	call	@PlaySfxLoc@12
; Line 2460
	mov	DWORD PTR _drawhpflag, ebx
$L86234:
	pop	edi
	pop	esi
	pop	ebx
; Line 2463
	leave
	ret	0
@Obj_BCrossDamage@4 ENDP
_TEXT	ENDS
PUBLIC	_ProcessObjects
; Function compile flags: /Ogsy
;	COMDAT _ProcessObjects
_TEXT	SEGMENT
_ProcessObjects PROC NEAR				; COMDAT
; Line 2466
	push	ebx
	push	ebp
; Line 2475
	xor	ebp, ebp
	xor	ebx, ebx
; Line 2476
	cmp	DWORD PTR _nobjects, ebp
	jle	$LABEL_45$86276
	push	esi
	push	edi
$L86251:
; Line 2478
	mov	edi, DWORD PTR _objectactive[ebx*4]
; Line 2479
	mov	esi, edi
; Line 2480
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi]
; Line 2481
	cmp	eax, 48					; 00000030H
	jle	$L88652
; Line 2483
	cmp	eax, 75					; 0000004bH
	jg	SHORT $L86254
; Line 2484
	cmp	eax, 74					; 0000004aH
	jge	$LABEL_32$86256
; Line 2486
	cmp	eax, 49					; 00000031H
	jne	SHORT $L86257
; Line 2487
	mov	ecx, edi
	call	@Obj_FlameTrap@4
; Line 2488
	jmp	$LABEL_40$86258
$L86257:
; Line 2490
	cmp	eax, 52					; 00000034H
	jle	$LABEL_40$86258
; Line 2492
	cmp	eax, 54					; 00000036H
	jg	SHORT $L86260
; Line 2493
	mov	ecx, edi
	call	@Obj_Trap@4
; Line 2494
	jmp	$LABEL_40$86258
$L86260:
; Line 2496
	cmp	eax, 56					; 00000038H
	jle	$LABEL_40$86258
; Line 2498
	cmp	eax, 60					; 0000003cH
	jle	SHORT $LABEL_29$86263
; Line 2503
	cmp	eax, 65					; 00000041H
	je	$LABEL_28$86265
; Line 2504
	jmp	$LABEL_40$86258
$L86254:
; Line 2509
	cmp	eax, 84					; 00000054H
	jl	$LABEL_40$86258
; Line 2511
	cmp	eax, 85					; 00000055H
	jg	SHORT $L86267
; Line 2512
	mov	ecx, edi
	call	@Obj_Circle@4
; Line 2513
	jmp	$LABEL_40$86258
$L86267:
; Line 2514
	cmp	eax, 87					; 00000057H
	je	SHORT $L86269
; Line 2515
	cmp	eax, 91					; 0000005bH
	jne	SHORT $LABEL_40$86258
$LABEL_37$86271:
; Line 2554
	push	10					; 0000000aH
	mov	ecx, edi
	pop	edx
	call	@Obj_Light@8
; Line 2555
	mov	ecx, edi
	call	@Obj_BCrossDamage@4
; Line 2556
	jmp	SHORT $LABEL_40$86258
$L86269:
; Line 2519
	push	3
	jmp	SHORT $L88653
$L88652:
; Line 2536
	jne	SHORT $L86277
; Line 2537
	mov	ecx, edi
	call	@Obj_Sarc@4
; Line 2538
	jmp	SHORT $LABEL_40$86258
$L86277:
; Line 2540
	cmp	eax, 22					; 00000016H
	jle	SHORT $L86278
; Line 2541
	cmp	eax, 26					; 0000001aH
	je	SHORT $LABEL_37$86271
; Line 2542
	cmp	eax, 41					; 00000029H
	jle	SHORT $LABEL_40$86258
; Line 2544
	cmp	eax, 43					; 0000002bH
	jle	SHORT $LABEL_32$86256
; Line 2545
	cmp	eax, 47					; 0000002fH
	jg	SHORT $LABEL_40$86258
; Line 2546
	push	8
; Line 2547
	jmp	SHORT $L88653
$L86278:
; Line 2558
	cmp	eax, 20					; 00000014H
	jl	SHORT $L86283
$LABEL_29$86263:
; Line 2500
	mov	ecx, edi
	call	@Obj_StopAnim@4
; Line 2501
	jmp	SHORT $LABEL_40$86258
$L86283:
; Line 2560
	cmp	eax, ebp
	jne	SHORT $L88654
; Line 2561
	push	10					; 0000000aH
; Line 2562
	jmp	SHORT $L88653
$L88654:
; Line 2564
	jle	SHORT $LABEL_40$86258
; Line 2566
	cmp	eax, 2
	jg	SHORT $L86286
$LABEL_32$86256:
; Line 2550
	mov	ecx, edi
	call	@Obj_Door@4
; Line 2551
	jmp	SHORT $LABEL_40$86258
$L86286:
; Line 2568
	cmp	eax, 3
	je	SHORT $LABEL_28$86265
	cmp	eax, 9
	jne	SHORT $LABEL_40$86258
$LABEL_28$86265:
; Line 2506
	push	5
$L88653:
	mov	ecx, edi
	pop	edx
	call	@Obj_Light@8
$LABEL_40$86258:
; Line 2522
	cmp	DWORD PTR _object[esi+16], ebp
	je	SHORT $L86274
; Line 2523
	lea	eax, DWORD PTR _object[esi+28]
; Line 2524
	inc	DWORD PTR [eax]
; Line 2525
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _object[esi+24]
	jl	SHORT $L86274
; Line 2526
	mov	DWORD PTR [eax], ebp
; Line 2527
	lea	eax, DWORD PTR _object[esi+36]
; Line 2528
	inc	DWORD PTR [eax]
; Line 2529
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _object[esi+32]
	jle	SHORT $L86274
; Line 2530
	mov	DWORD PTR [eax], 1
$L86274:
; Line 2533
	inc	ebx
	cmp	ebx, DWORD PTR _nobjects
	jl	$L86251
	pop	edi
	pop	esi
$LABEL_45$86276:
; Line 2573
	xor	edx, edx
; Line 2574
	cmp	DWORD PTR _nobjects, ebp
	jle	SHORT $L86290
$L86289:
; Line 2575
	mov	ecx, DWORD PTR _objectactive[edx*4]
	mov	eax, ecx
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax+48], ebp
	je	SHORT $L86291
; Line 2576
	call	@DeleteObject_@8
; Line 2577
	xor	edx, edx
; Line 2578
	jmp	SHORT $L86292
$L86291:
; Line 2579
	inc	edx
$L86292:
; Line 2574
	cmp	edx, DWORD PTR _nobjects
	jl	SHORT $L86289
$L86290:
	pop	ebp
	pop	ebx
; Line 2582
	ret	0
_ProcessObjects ENDP
_TEXT	ENDS
EXTRN	@gendung_get_dpiece_num_from_coord@8:NEAR
EXTRN	_dpiece_defs_map_1:BYTE
EXTRN	_pLevelPieces:DWORD
; Function compile flags: /Ogsy
;	COMDAT @ObjSetMicro@12
_TEXT	SEGMENT
_pn$ = 8
@ObjSetMicro@12 PROC NEAR				; COMDAT
; _dx$ = ecx
; _dy$ = edx
; Line 2585
	push	esi
; Line 2593
	mov	esi, ecx
	imul	esi, 112				; 00000070H
	mov	eax, DWORD PTR _pn$[esp]
	add	esi, edx
	push	edi
	mov	DWORD PTR _dPiece[esi*4], eax
; Line 2594
	lea	esi, DWORD PTR [eax-1]
; Line 2595
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
	add	eax, OFFSET FLAT:_dpiece_defs_map_1
; Line 2596
	cmp	BYTE PTR _leveltype, 4
	jne	SHORT $L86307
; Line 2597
	shl	esi, 5
	add	esi, DWORD PTR _pLevelPieces
; Line 2598
	xor	ecx, ecx
$L86309:
; Line 2600
	mov	edx, ecx
	mov	edi, ecx
	and	edx, 14					; 0000000eH
	and	edi, 1
	sub	edi, edx
	mov	dx, WORD PTR [esi+edi*2+28]
	mov	WORD PTR [eax+ecx*2], dx
; Line 2601
	inc	ecx
; Line 2602
	cmp	ecx, 16					; 00000010H
	jl	SHORT $L86309
; Line 2603
	jmp	SHORT $L86318
$L86307:
; Line 2604
	mov	edx, DWORD PTR _pLevelPieces
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	edx, DWORD PTR [edx+ecx*4]
; Line 2605
	xor	ecx, ecx
$L86316:
; Line 2607
	mov	esi, ecx
	mov	edi, ecx
	and	esi, 14					; 0000000eH
	and	edi, 1
	sub	edi, esi
	mov	si, WORD PTR [edx+edi*2+16]
	mov	WORD PTR [eax+ecx*2], si
; Line 2608
	inc	ecx
; Line 2609
	cmp	ecx, 10					; 0000000aH
	jl	SHORT $L86316
$L86318:
	pop	edi
	pop	esi
; Line 2611
	ret	4
@ObjSetMicro@12 ENDP
_TEXT	ENDS
PUBLIC	@objects_set_door_piece@8
; Function compile flags: /Ogsy
;	COMDAT @objects_set_door_piece@8
_TEXT	SEGMENT
@objects_set_door_piece@8 PROC NEAR			; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2614
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
; Line 2623
	mov	eax, edi
; Line 2624
	mov	ecx, DWORD PTR _pLevelPieces
	imul	eax, 112				; 00000070H
	add	eax, esi
	mov	eax, DWORD PTR _dPiece[eax*4]
	dec	eax
	movzx	eax, ax
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]
; Line 2626
	mov	ecx, edi
	mov	bx, WORD PTR [eax+16]
	mov	bp, WORD PTR [eax+18]
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
; Line 2627
	mov	edx, esi
	mov	ecx, edi
	mov	WORD PTR _dpiece_defs_map_1[eax], bx
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
	pop	edi
	pop	esi
	mov	WORD PTR _dpiece_defs_map_1[eax+2], bp
	pop	ebp
	pop	ebx
; Line 2628
	ret	0
@objects_set_door_piece@8 ENDP
_TEXT	ENDS
PUBLIC	@ObjSetMini@12
EXTRN	_pMegaTiles:DWORD
; Function compile flags: /Ogsy
;	COMDAT @ObjSetMini@12
_TEXT	SEGMENT
_v$ = 8
_v5$ = 8
_v7$ = -4
_v8$ = -8
@ObjSetMini@12 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2631
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2642
	movzx	eax, WORD PTR _v$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _pMegaTiles
	push	edi
; Line 2655
	lea	ebx, DWORD PTR [edx+edx+16]
	lea	eax, DWORD PTR [esi+eax*8-8]
; Line 2656
	mov	edx, ebx
	mov	si, WORD PTR [eax]
	inc	eax
	movzx	esi, si
	inc	eax
	inc	esi
	mov	DWORD PTR _v5$[ebp], esi
	push	esi
	mov	di, WORD PTR [eax]
	inc	eax
	mov	WORD PTR _v5$[ebp], di
	inc	eax
	inc	DWORD PTR _v5$[ebp]
	mov	edi, DWORD PTR _v5$[ebp]
	mov	DWORD PTR _v7$[ebp], edi
	mov	di, WORD PTR [eax]
	mov	WORD PTR _v5$[ebp], di
	mov	ax, WORD PTR [eax+2]
	inc	DWORD PTR _v5$[ebp]
	mov	edi, DWORD PTR _v5$[ebp]
	mov	WORD PTR _v5$[ebp], ax
	mov	DWORD PTR _v8$[ebp], edi
	lea	edi, DWORD PTR [ecx+ecx+16]
	mov	ecx, edi
	call	@ObjSetMicro@12
; Line 2657
	lea	esi, DWORD PTR [edi+1]
	mov	edx, ebx
	push	DWORD PTR _v7$[ebp]
	mov	ecx, esi
	inc	ebx
	call	@ObjSetMicro@12
; Line 2658
	mov	edx, ebx
	mov	ecx, edi
	push	DWORD PTR _v8$[ebp]
	call	@ObjSetMicro@12
	mov	eax, DWORD PTR _v5$[ebp]
; Line 2659
	mov	edx, ebx
	inc	eax
	mov	ecx, esi
	push	eax
	call	@ObjSetMicro@12
	pop	edi
	pop	esi
	pop	ebx
; Line 2660
	leave
	ret	4
@ObjSetMini@12 ENDP
_TEXT	ENDS
PUBLIC	@ObjL1Special@16
EXTRN	_dArch:BYTE
; Function compile flags: /Ogsy
;	COMDAT @ObjL1Special@16
_TEXT	SEGMENT
_x2$ = 8
_y2$ = 12
@ObjL1Special@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 2671
	cmp	edx, DWORD PTR _y2$[esp-4]
	push	ebx
	mov	ebx, edx
	jg	$L86374
	push	esi
	push	edi
$L86372:
; Line 2672
	cmp	ecx, DWORD PTR _x2$[esp+8]
	jg	$L86381
; Line 2673
	mov	eax, ecx
	imul	eax, 112				; 00000070H
	add	eax, ebx
; Line 2674
	lea	edx, DWORD PTR _dArch[eax]
; Line 2675
	lea	edi, DWORD PTR _dPiece[eax*4]
; Line 2676
	mov	eax, DWORD PTR _x2$[esp+8]
	sub	eax, ecx
	inc	eax
$L86379:
; Line 2678
	mov	esi, DWORD PTR [edi]
; Line 2679
	and	BYTE PTR [edx], 0
; Line 2680
	cmp	esi, 12					; 0000000cH
	jne	SHORT $L86382
; Line 2681
	mov	BYTE PTR [edx], 1
$L86382:
; Line 2682
	cmp	esi, 11					; 0000000bH
	jne	SHORT $L86383
; Line 2683
	mov	BYTE PTR [edx], 2
$L86383:
; Line 2684
	cmp	esi, 71					; 00000047H
	jne	SHORT $L86384
; Line 2685
	mov	BYTE PTR [edx], 1
$L86384:
; Line 2686
	cmp	esi, 259				; 00000103H
	jne	SHORT $L86385
; Line 2687
	mov	BYTE PTR [edx], 5
$L86385:
; Line 2688
	cmp	esi, 249				; 000000f9H
	jne	SHORT $L86386
; Line 2689
	mov	BYTE PTR [edx], 2
$L86386:
; Line 2690
	cmp	esi, 325				; 00000145H
	jne	SHORT $L86387
; Line 2691
	mov	BYTE PTR [edx], 2
$L86387:
; Line 2692
	cmp	esi, 321				; 00000141H
	jne	SHORT $L86388
; Line 2693
	mov	BYTE PTR [edx], 1
$L86388:
; Line 2694
	cmp	esi, 255				; 000000ffH
	jne	SHORT $L86389
; Line 2695
	mov	BYTE PTR [edx], 4
$L86389:
; Line 2696
	cmp	esi, 211				; 000000d3H
	jne	SHORT $L86390
; Line 2697
	mov	BYTE PTR [edx], 1
$L86390:
; Line 2698
	cmp	esi, 344				; 00000158H
	jne	SHORT $L86391
; Line 2699
	mov	BYTE PTR [edx], 2
$L86391:
; Line 2700
	cmp	esi, 341				; 00000155H
	jne	SHORT $L86392
; Line 2701
	mov	BYTE PTR [edx], 1
$L86392:
; Line 2702
	cmp	esi, 331				; 0000014bH
	jne	SHORT $L86393
; Line 2703
	mov	BYTE PTR [edx], 2
$L86393:
; Line 2704
	cmp	esi, 418				; 000001a2H
	jne	SHORT $L86394
; Line 2705
	mov	BYTE PTR [edx], 1
$L86394:
; Line 2706
	cmp	esi, 421				; 000001a5H
	jne	SHORT $L86395
; Line 2707
	mov	BYTE PTR [edx], 2
$L86395:
; Line 2708
	add	edi, 448				; 000001c0H
; Line 2709
	add	edx, 112				; 00000070H
; Line 2710
	dec	eax
; Line 2711
	jne	$L86379
$L86381:
; Line 2671
	inc	ebx
	cmp	ebx, DWORD PTR _y2$[esp+8]
	jle	$L86372
	pop	edi
	pop	esi
$L86374:
	pop	ebx
; Line 2714
	ret	8
@ObjL1Special@16 ENDP
_TEXT	ENDS
PUBLIC	@ObjL2Special@16
; Function compile flags: /Ogsy
;	COMDAT @ObjL2Special@16
_TEXT	SEGMENT
_x1$ = -4
_y1$ = -8
_x2$ = 8
_y2$ = 12
@ObjL2Special@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 2717
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2734
	cmp	edx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _y1$[ebp], edx
	mov	DWORD PTR _x1$[ebp], ecx
	jg	$L86438
	push	ebx
	push	esi
	push	edi
	mov	ecx, 448				; 000001c0H
$L86419:
; Line 2736
	mov	eax, DWORD PTR _x1$[ebp]
	cmp	eax, DWORD PTR _x2$[ebp]
	jg	SHORT $L86428
; Line 2737
	imul	eax, 112				; 00000070H
	add	eax, edx
; Line 2738
	lea	esi, DWORD PTR _dArch[eax]
; Line 2739
	lea	edi, DWORD PTR _dPiece[eax*4]
; Line 2740
	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	inc	eax
$L86426:
; Line 2742
	mov	ebx, DWORD PTR [edi]
; Line 2743
	and	BYTE PTR [esi], 0
; Line 2744
	cmp	ebx, 541				; 0000021dH
	jne	SHORT $L86429
; Line 2745
	mov	BYTE PTR [esi], 5
$L86429:
; Line 2746
	cmp	ebx, 178				; 000000b2H
	jne	SHORT $L86430
; Line 2747
	mov	BYTE PTR [esi], 5
$L86430:
; Line 2748
	cmp	ebx, 551				; 00000227H
	jne	SHORT $L86431
; Line 2749
	mov	BYTE PTR [esi], 5
$L86431:
; Line 2750
	cmp	ebx, 542				; 0000021eH
	jne	SHORT $L86432
; Line 2751
	mov	BYTE PTR [esi], 6
$L86432:
; Line 2752
	cmp	ebx, 553				; 00000229H
	jne	SHORT $L86433
; Line 2753
	mov	BYTE PTR [esi], 6
$L86433:
; Line 2754
	cmp	ebx, 13					; 0000000dH
	jne	SHORT $L86434
; Line 2755
	mov	BYTE PTR [esi], 5
$L86434:
; Line 2756
	cmp	ebx, 17					; 00000011H
	jne	SHORT $L86435
; Line 2757
	mov	BYTE PTR [esi], 6
$L86435:
; Line 2758
	add	edi, ecx
; Line 2759
	add	esi, 112				; 00000070H
; Line 2760
	dec	eax
; Line 2761
	jne	SHORT $L86426
$L86428:
; Line 2763
	inc	edx
; Line 2764
	cmp	edx, DWORD PTR _y2$[ebp]
	jle	SHORT $L86419
; Line 2765
	mov	ebx, DWORD PTR _y1$[ebp]
$L86436:
; Line 2766
	mov	eax, DWORD PTR _x1$[ebp]
	cmp	eax, DWORD PTR _x2$[ebp]
	jg	SHORT $L86444
; Line 2767
	imul	eax, 112				; 00000070H
	add	eax, ebx
; Line 2768
	lea	edx, DWORD PTR _dArch[eax+2]
; Line 2769
	lea	esi, DWORD PTR _dPiece[eax*4]
; Line 2770
	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	inc	eax
$L86442:
; Line 2772
	mov	edi, DWORD PTR [esi]
; Line 2773
	cmp	edi, 132				; 00000084H
	jne	SHORT $L86445
; Line 2774
	mov	BYTE PTR [edx-1], 2
; Line 2775
	mov	BYTE PTR [edx], 1
$L86445:
; Line 2777
	cmp	edi, 135				; 00000087H
	je	SHORT $L86447
	cmp	edi, 139				; 0000008bH
	jne	SHORT $L86446
$L86447:
; Line 2778
	mov	BYTE PTR [edx+110], 3
; Line 2779
	mov	BYTE PTR [edx+222], 4
$L86446:
; Line 2781
	add	esi, ecx
; Line 2782
	add	edx, 112				; 00000070H
; Line 2783
	dec	eax
; Line 2784
	jne	SHORT $L86442
$L86444:
; Line 2765
	inc	ebx
	cmp	ebx, DWORD PTR _y2$[ebp]
	jle	SHORT $L86436
	pop	edi
	pop	esi
	pop	ebx
$L86438:
; Line 2788
	leave
	ret	8
@ObjL2Special@16 ENDP
_TEXT	ENDS
PUBLIC	@DoorSet@12
; Function compile flags: /Ogsy
;	COMDAT @DoorSet@12
_TEXT	SEGMENT
_dy$ = 8
@DoorSet@12 PROC NEAR					; COMDAT
; _oi$ = ecx
; _dx$ = edx
; Line 2791
	push	ebx
	push	ebp
	push	esi
	mov	esi, edx
; Line 2799
	mov	eax, esi
	push	edi
	imul	eax, 112				; 00000070H
	mov	edi, DWORD PTR _dy$[esp+12]
	mov	ebp, ecx
	add	eax, edi
	mov	ebx, DWORD PTR _dPiece[eax*4]
; Line 2800
	cmp	ebx, 43					; 0000002bH
	jne	SHORT $L86459
; Line 2801
	push	392					; 00000188H
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86459:
; Line 2802
	cmp	ebx, 45					; 0000002dH
	jne	SHORT $L86460
; Line 2803
	push	394					; 0000018aH
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86460:
; Line 2804
	cmp	ebx, 50					; 00000032H
	jne	SHORT $LABEL_10$86462
; Line 2806
	imul	ebp, 120				; 00000078H
	add	ebp, OFFSET FLAT:_object
; Line 2807
	cmp	DWORD PTR [ebp], 1
	jne	SHORT $L86463
; Line 2808
	push	411					; 0000019bH
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86463:
; Line 2809
	cmp	DWORD PTR [ebp], 2
	jne	$L86477
; Line 2810
	push	412					; 0000019cH
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$LABEL_10$86462:
; Line 2812
	cmp	ebx, 54					; 00000036H
	jne	SHORT $L86465
; Line 2813
	push	397					; 0000018dH
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86465:
; Line 2814
	cmp	ebx, 55					; 00000037H
	jne	SHORT $L86466
; Line 2815
	push	398					; 0000018eH
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86466:
; Line 2816
	cmp	ebx, 61					; 0000003dH
	jne	SHORT $L86467
; Line 2817
	push	399					; 0000018fH
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86467:
; Line 2818
	cmp	ebx, 67					; 00000043H
	jne	SHORT $L86468
; Line 2819
	push	400					; 00000190H
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86468:
; Line 2820
	cmp	ebx, 68					; 00000044H
	jne	SHORT $L86469
; Line 2821
	push	401					; 00000191H
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86469:
; Line 2822
	cmp	ebx, 69					; 00000045H
	jne	SHORT $L86470
; Line 2823
	push	403					; 00000193H
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86470:
; Line 2824
	cmp	ebx, 70					; 00000046H
	jne	SHORT $L86471
; Line 2825
	push	404					; 00000194H
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86471:
; Line 2826
	cmp	ebx, 72					; 00000048H
	jne	SHORT $L86472
; Line 2827
	push	406					; 00000196H
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86472:
; Line 2828
	cmp	ebx, 212				; 000000d4H
	jne	SHORT $L86473
; Line 2829
	push	407					; 00000197H
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86473:
; Line 2830
	cmp	ebx, 354				; 00000162H
	jne	SHORT $L86474
; Line 2831
	push	409					; 00000199H
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86474:
; Line 2832
	cmp	ebx, 355				; 00000163H
	jne	SHORT $L86475
; Line 2833
	push	410					; 0000019aH
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86475:
; Line 2834
	cmp	ebx, 411				; 0000019bH
	mov	ebp, 396				; 0000018cH
	jne	SHORT $L86476
; Line 2835
	push	ebp
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86476:
; Line 2836
	cmp	ebx, 412				; 0000019cH
	jne	SHORT $L86477
; Line 2837
	push	ebp
	mov	edx, edi
	mov	ecx, esi
	call	@ObjSetMicro@12
$L86477:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2839
	ret	4
@DoorSet@12 ENDP
_TEXT	ENDS
PUBLIC	_RedoPlayerVision
EXTRN	@ChangeVisionXY@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT _RedoPlayerVision
_TEXT	SEGMENT
_RedoPlayerVision PROC NEAR				; COMDAT
; Line 2842
	push	esi
; Line 2845
	mov	esi, OFFSET FLAT:_plr+60
$L86480:
; Line 2847
	cmp	BYTE PTR [esi-31], 0
	je	SHORT $L86485
; Line 2848
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [esi-8]
	jne	SHORT $L86485
; Line 2849
	push	DWORD PTR [esi]
	mov	edx, DWORD PTR [esi-4]
	mov	ecx, DWORD PTR [esi+100]
	call	@ChangeVisionXY@12
$L86485:
; Line 2851
	add	esi, 21720				; 000054d8H
; Line 2852
	lea	eax, DWORD PTR [esi-8]
	cmp	eax, OFFSET FLAT:_plr+86932
	jl	SHORT $L86480
	pop	esi
; Line 2853
	ret	0
_RedoPlayerVision ENDP
_TEXT	ENDS
PUBLIC	@OperateL1RDoor@12
EXTRN	@NetSendCmdParam1@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @OperateL1RDoor@12
_TEXT	SEGMENT
_pnum$ = -12
_oi$ = -8
_sendflag$ = 8
@OperateL1RDoor@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _oi$ = edx
; Line 2856
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
; Line 2869
	mov	esi, edx
	push	edi
	imul	esi, 120				; 00000078H
	mov	DWORD PTR _oi$[ebp], edx
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	eax, DWORD PTR _object[esi+100]
; Line 2870
	cmp	eax, 2
	je	$L86503
; Line 2872
	mov	ebx, DWORD PTR _object[esi+8]
	mov	edi, DWORD PTR _object[esi+4]
; Line 2873
	test	eax, eax
	mov	DWORD PTR -4+[ebp], ebx
	je	$L86504
; Line 2874
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86505
; Line 2875
	push	ebx
	push	19					; 00000013H
	mov	edx, edi
	pop	ecx
	call	@PlaySfxLoc@12
$L86505:
; Line 2876
	mov	ebx, edi
	imul	ebx, 112				; 00000070H
	add	ebx, DWORD PTR -4+[ebp]
; Line 2877
	cmp	BYTE PTR _dDead[ebx], 0
	jne	$L86507
	cmp	DWORD PTR _dMonster[ebx*4], 0
	jne	$L86507
	cmp	BYTE PTR _dItem[ebx], 0
	jne	SHORT $L86507
; Line 2881
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L86508
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86508
; Line 2882
	push	DWORD PTR _oi$[ebp]
	xor	ecx, ecx
	mov	dl, 44					; 0000002cH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86508:
; Line 2886
	push	DWORD PTR _object[esi+88]
	mov	edx, DWORD PTR -4+[ebp]
	and	DWORD PTR _object[esi+100], 0
	mov	ecx, edi
	mov	BYTE PTR _object[esi+64], 3
	call	@ObjSetMicro@12
; Line 2887
	mov	eax, DWORD PTR _object[esi+92]
; Line 2889
	mov	edx, DWORD PTR -4+[ebp]
	cmp	eax, 50					; 00000032H
	lea	ecx, DWORD PTR [edi-1]
	jne	SHORT $L86509
; Line 2888
	cmp	DWORD PTR _dPiece[ebx*4-448], 396	; 0000018cH
	jne	SHORT $L86510
; Line 2889
	push	411					; 0000019bH
; Line 2890
	jmp	SHORT $L88691
$L86510:
; Line 2891
	push	50					; 00000032H
; Line 2892
	jmp	SHORT $L88691
$L86509:
; Line 2893
	push	eax
$L88691:
	call	@ObjSetMicro@12
; Line 2895
	add	DWORD PTR _object[esi+36], -2		; fffffffeH
; Line 2896
	and	DWORD PTR _object[esi+68], 0
; Line 2897
	jmp	$L86513
$L86507:
; Line 2878
	mov	DWORD PTR _object[esi+100], 2
; Line 2879
	jmp	$L86516
$L86504:
; Line 2898
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86514
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86514
; Line 2899
	xor	ecx, ecx
	push	edx
	mov	dl, 43					; 0000002bH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86514:
; Line 2900
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86515
; Line 2901
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	20					; 00000014H
	pop	ecx
	call	@PlaySfxLoc@12
$L86515:
; Line 2902
	push	395					; 0000018bH
	mov	edx, ebx
	mov	ecx, edi
	call	@ObjSetMicro@12
; Line 2903
	mov	eax, edi
; Line 2904
	lea	edx, DWORD PTR [ebx-1]
	imul	eax, 112				; 00000070H
	mov	ecx, edi
	mov	BYTE PTR _dArch[eax+ebx], 8
	call	@objects_set_door_piece@8
; Line 2907
	mov	ecx, DWORD PTR _oi$[ebp]
	add	DWORD PTR _object[esi+36], 2
	push	ebx
	lea	edx, DWORD PTR [edi-1]
	mov	DWORD PTR _object[esi+68], 1
	call	@DoorSet@12
; Line 2908
	mov	DWORD PTR _object[esi+100], 1
; Line 2909
	mov	BYTE PTR _object[esi+64], 2
$L86513:
; Line 2911
	call	_RedoPlayerVision
; Line 2912
	jmp	SHORT $L86516
$L86503:
; Line 2914
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86516
; Line 2915
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
$L86516:
	pop	edi
	pop	esi
	pop	ebx
; Line 2916
	leave
	ret	4
@OperateL1RDoor@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateL1LDoor@12
; Function compile flags: /Ogsy
;	COMDAT @OperateL1LDoor@12
_TEXT	SEGMENT
_pnum$ = -8
_oi$ = -4
_sendflag$ = 8
@OperateL1LDoor@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _oi$ = edx
; Line 2920
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 2933
	mov	esi, edx
	push	edi
	imul	esi, 120				; 00000078H
	mov	DWORD PTR _oi$[ebp], edx
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	eax, DWORD PTR _object[esi+100]
; Line 2934
	cmp	eax, 2
	je	$L86532
; Line 2935
	mov	ebx, DWORD PTR _object[esi+4]
; Line 2936
	mov	edi, DWORD PTR _object[esi+8]
; Line 2937
	test	eax, eax
	je	$L86533
; Line 2938
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86534
; Line 2939
	push	edi
	push	19					; 00000013H
	mov	edx, ebx
	pop	ecx
	call	@PlaySfxLoc@12
	mov	ecx, DWORD PTR _pnum$[ebp]
$L86534:
; Line 2940
	mov	eax, ebx
	imul	eax, 112				; 00000070H
	add	eax, edi
; Line 2941
	cmp	BYTE PTR _dDead[eax], 0
	jne	$L86536
	mov	edx, eax
	shl	edx, 2
	mov	DWORD PTR -8+[ebp], edx
	cmp	DWORD PTR _dMonster[edx], 0
	jne	$L86536
	cmp	BYTE PTR _dItem[eax], 0
	jne	SHORT $L86536
; Line 2945
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86537
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86537
; Line 2946
	push	DWORD PTR _oi$[ebp]
	xor	ecx, ecx
	mov	dl, 44					; 0000002cH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86537:
; Line 2950
	push	DWORD PTR _object[esi+88]
	and	DWORD PTR _object[esi+100], 0
	mov	edx, edi
	mov	ecx, ebx
	mov	BYTE PTR _object[esi+64], 3
	call	@ObjSetMicro@12
; Line 2951
	mov	eax, DWORD PTR _object[esi+92]
; Line 2953
	lea	edx, DWORD PTR [edi-1]
	cmp	eax, 50					; 00000032H
	mov	ecx, ebx
	jne	SHORT $L86538
	mov	eax, DWORD PTR -8+[ebp]
	cmp	DWORD PTR _dPiece[eax-4], 396		; 0000018cH
	jne	SHORT $L86539
	push	412					; 0000019cH
; Line 2954
	jmp	SHORT $L88694
$L86539:
; Line 2955
	push	50					; 00000032H
; Line 2956
	jmp	SHORT $L88694
$L86538:
; Line 2957
	push	eax
$L88694:
	call	@ObjSetMicro@12
; Line 2959
	add	DWORD PTR _object[esi+36], -2		; fffffffeH
; Line 2960
	and	DWORD PTR _object[esi+68], 0
; Line 2961
	jmp	$L86542
$L86536:
; Line 2942
	mov	DWORD PTR _object[esi+100], 2
; Line 2943
	jmp	$L86547
$L86533:
; Line 2962
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86543
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86543
; Line 2963
	xor	ecx, ecx
	push	edx
	mov	dl, 43					; 0000002bH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86543:
; Line 2964
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86544
; Line 2965
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	20					; 00000014H
	pop	ecx
	call	@PlaySfxLoc@12
$L86544:
; Line 2966
	cmp	DWORD PTR _object[esi+88], 214		; 000000d6H
; Line 2967
	mov	ecx, ebx
	mov	edx, edi
	jne	SHORT $L86545
	push	408					; 00000198H
; Line 2968
	jmp	SHORT $L88695
$L86545:
; Line 2969
	push	393					; 00000189H
$L88695:
	call	@ObjSetMicro@12
; Line 2970
	mov	eax, ebx
; Line 2971
	lea	ecx, DWORD PTR [ebx-1]
	imul	eax, 112				; 00000070H
	mov	edx, edi
	mov	BYTE PTR _dArch[eax+edi], 7
	call	@objects_set_door_piece@8
; Line 2972
	add	DWORD PTR _object[esi+36], 2
; Line 2974
	mov	ecx, DWORD PTR _oi$[ebp]
	dec	edi
	mov	edx, ebx
	push	edi
	mov	DWORD PTR _object[esi+68], 1
	call	@DoorSet@12
; Line 2975
	mov	DWORD PTR _object[esi+100], 1
; Line 2976
	mov	BYTE PTR _object[esi+64], 2
$L86542:
; Line 2978
	call	_RedoPlayerVision
; Line 2979
	jmp	SHORT $L86547
$L86532:
; Line 2981
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86547
; Line 2982
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
$L86547:
	pop	edi
	pop	esi
	pop	ebx
; Line 2983
	leave
	ret	4
@OperateL1LDoor@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateL2RDoor@12
; Function compile flags: /Ogsy
;	COMDAT @OperateL2RDoor@12
_TEXT	SEGMENT
_pnum$ = -12
_oi$ = -8
_sendflag$ = 8
@OperateL2RDoor@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _oi$ = edx
; Line 2987
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, edx
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	DWORD PTR _oi$[ebp], esi
; Line 2998
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi+100]
; Line 2999
	cmp	eax, 2
	je	$L86561
; Line 3001
	mov	edx, DWORD PTR _object[esi+4]
	mov	ebx, DWORD PTR _object[esi+8]
; Line 3002
	test	eax, eax
	mov	DWORD PTR -4+[ebp], edx
	je	$L86562
; Line 3003
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86563
; Line 3004
	push	ebx
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
	mov	ecx, DWORD PTR _pnum$[ebp]
$L86563:
; Line 3005
	mov	eax, DWORD PTR -4+[ebp]
	imul	eax, 112				; 00000070H
	add	eax, ebx
	cmp	BYTE PTR _dDead[eax], 0
	jne	SHORT $L86565
	cmp	DWORD PTR _dMonster[eax*4], 0
	jne	SHORT $L86565
	cmp	BYTE PTR _dItem[eax], 0
	jne	SHORT $L86565
; Line 3009
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86566
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86566
; Line 3010
	push	DWORD PTR _oi$[ebp]
	xor	ecx, ecx
	mov	dl, 44					; 0000002cH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86566:
; Line 3013
	mov	ecx, DWORD PTR -4+[ebp]
	and	DWORD PTR _object[esi+100], 0
	push	540					; 0000021cH
	mov	edx, ebx
	mov	BYTE PTR _object[esi+64], 3
	call	@ObjSetMicro@12
; Line 3014
	add	DWORD PTR _object[esi+36], -2		; fffffffeH
; Line 3015
	and	DWORD PTR _object[esi+68], 0
; Line 3016
	jmp	SHORT $L86567
$L86565:
; Line 3006
	mov	DWORD PTR _object[esi+100], 2
; Line 3007
	jmp	$L86570
$L86562:
	push	edi
; Line 3017
	xor	edi, edi
	inc	edi
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86568
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86568
; Line 3018
	push	DWORD PTR _oi$[ebp]
	mov	dl, 43					; 0000002bH
	mov	ecx, edi
	call	@NetSendCmdParam1@12
$L86568:
; Line 3019
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86569
; Line 3020
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	20					; 00000014H
	pop	ecx
	call	@PlaySfxLoc@12
$L86569:
; Line 3021
	mov	ecx, DWORD PTR -4+[ebp]
	push	17					; 00000011H
	mov	edx, ebx
	call	@ObjSetMicro@12
; Line 3022
	add	DWORD PTR _object[esi+36], 2
; Line 3023
	mov	DWORD PTR _object[esi+68], edi
; Line 3024
	mov	DWORD PTR _object[esi+100], edi
; Line 3025
	mov	BYTE PTR _object[esi+64], 2
	pop	edi
$L86567:
; Line 3027
	call	_RedoPlayerVision
; Line 3028
	jmp	SHORT $L86570
$L86561:
; Line 3030
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86570
; Line 3031
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
$L86570:
	pop	esi
	pop	ebx
; Line 3032
	leave
	ret	4
@OperateL2RDoor@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateL2LDoor@12
; Function compile flags: /Ogsy
;	COMDAT @OperateL2LDoor@12
_TEXT	SEGMENT
_pnum$ = -12
_oi$ = -8
_sendflag$ = 8
@OperateL2LDoor@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _oi$ = edx
; Line 3036
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, edx
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	DWORD PTR _oi$[ebp], esi
; Line 3047
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi+100]
; Line 3048
	cmp	eax, 2
	je	$L86584
; Line 3050
	mov	edx, DWORD PTR _object[esi+4]
	mov	ebx, DWORD PTR _object[esi+8]
; Line 3051
	test	eax, eax
	mov	DWORD PTR -4+[ebp], edx
	je	$L86585
; Line 3052
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86586
; Line 3053
	push	ebx
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
	mov	ecx, DWORD PTR _pnum$[ebp]
$L86586:
; Line 3054
	mov	eax, DWORD PTR -4+[ebp]
	imul	eax, 112				; 00000070H
	add	eax, ebx
	cmp	BYTE PTR _dDead[eax], 0
	jne	SHORT $L86588
	cmp	DWORD PTR _dMonster[eax*4], 0
	jne	SHORT $L86588
	cmp	BYTE PTR _dItem[eax], 0
	jne	SHORT $L86588
; Line 3058
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86589
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86589
; Line 3059
	push	DWORD PTR _oi$[ebp]
	xor	ecx, ecx
	mov	dl, 44					; 0000002cH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86589:
; Line 3062
	mov	ecx, DWORD PTR -4+[ebp]
	and	DWORD PTR _object[esi+100], 0
	push	538					; 0000021aH
	mov	edx, ebx
	mov	BYTE PTR _object[esi+64], 3
	call	@ObjSetMicro@12
; Line 3063
	add	DWORD PTR _object[esi+36], -2		; fffffffeH
; Line 3064
	and	DWORD PTR _object[esi+68], 0
; Line 3065
	jmp	SHORT $L86590
$L86588:
; Line 3055
	mov	DWORD PTR _object[esi+100], 2
; Line 3056
	jmp	$L86593
$L86585:
	push	edi
; Line 3066
	xor	edi, edi
	inc	edi
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86591
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86591
; Line 3067
	push	DWORD PTR _oi$[ebp]
	mov	dl, 43					; 0000002bH
	mov	ecx, edi
	call	@NetSendCmdParam1@12
$L86591:
; Line 3068
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86592
; Line 3069
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	20					; 00000014H
	pop	ecx
	call	@PlaySfxLoc@12
$L86592:
; Line 3070
	mov	ecx, DWORD PTR -4+[ebp]
	push	13					; 0000000dH
	mov	edx, ebx
	call	@ObjSetMicro@12
; Line 3071
	add	DWORD PTR _object[esi+36], 2
; Line 3072
	mov	DWORD PTR _object[esi+68], edi
; Line 3073
	mov	DWORD PTR _object[esi+100], edi
; Line 3074
	mov	BYTE PTR _object[esi+64], 2
	pop	edi
$L86590:
; Line 3076
	call	_RedoPlayerVision
; Line 3077
	jmp	SHORT $L86593
$L86584:
; Line 3079
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86593
; Line 3080
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
$L86593:
	pop	esi
	pop	ebx
; Line 3081
	leave
	ret	4
@OperateL2LDoor@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateL3RDoor@12
; Function compile flags: /Ogsy
;	COMDAT @OperateL3RDoor@12
_TEXT	SEGMENT
_pnum$ = -12
_oi$ = -8
_sendflag$ = 8
@OperateL3RDoor@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _oi$ = edx
; Line 3085
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, edx
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	DWORD PTR _oi$[ebp], esi
; Line 3096
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi+100]
; Line 3097
	cmp	eax, 2
	je	$L86607
; Line 3099
	mov	edx, DWORD PTR _object[esi+4]
	mov	ebx, DWORD PTR _object[esi+8]
; Line 3100
	test	eax, eax
	mov	DWORD PTR -4+[ebp], edx
	je	$L86608
; Line 3101
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86609
; Line 3102
	push	ebx
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
	mov	ecx, DWORD PTR _pnum$[ebp]
$L86609:
; Line 3103
	mov	eax, DWORD PTR -4+[ebp]
	imul	eax, 112				; 00000070H
	add	eax, ebx
	cmp	BYTE PTR _dDead[eax], 0
	jne	SHORT $L86611
	cmp	DWORD PTR _dMonster[eax*4], 0
	jne	SHORT $L86611
	cmp	BYTE PTR _dItem[eax], 0
	jne	SHORT $L86611
; Line 3107
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86612
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86612
; Line 3108
	push	DWORD PTR _oi$[ebp]
	xor	ecx, ecx
	mov	dl, 44					; 0000002cH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86612:
; Line 3111
	mov	ecx, DWORD PTR -4+[ebp]
	and	DWORD PTR _object[esi+100], 0
	push	534					; 00000216H
	mov	edx, ebx
	mov	BYTE PTR _object[esi+64], 3
	call	@ObjSetMicro@12
; Line 3112
	add	DWORD PTR _object[esi+36], -2		; fffffffeH
; Line 3113
	and	DWORD PTR _object[esi+68], 0
; Line 3114
	jmp	SHORT $L86613
$L86611:
; Line 3104
	mov	DWORD PTR _object[esi+100], 2
; Line 3105
	jmp	$L86616
$L86608:
	push	edi
; Line 3115
	xor	edi, edi
	inc	edi
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86614
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86614
; Line 3116
	push	DWORD PTR _oi$[ebp]
	mov	dl, 43					; 0000002bH
	mov	ecx, edi
	call	@NetSendCmdParam1@12
$L86614:
; Line 3117
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86615
; Line 3118
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	20					; 00000014H
	pop	ecx
	call	@PlaySfxLoc@12
$L86615:
; Line 3119
	mov	ecx, DWORD PTR -4+[ebp]
	push	541					; 0000021dH
	mov	edx, ebx
	call	@ObjSetMicro@12
; Line 3120
	add	DWORD PTR _object[esi+36], 2
; Line 3121
	mov	DWORD PTR _object[esi+68], edi
; Line 3122
	mov	DWORD PTR _object[esi+100], edi
; Line 3123
	mov	BYTE PTR _object[esi+64], 2
	pop	edi
$L86613:
; Line 3125
	call	_RedoPlayerVision
; Line 3126
	jmp	SHORT $L86616
$L86607:
; Line 3128
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86616
; Line 3129
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
$L86616:
	pop	esi
	pop	ebx
; Line 3130
	leave
	ret	4
@OperateL3RDoor@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateL3LDoor@12
; Function compile flags: /Ogsy
;	COMDAT @OperateL3LDoor@12
_TEXT	SEGMENT
_pnum$ = -12
_oi$ = -8
_sendflag$ = 8
@OperateL3LDoor@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _oi$ = edx
; Line 3134
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, edx
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	DWORD PTR _oi$[ebp], esi
; Line 3145
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi+100]
; Line 3146
	cmp	eax, 2
	je	$L86630
; Line 3148
	mov	edx, DWORD PTR _object[esi+4]
	mov	ebx, DWORD PTR _object[esi+8]
; Line 3149
	test	eax, eax
	mov	DWORD PTR -4+[ebp], edx
	je	$L86631
; Line 3150
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86632
; Line 3151
	push	ebx
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
	mov	ecx, DWORD PTR _pnum$[ebp]
$L86632:
; Line 3152
	mov	eax, DWORD PTR -4+[ebp]
	imul	eax, 112				; 00000070H
	add	eax, ebx
	cmp	BYTE PTR _dDead[eax], 0
	jne	SHORT $L86634
	cmp	DWORD PTR _dMonster[eax*4], 0
	jne	SHORT $L86634
	cmp	BYTE PTR _dItem[eax], 0
	jne	SHORT $L86634
; Line 3156
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86635
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86635
; Line 3157
	push	DWORD PTR _oi$[ebp]
	xor	ecx, ecx
	mov	dl, 44					; 0000002cH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86635:
; Line 3160
	mov	ecx, DWORD PTR -4+[ebp]
	and	DWORD PTR _object[esi+100], 0
	push	531					; 00000213H
	mov	edx, ebx
	mov	BYTE PTR _object[esi+64], 3
	call	@ObjSetMicro@12
; Line 3161
	add	DWORD PTR _object[esi+36], -2		; fffffffeH
; Line 3162
	and	DWORD PTR _object[esi+68], 0
; Line 3163
	jmp	SHORT $L86636
$L86634:
; Line 3153
	mov	DWORD PTR _object[esi+100], 2
; Line 3154
	jmp	$L86639
$L86631:
	push	edi
; Line 3164
	xor	edi, edi
	inc	edi
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86637
	cmp	BYTE PTR _sendflag$[ebp], 0
	je	SHORT $L86637
; Line 3165
	push	DWORD PTR _oi$[ebp]
	mov	dl, 43					; 0000002bH
	mov	ecx, edi
	call	@NetSendCmdParam1@12
$L86637:
; Line 3166
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86638
; Line 3167
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	20					; 00000014H
	pop	ecx
	call	@PlaySfxLoc@12
$L86638:
; Line 3168
	mov	ecx, DWORD PTR -4+[ebp]
	push	538					; 0000021aH
	mov	edx, ebx
	call	@ObjSetMicro@12
; Line 3169
	add	DWORD PTR _object[esi+36], 2
; Line 3170
	mov	DWORD PTR _object[esi+68], edi
; Line 3171
	mov	DWORD PTR _object[esi+100], edi
; Line 3172
	mov	BYTE PTR _object[esi+64], 2
	pop	edi
$L86636:
; Line 3174
	call	_RedoPlayerVision
; Line 3175
	jmp	SHORT $L86639
$L86630:
; Line 3177
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86639
; Line 3178
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	19					; 00000013H
	pop	ecx
	call	@PlaySfxLoc@12
$L86639:
	pop	esi
	pop	ebx
; Line 3179
	leave
	ret	4
@OperateL3LDoor@12 ENDP
_TEXT	ENDS
PUBLIC	@MonstCheckDoors@4
EXTRN	_monster:BYTE
; Function compile flags: /Ogsy
;	COMDAT @MonstCheckDoors@4
_TEXT	SEGMENT
_i$ = -20
_oi$ = -4
_dpy$ = -8
_mx$ = -12
_my$ = -16
@MonstCheckDoors@4 PROC NEAR				; COMDAT
; _m$ = ecx
; Line 3183
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 3187
	imul	ecx, 228				; 000000e4H
	mov	eax, DWORD PTR _monster[ecx+32]
; Line 3188
	mov	ecx, DWORD PTR _monster[ecx+36]
	mov	DWORD PTR _mx$[ebp], eax
; Line 3196
	imul	eax, 112				; 00000070H
	add	eax, ecx
	mov	DWORD PTR _my$[ebp], ecx
	lea	ecx, DWORD PTR _dObject[eax]
	cmp	BYTE PTR [ecx-113], 0
	jne	SHORT $L86650
	cmp	BYTE PTR [ecx-1], 0
	jne	SHORT $L86650
	cmp	BYTE PTR _dObject[eax+111], 0
	jne	SHORT $L86650
	cmp	BYTE PTR [ecx-112], 0
	jne	SHORT $L86650
	cmp	BYTE PTR _dObject[eax+112], 0
	jne	SHORT $L86650
	lea	ecx, DWORD PTR _dObject[eax+1]
	cmp	BYTE PTR [ecx-112], 0
	jne	SHORT $L86650
	cmp	BYTE PTR [ecx], 0
	jne	SHORT $L86650
	cmp	BYTE PTR _dObject[eax+113], 0
	je	$L86653
$L86650:
; Line 3197
	xor	eax, eax
	cmp	DWORD PTR _nobjects, eax
	mov	DWORD PTR _i$[ebp], eax
	jle	$L86653
	push	ebx
	push	esi
	push	edi
	xor	edi, edi
	inc	edi
$L86651:
; Line 3198
	mov	esi, DWORD PTR _objectactive[eax*4]
	mov	DWORD PTR _oi$[ebp], esi
; Line 3199
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi]
	cmp	eax, edi
	je	SHORT $L86655
	cmp	eax, 2
	jne	SHORT $L86657
$L86655:
	cmp	DWORD PTR _object[esi+100], 0
	jne	SHORT $L86657
; Line 3200
	mov	eax, DWORD PTR _object[esi+4]
	sub	eax, DWORD PTR _mx$[ebp]
	push	eax
	call	_abs
	mov	ebx, eax
; Line 3201
	mov	eax, DWORD PTR _object[esi+8]
	sub	eax, DWORD PTR _my$[ebp]
	push	eax
	call	_abs
	pop	ecx
; Line 3202
	cmp	ebx, edi
	pop	ecx
	mov	DWORD PTR _dpy$[ebp], eax
	jne	SHORT $L88717
	cmp	eax, edi
	jg	SHORT $L88708
	cmp	DWORD PTR _object[esi], edi
	jne	SHORT $L88708
; Line 3203
	mov	edx, DWORD PTR _oi$[ebp]
	mov	ecx, DWORD PTR _myplr
	push	edi
	call	@OperateL1LDoor@12
; Line 3204
	cmp	ebx, edi
$L88717:
	jg	SHORT $L86657
$L88708:
	cmp	DWORD PTR _dpy$[ebp], edi
	jne	SHORT $L86657
	cmp	DWORD PTR _object[esi], 2
	jne	SHORT $L86657
; Line 3205
	mov	edx, DWORD PTR _oi$[ebp]
	mov	ecx, DWORD PTR _myplr
	push	edi
	call	@OperateL1RDoor@12
$L86657:
; Line 3207
	mov	eax, DWORD PTR _object[esi]
	cmp	eax, 42					; 0000002aH
	je	SHORT $L86659
	cmp	eax, 43					; 0000002bH
	jne	SHORT $L86661
$L86659:
	cmp	DWORD PTR _object[esi+100], 0
	jne	SHORT $L86661
; Line 3208
	mov	eax, DWORD PTR _object[esi+4]
	sub	eax, DWORD PTR _mx$[ebp]
	push	eax
	call	_abs
	mov	ebx, eax
; Line 3209
	mov	eax, DWORD PTR _object[esi+8]
	sub	eax, DWORD PTR _my$[ebp]
	push	eax
	call	_abs
	pop	ecx
; Line 3210
	cmp	ebx, edi
	pop	ecx
	mov	DWORD PTR _dpy$[ebp], eax
	jne	SHORT $L88718
	cmp	eax, edi
	jg	SHORT $L88709
	cmp	DWORD PTR _object[esi], 42		; 0000002aH
	jne	SHORT $L88709
; Line 3211
	mov	edx, DWORD PTR _oi$[ebp]
	mov	ecx, DWORD PTR _myplr
	push	edi
	call	@OperateL2LDoor@12
; Line 3212
	cmp	ebx, edi
$L88718:
	jg	SHORT $L86661
$L88709:
	cmp	DWORD PTR _dpy$[ebp], edi
	jne	SHORT $L86661
	cmp	DWORD PTR _object[esi], 43		; 0000002bH
	jne	SHORT $L86661
; Line 3213
	mov	edx, DWORD PTR _oi$[ebp]
	mov	ecx, DWORD PTR _myplr
	push	edi
	call	@OperateL2RDoor@12
$L86661:
; Line 3215
	mov	eax, DWORD PTR _object[esi]
	cmp	eax, 74					; 0000004aH
	je	SHORT $L86663
	cmp	eax, 75					; 0000004bH
	jne	SHORT $L86652
$L86663:
	cmp	DWORD PTR _object[esi+100], 0
	jne	SHORT $L86652
; Line 3216
	mov	eax, DWORD PTR _object[esi+4]
	sub	eax, DWORD PTR _mx$[ebp]
	push	eax
	call	_abs
	mov	ebx, eax
; Line 3217
	mov	eax, DWORD PTR _object[esi+8]
	sub	eax, DWORD PTR _my$[ebp]
	push	eax
	call	_abs
	pop	ecx
; Line 3218
	cmp	ebx, edi
	pop	ecx
	mov	DWORD PTR _dpy$[ebp], eax
	jne	SHORT $L88719
	cmp	eax, edi
	jg	SHORT $L88710
	cmp	DWORD PTR _object[esi], 75		; 0000004bH
	jne	SHORT $L88710
; Line 3219
	mov	edx, DWORD PTR _oi$[ebp]
	mov	ecx, DWORD PTR _myplr
	push	edi
	call	@OperateL3RDoor@12
; Line 3220
	cmp	ebx, edi
$L88719:
	jg	SHORT $L86652
$L88710:
	cmp	DWORD PTR _dpy$[ebp], edi
	jne	SHORT $L86652
	cmp	DWORD PTR _object[esi], 74		; 0000004aH
	jne	SHORT $L86652
; Line 3221
	mov	edx, DWORD PTR _oi$[ebp]
	mov	ecx, DWORD PTR _myplr
	push	edi
	call	@OperateL3LDoor@12
$L86652:
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	cmp	eax, DWORD PTR _nobjects
	mov	DWORD PTR _i$[ebp], eax
	jl	$L86651
	pop	edi
	pop	esi
	pop	ebx
$L86653:
; Line 3225
	leave
	ret	0
@MonstCheckDoors@4 ENDP
_TEXT	ENDS
PUBLIC	@ObjChangeMap@16
EXTRN	_pdungeon:BYTE
; Function compile flags: /Ogsy
;	COMDAT @ObjChangeMap@16
_TEXT	SEGMENT
_y1$ = -12
_x2$ = 8
_y2$ = 12
_v11$ = 8
_a2$ = -4
_i$ = -8
_y_end$ = 12
@ObjChangeMap@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 3228
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
; Line 3244
	mov	ebx, DWORD PTR _x2$[ebp]
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
	cmp	edi, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _y1$[ebp], edi
	mov	DWORD PTR _a2$[ebp], edi
	jg	SHORT $L86686
$L86684:
; Line 3246
	cmp	esi, ebx
	mov	DWORD PTR _i$[ebp], esi
	jg	SHORT $L86690
; Line 3247
	mov	ecx, DWORD PTR _a2$[ebp]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _v11$[ebp], eax
$L86688:
; Line 3249
	mov	eax, DWORD PTR _v11$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a2$[ebp]
	inc	DWORD PTR _i$[ebp]
	lea	edi, DWORD PTR _pdungeon[eax]
	movzx	eax, BYTE PTR [edi]
	push	eax
	call	@ObjSetMini@12
; Line 3250
	mov	ecx, DWORD PTR _v11$[ebp]
	mov	al, BYTE PTR [edi]
; Line 3252
	add	DWORD PTR _v11$[ebp], 40		; 00000028H
	cmp	DWORD PTR _i$[ebp], ebx
	mov	BYTE PTR _dungeon[ecx], al
	jle	SHORT $L86688
	mov	edi, DWORD PTR _y1$[ebp]
$L86690:
; Line 3244
	inc	DWORD PTR _a2$[ebp]
	mov	eax, DWORD PTR _a2$[ebp]
	cmp	eax, DWORD PTR _y2$[ebp]
	jle	SHORT $L86684
$L86686:
; Line 3255
	cmp	BYTE PTR _leveltype, 1
	jne	SHORT $L86692
; Line 3256
	mov	eax, DWORD PTR _y2$[ebp]
	lea	edx, DWORD PTR [ebx+ebx+17]
	lea	ecx, DWORD PTR [esi+esi+16]
	lea	eax, DWORD PTR [eax+eax+17]
	push	eax
	push	edx
	lea	edx, DWORD PTR [edi+edi+16]
	call	@ObjL1Special@16
; Line 3257
	mov	eax, DWORD PTR _y2$[ebp]
	lea	edx, DWORD PTR [edi+edi+16]
	lea	eax, DWORD PTR [eax+eax+17]
	push	eax
	lea	eax, DWORD PTR [ebx+ebx+17]
	push	eax
	call	@AddL1Objs@16
$L86692:
; Line 3259
	cmp	BYTE PTR _leveltype, 2
	jne	SHORT $L86693
; Line 3262
	mov	eax, DWORD PTR _y2$[ebp]
	lea	ebx, DWORD PTR [ebx+ebx+17]
	lea	edi, DWORD PTR [edi+edi+16]
; Line 3263
	lea	esi, DWORD PTR [esi+esi+16]
	lea	eax, DWORD PTR [eax+eax+17]
	mov	edx, edi
	push	eax
	push	ebx
	mov	ecx, esi
	mov	DWORD PTR _y_end$[ebp], eax
	call	@ObjL2Special@16
; Line 3264
	mov	edx, edi
	mov	ecx, esi
	push	DWORD PTR _y_end$[ebp]
	push	ebx
	call	@AddL2Objs@16
$L86693:
	pop	edi
	pop	esi
	pop	ebx
; Line 3266
	leave
	ret	8
@ObjChangeMap@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @ObjChangeMapResync@16
_TEXT	SEGMENT
_y1$ = -12
_x2$ = 8
_y2$ = 12
_i$ = -8
_a2$ = -4
@ObjChangeMapResync@16 PROC NEAR			; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 3269
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 3282
	mov	edi, DWORD PTR _y2$[ebp]
	mov	esi, edx
	mov	ebx, ecx
	cmp	esi, edi
	mov	DWORD PTR _y1$[ebp], esi
	mov	DWORD PTR _a2$[ebp], esi
	jg	SHORT $L86712
$L86710:
; Line 3284
	cmp	ebx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _i$[ebp], ebx
	jg	SHORT $L86711
; Line 3285
	mov	ecx, DWORD PTR _a2$[ebp]
	lea	eax, DWORD PTR [ebx+ebx*4]
	lea	edi, DWORD PTR [ecx+eax*8]
$L86714:
; Line 3287
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a2$[ebp]
	inc	DWORD PTR _i$[ebp]
	lea	esi, DWORD PTR _pdungeon[edi]
	movzx	eax, BYTE PTR [esi]
	push	eax
	call	@ObjSetMini@12
; Line 3288
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR _dungeon[edi], al
; Line 3290
	mov	eax, DWORD PTR _x2$[ebp]
	add	edi, 40					; 00000028H
	cmp	DWORD PTR _i$[ebp], eax
	jle	SHORT $L86714
	mov	edi, DWORD PTR _y2$[ebp]
	mov	esi, DWORD PTR _y1$[ebp]
$L86711:
	inc	DWORD PTR _a2$[ebp]
	cmp	DWORD PTR _a2$[ebp], edi
	jle	SHORT $L86710
$L86712:
; Line 3295
	cmp	BYTE PTR _leveltype, 1
	jne	SHORT $L86718
; Line 3296
	lea	eax, DWORD PTR [edi+edi+17]
	lea	edx, DWORD PTR [esi+esi+16]
	push	eax
	mov	eax, DWORD PTR _x2$[ebp]
	lea	ecx, DWORD PTR [ebx+ebx+16]
	lea	eax, DWORD PTR [eax+eax+17]
	push	eax
	call	@ObjL1Special@16
$L86718:
; Line 3297
	cmp	BYTE PTR _leveltype, 2
	jne	SHORT $L86719
; Line 3298
	lea	eax, DWORD PTR [edi+edi+17]
	lea	edx, DWORD PTR [esi+esi+16]
	push	eax
	mov	eax, DWORD PTR _x2$[ebp]
	lea	ecx, DWORD PTR [ebx+ebx+16]
	lea	eax, DWORD PTR [eax+eax+17]
	push	eax
	call	@ObjL2Special@16
$L86719:
	pop	edi
	pop	esi
	pop	ebx
; Line 3299
	leave
	ret	8
@ObjChangeMapResync@16 ENDP
_TEXT	ENDS
PUBLIC	@OperateL1Door@12
; Function compile flags: /Ogsy
;	COMDAT @OperateL1Door@12
_TEXT	SEGMENT
_pnum$ = -8
_sendflag$ = 8
_dpx$ = -4
_dpy$ = -12
@OperateL1Door@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3302
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	ebx, edx
	push	edi
; Line 3305
	mov	edi, ebx
	mov	esi, ecx
	imul	edi, 120				; 00000078H
	mov	DWORD PTR _pnum$[ebp], esi
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _object[edi+4]
	sub	eax, DWORD PTR _plr[esi+56]
	push	eax
	call	_abs
	mov	DWORD PTR _dpx$[ebp], eax
; Line 3306
	mov	eax, DWORD PTR _object[edi+8]
	sub	eax, DWORD PTR _plr[esi+60]
	push	eax
	call	_abs
; Line 3307
	xor	esi, esi
	pop	ecx
	inc	esi
	pop	ecx
	cmp	DWORD PTR _dpx$[ebp], esi
	mov	DWORD PTR _dpy$[ebp], eax
	jne	SHORT $L88739
	cmp	eax, esi
	jg	SHORT $L88735
	cmp	DWORD PTR _object[edi], esi
	jne	SHORT $L88735
; Line 3308
	push	DWORD PTR _sendflag$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, ebx
	call	@OperateL1LDoor@12
; Line 3309
	cmp	DWORD PTR _dpx$[ebp], esi
$L88739:
	jg	SHORT $L86730
$L88735:
	cmp	DWORD PTR _dpy$[ebp], esi
	jne	SHORT $L86730
	cmp	DWORD PTR _object[edi], 2
	jne	SHORT $L86730
; Line 3310
	push	DWORD PTR _sendflag$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, ebx
	call	@OperateL1RDoor@12
$L86730:
	pop	edi
	pop	esi
	pop	ebx
; Line 3311
	leave
	ret	4
@OperateL1Door@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateLever@8
; Function compile flags: /Ogsy
;	COMDAT @OperateLever@8
_TEXT	SEGMENT
_pnum$ = -4
_i$ = -8
@OperateLever@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3314
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	mov	esi, edx
	mov	DWORD PTR _i$[ebp], esi
; Line 3325
	imul	esi, 120				; 00000078H
	push	edi
	lea	edi, DWORD PTR _object[esi+64]
	mov	DWORD PTR _pnum$[ebp], ecx
; Line 3327
	cmp	BYTE PTR [edi], 0
	je	$L86756
; Line 3328
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L86746
; Line 3329
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	62					; 0000003eH
	pop	ecx
	call	@PlaySfxLoc@12
$L86746:
; Line 3330
	and	BYTE PTR [edi], 0
; Line 3331
	inc	DWORD PTR _object[esi+36]
; Line 3332
	xor	edi, edi
	inc	edi
; Line 3333
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	jne	SHORT $LABEL_17$86749
; Line 3336
	mov	edx, DWORD PTR _nobjects
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LABEL_17$86749
	push	ebx
$L86751:
; Line 3339
	mov	eax, DWORD PTR _objectactive[ecx*4]
; Line 3342
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax], 28		; 0000001cH
	jne	SHORT $L86754
	mov	ebx, DWORD PTR _object[esi+116]
	cmp	ebx, DWORD PTR _object[eax+116]
	jne	SHORT $L86754
	cmp	BYTE PTR _object[eax+64], 0
	je	SHORT $L86754
; Line 3343
	xor	edi, edi
$L86754:
; Line 3345
	inc	ecx
; Line 3346
	cmp	ecx, edx
	jl	SHORT $L86751
; Line 3347
	test	edi, edi
	pop	ebx
	je	SHORT $L86755
$LABEL_17$86749:
; Line 3349
	push	DWORD PTR _object[esi+100]
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	DWORD PTR _object[esi+96]
	call	@ObjChangeMap@16
$L86755:
; Line 3350
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L86756
; Line 3351
	push	DWORD PTR _i$[ebp]
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L86756:
	pop	edi
	pop	esi
; Line 3353
	leave
	ret	0
@OperateLever@8 ENDP
_TEXT	ENDS
PUBLIC	@OperateBook@8
PUBLIC	@SyncObjectAnim@4
EXTRN	@InitDiabloMsg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @OperateBook@8
_TEXT	SEGMENT
_pnum$ = -20
_v11$ = -16
_v1$ = -12
_v2$ = -8
_v14$ = -4
@OperateBook@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3357
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	mov	esi, edx
; Line 3367
	xor	ebx, ebx
	imul	esi, 120				; 00000078H
	mov	edx, ecx
	push	edi
	cmp	BYTE PTR _object[esi+64], bl
	mov	DWORD PTR _pnum$[ebp], edx
	je	$L86793
; Line 3369
	cmp	BYTE PTR _setlevel, bl
	je	$LABEL_17$86773
	cmp	BYTE PTR _setlvlnum, 5
	jne	$LABEL_17$86773
; Line 3371
	xor	ecx, ecx
; Line 3374
	cmp	DWORD PTR _nobjects, ebx
	mov	DWORD PTR _v11$[ebp], ebx
	mov	DWORD PTR _v14$[ebp], ebx
	jle	$L86793
	xor	edi, edi
	inc	edi
	jmp	SHORT $L86776
$L88752:
	mov	edx, DWORD PTR _pnum$[ebp]
$L86776:
; Line 3376
	mov	eax, DWORD PTR _v14$[ebp]
	mov	eax, DWORD PTR _objectactive[eax*4]
; Line 3377
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax], 85		; 00000055H
	jne	SHORT $L86780
; Line 3378
	cmp	DWORD PTR _object[eax+108], edi
	jne	SHORT $L86779
; Line 3379
	mov	DWORD PTR _v1$[ebp], 27			; 0000001bH
; Line 3380
	mov	DWORD PTR _v2$[ebp], 29			; 0000001dH
; Line 3381
	mov	DWORD PTR _object[eax+108], 4
; Line 3382
	mov	ecx, edi
$L86779:
; Line 3384
	cmp	DWORD PTR _object[eax+108], 2
	jne	SHORT $L86780
; Line 3385
	mov	DWORD PTR _v1$[ebp], 43			; 0000002bH
; Line 3386
	mov	DWORD PTR _v2$[ebp], 29			; 0000001dH
; Line 3387
	mov	DWORD PTR _object[eax+108], 4
; Line 3388
	mov	ecx, edi
$L86780:
; Line 3391
	cmp	ecx, ebx
	je	SHORT $L86781
; Line 3392
	movsx	eax, BYTE PTR _dObject+3956
	imul	eax, 120				; 00000078H
; Line 3393
	push	ebx
	push	ebx
	lea	eax, DWORD PTR _object[eax-16]
	push	edx
	push	ebx
	push	3
	inc	DWORD PTR [eax]
	mov	eax, edx
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+112]
	mov	edx, DWORD PTR _plr[eax+60]
	mov	ecx, DWORD PTR _plr[eax+56]
	push	DWORD PTR _v2$[ebp]
	push	DWORD PTR _v1$[ebp]
	call	@AddMissile@40
; Line 3394
	mov	DWORD PTR _v11$[ebp], edi
; Line 3395
	xor	ecx, ecx
$L86781:
; Line 3397
	inc	DWORD PTR _v14$[ebp]
	mov	eax, DWORD PTR _v14$[ebp]
	cmp	eax, DWORD PTR _nobjects
	jl	$L88752
; Line 3400
	cmp	DWORD PTR _v11$[ebp], ebx
	je	$L86793
	mov	edx, DWORD PTR _pnum$[ebp]
$LABEL_17$86773:
; Line 3402
	inc	DWORD PTR _object[esi+36]
; Line 3403
	cmp	BYTE PTR _setlevel, bl
; Line 3404
	mov	BYTE PTR _object[esi+64], bl
; Line 3405
	je	$L86793
; Line 3406
	cmp	BYTE PTR _setlvlnum, 2
	jne	$L86785
; Line 3407
	mov	ecx, DWORD PTR _myplr
; Line 3408
	imul	edx, 21720				; 000054d8H
	imul	ecx, 21720				; 000054d8H
	lea	eax, DWORD PTR _plr[ecx+264]
	or	BYTE PTR [eax+1], 16			; 00000010H
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+4], edi
	cmp	BYTE PTR _plr[edx+206], 15		; 0000000fH
	jge	SHORT $L86787
; Line 3409
	inc	BYTE PTR _plr[ecx+206]
$L86787:
; Line 3411
	cmp	DWORD PTR _deltaload, ebx
	mov	BYTE PTR _quests+338, 3
	jne	SHORT $L86788
; Line 3412
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	12					; 0000000cH
	pop	ecx
	call	@PlaySfxLoc@12
$L86788:
; Line 3413
	mov	cl, 43					; 0000002bH
	call	@InitDiabloMsg@4
; Line 3424
	mov	ecx, DWORD PTR _myplr
	mov	eax, ecx
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR _object[esi+8]
	push	ebx
	push	2
	sub	ecx, 4
	push	DWORD PTR _plr[eax+112]
	mov	edx, DWORD PTR _plr[eax+60]
	push	ecx
	mov	ecx, DWORD PTR _object[esi+4]
	dec	ecx
	dec	ecx
	push	ecx
	mov	ecx, DWORD PTR _plr[eax+56]
	call	@AddMissile@40
$L86785:
; Line 3426
	cmp	BYTE PTR _setlevel, bl
	je	SHORT $L86793
; Line 3427
	cmp	BYTE PTR _setlvlnum, 5
	jne	SHORT $L86793
; Line 3432
	push	DWORD PTR _object[esi+100]
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	DWORD PTR _object[esi+96]
	call	@ObjChangeMapResync@16
; Line 3433
	xor	esi, esi
	cmp	DWORD PTR _nobjects, ebx
	jle	SHORT $L86793
$L86791:
; Line 3434
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@SyncObjectAnim@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L86791
$L86793:
	pop	edi
	pop	esi
	pop	ebx
; Line 3441
	leave
	ret	0
@OperateBook@8 ENDP
_TEXT	ENDS
PUBLIC	@OperateBookLever@8
EXTRN	@DRLG_MRectTrans@16:NEAR
EXTRN	_qtextflag:BYTE
EXTRN	@InitQTextMsg@4:NEAR
EXTRN	@CreateItem@12:NEAR
EXTRN	@SpawnQuestItem@20:NEAR
EXTRN	_TransVal:BYTE
; Function compile flags: /Ogsy
;	COMDAT @OperateBookLever@8
_TEXT	SEGMENT
_pnum$ = -8
_i$ = -4
@OperateBookLever@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3446
	push	ecx
	push	ecx
	push	ebp
	push	esi
	mov	esi, edx
; Line 3464
	mov	eax, DWORD PTR _setpc_x
	mov	DWORD PTR _i$[esp+16], esi
; Line 3466
	imul	esi, 120				; 00000078H
	cmp	BYTE PTR _object[esi+64], 0
	mov	DWORD PTR _pnum$[esp+16], ecx
	mov	ecx, DWORD PTR _setpc_y
	push	edi
	lea	edi, DWORD PTR [eax+eax+16]
	lea	ebp, DWORD PTR [ecx+ecx+16]
	je	$L86819
	cmp	BYTE PTR _qtextflag, 0
	jne	$L86819
; Line 3467
	mov	edx, DWORD PTR _object[esi]
	push	ebx
; Line 3468
	xor	ebx, ebx
	inc	ebx
	cmp	edx, 71					; 00000047H
	jne	SHORT $L86813
	cmp	BYTE PTR _quests+207, 0
	jne	SHORT $L86813
; Line 3469
	mov	BYTE PTR _quests+194, 2
; Line 3470
	mov	DWORD PTR _quests+212, ebx
; Line 3471
	mov	BYTE PTR _quests+207, bl
$L86813:
; Line 3473
	cmp	edx, 72					; 00000048H
	jne	SHORT $L86814
	cmp	BYTE PTR _quests+231, 0
	jne	SHORT $L86814
; Line 3477
	push	ebx
	lea	ecx, DWORD PTR [ecx+ecx+26]
	push	0
	push	ecx
	push	21					; 00000015H
	lea	edx, DWORD PTR [eax+eax+19]
	pop	ecx
	mov	BYTE PTR _quests+218, 2
	mov	DWORD PTR _quests+236, ebx
	mov	BYTE PTR _quests+231, bl
	call	@SpawnQuestItem@20
; Line 3478
	mov	eax, DWORD PTR _setpc_y
	push	ebx
	push	0
	lea	eax, DWORD PTR [eax+eax+26]
	push	eax
	mov	eax, DWORD PTR _setpc_x
	push	21					; 00000015H
	lea	edx, DWORD PTR [eax+eax+31]
	pop	ecx
	call	@SpawnQuestItem@20
; Line 3479
	mov	eax, DWORD PTR _setpc_y
	push	ebx
	push	0
	lea	eax, DWORD PTR [eax+eax+33]
	push	eax
	mov	eax, DWORD PTR _setpc_x
	push	21					; 00000015H
	lea	edx, DWORD PTR [eax+eax+25]
	pop	ecx
	call	@SpawnQuestItem@20
$L86814:
; Line 3481
	mov	eax, DWORD PTR _object[esi]
; Line 3482
	cmp	eax, 88					; 00000058H
	jne	SHORT $L86815
	cmp	BYTE PTR _quests+279, 0
	jne	SHORT $L86815
; Line 3483
	mov	BYTE PTR _quests+266, 2
; Line 3484
	mov	DWORD PTR _quests+284, ebx
; Line 3485
	mov	BYTE PTR _quests+279, bl
$L86815:
; Line 3487
	mov	ecx, DWORD PTR _object[esi+36]
	cmp	ecx, DWORD PTR _object[esi+108]
	je	SHORT $L86818
; Line 3488
	cmp	eax, 72					; 00000048H
	je	SHORT $L86817
; Line 3489
	push	DWORD PTR _object[esi+100]
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	DWORD PTR _object[esi+96]
	call	@ObjChangeMap@16
$L86817:
; Line 3490
	cmp	DWORD PTR _object[esi], 71		; 00000047H
	jne	SHORT $L86818
; Line 3491
	add	ebp, 5
	lea	edx, DWORD PTR [edi+5]
	push	ebp
	push	3
	pop	ecx
	call	@CreateItem@12
; Line 3498
	push	DWORD PTR _object[esi+100]
	mov	bl, BYTE PTR _TransVal
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	DWORD PTR _object[esi+96]
	mov	BYTE PTR _TransVal, 9
	call	@DRLG_MRectTrans@16
; Line 3499
	mov	BYTE PTR _TransVal, bl
$L86818:
; Line 3503
	mov	eax, DWORD PTR _object[esi+108]
; Line 3504
	mov	ecx, DWORD PTR _object[esi+112]
	mov	DWORD PTR _object[esi+36], eax
	call	@InitQTextMsg@4
; Line 3505
	mov	eax, DWORD PTR _pnum$[esp+24]
	cmp	eax, DWORD PTR _myplr
	pop	ebx
	jne	SHORT $L86819
; Line 3506
	push	DWORD PTR _i$[esp+20]
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L86819:
	pop	edi
	pop	esi
	pop	ebp
; Line 3508
	pop	ecx
	pop	ecx
	ret	0
@OperateBookLever@8 ENDP
_TEXT	ENDS
PUBLIC	@OperateSChambBk@8
; Function compile flags: /Ogsy
;	COMDAT @OperateSChambBk@8
_TEXT	SEGMENT
_v5$ = -4
@OperateSChambBk@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3513
	push	ecx
	push	esi
	mov	esi, edx
; Line 3520
	imul	esi, 120				; 00000078H
	cmp	BYTE PTR _object[esi+64], 0
	je	$L86828
	cmp	BYTE PTR _qtextflag, 0
	jne	$L86828
; Line 3521
	mov	eax, DWORD PTR _object[esi+36]
	push	edi
	cmp	eax, DWORD PTR _object[esi+108]
	je	SHORT $L86832
; Line 3522
	push	DWORD PTR _object[esi+100]
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	DWORD PTR _object[esi+96]
	call	@ObjChangeMapResync@16
; Line 3523
	xor	edi, edi
	cmp	DWORD PTR _nobjects, edi
	jle	SHORT $L86832
$L86830:
; Line 3524
	mov	ecx, DWORD PTR _objectactive[edi*4]
	call	@SyncObjectAnim@4
	inc	edi
	cmp	edi, DWORD PTR _nobjects
	jl	SHORT $L86830
$L86832:
; Line 3526
	mov	eax, DWORD PTR _object[esi+108]
; Line 3527
	xor	ecx, ecx
	inc	ecx
	mov	DWORD PTR _object[esi+36], eax
	cmp	BYTE PTR _quests+338, cl
	pop	edi
	jne	SHORT $L86833
; Line 3528
	mov	BYTE PTR _quests+338, 2
; Line 3529
	mov	DWORD PTR _quests+356, ecx
$L86833:
; Line 3531
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L86834
; Line 3532
	mov	ecx, 235				; 000000ebH
; Line 3533
	jmp	SHORT $L86838
$L86834:
	cmp	al, cl
	jne	SHORT $L86836
; Line 3534
	mov	ecx, 243				; 000000f3H
; Line 3535
	jmp	SHORT $L86838
$L86836:
	cmp	al, 2
; Line 3536
	mov	ecx, 239				; 000000efH
	je	SHORT $L86838
	mov	ecx, DWORD PTR _v5$[esp+8]
$L86838:
	pop	esi
; Line 3538
	mov	BYTE PTR _quests+350, cl
; Line 3541
	add	esp, 4
	jmp	@InitQTextMsg@4
$L86828:
	pop	esi
	pop	ecx
	ret	0
@OperateSChambBk@8 ENDP
_TEXT	ENDS
PUBLIC	@OperateChest@12
EXTRN	@CreateRndItem@20:NEAR
EXTRN	@CreateRndUseful@16:NEAR
EXTRN	@NetSendCmdParam2@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @OperateChest@12
_TEXT	SEGMENT
_pnum$ = -4
_i$ = -8
_sendmsg$ = 8
@OperateChest@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3545
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	mov	esi, edx
; Line 3561
	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], esi
	imul	esi, 120				; 00000078H
	cmp	BYTE PTR _object[esi+64], bl
	mov	DWORD PTR _pnum$[ebp], ecx
	je	$L86882
; Line 3562
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L86858
; Line 3563
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	18					; 00000012H
	pop	ecx
	call	@PlaySfxLoc@12
$L86858:
; Line 3564
	add	DWORD PTR _object[esi+36], 2
; Line 3565
	cmp	DWORD PTR _deltaload, ebx
; Line 3566
	mov	BYTE PTR _object[esi+64], bl
; Line 3567
	jne	$L86882
; Line 3568
	mov	ecx, DWORD PTR _object[esi+84]
	push	edi
	call	@SetRndSeed@4
; Line 3569
	xor	edi, edi
; Line 3570
	cmp	BYTE PTR _setlevel, bl
	je	SHORT $L86860
; Line 3571
	cmp	DWORD PTR _object[esi+88], ebx
	jle	SHORT $L86869
$L86862:
; Line 3573
	mov	edx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	push	ebx
	push	DWORD PTR _sendmsg$[ebp]
	push	1
	call	@CreateRndItem@20
; Line 3574
	inc	edi
; Line 3575
	cmp	edi, DWORD PTR _object[esi+88]
	jl	SHORT $L86862
; Line 3577
	jmp	SHORT $L86869
$L86860:
	cmp	DWORD PTR _object[esi+88], ebx
	jle	SHORT $L86869
$L86867:
; Line 3579
	cmp	DWORD PTR _object[esi+92], ebx
	je	SHORT $L86870
; Line 3580
	mov	edx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	push	ebx
	push	DWORD PTR _sendmsg$[ebp]
	push	ebx
	call	@CreateRndItem@20
; Line 3581
	jmp	SHORT $L86871
$L86870:
; Line 3582
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, DWORD PTR _object[esi+4]
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	DWORD PTR _object[esi+8]
	call	@CreateRndUseful@16
$L86871:
; Line 3583
	inc	edi
; Line 3584
	cmp	edi, DWORD PTR _object[esi+88]
	jl	SHORT $L86867
$L86869:
; Line 3586
	cmp	DWORD PTR _object[esi+72], ebx
	je	$LABEL_26$86873
; Line 3588
	mov	eax, DWORD PTR _object[esi]
; Line 3589
	cmp	eax, 68					; 00000044H
	jl	SHORT $LABEL_26$86873
	cmp	eax, 70					; 00000046H
	jg	SHORT $LABEL_26$86873
; Line 3591
	mov	edi, DWORD PTR _pnum$[ebp]
	mov	edx, DWORD PTR _object[esi+8]
	imul	edi, 21720				; 000054d8H
	mov	ecx, DWORD PTR _object[esi+4]
	push	DWORD PTR _plr[edi+60]
	push	DWORD PTR _plr[edi+56]
	call	@GetDirection@16
; Line 3592
	mov	ecx, DWORD PTR _object[esi+100]
; Line 3593
	cmp	ecx, ebx
	je	SHORT $L86876
; Line 3594
	dec	ecx
; Line 3595
	cmp	ecx, ebx
	je	SHORT $L86877
; Line 3596
	cmp	ecx, 1
	je	SHORT $L86878
; Line 3597
	movzx	ecx, BYTE PTR _sendmsg$[ebp]
; Line 3598
	jmp	SHORT $LABEL_25$86879
$L86878:
; Line 3600
	push	42					; 0000002aH
; Line 3601
	jmp	SHORT $L88770
$L86877:
; Line 3602
	push	27					; 0000001bH
$L88770:
	pop	ecx
; Line 3605
	jmp	SHORT $LABEL_25$86879
$L86876:
; Line 3606
	xor	ecx, ecx
$LABEL_25$86879:
; Line 3609
	push	ebx
	push	ebx
	push	-1
	push	1
	mov	edx, DWORD PTR _object[esi+8]
	push	ecx
	mov	ecx, DWORD PTR _object[esi+4]
	push	eax
	push	DWORD PTR _plr[edi+60]
	push	DWORD PTR _plr[edi+56]
	call	@AddMissile@40
; Line 3610
	mov	DWORD PTR _object[esi+72], ebx
$LABEL_26$86873:
; Line 3612
	mov	eax, DWORD PTR _pnum$[ebp]
	pop	edi
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L86882
; Line 3613
	push	DWORD PTR _i$[ebp]
	mov	dl, 46					; 0000002eH
	xor	ecx, ecx
	push	eax
	call	@NetSendCmdParam2@16
$L86882:
	pop	esi
	pop	ebx
; Line 3617
	leave
	ret	4
@OperateChest@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateMushPatch@8
EXTRN	@PlaySFX@4:NEAR
EXTRN	@GetSuperItemLoc@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @OperateMushPatch@8
_TEXT	SEGMENT
_v5$ = -8
_xx$ = -8
_yy$ = -4
@OperateMushPatch@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3622
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 3629
	cmp	BYTE PTR _quests+26, 2
	push	ebx
	push	esi
	jne	SHORT $L86894
	cmp	BYTE PTR _quests+39, 2
	jb	SHORT $L86894
; Line 3642
	mov	esi, edx
	xor	ebx, ebx
	imul	esi, 120				; 00000078H
	cmp	BYTE PTR _object[esi+64], bl
	je	$L86895
; Line 3643
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L86903
; Line 3644
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	18					; 00000012H
	pop	ecx
	call	@PlaySfxLoc@12
$L86903:
; Line 3645
	inc	DWORD PTR _object[esi+36]
; Line 3646
	cmp	DWORD PTR _deltaload, ebx
; Line 3647
	mov	BYTE PTR _object[esi+64], bl
; Line 3648
	jne	SHORT $L86895
; Line 3649
	mov	edx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	lea	eax, DWORD PTR _yy$[ebp]
	push	eax
	lea	eax, DWORD PTR _xx$[ebp]
	push	eax
	call	@GetSuperItemLoc@16
; Line 3650
	mov	edx, DWORD PTR _xx$[ebp]
	push	ebx
	push	ebx
	push	DWORD PTR _yy$[ebp]
	push	17					; 00000011H
	pop	ecx
	call	@SpawnQuestItem@20
; Line 3651
	mov	BYTE PTR _quests+39, 3
	jmp	SHORT $L86895
$L86894:
; Line 3630
	xor	ebx, ebx
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L86895
	mov	eax, DWORD PTR _myplr
	cmp	ecx, eax
	jne	SHORT $L86895
; Line 3631
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+352]
	cmp	al, bl
	jne	SHORT $L86896
; Line 3632
	mov	ecx, 726				; 000002d6H
; Line 3633
	jmp	SHORT $L86900
$L86896:
	cmp	al, 1
	jne	SHORT $L86898
; Line 3634
	mov	ecx, 623				; 0000026fH
; Line 3635
	jmp	SHORT $L86900
$L86898:
	cmp	al, 2
; Line 3636
	mov	ecx, 520				; 00000208H
	je	SHORT $L86900
	mov	ecx, DWORD PTR _v5$[ebp]
$L86900:
; Line 3638
	call	@PlaySFX@4
$L86895:
	pop	esi
	pop	ebx
; Line 3655
	leave
	ret	0
@OperateMushPatch@8 ENDP
_TEXT	ENDS
PUBLIC	@OperateInnSignChest@8
; Function compile flags: /Ogsy
;	COMDAT @OperateInnSignChest@8
_TEXT	SEGMENT
_xx$ = -8
_yy$ = -4
@OperateInnSignChest@8 PROC NEAR			; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3659
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
; Line 3667
	xor	ebx, ebx
	cmp	BYTE PTR _quests+183, 2
	push	esi
	jne	SHORT $L86914
	mov	esi, edx
	imul	esi, 120				; 00000078H
	cmp	BYTE PTR _object[esi+64], bl
	je	$L86921
; Line 3668
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L86916
; Line 3669
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	18					; 00000012H
	pop	ecx
	call	@PlaySfxLoc@12
$L86916:
; Line 3670
	add	DWORD PTR _object[esi+36], 2
; Line 3671
	cmp	DWORD PTR _deltaload, ebx
; Line 3672
	mov	BYTE PTR _object[esi+64], bl
; Line 3673
	jne	SHORT $L86921
; Line 3674
	mov	edx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	lea	eax, DWORD PTR _yy$[ebp]
	push	eax
	lea	eax, DWORD PTR _xx$[ebp]
	push	eax
	call	@GetSuperItemLoc@16
; Line 3675
	mov	edx, DWORD PTR _xx$[ebp]
	push	ebx
	push	ebx
	push	DWORD PTR _yy$[ebp]
	push	12					; 0000000cH
	pop	ecx
	call	@SpawnQuestItem@20
; Line 3678
	jmp	SHORT $L86921
$L86914:
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L86921
	mov	eax, DWORD PTR _myplr
	cmp	ecx, eax
	jne	SHORT $L86921
; Line 3679
	imul	eax, 21720				; 000054d8H
	movsx	eax, BYTE PTR _plr[eax+352]
	sub	eax, ebx
	je	SHORT $L86924
	dec	eax
	je	SHORT $L86925
	dec	eax
	jne	SHORT $L86921
; Line 3687
	mov	ecx, 531				; 00000213H
; Line 3688
	jmp	SHORT $L88776
$L86925:
; Line 3684
	mov	ecx, 634				; 0000027aH
; Line 3685
	jmp	SHORT $L88776
$L86924:
; Line 3681
	mov	ecx, 743				; 000002e7H
$L88776:
	call	@PlaySFX@4
$L86921:
	pop	esi
	pop	ebx
; Line 3691
	leave
	ret	0
@OperateInnSignChest@8 ENDP
_TEXT	ENDS
PUBLIC	@OperateSlainHero@12
EXTRN	@CreateSpellBook@20:NEAR
EXTRN	@CreateMagicArmor@24:NEAR
EXTRN	@CreateMagicWeapon@24:NEAR
; Function compile flags: /Ogsy
;	COMDAT @OperateSlainHero@12
_TEXT	SEGMENT
_v8$ = -4
@OperateSlainHero@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3695
	push	ecx
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
; Line 3705
	mov	eax, edi
	xor	edx, edx
	imul	eax, 120				; 00000078H
	lea	ecx, DWORD PTR _object[eax+64]
	cmp	BYTE PTR [ecx], dl
	je	$L86946
; Line 3706
	cmp	DWORD PTR _deltaload, edx
; Line 3707
	mov	BYTE PTR [ecx], dl
; Line 3708
	jne	$L86946
; Line 3709
	mov	ecx, esi
	imul	ecx, 21720				; 000054d8H
	mov	cl, BYTE PTR _plr[ecx+352]
	cmp	cl, dl
	jne	SHORT $L86941
; Line 3710
	mov	ecx, DWORD PTR _object[eax+4]
	push	1
	push	edx
	mov	edx, DWORD PTR _object[eax+8]
	push	153					; 00000099H
	push	9
	call	@CreateMagicArmor@24
; Line 3711
	mov	ecx, 722				; 000002d2H
; Line 3712
	jmp	SHORT $L86945
$L86941:
	cmp	cl, 1
	jne	SHORT $L86943
; Line 3713
	mov	ecx, DWORD PTR _object[eax+4]
	push	1
	push	edx
	mov	edx, DWORD PTR _object[eax+8]
	push	119					; 00000077H
	push	3
	call	@CreateMagicWeapon@24
; Line 3714
	mov	ecx, 619				; 0000026bH
; Line 3715
	jmp	SHORT $L86945
$L86943:
	cmp	cl, 2
	jne	SHORT $L88779
; Line 3716
	mov	ecx, DWORD PTR _object[eax+4]
	push	1
	push	edx
	mov	edx, DWORD PTR _object[eax+8]
	push	3
	call	@CreateSpellBook@20
; Line 3717
	mov	ecx, 516				; 00000204H
	jmp	SHORT $L86945
$L88779:
	mov	ecx, DWORD PTR _v8$[esp+12]
$L86945:
; Line 3719
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+60]
	mov	edx, DWORD PTR _plr[eax+56]
	call	@PlaySfxLoc@12
; Line 3721
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L86946
; Line 3722
	push	edi
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L86946:
	pop	edi
	pop	esi
; Line 3726
	pop	ecx
	ret	4
@OperateSlainHero@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateTrapLvr@4
; Function compile flags: /Ogsy
;	COMDAT @OperateTrapLvr@4
_TEXT	SEGMENT
@OperateTrapLvr@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 3739
	imul	ecx, 120				; 00000078H
	push	ebx
	push	esi
	mov	eax, DWORD PTR _object[ecx+36]
; Line 3740
	mov	esi, DWORD PTR _nobjects
	push	edi
; Line 3742
	xor	edi, edi
	inc	edi
	xor	edx, edx
	cmp	eax, edi
	jne	SHORT $L86956
; Line 3744
	test	esi, esi
	mov	DWORD PTR _object[ecx+36], 2
	jle	$L86966
$L86958:
; Line 3746
	mov	eax, DWORD PTR _objectactive[edx*4]
; Line 3747
	imul	eax, 120				; 00000078H
	mov	ebx, DWORD PTR _object[eax]
	cmp	ebx, DWORD PTR _object[ecx+92]
	jne	SHORT $L86961
	mov	ebx, DWORD PTR _object[eax+88]
	cmp	ebx, DWORD PTR _object[ecx+88]
	jne	SHORT $L86961
; Line 3748
	and	DWORD PTR _object[eax+16], 0
; Line 3749
	mov	DWORD PTR _object[eax+92], edi
$L86961:
; Line 3751
	inc	edx
; Line 3752
	cmp	edx, esi
	jl	SHORT $L86958
; Line 3754
	jmp	SHORT $L86966
$L86956:
; Line 3755
	dec	eax
; Line 3756
	test	esi, esi
	mov	DWORD PTR _object[ecx+36], eax
	jle	SHORT $L86966
$L86964:
; Line 3758
	mov	eax, DWORD PTR _objectactive[edx*4]
; Line 3759
	imul	eax, 120				; 00000078H
	mov	ebx, DWORD PTR _object[eax]
	cmp	ebx, DWORD PTR _object[ecx+92]
	jne	SHORT $L86968
	mov	ebx, DWORD PTR _object[eax+88]
	cmp	ebx, DWORD PTR _object[ecx+88]
	jne	SHORT $L86968
; Line 3760
	and	DWORD PTR _object[eax+92], 0
; Line 3761
	cmp	DWORD PTR _object[eax+100], 0
	je	SHORT $L86968
; Line 3762
	mov	DWORD PTR _object[eax+16], edi
$L86968:
; Line 3764
	inc	edx
; Line 3765
	cmp	edx, esi
	jl	SHORT $L86964
$L86966:
	pop	edi
	pop	esi
	pop	ebx
; Line 3768
	ret	0
@OperateTrapLvr@4 ENDP
_TEXT	ENDS
PUBLIC	@OperateSarc@12
EXTRN	@SpawnSkeleton@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @OperateSarc@12
_TEXT	SEGMENT
_pnum$ = -4
_sendmsg$ = 8
@OperateSarc@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3771
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, edx
	push	esi
; Line 3772
	mov	esi, ebp
	xor	ebx, ebx
	imul	esi, 120				; 00000078H
	mov	DWORD PTR _pnum$[esp+16], ecx
	cmp	BYTE PTR _object[esi+64], bl
	je	$L86982
; Line 3773
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L86977
; Line 3774
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	66					; 00000042H
	pop	ecx
	call	@PlaySfxLoc@12
$L86977:
; Line 3776
	cmp	DWORD PTR _deltaload, ebx
	mov	BYTE PTR _object[esi+64], bl
	je	SHORT $L86978
; Line 3777
	mov	eax, DWORD PTR _object[esi+32]
	mov	DWORD PTR _object[esi+36], eax
; Line 3778
	jmp	SHORT $L86982
$L86978:
; Line 3781
	mov	ecx, DWORD PTR _object[esi+84]
	push	edi
	mov	DWORD PTR _object[esi+16], 1
	mov	DWORD PTR _object[esi+24], 3
	call	@SetRndSeed@4
; Line 3782
	lea	edi, DWORD PTR _object[esi+88]
	cmp	DWORD PTR [edi], 2
	jg	SHORT $L86980
; Line 3783
	mov	edx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	push	ebx
	push	DWORD PTR _sendmsg$[esp+20]
	push	ebx
	call	@CreateRndItem@20
$L86980:
; Line 3784
	cmp	DWORD PTR [edi], 8
	pop	edi
	jl	SHORT $L86981
; Line 3785
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	mov	ecx, DWORD PTR _object[esi+92]
	call	@SpawnSkeleton@12
$L86981:
; Line 3786
	mov	eax, DWORD PTR _pnum$[esp+16]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L86982
; Line 3787
	push	ebp
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L86982:
	pop	esi
	pop	ebp
	pop	ebx
; Line 3790
	pop	ecx
	ret	4
@OperateSarc@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateL2Door@12
; Function compile flags: /Ogsy
;	COMDAT @OperateL2Door@12
_TEXT	SEGMENT
_pnum$ = -8
_sendflag$ = 8
_dpx$ = -4
_dpy$ = -12
@OperateL2Door@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3794
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	ebx, edx
	push	edi
; Line 3797
	mov	edi, ebx
	mov	esi, ecx
	imul	edi, 120				; 00000078H
	mov	DWORD PTR _pnum$[ebp], esi
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _object[edi+4]
	sub	eax, DWORD PTR _plr[esi+56]
	push	eax
	call	_abs
	mov	DWORD PTR _dpx$[ebp], eax
; Line 3798
	mov	eax, DWORD PTR _object[edi+8]
	sub	eax, DWORD PTR _plr[esi+60]
	push	eax
	call	_abs
; Line 3799
	xor	esi, esi
	pop	ecx
	inc	esi
	pop	ecx
	cmp	DWORD PTR _dpx$[ebp], esi
	mov	DWORD PTR _dpy$[ebp], eax
	jne	SHORT $L88795
	cmp	eax, esi
	jg	SHORT $L88791
	cmp	DWORD PTR _object[edi], 42		; 0000002aH
	jne	SHORT $L88791
; Line 3800
	push	DWORD PTR _sendflag$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, ebx
	call	@OperateL2LDoor@12
; Line 3801
	cmp	DWORD PTR _dpx$[ebp], esi
$L88795:
	jg	SHORT $L86993
$L88791:
	cmp	DWORD PTR _dpy$[ebp], esi
	jne	SHORT $L86993
	cmp	DWORD PTR _object[edi], 43		; 0000002bH
	jne	SHORT $L86993
; Line 3802
	push	DWORD PTR _sendflag$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, ebx
	call	@OperateL2RDoor@12
$L86993:
	pop	edi
	pop	esi
	pop	ebx
; Line 3803
	leave
	ret	4
@OperateL2Door@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateL3Door@12
; Function compile flags: /Ogsy
;	COMDAT @OperateL3Door@12
_TEXT	SEGMENT
_pnum$ = -8
_sendflag$ = 8
_dpx$ = -4
_dpy$ = -12
@OperateL3Door@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3806
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	ebx, edx
	push	edi
; Line 3809
	mov	edi, ebx
	mov	esi, ecx
	imul	edi, 120				; 00000078H
	mov	DWORD PTR _pnum$[ebp], esi
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _object[edi+4]
	sub	eax, DWORD PTR _plr[esi+56]
	push	eax
	call	_abs
	mov	DWORD PTR _dpx$[ebp], eax
; Line 3810
	mov	eax, DWORD PTR _object[edi+8]
	sub	eax, DWORD PTR _plr[esi+60]
	push	eax
	call	_abs
; Line 3811
	xor	esi, esi
	pop	ecx
	inc	esi
	pop	ecx
	cmp	DWORD PTR _dpx$[ebp], esi
	mov	DWORD PTR _dpy$[ebp], eax
	jne	SHORT $L88802
	cmp	eax, esi
	jg	SHORT $L88798
	cmp	DWORD PTR _object[edi], 75		; 0000004bH
	jne	SHORT $L88798
; Line 3812
	push	DWORD PTR _sendflag$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, ebx
	call	@OperateL3RDoor@12
; Line 3813
	cmp	DWORD PTR _dpx$[ebp], esi
$L88802:
	jg	SHORT $L87004
$L88798:
	cmp	DWORD PTR _dpy$[ebp], esi
	jne	SHORT $L87004
	cmp	DWORD PTR _object[edi], 74		; 0000004aH
	jne	SHORT $L87004
; Line 3814
	push	DWORD PTR _sendflag$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, ebx
	call	@OperateL3LDoor@12
$L87004:
	pop	edi
	pop	esi
	pop	ebx
; Line 3815
	leave
	ret	4
@OperateL3Door@12 ENDP
_TEXT	ENDS
PUBLIC	@OperatePedistal@8
PUBLIC	??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@	; `string'
EXTRN	@RemoveInvItem@8:NEAR
EXTRN	@PlrHasItem@12:NEAR
;	COMDAT ??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@ DB 'Levels\L2Data\Blood2.'
	DB	'DUN', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @OperatePedistal@8
_TEXT	SEGMENT
_inv_item_num$ = -4
@OperatePedistal@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3818
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 3826
	mov	esi, edx
	imul	esi, 120				; 00000078H
	push	edi
	mov	edi, ecx
	cmp	DWORD PTR _object[esi+108], 3
	je	$L87020
; Line 3827
	lea	eax, DWORD PTR _inv_item_num$[ebp]
	push	eax
	push	21					; 00000015H
	pop	edx
	call	@PlrHasItem@12
	test	eax, eax
	je	SHORT $L87015
; Line 3828
	mov	edx, DWORD PTR _inv_item_num$[ebp]
	mov	ecx, edi
	call	@RemoveInvItem@8
; Line 3829
	inc	DWORD PTR _object[esi+36]
; Line 3830
	inc	DWORD PTR _object[esi+108]
$L87015:
; Line 3832
	cmp	DWORD PTR _object[esi+108], 1
	jne	SHORT $L87016
; Line 3833
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L87017
; Line 3834
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	125					; 0000007dH
	pop	ecx
	call	@PlaySfxLoc@12
$L87017:
; Line 3835
	mov	eax, DWORD PTR _setpc_y
	lea	ecx, DWORD PTR [eax+7]
	push	ecx
	mov	ecx, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [ecx+2]
	push	edx
	lea	edx, DWORD PTR [eax+3]
	call	@ObjChangeMap@16
$L87016:
; Line 3837
	cmp	DWORD PTR _object[esi+108], 2
	jne	SHORT $L87018
; Line 3838
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L87019
; Line 3839
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	125					; 0000007dH
	pop	ecx
	call	@PlaySfxLoc@12
$L87019:
; Line 3840
	mov	eax, DWORD PTR _setpc_y
	mov	edx, DWORD PTR _setpc_w
	lea	ecx, DWORD PTR [eax+7]
	push	ecx
	mov	ecx, DWORD PTR _setpc_x
	add	edx, ecx
	add	ecx, 6
	push	edx
	lea	edx, DWORD PTR [eax+3]
	call	@ObjChangeMap@16
$L87018:
; Line 3842
	cmp	DWORD PTR _object[esi+108], 3
	jne	$L87020
; Line 3843
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L87021
; Line 3844
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	91					; 0000005bH
	pop	ecx
	call	@PlaySfxLoc@12
$L87021:
; Line 3845
	push	DWORD PTR _object[esi+100]
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	DWORD PTR _object[esi+96]
	call	@ObjChangeMap@16
; Line 3846
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	edi, eax
; Line 3847
	mov	eax, DWORD PTR _setpc_y
	add	eax, eax
	mov	ecx, edi
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax]
	call	@LoadMapObjs@12
; Line 3848
	mov	ecx, edi
	call	@mem_free_dbg@4
; Line 3849
	mov	eax, DWORD PTR _setpc_y
	lea	eax, DWORD PTR [eax+eax+19]
	push	eax
	mov	eax, DWORD PTR _setpc_x
	push	7
	lea	edx, DWORD PTR [eax+eax+25]
	pop	ecx
	call	@CreateItem@12
; Line 3850
	and	BYTE PTR _object[esi+64], 0
$L87020:
	pop	edi
	pop	esi
; Line 3853
	leave
	ret	0
@OperatePedistal@8 ENDP
_TEXT	ENDS
PUBLIC	@TryDisarm@8
EXTRN	@SetCursor_@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @TryDisarm@8
_TEXT	SEGMENT
_i$ = -4
@TryDisarm@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3858
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, edx
; Line 3874
	cmp	esi, DWORD PTR _myplr
	mov	DWORD PTR _i$[ebp], edi
	jne	SHORT $L87039
; Line 3875
	xor	ecx, ecx
	inc	ecx
	call	@SetCursor_@4
$L87039:
; Line 3877
	imul	edi, 120				; 00000078H
	cmp	DWORD PTR _object[edi+72], 0
	je	$L87048
; Line 3878
	imul	esi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	mov	esi, DWORD PTR _plr[esi+372]
; Line 3879
	push	100					; 00000064H
	add	esi, esi
	lea	eax, DWORD PTR [eax+eax*4]
	pop	edx
	mov	cl, 154					; 0000009aH
	sub	esi, eax
	call	@random@8
	cmp	eax, esi
	jg	SHORT $L87048
	push	ebx
; Line 3880
	mov	ebx, DWORD PTR _nobjects
; Line 3881
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $L87044
$L87042:
; Line 3883
	mov	eax, DWORD PTR _objectactive[esi*4]
	xor	edx, edx
; Line 3884
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _object[eax]
; Line 3885
	cmp	ecx, 53					; 00000035H
	jne	SHORT $L87045
; Line 3886
	inc	edx
$L87045:
; Line 3887
	cmp	ecx, 54					; 00000036H
	jne	SHORT $L87046
; Line 3888
	xor	edx, edx
	inc	edx
$L87046:
; Line 3889
	test	edx, edx
	je	SHORT $L87043
	mov	ecx, DWORD PTR _object[eax+88]
	mov	edx, DWORD PTR _object[eax+92]
	imul	ecx, 112				; 00000070H
	movsx	ecx, BYTE PTR _dObject[ecx+edx]
	dec	ecx
	cmp	ecx, DWORD PTR _i$[ebp]
	jne	SHORT $L87043
; Line 3890
	mov	DWORD PTR _object[eax+100], 1
; Line 3891
	and	DWORD PTR _object[edi+72], 0
$L87043:
	inc	esi
	cmp	esi, ebx
	jl	SHORT $L87042
$L87044:
; Line 3894
	mov	eax, DWORD PTR _object[edi]
	pop	ebx
; Line 3895
	cmp	eax, 68					; 00000044H
	jl	SHORT $L87048
	cmp	eax, 70					; 00000046H
	jg	SHORT $L87048
; Line 3896
	and	DWORD PTR _object[edi+72], 0
$L87048:
	pop	edi
	pop	esi
; Line 3899
	leave
	ret	0
@TryDisarm@8 ENDP
_TEXT	ENDS
PUBLIC	@ItemMiscIdIdx@4
EXTRN	_AllItemsList:BYTE
; Function compile flags: /Ogsy
;	COMDAT @ItemMiscIdIdx@4
_TEXT	SEGMENT
@ItemMiscIdIdx@4 PROC NEAR				; COMDAT
; _imiscid$ = ecx
; Line 3905
	xor	eax, eax
	mov	edx, OFFSET FLAT:_AllItemsList+56
$L87053:
	cmp	DWORD PTR [edx-56], 0
	je	SHORT $L87054
	cmp	DWORD PTR [edx], ecx
	je	SHORT $L87055
$L87054:
	inc	eax
	add	edx, 76					; 0000004cH
	jmp	SHORT $L87053
$L87055:
; Line 3909
	ret	0
@ItemMiscIdIdx@4 ENDP
_TEXT	ENDS
PUBLIC	@OperateShrine@12
EXTRN	@CheckStats@4:NEAR
EXTRN	@ModifyPlrStr@8:NEAR
EXTRN	@ModifyPlrMag@8:NEAR
EXTRN	@ModifyPlrDex@8:NEAR
EXTRN	@ModifyPlrVit@8:NEAR
EXTRN	_drawpanflag:DWORD
EXTRN	__allshl:NEAR
EXTRN	@CalcPlrInv@8:NEAR
EXTRN	@SetPlrHandItem@8:NEAR
EXTRN	@GetPlrHandSeed@4:NEAR
EXTRN	_automapview:BYTE
EXTRN	@CreateTypeItem@28:NEAR
EXTRN	_golditem:BYTE
EXTRN	_dropGoldFlag:DWORD
EXTRN	_dropGoldValue:DWORD
EXTRN	@SetGoldCurs@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @OperateShrine@12
_TEXT	SEGMENT
_pnum$ = -4
_i$ = -20
_sType$ = 8
_v12$ = 8
_j$ = 8
_v88$ = 8
_v107$ = -12
_v108$ = -16
@OperateShrine@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 3912
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
; Line 3926
	xor	eax, eax
	cmp	DWORD PTR _dropGoldFlag, eax
	mov	esi, edx
	mov	edi, ecx
	mov	DWORD PTR _i$[ebp], esi
	mov	DWORD PTR _pnum$[ebp], edi
	je	SHORT $L87078
; Line 3927
	mov	DWORD PTR _dropGoldFlag, eax
; Line 3928
	mov	DWORD PTR _dropGoldValue, eax
$L87078:
; Line 3933
	imul	esi, 120				; 00000078H
	lea	ebx, DWORD PTR _object[esi+64]
	cmp	BYTE PTR [ebx], 0
	je	$L87328
; Line 3936
	mov	ecx, DWORD PTR _object[esi+84]
	call	@SetRndSeed@4
; Line 3939
	mov	eax, DWORD PTR _deltaload
	and	BYTE PTR [ebx], 0
	test	eax, eax
	je	SHORT $L87080
; Line 3941
	mov	ecx, DWORD PTR _object[esi+32]
	xor	ebx, ebx
	mov	DWORD PTR _object[esi+16], ebx
	mov	DWORD PTR _object[esi+36], ecx
; Line 3942
	jmp	SHORT $L87081
$L87080:
; Line 3943
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	mov	ecx, DWORD PTR _sType$[ebp]
	call	@PlaySfxLoc@12
; Line 3944
	xor	eax, eax
	inc	eax
; Line 3945
	xor	ebx, ebx
	mov	DWORD PTR _object[esi+16], eax
	mov	DWORD PTR _object[esi+24], eax
	mov	eax, DWORD PTR _deltaload
$L87081:
; Line 3948
	mov	ecx, DWORD PTR _object[esi+88]
	cmp	ecx, 25					; 00000019H
	ja	$L87327
	jmp	DWORD PTR $L88985[ecx*4]
$L87086:
; Line 3950
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 3952
	or	esi, -1
	mov	ecx, edi
	mov	edx, esi
	call	@ModifyPlrStr@8
; Line 3953
	mov	edx, esi
	mov	ecx, edi
	call	@ModifyPlrMag@8
; Line 3954
	mov	edx, esi
	mov	ecx, edi
	call	@ModifyPlrDex@8
; Line 3955
	mov	edx, esi
	mov	ecx, edi
	call	@ModifyPlrVit@8
; Line 3956
	xor	cl, cl
	push	4
	pop	edx
	call	@random@8
	sub	eax, ebx
	je	SHORT $L87093
	dec	eax
	je	SHORT $L87094
	dec	eax
	je	SHORT $L87095
	dec	eax
	jne	SHORT $L87090
; Line 3967
	push	6
	mov	ecx, edi
	pop	edx
	call	@ModifyPlrVit@8
; Line 3968
	jmp	SHORT $L87090
$L87095:
; Line 3964
	push	6
	mov	ecx, edi
	pop	edx
	call	@ModifyPlrDex@8
; Line 3965
	jmp	SHORT $L87090
$L87094:
; Line 3961
	push	6
	mov	ecx, edi
	pop	edx
	call	@ModifyPlrMag@8
; Line 3962
	jmp	SHORT $L87090
$L87093:
; Line 3958
	push	6
	mov	ecx, edi
	pop	edx
	call	@ModifyPlrStr@8
$L87090:
; Line 3970
	mov	ecx, edi
	call	@CheckStats@4
; Line 3971
	mov	cl, 12					; 0000000cH
; Line 3972
	jmp	$L88983
$L87097:
; Line 3974
	xor	edx, edx
; Line 3975
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 3977
	mov	esi, edi
	push	7
	imul	esi, 21720				; 000054d8H
	pop	ecx
	mov	ebx, 368				; 00000170H
	lea	eax, DWORD PTR _plr[esi+900]
$L87100:
; Line 3978
	cmp	DWORD PTR [eax], -1
	je	SHORT $L87101
; Line 3979
	inc	edx
$L87101:
; Line 3977
	add	eax, ebx
	dec	ecx
	jne	SHORT $L87100
; Line 3981
	test	edx, edx
	jle	$L87119
; Line 3982
	lea	edi, DWORD PTR _plr[esi+1132]
	mov	DWORD PTR 8+[ebp], 7
	mov	eax, edi
$L87105:
; Line 3985
	cmp	DWORD PTR [eax-232], -1
	je	SHORT $L87106
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 255				; 000000ffH
	je	SHORT $L87106
	test	ecx, ecx
	je	SHORT $L87106
; Line 3986
	add	DWORD PTR [eax-4], 10			; 0000000aH
	mov	edx, DWORD PTR [eax-4]
; Line 3987
	add	ecx, 10					; 0000000aH
; Line 3988
	cmp	edx, ecx
	mov	DWORD PTR [eax], ecx
	jle	SHORT $L87106
; Line 3989
	mov	DWORD PTR [eax-4], ecx
$L87106:
; Line 3982
	add	eax, ebx
	dec	DWORD PTR 8+[ebp]
	jne	SHORT $L87105
; Line 3992
	push	7
	mov	eax, edi
	xor	edx, edx
	pop	edi
$L87110:
; Line 3996
	cmp	DWORD PTR [eax-232], -1
	je	SHORT $L87111
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 255				; 000000ffH
	je	SHORT $L87111
	test	ecx, ecx
	je	SHORT $L87111
; Line 3997
	inc	edx
$L87111:
; Line 3993
	add	eax, ebx
	dec	edi
	jne	SHORT $L87110
; Line 3999
	test	edx, edx
	jle	SHORT $L87119
$L87115:
; Line 4001
	push	7
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 4002
	mov	ecx, eax
	imul	ecx, 368				; 00000170H
	add	ecx, esi
	cmp	DWORD PTR _plr[ecx+900], -1
	je	SHORT $L87115
	mov	ecx, DWORD PTR _plr[ecx+1132]
	cmp	ecx, 255				; 000000ffH
	je	SHORT $L87115
	test	ecx, ecx
	je	SHORT $L87115
; Line 4004
	imul	eax, 368				; 00000170H
	lea	ecx, DWORD PTR [eax+esi]
	lea	eax, DWORD PTR _plr[ecx+1128]
; Line 4005
	lea	ecx, DWORD PTR _plr[ecx+1132]
	add	DWORD PTR [eax], -20			; ffffffecH
	mov	edx, DWORD PTR [eax]
	add	DWORD PTR [ecx], -20			; ffffffecH
	mov	esi, DWORD PTR [ecx]
; Line 4006
	test	edx, edx
	jg	SHORT $L87118
; Line 4007
	mov	DWORD PTR [eax], 1
$L87118:
; Line 4008
	test	esi, esi
	jg	SHORT $L87119
; Line 4009
	mov	DWORD PTR [ecx], 1
$L87119:
; Line 4012
	mov	cl, 13					; 0000000dH
; Line 4013
	jmp	$L88984
$L87120:
; Line 4015
	cmp	eax, ebx
	jne	$L87328
; Line 4017
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4018
	mov	eax, edi
	or	edi, -1
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+900], edi
	je	SHORT $L87123
; Line 4019
	add	DWORD PTR _plr[eax+1104], 2
$L87123:
; Line 4020
	cmp	DWORD PTR _plr[eax+3108], edi
	je	SHORT $L87124
; Line 4021
	add	DWORD PTR _plr[eax+3312], 2
$L87124:
; Line 4022
	mov	ecx, DWORD PTR _plr[eax+2372]
	cmp	ecx, edi
	je	SHORT $L87128
; Line 4023
	cmp	ecx, 5
	jne	SHORT $L87126
; Line 4024
	add	DWORD PTR _plr[eax+2576], 2
; Line 4025
	jmp	SHORT $L87128
$L87126:
; Line 4027
	mov	edx, DWORD PTR _plr[eax+2568]
	lea	ecx, DWORD PTR _plr[eax+2572]
	dec	DWORD PTR [ecx]
	mov	esi, DWORD PTR [ecx]
	cmp	esi, edx
	jge	SHORT $L87128
; Line 4028
	mov	DWORD PTR [ecx], edx
$L87128:
; Line 4031
	mov	ecx, DWORD PTR _plr[eax+2740]
	cmp	ecx, edi
	je	SHORT $L87132
; Line 4032
	cmp	ecx, 5
	jne	SHORT $L87130
; Line 4033
	add	DWORD PTR _plr[eax+2944], 2
; Line 4034
	jmp	SHORT $L87132
$L87130:
; Line 4036
	mov	edx, DWORD PTR _plr[eax+2936]
	lea	ecx, DWORD PTR _plr[eax+2940]
	dec	DWORD PTR [ecx]
	mov	esi, DWORD PTR [ecx]
	cmp	esi, edx
	jge	SHORT $L87132
; Line 4037
	mov	DWORD PTR [ecx], edx
$L87132:
; Line 4040
	cmp	DWORD PTR _plr[eax+18188], ebx
	mov	DWORD PTR _j$[ebp], ebx
	jle	SHORT $L87135
	lea	edx, DWORD PTR _plr[eax+3476]
	mov	ebx, 368				; 00000170H
$L87133:
; Line 4041
	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	jle	SHORT $L87134
; Line 4042
	cmp	ecx, 4
	jle	SHORT $L87138
	cmp	ecx, 10					; 0000000aH
	je	SHORT $L87138
; Line 4046
	cmp	ecx, 9
	jg	SHORT $L87134
; Line 4047
	add	DWORD PTR [edx+204], 2
	jmp	SHORT $L87134
$L87138:
; Line 4044
	mov	esi, DWORD PTR [edx+196]
	lea	ecx, DWORD PTR [edx+200]
	dec	DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx]
	cmp	edi, esi
	jge	SHORT $L87134
; Line 4045
	mov	DWORD PTR [ecx], esi
$L87134:
; Line 4040
	inc	DWORD PTR _j$[ebp]
	add	edx, ebx
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _plr[eax+18188]
	jl	SHORT $L87133
$L87135:
; Line 4051
	mov	cl, 14					; 0000000eH
; Line 4053
	jmp	$L88984
$L87142:
; Line 4055
	cmp	eax, ebx
	jne	$L87328
; Line 4057
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4058
	mov	eax, edi
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+2372]
	cmp	ecx, -1
	je	SHORT $L87145
	cmp	ecx, 5
	je	SHORT $L87145
; Line 4059
	inc	DWORD PTR _plr[eax+2572]
$L87145:
; Line 4060
	mov	ecx, DWORD PTR _plr[eax+2740]
	cmp	ecx, -1
	je	SHORT $L87146
	cmp	ecx, 5
	je	SHORT $L87146
; Line 4061
	inc	DWORD PTR _plr[eax+2940]
$L87146:
; Line 4062
	xor	esi, esi
	cmp	DWORD PTR _plr[eax+18188], ebx
	jle	SHORT $L87149
	lea	ecx, DWORD PTR _plr[eax+3476]
	mov	ebx, 368				; 00000170H
$L87147:
; Line 4063
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	jle	SHORT $L87148
	cmp	edx, 4
	jle	SHORT $L87151
	cmp	edx, 10					; 0000000aH
	jne	SHORT $L87148
$L87151:
; Line 4064
	inc	DWORD PTR [ecx+200]
$L87148:
; Line 4062
	inc	esi
	add	ecx, ebx
	cmp	esi, DWORD PTR _plr[eax+18188]
	jl	SHORT $L87147
$L87149:
; Line 4066
	mov	cl, 15					; 0000000fH
; Line 4068
	jmp	$L88983
$L87152:
; Line 4071
	cmp	eax, ebx
	jne	$L87328
; Line 4083
	movzx	esi, BYTE PTR _leveltype
	mov	eax, edi
	add	esi, esi
	imul	eax, 21720				; 000054d8H
	push	esi
	push	ebx
	mov	edx, DWORD PTR _plr[eax+60]
	mov	ecx, DWORD PTR _plr[eax+56]
	push	edi
	push	-1
	push	13					; 0000000dH
	push	DWORD PTR _plr[eax+112]
	push	edx
	push	ecx
	call	@AddMissile@40
; Line 4084
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4086
	mov	cl, 16					; 00000010H
; Line 4087
	jmp	$L88983
$L87155:
; Line 4089
	cmp	eax, ebx
	jne	$L87328
; Line 4091
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4092
	mov	eax, edi
	push	7
	imul	eax, 21720				; 000054d8H
	pop	edx
	mov	ebx, 368				; 00000170H
	lea	ecx, DWORD PTR _plr[eax+1124]
$L87158:
; Line 4093
	cmp	DWORD PTR [ecx-224], 10			; 0000000aH
	jne	SHORT $L87159
; Line 4094
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx-4], esi
$L87159:
	add	ecx, ebx
	dec	edx
	jne	SHORT $L87158
; Line 4096
	xor	edx, edx
	cmp	DWORD PTR _plr[eax+18188], edx
	jle	SHORT $L87164
	lea	ecx, DWORD PTR _plr[eax+3700]
$L87162:
; Line 4097
	cmp	DWORD PTR [ecx-224], 10			; 0000000aH
	jne	SHORT $L87163
; Line 4098
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx-4], esi
$L87163:
	inc	edx
	add	ecx, ebx
	cmp	edx, DWORD PTR _plr[eax+18188]
	jl	SHORT $L87162
$L87164:
; Line 4100
	push	8
	lea	eax, DWORD PTR _plr[eax+18464]
	pop	ecx
$L87166:
; Line 4101
	cmp	DWORD PTR [eax-224], 10			; 0000000aH
	jne	SHORT $L87167
; Line 4102
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax-4], edx
$L87167:
	add	eax, ebx
	dec	ecx
	jne	SHORT $L87166
; Line 4104
	mov	cl, 17					; 00000011H
; Line 4106
	jmp	$L88983
$L87170:
; Line 4108
	cmp	eax, ebx
	jne	$L87328
; Line 4110
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4111
	mov	eax, edi
	push	7
	imul	eax, 21720				; 000054d8H
	pop	edx
	mov	ebx, 368				; 00000170H
	lea	ecx, DWORD PTR _plr[eax+1128]
$L87173:
; Line 4112
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], esi
	add	ecx, ebx
	dec	edx
	jne	SHORT $L87173
; Line 4113
	lea	edx, DWORD PTR _plr[eax+18188]
	xor	esi, esi
	cmp	DWORD PTR [edx], esi
	jle	SHORT $L87178
	lea	ecx, DWORD PTR _plr[eax+3704]
$L87176:
; Line 4114
	mov	edi, DWORD PTR [ecx+4]
	inc	esi
	mov	DWORD PTR [ecx], edi
	add	ecx, ebx
	cmp	esi, DWORD PTR [edx]
	jl	SHORT $L87176
$L87178:
; Line 4115
	push	8
	lea	eax, DWORD PTR _plr[eax+18468]
	pop	ecx
$L87179:
; Line 4116
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], edx
	add	eax, ebx
	dec	ecx
	jne	SHORT $L87179
; Line 4117
	mov	cl, 18					; 00000012H
; Line 4119
	jmp	$L88984
$L87182:
; Line 4121
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4124
	mov	esi, DWORD PTR _pnum$[ebp]
	and	DWORD PTR _v12$[ebp], 0
	xor	ebx, ebx
	inc	ebx
	imul	esi, 21720				; 000054d8H
	mov	edi, DWORD PTR _plr[esi+264]
$L87185:
; Line 4125
	xor	eax, eax
	lea	ecx, DWORD PTR [ebx-1]
	inc	eax
	xor	edx, edx
	call	__allshl
	and	edx, DWORD PTR _plr[esi+268]
	and	eax, edi
	or	eax, edx
	je	SHORT $L87186
; Line 4126
	inc	DWORD PTR _v12$[ebp]
$L87186:
; Line 4124
	inc	ebx
	cmp	ebx, 37					; 00000025H
	jle	SHORT $L87185
; Line 4128
	cmp	DWORD PTR _v12$[ebp], 1
	jle	SHORT $L87202
; Line 4129
	xor	ebx, ebx
	inc	ebx
$L87191:
; Line 4130
	xor	eax, eax
	lea	ecx, DWORD PTR [ebx-1]
	inc	eax
	xor	edx, edx
	call	__allshl
	and	eax, DWORD PTR _plr[esi+264]
	and	edx, DWORD PTR _plr[esi+268]
	or	eax, edx
	je	SHORT $L87192
; Line 4131
	lea	ecx, DWORD PTR _plr[esi+ebx+193]
	mov	al, BYTE PTR [ecx]
	cmp	al, 15					; 0000000fH
	jge	SHORT $L87192
; Line 4132
	inc	al
	mov	BYTE PTR [ecx], al
$L87192:
	inc	ebx
	cmp	ebx, 37					; 00000025H
	jle	SHORT $L87191
$L87197:
; Line 4136
	push	37					; 00000025H
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	ebx, eax
; Line 4137
	xor	eax, eax
	inc	ebx
	inc	eax
	xor	edx, edx
	lea	ecx, DWORD PTR [ebx-1]
	call	__allshl
	and	eax, DWORD PTR _plr[esi+264]
	and	edx, DWORD PTR _plr[esi+268]
	or	eax, edx
	je	SHORT $L87197
; Line 4138
	lea	esi, DWORD PTR _plr[esi+ebx+193]
	mov	al, BYTE PTR [esi]
	cmp	al, 2
	jge	SHORT $L87201
; Line 4139
	and	BYTE PTR [esi], 0
; Line 4140
	jmp	SHORT $L87202
$L87201:
; Line 4141
	sub	al, 2
	mov	BYTE PTR [esi], al
$L87202:
; Line 4143
	mov	cl, 19					; 00000013H
; Line 4144
	jmp	$L88984
$L87203:
; Line 4146
	xor	ecx, ecx
	cmp	DWORD PTR _nobjects, ebx
	mov	DWORD PTR _j$[ebp], ecx
	jle	SHORT $L87206
$L87204:
; Line 4147
	mov	esi, DWORD PTR _objectactive[ecx*4]
; Line 4152
	imul	esi, 120				; 00000078H
	mov	ecx, DWORD PTR _object[esi]
	cmp	ecx, 5
	je	SHORT $L87208
	cmp	ecx, 6
	je	SHORT $L87208
	cmp	ecx, 7
	jne	SHORT $L87205
$L87208:
	lea	ebx, DWORD PTR _object[esi+64]
	cmp	BYTE PTR [ebx], 0
	jne	SHORT $L88960
; Line 4153
	add	DWORD PTR _object[esi+36], -2		; fffffffeH
; Line 4154
	call	_GetRndSeed
	mov	DWORD PTR _object[esi+84], eax
; Line 4155
	mov	eax, DWORD PTR _deltaload
	mov	BYTE PTR [ebx], 1
$L88960:
	xor	ebx, ebx
$L87205:
; Line 4146
	mov	ecx, DWORD PTR _j$[ebp]
	inc	ecx
	cmp	ecx, DWORD PTR _nobjects
	mov	DWORD PTR _j$[ebp], ecx
	jl	SHORT $L87204
$L87206:
; Line 4158
	cmp	eax, ebx
	jne	$L87328
; Line 4160
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4161
	mov	cl, 20					; 00000014H
; Line 4162
	jmp	$L88983
$L87211:
; Line 4164
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4166
	mov	ecx, edi
	imul	ecx, 21720				; 000054d8H
	lea	eax, DWORD PTR _plr[ecx+264]
	mov	edx, DWORD PTR [eax+4]
	or	DWORD PTR [eax], 1
	mov	DWORD PTR [eax+4], edx
; Line 4167
	mov	al, BYTE PTR _plr[ecx+194]
	cmp	al, 15					; 0000000fH
	jge	SHORT $L87215
; Line 4168
	inc	al
	mov	BYTE PTR _plr[ecx+194], al
$L87215:
; Line 4169
	mov	al, BYTE PTR _plr[ecx+194]
	cmp	al, 15					; 0000000fH
	jge	SHORT $L87216
; Line 4170
	inc	al
	mov	BYTE PTR _plr[ecx+194], al
$L87216:
; Line 4171
	mov	esi, DWORD PTR _plr[ecx+424]
	push	10					; 0000000aH
	mov	eax, esi
	pop	edi
	cdq
	idiv	edi
; Line 4172
	mov	ebx, DWORD PTR _plr[ecx+428]
	mov	edx, DWORD PTR _plr[ecx+420]
	sub	ebx, edx
	mov	edi, eax
; Line 4173
	mov	eax, DWORD PTR _plr[ecx+432]
	sub	eax, esi
; Line 4174
	sub	edx, edi
; Line 4176
	sub	esi, edi
	mov	DWORD PTR _plr[ecx+420], edx
	mov	edx, DWORD PTR _plr[ecx+428]
	mov	DWORD PTR _plr[ecx+424], esi
; Line 4177
	mov	esi, DWORD PTR _plr[ecx+432]
	sub	edx, edi
	sub	esi, edi
	mov	DWORD PTR _plr[ecx+428], edx
; Line 4178
	test	edx, -64				; ffffffc0H
	mov	DWORD PTR _plr[ecx+432], esi
	jg	SHORT $L87217
; Line 4180
	and	DWORD PTR _plr[ecx+420], 0
	mov	DWORD PTR _plr[ecx+428], ebx
$L87217:
; Line 4182
	test	esi, -64				; ffffffc0H
	jg	SHORT $L87218
; Line 4184
	and	DWORD PTR _plr[ecx+424], 0
	mov	DWORD PTR _plr[ecx+432], eax
$L87218:
; Line 4186
	mov	cl, 21					; 00000015H
; Line 4187
	jmp	$L88984
$L87219:
; Line 4189
	cmp	eax, ebx
	jne	$L87328
; Line 4201
	movzx	eax, BYTE PTR _leveltype
	mov	esi, edi
	add	eax, eax
	imul	esi, 21720				; 000054d8H
	push	eax
	push	ebx
	mov	edx, DWORD PTR _plr[esi+60]
	mov	ecx, DWORD PTR _plr[esi+56]
	push	edi
	push	-1
	push	42					; 0000002aH
	push	DWORD PTR _plr[esi+112]
	push	edx
	push	ecx
	call	@AddMissile@40
; Line 4202
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4204
	mov	eax, DWORD PTR _plr[esi+432]
; Line 4206
	mov	cl, 22					; 00000016H
	mov	DWORD PTR _plr[esi+428], eax
	mov	eax, DWORD PTR _plr[esi+424]
	mov	DWORD PTR _plr[esi+420], eax
; Line 4207
	jmp	$L88983
$L87222:
; Line 4209
	cmp	eax, ebx
	jne	$L87328
; Line 4211
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4212
	mov	esi, edi
	and	DWORD PTR _j$[ebp], 0
	imul	esi, 21720				; 000054d8H
	mov	ebx, 368				; 00000170H
	cmp	DWORD PTR _plr[esi+18188], 0
	jle	$L87227
	lea	edi, DWORD PTR _plr[esi+3688]
$L87225:
; Line 4213
	cmp	DWORD PTR [edi-212], 0
	jne	$L87226
; Line 4215
	mov	eax, DWORD PTR [edi]
	cmp	eax, 3
	je	SHORT $L87230
	cmp	eax, 6
	jne	SHORT $L88822
$L87230:
; Line 4216
	push	18					; 00000012H
	pop	ecx
	call	@ItemMiscIdIdx@4
	mov	edx, eax
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandItem@8
; Line 4217
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@GetPlrHandSeed@4
; Line 4219
	lea	eax, DWORD PTR [edi-220]
	lea	ecx, DWORD PTR _plr[esi+21176]
	mov	DWORD PTR _plr[esi+21532], 1
	sub	ecx, eax
	mov	DWORD PTR -8+[ebp], ebx
$L88821:
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
	inc	eax
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L88821
$L88822:
; Line 4222
	mov	eax, DWORD PTR [edi]
	cmp	eax, 2
	je	SHORT $L87233
	cmp	eax, 7
	jne	SHORT $L87226
$L87233:
; Line 4223
	push	19					; 00000013H
	pop	ecx
	call	@ItemMiscIdIdx@4
	mov	edx, eax
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandItem@8
; Line 4224
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@GetPlrHandSeed@4
; Line 4226
	lea	eax, DWORD PTR [edi-220]
	lea	ecx, DWORD PTR _plr[esi+21176]
	mov	DWORD PTR _plr[esi+21532], 1
	sub	ecx, eax
	mov	DWORD PTR -8+[ebp], ebx
$L88830:
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
	inc	eax
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L88830
$L87226:
; Line 4212
	inc	DWORD PTR _j$[ebp]
	add	edi, ebx
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _plr[esi+18188]
	jl	$L87225
$L87227:
; Line 4230
	lea	edi, DWORD PTR _plr[esi+18452]
	mov	DWORD PTR -8+[ebp], 8
$L87235:
; Line 4231
	cmp	DWORD PTR [edi-212], 0
	jne	$L87236
; Line 4233
	mov	eax, DWORD PTR [edi]
	cmp	eax, 3
	je	SHORT $L87240
	cmp	eax, 6
	jne	SHORT $L88840
$L87240:
; Line 4234
	push	18					; 00000012H
	pop	ecx
	call	@ItemMiscIdIdx@4
	mov	edx, eax
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandItem@8
; Line 4235
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@GetPlrHandSeed@4
; Line 4237
	lea	eax, DWORD PTR [edi-220]
	lea	ecx, DWORD PTR _plr[esi+21176]
	mov	DWORD PTR _plr[esi+21532], 1
	sub	ecx, eax
	mov	DWORD PTR 8+[ebp], ebx
$L88839:
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
	inc	eax
	dec	DWORD PTR 8+[ebp]
	jne	SHORT $L88839
$L88840:
; Line 4240
	mov	eax, DWORD PTR [edi]
	cmp	eax, 2
	je	SHORT $L87243
	cmp	eax, 7
	jne	SHORT $L87236
$L87243:
; Line 4241
	push	19					; 00000013H
	pop	ecx
	call	@ItemMiscIdIdx@4
	mov	edx, eax
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandItem@8
; Line 4242
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@GetPlrHandSeed@4
; Line 4244
	lea	eax, DWORD PTR [edi-220]
	lea	ecx, DWORD PTR _plr[esi+21176]
	mov	DWORD PTR _plr[esi+21532], 1
	sub	ecx, eax
	mov	DWORD PTR 8+[ebp], ebx
$L88848:
	mov	dl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [eax], dl
	inc	eax
	dec	DWORD PTR 8+[ebp]
	jne	SHORT $L88848
$L87236:
; Line 4230
	add	edi, ebx
	dec	DWORD PTR -8+[ebp]
	jne	$L87235
; Line 4248
	mov	cl, 24					; 00000018H
; Line 4250
	jmp	$L88984
$L87245:
; Line 4252
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4254
	push	2
	mov	ecx, edi
	pop	edx
	call	@ModifyPlrMag@8
; Line 4255
	mov	ecx, edi
	call	@CheckStats@4
; Line 4256
	mov	cl, 25					; 00000019H
; Line 4257
	jmp	$L88983
$L87248:
; Line 4259
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4261
	movzx	eax, BYTE PTR _currlevel
; Line 4262
	mov	ecx, DWORD PTR _object[esi+4]
	mov	edx, DWORD PTR _object[esi+8]
	add	eax, eax
	push	1
	cmp	eax, 7
	push	ebx
	jl	SHORT $L87251
	push	19					; 00000013H
	push	ebx
	push	ebx
	call	@CreateTypeItem@28
; Line 4263
	push	1
	push	ebx
	push	19					; 00000013H
; Line 4264
	jmp	SHORT $L88982
$L87251:
; Line 4265
	push	7
	push	ebx
	push	ebx
	call	@CreateTypeItem@28
; Line 4266
	push	1
	push	ebx
	push	2
$L88982:
	mov	ecx, DWORD PTR _object[esi+4]
	mov	edx, DWORD PTR _object[esi+8]
	push	ebx
	push	ebx
	call	@CreateTypeItem@28
; Line 4268
	mov	eax, edi
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+432]
	mov	DWORD PTR _plr[eax+428], ecx
; Line 4269
	mov	ecx, DWORD PTR _plr[eax+424]
	mov	DWORD PTR _plr[eax+420], ecx
; Line 4270
	mov	ecx, DWORD PTR _plr[eax+412]
	mov	DWORD PTR _plr[eax+408], ecx
; Line 4271
	mov	ecx, DWORD PTR _plr[eax+404]
	mov	DWORD PTR _plr[eax+400], ecx
; Line 4272
	mov	cl, 26					; 0000001aH
; Line 4273
	jmp	$L88983
$L87253:
; Line 4275
	cmp	eax, ebx
	jne	$L87328
; Line 4277
	mov	DWORD PTR _v88$[ebp], ebx
	jmp	SHORT $L87255
$L88961:
	xor	ebx, ebx
$L87255:
; Line 4279
	inc	DWORD PTR _v88$[ebp]
; Line 4280
	push	112					; 00000070H
	pop	edx
	mov	cl, 159					; 0000009fH
	call	@random@8
; Line 4281
	mov	cl, 159					; 0000009fH
	mov	esi, eax
	push	112					; 00000070H
	pop	edx
	call	@random@8
; Line 4282
	cmp	DWORD PTR _v88$[ebp], 12544		; 00003100H
	jg	SHORT $L87258
	mov	ecx, esi
	imul	ecx, 112				; 00000070H
	add	ecx, eax
	mov	edx, ecx
	shl	edx, 2
	mov	ebx, DWORD PTR _dPiece[edx]
	cmp	BYTE PTR _nSolidTable[ebx], 0
	jne	SHORT $L88961
	cmp	BYTE PTR _dObject[ecx], 0
	jne	SHORT $L88961
	xor	ebx, ebx
	cmp	DWORD PTR _dMonster[edx], ebx
	jne	SHORT $L87255
$L87258:
; Line 4283
	movzx	edx, BYTE PTR _leveltype
	mov	ecx, edi
	add	edx, edx
	imul	ecx, 21720				; 000054d8H
	push	edx
	push	ebx
	mov	edx, DWORD PTR _plr[ecx+60]
	push	edi
	push	-1
	push	3
	push	DWORD PTR _plr[ecx+112]
	mov	ecx, DWORD PTR _plr[ecx+56]
	push	eax
	push	esi
	call	@AddMissile@40
; Line 4284
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4286
	mov	cl, 27					; 0000001bH
; Line 4287
	jmp	$L88983
$L87260:
; Line 4289
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4291
	mov	ecx, edi
	imul	ecx, 21720				; 000054d8H
	lea	eax, DWORD PTR _plr[ecx+264]
	mov	edx, DWORD PTR [eax+4]
	or	BYTE PTR [eax+3], 32			; 00000020H
	mov	DWORD PTR [eax+4], edx
; Line 4292
	mov	al, BYTE PTR _plr[ecx+223]
	cmp	al, 15					; 0000000fH
	jge	SHORT $L87264
; Line 4293
	inc	al
	mov	BYTE PTR _plr[ecx+223], al
$L87264:
; Line 4294
	mov	al, BYTE PTR _plr[ecx+223]
	cmp	al, 15					; 0000000fH
	jge	SHORT $L87265
; Line 4295
	inc	al
	mov	BYTE PTR _plr[ecx+223], al
$L87265:
; Line 4296
	mov	esi, DWORD PTR _plr[ecx+424]
	push	10					; 0000000aH
	mov	eax, esi
	pop	edi
	cdq
	idiv	edi
; Line 4297
	mov	ebx, DWORD PTR _plr[ecx+428]
	mov	edx, DWORD PTR _plr[ecx+420]
	sub	ebx, edx
	mov	edi, eax
; Line 4298
	mov	eax, DWORD PTR _plr[ecx+432]
	sub	eax, esi
; Line 4299
	sub	edx, edi
; Line 4301
	sub	esi, edi
	mov	DWORD PTR _plr[ecx+420], edx
	mov	edx, DWORD PTR _plr[ecx+428]
	mov	DWORD PTR _plr[ecx+424], esi
; Line 4302
	mov	esi, DWORD PTR _plr[ecx+432]
	sub	edx, edi
	sub	esi, edi
	mov	DWORD PTR _plr[ecx+428], edx
; Line 4303
	test	edx, -64				; ffffffc0H
	mov	DWORD PTR _plr[ecx+432], esi
	jg	SHORT $L87266
; Line 4305
	and	DWORD PTR _plr[ecx+420], 0
	mov	DWORD PTR _plr[ecx+428], ebx
$L87266:
; Line 4307
	test	esi, -64				; ffffffc0H
	jg	SHORT $L87267
; Line 4309
	and	DWORD PTR _plr[ecx+424], 0
	mov	DWORD PTR _plr[ecx+432], eax
$L87267:
; Line 4311
	mov	cl, 28					; 0000001cH
; Line 4312
	jmp	$L88984
$L87268:
; Line 4314
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4316
	and	DWORD PTR _j$[ebp], 0
	mov	ebx, edi
	imul	ebx, 21720				; 000054d8H
$L87271:
; Line 4317
	mov	eax, DWORD PTR _j$[ebp]
	cmp	BYTE PTR _plr[ebx+eax+18192], 0
	jne	$L87272
; Line 4318
	movzx	eax, BYTE PTR _leveltype
	mov	cl, 160					; 000000a0H
	lea	edx, DWORD PTR [eax+eax*4]
	add	edx, edx
	call	@random@8
	movzx	ecx, BYTE PTR _leveltype
; Line 4320
	push	92					; 0000005cH
	lea	ecx, DWORD PTR [ecx+ecx*4]
	add	eax, ecx
	mov	ecx, DWORD PTR _plr[ebx+18188]
	mov	DWORD PTR _v107$[ebp], eax
	mov	eax, ecx
	imul	eax, 368				; 00000170H
	mov	DWORD PTR _v108$[ebp], ecx
	imul	ecx, 368				; 00000170H
	add	eax, ebx
	mov	DWORD PTR -8+[ebp], eax
; Line 4443
	lea	eax, DWORD PTR _plr[eax+3468]
	mov	esi, eax
	mov	edi, eax
	sub	esi, ecx
	pop	ecx
	sub	esi, ebx
	sub	esi, OFFSET FLAT:_plr+3468
	add	esi, OFFSET FLAT:_golditem
	rep movsd
	inc	DWORD PTR _plr[ebx+18188]
	call	_GetRndSeed
	mov	ecx, DWORD PTR -8+[ebp]
	mov	edx, DWORD PTR _v108$[ebp]
	lea	ecx, DWORD PTR _plr[ecx+3468]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	al, BYTE PTR _plr[ebx+18188]
	mov	BYTE PTR _plr[ebx+ecx+18192], al
	mov	ecx, DWORD PTR -8+[ebp]
	mov	eax, DWORD PTR _v107$[ebp]
	mov	DWORD PTR _plr[ecx+3664], eax
	mov	ecx, DWORD PTR _pnum$[ebp]
	add	DWORD PTR _plr[ebx+460], eax
	call	@SetGoldCurs@8
	mov	edi, DWORD PTR _pnum$[ebp]
$L87272:
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], 40			; 00000028H
	jl	$L87271
; Line 4329
	mov	cl, 29					; 0000001dH
; Line 4330
	jmp	SHORT $L88983
$L87276:
; Line 4332
	cmp	eax, ebx
	jne	$L87328
; Line 4334
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L87278
; Line 4335
	mov	cl, 30					; 0000001eH
$L88983:
	call	@InitDiabloMsg@4
; Line 4336
	jmp	$L87327
$L87278:
; Line 4337
	mov	cl, 31					; 0000001fH
	call	@InitDiabloMsg@4
; Line 4338
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+412]
	mov	DWORD PTR _plr[eax+408], ecx
; Line 4339
	mov	ecx, DWORD PTR _plr[eax+404]
	mov	DWORD PTR _plr[eax+400], ecx
; Line 4340
	mov	ecx, DWORD PTR _plr[eax+432]
	mov	DWORD PTR _plr[eax+428], ecx
; Line 4341
	mov	ecx, DWORD PTR _plr[eax+424]
	mov	DWORD PTR _plr[eax+420], ecx
; Line 4343
	jmp	$L87327
$L87280:
; Line 4345
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4347
	push	2
	mov	ecx, edi
	pop	edx
	call	@ModifyPlrDex@8
; Line 4348
	mov	ecx, edi
	call	@CheckStats@4
; Line 4349
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4350
	mov	cl, 32					; 00000020H
; Line 4351
	jmp	$L88983
$L87284:
; Line 4353
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4355
	push	2
	mov	ecx, edi
	pop	edx
	call	@ModifyPlrStr@8
; Line 4356
	mov	ecx, edi
	call	@CheckStats@4
; Line 4357
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4358
	mov	cl, 33					; 00000021H
; Line 4359
	jmp	$L88983
$L87288:
; Line 4361
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4363
	push	2
	mov	ecx, edi
	pop	edx
	call	@ModifyPlrVit@8
; Line 4364
	mov	ecx, edi
	call	@CheckStats@4
; Line 4365
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4366
	mov	cl, 34					; 00000022H
; Line 4367
	jmp	$L88983
$L87292:
; Line 4369
	cmp	eax, ebx
	jne	$L87328
; Line 4371
	cmp	edi, DWORD PTR _myplr
	jne	$L87327
; Line 4372
	xor	ecx, ecx
$L87295:
; Line 4373
	push	40					; 00000028H
	lea	eax, DWORD PTR _automapview[ecx]
	pop	edx
$L87298:
; Line 4374
	mov	BYTE PTR [eax], 1
	add	eax, 40					; 00000028H
	dec	edx
	jne	SHORT $L87298
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L87295
; Line 4377
	mov	cl, 35					; 00000023H
; Line 4379
	jmp	$L88983
$L87301:
; Line 4381
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4383
	mov	ecx, edi
	imul	ecx, 21720				; 000054d8H
	lea	eax, DWORD PTR _plr[ecx+264]
	mov	edx, DWORD PTR [eax+4]
	or	BYTE PTR [eax+3], 64			; 00000040H
	mov	DWORD PTR [eax+4], edx
; Line 4384
	mov	al, BYTE PTR _plr[ecx+224]
	cmp	al, 15					; 0000000fH
	jge	SHORT $L87305
; Line 4385
	inc	al
	mov	BYTE PTR _plr[ecx+224], al
$L87305:
; Line 4386
	mov	al, BYTE PTR _plr[ecx+224]
	cmp	al, 15					; 0000000fH
	jge	SHORT $L87306
; Line 4387
	inc	al
	mov	BYTE PTR _plr[ecx+224], al
$L87306:
; Line 4388
	mov	esi, DWORD PTR _plr[ecx+424]
	push	10					; 0000000aH
	mov	eax, esi
	pop	edi
	cdq
	idiv	edi
; Line 4389
	mov	ebx, DWORD PTR _plr[ecx+428]
	mov	edx, DWORD PTR _plr[ecx+420]
	sub	ebx, edx
	mov	edi, eax
; Line 4390
	mov	eax, DWORD PTR _plr[ecx+432]
	sub	eax, esi
; Line 4391
	sub	edx, edi
; Line 4393
	sub	esi, edi
	mov	DWORD PTR _plr[ecx+420], edx
	mov	edx, DWORD PTR _plr[ecx+428]
	mov	DWORD PTR _plr[ecx+424], esi
; Line 4394
	mov	esi, DWORD PTR _plr[ecx+432]
	sub	edx, edi
	sub	esi, edi
	mov	DWORD PTR _plr[ecx+428], edx
; Line 4395
	test	edx, -64				; ffffffc0H
	mov	DWORD PTR _plr[ecx+432], esi
	jg	SHORT $L87307
; Line 4397
	and	DWORD PTR _plr[ecx+420], 0
	mov	DWORD PTR _plr[ecx+428], ebx
$L87307:
; Line 4399
	test	esi, -64				; ffffffc0H
	jg	SHORT $L87308
; Line 4401
	and	DWORD PTR _plr[ecx+424], 0
	mov	DWORD PTR _plr[ecx+432], eax
$L87308:
; Line 4403
	mov	cl, 36					; 00000024H
$L88984:
	call	@InitDiabloMsg@4
; Line 4404
	mov	edi, DWORD PTR _pnum$[ebp]
	jmp	$L87327
$L87309:
; Line 4406
	cmp	eax, ebx
	jne	$L87328
	cmp	edi, DWORD PTR _myplr
	jne	$L87328
; Line 4408
	mov	eax, edi
	push	7
	imul	eax, 21720				; 000054d8H
	xor	esi, esi
	pop	edx
	lea	ecx, DWORD PTR _plr[eax+948]
	mov	ebx, 368				; 00000170H
	inc	esi
$L87312:
; Line 4409
	cmp	BYTE PTR [ecx+4], 0
	je	SHORT $L87313
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $L87313
; Line 4410
	mov	DWORD PTR [ecx], esi
$L87313:
; Line 4408
	add	ecx, ebx
	dec	edx
	jne	SHORT $L87312
; Line 4412
	xor	edx, edx
	cmp	DWORD PTR _plr[eax+18188], edx
	jle	SHORT $L87318
	lea	ecx, DWORD PTR _plr[eax+3524]
$L87316:
; Line 4413
	cmp	BYTE PTR [ecx+4], 0
	je	SHORT $L87317
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $L87317
; Line 4414
	mov	DWORD PTR [ecx], esi
$L87317:
; Line 4412
	inc	edx
	add	ecx, ebx
	cmp	edx, DWORD PTR _plr[eax+18188]
	jl	SHORT $L87316
$L87318:
; Line 4416
	push	8
	lea	eax, DWORD PTR _plr[eax+18288]
	pop	ecx
$L87320:
; Line 4417
	cmp	BYTE PTR [eax+4], 0
	je	SHORT $L87321
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L87321
; Line 4418
	mov	DWORD PTR [eax], esi
$L87321:
; Line 4416
	add	eax, ebx
	dec	ecx
	jne	SHORT $L87320
; Line 4420
	mov	cl, 37					; 00000025H
; Line 4421
	jmp	$L88983
$L87324:
; Line 4423
	cmp	eax, ebx
	jne	$L87328
; Line 4425
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L87326
; Line 4426
	mov	cl, 38					; 00000026H
; Line 4427
	jmp	$L88983
$L87326:
; Line 4428
	mov	cl, 39					; 00000027H
	call	@InitDiabloMsg@4
; Line 4429
	mov	cl, 155					; 0000009bH
	push	4
	pop	edx
	call	@random@8
; Line 4430
	mov	ecx, DWORD PTR _myplr
	mov	esi, eax
	xor	edx, edx
	cmp	esi, ebx
	sete	dl
	lea	edx, DWORD PTR [edx+edx-1]
	call	@ModifyPlrStr@8
; Line 4431
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	cmp	esi, 1
	sete	dl
	lea	edx, DWORD PTR [edx+edx-1]
	call	@ModifyPlrMag@8
; Line 4432
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	cmp	esi, 2
	sete	dl
	lea	edx, DWORD PTR [edx+edx-1]
	call	@ModifyPlrDex@8
; Line 4433
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	cmp	esi, 3
	sete	dl
	lea	edx, DWORD PTR [edx+edx-1]
	call	@ModifyPlrVit@8
; Line 4434
	mov	ecx, DWORD PTR _myplr
	call	@CheckStats@4
$L87327:
; Line 4439
	xor	edx, edx
	mov	ecx, edi
	inc	edx
	call	@CalcPlrInv@8
; Line 4442
	cmp	edi, DWORD PTR _myplr
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	jne	SHORT $L87328
; Line 4443
	push	DWORD PTR _i$[ebp]
	mov	dl, 46					; 0000002eH
	xor	ecx, ecx
	push	edi
	call	@NetSendCmdParam2@16
$L87328:
	pop	edi
	pop	esi
	pop	ebx
; Line 4444
	leave
	ret	4
$L88985:
	DD	$L87086
	DD	$L87097
	DD	$L87120
	DD	$L87142
	DD	$L87152
	DD	$L87155
	DD	$L87170
	DD	$L87182
	DD	$L87203
	DD	$L87211
	DD	$L87219
	DD	$L87152
	DD	$L87222
	DD	$L87245
	DD	$L87248
	DD	$L87253
	DD	$L87260
	DD	$L87268
	DD	$L87276
	DD	$L87280
	DD	$L87284
	DD	$L87288
	DD	$L87292
	DD	$L87301
	DD	$L87309
	DD	$L87324
@OperateShrine@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateSkelBook@12
; Function compile flags: /Ogsy
;	COMDAT @OperateSkelBook@12
_TEXT	SEGMENT
_pnum$ = -4
_sendmsg$ = 8
@OperateSkelBook@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4450
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
; Line 4462
	mov	esi, edi
	xor	ebx, ebx
	imul	esi, 120				; 00000078H
	mov	DWORD PTR _pnum$[ebp], ecx
	cmp	BYTE PTR _object[esi+64], bl
	je	SHORT $L87348
; Line 4463
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L87344
; Line 4464
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	57					; 00000039H
	pop	ecx
	call	@PlaySfxLoc@12
$L87344:
; Line 4465
	add	DWORD PTR _object[esi+36], 2
; Line 4466
	cmp	DWORD PTR _deltaload, ebx
; Line 4467
	mov	BYTE PTR _object[esi+64], bl
; Line 4468
	jne	SHORT $L87348
; Line 4469
	mov	ecx, DWORD PTR _object[esi+84]
	call	@SetRndSeed@4
; Line 4470
	mov	cl, 161					; 000000a1H
	push	5
	pop	edx
	call	@random@8
; Line 4471
	mov	ecx, DWORD PTR _object[esi+4]
; Line 4472
	mov	edx, DWORD PTR _object[esi+8]
; Line 4473
	cmp	eax, ebx
; Line 4474
	push	ebx
	movzx	eax, BYTE PTR _sendmsg$[ebp]
	push	eax
	je	SHORT $L87346
	push	21					; 00000015H
; Line 4475
	jmp	SHORT $L88988
$L87346:
; Line 4476
	push	24					; 00000018H
$L88988:
	push	ebx
	push	ebx
	call	@CreateTypeItem@28
; Line 4477
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L87348
; Line 4478
	push	edi
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L87348:
	pop	edi
	pop	esi
	pop	ebx
; Line 4481
	leave
	ret	4
@OperateSkelBook@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateBookCase@12
EXTRN	@M_StartStand@8:NEAR
EXTRN	_UniqMonst:BYTE
; Function compile flags: /Ogsy
;	COMDAT @OperateBookCase@12
_TEXT	SEGMENT
_sendmsg$ = 8
@OperateBookCase@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4485
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, edx
; Line 4495
	xor	ebx, ebx
	mov	esi, edi
	mov	ebp, ecx
	imul	esi, 120				; 00000078H
	cmp	BYTE PTR _object[esi+64], bl
	je	$L87365
; Line 4496
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L87361
; Line 4497
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	57					; 00000039H
	pop	ecx
	call	@PlaySfxLoc@12
$L87361:
; Line 4498
	add	DWORD PTR _object[esi+36], -2		; fffffffeH
; Line 4499
	cmp	DWORD PTR _deltaload, ebx
; Line 4500
	mov	BYTE PTR _object[esi+64], bl
; Line 4501
	jne	$L87365
; Line 4502
	mov	ecx, DWORD PTR _object[esi+84]
	call	@SetRndSeed@4
; Line 4503
	movzx	eax, BYTE PTR _sendmsg$[esp+12]
	mov	edx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	push	ebx
	push	eax
	push	24					; 00000018H
	push	ebx
	push	ebx
	call	@CreateTypeItem@28
; Line 4508
	push	3
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L87363
	mov	eax, DWORD PTR _monster+1128
	cmp	eax, DWORD PTR _UniqMonst+68
	jne	SHORT $L87363
	cmp	BYTE PTR _monster+1072, -1
	jne	SHORT $L87363
	cmp	DWORD PTR _monster+1060, ebx
	je	SHORT $L87363
; Line 4510
	mov	edx, DWORD PTR _monster+984
	xor	ecx, ecx
	mov	DWORD PTR _monster+1120, 149		; 00000095H
	call	@M_StartStand@8
; Line 4511
	mov	BYTE PTR _monster+920, 5
; Line 4512
	mov	DWORD PTR _monster+916, 17		; 00000011H
$L87363:
; Line 4514
	cmp	ebp, DWORD PTR _myplr
	jne	SHORT $L87365
; Line 4515
	push	edi
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L87365:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 4518
	ret	4
@OperateBookCase@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateDecap@12
; Function compile flags: /Ogsy
;	COMDAT @OperateDecap@12
_TEXT	SEGMENT
_sendmsg$ = 8
@OperateDecap@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4522
	push	ebx
	push	ebp
	mov	ebp, edx
	push	esi
; Line 4532
	mov	esi, ebp
; Line 4533
	xor	ebx, ebx
	imul	esi, 120				; 00000078H
	push	edi
	mov	edi, ecx
	lea	eax, DWORD PTR _object[esi+64]
	cmp	BYTE PTR [eax], bl
	je	SHORT $L87383
; Line 4534
	cmp	DWORD PTR _deltaload, ebx
; Line 4535
	mov	BYTE PTR [eax], bl
; Line 4536
	jne	SHORT $L87383
; Line 4537
	mov	ecx, DWORD PTR _object[esi+84]
	call	@SetRndSeed@4
; Line 4538
	mov	edx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	push	ebx
	push	DWORD PTR _sendmsg$[esp+16]
	push	ebx
	call	@CreateRndItem@20
; Line 4539
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L87383
; Line 4540
	push	ebp
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L87383:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 4543
	ret	4
@OperateDecap@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateArmorStand@12
; Function compile flags: /Ogsy
;	COMDAT @OperateArmorStand@12
_TEXT	SEGMENT
_pnum$ = -8
_sendmsg$ = 8
_v8$ = -4
@OperateArmorStand@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4547
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
; Line 4560
	mov	esi, edi
; Line 4561
	xor	ebx, ebx
	imul	esi, 120				; 00000078H
	mov	DWORD PTR _pnum$[ebp], ecx
	lea	eax, DWORD PTR _object[esi+64]
	cmp	BYTE PTR [eax], bl
	je	$L87411
; Line 4562
	inc	DWORD PTR _object[esi+36]
; Line 4563
	cmp	DWORD PTR _deltaload, ebx
; Line 4564
	mov	BYTE PTR [eax], bl
; Line 4565
	jne	$L87411
; Line 4566
	mov	ecx, DWORD PTR _object[esi+84]
	call	@SetRndSeed@4
; Line 4567
	xor	cl, cl
	push	2
	pop	edx
	call	@random@8
	mov	BYTE PTR _v8$[ebp], al
; Line 4568
	mov	al, BYTE PTR _currlevel
	cmp	al, 5
	jbe	SHORT $L87404
; Line 4569
	push	9
	cmp	al, 6
	pop	ecx
	jb	SHORT $L87405
	cmp	al, cl
	ja	SHORT $L87405
; Line 4570
	movzx	eax, BYTE PTR _sendmsg$[ebp]
	push	ebx
	push	eax
	push	ebx
	push	8
	push	DWORD PTR _v8$[ebp]
; Line 4571
	jmp	SHORT $L88997
$L87405:
; Line 4573
	cmp	al, 10					; 0000000aH
	jb	SHORT $L87407
	cmp	al, 12					; 0000000cH
	ja	SHORT $L87407
; Line 4574
	movzx	eax, BYTE PTR _sendmsg$[ebp]
	push	ebx
	push	eax
	push	ebx
	push	ecx
	push	ebx
; Line 4575
	jmp	SHORT $L88997
$L87407:
; Line 4577
	cmp	al, 13					; 0000000dH
	jb	SHORT $LABEL_15$87406
	cmp	al, 16					; 00000010H
	ja	SHORT $LABEL_15$87406
; Line 4581
	jmp	SHORT $L88998
$L87404:
; Line 4583
	push	6
	pop	ecx
$L88998:
	movzx	eax, BYTE PTR _sendmsg$[ebp]
; Line 4585
	push	ebx
	push	eax
	push	ebx
	push	ecx
	push	1
$L88997:
	mov	ecx, DWORD PTR _object[esi+4]
	mov	edx, DWORD PTR _object[esi+8]
	call	@CreateTypeItem@28
$LABEL_15$87406:
; Line 4587
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L87411
; Line 4588
	push	edi
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L87411:
	pop	edi
	pop	esi
	pop	ebx
; Line 4592
	leave
	ret	4
@OperateArmorStand@12 ENDP
_TEXT	ENDS
PUBLIC	@FindValidShrine@4
; Function compile flags: /Ogsy
;	COMDAT @FindValidShrine@4
_TEXT	SEGMENT
@FindValidShrine@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 4596
	push	ebx
$L87418:
; Line 4602
	xor	bl, bl
$L87421:
; Line 4604
	push	26					; 0000001aH
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 4605
	mov	cl, BYTE PTR _currlevel
	cmp	cl, BYTE PTR _shrinemin[eax]
	jb	SHORT $L87422
	cmp	cl, BYTE PTR _shrinemax[eax]
	ja	SHORT $L87422
	cmp	eax, 8
	je	SHORT $L87422
; Line 4606
	mov	bl, 1
$L87422:
; Line 4607
	test	bl, bl
	je	SHORT $L87421
; Line 4608
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L87425
; Line 4609
	cmp	BYTE PTR _shrineavail[eax], 2
; Line 4610
	jmp	SHORT $L89003
$L87425:
; Line 4611
	cmp	BYTE PTR _shrineavail[eax], 1
$L89003:
	sete	cl
; Line 4612
	test	cl, cl
	jne	SHORT $L87418
	pop	ebx
; Line 4614
	ret	0
@FindValidShrine@4 ENDP
_TEXT	ENDS
PUBLIC	@OperateGoatShrine@12
; Function compile flags: /Ogsy
;	COMDAT @OperateGoatShrine@12
_TEXT	SEGMENT
_sType$ = 8
@OperateGoatShrine@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4618
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
; Line 4626
	mov	esi, edi
	mov	ebx, ecx
	imul	esi, 120				; 00000078H
	mov	ecx, DWORD PTR _object[esi+84]
	call	@SetRndSeed@4
; Line 4627
	mov	ecx, edi
	call	@FindValidShrine@4
; Line 4628
	mov	edx, edi
	mov	ecx, ebx
	push	DWORD PTR _sType$[esp+8]
	mov	DWORD PTR _object[esi+88], eax
	call	@OperateShrine@12
; Line 4629
	mov	DWORD PTR _object[esi+24], 2
; Line 4630
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	pop	edi
	pop	esi
	pop	ebx
; Line 4631
	ret	4
@OperateGoatShrine@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateCauldron@12
; Function compile flags: /Ogsy
;	COMDAT @OperateCauldron@12
_TEXT	SEGMENT
_sType$ = 8
@OperateCauldron@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4635
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
; Line 4643
	mov	esi, edi
	mov	ebx, ecx
	imul	esi, 120				; 00000078H
	mov	ecx, DWORD PTR _object[esi+84]
	call	@SetRndSeed@4
; Line 4644
	mov	ecx, edi
	call	@FindValidShrine@4
; Line 4645
	mov	edx, edi
	mov	ecx, ebx
	push	DWORD PTR _sType$[esp+8]
	mov	DWORD PTR _object[esi+88], eax
	call	@OperateShrine@12
; Line 4646
	and	DWORD PTR _object[esi+16], 0
; Line 4647
	mov	DWORD PTR _object[esi+36], 3
	pop	edi
	pop	esi
; Line 4648
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	pop	ebx
; Line 4649
	ret	4
@OperateCauldron@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateFountains@8
; Function compile flags: /Ogsy
;	COMDAT @OperateFountains@8
_TEXT	SEGMENT
_i$ = -16
_v8$ = -4
_v24$ = -8
_v25$ = -12
@OperateFountains@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4653
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	DWORD PTR _i$[ebp], edi
; Line 4683
	imul	edi, 120				; 00000078H
	mov	esi, ecx
	mov	ecx, DWORD PTR _object[edi+84]
	xor	bl, bl
	call	@SetRndSeed@4
; Line 4684
	mov	eax, DWORD PTR _object[edi]
	cmp	eax, 66					; 00000042H
	je	$L87479
	cmp	eax, 76					; 0000004cH
	je	$L87486
	cmp	eax, 81					; 00000051H
	je	$L87490
; Line 4758
	cmp	eax, 82					; 00000052H
	jne	$L87476
	cmp	BYTE PTR _object[edi+64], bl
	je	$L87476
; Line 4761
	xor	eax, eax
	or	ebx, -1
; Line 4763
	cmp	DWORD PTR _deltaload, eax
	mov	DWORD PTR _v8$[ebp], ebx
	mov	DWORD PTR _v25$[ebp], eax
	mov	DWORD PTR _v24$[ebp], eax
	jne	SHORT $L87497
; Line 4764
	push	DWORD PTR _object[edi+8]
	mov	edx, DWORD PTR _object[edi+4]
	push	109					; 0000006dH
	pop	ecx
	call	@PlaySfxLoc@12
$L87497:
; Line 4765
	and	BYTE PTR _object[edi+64], 0
; Line 4766
	cmp	DWORD PTR _deltaload, 0
	jne	$L87480
	cmp	esi, DWORD PTR _myplr
	jne	$L87480
$L87500:
; Line 4769
	push	4
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	edi, eax
; Line 4771
	cmp	edi, ebx
	je	SHORT $L89014
; Line 4772
	test	edi, edi
	je	SHORT $L87504
; Line 4773
	lea	eax, DWORD PTR [edi-1]
; Line 4774
	test	eax, eax
	je	SHORT $L87505
; Line 4775
	dec	eax
; Line 4776
	test	eax, eax
	je	SHORT $L87506
; Line 4777
	cmp	eax, 1
	jne	SHORT $L87510
; Line 4778
	mov	edx, DWORD PTR _v8$[ebp]
	mov	ecx, esi
	call	@ModifyPlrVit@8
; Line 4779
	jmp	SHORT $L87510
$L87506:
; Line 4780
	mov	edx, DWORD PTR _v8$[ebp]
	mov	ecx, esi
	call	@ModifyPlrDex@8
; Line 4782
	jmp	SHORT $L87510
$L87505:
; Line 4783
	mov	edx, DWORD PTR _v8$[ebp]
	mov	ecx, esi
	call	@ModifyPlrMag@8
; Line 4785
	jmp	SHORT $L87510
$L87504:
; Line 4786
	mov	edx, DWORD PTR _v8$[ebp]
	mov	ecx, esi
	call	@ModifyPlrStr@8
$L87510:
; Line 4789
	xor	eax, eax
	mov	ebx, edi
	inc	eax
; Line 4790
	inc	DWORD PTR _v24$[ebp]
	mov	DWORD PTR _v8$[ebp], eax
	jmp	SHORT $L87503
$L89014:
	xor	eax, eax
	inc	eax
$L87503:
; Line 4792
	cmp	DWORD PTR _v24$[ebp], eax
	jle	SHORT $L87501
; Line 4793
	mov	DWORD PTR _v25$[ebp], eax
$L87501:
; Line 4794
	cmp	DWORD PTR _v25$[ebp], 0
	je	SHORT $L87500
; Line 4795
	mov	ecx, esi
	call	@CheckStats@4
$L89016:
; Line 4797
	cmp	esi, DWORD PTR _myplr
	mov	bl, 1
	jne	$L87476
; Line 4798
	push	DWORD PTR _i$[ebp]
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
	jmp	$L87476
$L87490:
; Line 4735
	cmp	BYTE PTR _object[edi+64], 0
	je	$L87476
; Line 4736
	xor	ebx, ebx
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L87492
; Line 4737
	push	DWORD PTR _object[edi+8]
	mov	edx, DWORD PTR _object[edi+4]
	push	109					; 0000006dH
	pop	ecx
	call	@PlaySfxLoc@12
$L87492:
; Line 4738
	and	BYTE PTR _object[edi+64], 0
; Line 4739
	cmp	DWORD PTR _deltaload, ebx
; Line 4740
	jne	$L87480
; Line 4751
	movzx	edi, BYTE PTR _leveltype
	mov	eax, esi
	add	edi, edi
	imul	eax, 21720				; 000054d8H
	push	edi
	push	ebx
	mov	edx, DWORD PTR _plr[eax+60]
	mov	ecx, DWORD PTR _plr[eax+56]
	push	esi
	push	-1
	push	39					; 00000027H
	push	DWORD PTR _plr[eax+112]
	push	edx
	push	ecx
	call	@AddMissile@40
; Line 4756
	jmp	$L89016
$L87486:
; Line 4709
	cmp	DWORD PTR _deltaload, 0
	jne	$L87480
	cmp	esi, DWORD PTR _myplr
	jne	$L87480
; Line 4713
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _object[edi+8]
	mov	edx, DWORD PTR _object[edi+4]
	mov	ecx, DWORD PTR _plr[esi+428]
	cmp	ecx, DWORD PTR _plr[esi+432]
	jge	$LABEL_45$87485
; Line 4714
	push	eax
	push	109					; 0000006dH
	pop	ecx
	call	@PlaySfxLoc@12
; Line 4715
	add	DWORD PTR _plr[esi+428], 64		; 00000040H
	mov	edx, DWORD PTR _plr[esi+428]
; Line 4717
	mov	ecx, DWORD PTR _plr[esi+432]
; Line 4718
	lea	eax, DWORD PTR _plr[esi+420]
; Line 4719
	add	DWORD PTR [eax], 64			; 00000040H
; Line 4720
	cmp	edx, ecx
	jle	SHORT $LABEL_39$87483
; Line 4725
	mov	DWORD PTR _plr[esi+428], ecx
; Line 4726
	mov	esi, DWORD PTR _plr[esi+424]
	jmp	SHORT $LABEL_38$87484
$L87479:
; Line 4686
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L87480
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L87480
; Line 4690
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _object[edi+8]
	mov	edx, DWORD PTR _object[edi+4]
	mov	ecx, DWORD PTR _plr[esi+408]
	cmp	ecx, DWORD PTR _plr[esi+412]
	jge	SHORT $LABEL_45$87485
; Line 4691
	push	eax
	push	109					; 0000006dH
	pop	ecx
	call	@PlaySfxLoc@12
; Line 4692
	add	DWORD PTR _plr[esi+408], 64		; 00000040H
	mov	edx, DWORD PTR _plr[esi+408]
; Line 4694
	mov	ecx, DWORD PTR _plr[esi+412]
; Line 4695
	lea	eax, DWORD PTR _plr[esi+400]
; Line 4696
	add	DWORD PTR [eax], 64			; 00000040H
; Line 4697
	cmp	edx, ecx
	jle	SHORT $LABEL_39$87483
; Line 4699
	mov	DWORD PTR _plr[esi+408], ecx
; Line 4700
	mov	esi, DWORD PTR _plr[esi+404]
$LABEL_38$87484:
; Line 4728
	mov	DWORD PTR [eax], esi
$LABEL_39$87483:
; Line 4722
	mov	bl, 1
; Line 4723
	jmp	SHORT $L87476
$LABEL_45$87485:
; Line 4704
	push	eax
	push	109					; 0000006dH
	pop	ecx
	call	@PlaySfxLoc@12
$L87476:
; Line 4802
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
; Line 4803
	mov	al, bl
	jmp	SHORT $L87451
$L87480:
; Line 4707
	xor	al, al
$L87451:
	pop	edi
	pop	esi
	pop	ebx
; Line 4804
	leave
	ret	0
@OperateFountains@8 ENDP
_TEXT	ENDS
PUBLIC	@OperateWeaponRack@12
; Function compile flags: /Ogsy
;	COMDAT @OperateWeaponRack@12
_TEXT	SEGMENT
_pnum$ = -4
_i$ = -8
_sendmsg$ = 8
@OperateWeaponRack@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4809
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	mov	esi, edx
; Line 4825
	xor	ebx, ebx
	mov	DWORD PTR _i$[ebp], esi
	imul	esi, 120				; 00000078H
	cmp	BYTE PTR _object[esi+64], bl
	push	edi
	mov	DWORD PTR _pnum$[ebp], ecx
	je	$L87542
; Line 4827
	mov	ecx, DWORD PTR _object[esi+84]
	call	@SetRndSeed@4
; Line 4828
	xor	cl, cl
	push	4
	pop	edi
	mov	edx, edi
	call	@random@8
; Line 4829
	cmp	eax, ebx
	je	SHORT $L87532
; Line 4830
	dec	eax
; Line 4831
	cmp	eax, ebx
	jne	SHORT $L87533
; Line 4832
	push	2
$L89019:
	pop	edi
; Line 4833
	jmp	SHORT $LABEL_12$87537
$L87533:
; Line 4835
	dec	eax
; Line 4836
	cmp	eax, ebx
	jne	SHORT $L87535
; Line 4837
	push	3
; Line 4838
	jmp	SHORT $L89019
$L87535:
; Line 4840
	cmp	eax, 1
; Line 4844
	je	SHORT $LABEL_12$87537
$LABEL_7$87534:
; Line 4846
	movzx	edi, BYTE PTR _sendmsg$[ebp]
; Line 4847
	jmp	SHORT $LABEL_12$87537
$L87532:
; Line 4848
	xor	edi, edi
	inc	edi
$LABEL_12$87537:
; Line 4851
	inc	DWORD PTR _object[esi+36]
; Line 4852
	cmp	DWORD PTR _deltaload, ebx
; Line 4853
	mov	BYTE PTR _object[esi+64], bl
; Line 4854
	jne	SHORT $L87542
; Line 4858
	movzx	eax, BYTE PTR _sendmsg$[ebp]
	cmp	BYTE PTR _leveltype, 1
	mov	ecx, DWORD PTR _object[esi+4]
	mov	edx, DWORD PTR _object[esi+8]
	push	ebx
	push	eax
	push	ebx
	push	edi
	ja	SHORT $L87540
	push	ebx
; Line 4859
	jmp	SHORT $L89020
$L87540:
; Line 4860
	push	1
$L89020:
	call	@CreateTypeItem@28
; Line 4861
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L87542
; Line 4862
	push	DWORD PTR _i$[ebp]
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L87542:
	pop	edi
	pop	esi
	pop	ebx
; Line 4864
	leave
	ret	4
@OperateWeaponRack@12 ENDP
_TEXT	ENDS
PUBLIC	@OperateStoryBook@8
; Function compile flags: /Ogsy
;	COMDAT @OperateStoryBook@8
_TEXT	SEGMENT
@OperateStoryBook@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4868
	push	esi
	push	edi
	mov	edi, edx
; Line 4876
	xor	eax, eax
	mov	esi, edi
	imul	esi, 120				; 00000078H
	cmp	BYTE PTR _object[esi+64], al
	je	SHORT $L87552
	cmp	DWORD PTR _deltaload, eax
	jne	SHORT $L87552
	cmp	BYTE PTR _qtextflag, al
	jne	SHORT $L87552
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L87552
; Line 4880
	push	DWORD PTR _object[esi+8]
	mov	eax, DWORD PTR _object[esi+100]
	mov	edx, DWORD PTR _object[esi+4]
	mov	DWORD PTR _object[esi+36], eax
	push	57					; 00000039H
	pop	ecx
	call	@PlaySfxLoc@12
; Line 4881
	mov	ecx, DWORD PTR _object[esi+92]
	call	@InitQTextMsg@4
; Line 4882
	mov	dl, 45					; 0000002dH
	xor	ecx, ecx
	push	edi
	call	@NetSendCmdParam1@12
$L87552:
	pop	edi
	pop	esi
; Line 4884
	ret	0
@OperateStoryBook@8 ENDP
_TEXT	ENDS
PUBLIC	@OperateLazStand@8
; Function compile flags: /Ogsy
;	COMDAT @OperateLazStand@8
_TEXT	SEGMENT
_xx$ = -8
_yy$ = -4
@OperateLazStand@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4889
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	mov	eax, edx
	push	ebx
; Line 4896
	imul	eax, 120				; 00000078H
	xor	ebx, ebx
	cmp	BYTE PTR _object[eax+64], bl
	je	SHORT $L87562
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L87562
	cmp	BYTE PTR _qtextflag, bl
	jne	SHORT $L87562
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L87562
; Line 4900
	mov	edx, DWORD PTR _object[eax+8]
	inc	DWORD PTR _object[eax+36]
	lea	ecx, DWORD PTR _yy$[ebp]
	mov	BYTE PTR _object[eax+64], bl
	push	ecx
	lea	ecx, DWORD PTR _xx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _object[eax+4]
	call	@GetSuperItemLoc@16
; Line 4901
	mov	edx, DWORD PTR _xx$[ebp]
	push	ebx
	push	ebx
	push	DWORD PTR _yy$[ebp]
	push	33					; 00000021H
	pop	ecx
	call	@SpawnQuestItem@20
$L87562:
	pop	ebx
; Line 4903
	leave
	ret	0
@OperateLazStand@8 ENDP
_TEXT	ENDS
PUBLIC	@OperateObject@12
; Function compile flags: /Ogsy
;	COMDAT @OperateObject@12
_TEXT	SEGMENT
_TeleFlag$ = 8
_sendmsg$ = -4
@OperateObject@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 4908
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 4917
	mov	eax, DWORD PTR _myplr
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	ebx, edx
	cmp	edi, eax
; Line 4918
	mov	esi, ebx
	sete	cl
	imul	esi, 120				; 00000078H
	add	esi, OFFSET FLAT:_object
	mov	BYTE PTR _sendmsg$[ebp], cl
; Line 4919
	mov	ecx, DWORD PTR [esi]
; Line 4920
	lea	edx, DWORD PTR [ecx-1]
	cmp	edx, 96					; 00000060H
	ja	$L87619
	movzx	edx, BYTE PTR $L89028[edx]
	jmp	DWORD PTR $L89029[edx*4]
$L87579:
; Line 4923
	cmp	DWORD PTR _TeleFlag$[ebp], 0
	je	SHORT $L87580
; Line 4924
	cmp	ecx, 1
	jne	SHORT $L87581
; Line 4925
	push	ecx
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateL1LDoor@12
$L87581:
; Line 4926
	cmp	DWORD PTR [esi], 2
	jne	$L87619
; Line 4927
	push	1
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateL1RDoor@12
; Line 4928
	jmp	$L87619
$L87580:
	cmp	edi, eax
	jne	$L87619
; Line 4929
	push	1
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateL1Door@12
; Line 4931
	jmp	$L87619
$L87585:
; Line 4934
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateLever@8
; Line 4935
	jmp	$L87619
$L87586:
; Line 4942
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateChest@12
; Line 4943
	jmp	$L87619
$L87587:
; Line 4945
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateBook@8
; Line 4946
	jmp	$L87619
$L87588:
; Line 4948
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateSChambBk@8
; Line 4949
	jmp	$L87619
$L87589:
; Line 4952
	cmp	DWORD PTR _TeleFlag$[ebp], 0
	je	SHORT $L87590
; Line 4953
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $L87591
; Line 4954
	push	1
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateL2LDoor@12
$L87591:
; Line 4955
	cmp	DWORD PTR [esi], 43			; 0000002bH
	jne	$L87619
; Line 4956
	push	1
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateL2RDoor@12
; Line 4957
	jmp	$L87619
$L87590:
	cmp	edi, eax
	jne	$L87619
; Line 4958
	push	1
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateL2Door@12
; Line 4960
	jmp	$L87619
$L87595:
; Line 4962
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateSarc@12
; Line 4963
	jmp	$L87619
$L87596:
; Line 4965
	mov	ecx, ebx
	call	@OperateTrapLvr@4
; Line 4966
	jmp	$L87619
$L87597:
; Line 4969
	push	63					; 0000003fH
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateShrine@12
; Line 4970
	jmp	$L87619
$L87598:
; Line 4973
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateSkelBook@12
; Line 4974
	jmp	$L87619
$L87599:
; Line 4977
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateBookCase@12
; Line 4978
	jmp	$L87619
$L87600:
; Line 4983
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateFountains@8
; Line 4984
	jmp	$L87619
$L87601:
; Line 4986
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateDecap@12
; Line 4987
	jmp	$L87619
$L87602:
; Line 4991
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateBookLever@8
; Line 4992
	jmp	$L87619
$L87603:
; Line 4994
	mov	edx, ebx
	mov	ecx, edi
	call	@OperatePedistal@8
; Line 4995
	jmp	$L87619
$L87604:
; Line 4998
	cmp	DWORD PTR _TeleFlag$[ebp], 0
	je	SHORT $L87605
; Line 4999
	cmp	ecx, 74					; 0000004aH
	jne	SHORT $L87606
; Line 5000
	push	1
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateL3LDoor@12
$L87606:
; Line 5001
	cmp	DWORD PTR [esi], 75			; 0000004bH
	jne	$L87619
; Line 5002
	push	1
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateL3RDoor@12
; Line 5003
	jmp	SHORT $L87619
$L87605:
	cmp	edi, eax
	jne	SHORT $L87619
; Line 5004
	push	1
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateL3Door@12
; Line 5006
	jmp	SHORT $L87619
$L87610:
; Line 5009
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateArmorStand@12
; Line 5010
	jmp	SHORT $L87619
$L87611:
; Line 5012
	push	112					; 00000070H
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateGoatShrine@12
; Line 5013
	jmp	SHORT $L87619
$L87612:
; Line 5015
	push	95					; 0000005fH
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateCauldron@12
; Line 5016
	jmp	SHORT $L87619
$L87613:
; Line 5018
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateStoryBook@8
; Line 5019
	jmp	SHORT $L87619
$L87614:
; Line 5022
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateWeaponRack@12
; Line 5023
	jmp	SHORT $L87619
$L87615:
; Line 5025
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateMushPatch@8
; Line 5026
	jmp	SHORT $L87619
$L87616:
; Line 5028
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateLazStand@8
; Line 5029
	jmp	SHORT $L87619
$L87617:
; Line 5031
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateSlainHero@12
; Line 5032
	jmp	SHORT $L87619
$L87618:
; Line 5034
	mov	edx, ebx
	mov	ecx, edi
	call	@OperateInnSignChest@8
$L87619:
	pop	edi
	pop	esi
	pop	ebx
; Line 5039
	leave
	ret	4
$L89029:
	DD	$L87579
	DD	$L87585
	DD	$L87586
	DD	$L87587
	DD	$L87588
	DD	$L87589
	DD	$L87595
	DD	$L87596
	DD	$L87597
	DD	$L87598
	DD	$L87599
	DD	$L87600
	DD	$L87601
	DD	$L87602
	DD	$L87603
	DD	$L87604
	DD	$L87610
	DD	$L87611
	DD	$L87612
	DD	$L87613
	DD	$L87614
	DD	$L87615
	DD	$L87616
	DD	$L87617
	DD	$L87618
	DD	$L87619
$L89028:
	DB	0
	DB	0
	DB	25					; 00000019H
	DB	1
	DB	2
	DB	2
	DB	2
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	3
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	1
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	4
	DB	5
	DB	5
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	6
	DB	25					; 00000019H
	DB	7
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	8
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	9
	DB	25					; 00000019H
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	2
	DB	2
	DB	2
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	11					; 0000000bH
	DB	16					; 00000010H
	DB	25					; 00000019H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	19					; 00000013H
	DB	25					; 00000019H
	DB	13					; 0000000dH
	DB	16					; 00000010H
	DB	20					; 00000014H
	DB	25					; 00000019H
	DB	20					; 00000014H
	DB	25					; 00000019H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
@OperateObject@12 ENDP
_TEXT	ENDS
PUBLIC	@SyncOpL1Door@12
; Function compile flags: /Ogsy
;	COMDAT @SyncOpL1Door@12
_TEXT	SEGMENT
_i$ = 8
@SyncOpL1Door@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _cmd$ = edx
; Line 5046
	cmp	ecx, DWORD PTR _myplr
	push	edi
	je	SHORT $L87635
; Line 5048
	mov	edi, DWORD PTR _i$[esp]
	xor	ecx, ecx
	xor	eax, eax
	inc	ecx
	cmp	edx, 43					; 0000002bH
	jne	SHORT $L87630
; Line 5049
	mov	eax, edi
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax+100], 0
	jne	SHORT $L87635
; Line 5051
	mov	eax, ecx
$L87630:
; Line 5053
	cmp	edx, 44					; 0000002cH
	jne	SHORT $L87632
	mov	edx, edi
	imul	edx, 120				; 00000078H
	cmp	DWORD PTR _object[edx+100], ecx
	jne	SHORT $L87632
; Line 5054
	mov	eax, ecx
$L87632:
; Line 5055
	test	eax, eax
	je	SHORT $L87635
	push	esi
; Line 5056
	mov	esi, edi
	imul	esi, 120				; 00000078H
	add	esi, OFFSET FLAT:_object
; Line 5057
	cmp	DWORD PTR [esi], ecx
	jne	SHORT $L87634
; Line 5058
	push	0
	mov	edx, edi
	or	ecx, -1
	call	@OperateL1LDoor@12
$L87634:
; Line 5059
	cmp	DWORD PTR [esi], 2
	pop	esi
	jne	SHORT $L87635
; Line 5060
	push	0
	mov	edx, edi
	or	ecx, -1
	call	@OperateL1RDoor@12
$L87635:
	pop	edi
; Line 5063
	ret	4
@SyncOpL1Door@12 ENDP
_TEXT	ENDS
PUBLIC	@SyncOpL2Door@12
; Function compile flags: /Ogsy
;	COMDAT @SyncOpL2Door@12
_TEXT	SEGMENT
_i$ = 8
@SyncOpL2Door@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _cmd$ = edx
; Line 5070
	cmp	ecx, DWORD PTR _myplr
	push	edi
	je	SHORT $L87651
; Line 5072
	mov	edi, DWORD PTR _i$[esp]
	xor	eax, eax
	cmp	edx, 43					; 0000002bH
	jne	SHORT $L87646
; Line 5073
	mov	eax, edi
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax+100], 0
	jne	SHORT $L87651
; Line 5075
	xor	eax, eax
	inc	eax
$L87646:
; Line 5077
	cmp	edx, 44					; 0000002cH
	jne	SHORT $L87648
	mov	ecx, edi
	imul	ecx, 120				; 00000078H
	cmp	DWORD PTR _object[ecx+100], 1
	jne	SHORT $L87648
; Line 5078
	xor	eax, eax
	inc	eax
$L87648:
; Line 5079
	test	eax, eax
	je	SHORT $L87651
	push	esi
; Line 5080
	mov	esi, edi
	imul	esi, 120				; 00000078H
	add	esi, OFFSET FLAT:_object
; Line 5081
	cmp	DWORD PTR [esi], 42			; 0000002aH
	jne	SHORT $L87650
; Line 5082
	push	0
	mov	edx, edi
	or	ecx, -1
	call	@OperateL2LDoor@12
$L87650:
; Line 5083
	cmp	DWORD PTR [esi], 43			; 0000002bH
	pop	esi
	jne	SHORT $L87651
; Line 5084
	push	0
	mov	edx, edi
	or	ecx, -1
	call	@OperateL2RDoor@12
$L87651:
	pop	edi
; Line 5087
	ret	4
@SyncOpL2Door@12 ENDP
_TEXT	ENDS
PUBLIC	@SyncOpL3Door@12
; Function compile flags: /Ogsy
;	COMDAT @SyncOpL3Door@12
_TEXT	SEGMENT
_i$ = 8
@SyncOpL3Door@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _cmd$ = edx
; Line 5094
	cmp	ecx, DWORD PTR _myplr
	push	edi
	je	SHORT $L87667
; Line 5096
	mov	edi, DWORD PTR _i$[esp]
	xor	eax, eax
	cmp	edx, 43					; 0000002bH
	jne	SHORT $L87662
; Line 5097
	mov	eax, edi
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax+100], 0
	jne	SHORT $L87667
; Line 5099
	xor	eax, eax
	inc	eax
$L87662:
; Line 5101
	cmp	edx, 44					; 0000002cH
	jne	SHORT $L87664
	mov	ecx, edi
	imul	ecx, 120				; 00000078H
	cmp	DWORD PTR _object[ecx+100], 1
	jne	SHORT $L87664
; Line 5102
	xor	eax, eax
	inc	eax
$L87664:
; Line 5103
	test	eax, eax
	je	SHORT $L87667
	push	esi
; Line 5104
	mov	esi, edi
	imul	esi, 120				; 00000078H
	add	esi, OFFSET FLAT:_object
; Line 5105
	cmp	DWORD PTR [esi], 74			; 0000004aH
	jne	SHORT $L87666
; Line 5106
	push	0
	mov	edx, edi
	or	ecx, -1
	call	@OperateL3LDoor@12
$L87666:
; Line 5107
	cmp	DWORD PTR [esi], 75			; 0000004bH
	pop	esi
	jne	SHORT $L87667
; Line 5108
	push	0
	mov	edx, edi
	or	ecx, -1
	call	@OperateL3RDoor@12
$L87667:
	pop	edi
; Line 5111
	ret	4
@SyncOpL3Door@12 ENDP
_TEXT	ENDS
PUBLIC	@SyncOpObject@12
; Function compile flags: /Ogsy
;	COMDAT @SyncOpObject@12
_TEXT	SEGMENT
_i$ = 8
@SyncOpObject@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _cmd$ = edx
; Line 5114
	push	esi
	mov	esi, edx
; Line 5115
	mov	edx, DWORD PTR _i$[esp]
	mov	eax, edx
	imul	eax, 120				; 00000078H
	mov	eax, DWORD PTR _object[eax]
	dec	eax
	cmp	eax, 96					; 00000060H
	ja	$L87700
	movzx	eax, BYTE PTR $L89041[eax]
	jmp	DWORD PTR $L89042[eax*4]
$L87679:
; Line 5118
	push	edx
	mov	edx, esi
	call	@SyncOpL1Door@12
; Line 5119
	jmp	$L87700
$L87680:
; Line 5122
	call	@OperateLever@8
; Line 5123
	jmp	$L87700
$L87681:
; Line 5130
	push	0
	call	@OperateChest@12
; Line 5131
	jmp	$L87700
$L87682:
; Line 5134
	push	edx
	mov	edx, esi
	call	@SyncOpL2Door@12
; Line 5135
	jmp	$L87700
$L87683:
; Line 5137
	push	0
	call	@OperateSarc@12
; Line 5138
	jmp	$L87700
$L87684:
; Line 5141
	push	63					; 0000003fH
	call	@OperateShrine@12
; Line 5142
	jmp	SHORT $L87700
$L87685:
; Line 5145
	push	0
	call	@OperateSkelBook@12
; Line 5146
	jmp	SHORT $L87700
$L87686:
; Line 5149
	push	0
	call	@OperateBookCase@12
; Line 5150
	jmp	SHORT $L87700
$L87687:
; Line 5152
	push	0
	call	@OperateDecap@12
; Line 5153
	jmp	SHORT $L87700
$L87688:
; Line 5157
	call	@OperateBookLever@8
; Line 5158
	jmp	SHORT $L87700
$L87689:
; Line 5160
	call	@OperatePedistal@8
; Line 5161
	jmp	SHORT $L87700
$L87690:
; Line 5164
	push	edx
	mov	edx, esi
	call	@SyncOpL3Door@12
; Line 5165
	jmp	SHORT $L87700
$L87691:
; Line 5168
	push	0
	call	@OperateArmorStand@12
; Line 5169
	jmp	SHORT $L87700
$L87692:
; Line 5171
	push	112					; 00000070H
	call	@OperateGoatShrine@12
; Line 5172
	jmp	SHORT $L87700
$L87693:
; Line 5174
	push	95					; 0000005fH
	call	@OperateCauldron@12
; Line 5175
	jmp	SHORT $L87700
$L87694:
; Line 5178
	call	@OperateFountains@8
; Line 5179
	jmp	SHORT $L87700
$L87695:
; Line 5181
	call	@OperateStoryBook@8
; Line 5182
	jmp	SHORT $L87700
$L87696:
; Line 5185
	push	0
	call	@OperateWeaponRack@12
; Line 5186
	jmp	SHORT $L87700
$L87697:
; Line 5188
	call	@OperateMushPatch@8
; Line 5189
	jmp	SHORT $L87700
$L87698:
; Line 5191
	push	0
	call	@OperateSlainHero@12
; Line 5192
	jmp	SHORT $L87700
$L87699:
; Line 5194
	call	@OperateInnSignChest@8
$L87700:
	pop	esi
; Line 5199
	ret	4
$L89042:
	DD	$L87679
	DD	$L87680
	DD	$L87681
	DD	$L87682
	DD	$L87683
	DD	$L87684
	DD	$L87685
	DD	$L87686
	DD	$L87687
	DD	$L87688
	DD	$L87689
	DD	$L87690
	DD	$L87691
	DD	$L87692
	DD	$L87693
	DD	$L87694
	DD	$L87695
	DD	$L87696
	DD	$L87697
	DD	$L87698
	DD	$L87699
	DD	$L87700
$L89041:
	DB	0
	DB	0
	DB	21					; 00000015H
	DB	1
	DB	2
	DB	2
	DB	2
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	1
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	3
	DB	3
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	4
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	5
	DB	5
	DB	6
	DB	7
	DB	7
	DB	6
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	8
	DB	2
	DB	2
	DB	2
	DB	9
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	21					; 00000015H
	DB	12					; 0000000cH
	DB	21					; 00000015H
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	21					; 00000015H
	DB	16					; 00000010H
	DB	21					; 00000015H
	DB	9
	DB	12					; 0000000cH
	DB	17					; 00000011H
	DB	21					; 00000015H
	DB	17					; 00000011H
	DB	21					; 00000015H
	DB	18					; 00000012H
	DB	21					; 00000015H
	DB	19					; 00000013H
	DB	20					; 00000014H
@SyncOpObject@12 ENDP
_TEXT	ENDS
PUBLIC	@BreakCrux@4
; Function compile flags: /Ogsy
;	COMDAT @BreakCrux@4
_TEXT	SEGMENT
@BreakCrux@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 5202
	push	ebx
	push	esi
; Line 5212
	mov	esi, ecx
	mov	edx, DWORD PTR _nobjects
	imul	esi, 120				; 00000078H
; Line 5215
	xor	eax, eax
	xor	ecx, ecx
	or	BYTE PTR _object[esi+52], -1
	and	BYTE PTR _object[esi+64], 0
	inc	eax
; Line 5221
	test	edx, edx
	mov	ebx, eax
	mov	DWORD PTR _object[esi+16], eax
	mov	DWORD PTR _object[esi+36], eax
	mov	DWORD PTR _object[esi+24], eax
	mov	DWORD PTR _object[esi+56], eax
	mov	DWORD PTR _object[esi+60], eax
	jle	SHORT $LABEL_15$87711
	push	edi
$L87712:
; Line 5224
	mov	eax, DWORD PTR _objectactive[ecx*4]
; Line 5225
	imul	eax, 120				; 00000078H
	mov	edi, DWORD PTR _object[eax]
; Line 5228
	cmp	edi, 20					; 00000014H
	je	SHORT $L87716
	cmp	edi, 21					; 00000015H
	je	SHORT $L87716
	cmp	edi, 22					; 00000016H
	jne	SHORT $L87715
$L87716:
	mov	edi, DWORD PTR _object[esi+116]
	cmp	edi, DWORD PTR _object[eax+116]
	jne	SHORT $L87715
	cmp	BYTE PTR _object[eax+52], -1
	je	SHORT $L87715
; Line 5229
	xor	ebx, ebx
$L87715:
; Line 5231
	inc	ecx
; Line 5232
	cmp	ecx, edx
	jl	SHORT $L87712
; Line 5233
	test	ebx, ebx
	pop	edi
	je	SHORT $L87717
$LABEL_15$87711:
; Line 5235
	cmp	DWORD PTR _deltaload, 0
	jne	SHORT $L87718
; Line 5236
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	62					; 0000003eH
	pop	ecx
	call	@PlaySfxLoc@12
$L87718:
; Line 5237
	push	DWORD PTR _object[esi+100]
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	DWORD PTR _object[esi+96]
	call	@ObjChangeMap@16
$L87717:
	pop	esi
	pop	ebx
; Line 5239
	ret	0
@BreakCrux@4 ENDP
_TEXT	ENDS
PUBLIC	@BreakBarrel@20
EXTRN	@MonsterTrapHit@24:NEAR
EXTRN	@PlayerMHit@32:NEAR
; Function compile flags: /Ogsy
;	COMDAT @BreakBarrel@20
_TEXT	SEGMENT
_pnum$ = -12
_i$ = -16
_dam$ = 8
_forcebreak$ = 12
_sendmsg$ = 16
_v18$ = -8
_v19$ = -4
_v20$ = 12
@BreakBarrel@20 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 5243
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	mov	esi, edx
	push	edi
	mov	DWORD PTR _i$[ebp], esi
; Line 5265
	imul	esi, 120				; 00000078H
	cmp	BYTE PTR _object[esi+64], 0
	mov	DWORD PTR _pnum$[ebp], ecx
	je	$L87776
; Line 5266
	xor	edi, edi
	inc	edi
	cmp	BYTE PTR _forcebreak$[ebp], 0
	je	SHORT $L87748
; Line 5267
	xor	ebx, ebx
	mov	DWORD PTR _object[esi+88], ebx
; Line 5268
	jmp	SHORT $L87750
$L87748:
; Line 5269
	mov	eax, DWORD PTR _dam$[ebp]
	sub	DWORD PTR _object[esi+88], eax
; Line 5270
	cmp	ecx, DWORD PTR _myplr
	mov	eax, DWORD PTR _object[esi+88]
	je	SHORT $L89052
	test	eax, eax
	jg	SHORT $L89052
; Line 5271
	mov	DWORD PTR _object[esi+88], edi
$L89052:
	xor	ebx, ebx
$L87750:
; Line 5273
	cmp	DWORD PTR _object[esi+88], ebx
	jg	$L87751
; Line 5274
	or	BYTE PTR _object[esi+52], -1
; Line 5282
	and	BYTE PTR _object[esi+64], 0
	cmp	DWORD PTR _deltaload, ebx
	mov	DWORD PTR _object[esi+88], ebx
	mov	DWORD PTR _object[esi+16], edi
	mov	DWORD PTR _object[esi+36], edi
	mov	DWORD PTR _object[esi+24], edi
	mov	DWORD PTR _object[esi+56], ebx
	mov	DWORD PTR _object[esi+60], edi
; Line 5283
	mov	DWORD PTR _object[esi+68], edi
; Line 5284
	jne	$L87752
; Line 5286
	mov	eax, DWORD PTR _object[esi+8]
; Line 5287
	cmp	DWORD PTR _object[esi], 58		; 0000003aH
	mov	edx, DWORD PTR _object[esi+4]
; Line 5288
	push	eax
	jne	$L87753
	push	14					; 0000000eH
	pop	ecx
	call	@PlaySfxLoc@12
; Line 5289
	mov	eax, DWORD PTR _object[esi+8]
; Line 5290
	lea	ecx, DWORD PTR [eax-1]
; Line 5291
	inc	eax
	cmp	ecx, eax
	mov	DWORD PTR _v20$[ebp], ecx
	jg	$L87772
$L87755:
; Line 5293
	mov	eax, DWORD PTR _object[esi+4]
; Line 5294
	lea	ecx, DWORD PTR [eax-1]
; Line 5295
	lea	edx, DWORD PTR [eax+1]
	cmp	ecx, edx
	mov	DWORD PTR _v18$[ebp], ecx
	jg	$L87763
; Line 5296
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _v20$[ebp]
	lea	ebx, DWORD PTR [eax+ecx-112]
; Line 5297
	lea	eax, DWORD PTR _dMonster[ebx*4]
	mov	DWORD PTR _v19$[ebp], eax
$L87761:
; Line 5300
	mov	eax, DWORD PTR _v19$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, eax
	jle	SHORT $L87764
; Line 5301
	push	eax
	push	edi
	push	eax
	push	4
	dec	ecx
	mov	edx, edi
	call	@MonsterTrapHit@24
	xor	eax, eax
$L87764:
; Line 5302
	mov	cl, BYTE PTR _dPlayer[ebx]
; Line 5303
	test	cl, cl
	jle	SHORT $L87765
; Line 5304
	push	eax
	push	eax
	movsx	ecx, cl
	push	edi
	push	16					; 00000010H
	push	8
	push	eax
	dec	ecx
	or	edx, -1
	call	@PlayerMHit@32
$L87765:
; Line 5305
	mov	al, BYTE PTR _dObject[ebx]
; Line 5306
	test	al, al
	jle	SHORT $L87767
; Line 5307
	movsx	edx, al
	dec	edx
; Line 5308
	mov	eax, edx
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax], 58		; 0000003aH
	jne	SHORT $L87767
	cmp	BYTE PTR _object[eax+52], -1
	je	SHORT $L87767
; Line 5309
	push	DWORD PTR _sendmsg$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	edi
	push	DWORD PTR _dam$[ebp]
	call	@BreakBarrel@20
$L87767:
; Line 5314
	mov	eax, DWORD PTR _object[esi+4]
	inc	DWORD PTR _v18$[ebp]
	add	DWORD PTR _v19$[ebp], 448		; 000001c0H
	add	ebx, 112				; 00000070H
	inc	eax
	cmp	DWORD PTR _v18$[ebp], eax
	jle	$L87761
$L87763:
; Line 5317
	mov	eax, DWORD PTR _object[esi+8]
	inc	DWORD PTR _v20$[ebp]
	inc	eax
	cmp	DWORD PTR _v20$[ebp], eax
	jle	$L87755
; Line 5319
	jmp	SHORT $L87772
$L87753:
; Line 5320
	push	15					; 0000000fH
	pop	ecx
	call	@PlaySfxLoc@12
; Line 5321
	mov	ecx, DWORD PTR _object[esi+84]
	call	@SetRndSeed@4
; Line 5322
	cmp	DWORD PTR _object[esi+92], edi
	jg	SHORT $L87771
; Line 5323
	cmp	DWORD PTR _object[esi+96], ebx
	je	SHORT $L87770
; Line 5324
	mov	edx, DWORD PTR _object[esi+8]
	mov	ecx, DWORD PTR _object[esi+4]
	push	ebx
	push	DWORD PTR _sendmsg$[ebp]
	push	ebx
	call	@CreateRndItem@20
; Line 5325
	jmp	SHORT $L87771
$L87770:
; Line 5326
	push	DWORD PTR _sendmsg$[ebp]
	mov	edx, DWORD PTR _object[esi+4]
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	DWORD PTR _object[esi+8]
	call	@CreateRndUseful@16
$L87771:
; Line 5328
	cmp	DWORD PTR _object[esi+92], 8
	jl	SHORT $L87772
; Line 5329
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	mov	ecx, DWORD PTR _object[esi+100]
	call	@SpawnSkeleton@12
$L87772:
; Line 5331
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L87776
; Line 5332
	push	DWORD PTR _i$[ebp]
	mov	dl, 47					; 0000002fH
	xor	ecx, ecx
	push	eax
	call	@NetSendCmdParam2@16
; Line 5333
	jmp	SHORT $L87776
$L87752:
; Line 5336
	mov	eax, DWORD PTR _object[esi+32]
	mov	DWORD PTR _object[esi+28], ebx
	mov	DWORD PTR _object[esi+36], eax
; Line 5337
	mov	DWORD PTR _object[esi+24], 1000		; 000003e8H
; Line 5339
	jmp	SHORT $L87776
$L87751:
	cmp	DWORD PTR _deltaload, ebx
	jne	SHORT $L87776
; Line 5340
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _object[esi+4]
	push	48					; 00000030H
	pop	ecx
	call	@PlaySfxLoc@12
$L87776:
	pop	edi
	pop	esi
	pop	ebx
; Line 5343
	leave
	ret	12					; 0000000cH
@BreakBarrel@20 ENDP
_TEXT	ENDS
PUBLIC	@BreakObject@8
; Function compile flags: /Ogsy
;	COMDAT @BreakObject@8
_TEXT	SEGMENT
@BreakObject@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _oi$ = edx
; Line 5347
	push	ebx
	mov	ebx, ecx
	push	ebp
; Line 5358
	cmp	ebx, -1
	mov	ebp, edx
	jne	SHORT $L87789
; Line 5359
	push	10					; 0000000aH
	pop	eax
; Line 5360
	jmp	SHORT $L87790
$L87789:
	push	esi
; Line 5362
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	push	edi
; Line 5363
	mov	cl, 163					; 000000a3H
	mov	edi, DWORD PTR _plr[esi+21544]
	mov	edx, DWORD PTR _plr[esi+21548]
	sub	edx, edi
	inc	edx
	call	@random@8
	mov	ecx, eax
; Line 5364
	mov	eax, DWORD PTR _plr[esi+21556]
	add	ecx, edi
	push	100					; 00000064H
	imul	eax, ecx
	cdq
	pop	edi
	idiv	edi
	pop	edi
	add	eax, DWORD PTR _plr[esi+392]
	add	eax, DWORD PTR _plr[esi+21568]
	pop	esi
	add	eax, ecx
$L87790:
; Line 5366
	mov	ecx, ebp
	imul	ecx, 120				; 00000078H
	mov	ecx, DWORD PTR _object[ecx]
; Line 5367
	cmp	ecx, 20					; 00000014H
	jl	SHORT $L87794
; Line 5368
	cmp	ecx, 22					; 00000016H
	jg	SHORT $L87792
; Line 5369
	mov	ecx, ebp
	pop	ebp
	pop	ebx
	jmp	@BreakCrux@4
$L87792:
; Line 5370
	cmp	ecx, 56					; 00000038H
	jle	SHORT $L87794
	cmp	ecx, 58					; 0000003aH
	jg	SHORT $L87794
; Line 5371
	push	1
	push	0
	push	eax
	mov	edx, ebp
	mov	ecx, ebx
	call	@BreakBarrel@20
$L87794:
	pop	ebp
	pop	ebx
; Line 5374
	ret	0
@BreakObject@8 ENDP
_TEXT	ENDS
PUBLIC	@SyncBreakObj@8
; Function compile flags: /Ogsy
;	COMDAT @SyncBreakObj@8
_TEXT	SEGMENT
@SyncBreakObj@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _oi$ = edx
; Line 5380
	mov	eax, edx
	imul	eax, 120				; 00000078H
	mov	eax, DWORD PTR _object[eax]
; Line 5381
	cmp	eax, 57					; 00000039H
	jl	SHORT $L87801
	cmp	eax, 58					; 0000003aH
	jg	SHORT $L87801
; Line 5382
	push	0
	push	1
	push	0
	call	@BreakBarrel@20
$L87801:
; Line 5383
	ret	0
@SyncBreakObj@8 ENDP
_TEXT	ENDS
PUBLIC	@SyncL1Doors@4
; Function compile flags: /Ogsy
;	COMDAT @SyncL1Doors@4
_TEXT	SEGMENT
@SyncL1Doors@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5386
	push	ebx
	mov	ebx, ecx
; Line 5395
	mov	eax, ebx
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax+100], 0
	je	$L87810
; Line 5399
	xor	ecx, ecx
	push	esi
	mov	esi, DWORD PTR _object[eax+8]
	push	edi
	mov	edi, DWORD PTR _object[eax+4]
	inc	ecx
	cmp	DWORD PTR _object[eax], ecx
	mov	DWORD PTR _object[eax+60], ecx
; Line 5400
	mov	BYTE PTR _object[eax+64], 2
; Line 5403
	mov	edx, esi
	mov	ecx, edi
	jne	SHORT $L87811
; Line 5402
	cmp	DWORD PTR _object[eax+88], 214		; 000000d6H
	jne	SHORT $L87812
; Line 5403
	push	408					; 00000198H
; Line 5404
	jmp	SHORT $L89065
$L87812:
; Line 5405
	push	393					; 00000189H
$L89065:
	call	@ObjSetMicro@12
; Line 5406
	mov	eax, edi
; Line 5407
	mov	edx, esi
	imul	eax, 112				; 00000070H
	lea	ecx, DWORD PTR [edi-1]
	mov	BYTE PTR _dArch[eax+esi], 7
	dec	esi
; Line 5408
	jmp	SHORT $L89066
$L87811:
; Line 5409
	push	395					; 0000018bH
	call	@ObjSetMicro@12
; Line 5410
	mov	eax, edi
; Line 5411
	mov	ecx, edi
	imul	eax, 112				; 00000070H
	dec	edi
	lea	edx, DWORD PTR [esi-1]
	mov	BYTE PTR _dArch[eax+esi], 8
$L89066:
	call	@objects_set_door_piece@8
; Line 5413
	mov	edx, edi
	mov	ecx, ebx
	push	esi
	call	@DoorSet@12
	pop	edi
	pop	esi
	pop	ebx
; Line 5417
	ret	0
$L87810:
; Line 5415
	and	DWORD PTR _object[eax+60], 0
	pop	ebx
; Line 5417
	ret	0
@SyncL1Doors@4 ENDP
_TEXT	ENDS
PUBLIC	@SyncCrux@4
; Function compile flags: /Ogsy
;	COMDAT @SyncCrux@4
_TEXT	SEGMENT
@SyncCrux@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 5420
	push	ebx
	push	edi
; Line 5428
	mov	edi, DWORD PTR _nobjects
	xor	ebx, ebx
	inc	ebx
	xor	edx, edx
	test	edi, edi
	jle	SHORT $LABEL_13$87824
	push	esi
$L87825:
; Line 5431
	mov	eax, DWORD PTR _objectactive[edx*4]
; Line 5432
	imul	eax, 120				; 00000078H
	mov	esi, DWORD PTR _object[eax]
; Line 5435
	cmp	esi, 20					; 00000014H
	je	SHORT $L87829
	cmp	esi, 21					; 00000015H
	je	SHORT $L87829
	cmp	esi, 22					; 00000016H
	jne	SHORT $L87828
$L87829:
	mov	esi, ecx
	imul	esi, 120				; 00000078H
	mov	esi, DWORD PTR _object[esi+116]
	cmp	esi, DWORD PTR _object[eax+116]
	jne	SHORT $L87828
	cmp	BYTE PTR _object[eax+52], -1
	je	SHORT $L87828
; Line 5436
	xor	ebx, ebx
$L87828:
; Line 5438
	inc	edx
; Line 5439
	cmp	edx, edi
	jl	SHORT $L87825
; Line 5440
	test	ebx, ebx
	pop	esi
	je	SHORT $L87830
$LABEL_13$87824:
; Line 5442
	mov	eax, ecx
	imul	eax, 120				; 00000078H
	push	DWORD PTR _object[eax+100]
	mov	edx, DWORD PTR _object[eax+92]
	mov	ecx, DWORD PTR _object[eax+88]
	push	DWORD PTR _object[eax+96]
	call	@ObjChangeMap@16
$L87830:
	pop	edi
	pop	ebx
; Line 5443
	ret	0
@SyncCrux@4 ENDP
_TEXT	ENDS
PUBLIC	@SyncLever@4
; Function compile flags: /Ogsy
;	COMDAT @SyncLever@4
_TEXT	SEGMENT
@SyncLever@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 5450
	imul	ecx, 120				; 00000078H
	cmp	BYTE PTR _object[ecx+64], 0
	jne	SHORT $L87835
; Line 5451
	push	DWORD PTR _object[ecx+100]
	mov	edx, DWORD PTR _object[ecx+92]
	push	DWORD PTR _object[ecx+96]
	mov	ecx, DWORD PTR _object[ecx+88]
	call	@ObjChangeMap@16
$L87835:
; Line 5452
	ret	0
@SyncLever@4 ENDP
_TEXT	ENDS
PUBLIC	@SyncQSTLever@4
; Function compile flags: /Ogsy
;	COMDAT @SyncQSTLever@4
_TEXT	SEGMENT
@SyncQSTLever@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5455
	push	esi
	mov	esi, ecx
; Line 5464
	imul	esi, 120				; 00000078H
	mov	eax, DWORD PTR _object[esi+36]
	cmp	eax, DWORD PTR _object[esi+108]
	jne	SHORT $L87846
; Line 5465
	push	DWORD PTR _object[esi+100]
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	DWORD PTR _object[esi+96]
	call	@ObjChangeMapResync@16
; Line 5466
	cmp	DWORD PTR _object[esi], 71		; 00000047H
	jne	SHORT $L87846
; Line 5473
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	ebx
	mov	bl, BYTE PTR _TransVal
	push	DWORD PTR _object[esi+100]
	mov	BYTE PTR _TransVal, 9
	push	DWORD PTR _object[esi+96]
	call	@DRLG_MRectTrans@16
; Line 5474
	mov	BYTE PTR _TransVal, bl
	pop	ebx
$L87846:
	pop	esi
; Line 5477
	ret	0
@SyncQSTLever@4 ENDP
_TEXT	ENDS
PUBLIC	@SyncPedistal@4
; Function compile flags: /Ogsy
;	COMDAT @SyncPedistal@4
_TEXT	SEGMENT
@SyncPedistal@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5481
	push	esi
	mov	esi, ecx
; Line 5486
	imul	esi, 120				; 00000078H
	cmp	DWORD PTR _object[esi+108], 1
	jne	SHORT $L87852
; Line 5487
	mov	eax, DWORD PTR _setpc_y
	lea	ecx, DWORD PTR [eax+7]
	push	ecx
	mov	ecx, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [ecx+2]
	push	edx
	lea	edx, DWORD PTR [eax+3]
	call	@ObjChangeMapResync@16
$L87852:
; Line 5488
	cmp	DWORD PTR _object[esi+108], 2
	jne	SHORT $L87853
; Line 5489
	mov	eax, DWORD PTR _setpc_y
	lea	ecx, DWORD PTR [eax+7]
	push	ecx
	mov	ecx, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [ecx+2]
	push	edx
	lea	edx, DWORD PTR [eax+3]
	call	@ObjChangeMapResync@16
; Line 5490
	mov	eax, DWORD PTR _setpc_y
	mov	edx, DWORD PTR _setpc_w
	lea	ecx, DWORD PTR [eax+7]
	push	ecx
	mov	ecx, DWORD PTR _setpc_x
	add	edx, ecx
	add	ecx, 6
	push	edx
	lea	edx, DWORD PTR [eax+3]
	call	@ObjChangeMapResync@16
$L87853:
; Line 5492
	cmp	DWORD PTR _object[esi+108], 3
	jne	SHORT $L87854
; Line 5493
	push	DWORD PTR _object[esi+100]
	mov	edx, DWORD PTR _object[esi+92]
	mov	ecx, DWORD PTR _object[esi+88]
	push	DWORD PTR _object[esi+96]
	call	@ObjChangeMapResync@16
; Line 5494
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 5495
	mov	eax, DWORD PTR _setpc_y
	add	eax, eax
	mov	ecx, esi
	push	eax
	mov	eax, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [eax+eax]
	call	@LoadMapObjs@12
; Line 5496
	mov	ecx, esi
	pop	esi
	jmp	@mem_free_dbg@4
$L87854:
	pop	esi
; Line 5498
	ret	0
@SyncPedistal@4 ENDP
_TEXT	ENDS
PUBLIC	@SyncL2Doors@4
; Function compile flags: /Ogsy
;	COMDAT @SyncL2Doors@4
_TEXT	SEGMENT
@SyncL2Doors@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5502
	mov	eax, ecx
	push	esi
; Line 5510
	imul	eax, 120				; 00000078H
	mov	esi, DWORD PTR _object[eax+100]
; Line 5511
	test	esi, esi
	je	SHORT $L87863
; Line 5512
	mov	DWORD PTR _object[eax+60], 1
; Line 5513
	jmp	SHORT $L87864
$L87863:
; Line 5514
	and	DWORD PTR _object[eax+60], 0
$L87864:
; Line 5515
	mov	ecx, DWORD PTR _object[eax+4]
; Line 5516
	mov	edx, DWORD PTR _object[eax+8]
; Line 5517
	mov	BYTE PTR _object[eax+64], 2
; Line 5518
	mov	eax, DWORD PTR _object[eax]
; Line 5519
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LABEL_18$87866
; Line 5521
	test	esi, esi
	jne	SHORT $L87867
; Line 5522
	push	538					; 0000021aH
; Line 5523
	jmp	SHORT $L89084
$L87867:
; Line 5525
	cmp	esi, 1
	je	SHORT $L87868
	cmp	esi, 2
	je	SHORT $L87868
$LABEL_18$87866:
; Line 5527
	cmp	eax, 43					; 0000002bH
	jne	SHORT $L87874
; Line 5528
	test	esi, esi
	je	SHORT $L87870
; Line 5529
	cmp	esi, 1
	je	SHORT $L87872
	cmp	esi, 2
	jne	SHORT $L87874
$L87872:
; Line 5530
	push	17					; 00000011H
; Line 5531
	jmp	SHORT $L89084
$L87870:
; Line 5532
	push	540					; 0000021cH
; Line 5535
	jmp	SHORT $L89084
$L87868:
; Line 5536
	push	13					; 0000000dH
$L89084:
	call	@ObjSetMicro@12
$L87874:
	pop	esi
; Line 5538
	ret	0
@SyncL2Doors@4 ENDP
_TEXT	ENDS
PUBLIC	@SyncL3Doors@4
; Function compile flags: /Ogsy
;	COMDAT @SyncL3Doors@4
_TEXT	SEGMENT
@SyncL3Doors@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5541
	mov	eax, ecx
	push	esi
; Line 5550
	imul	eax, 120				; 00000078H
	push	edi
	mov	esi, DWORD PTR _object[eax]
; Line 5551
	mov	ecx, DWORD PTR _object[eax+4]
; Line 5552
	mov	edx, DWORD PTR _object[eax+8]
; Line 5555
	cmp	esi, 74					; 0000004aH
	mov	DWORD PTR _object[eax+60], 1
	mov	BYTE PTR _object[eax+64], 2
	jne	SHORT $LABEL_15$87885
; Line 5557
	mov	edi, DWORD PTR _object[eax+100]
	test	edi, edi
	jne	SHORT $L87886
; Line 5558
	push	531					; 00000213H
; Line 5559
	jmp	SHORT $L89089
$L87886:
; Line 5562
	cmp	edi, 1
	je	SHORT $L87887
	cmp	edi, 2
	je	SHORT $L87887
$LABEL_15$87885:
; Line 5564
	cmp	esi, 75					; 0000004bH
	jne	SHORT $L87893
; Line 5565
	mov	eax, DWORD PTR _object[eax+100]
	test	eax, eax
	je	SHORT $L87889
; Line 5567
	cmp	eax, 1
	je	SHORT $L87891
	cmp	eax, 2
	jne	SHORT $L87893
$L87891:
; Line 5568
	push	541					; 0000021dH
; Line 5569
	jmp	SHORT $L89089
$L87889:
; Line 5570
	push	534					; 00000216H
; Line 5573
	jmp	SHORT $L89089
$L87887:
; Line 5574
	push	538					; 0000021aH
$L89089:
	call	@ObjSetMicro@12
$L87893:
	pop	edi
	pop	esi
; Line 5576
	ret	0
@SyncL3Doors@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SyncObjectAnim@4
_TEXT	SEGMENT
@SyncObjectAnim@4 PROC NEAR				; COMDAT
; _o$ = ecx
; Line 5584
	mov	eax, ecx
	push	ebx
	imul	eax, 120				; 00000078H
	push	esi
	push	edi
	mov	edx, DWORD PTR _object[eax]
; Line 5586
	xor	esi, esi
; Line 5587
	mov	edi, edx
	imul	edi, 44					; 0000002cH
	mov	bl, BYTE PTR _AllObjects[edi+1]
	cmp	BYTE PTR _ObjFileList, bl
	je	SHORT $L87903
	movsx	ebx, bl
$L87902:
; Line 5588
	movsx	edi, BYTE PTR _ObjFileList[esi+1]
	inc	esi
	cmp	edi, ebx
	jne	SHORT $L87902
$L87903:
; Line 5589
	mov	esi, DWORD PTR _pObjCels[esi*4]
	pop	edi
	mov	DWORD PTR _object[eax+20], esi
	pop	esi
; Line 5590
	cmp	edx, 41					; 00000029H
	pop	ebx
	jg	SHORT $L87904
; Line 5591
	je	SHORT $LABEL_24$87915
; Line 5592
	test	edx, edx
	jle	SHORT $L87922
; Line 5593
	cmp	edx, 2
	jg	SHORT $L87907
; Line 5594
	jmp	@SyncL1Doors@4
$L87907:
; Line 5596
	cmp	edx, 4
	je	SHORT $LABEL_30$87910
; Line 5598
	cmp	edx, 19					; 00000013H
	jle	SHORT $L87922
; Line 5599
	cmp	edx, 22					; 00000016H
	jg	SHORT $L87912
; Line 5600
	jmp	@SyncCrux@4
$L87912:
; Line 5603
	cmp	edx, 25					; 00000019H
	je	SHORT $LABEL_30$87910
	cmp	edx, 28					; 0000001cH
	jne	SHORT $L87922
$LABEL_30$87910:
; Line 5605
	jmp	@SyncLever@4
$L87904:
; Line 5615
	cmp	edx, 42					; 0000002aH
	jl	SHORT $L87922
; Line 5616
	cmp	edx, 43					; 0000002bH
	jg	SHORT $L87917
; Line 5617
	jmp	@SyncL2Doors@4
$L87917:
; Line 5620
	cmp	edx, 71					; 00000047H
	je	SHORT $LABEL_24$87915
; Line 5622
	cmp	edx, 73					; 00000049H
	jne	SHORT $L89095
; Line 5623
	jmp	@SyncPedistal@4
$L89095:
; Line 5626
	jle	SHORT $L87922
; Line 5627
	cmp	edx, 75					; 0000004bH
	jg	SHORT $L87921
; Line 5628
	jmp	@SyncL3Doors@4
$L87921:
; Line 5631
	cmp	edx, 88					; 00000058H
	jne	SHORT $L87922
$LABEL_24$87915:
; Line 5612
	jmp	@SyncQSTLever@4
$L87922:
; Line 5635
	ret	0
@SyncObjectAnim@4 ENDP
_TEXT	ENDS
PUBLIC	@GetObjectStr@4
PUBLIC	??_C@_09CALL@Open?5Door?$AA@			; `string'
PUBLIC	??_C@_0M@OCCM@Closed?5Door?$AA@			; `string'
PUBLIC	??_C@_0N@JLMJ@Blocked?5Door?$AA@		; `string'
PUBLIC	??_C@_0M@LDLA@Small?5Chest?$AA@			; `string'
PUBLIC	??_C@_05DKPC@Chest?$AA@				; `string'
PUBLIC	??_C@_0M@DKOD@Large?5Chest?$AA@			; `string'
PUBLIC	??_C@_0BD@KNNF@Crucified?5Skeleton?$AA@		; `string'
PUBLIC	??_C@_0N@HEA@Ancient?5Tome?$AA@			; `string'
PUBLIC	??_C@_0BB@EMJD@Book?5of?5Vileness?$AA@		; `string'
PUBLIC	??_C@_0M@HALA@Skull?5Lever?$AA@			; `string'
PUBLIC	??_C@_0O@POBI@Mythical?5Book?$AA@		; `string'
PUBLIC	??_C@_0M@EOD@Sarcophagus?$AA@			; `string'
PUBLIC	??_C@_09NKNP@Bookshelf?$AA@			; `string'
PUBLIC	??_C@_09CKCC@?$CFs?5Shrine?$AA@			; `string'
PUBLIC	??_C@_0O@CJEB@Skeleton?5Tome?$AA@		; `string'
PUBLIC	??_C@_08PJKE@Bookcase?$AA@			; `string'
PUBLIC	??_C@_0N@LNEK@Library?5Book?$AA@		; `string'
PUBLIC	??_C@_0P@NLAA@Blood?5Fountain?$AA@		; `string'
PUBLIC	??_C@_0BB@COBF@Decapitated?5Body?$AA@		; `string'
PUBLIC	??_C@_0BC@OJEC@Book?5of?5the?5Blind?$AA@	; `string'
PUBLIC	??_C@_0O@EIIO@Book?5of?5Blood?$AA@		; `string'
PUBLIC	??_C@_0BC@MMPH@Pedestal?5of?5Blood?$AA@		; `string'
PUBLIC	??_C@_0BB@CLIO@Purifying?5Spring?$AA@		; `string'
PUBLIC	??_C@_05KFDN@Armor?$AA@				; `string'
PUBLIC	??_C@_0M@KGBJ@Goat?5Shrine?$AA@			; `string'
PUBLIC	??_C@_08JNFK@Cauldron?$AA@			; `string'
PUBLIC	??_C@_0L@JGJK@Murky?5Pool?$AA@			; `string'
PUBLIC	??_C@_0BC@NGJD@Fountain?5of?5Tears?$AA@		; `string'
PUBLIC	??_C@_0L@MAIJ@Steel?5Tome?$AA@			; `string'
PUBLIC	??_C@_0M@LHNE@Weapon?5Rack?$AA@			; `string'
PUBLIC	??_C@_0P@CKOP@Mushroom?5Patch?$AA@		; `string'
PUBLIC	??_C@_0L@LPBH@Vile?5Stand?$AA@			; `string'
PUBLIC	??_C@_0L@FCBE@Slain?5Hero?$AA@			; `string'
PUBLIC	??_C@_0L@CKNM@Trapped?5?$CFs?$AA@		; `string'
EXTRN	_infoclr:DWORD
EXTRN	_tempstr:BYTE
EXTRN	_infostr:BYTE
EXTRN	_strcpy:NEAR
;	COMDAT ??_C@_09CALL@Open?5Door?$AA@
_DATA	SEGMENT
??_C@_09CALL@Open?5Door?$AA@ DB 'Open Door', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@OCCM@Closed?5Door?$AA@
_DATA	SEGMENT
??_C@_0M@OCCM@Closed?5Door?$AA@ DB 'Closed Door', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLMJ@Blocked?5Door?$AA@
_DATA	SEGMENT
??_C@_0N@JLMJ@Blocked?5Door?$AA@ DB 'Blocked Door', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@LDLA@Small?5Chest?$AA@
_DATA	SEGMENT
??_C@_0M@LDLA@Small?5Chest?$AA@ DB 'Small Chest', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05DKPC@Chest?$AA@
_DATA	SEGMENT
??_C@_05DKPC@Chest?$AA@ DB 'Chest', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@DKOD@Large?5Chest?$AA@
_DATA	SEGMENT
??_C@_0M@DKOD@Large?5Chest?$AA@ DB 'Large Chest', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@KNNF@Crucified?5Skeleton?$AA@
_DATA	SEGMENT
??_C@_0BD@KNNF@Crucified?5Skeleton?$AA@ DB 'Crucified Skeleton', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@HEA@Ancient?5Tome?$AA@
_DATA	SEGMENT
??_C@_0N@HEA@Ancient?5Tome?$AA@ DB 'Ancient Tome', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@EMJD@Book?5of?5Vileness?$AA@
_DATA	SEGMENT
??_C@_0BB@EMJD@Book?5of?5Vileness?$AA@ DB 'Book of Vileness', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@HALA@Skull?5Lever?$AA@
_DATA	SEGMENT
??_C@_0M@HALA@Skull?5Lever?$AA@ DB 'Skull Lever', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@POBI@Mythical?5Book?$AA@
_DATA	SEGMENT
??_C@_0O@POBI@Mythical?5Book?$AA@ DB 'Mythical Book', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@EOD@Sarcophagus?$AA@
_DATA	SEGMENT
??_C@_0M@EOD@Sarcophagus?$AA@ DB 'Sarcophagus', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09NKNP@Bookshelf?$AA@
_DATA	SEGMENT
??_C@_09NKNP@Bookshelf?$AA@ DB 'Bookshelf', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CKCC@?$CFs?5Shrine?$AA@
_DATA	SEGMENT
??_C@_09CKCC@?$CFs?5Shrine?$AA@ DB '%s Shrine', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@CJEB@Skeleton?5Tome?$AA@
_DATA	SEGMENT
??_C@_0O@CJEB@Skeleton?5Tome?$AA@ DB 'Skeleton Tome', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PJKE@Bookcase?$AA@
_DATA	SEGMENT
??_C@_08PJKE@Bookcase?$AA@ DB 'Bookcase', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@LNEK@Library?5Book?$AA@
_DATA	SEGMENT
??_C@_0N@LNEK@Library?5Book?$AA@ DB 'Library Book', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@NLAA@Blood?5Fountain?$AA@
_DATA	SEGMENT
??_C@_0P@NLAA@Blood?5Fountain?$AA@ DB 'Blood Fountain', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@COBF@Decapitated?5Body?$AA@
_DATA	SEGMENT
??_C@_0BB@COBF@Decapitated?5Body?$AA@ DB 'Decapitated Body', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@OJEC@Book?5of?5the?5Blind?$AA@
_DATA	SEGMENT
??_C@_0BC@OJEC@Book?5of?5the?5Blind?$AA@ DB 'Book of the Blind', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@EIIO@Book?5of?5Blood?$AA@
_DATA	SEGMENT
??_C@_0O@EIIO@Book?5of?5Blood?$AA@ DB 'Book of Blood', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@MMPH@Pedestal?5of?5Blood?$AA@
_DATA	SEGMENT
??_C@_0BC@MMPH@Pedestal?5of?5Blood?$AA@ DB 'Pedestal of Blood', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CLIO@Purifying?5Spring?$AA@
_DATA	SEGMENT
??_C@_0BB@CLIO@Purifying?5Spring?$AA@ DB 'Purifying Spring', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_05KFDN@Armor?$AA@
_DATA	SEGMENT
??_C@_05KFDN@Armor?$AA@ DB 'Armor', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@KGBJ@Goat?5Shrine?$AA@
_DATA	SEGMENT
??_C@_0M@KGBJ@Goat?5Shrine?$AA@ DB 'Goat Shrine', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08JNFK@Cauldron?$AA@
_DATA	SEGMENT
??_C@_08JNFK@Cauldron?$AA@ DB 'Cauldron', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@JGJK@Murky?5Pool?$AA@
_DATA	SEGMENT
??_C@_0L@JGJK@Murky?5Pool?$AA@ DB 'Murky Pool', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@NGJD@Fountain?5of?5Tears?$AA@
_DATA	SEGMENT
??_C@_0BC@NGJD@Fountain?5of?5Tears?$AA@ DB 'Fountain of Tears', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@MAIJ@Steel?5Tome?$AA@
_DATA	SEGMENT
??_C@_0L@MAIJ@Steel?5Tome?$AA@ DB 'Steel Tome', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@LHNE@Weapon?5Rack?$AA@
_DATA	SEGMENT
??_C@_0M@LHNE@Weapon?5Rack?$AA@ DB 'Weapon Rack', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@CKOP@Mushroom?5Patch?$AA@
_DATA	SEGMENT
??_C@_0P@CKOP@Mushroom?5Patch?$AA@ DB 'Mushroom Patch', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@LPBH@Vile?5Stand?$AA@
_DATA	SEGMENT
??_C@_0L@LPBH@Vile?5Stand?$AA@ DB 'Vile Stand', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FCBE@Slain?5Hero?$AA@
_DATA	SEGMENT
??_C@_0L@FCBE@Slain?5Hero?$AA@ DB 'Slain Hero', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@CKNM@Trapped?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0L@CKNM@Trapped?5?$CFs?$AA@ DB 'Trapped %s', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @GetObjectStr@4
_TEXT	SEGMENT
@GetObjectStr@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 5638
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 5642
	imul	edi, 120				; 00000078H
	mov	esi, OFFSET FLAT:_infostr
	mov	ebx, OFFSET FLAT:_tempstr
	mov	eax, DWORD PTR _object[edi]
	dec	eax
	cmp	eax, 96					; 00000060H
	ja	$L88004
	movzx	eax, BYTE PTR $L89099[eax]
	jmp	DWORD PTR $L89102[eax*4]
$L87931:
; Line 5649
	cmp	DWORD PTR _object[edi+100], 1
	jne	SHORT $L87932
; Line 5650
	push	OFFSET FLAT:??_C@_09CALL@Open?5Door?$AA@ ; `string'
	push	esi
	call	_strcpy
	pop	ecx
	pop	ecx
$L87932:
; Line 5651
	cmp	DWORD PTR _object[edi+100], 0
	jne	SHORT $L87934
; Line 5652
	push	OFFSET FLAT:??_C@_0M@OCCM@Closed?5Door?$AA@ ; `string'
	push	esi
	call	_strcpy
	pop	ecx
	pop	ecx
$L87934:
; Line 5653
	cmp	DWORD PTR _object[edi+100], 2
	jne	$L88004
; Line 5654
	push	OFFSET FLAT:??_C@_0N@JLMJ@Blocked?5Door?$AA@ ; `string'
; Line 5655
	jmp	$L89101
$L87938:
; Line 5658
	push	OFFSET FLAT:??_C@_05PENN@Lever?$AA@	; `string'
; Line 5659
	jmp	$L89101
$L87939:
; Line 5662
	push	OFFSET FLAT:??_C@_0M@LDLA@Small?5Chest?$AA@ ; `string'
; Line 5663
	jmp	$L89101
$L87941:
; Line 5666
	push	OFFSET FLAT:??_C@_05DKPC@Chest?$AA@	; `string'
; Line 5667
	jmp	$L89101
$L87943:
; Line 5671
	push	OFFSET FLAT:??_C@_0M@DKOD@Large?5Chest?$AA@ ; `string'
; Line 5672
	jmp	$L89101
$L87945:
; Line 5676
	push	OFFSET FLAT:??_C@_0BD@KNNF@Crucified?5Skeleton?$AA@ ; `string'
; Line 5677
	jmp	$L89101
$L87947:
; Line 5679
	cmp	BYTE PTR _setlevel, 0
	je	$L88004
; Line 5680
	mov	al, BYTE PTR _setlvlnum
	cmp	al, 2
	jne	SHORT $L87949
; Line 5681
	push	OFFSET FLAT:??_C@_0N@HEA@Ancient?5Tome?$AA@ ; `string'
; Line 5682
	jmp	$L89101
$L87949:
	cmp	al, 5
	jne	$L88004
; Line 5683
	push	OFFSET FLAT:??_C@_0BB@EMJD@Book?5of?5Vileness?$AA@ ; `string'
; Line 5686
	jmp	$L89101
$L87954:
; Line 5688
	push	OFFSET FLAT:??_C@_0M@HALA@Skull?5Lever?$AA@ ; `string'
; Line 5689
	jmp	$L89101
$L87956:
; Line 5691
	push	OFFSET FLAT:??_C@_0O@POBI@Mythical?5Book?$AA@ ; `string'
; Line 5692
	jmp	$L89101
$L87958:
; Line 5694
	push	OFFSET FLAT:??_C@_0M@EOD@Sarcophagus?$AA@ ; `string'
; Line 5695
	jmp	$L89101
$L87960:
; Line 5697
	push	OFFSET FLAT:??_C@_09NKNP@Bookshelf?$AA@	; `string'
; Line 5698
	jmp	$L89101
$L87962:
; Line 5701
	push	OFFSET FLAT:??_C@_06HHNL@Barrel?$AA@	; `string'
; Line 5702
	jmp	$L89101
$L87963:
; Line 5705
	mov	eax, DWORD PTR _object[edi+88]
	push	DWORD PTR _shrinestrs[eax*4]
	push	OFFSET FLAT:??_C@_09CKCC@?$CFs?5Shrine?$AA@ ; `string'
	push	ebx
	call	_sprintf
; Line 5706
	push	ebx
	push	esi
	call	_strcpy
	add	esp, 20					; 00000014H
; Line 5707
	jmp	$L88004
$L87965:
; Line 5709
	push	OFFSET FLAT:??_C@_0O@CJEB@Skeleton?5Tome?$AA@ ; `string'
; Line 5710
	jmp	$L89101
$L87967:
; Line 5713
	push	OFFSET FLAT:??_C@_08PJKE@Bookcase?$AA@	; `string'
; Line 5714
	jmp	$L89101
$L87969:
; Line 5716
	push	OFFSET FLAT:??_C@_0N@LNEK@Library?5Book?$AA@ ; `string'
; Line 5717
	jmp	SHORT $L89101
$L87971:
; Line 5719
	push	OFFSET FLAT:??_C@_0P@NLAA@Blood?5Fountain?$AA@ ; `string'
; Line 5720
	jmp	SHORT $L89101
$L87973:
; Line 5722
	push	OFFSET FLAT:??_C@_0BB@COBF@Decapitated?5Body?$AA@ ; `string'
; Line 5723
	jmp	SHORT $L89101
$L87975:
; Line 5725
	push	OFFSET FLAT:??_C@_0BC@OJEC@Book?5of?5the?5Blind?$AA@ ; `string'
; Line 5726
	jmp	SHORT $L89101
$L87977:
; Line 5728
	push	OFFSET FLAT:??_C@_0O@EIIO@Book?5of?5Blood?$AA@ ; `string'
; Line 5729
	jmp	SHORT $L89101
$L87979:
; Line 5731
	push	OFFSET FLAT:??_C@_0BC@MMPH@Pedestal?5of?5Blood?$AA@ ; `string'
; Line 5732
	jmp	SHORT $L89101
$L87981:
; Line 5734
	push	OFFSET FLAT:??_C@_0BB@CLIO@Purifying?5Spring?$AA@ ; `string'
; Line 5735
	jmp	SHORT $L89101
$L87983:
; Line 5738
	push	OFFSET FLAT:??_C@_05KFDN@Armor?$AA@	; `string'
; Line 5739
	jmp	SHORT $L89101
$L87985:
; Line 5741
	push	OFFSET FLAT:??_C@_0M@KGBJ@Goat?5Shrine?$AA@ ; `string'
; Line 5742
	jmp	SHORT $L89101
$L87987:
; Line 5744
	push	OFFSET FLAT:??_C@_08JNFK@Cauldron?$AA@	; `string'
; Line 5745
	jmp	SHORT $L89101
$L87989:
; Line 5747
	push	OFFSET FLAT:??_C@_0L@JGJK@Murky?5Pool?$AA@ ; `string'
; Line 5748
	jmp	SHORT $L89101
$L87991:
; Line 5750
	push	OFFSET FLAT:??_C@_0BC@NGJD@Fountain?5of?5Tears?$AA@ ; `string'
; Line 5751
	jmp	SHORT $L89101
$L87993:
; Line 5753
	mov	eax, DWORD PTR _object[edi+96]
	push	DWORD PTR _StoryBookName[eax*4]
; Line 5754
	jmp	SHORT $L89101
$L87994:
; Line 5756
	push	OFFSET FLAT:??_C@_0L@MAIJ@Steel?5Tome?$AA@ ; `string'
; Line 5757
	jmp	SHORT $L89101
$L87996:
; Line 5760
	push	OFFSET FLAT:??_C@_0M@LHNE@Weapon?5Rack?$AA@ ; `string'
; Line 5761
	jmp	SHORT $L89101
$L87998:
; Line 5763
	push	OFFSET FLAT:??_C@_0P@CKOP@Mushroom?5Patch?$AA@ ; `string'
; Line 5764
	jmp	SHORT $L89101
$L88000:
; Line 5766
	push	OFFSET FLAT:??_C@_0L@LPBH@Vile?5Stand?$AA@ ; `string'
; Line 5767
	jmp	SHORT $L89101
$L88002:
; Line 5769
	push	OFFSET FLAT:??_C@_0L@FCBE@Slain?5Hero?$AA@ ; `string'
$L89101:
	push	esi
	call	_strcpy
	pop	ecx
	pop	ecx
$L88004:
; Line 5774
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+352], 1
	jne	SHORT $L88006
; Line 5775
	cmp	DWORD PTR _object[edi+72], 0
	je	SHORT $L88006
; Line 5776
	push	esi
	push	OFFSET FLAT:??_C@_0L@CKNM@Trapped?5?$CFs?$AA@ ; `string'
	push	ebx
	call	_sprintf
; Line 5777
	push	ebx
	push	esi
	call	_strcpy
	add	esp, 20					; 00000014H
; Line 5778
	mov	DWORD PTR _infoclr, 2
$L88006:
	pop	edi
	pop	esi
	pop	ebx
; Line 5781
	ret	0
$L89102:
	DD	$L87931
	DD	$L87938
	DD	$L87939
	DD	$L87941
	DD	$L87943
	DD	$L87945
	DD	$L87947
	DD	$L87954
	DD	$L87956
	DD	$L87958
	DD	$L87960
	DD	$L87962
	DD	$L87963
	DD	$L87965
	DD	$L87967
	DD	$L87969
	DD	$L87971
	DD	$L87973
	DD	$L87975
	DD	$L87977
	DD	$L87979
	DD	$L87981
	DD	$L87983
	DD	$L87985
	DD	$L87987
	DD	$L87989
	DD	$L87991
	DD	$L87993
	DD	$L87994
	DD	$L87996
	DD	$L87998
	DD	$L88000
	DD	$L88002
	DD	$L88004
$L89099:
	DB	0
	DB	0
	DB	33					; 00000021H
	DB	1
	DB	2
	DB	3
	DB	4
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	5
	DB	5
	DB	5
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	6
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	7
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	8
	DB	0
	DB	0
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	9
	DB	33					; 00000021H
	DB	1
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	10					; 0000000aH
	DB	33					; 00000021H
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	33					; 00000021H
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	2
	DB	3
	DB	4
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	0
	DB	0
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	33					; 00000021H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	33					; 00000021H
	DB	27					; 0000001bH
	DB	33					; 00000021H
	DB	28					; 0000001cH
	DB	22					; 00000016H
	DB	29					; 0000001dH
	DB	33					; 00000021H
	DB	29					; 0000001dH
	DB	33					; 00000021H
	DB	30					; 0000001eH
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	4
@GetObjectStr@4 ENDP
_TEXT	ENDS
END
