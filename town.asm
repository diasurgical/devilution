; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/town.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@EIIA@Levels?2TownData?2Sector1s?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@PGGA@Levels?2TownData?2Sector2s?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@GDMA@Levels?2TownData?2Sector3s?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@ILKA@Levels?2TownData?2Sector4s?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @town_clear_upper_buf@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_clear_low_buf@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_draw_clipped_e_flag@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_draw_clipped_town@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_draw_lower@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_draw_clipped_e_flag_2@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_draw_clipped_town_2@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_draw_lower_2@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_draw_e_flag@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_draw_town_all@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @town_draw_upper@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @T_DrawGame@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @T_DrawZoom@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @T_DrawView@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _town_init_dpiece_defs_map
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @T_FillSector@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @T_FillTile@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _T_Pass3
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CreateTown@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	@town_clear_upper_buf@4
EXTRN	_gpBufEnd:DWORD
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT @town_clear_upper_buf@4
_TEXT	SEGMENT
@town_clear_upper_buf@4 PROC NEAR			; COMDAT
; _a1$ = ecx
; File Source/town.cpp
; Line 18
	cmp	ecx, DWORD PTR _gpBufEnd
	push	ebx
	push	esi
	push	edi
	push	30					; 0000001eH
	pop	esi
	jb	SHORT $L84998
	push	4
	pop	ebx
$L84993:
; Line 19
	lea	edi, DWORD PTR [esi+ecx]
; Line 20
	push	ebx
	push	0
	push	edi
	call	_memset
; Line 21
	lea	eax, DWORD PTR [ebx+edi]
	add	esp, 12					; 0000000cH
; Line 22
	test	esi, esi
	lea	ecx, DWORD PTR [eax+esi-832]
	je	SHORT $L85913
; Line 35
	dec	esi
; Line 36
	add	ebx, 4
	dec	esi
	cmp	ecx, DWORD PTR _gpBufEnd
	jae	SHORT $L84993
; Line 32
	jmp	SHORT $L84998
$L85913:
; Line 23
	push	2
	pop	esi
	push	60					; 0000003cH
	pop	ebx
$L84996:
; Line 26
	cmp	ecx, DWORD PTR _gpBufEnd
	jb	SHORT $L84998
; Line 28
	lea	edi, DWORD PTR [esi+ecx]
; Line 29
	push	ebx
	push	0
	push	edi
	call	_memset
; Line 30
	lea	eax, DWORD PTR [ebx+edi]
	add	esp, 12					; 0000000cH
	sub	ebx, 4
	lea	ecx, DWORD PTR [eax+esi-832]
; Line 31
	inc	esi
	inc	esi
; Line 32
	cmp	esi, 32					; 00000020H
	jne	SHORT $L84996
$L84998:
	pop	edi
	pop	esi
	pop	ebx
; Line 38
	ret	0
@town_clear_upper_buf@4 ENDP
_TEXT	ENDS
PUBLIC	@town_clear_low_buf@4
; Function compile flags: /Ogsy
;	COMDAT @town_clear_low_buf@4
_TEXT	SEGMENT
@town_clear_low_buf@4 PROC NEAR				; COMDAT
; _y_related$ = ecx
; Line 42
	push	ebx
	push	esi
	push	edi
; Line 54
	push	30					; 0000001eH
	pop	edi
	push	4
	pop	ebx
$L85012:
; Line 56
	cmp	ecx, DWORD PTR _gpBufEnd
	jae	SHORT $L85015
; Line 57
	lea	esi, DWORD PTR [edi+ecx]
; Line 58
	push	ebx
	push	0
	push	esi
	call	_memset
; Line 59
	lea	eax, DWORD PTR [ebx+esi]
	add	esp, 12					; 0000000cH
	add	eax, edi
; Line 60
	jmp	SHORT $L85016
$L85015:
; Line 61
	lea	eax, DWORD PTR [ecx+64]
$L85016:
; Line 64
	test	edi, edi
	lea	ecx, DWORD PTR [eax-832]
	je	SHORT $L85922
; Line 66
	dec	edi
	dec	edi
	add	ebx, 4
	jmp	SHORT $L85012
$L85922:
; Line 68
	push	2
	pop	edi
	push	60					; 0000003cH
	pop	ebx
$L85018:
; Line 71
	cmp	ecx, DWORD PTR _gpBufEnd
	jae	SHORT $L85021
; Line 72
	lea	esi, DWORD PTR [edi+ecx]
; Line 73
	push	ebx
	push	0
	push	esi
	call	_memset
; Line 74
	lea	eax, DWORD PTR [ebx+esi]
	add	esp, 12					; 0000000cH
	add	eax, edi
; Line 75
	jmp	SHORT $L85022
$L85021:
; Line 76
	lea	eax, DWORD PTR [ecx+64]
$L85022:
; Line 79
	sub	ebx, 4
; Line 80
	inc	edi
	inc	edi
	lea	ecx, DWORD PTR [eax-832]
; Line 81
	cmp	edi, 32					; 00000020H
	jne	SHORT $L85018
	pop	edi
	pop	esi
	pop	ebx
; Line 82
	ret	0
@town_clear_low_buf@4 ENDP
_TEXT	ENDS
PUBLIC	@town_draw_clipped_e_flag@20
PUBLIC	@town_draw_clipped_town@24
EXTRN	@gendung_get_dpiece_num_from_coord@8:NEAR
EXTRN	_level_cel_block:DWORD
EXTRN	@drawLowerScreen@4:NEAR
EXTRN	_dpiece_defs_map_1:BYTE
; Function compile flags: /Ogsy
;	COMDAT @town_draw_clipped_e_flag@20
_TEXT	SEGMENT
_buffer$ = -8
_y$ = 8
_sx$ = 12
_sy$ = 16
_buf$ = -4
@town_draw_clipped_e_flag@20 PROC NEAR			; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	mov	ebx, edx
; Line 92
	mov	edx, DWORD PTR _y$[ebp]
	push	esi
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	DWORD PTR _buf$[ebp], ecx
	push	edi
	mov	ecx, ebx
	call	@gendung_get_dpiece_num_from_coord@8
	mov	esi, eax
	shl	esi, 5
	add	esi, OFFSET FLAT:_dpiece_defs_map_1
; Line 94
	xor	edi, edi
$L85037:
; Line 95
	movzx	eax, WORD PTR [esi+edi*2]
; Line 96
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85040
; Line 97
	mov	ecx, DWORD PTR _buf$[ebp]
	call	@drawLowerScreen@4
$L85040:
; Line 98
	movzx	eax, WORD PTR [esi+edi*2+2]
; Line 99
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85041
; Line 100
	mov	eax, DWORD PTR _buf$[ebp]
	lea	ecx, DWORD PTR [eax+32]
	call	@drawLowerScreen@4
$L85041:
; Line 101
	sub	DWORD PTR _buf$[ebp], 24576		; 00006000H
	inc	edi
	inc	edi
	cmp	edi, 12					; 0000000cH
	jl	SHORT $L85037
; Line 103
	push	0
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _sy$[ebp]
	mov	edx, ebx
	push	DWORD PTR _sx$[ebp]
	push	DWORD PTR _y$[ebp]
	call	@town_draw_clipped_town@24
	pop	edi
	pop	esi
	pop	ebx
; Line 104
	leave
	ret	12					; 0000000cH
@town_draw_clipped_e_flag@20 ENDP
_TEXT	ENDS
EXTRN	_dFlags:BYTE
EXTRN	_dItem:BYTE
EXTRN	_pcursmonst:DWORD
EXTRN	_pcursitem:BYTE
EXTRN	_pcursplr:BYTE
EXTRN	_gpBuffer:DWORD
EXTRN	_screen_y_times_768:BYTE
EXTRN	@DrawClippedMissile@28:NEAR
EXTRN	@DrawDeadPlayer@28:NEAR
EXTRN	_towner:BYTE
EXTRN	@Cel2DrawHdrOnly@28:NEAR
EXTRN	_item:BYTE
EXTRN	@CelDrawHdrClrHL@32:NEAR
EXTRN	_plr:BYTE
EXTRN	@Cl2DecodeFrm4@28:NEAR
EXTRN	@Cl2DecodeClrHL@32:NEAR
EXTRN	_dMonster:BYTE
EXTRN	_dPlayer:BYTE
; Function compile flags: /Ogsy
;	COMDAT @town_draw_clipped_town@24
_TEXT	SEGMENT
_x$ = -8
_y$ = 8
_sx$ = 12
_sy$ = 16
_some_flag$ = 20
_v7$ = -20
_v11$ = -16
_v17$ = -20
_v27$ = -12
@town_draw_clipped_town@24 PROC NEAR			; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 136
	mov	eax, DWORD PTR _sy$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _screen_y_times_768[eax*4]
	mov	edi, edx
	add	eax, DWORD PTR _gpBuffer
	mov	DWORD PTR _x$[ebp], edi
	mov	ecx, DWORD PTR _sx$[ebp]
	imul	edi, 112				; 00000070H
; Line 137
	mov	ebx, DWORD PTR _y$[ebp]
	add	eax, ecx
	mov	DWORD PTR _v27$[ebp], eax
; Line 139
	push	112					; 00000070H
	lea	eax, DWORD PTR [edi+ebx]
	xor	edx, edx
	mov	DWORD PTR -4+[ebp], eax
	mov	DWORD PTR _v7$[ebp], eax
	mov	eax, edi
	pop	esi
	div	esi
	imul	eax, 112				; 00000070H
	mov	al, BYTE PTR _dItem[eax+ebx]
; Line 140
	test	al, al
	je	SHORT $L85080
; Line 141
	dec	al
; Line 142
	movsx	esi, al
; Line 143
	imul	esi, 368				; 00000170H
	sub	ecx, DWORD PTR _item[esi+40]
; Line 144
	cmp	al, BYTE PTR _pcursitem
	mov	DWORD PTR _v11$[ebp], ecx
	jne	SHORT $L85081
; Line 153
	push	8
	push	0
	push	DWORD PTR _item[esi+36]
	mov	edx, ecx
	mov	cl, -75					; ffffffb5H
	push	DWORD PTR _item[esi+32]
	push	DWORD PTR _item[esi+24]
	push	DWORD PTR _sy$[ebp]
	call	@CelDrawHdrClrHL@32
	mov	ecx, DWORD PTR _v11$[ebp]
$L85081:
; Line 154
	push	8
	push	0
	push	DWORD PTR _item[esi+36]
	mov	edx, DWORD PTR _sy$[ebp]
	push	DWORD PTR _item[esi+32]
	push	DWORD PTR _item[esi+24]
	call	@Cel2DrawHdrOnly@28
$L85080:
; Line 156
	mov	eax, DWORD PTR _v7$[ebp]
	test	BYTE PTR _dFlags[eax], 16		; 00000010H
	je	SHORT $L85084
; Line 157
	lea	ecx, DWORD PTR [edi+ebx]
	or	eax, -1
; Line 158
	mov	ebx, DWORD PTR _sx$[ebp]
	sub	eax, DWORD PTR _dMonster[ecx*4-4]
	mov	esi, eax
	imul	esi, 232				; 000000e8H
	sub	ebx, DWORD PTR _towner[esi+68]
; Line 159
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L85085
; Line 168
	push	8
	push	0
	push	DWORD PTR _towner[esi+64]
	mov	edx, ebx
	mov	cl, -90					; ffffffa6H
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	push	DWORD PTR _sy$[ebp]
	call	@CelDrawHdrClrHL@32
$L85085:
; Line 169
	push	8
	push	0
	push	DWORD PTR _towner[esi+64]
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, ebx
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	call	@Cel2DrawHdrOnly@28
	mov	ebx, DWORD PTR _y$[ebp]
$L85084:
; Line 171
	mov	eax, DWORD PTR -4+[ebp]
	mov	eax, DWORD PTR _dMonster[eax*4]
; Line 172
	test	eax, eax
	jle	SHORT $L85088
; Line 173
	dec	eax
; Line 175
	mov	ecx, DWORD PTR _sx$[ebp]
	mov	esi, eax
	imul	esi, 232				; 000000e8H
	sub	ecx, DWORD PTR _towner[esi+68]
; Line 176
	cmp	eax, DWORD PTR _pcursmonst
	mov	DWORD PTR _v17$[ebp], ecx
	jne	SHORT $L85089
; Line 185
	push	8
	push	0
	push	DWORD PTR _towner[esi+64]
	mov	edx, ecx
	mov	cl, -90					; ffffffa6H
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	push	DWORD PTR _sy$[ebp]
	call	@CelDrawHdrClrHL@32
	mov	ecx, DWORD PTR _v17$[ebp]
$L85089:
; Line 186
	push	8
	push	0
	push	DWORD PTR _towner[esi+64]
	mov	edx, DWORD PTR _sy$[ebp]
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	call	@Cel2DrawHdrOnly@28
$L85088:
; Line 188
	mov	eax, DWORD PTR -4+[ebp]
	test	BYTE PTR _dFlags[eax], 32		; 00000020H
	je	$L85092
; Line 189
	or	al, -1
	sub	al, BYTE PTR _dPlayer[edi+ebx-1]
; Line 190
	movsx	esi, al
; Line 191
	imul	esi, 21720				; 000054d8H
; Line 192
	mov	edi, DWORD PTR _plr[esi+96]
	mov	ebx, DWORD PTR _plr[esi+100]
	sub	edi, DWORD PTR _plr[esi+148]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 193
	cmp	al, BYTE PTR _pcursplr
	jne	SHORT $L85093
; Line 194
	push	8
	push	0
	push	DWORD PTR _plr[esi+144]
	mov	edx, edi
	mov	cl, -91					; ffffffa5H
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	push	ebx
	call	@Cl2DecodeClrHL@32
$L85093:
; Line 195
	push	8
	push	0
	push	DWORD PTR _plr[esi+144]
	mov	edx, ebx
	mov	ecx, edi
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	call	@Cl2DecodeFrm4@28
; Line 196
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	SHORT $L85096
	cmp	DWORD PTR _plr[esi+152], 0
	je	SHORT $L85096
; Line 197
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	inc	eax
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _v27$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@town_draw_clipped_e_flag@20
$L85096:
; Line 198
	mov	ebx, DWORD PTR _y$[ebp]
$L85092:
; Line 200
	mov	esi, DWORD PTR -4+[ebp]
	test	BYTE PTR _dFlags[esi], 4
	je	SHORT $L85098
; Line 201
	push	1
	mov	ecx, DWORD PTR _x$[ebp]
	push	8
	push	0
	push	DWORD PTR _sy$[ebp]
	mov	edx, ebx
	push	DWORD PTR _sx$[ebp]
	call	@DrawDeadPlayer@28
$L85098:
; Line 202
	mov	al, BYTE PTR _dPlayer[esi]
; Line 203
	test	al, al
	jle	$L85099
; Line 204
	dec	al
; Line 205
	movsx	esi, al
; Line 206
	imul	esi, 21720				; 000054d8H
; Line 207
	mov	edi, DWORD PTR _plr[esi+96]
	mov	ebx, DWORD PTR _plr[esi+100]
	sub	edi, DWORD PTR _plr[esi+148]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 208
	cmp	al, BYTE PTR _pcursplr
	jne	SHORT $L85100
; Line 209
	push	8
	push	0
	push	DWORD PTR _plr[esi+144]
	mov	edx, edi
	mov	cl, -91					; ffffffa5H
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	push	ebx
	call	@Cl2DecodeClrHL@32
$L85100:
; Line 210
	push	8
	push	0
	push	DWORD PTR _plr[esi+144]
	mov	edx, ebx
	mov	ecx, edi
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	call	@Cl2DecodeFrm4@28
; Line 211
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	SHORT $L85103
	cmp	DWORD PTR _plr[esi+152], 0
	je	SHORT $L85103
; Line 212
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	inc	eax
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _v27$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@town_draw_clipped_e_flag@20
$L85103:
; Line 213
	mov	ebx, DWORD PTR _y$[ebp]
$L85099:
; Line 215
	mov	eax, DWORD PTR -4+[ebp]
	test	BYTE PTR _dFlags[eax], 1
	je	SHORT $L85105
; Line 216
	push	0
	mov	ecx, DWORD PTR _x$[ebp]
	push	8
	push	0
	push	DWORD PTR _sy$[ebp]
	mov	edx, ebx
	push	DWORD PTR _sx$[ebp]
	call	@DrawClippedMissile@28
$L85105:
	pop	edi
	pop	esi
	pop	ebx
; Line 217
	leave
	ret	16					; 00000010H
@town_draw_clipped_town@24 ENDP
_TEXT	ENDS
PUBLIC	@town_draw_lower@24
EXTRN	_dPiece:BYTE
; Function compile flags: /Ogsy
;	COMDAT @town_draw_lower@24
_TEXT	SEGMENT
_x$ = -12
_sx$ = 8
_sy$ = 12
_a5$ = 16
_some_flag$ = 20
_v12$ = 8
_v18$ = 20
_a1$ = -8
_a1a$ = 16
_ya$ = -8
_v25$ = 8
_v26$ = 8
_v27$ = 8
_xa$ = -4
_a5a$ = -12
@town_draw_lower@24 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 222
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 250
	cmp	DWORD PTR _some_flag$[ebp], 0
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	DWORD PTR _x$[ebp], ecx
	mov	DWORD PTR _ya$[ebp], edi
	mov	DWORD PTR _xa$[ebp], ecx
	je	$L85943
; Line 251
	test	edi, edi
	jl	$L85144
	cmp	edi, 112				; 00000070H
	jge	$L85144
	test	ecx, ecx
	jl	$L85144
	cmp	ecx, 112				; 00000070H
	jge	$L85144
	mov	eax, ecx
	imul	eax, 112				; 00000070H
	add	eax, edi
	mov	eax, DWORD PTR _dPiece[eax*4]
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85144
; Line 254
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ebx, DWORD PTR _sx$[ebp]
; Line 255
	mov	DWORD PTR _v25$[ebp], 1
	mov	eax, DWORD PTR _screen_y_times_768[eax*4]
	add	eax, DWORD PTR _gpBuffer
	lea	eax, DWORD PTR [eax+ebx+32]
	mov	DWORD PTR _a1$[ebp], eax
; Line 256
	call	@gendung_get_dpiece_num_from_coord@8
	mov	esi, eax
	shl	esi, 5
	add	esi, OFFSET FLAT:_dpiece_defs_map_1
$L85147:
; Line 258
	mov	eax, DWORD PTR _v25$[ebp]
	movzx	eax, WORD PTR [esi+eax*2]
; Line 260
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85152
; Line 261
	mov	ecx, DWORD PTR _a1$[ebp]
	call	@drawLowerScreen@4
$L85152:
; Line 262
	add	DWORD PTR _v25$[ebp], 2
; Line 263
	sub	DWORD PTR _a1$[ebp], 24576		; 00006000H
; Line 264
	cmp	DWORD PTR _v25$[ebp], 17		; 00000011H
	jl	SHORT $L85147
; Line 265
	mov	esi, DWORD PTR _sy$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	push	0
	push	esi
	mov	ecx, DWORD PTR _screen_y_times_768[esi*4]
	push	ebx
	add	ecx, DWORD PTR _gpBuffer
	push	edi
	add	ecx, ebx
	call	@town_draw_clipped_town@24
; Line 266
	jmp	SHORT $L85154
$L85144:
; Line 267
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ebx, DWORD PTR _sx$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, ebx
	call	@town_clear_low_buf@4
	mov	esi, DWORD PTR _sy$[ebp]
$L85154:
; Line 270
	mov	eax, DWORD PTR _x$[ebp]
	inc	eax
; Line 271
	dec	edi
	mov	DWORD PTR _xa$[ebp], eax
; Line 272
	add	ebx, 64					; 00000040H
; Line 273
	mov	DWORD PTR _ya$[ebp], edi
	jmp	SHORT $L85143
$L85943:
	mov	ebx, DWORD PTR _sx$[ebp]
	mov	esi, DWORD PTR _sy$[ebp]
$L85143:
; Line 278
	mov	ecx, DWORD PTR _a5$[ebp]
	sub	ecx, DWORD PTR _some_flag$[ebp]
	test	ecx, ecx
	jle	$L85157
; Line 280
	mov	eax, DWORD PTR _xa$[ebp]
; Line 282
	mov	DWORD PTR _a1a$[ebp], ecx
	imul	eax, 112				; 00000070H
	mov	DWORD PTR _v12$[ebp], eax
	mov	DWORD PTR _a5a$[ebp], eax
$L85158:
; Line 284
	test	edi, edi
	jl	$L85161
	cmp	edi, 112				; 00000070H
	jge	$L85161
	mov	eax, DWORD PTR _v12$[ebp]
	test	eax, eax
	jl	$L85161
	cmp	eax, 12544				; 00003100H
	jge	$L85161
	add	eax, edi
	mov	eax, DWORD PTR _dPiece[eax*4]
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	$L85161
; Line 285
	mov	eax, DWORD PTR _gpBuffer
; Line 286
	mov	edx, DWORD PTR _ya$[ebp]
	mov	ecx, DWORD PTR _xa$[ebp]
	lea	edi, DWORD PTR [eax+ebx]
	lea	eax, DWORD PTR _screen_y_times_768[esi*4]
	add	edi, DWORD PTR [eax]
	call	@gendung_get_dpiece_num_from_coord@8
	mov	esi, eax
	shl	esi, 5
	add	esi, OFFSET FLAT:_dpiece_defs_map_1
; Line 287
	and	DWORD PTR _v26$[ebp], 0
$L85164:
; Line 290
	mov	eax, DWORD PTR _v26$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	movzx	ecx, ax
; Line 291
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85169
; Line 292
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85169:
; Line 294
	mov	eax, DWORD PTR _v26$[ebp]
	mov	ax, WORD PTR [esi+eax*2+2]
	movzx	ecx, ax
; Line 295
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85172
; Line 299
	lea	ecx, DWORD PTR [edi+32]
	call	@drawLowerScreen@4
$L85172:
	add	DWORD PTR _v26$[ebp], 2
	sub	edi, 24576				; 00006000H
	cmp	DWORD PTR _v26$[ebp], 16		; 00000010H
	jl	SHORT $L85164
; Line 300
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _gpBuffer
	mov	edx, DWORD PTR _xa$[ebp]
	push	1
	push	eax
	lea	eax, DWORD PTR _screen_y_times_768[eax*4]
	push	ebx
	add	ecx, ebx
	push	DWORD PTR _ya$[ebp]
	add	ecx, DWORD PTR [eax]
	call	@town_draw_clipped_town@24
; Line 301
	mov	eax, DWORD PTR _a5a$[ebp]
; Line 302
	mov	esi, DWORD PTR _sy$[ebp]
	jmp	SHORT $L85174
$L85161:
; Line 303
	mov	eax, DWORD PTR _gpBuffer
	lea	ecx, DWORD PTR [eax+ebx]
	add	ecx, DWORD PTR _screen_y_times_768[esi*4]
	call	@town_clear_low_buf@4
	mov	eax, DWORD PTR _v12$[ebp]
$L85174:
; Line 312
	mov	ecx, DWORD PTR _ya$[ebp]
	inc	DWORD PTR _xa$[ebp]
	add	ebx, 64					; 00000040H
	add	eax, 112				; 00000070H
	lea	edi, DWORD PTR [ecx-1]
	mov	ecx, DWORD PTR _a1a$[ebp]
	dec	DWORD PTR _a1a$[ebp]
	cmp	ecx, 1
	mov	DWORD PTR _v12$[ebp], eax
	jne	SHORT $L85937
; Line 309
	mov	cl, cl
	jmp	SHORT $L85938
$L85937:
	xor	cl, cl
$L85938:
; Line 312
	test	cl, cl
	mov	DWORD PTR _a5a$[ebp], eax
	mov	DWORD PTR _ya$[ebp], edi
	je	$L85158
$L85157:
; Line 315
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	$L85187
; Line 316
	test	edi, edi
	jl	$L85177
	cmp	edi, 112				; 00000070H
	jge	$L85177
	cmp	DWORD PTR _xa$[ebp], 0
	jl	$L85177
	cmp	DWORD PTR _xa$[ebp], 112		; 00000070H
	jge	$L85177
	mov	eax, DWORD PTR _xa$[ebp]
	imul	eax, 112				; 00000070H
	add	eax, edi
	mov	eax, DWORD PTR _dPiece[eax*4]
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85177
; Line 319
	mov	edx, DWORD PTR _ya$[ebp]
	mov	ecx, DWORD PTR _xa$[ebp]
	lea	eax, DWORD PTR _screen_y_times_768[esi*4]
	mov	DWORD PTR _v18$[ebp], eax
	mov	esi, DWORD PTR [eax]
	add	esi, DWORD PTR _gpBuffer
	add	esi, ebx
	call	@gendung_get_dpiece_num_from_coord@8
	mov	edi, eax
	shl	edi, 5
	add	edi, OFFSET FLAT:_dpiece_defs_map_1
; Line 320
	and	DWORD PTR _v27$[ebp], 0
$L85180:
; Line 323
	mov	eax, DWORD PTR _v27$[ebp]
	mov	ax, WORD PTR [edi+eax*2]
	movzx	ecx, ax
; Line 324
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85185
; Line 325
	mov	ecx, esi
	call	@drawLowerScreen@4
$L85185:
; Line 326
	add	DWORD PTR _v27$[ebp], 2
; Line 327
	sub	esi, 24576				; 00006000H
; Line 328
	cmp	DWORD PTR _v27$[ebp], 16		; 00000010H
	jl	SHORT $L85180
; Line 329
	mov	eax, DWORD PTR _v18$[ebp]
	push	0
	push	DWORD PTR _sy$[ebp]
	mov	edx, DWORD PTR _xa$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _gpBuffer
	push	ebx
	push	DWORD PTR _ya$[ebp]
	add	ecx, ebx
	call	@town_draw_clipped_town@24
; Line 330
	jmp	SHORT $L85187
$L85177:
; Line 331
	mov	ecx, DWORD PTR _screen_y_times_768[esi*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, ebx
	call	@town_clear_low_buf@4
$L85187:
	pop	edi
	pop	esi
	pop	ebx
; Line 334
	leave
	ret	16					; 00000010H
@town_draw_lower@24 ENDP
_TEXT	ENDS
PUBLIC	@town_draw_clipped_e_flag_2@28
PUBLIC	@town_draw_clipped_town_2@32
; Function compile flags: /Ogsy
;	COMDAT @town_draw_clipped_e_flag_2@28
_TEXT	SEGMENT
_buffer$ = -8
_x$ = -4
_y$ = 8
_a4$ = 12
_a5$ = 16
_sx$ = 20
_sy$ = 24
_i$ = 12
@town_draw_clipped_e_flag_2@28 PROC NEAR		; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 338
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
; Line 343
	mov	ebx, DWORD PTR _a4$[ebp]
	test	ebx, ebx
	push	edi
	mov	DWORD PTR _x$[ebp], edx
	mov	DWORD PTR _buffer$[ebp], ecx
	jne	SHORT $L85207
; Line 344
	mov	edi, ecx
; Line 345
	jmp	SHORT $L85208
$L85207:
; Line 346
	lea	edi, DWORD PTR [ebx+ebx*2]
	shl	edi, 13					; 0000000dH
	add	edi, ecx
$L85208:
; Line 348
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	esi
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
	add	eax, OFFSET FLAT:_dpiece_defs_map_1
; Line 350
	and	DWORD PTR _i$[ebp], 0
	lea	esi, DWORD PTR [eax+6]
$L85209:
; Line 351
	cmp	ebx, DWORD PTR _i$[ebp]
	jg	SHORT $L85214
; Line 352
	movzx	eax, WORD PTR [esi-2]
; Line 353
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85213
; Line 354
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85213:
; Line 355
	movzx	eax, WORD PTR [esi]
; Line 356
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85214
	lea	ecx, DWORD PTR [edi+32]
; Line 357
	call	@drawLowerScreen@4
$L85214:
; Line 359
	sub	edi, 24576				; 00006000H
	inc	DWORD PTR _i$[ebp]
	add	esi, 4
	cmp	DWORD PTR _i$[ebp], 6
	jl	SHORT $L85209
; Line 362
	cmp	DWORD PTR _a5$[ebp], 8
	pop	esi
	jge	SHORT $L85215
; Line 363
	push	0
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _sx$[ebp]
	push	DWORD PTR _a5$[ebp]
	push	ebx
	push	DWORD PTR _y$[ebp]
	call	@town_draw_clipped_town_2@32
$L85215:
	pop	edi
	pop	ebx
; Line 364
	leave
	ret	20					; 00000014H
@town_draw_clipped_e_flag_2@28 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @town_draw_clipped_town_2@32
_TEXT	SEGMENT
_x$ = -8
_y$ = -4
_a3$ = 8
_a4$ = 12
_a5$ = 16
_sx$ = 20
_sy$ = 24
_some_flag$ = 28
@town_draw_clipped_town_2@32 PROC NEAR			; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 368
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	eax, edx
	push	ebx
	mov	DWORD PTR _y$[ebp], eax
; Line 395
	imul	eax, 112				; 00000070H
	push	esi
; Line 396
	mov	esi, DWORD PTR _a3$[ebp]
	mov	DWORD PTR _x$[ebp], ecx
	push	edi
	lea	ecx, DWORD PTR [eax+esi]
; Line 399
	push	112					; 00000070H
	mov	DWORD PTR -12+[ebp], ecx
	mov	ebx, ecx
	xor	edx, edx
	pop	ecx
	div	ecx
	imul	eax, 112				; 00000070H
	mov	al, BYTE PTR _dItem[eax+esi]
; Line 400
	test	al, al
	je	SHORT $L85258
; Line 401
	dec	al
; Line 403
	mov	edi, DWORD PTR _sx$[ebp]
	movsx	esi, al
	imul	esi, 368				; 00000170H
	sub	edi, DWORD PTR _item[esi+40]
; Line 404
	cmp	al, BYTE PTR _pcursitem
	jne	SHORT $L85259
; Line 413
	push	8
	mov	edx, edi
	push	DWORD PTR _a5$[ebp]
	mov	cl, -75					; ffffffb5H
	push	DWORD PTR _item[esi+36]
	push	DWORD PTR _item[esi+32]
	push	DWORD PTR _item[esi+24]
	push	DWORD PTR _sy$[ebp]
	call	@CelDrawHdrClrHL@32
$L85259:
; Line 414
	push	8
	mov	edx, DWORD PTR _sy$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, edi
	push	DWORD PTR _item[esi+36]
	push	DWORD PTR _item[esi+32]
	push	DWORD PTR _item[esi+24]
	call	@Cel2DrawHdrOnly@28
$L85258:
; Line 416
	test	BYTE PTR _dFlags[ebx], 16		; 00000010H
	je	SHORT $L85262
; Line 417
	mov	ecx, DWORD PTR _x$[ebp]
	or	eax, -1
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _y$[ebp]
; Line 418
	mov	edi, DWORD PTR _sx$[ebp]
	sub	eax, DWORD PTR _dMonster[ecx*4-4]
	mov	esi, eax
	imul	esi, 232				; 000000e8H
	sub	edi, DWORD PTR _towner[esi+68]
; Line 419
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L85263
; Line 428
	push	8
	mov	edx, edi
	push	DWORD PTR _a5$[ebp]
	mov	cl, -90					; ffffffa6H
	push	DWORD PTR _towner[esi+64]
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	push	DWORD PTR _sy$[ebp]
	call	@CelDrawHdrClrHL@32
$L85263:
; Line 429
	push	8
	mov	edx, DWORD PTR _sy$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, edi
	push	DWORD PTR _towner[esi+64]
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	call	@Cel2DrawHdrOnly@28
$L85262:
; Line 431
	mov	eax, DWORD PTR _dMonster[ebx*4]
; Line 432
	test	eax, eax
	jle	SHORT $L85266
; Line 433
	dec	eax
; Line 435
	mov	edi, DWORD PTR _sx$[ebp]
	mov	esi, eax
	imul	esi, 232				; 000000e8H
	sub	edi, DWORD PTR _towner[esi+68]
; Line 436
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L85267
; Line 445
	push	8
	mov	edx, edi
	push	DWORD PTR _a5$[ebp]
	mov	cl, -90					; ffffffa6H
	push	DWORD PTR _towner[esi+64]
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	push	DWORD PTR _sy$[ebp]
	call	@CelDrawHdrClrHL@32
$L85267:
; Line 446
	push	8
	mov	edx, DWORD PTR _sy$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, edi
	push	DWORD PTR _towner[esi+64]
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	call	@Cel2DrawHdrOnly@28
$L85266:
; Line 448
	test	BYTE PTR _dFlags[ebx], 32		; 00000020H
	je	$L85270
; Line 449
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	imul	ecx, 112				; 00000070H
	or	al, -1
	sub	al, BYTE PTR _dPlayer[ecx+edx-1]
; Line 450
	movsx	esi, al
; Line 451
	imul	esi, 21720				; 000054d8H
; Line 452
	mov	edi, DWORD PTR _plr[esi+96]
	mov	ebx, DWORD PTR _plr[esi+100]
	sub	edi, DWORD PTR _plr[esi+148]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 453
	cmp	al, BYTE PTR _pcursplr
	jne	SHORT $L85271
; Line 454
	push	8
	mov	edx, edi
	push	DWORD PTR _a5$[ebp]
	mov	cl, -91					; ffffffa5H
	push	DWORD PTR _plr[esi+144]
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	push	ebx
	call	@Cl2DecodeClrHL@32
$L85271:
; Line 455
	push	8
	mov	edx, ebx
	push	DWORD PTR _a5$[ebp]
	mov	ecx, edi
	push	DWORD PTR _plr[esi+144]
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	call	@Cl2DecodeFrm4@28
; Line 456
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	SHORT $L85274
	cmp	DWORD PTR _plr[esi+152], 0
	je	SHORT $L85274
; Line 457
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	push	eax
	mov	eax, DWORD PTR _a3$[ebp]
	push	DWORD PTR _a5$[ebp]
	inc	eax
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@town_draw_clipped_e_flag_2@28
$L85274:
; Line 458
	mov	ebx, DWORD PTR -12+[ebp]
$L85270:
; Line 460
	test	BYTE PTR _dFlags[ebx], 4
	je	SHORT $L85276
; Line 461
	push	1
	push	8
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _a3$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	DWORD PTR _sx$[ebp]
	call	@DrawDeadPlayer@28
$L85276:
; Line 462
	mov	al, BYTE PTR _dPlayer[ebx]
; Line 463
	test	al, al
	jle	$L85277
; Line 464
	dec	al
; Line 465
	movsx	esi, al
; Line 466
	imul	esi, 21720				; 000054d8H
; Line 467
	mov	edi, DWORD PTR _plr[esi+96]
	mov	ebx, DWORD PTR _plr[esi+100]
	sub	edi, DWORD PTR _plr[esi+148]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 468
	cmp	al, BYTE PTR _pcursplr
	jne	SHORT $L85278
; Line 469
	push	8
	mov	edx, edi
	push	DWORD PTR _a5$[ebp]
	mov	cl, -91					; ffffffa5H
	push	DWORD PTR _plr[esi+144]
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	push	ebx
	call	@Cl2DecodeClrHL@32
$L85278:
; Line 470
	push	8
	mov	edx, ebx
	push	DWORD PTR _a5$[ebp]
	mov	ecx, edi
	push	DWORD PTR _plr[esi+144]
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	call	@Cl2DecodeFrm4@28
; Line 471
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	SHORT $L85281
	cmp	DWORD PTR _plr[esi+152], 0
	je	SHORT $L85281
; Line 472
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	push	eax
	mov	eax, DWORD PTR _a3$[ebp]
	push	DWORD PTR _a5$[ebp]
	inc	eax
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@town_draw_clipped_e_flag_2@28
$L85281:
; Line 473
	mov	ebx, DWORD PTR -12+[ebp]
$L85277:
; Line 475
	test	BYTE PTR _dFlags[ebx], 1
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $L85283
; Line 476
	push	0
	push	8
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _a3$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	DWORD PTR _sx$[ebp]
	call	@DrawClippedMissile@28
$L85283:
; Line 477
	leave
	ret	24					; 00000018H
@town_draw_clipped_town_2@32 ENDP
_TEXT	ENDS
PUBLIC	@town_draw_lower_2@28
; Function compile flags: /Ogsy
;	COMDAT @town_draw_lower_2@28
_TEXT	SEGMENT
_x$ = -12
_sx$ = 8
_sy$ = 12
_a5$ = 16
_a6$ = 20
_some_flag$ = 24
_v24$ = -12
_a1$ = -8
_a1a$ = 8
_a1b$ = 24
_ya$ = -8
_xa$ = -4
_sxa$ = 8
_sxb$ = 16
_sxc$ = 8
_a5a$ = -16
@town_draw_lower_2@28 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 513
	cmp	DWORD PTR _some_flag$[ebp], 0
	push	ebx
	mov	ebx, edx
	push	esi
	push	edi
	mov	DWORD PTR _x$[ebp], ecx
	mov	DWORD PTR _ya$[ebp], ebx
	mov	DWORD PTR _xa$[ebp], ecx
	je	$L85326
; Line 514
	test	ebx, ebx
	jl	$L85328
	cmp	ebx, 112				; 00000070H
	jge	$L85328
	test	ecx, ecx
	jl	$L85328
	cmp	ecx, 112				; 00000070H
	jge	$L85328
; Line 518
	imul	ecx, 112				; 00000070H
	add	ecx, ebx
	mov	eax, DWORD PTR _dPiece[ecx*4]
; Line 519
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	$L85328
; Line 521
	mov	eax, DWORD PTR _sy$[ebp]
; Line 522
	mov	edi, DWORD PTR _sx$[ebp]
; Line 524
	mov	ecx, DWORD PTR _x$[ebp]
	and	DWORD PTR _sxa$[ebp], 0
	lea	esi, DWORD PTR _screen_y_times_768[eax*4]
	mov	eax, DWORD PTR [esi]
	add	eax, DWORD PTR _gpBuffer
	lea	eax, DWORD PTR [eax+edi-24544]
	mov	DWORD PTR _a1$[ebp], eax
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
	add	eax, OFFSET FLAT:_dpiece_defs_map_1+6
	lea	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR -4+[ebp], ecx
$L85332:
; Line 527
	mov	ecx, DWORD PTR _a6$[ebp]
	cmp	ecx, DWORD PTR _sxa$[ebp]
	jg	SHORT $L85337
; Line 528
	movzx	eax, WORD PTR [eax]
; Line 529
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85337
; Line 530
	mov	ecx, DWORD PTR _a1$[ebp]
	call	@drawLowerScreen@4
$L85337:
; Line 532
	sub	DWORD PTR _a1$[ebp], 24576		; 00006000H
; Line 533
	inc	DWORD PTR _sxa$[ebp]
; Line 534
	mov	eax, DWORD PTR -4+[ebp]
; Line 535
	add	DWORD PTR -4+[ebp], 4
; Line 536
	cmp	DWORD PTR _sxa$[ebp], 7
	jl	SHORT $L85332
; Line 537
	mov	ecx, DWORD PTR _a6$[ebp]
	lea	eax, DWORD PTR [ecx+ecx+2]
	cmp	eax, 8
	jge	SHORT $LABEL_16$85340
; Line 538
	push	0
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	edi
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [esi]
	add	ecx, DWORD PTR _gpBuffer
	push	ebx
	add	ecx, edi
	call	@town_draw_clipped_town_2@32
; Line 539
	jmp	SHORT $LABEL_16$85340
$L85328:
; Line 542
	mov	eax, DWORD PTR _sy$[ebp]
	mov	edi, DWORD PTR _sx$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, edi
	call	@town_clear_low_buf@4
$LABEL_16$85340:
; Line 545
	mov	eax, DWORD PTR _x$[ebp]
	inc	eax
; Line 546
	dec	ebx
	mov	DWORD PTR _ya$[ebp], ebx
	mov	DWORD PTR _xa$[ebp], eax
; Line 547
	lea	ebx, DWORD PTR [edi+64]
; Line 548
	jmp	SHORT $LABEL_18$85342
$L85326:
; Line 550
	mov	ebx, DWORD PTR _sx$[ebp]
$LABEL_18$85342:
; Line 554
	mov	ecx, DWORD PTR _a5$[ebp]
	sub	ecx, DWORD PTR _some_flag$[ebp]
	test	ecx, ecx
	jle	$L85343
; Line 555
	mov	eax, DWORD PTR _sy$[ebp]
; Line 558
	mov	DWORD PTR _v24$[ebp], ecx
	lea	edi, DWORD PTR _screen_y_times_768[eax*4]
	mov	eax, DWORD PTR _xa$[ebp]
	imul	eax, 112				; 00000070H
	mov	esi, eax
	mov	DWORD PTR _a5a$[ebp], eax
$L85344:
; Line 560
	mov	edx, DWORD PTR _ya$[ebp]
	test	edx, edx
	jl	$L85347
	cmp	edx, 112				; 00000070H
	jge	$L85347
	test	esi, esi
	jl	$L85347
	cmp	esi, 12544				; 00003100H
	jge	$L85347
	lea	eax, DWORD PTR [esi+edx]
	mov	eax, DWORD PTR _dPiece[eax*4]
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	$L85347
; Line 561
	mov	eax, DWORD PTR [edi]
; Line 563
	mov	ecx, DWORD PTR _xa$[ebp]
	add	eax, DWORD PTR _gpBuffer
	and	DWORD PTR _sxb$[ebp], 0
	lea	eax, DWORD PTR [eax+ebx-24576]
	mov	DWORD PTR _a1a$[ebp], eax
	call	@gendung_get_dpiece_num_from_coord@8
	mov	esi, eax
	shl	esi, 5
	add	esi, OFFSET FLAT:_dpiece_defs_map_1+6
$L85349:
; Line 565
	mov	eax, DWORD PTR _a6$[ebp]
	cmp	eax, DWORD PTR _sxb$[ebp]
	jg	SHORT $L85358
; Line 567
	mov	ax, WORD PTR [esi-2]
	movzx	ecx, ax
; Line 568
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85355
; Line 569
	mov	ecx, DWORD PTR _a1a$[ebp]
	call	@drawLowerScreen@4
$L85355:
; Line 571
	mov	ax, WORD PTR [esi]
	movzx	ecx, ax
; Line 572
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85358
; Line 578
	mov	eax, DWORD PTR _a1a$[ebp]
	lea	ecx, DWORD PTR [eax+32]
	call	@drawLowerScreen@4
$L85358:
	sub	DWORD PTR _a1a$[ebp], 24576		; 00006000H
	inc	DWORD PTR _sxb$[ebp]
	add	esi, 4
	cmp	DWORD PTR _sxb$[ebp], 7
	jl	SHORT $L85349
; Line 579
	mov	ecx, DWORD PTR _a6$[ebp]
	lea	eax, DWORD PTR [ecx+ecx+2]
; Line 580
	cmp	eax, 8
	jge	SHORT $L85359
; Line 581
	push	1
	mov	edx, DWORD PTR _xa$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [eax+eax*2]
	push	ecx
	mov	ecx, DWORD PTR [edi]
	push	DWORD PTR _ya$[ebp]
	shl	eax, 12					; 0000000cH
	sub	ecx, eax
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, ebx
	call	@town_draw_clipped_town_2@32
$L85359:
; Line 582
	mov	esi, DWORD PTR _a5a$[ebp]
; Line 583
	jmp	SHORT $L85361
$L85347:
; Line 584
	mov	ecx, DWORD PTR [edi]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, ebx
	call	@town_clear_low_buf@4
$L85361:
; Line 586
	inc	DWORD PTR _xa$[ebp]
; Line 590
	mov	eax, DWORD PTR _v24$[ebp]
	add	esi, 112				; 00000070H
	dec	DWORD PTR _ya$[ebp]
	add	ebx, 64					; 00000040H
	dec	DWORD PTR _v24$[ebp]
	cmp	eax, 1
	jne	SHORT $L85961
	mov	al, al
	jmp	SHORT $L85962
$L85961:
	xor	al, al
$L85962:
; Line 592
	test	al, al
	mov	DWORD PTR _a5a$[ebp], esi
	je	$L85344
$L85343:
; Line 595
	xor	ecx, ecx
	cmp	DWORD PTR _some_flag$[ebp], ecx
	je	$L85375
; Line 596
	mov	edx, DWORD PTR _ya$[ebp]
	cmp	edx, ecx
	jl	$L85364
	cmp	edx, 112				; 00000070H
	jge	$L85364
	cmp	DWORD PTR _xa$[ebp], ecx
	jl	$L85364
	cmp	DWORD PTR _xa$[ebp], 112		; 00000070H
	jge	$L85364
	mov	eax, DWORD PTR _xa$[ebp]
	imul	eax, 112				; 00000070H
	add	eax, edx
	mov	eax, DWORD PTR _dPiece[eax*4]
	cmp	eax, ecx
	mov	DWORD PTR _level_cel_block, eax
	je	$L85364
; Line 597
	mov	eax, DWORD PTR _sy$[ebp]
; Line 599
	mov	DWORD PTR _sxc$[ebp], ecx
; Line 600
	mov	ecx, DWORD PTR _xa$[ebp]
	lea	edi, DWORD PTR _screen_y_times_768[eax*4]
	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR _gpBuffer
	lea	eax, DWORD PTR [eax+ebx-24576]
	mov	DWORD PTR _a1b$[ebp], eax
	call	@gendung_get_dpiece_num_from_coord@8
	mov	esi, eax
	shl	esi, 5
	add	esi, OFFSET FLAT:_dpiece_defs_map_1+4
$L85366:
; Line 602
	mov	eax, DWORD PTR _a6$[ebp]
	cmp	eax, DWORD PTR _sxc$[ebp]
	jg	SHORT $L85372
; Line 604
	mov	ax, WORD PTR [esi]
	movzx	ecx, ax
; Line 605
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85372
; Line 606
	mov	ecx, DWORD PTR _a1b$[ebp]
	call	@drawLowerScreen@4
$L85372:
; Line 608
	sub	DWORD PTR _a1b$[ebp], 24576		; 00006000H
; Line 609
	inc	DWORD PTR _sxc$[ebp]
; Line 610
	add	esi, 4
; Line 611
	cmp	DWORD PTR _sxc$[ebp], 7
	jl	SHORT $L85366
; Line 612
	mov	ecx, DWORD PTR _a6$[ebp]
	lea	eax, DWORD PTR [ecx+ecx+2]
	cmp	eax, 8
	jge	SHORT $L85375
; Line 613
	push	0
	mov	edx, DWORD PTR _xa$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	ebx
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [edi]
	add	ecx, DWORD PTR _gpBuffer
	push	DWORD PTR _ya$[ebp]
	add	ecx, ebx
	call	@town_draw_clipped_town_2@32
; Line 614
	jmp	SHORT $L85375
$L85364:
; Line 615
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, ebx
	call	@town_clear_low_buf@4
$L85375:
	pop	edi
	pop	esi
	pop	ebx
; Line 618
	leave
	ret	20					; 00000014H
@town_draw_lower_2@28 ENDP
_TEXT	ENDS
PUBLIC	@town_draw_e_flag@28
PUBLIC	@town_draw_town_all@32
EXTRN	@drawUpperScreen@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @town_draw_e_flag@28
_TEXT	SEGMENT
_buffer$ = -8
_y$ = 8
_a4$ = 12
_dir$ = 16
_sx$ = 20
_sy$ = 24
_buf$ = -4
@town_draw_e_flag@28 PROC NEAR				; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 622
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	mov	ebx, edx
; Line 628
	mov	edx, DWORD PTR _y$[ebp]
	push	esi
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	DWORD PTR _buf$[ebp], ecx
	push	edi
	mov	ecx, ebx
	call	@gendung_get_dpiece_num_from_coord@8
	mov	esi, eax
	shl	esi, 5
	add	esi, OFFSET FLAT:_dpiece_defs_map_1
; Line 630
	xor	edi, edi
$L85395:
; Line 631
	cmp	DWORD PTR _a4$[ebp], edi
	jl	SHORT $L85400
; Line 632
	movzx	eax, WORD PTR [esi+edi*4]
; Line 633
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85399
; Line 634
	mov	ecx, DWORD PTR _buf$[ebp]
	call	@drawUpperScreen@4
$L85399:
; Line 635
	movzx	eax, WORD PTR [esi+edi*4+2]
; Line 636
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85400
; Line 637
	mov	eax, DWORD PTR _buf$[ebp]
	lea	ecx, DWORD PTR [eax+32]
	call	@drawUpperScreen@4
$L85400:
; Line 639
	sub	DWORD PTR _buf$[ebp], 24576		; 00006000H
	inc	edi
	cmp	edi, 7
	jl	SHORT $L85395
; Line 642
	push	0
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _sy$[ebp]
	mov	edx, ebx
	push	DWORD PTR _sx$[ebp]
	push	DWORD PTR _dir$[ebp]
	push	DWORD PTR _a4$[ebp]
	push	DWORD PTR _y$[ebp]
	call	@town_draw_town_all@32
	pop	edi
	pop	esi
	pop	ebx
; Line 643
	leave
	ret	20					; 00000014H
@town_draw_e_flag@28 ENDP
_TEXT	ENDS
EXTRN	@DrawMissile@28:NEAR
EXTRN	@CelDrawHdrOnly@28:NEAR
EXTRN	@CelDecodeClr@32:NEAR
EXTRN	@Cl2DecodeFrm1@28:NEAR
EXTRN	@Cl2DecodeFrm2@32:NEAR
; Function compile flags: /Ogsy
;	COMDAT @town_draw_town_all@32
_TEXT	SEGMENT
_buffer$ = -12
_x$ = -8
_y$ = 8
_a4$ = 12
_dir$ = 16
_sx$ = 20
_sy$ = 24
_some_flag$ = 28
@town_draw_town_all@32 PROC NEAR			; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 647
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _x$[ebp], edx
; Line 652
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _y$[ebp]
	push	ebx
	push	esi
	push	edi
	lea	ebx, DWORD PTR [edx+eax]
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	DWORD PTR -4+[ebp], ebx
	mov	al, BYTE PTR _dItem[ebx]
	test	al, al
	je	SHORT $L85423
; Line 653
	dec	al
; Line 654
	mov	edi, DWORD PTR _sx$[ebp]
	movsx	esi, al
	imul	esi, 368				; 00000170H
	sub	edi, DWORD PTR _item[esi+40]
; Line 655
	cmp	al, BYTE PTR _pcursitem
	jne	SHORT $L85424
; Line 656
	push	DWORD PTR _dir$[ebp]
	mov	edx, edi
	mov	cl, 181					; 000000b5H
	push	0
	push	DWORD PTR _item[esi+36]
	push	DWORD PTR _item[esi+32]
	push	DWORD PTR _item[esi+24]
	push	DWORD PTR _sy$[ebp]
	call	@CelDecodeClr@32
$L85424:
; Line 657
	push	DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, edi
	push	0
	push	DWORD PTR _item[esi+36]
	push	DWORD PTR _item[esi+32]
	push	DWORD PTR _item[esi+24]
	call	@CelDrawHdrOnly@28
$L85423:
; Line 659
	test	BYTE PTR _dFlags[ebx], 16		; 00000010H
	je	SHORT $L85427
; Line 660
	or	eax, -1
; Line 661
	mov	edi, DWORD PTR _sx$[ebp]
	sub	eax, DWORD PTR _dMonster[ebx*4-4]
	mov	esi, eax
	imul	esi, 232				; 000000e8H
	sub	edi, DWORD PTR _towner[esi+68]
; Line 662
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L85428
; Line 663
	push	DWORD PTR _dir$[ebp]
	mov	edx, edi
	mov	cl, 166					; 000000a6H
	push	0
	push	DWORD PTR _towner[esi+64]
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	push	DWORD PTR _sy$[ebp]
	call	@CelDecodeClr@32
$L85428:
; Line 664
	push	DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, edi
	push	0
	push	DWORD PTR _towner[esi+64]
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	call	@CelDrawHdrOnly@28
$L85427:
; Line 666
	mov	eax, DWORD PTR _dMonster[ebx*4]
	test	eax, eax
	jle	SHORT $L85431
; Line 667
	dec	eax
; Line 668
	mov	edi, DWORD PTR _sx$[ebp]
	mov	esi, eax
	imul	esi, 232				; 000000e8H
	sub	edi, DWORD PTR _towner[esi+68]
; Line 669
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L85432
; Line 670
	push	DWORD PTR _dir$[ebp]
	mov	edx, edi
	mov	cl, 166					; 000000a6H
	push	0
	push	DWORD PTR _towner[esi+64]
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	push	DWORD PTR _sy$[ebp]
	call	@CelDecodeClr@32
$L85432:
; Line 671
	push	DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, edi
	push	0
	push	DWORD PTR _towner[esi+64]
	push	DWORD PTR _towner[esi+52]
	push	DWORD PTR _towner[esi+36]
	call	@CelDrawHdrOnly@28
$L85431:
; Line 673
	test	BYTE PTR _dFlags[ebx], 32		; 00000020H
	je	$L85439
; Line 674
	or	al, -1
	sub	al, BYTE PTR _dPlayer[ebx-1]
; Line 675
	movsx	esi, al
	imul	esi, 21720				; 000054d8H
; Line 676
	mov	edi, DWORD PTR _plr[esi+96]
	mov	ebx, DWORD PTR _plr[esi+100]
	sub	edi, DWORD PTR _plr[esi+148]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 677
	cmp	al, BYTE PTR _pcursplr
	jne	SHORT $L85436
; Line 678
	push	DWORD PTR _dir$[ebp]
	mov	edx, edi
	mov	cl, -91					; ffffffa5H
	push	0
	push	DWORD PTR _plr[esi+144]
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	push	ebx
	call	@Cl2DecodeFrm2@32
$L85436:
; Line 679
	push	DWORD PTR _dir$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	push	0
	push	DWORD PTR _plr[esi+144]
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	call	@Cl2DecodeFrm1@28
; Line 680
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	SHORT $L85980
	cmp	DWORD PTR _plr[esi+152], 0
	je	SHORT $L85980
; Line 681
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	push	DWORD PTR _dir$[ebp]
	inc	eax
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@town_draw_e_flag@28
$L85980:
	mov	ebx, DWORD PTR -4+[ebp]
$L85439:
; Line 683
	test	BYTE PTR _dFlags[ebx], 4
	je	SHORT $L85440
; Line 684
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	DWORD PTR _dir$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	0
	push	DWORD PTR _sy$[ebp]
	push	DWORD PTR _sx$[ebp]
	call	@DrawDeadPlayer@28
$L85440:
; Line 685
	mov	al, BYTE PTR _dPlayer[ebx]
	test	al, al
	jle	$L85445
; Line 686
	dec	al
; Line 687
	movsx	esi, al
	imul	esi, 21720				; 000054d8H
; Line 688
	mov	edi, DWORD PTR _plr[esi+96]
	mov	ebx, DWORD PTR _plr[esi+100]
	sub	edi, DWORD PTR _plr[esi+148]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 689
	cmp	al, BYTE PTR _pcursplr
	jne	SHORT $L85442
; Line 690
	push	DWORD PTR _dir$[ebp]
	mov	edx, edi
	mov	cl, -91					; ffffffa5H
	push	0
	push	DWORD PTR _plr[esi+144]
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	push	ebx
	call	@Cl2DecodeFrm2@32
$L85442:
; Line 691
	push	DWORD PTR _dir$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	push	0
	push	DWORD PTR _plr[esi+144]
	push	DWORD PTR _plr[esi+140]
	push	DWORD PTR _plr[esi+124]
	call	@Cl2DecodeFrm1@28
; Line 692
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	SHORT $L85982
	cmp	DWORD PTR _plr[esi+152], 0
	je	SHORT $L85982
; Line 693
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	push	DWORD PTR _dir$[ebp]
	inc	eax
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@town_draw_e_flag@28
$L85982:
	mov	ebx, DWORD PTR -4+[ebp]
$L85445:
; Line 695
	test	BYTE PTR _dFlags[ebx], 1
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $L85446
; Line 696
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	DWORD PTR _dir$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	0
	push	DWORD PTR _sy$[ebp]
	push	DWORD PTR _sx$[ebp]
	call	@DrawMissile@28
$L85446:
; Line 697
	leave
	ret	24					; 00000018H
@town_draw_town_all@32 ENDP
_TEXT	ENDS
PUBLIC	@town_draw_upper@28
; Function compile flags: /Ogsy
;	COMDAT @town_draw_upper@28
_TEXT	SEGMENT
_y$ = -16
_sx$ = 8
_sy$ = 12
_a5$ = 16
_a6$ = 20
_some_flag$ = 24
_v7$ = 8
_a1$ = -8
_a1a$ = 16
_dir$ = -12
_ya$ = -8
_xa$ = -4
_sxa$ = 8
_sxb$ = 8
_sxc$ = 8
_a5a$ = -16
@town_draw_upper@28 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 702
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 736
	mov	eax, DWORD PTR _a6$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
; Line 737
	push	8
	mov	edx, ecx
	lea	eax, DWORD PTR [eax+eax+2]
	pop	ecx
	mov	DWORD PTR _y$[ebp], edi
	cmp	eax, ecx
	mov	DWORD PTR _xa$[ebp], edx
	mov	ebx, edi
	mov	DWORD PTR _ya$[ebp], edi
	mov	DWORD PTR _dir$[ebp], eax
	jle	SHORT $L85491
; Line 738
	mov	DWORD PTR _dir$[ebp], ecx
$L85491:
; Line 739
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	$L85492
; Line 740
	test	edi, edi
	jl	$L85494
	cmp	edi, 112				; 00000070H
	jge	$L85494
	test	edx, edx
	jl	$L85494
	cmp	edx, 112				; 00000070H
	jge	$L85494
; Line 745
	imul	edx, 112				; 00000070H
	add	edx, edi
	mov	eax, DWORD PTR _dPiece[edx*4]
; Line 747
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
; Line 749
	je	$L85494
; Line 750
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ebx, DWORD PTR _sx$[ebp]
; Line 751
	and	DWORD PTR _sxa$[ebp], 0
; Line 752
	mov	edx, edi
	lea	esi, DWORD PTR _screen_y_times_768[eax*4]
	mov	eax, DWORD PTR _gpBuffer
	add	eax, ebx
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+ecx+32]
	mov	ecx, DWORD PTR _xa$[ebp]
	mov	DWORD PTR _a1$[ebp], eax
	call	@gendung_get_dpiece_num_from_coord@8
	mov	edi, eax
	shl	edi, 5
	add	edi, OFFSET FLAT:_dpiece_defs_map_1+2
$L85498:
; Line 754
	mov	eax, DWORD PTR _a6$[ebp]
	cmp	eax, DWORD PTR _sxa$[ebp]
	jl	SHORT $L85504
; Line 756
	mov	ax, WORD PTR [edi]
	movzx	ecx, ax
; Line 757
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85504
; Line 758
	mov	ecx, DWORD PTR _a1$[ebp]
	call	@drawUpperScreen@4
$L85504:
; Line 760
	sub	DWORD PTR _a1$[ebp], 24576		; 00006000H
; Line 761
	inc	DWORD PTR _sxa$[ebp]
; Line 762
	add	edi, 4
; Line 763
	cmp	DWORD PTR _sxa$[ebp], 7
	jl	SHORT $L85498
; Line 764
	push	0
	mov	eax, DWORD PTR _gpBuffer
	push	DWORD PTR _sy$[ebp]
	mov	edx, DWORD PTR _xa$[ebp]
	lea	ecx, DWORD PTR [eax+ebx]
	push	ebx
	add	ecx, DWORD PTR [esi]
	push	DWORD PTR _dir$[ebp]
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _y$[ebp]
	call	@town_draw_town_all@32
; Line 766
	mov	edi, DWORD PTR _y$[ebp]
	jmp	SHORT $LABEL_17$85507
$L85494:
; Line 769
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ebx, DWORD PTR _sx$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, ebx
	call	@town_clear_upper_buf@4
$LABEL_17$85507:
; Line 771
	mov	eax, DWORD PTR _xa$[ebp]
; Line 773
	lea	esi, DWORD PTR [ebx+64]
	inc	eax
	dec	edi
	mov	DWORD PTR _xa$[ebp], eax
	mov	DWORD PTR _v7$[ebp], edi
	mov	DWORD PTR _ya$[ebp], edi
; Line 774
	mov	ebx, edi
	jmp	SHORT $LABEL_19$85509
$L85492:
; Line 776
	mov	esi, DWORD PTR _sx$[ebp]
$LABEL_19$85509:
; Line 778
	mov	eax, DWORD PTR _a5$[ebp]
	sub	eax, DWORD PTR _some_flag$[ebp]
	test	eax, eax
	jle	$L85514
; Line 779
	mov	DWORD PTR _a1a$[ebp], eax
; Line 780
	mov	eax, DWORD PTR _xa$[ebp]
	imul	eax, 112				; 00000070H
	mov	edi, eax
; Line 781
	mov	DWORD PTR _a5a$[ebp], eax
$L85512:
; Line 783
	test	ebx, ebx
	jl	$L85516
	cmp	ebx, 112				; 00000070H
	jge	$L85516
	test	edi, edi
	jl	$L85516
	cmp	edi, 12544				; 00003100H
	jge	$L85516
; Line 786
	lea	eax, DWORD PTR [edi+ebx]
	mov	ecx, DWORD PTR _dPiece[eax*4]
; Line 789
	mov	eax, DWORD PTR _gpBuffer
	test	ecx, ecx
	mov	DWORD PTR _level_cel_block, ecx
; Line 790
	je	$L85518
; Line 792
	mov	edx, DWORD PTR _ya$[ebp]
	mov	ecx, DWORD PTR _xa$[ebp]
	lea	ebx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR _sy$[ebp]
	lea	eax, DWORD PTR _screen_y_times_768[eax*4]
	add	ebx, DWORD PTR [eax]
	call	@gendung_get_dpiece_num_from_coord@8
	mov	edi, eax
	shl	edi, 5
	add	edi, OFFSET FLAT:_dpiece_defs_map_1
; Line 793
	and	DWORD PTR _sxb$[ebp], 0
$L85521:
; Line 795
	mov	eax, DWORD PTR _sxb$[ebp]
	cmp	DWORD PTR _a6$[ebp], eax
	jl	SHORT $L85530
; Line 797
	mov	ax, WORD PTR [edi+eax*4]
	movzx	ecx, ax
; Line 798
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85527
; Line 799
	mov	ecx, ebx
	call	@drawUpperScreen@4
$L85527:
; Line 801
	mov	eax, DWORD PTR _sxb$[ebp]
	mov	ax, WORD PTR [edi+eax*4+2]
	movzx	ecx, ax
; Line 802
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85530
; Line 807
	lea	ecx, DWORD PTR [ebx+32]
	call	@drawUpperScreen@4
$L85530:
	sub	ebx, 24576				; 00006000H
	inc	DWORD PTR _sxb$[ebp]
	cmp	DWORD PTR _sxb$[ebp], 7
	jl	SHORT $L85521
; Line 808
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _gpBuffer
	push	1
	mov	ebx, DWORD PTR _ya$[ebp]
	push	eax
	push	esi
	push	DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR _xa$[ebp]
	lea	eax, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, esi
	push	DWORD PTR _a6$[ebp]
	add	ecx, DWORD PTR [eax]
	push	ebx
	call	@town_draw_town_all@32
; Line 809
	mov	edi, DWORD PTR _a5a$[ebp]
; Line 810
	mov	DWORD PTR _v7$[ebp], ebx
; Line 811
	jmp	SHORT $LABEL_36$85532
$L85516:
; Line 784
	mov	eax, DWORD PTR _gpBuffer
$L85518:
; Line 814
	lea	ecx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR _sy$[ebp]
	lea	eax, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR [eax]
	call	@town_clear_upper_buf@4
$LABEL_36$85532:
; Line 816
	inc	DWORD PTR _xa$[ebp]
; Line 817
	add	edi, 112				; 00000070H
; Line 818
	dec	ebx
; Line 819
	add	esi, 64					; 00000040H
; Line 820
	cmp	DWORD PTR _a1a$[ebp], 1
; Line 822
	mov	DWORD PTR _a5a$[ebp], edi
; Line 823
	mov	DWORD PTR _ya$[ebp], ebx
	sete	al
	dec	DWORD PTR _a1a$[ebp]
; Line 824
	test	al, al
	je	$L85512
$L85514:
; Line 826
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	$L85537
; Line 827
	test	ebx, ebx
	jl	$L85539
	cmp	ebx, 112				; 00000070H
	jge	$L85539
	cmp	DWORD PTR _xa$[ebp], 0
	jl	$L85539
	cmp	DWORD PTR _xa$[ebp], 112		; 00000070H
	jge	$L85539
; Line 830
	mov	eax, DWORD PTR _xa$[ebp]
	imul	eax, 112				; 00000070H
	add	eax, ebx
	mov	eax, DWORD PTR _dPiece[eax*4]
; Line 832
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
; Line 834
	je	$L85539
; Line 835
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _gpBuffer
; Line 836
	mov	edx, ebx
	lea	eax, DWORD PTR _screen_y_times_768[eax*4]
	lea	edi, DWORD PTR [ecx+esi]
	mov	ecx, DWORD PTR _xa$[ebp]
	mov	DWORD PTR 24+[ebp], eax
	add	edi, DWORD PTR [eax]
	call	@gendung_get_dpiece_num_from_coord@8
	mov	ebx, eax
	shl	ebx, 5
	add	ebx, OFFSET FLAT:_dpiece_defs_map_1
; Line 837
	and	DWORD PTR _sxc$[ebp], 0
$L85544:
; Line 839
	mov	eax, DWORD PTR _sxc$[ebp]
	cmp	DWORD PTR _a6$[ebp], eax
	jl	SHORT $L85550
; Line 841
	mov	ax, WORD PTR [ebx+eax*4]
	movzx	ecx, ax
; Line 842
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85550
; Line 843
	mov	ecx, edi
	call	@drawUpperScreen@4
$L85550:
; Line 845
	sub	edi, 24576				; 00006000H
; Line 846
	inc	DWORD PTR _sxc$[ebp]
; Line 847
	cmp	DWORD PTR _sxc$[ebp], 7
	jl	SHORT $L85544
; Line 848
	mov	eax, DWORD PTR _gpBuffer
	push	0
	push	DWORD PTR _sy$[ebp]
	mov	edx, DWORD PTR _xa$[ebp]
	lea	ecx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR 24+[ebp]
	push	esi
	push	DWORD PTR _dir$[ebp]
	add	ecx, DWORD PTR [eax]
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _ya$[ebp]
	call	@town_draw_town_all@32
; Line 849
	jmp	SHORT $L85537
$L85539:
; Line 852
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, esi
	call	@town_clear_upper_buf@4
$L85537:
	pop	edi
	pop	esi
	pop	ebx
; Line 854
	leave
	ret	20					; 00000014H
@town_draw_upper@28 ENDP
_TEXT	ENDS
PUBLIC	@T_DrawGame@8
EXTRN	_scr_pix_height:DWORD
EXTRN	_questlog:DWORD
EXTRN	_invflag:DWORD
EXTRN	_sbookflag:DWORD
EXTRN	_chrflag:DWORD
EXTRN	_ScrollInfo:BYTE
EXTRN	_dword_5C2FF8:DWORD
EXTRN	_dword_5C2FFC:DWORD
EXTRN	_scr_pix_width:DWORD
; Function compile flags: /Ogsy
;	COMDAT @T_DrawGame@8
_TEXT	SEGMENT
_y$ = -12
_v3$ = -4
_v11$ = -16
_a6$ = -12
_a6a$ = -12
_a5$ = -8
@T_DrawGame@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 858
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx
; Line 874
	mov	ecx, DWORD PTR _ScrollInfo
; Line 875
	add	eax, -10				; fffffff6H
; Line 884
	cmp	DWORD PTR _chrflag, 0
	push	ebx
	push	esi
	mov	DWORD PTR _v3$[ebp], eax
	mov	eax, DWORD PTR _ScrollInfo+4
	push	edi
	push	2
	mov	DWORD PTR _y$[ebp], edx
	lea	ebx, DWORD PTR [edx-1]
	lea	esi, DWORD PTR [ecx+64]
	lea	edi, DWORD PTR [eax+175]
	mov	DWORD PTR _dword_5C2FF8, 10		; 0000000aH
	mov	DWORD PTR _a5$[ebp], 10			; 0000000aH
	mov	DWORD PTR _scr_pix_width, 640		; 00000280H
	mov	DWORD PTR _scr_pix_height, 352		; 00000160H
	mov	DWORD PTR _dword_5C2FFC, 11		; 0000000bH
	mov	DWORD PTR _v11$[ebp], 5
	pop	edx
	jne	SHORT $L85573
	cmp	DWORD PTR _questlog, 0
	je	SHORT $L85572
$L85573:
; Line 885
	mov	esi, DWORD PTR _y$[ebp]
; Line 886
	add	DWORD PTR _v3$[ebp], edx
; Line 888
	mov	DWORD PTR _a5$[ebp], 6
	lea	ebx, DWORD PTR [esi-3]
	lea	esi, DWORD PTR [ecx+352]
$L85572:
; Line 890
	cmp	DWORD PTR _invflag, 0
	jne	SHORT $L85575
	cmp	DWORD PTR _sbookflag, 0
	je	SHORT $L85574
$L85575:
; Line 892
	add	DWORD PTR _v3$[ebp], edx
	sub	ebx, edx
; Line 893
	sub	esi, 32					; 00000020H
; Line 894
	mov	DWORD PTR _a5$[ebp], 6
$L85574:
; Line 896
	mov	ecx, DWORD PTR _ScrollInfo+16
	dec	ecx
	cmp	ecx, 7
	ja	SHORT $L85591
	jmp	DWORD PTR $L86006[ecx*4]
$L85580:
; Line 899
	dec	DWORD PTR _v3$[ebp]
	lea	edi, DWORD PTR [eax+143]
; Line 900
	dec	ebx
; Line 901
	jmp	SHORT $LABEL_15$85581
$L85582:
; Line 904
	dec	DWORD PTR _v3$[ebp]
; Line 905
	dec	ebx
; Line 906
	jmp	SHORT $L86005
$L85588:
; Line 914
	sub	esi, 64					; 00000040H
; Line 915
	dec	DWORD PTR _v3$[ebp]
; Line 916
	inc	ebx
; Line 917
	jmp	SHORT $LABEL_14$85583
$L85589:
; Line 919
	sub	esi, 64					; 00000040H
; Line 920
	dec	DWORD PTR _v3$[ebp]
; Line 921
	inc	ebx
$LABEL_12$85585:
; Line 923
	inc	DWORD PTR _a5$[ebp]
; Line 924
	jmp	SHORT $L85591
$L85590:
; Line 926
	sub	esi, 64					; 00000040H
; Line 928
	sub	DWORD PTR _v3$[ebp], edx
$L86005:
; Line 927
	lea	edi, DWORD PTR [eax+143]
$LABEL_14$85583:
; Line 930
	inc	DWORD PTR _a5$[ebp]
$LABEL_15$85581:
; Line 932
	mov	DWORD PTR _v11$[ebp], 6
$L85591:
; Line 938
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _screen_y_times_768+640
	and	DWORD PTR _a6$[ebp], 0
	add	ecx, eax
	mov	DWORD PTR _gpBufEnd, ecx
$L85593:
; Line 940
	push	0
	mov	ecx, DWORD PTR _v3$[ebp]
	push	DWORD PTR _a6$[ebp]
	mov	eax, ebx
	mov	edx, eax
	inc	ebx
	push	DWORD PTR _a5$[ebp]
	push	edi
	push	esi
	call	@town_draw_upper@28
; Line 943
	mov	ecx, DWORD PTR _v3$[ebp]
	add	edi, 16					; 00000010H
	push	1
	add	esi, -32				; ffffffe0H
	push	DWORD PTR _a6$[ebp]
	inc	DWORD PTR _v3$[ebp]
	mov	edx, ebx
	push	DWORD PTR _a5$[ebp]
	push	edi
	push	esi
	call	@town_draw_upper@28
; Line 944
	add	esi, 32					; 00000020H
; Line 945
	add	edi, 16					; 00000010H
; Line 946
	inc	DWORD PTR _a6$[ebp]
; Line 947
	cmp	DWORD PTR _a6$[ebp], 7
	jl	SHORT $L85593
; Line 948
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _screen_y_times_768+2048
	add	ecx, eax
; Line 949
	cmp	DWORD PTR _v11$[ebp], 0
	mov	DWORD PTR _gpBufEnd, ecx
	jle	SHORT $L85600
$L85598:
; Line 951
	mov	ecx, DWORD PTR _v3$[ebp]
	push	0
	push	DWORD PTR _a5$[ebp]
	mov	edx, ebx
	inc	ebx
	push	edi
	push	esi
	call	@town_draw_lower@24
; Line 954
	mov	ecx, DWORD PTR _v3$[ebp]
	add	edi, 16					; 00000010H
	push	1
	add	esi, -32				; ffffffe0H
	push	DWORD PTR _a5$[ebp]
	inc	DWORD PTR _v3$[ebp]
	mov	edx, ebx
	push	edi
	push	esi
	call	@town_draw_lower@24
; Line 955
	add	esi, 32					; 00000020H
; Line 956
	add	edi, 16					; 00000010H
; Line 957
	dec	DWORD PTR _v11$[ebp]
; Line 958
	jne	SHORT $L85598
$L85600:
; Line 960
	and	DWORD PTR _a6a$[ebp], 0
$L85601:
; Line 962
	push	0
	mov	ecx, DWORD PTR _v3$[ebp]
	push	DWORD PTR _a6a$[ebp]
	mov	edx, ebx
	inc	ebx
	push	DWORD PTR _a5$[ebp]
	push	edi
	push	esi
	call	@town_draw_lower_2@28
; Line 965
	mov	ecx, DWORD PTR _v3$[ebp]
	add	edi, 16					; 00000010H
	push	1
	add	esi, -32				; ffffffe0H
	push	DWORD PTR _a6a$[ebp]
	inc	DWORD PTR _v3$[ebp]
	mov	edx, ebx
	push	DWORD PTR _a5$[ebp]
	push	edi
	push	esi
	call	@town_draw_lower_2@28
; Line 966
	add	esi, 32					; 00000020H
; Line 967
	add	edi, 16					; 00000010H
; Line 968
	inc	DWORD PTR _a6a$[ebp]
; Line 969
	cmp	DWORD PTR _a6a$[ebp], 7
	jl	SHORT $L85601
	pop	edi
	pop	esi
	pop	ebx
; Line 970
	leave
	ret	0
$L86006:
	DD	$L85580
	DD	$L85582
	DD	$LABEL_12$85585
	DD	$LABEL_14$85583
	DD	$LABEL_15$85581
	DD	$L85588
	DD	$L85589
	DD	$L85590
@T_DrawGame@8 ENDP
_TEXT	ENDS
PUBLIC	@T_DrawZoom@8
; Function compile flags: /Ogsy
;	COMDAT @T_DrawZoom@8
_TEXT	SEGMENT
_x$ = -12
_y$ = -16
_v15$ = -20
_v16$ = -2
_v18$ = -20
_a6$ = -12
_a6a$ = -12
_a5$ = -8
_ya$ = -4
@T_DrawZoom@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 980
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 1006
	and	DWORD PTR _v18$[ebp], 0
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1007
	mov	ecx, DWORD PTR _ScrollInfo
	mov	DWORD PTR _x$[ebp], edi
	mov	DWORD PTR _y$[ebp], edx
; Line 1010
	add	edi, -6					; fffffffaH
	push	6
; Line 1013
	dec	edx
	pop	eax
	mov	DWORD PTR _ya$[ebp], edx
; Line 1016
	mov	edx, DWORD PTR _ScrollInfo+16
	mov	DWORD PTR _dword_5C2FF8, eax
	mov	DWORD PTR _dword_5C2FFC, eax
	mov	DWORD PTR _a5$[ebp], eax
	mov	eax, DWORD PTR _ScrollInfo+4
	dec	edx
	lea	ebx, DWORD PTR [ecx+64]
	cmp	edx, 7
	lea	esi, DWORD PTR [eax+143]
	mov	DWORD PTR _scr_pix_width, 384		; 00000180H
	mov	DWORD PTR _scr_pix_height, 192		; 000000c0H
	ja	SHORT $L85648
	jmp	DWORD PTR $L86022[edx*4]
$L85637:
; Line 1018
	lea	esi, DWORD PTR [eax+111]
; Line 1019
	mov	eax, DWORD PTR _x$[ebp]
	lea	edi, DWORD PTR [eax-7]
; Line 1020
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, -2					; fffffffeH
	mov	DWORD PTR _ya$[ebp], eax
; Line 1021
	jmp	SHORT $LABEL_9$85638
$L85639:
; Line 1023
	lea	esi, DWORD PTR [eax+111]
; Line 1024
	mov	eax, DWORD PTR _x$[ebp]
	lea	edi, DWORD PTR [eax-7]
; Line 1025
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, -2					; fffffffeH
	mov	DWORD PTR _ya$[ebp], eax
; Line 1026
	jmp	SHORT $LABEL_8$85640
$L85645:
; Line 1035
	mov	eax, DWORD PTR _x$[ebp]
	lea	edi, DWORD PTR [eax-7]
; Line 1036
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _ya$[ebp], eax
; Line 1037
	jmp	SHORT $L86021
$L85646:
; Line 1040
	mov	eax, DWORD PTR _x$[ebp]
	mov	ebx, ecx
	lea	edi, DWORD PTR [eax-7]
; Line 1041
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _ya$[ebp], eax
$LABEL_6$85642:
; Line 1043
	mov	DWORD PTR _a5$[ebp], 7
; Line 1044
	jmp	SHORT $L85648
$L85647:
; Line 1047
	lea	esi, DWORD PTR [eax+111]
; Line 1048
	mov	eax, DWORD PTR _x$[ebp]
	lea	edi, DWORD PTR [eax-8]
$L86021:
; Line 1046
	mov	ebx, ecx
$LABEL_8$85640:
; Line 1050
	mov	DWORD PTR _a5$[ebp], 7
$LABEL_9$85638:
; Line 1052
	mov	DWORD PTR _v18$[ebp], 1
$L85648:
; Line 1058
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _screen_y_times_768+572
	and	DWORD PTR _a6$[ebp], 0
	add	ecx, eax
	mov	DWORD PTR _gpBufEnd, ecx
$L85650:
; Line 1060
	push	0
	mov	edx, DWORD PTR _ya$[ebp]
	push	DWORD PTR _a6$[ebp]
	inc	DWORD PTR _ya$[ebp]
	mov	ecx, edi
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	ebx
	call	@town_draw_upper@28
; Line 1063
	mov	edx, DWORD PTR _ya$[ebp]
	add	esi, 16					; 00000010H
	push	1
	add	ebx, -32				; ffffffe0H
	push	DWORD PTR _a6$[ebp]
	mov	ecx, edi
	inc	edi
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	ebx
	call	@town_draw_upper@28
; Line 1064
	add	ebx, 32					; 00000020H
; Line 1065
	add	esi, 16					; 00000010H
; Line 1066
	inc	DWORD PTR _a6$[ebp]
; Line 1067
	cmp	DWORD PTR _a6$[ebp], 7
	jl	SHORT $L85650
; Line 1068
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _screen_y_times_768+1280
	add	ecx, eax
; Line 1069
	cmp	DWORD PTR _v18$[ebp], 0
	mov	DWORD PTR _gpBufEnd, ecx
	jle	SHORT $L85657
$L85655:
; Line 1071
	mov	edx, DWORD PTR _ya$[ebp]
	inc	DWORD PTR _ya$[ebp]
	push	0
	mov	ecx, edi
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	ebx
	call	@town_draw_lower@24
; Line 1074
	mov	edx, DWORD PTR _ya$[ebp]
	add	esi, 16					; 00000010H
	push	1
	add	ebx, -32				; ffffffe0H
	push	DWORD PTR _a5$[ebp]
	mov	ecx, edi
	inc	edi
	push	esi
	push	ebx
	call	@town_draw_lower@24
; Line 1075
	add	ebx, 32					; 00000020H
; Line 1076
	add	esi, 16					; 00000010H
; Line 1077
	dec	DWORD PTR _v18$[ebp]
; Line 1078
	jne	SHORT $L85655
$L85657:
; Line 1080
	and	DWORD PTR _a6a$[ebp], 0
$L85658:
; Line 1082
	push	0
	mov	edx, DWORD PTR _ya$[ebp]
	push	DWORD PTR _a6a$[ebp]
	inc	DWORD PTR _ya$[ebp]
	mov	ecx, edi
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	ebx
	call	@town_draw_lower_2@28
; Line 1085
	mov	edx, DWORD PTR _ya$[ebp]
	add	esi, 16					; 00000010H
	push	1
	add	ebx, -32				; ffffffe0H
	push	DWORD PTR _a6a$[ebp]
	mov	ecx, edi
	inc	edi
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	ebx
	call	@town_draw_lower_2@28
; Line 1086
	add	ebx, 32					; 00000020H
; Line 1087
	add	esi, 16					; 00000010H
; Line 1088
	inc	DWORD PTR _a6a$[ebp]
; Line 1089
	cmp	DWORD PTR _a6a$[ebp], 7
	jl	SHORT $L85658
; Line 1090
	xor	eax, eax
	cmp	DWORD PTR _chrflag, eax
	jne	SHORT $L85662
	cmp	DWORD PTR _questlog, eax
	jne	SHORT $L85662
; Line 1094
	cmp	DWORD PTR _invflag, eax
	jne	SHORT $L85665
	cmp	DWORD PTR _sbookflag, eax
	jne	SHORT $L85665
; Line 1101
	mov	edx, 245088				; 0003bd60H
; Line 1102
	mov	ecx, 391744				; 0005fa40H
; Line 1103
	mov	edi, 320				; 00000140H
	jmp	SHORT $LABEL_24$85666
$L85665:
; Line 1095
	mov	ecx, 391744				; 0005fa40H
	jmp	SHORT $LABEL_23$85663
$L85662:
; Line 1091
	mov	ecx, 392064				; 0005fb80H
$LABEL_23$85663:
; Line 1097
	mov	edx, 245168				; 0003bdb0H
; Line 1098
	mov	edi, 160				; 000000a0H
$LABEL_24$85666:
; Line 1105
	mov	eax, DWORD PTR _gpBuffer
; Line 1121
	lea	ebx, DWORD PTR [edi+edi+1536]
	add	ecx, eax
	add	eax, edx
	mov	DWORD PTR -16+[ebp], 176		; 000000b0H
	lea	esi, DWORD PTR [ecx+768]
$L85670:
; Line 1110
	mov	DWORD PTR _v15$[ebp], edi
$L85673:
; Line 1112
	mov	dl, BYTE PTR [eax]
	inc	eax
	mov	BYTE PTR _v16$[ebp], dl
; Line 1113
	mov	BYTE PTR _v16$[ebp+1], dl
; Line 1114
	mov	dx, WORD PTR _v16$[ebp]
	mov	WORD PTR [ecx], dx
; Line 1116
	inc	ecx
	mov	WORD PTR [esi], dx
	inc	ecx
; Line 1117
	inc	esi
	inc	esi
; Line 1118
	dec	DWORD PTR _v15$[ebp]
; Line 1119
	jne	SHORT $L85673
; Line 1120
	mov	edx, -768				; fffffd00H
; Line 1122
	sub	esi, ebx
	sub	edx, edi
; Line 1123
	sub	ecx, ebx
	add	eax, edx
; Line 1125
	dec	DWORD PTR -16+[ebp]
	jne	SHORT $L85670
	pop	edi
	pop	esi
	pop	ebx
; Line 1126
	leave
	ret	0
$L86022:
	DD	$L85637
	DD	$L85639
	DD	$LABEL_6$85642
	DD	$LABEL_8$85640
	DD	$LABEL_9$85638
	DD	$L85645
	DD	$L85646
	DD	$L85647
@T_DrawZoom@8 ENDP
_TEXT	ENDS
PUBLIC	@T_DrawView@8
EXTRN	_DrawInfoBox:NEAR
EXTRN	_DrawChr:NEAR
EXTRN	_DrawLevelUpIcon:NEAR
EXTRN	_DrawDurIcon:NEAR
EXTRN	_DrawSpellBook:NEAR
EXTRN	@DrawGoldSplit@4:NEAR
EXTRN	_DrawPlrMsg:NEAR
EXTRN	_gmenu_draw_pause:NEAR
EXTRN	_gmenu_draw:NEAR
EXTRN	_zoomflag:DWORD
EXTRN	_PauseMode:DWORD
EXTRN	_helpflag:DWORD
EXTRN	_DrawHelp:NEAR
EXTRN	_DrawQuestLog:NEAR
EXTRN	_light_table_index:DWORD
EXTRN	_cel_transparency_active:DWORD
EXTRN	_doom_draw:NEAR
EXTRN	_DrawInv:NEAR
EXTRN	_qtextflag:BYTE
EXTRN	_DrawQText:NEAR
EXTRN	_uitemflag:DWORD
EXTRN	_myplr:DWORD
EXTRN	_deathflag:DWORD
EXTRN	_automapflag:DWORD
EXTRN	_DrawAutomap:NEAR
EXTRN	_stextflag:BYTE
EXTRN	_dropGoldFlag:DWORD
EXTRN	_msgflag:BYTE
EXTRN	_dropGoldValue:DWORD
EXTRN	_DrawDiabloMsg:NEAR
EXTRN	_spselflag:DWORD
EXTRN	_DrawSpellList:NEAR
EXTRN	_DrawUniqueInfo:NEAR
EXTRN	_DrawLifeFlask:NEAR
EXTRN	_DrawManaFlask:NEAR
EXTRN	_DrawSText:NEAR
; Function compile flags: /Ogsy
;	COMDAT @T_DrawView@8
_TEXT	SEGMENT
@T_DrawView@8 PROC NEAR					; COMDAT
; _StartX$ = ecx
; _StartY$ = edx
; Line 1136
	push	ebx
; Line 1137
	xor	ebx, ebx
; Line 1139
	cmp	DWORD PTR _zoomflag, ebx
	mov	DWORD PTR _light_table_index, ebx
	mov	DWORD PTR _cel_transparency_active, ebx
	je	SHORT $L85687
; Line 1140
	call	@T_DrawGame@8
; Line 1141
	jmp	SHORT $L85688
$L85687:
; Line 1142
	call	@T_DrawZoom@8
$L85688:
; Line 1143
	cmp	DWORD PTR _automapflag, ebx
	je	SHORT $L85689
; Line 1144
	call	_DrawAutomap
$L85689:
; Line 1145
	cmp	BYTE PTR _stextflag, bl
	je	SHORT $L85690
	cmp	BYTE PTR _qtextflag, bl
	jne	SHORT $L85690
; Line 1146
	call	_DrawSText
$L85690:
; Line 1147
	cmp	DWORD PTR _invflag, ebx
	je	SHORT $L85691
; Line 1148
	call	_DrawInv
; Line 1149
	jmp	SHORT $L85693
$L85691:
	cmp	DWORD PTR _sbookflag, ebx
	je	SHORT $L85693
; Line 1150
	call	_DrawSpellBook
$L85693:
; Line 1152
	call	_DrawDurIcon
; Line 1153
	cmp	DWORD PTR _chrflag, ebx
	je	SHORT $L85694
; Line 1154
	call	_DrawChr
; Line 1155
	jmp	SHORT $L85698
$L85694:
	cmp	DWORD PTR _questlog, ebx
	je	SHORT $L85696
; Line 1156
	call	_DrawQuestLog
; Line 1157
	jmp	SHORT $L85698
$L85696:
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+388], ebx
	je	SHORT $L85698
	cmp	DWORD PTR _spselflag, ebx
	jne	SHORT $L85698
; Line 1158
	call	_DrawLevelUpIcon
$L85698:
; Line 1160
	cmp	DWORD PTR _uitemflag, ebx
	je	SHORT $L85699
; Line 1161
	call	_DrawUniqueInfo
$L85699:
; Line 1162
	cmp	BYTE PTR _qtextflag, bl
	je	SHORT $L85700
; Line 1163
	call	_DrawQText
$L85700:
; Line 1164
	cmp	DWORD PTR _spselflag, ebx
	je	SHORT $L85701
; Line 1165
	call	_DrawSpellList
$L85701:
; Line 1166
	cmp	DWORD PTR _dropGoldFlag, ebx
	je	SHORT $L85702
; Line 1167
	mov	ecx, DWORD PTR _dropGoldValue
	call	@DrawGoldSplit@4
$L85702:
; Line 1168
	cmp	DWORD PTR _helpflag, ebx
	je	SHORT $L85703
; Line 1169
	call	_DrawHelp
$L85703:
; Line 1170
	cmp	BYTE PTR _msgflag, bl
	je	SHORT $L85704
; Line 1171
	call	_DrawDiabloMsg
$L85704:
; Line 1172
	cmp	DWORD PTR _PauseMode, ebx
	je	SHORT $L85705
	cmp	DWORD PTR _deathflag, ebx
	jne	SHORT $L85705
; Line 1173
	call	_gmenu_draw_pause
$L85705:
; Line 1174
	call	_DrawPlrMsg
; Line 1175
	call	_gmenu_draw
; Line 1176
	call	_doom_draw
; Line 1177
	call	_DrawInfoBox
; Line 1178
	call	_DrawLifeFlask
	pop	ebx
; Line 1179
	jmp	_DrawManaFlask
@T_DrawView@8 ENDP
_TEXT	ENDS
PUBLIC	_town_init_dpiece_defs_map
EXTRN	_pLevelPieces:DWORD
; Function compile flags: /Ogsy
;	COMDAT _town_init_dpiece_defs_map
_TEXT	SEGMENT
_v6$ = -8
_y$ = -4
_town_init_dpiece_defs_map PROC NEAR			; COMDAT
; Line 1194
	push	ecx
	push	ecx
; Line 1204
	and	DWORD PTR _y$[esp+8], 0
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1205
	mov	DWORD PTR _v6$[esp+24], OFFSET FLAT:_dPiece
$L85715:
; Line 1207
	mov	edi, DWORD PTR _v6$[esp+24]
; Line 1208
	xor	ebx, ebx
$L85718:
; Line 1211
	mov	edx, DWORD PTR _y$[esp+24]
	mov	esi, DWORD PTR [edi]
	mov	ecx, ebx
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
; Line 1212
	xor	ecx, ecx
	add	eax, OFFSET FLAT:_dpiece_defs_map_1
	cmp	esi, ecx
	je	SHORT $L85722
; Line 1213
	mov	edx, DWORD PTR _pLevelPieces
	shl	esi, 5
	lea	edx, DWORD PTR [esi+edx-32]
$L85724:
; Line 1216
	mov	esi, ecx
	mov	ebp, ecx
	and	esi, 14					; 0000000eH
	and	ebp, 1
	sub	ebp, esi
	mov	si, WORD PTR [edx+ebp*2+28]
	mov	WORD PTR [eax+ecx*2], si
; Line 1217
	inc	ecx
; Line 1218
	cmp	ecx, 16					; 00000010H
	jl	SHORT $L85724
; Line 1219
	jmp	SHORT $L85729
$L85722:
; Line 1220
	push	32					; 00000020H
	push	ecx
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$L85729:
; Line 1222
	inc	ebx
; Line 1223
	add	edi, 448				; 000001c0H
; Line 1224
	cmp	ebx, 112				; 00000070H
	jl	SHORT $L85718
; Line 1225
	add	DWORD PTR _v6$[esp+24], 4
; Line 1226
	inc	DWORD PTR _y$[esp+24]
; Line 1227
	cmp	DWORD PTR _v6$[esp+24], OFFSET FLAT:_dPiece+448
	jl	SHORT $L85715
; Line 1228
	cmp	DWORD PTR _zoomflag, 0
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	je	SHORT $L85734
; Line 1229
	mov	DWORD PTR _scr_pix_width, 640		; 00000280H
; Line 1230
	mov	DWORD PTR _scr_pix_height, 352		; 00000160H
; Line 1231
	mov	DWORD PTR _dword_5C2FF8, 10		; 0000000aH
; Line 1232
	mov	DWORD PTR _dword_5C2FFC, 11		; 0000000bH
; Line 1233
	jmp	SHORT $L85735
$L85734:
; Line 1234
	mov	DWORD PTR _scr_pix_width, 384		; 00000180H
; Line 1235
	mov	DWORD PTR _scr_pix_height, 224		; 000000e0H
; Line 1236
	mov	DWORD PTR _dword_5C2FF8, 6
; Line 1237
	mov	DWORD PTR _dword_5C2FFC, 7
$L85735:
; Line 1239
	pop	ecx
	pop	ecx
	ret	0
_town_init_dpiece_defs_map ENDP
_TEXT	ENDS
PUBLIC	@T_FillSector@24
; Function compile flags: /Ogsy
;	COMDAT @T_FillSector@24
_TEXT	SEGMENT
_P3Tiles$ = -16
_pSector$ = -12
_xi$ = 8
_yi$ = 12
_w$ = 16
_h$ = 20
_v7$ = -8
_v8$ = 12
_v9$ = -4
_v14$ = 20
@T_FillSector@24 PROC NEAR				; COMDAT
; _P3Tiles$ = ecx
; _pSector$ = edx
; Line 1247
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 1264
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _P3Tiles$[ebp], ecx
; Line 1266
	mov	ecx, DWORD PTR _yi$[ebp]
; Line 1268
	push	4
	mov	DWORD PTR _pSector$[ebp], edx
	mov	DWORD PTR _v7$[ebp], eax
; Line 1269
	test	eax, eax
	mov	DWORD PTR _v8$[ebp], ecx
	pop	edx
	jle	$L85767
	push	ebx
	push	esi
	push	edi
$L85765:
; Line 1271
	mov	eax, DWORD PTR _w$[ebp]
; Line 1272
	test	eax, eax
	mov	DWORD PTR _v9$[ebp], eax
	jle	SHORT $L85771
; Line 1273
	mov	eax, DWORD PTR _xi$[ebp]
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _v8$[ebp]
	lea	edi, DWORD PTR _dPiece[eax*4+448]
$L85769:
; Line 1275
	mov	eax, DWORD PTR _pSector$[ebp]
	movzx	eax, WORD PTR [edx+eax]
; Line 1276
	test	ax, ax
	je	SHORT $L85774
; Line 1277
	mov	ecx, DWORD PTR _P3Tiles$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8-8]
; Line 1278
	mov	si, WORD PTR [eax]
; Line 1279
	inc	eax
; Line 1280
	movzx	esi, si
	inc	eax
	inc	esi
	mov	DWORD PTR _v14$[ebp], esi
; Line 1282
	mov	cx, WORD PTR [eax]
; Line 1283
	inc	eax
	mov	WORD PTR _v14$[ebp], cx
	inc	eax
; Line 1284
	inc	DWORD PTR _v14$[ebp]
; Line 1285
	mov	cx, WORD PTR [eax]
	mov	ebx, DWORD PTR _v14$[ebp]
; Line 1287
	mov	ax, WORD PTR [eax+2]
	mov	WORD PTR _v14$[ebp], cx
	inc	DWORD PTR _v14$[ebp]
	mov	ecx, DWORD PTR _v14$[ebp]
	mov	WORD PTR _v14$[ebp], ax
; Line 1288
	mov	eax, DWORD PTR _v14$[ebp]
	inc	eax
; Line 1289
	jmp	SHORT $L85782
$L85774:
; Line 1290
	xor	esi, esi
; Line 1291
	xor	ebx, ebx
; Line 1292
	xor	ecx, ecx
; Line 1293
	xor	eax, eax
$L85782:
; Line 1295
	inc	edx
; Line 1296
	mov	DWORD PTR [edi-448], esi
; Line 1297
	mov	DWORD PTR [edi], ebx
; Line 1298
	mov	DWORD PTR [edi-444], ecx
; Line 1299
	mov	DWORD PTR [edi+4], eax
	inc	edx
; Line 1300
	add	edi, 896				; 00000380H
; Line 1301
	dec	DWORD PTR _v9$[ebp]
; Line 1302
	jne	SHORT $L85769
$L85771:
; Line 1304
	add	DWORD PTR _v8$[ebp], 2
; Line 1305
	dec	DWORD PTR _v7$[ebp]
; Line 1306
	jne	$L85765
	pop	edi
	pop	esi
	pop	ebx
$L85767:
; Line 1308
	leave
	ret	16					; 00000010H
@T_FillSector@24 ENDP
_TEXT	ENDS
PUBLIC	@T_FillTile@16
; Function compile flags: /Ogsy
;	COMDAT @T_FillTile@16
_TEXT	SEGMENT
_yy$ = 8
_t$ = 12
_v6$ = 12
@T_FillTile@16 PROC NEAR				; COMDAT
; _P3Tiles$ = ecx
; _xx$ = edx
; Line 1311
	push	ebp
	mov	ebp, esp
; Line 1319
	mov	eax, DWORD PTR _t$[ebp]
	push	esi
; Line 1330
	imul	edx, 112				; 00000070H
	lea	eax, DWORD PTR [ecx+eax*8-8]
	add	edx, DWORD PTR _yy$[ebp]
	push	edi
	mov	cx, WORD PTR [eax]
	inc	eax
	movzx	ecx, cx
	inc	eax
	inc	ecx
	mov	DWORD PTR _v6$[ebp], ecx
	mov	si, WORD PTR [eax]
	inc	eax
	mov	WORD PTR _v6$[ebp], si
	inc	eax
	inc	DWORD PTR _v6$[ebp]
	mov	di, WORD PTR [eax]
	mov	esi, DWORD PTR _v6$[ebp]
	mov	ax, WORD PTR [eax+2]
	mov	WORD PTR _v6$[ebp], di
	inc	DWORD PTR _v6$[ebp]
	mov	edi, DWORD PTR _v6$[ebp]
	mov	WORD PTR _v6$[ebp], ax
; Line 1333
	mov	eax, DWORD PTR _v6$[ebp]
	shl	edx, 2
	inc	eax
	mov	DWORD PTR _dPiece[edx+4], edi
	mov	DWORD PTR _dPiece[edx+448], esi
	pop	edi
	mov	DWORD PTR _dPiece[edx], ecx
	mov	DWORD PTR _dPiece[edx+452], eax
	pop	esi
; Line 1334
	pop	ebp
	ret	8
@T_FillTile@16 ENDP
_TEXT	ENDS
PUBLIC	_T_Pass3
PUBLIC	??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@	; `string'
PUBLIC	??_C@_0BN@EIIA@Levels?2TownData?2Sector1s?4DUN?$AA@ ; `string'
PUBLIC	??_C@_0BN@PGGA@Levels?2TownData?2Sector2s?4DUN?$AA@ ; `string'
PUBLIC	??_C@_0BN@GDMA@Levels?2TownData?2Sector3s?4DUN?$AA@ ; `string'
PUBLIC	??_C@_0BN@ILKA@Levels?2TownData?2Sector4s?4DUN?$AA@ ; `string'
EXTRN	_quests:BYTE
EXTRN	_gbMaxPlayers:BYTE
EXTRN	@random@8:NEAR
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	@LoadFileInMem@8:NEAR
;	COMDAT ??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@
_DATA	SEGMENT
??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@ DB 'Levels\TownData\Town.'
	DB	'TIL', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@EIIA@Levels?2TownData?2Sector1s?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BN@EIIA@Levels?2TownData?2Sector1s?4DUN?$AA@ DB 'Levels\TownData\S'
	DB	'ector1s.DUN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@PGGA@Levels?2TownData?2Sector2s?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BN@PGGA@Levels?2TownData?2Sector2s?4DUN?$AA@ DB 'Levels\TownData\S'
	DB	'ector2s.DUN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@GDMA@Levels?2TownData?2Sector3s?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BN@GDMA@Levels?2TownData?2Sector3s?4DUN?$AA@ DB 'Levels\TownData\S'
	DB	'ector3s.DUN', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@ILKA@Levels?2TownData?2Sector4s?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BN@ILKA@Levels?2TownData?2Sector4s?4DUN?$AA@ DB 'Levels\TownData\S'
	DB	'ector4s.DUN', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _T_Pass3
_TEXT	SEGMENT
_T_Pass3 PROC NEAR					; COMDAT
; Line 1345
	mov	ecx, OFFSET FLAT:_dPiece+448
	push	esi
$L85812:
; Line 1347
	push	56					; 00000038H
	lea	eax, DWORD PTR [ecx-444]
	pop	edx
$L85815:
; Line 1350
	xor	esi, esi
	mov	DWORD PTR [eax-4], esi
; Line 1351
	mov	DWORD PTR [eax+444], esi
; Line 1352
	mov	DWORD PTR [eax], esi
; Line 1353
	mov	DWORD PTR [eax+448], esi
; Line 1354
	add	eax, 896				; 00000380H
; Line 1356
	dec	edx
	jne	SHORT $L85815
; Line 1357
	add	ecx, 8
; Line 1358
	cmp	ecx, OFFSET FLAT:_dPiece+896
	jl	SHORT $L85812
	push	ebx
	push	edi
; Line 1359
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1360
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BN@EIIA@Levels?2TownData?2Sector1s?4DUN?$AA@ ; `string'
	mov	esi, eax
	call	@LoadFileInMem@8
; Line 1361
	push	25					; 00000019H
	mov	edi, eax
	pop	ebx
	mov	edx, edi
	push	ebx
	push	ebx
	push	46					; 0000002eH
	push	46					; 0000002eH
	mov	ecx, esi
	call	@T_FillSector@24
; Line 1362
	mov	ecx, edi
	call	@mem_free_dbg@4
; Line 1363
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BN@PGGA@Levels?2TownData?2Sector2s?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1364
	push	23					; 00000017H
	mov	edi, eax
	push	ebx
	push	0
	push	46					; 0000002eH
	mov	edx, edi
	mov	ecx, esi
	call	@T_FillSector@24
; Line 1365
	mov	ecx, edi
	call	@mem_free_dbg@4
; Line 1366
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BN@GDMA@Levels?2TownData?2Sector3s?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1367
	push	ebx
	mov	edi, eax
	push	23					; 00000017H
	xor	ebx, ebx
	push	46					; 0000002eH
	push	ebx
	mov	edx, edi
	mov	ecx, esi
	call	@T_FillSector@24
; Line 1368
	mov	ecx, edi
	call	@mem_free_dbg@4
; Line 1369
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BN@ILKA@Levels?2TownData?2Sector4s?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1370
	push	23					; 00000017H
	mov	edi, eax
	push	23					; 00000017H
	push	ebx
	push	ebx
	mov	edx, edi
	mov	ecx, esi
	call	@T_FillSector@24
; Line 1371
	mov	ecx, edi
	call	@mem_free_dbg@4
; Line 1372
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85831
; Line 1373
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	bl, BYTE PTR _plr[eax+21624]
	test	bl, 1
	jne	SHORT $L85826
; Line 1374
	push	320					; 00000140H
	push	20					; 00000014H
	push	48					; 00000030H
	mov	ecx, esi
	pop	edx
	call	@T_FillTile@16
$L85826:
; Line 1376
	test	bl, 2
	jne	SHORT $L85827
; Line 1377
	push	332					; 0000014cH
	push	68					; 00000044H
	push	16					; 00000010H
	mov	ecx, esi
	pop	edx
	call	@T_FillTile@16
; Line 1378
	push	331					; 0000014bH
	push	70					; 00000046H
	push	16					; 00000010H
	mov	ecx, esi
	pop	edx
	call	@T_FillTile@16
$L85827:
; Line 1380
	test	bl, 4
	jne	SHORT $L85831
; Line 1381
	push	36					; 00000024H
	pop	edi
$L85829:
; Line 1383
	push	4
	mov	ebx, edi
	pop	edx
	xor	cl, cl
	inc	edi
	call	@random@8
	inc	eax
	mov	edx, ebx
	push	eax
	push	78					; 0000004eH
	mov	ecx, esi
	call	@T_FillTile@16
; Line 1384
	cmp	edi, 46					; 0000002eH
	jl	SHORT $L85829
$L85831:
; Line 1387
	mov	al, BYTE PTR _quests+314
	pop	edi
	cmp	al, 3
	pop	ebx
	je	SHORT $L85832
	test	al, al
	je	SHORT $L85832
; Line 1388
	push	342					; 00000156H
; Line 1389
	jmp	SHORT $L86050
$L85832:
; Line 1390
	push	71					; 00000047H
$L86050:
	push	70					; 00000046H
	push	60					; 0000003cH
	mov	ecx, esi
	pop	edx
	call	@T_FillTile@16
; Line 1391
	mov	ecx, esi
	pop	esi
	jmp	@mem_free_dbg@4
_T_Pass3 ENDP
_TEXT	ENDS
PUBLIC	@CreateTown@4
EXTRN	_dArch:BYTE
EXTRN	_dmaxx:DWORD
EXTRN	_dmaxy:DWORD
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
EXTRN	_dminx:DWORD
EXTRN	_dminy:DWORD
EXTRN	_TWarpFrom:DWORD
EXTRN	_dObject:BYTE
EXTRN	_dTransVal:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CreateTown@4
_TEXT	SEGMENT
@CreateTown@4 PROC NEAR					; COMDAT
; _entry$ = ecx
; Line 1397
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1406
	push	10					; 0000000aH
; Line 1410
	xor	edi, edi
	pop	ebx
	cmp	ecx, edi
	push	84					; 00000054H
	mov	DWORD PTR _dminx, ebx
	pop	eax
	mov	DWORD PTR _dminy, ebx
	mov	DWORD PTR _dmaxx, eax
	mov	DWORD PTR _dmaxy, eax
	je	SHORT $L85843
; Line 1411
	cmp	ecx, 1
	jne	SHORT $L85844
; Line 1412
	mov	DWORD PTR _ViewX, 25			; 00000019H
; Line 1413
	mov	DWORD PTR _ViewY, 31			; 0000001fH
; Line 1414
	jmp	SHORT $L85850
$L85844:
	cmp	ecx, 7
	jne	SHORT $L85850
; Line 1415
	mov	eax, DWORD PTR _TWarpFrom
	cmp	eax, 5
	jne	SHORT $L85847
; Line 1416
	mov	DWORD PTR _ViewX, 49			; 00000031H
; Line 1417
	mov	DWORD PTR _ViewY, 22			; 00000016H
$L85847:
; Line 1419
	cmp	eax, 9
	jne	SHORT $L85848
; Line 1420
	mov	DWORD PTR _ViewX, 18			; 00000012H
; Line 1421
	mov	DWORD PTR _ViewY, 69			; 00000045H
$L85848:
; Line 1423
	cmp	eax, 13					; 0000000dH
	jne	SHORT $L85850
; Line 1424
	mov	DWORD PTR _ViewX, 41			; 00000029H
; Line 1425
	mov	DWORD PTR _ViewY, 81			; 00000051H
; Line 1428
	jmp	SHORT $L85850
$L85843:
; Line 1429
	mov	DWORD PTR _ViewX, 75			; 0000004bH
; Line 1430
	mov	DWORD PTR _ViewY, 68			; 00000044H
$L85850:
; Line 1432
	call	_T_Pass3
; Line 1433
	mov	esi, 12544				; 00003100H
	push	esi
	push	edi
	push	OFFSET FLAT:_dTransVal
	call	_memset
; Line 1434
	push	esi
	push	edi
	push	OFFSET FLAT:_dFlags
	call	_memset
; Line 1435
	push	esi
	push	edi
	push	OFFSET FLAT:_dPlayer
	call	_memset
; Line 1436
	push	50176					; 0000c400H
	push	edi
	push	OFFSET FLAT:_dMonster
	call	_memset
; Line 1437
	push	esi
	push	edi
	push	OFFSET FLAT:_dObject
	call	_memset
; Line 1438
	push	esi
	push	edi
	push	OFFSET FLAT:_dItem
	call	_memset
	add	esp, 72					; 00000048H
; Line 1439
	push	esi
	mov	esi, OFFSET FLAT:_dArch
	push	edi
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1440
	mov	edi, OFFSET FLAT:_dPiece
$L85851:
; Line 1442
	push	112					; 00000070H
	mov	eax, esi
; Line 1443
	mov	edx, edi
	pop	ebp
$L85855:
; Line 1447
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, 360				; 00000168H
	jne	SHORT $L85858
; Line 1448
	mov	BYTE PTR [eax], 1
; Line 1449
	jmp	$L85861
$L85858:
; Line 1450
	cmp	ecx, 160				; 000000a0H
	jg	SHORT $L86054
	je	SHORT $L85873
	sub	ecx, 117				; 00000075H
	je	SHORT $L85868
	sub	ecx, 11					; 0000000bH
	je	SHORT $L85867
	dec	ecx
	je	SHORT $L85865
	dec	ecx
	je	SHORT $L85866
	sub	ecx, 26					; 0000001aH
	je	SHORT $L85871
	dec	ecx
	je	SHORT $L85869
	dec	ecx
	jne	SHORT $L85861
; Line 1470
	mov	BYTE PTR [eax], 11			; 0000000bH
; Line 1471
	jmp	SHORT $L85861
$L85869:
; Line 1467
	mov	BYTE PTR [eax], bl
; Line 1468
	jmp	SHORT $L85861
$L85871:
; Line 1473
	mov	BYTE PTR [eax], 12			; 0000000cH
; Line 1474
	jmp	SHORT $L85861
$L85866:
; Line 1458
	mov	BYTE PTR [eax], 7
; Line 1459
	jmp	SHORT $L85861
$L85865:
; Line 1455
	mov	BYTE PTR [eax], 6
; Line 1456
	jmp	SHORT $L85861
$L85867:
; Line 1461
	mov	BYTE PTR [eax], 8
; Line 1462
	jmp	SHORT $L85861
$L85868:
; Line 1464
	mov	BYTE PTR [eax], 9
; Line 1465
	jmp	SHORT $L85861
$L85873:
; Line 1479
	mov	BYTE PTR [eax], 14			; 0000000eH
; Line 1480
	jmp	SHORT $L85861
$L86054:
; Line 1450
	sub	ecx, 162				; 000000a2H
	je	SHORT $L85872
	sub	ecx, 50					; 00000032H
	je	SHORT $L85875
	dec	ecx
	dec	ecx
	je	SHORT $L85874
	dec	ecx
	dec	ecx
	je	SHORT $L85877
	dec	ecx
	je	SHORT $L85876
	sub	ecx, 141				; 0000008dH
	jne	SHORT $L85861
; Line 1452
	mov	BYTE PTR [eax], 2
; Line 1453
	jmp	SHORT $L85861
$L85876:
; Line 1488
	mov	BYTE PTR [eax], 17			; 00000011H
; Line 1489
	jmp	SHORT $L85861
$L85877:
; Line 1491
	mov	BYTE PTR [eax], 18			; 00000012H
; Line 1492
	jmp	SHORT $L85861
$L85874:
; Line 1482
	mov	BYTE PTR [eax], 15			; 0000000fH
; Line 1483
	jmp	SHORT $L85861
$L85875:
; Line 1485
	mov	BYTE PTR [eax], 16			; 00000010H
; Line 1486
	jmp	SHORT $L85861
$L85872:
; Line 1476
	mov	BYTE PTR [eax], 13			; 0000000dH
$L85861:
; Line 1495
	add	edx, 448				; 000001c0H
; Line 1496
	add	eax, 112				; 00000070H
; Line 1498
	dec	ebp
	jne	$L85855
; Line 1499
	add	edi, 4
; Line 1500
	inc	esi
; Line 1501
	cmp	edi, OFFSET FLAT:_dPiece+448
	jl	$L85851
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1502
	jmp	_town_init_dpiece_defs_map
@CreateTown@4 ENDP
_TEXT	ENDS
END
