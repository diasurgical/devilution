; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/gamemenu.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_09JOGO@Save?5Game?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BFAH@Options?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DJPG@New?5Game?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09KDNE@Load?5Game?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JMOL@Quit?5Diablo?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@KHHO@Restart?5In?5Town?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05CEKJ@Gamma?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@JDNH@Previous?5Menu?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05PHIM@Music?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@CHLE@Music?5Disabled?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NJPO@Sound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@IIDL@Sound?5Disabled?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@HAJJ@Color?5Cycling?5Off?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@JPMD@Color?5Cycling?5On?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _gamemenu_previous
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_enable_single
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_enable_multi
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_off
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_handle_previous
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_new_game
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_quit_game
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_load_game
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_save_game
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_restart_town
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_options
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_get_music
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gamemenu_sound_music_toggle@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_get_sound
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_get_color_cycling
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_get_gamma
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gamemenu_music_volume@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gamemenu_slider_music_sound@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gamemenu_sound_volume@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gamemenu_gamma@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_slider_gamma
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gamemenu_color_cycling
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sgSingleMenu
PUBLIC	??_C@_09JOGO@Save?5Game?$AA@			; `string'
PUBLIC	??_C@_07BFAH@Options?$AA@			; `string'
PUBLIC	??_C@_08DJPG@New?5Game?$AA@			; `string'
PUBLIC	??_C@_09KDNE@Load?5Game?$AA@			; `string'
PUBLIC	??_C@_0M@JMOL@Quit?5Diablo?$AA@			; `string'
PUBLIC	_sgMultiMenu
PUBLIC	??_C@_0BA@KHHO@Restart?5In?5Town?$AA@		; `string'
PUBLIC	_sgOptionMenu
PUBLIC	??_C@_05CEKJ@Gamma?$AA@				; `string'
PUBLIC	??_C@_0O@JDNH@Previous?5Menu?$AA@		; `string'
PUBLIC	??_C@_05PHIM@Music?$AA@				; `string'
PUBLIC	??_C@_0P@CHLE@Music?5Disabled?$AA@		; `string'
PUBLIC	??_C@_05NJPO@Sound?$AA@				; `string'
PUBLIC	??_C@_0P@IIDL@Sound?5Disabled?$AA@		; `string'
PUBLIC	??_C@_0BC@HAJJ@Color?5Cycling?5Off?$AA@		; `string'
PUBLIC	??_C@_0BB@JPMD@Color?5Cycling?5On?$AA@		; `string'
PUBLIC	_gamemenu_previous
PUBLIC	_gamemenu_new_game
PUBLIC	_gamemenu_quit_game
PUBLIC	_gamemenu_load_game
PUBLIC	_gamemenu_save_game
PUBLIC	_gamemenu_restart_town
PUBLIC	_gamemenu_options
PUBLIC	@gamemenu_music_volume@4
PUBLIC	@gamemenu_sound_volume@4
PUBLIC	@gamemenu_gamma@4
PUBLIC	_gamemenu_color_cycling
PUBLIC	_music_toggle_names
PUBLIC	_sound_toggle_names
PUBLIC	_color_cycling_toggle_names
;	COMDAT ??_C@_09JOGO@Save?5Game?$AA@
_DATA	SEGMENT
??_C@_09JOGO@Save?5Game?$AA@ DB 'Save Game', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07BFAH@Options?$AA@
_DATA	SEGMENT
??_C@_07BFAH@Options?$AA@ DB 'Options', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DJPG@New?5Game?$AA@
_DATA	SEGMENT
??_C@_08DJPG@New?5Game?$AA@ DB 'New Game', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09KDNE@Load?5Game?$AA@
_DATA	SEGMENT
??_C@_09KDNE@Load?5Game?$AA@ DB 'Load Game', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@JMOL@Quit?5Diablo?$AA@
_DATA	SEGMENT
??_C@_0M@JMOL@Quit?5Diablo?$AA@ DB 'Quit Diablo', 00H	; `string'
_DATA	ENDS
_DATA	SEGMENT
_sgSingleMenu DD 080000000H
	DD	FLAT:??_C@_09JOGO@Save?5Game?$AA@
	DD	FLAT:_gamemenu_save_game
	DD	080000000H
	DD	FLAT:??_C@_07BFAH@Options?$AA@
	DD	FLAT:_gamemenu_options
	DD	080000000H
	DD	FLAT:??_C@_08DJPG@New?5Game?$AA@
	DD	FLAT:_gamemenu_new_game
	DD	080000000H
	DD	FLAT:??_C@_09KDNE@Load?5Game?$AA@
	DD	FLAT:_gamemenu_load_game
	DD	080000000H
	DD	FLAT:??_C@_0M@JMOL@Quit?5Diablo?$AA@
	DD	FLAT:_gamemenu_quit_game
	DD	080000000H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_0BA@KHHO@Restart?5In?5Town?$AA@
_DATA	SEGMENT
??_C@_0BA@KHHO@Restart?5In?5Town?$AA@ DB 'Restart In Town', 00H ; `string'
_DATA	ENDS
_DATA	SEGMENT
_sgMultiMenu DD	080000000H
	DD	FLAT:??_C@_07BFAH@Options?$AA@
	DD	FLAT:_gamemenu_options
	DD	080000000H
	DD	FLAT:??_C@_08DJPG@New?5Game?$AA@
	DD	FLAT:_gamemenu_new_game
	DD	080000000H
	DD	FLAT:??_C@_0BA@KHHO@Restart?5In?5Town?$AA@
	DD	FLAT:_gamemenu_restart_town
	DD	080000000H
	DD	FLAT:??_C@_0M@JMOL@Quit?5Diablo?$AA@
	DD	FLAT:_gamemenu_quit_game
	DD	080000000H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_05CEKJ@Gamma?$AA@
_DATA	SEGMENT
??_C@_05CEKJ@Gamma?$AA@ DB 'Gamma', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@JDNH@Previous?5Menu?$AA@
_DATA	SEGMENT
??_C@_0O@JDNH@Previous?5Menu?$AA@ DB 'Previous Menu', 00H ; `string'
_DATA	ENDS
_DATA	SEGMENT
	ORG $+4
_sgOptionMenu DD 0c0000000H
	DD	00H
	DD	FLAT:@gamemenu_music_volume@4
	DD	0c0000000H
	DD	00H
	DD	FLAT:@gamemenu_sound_volume@4
	DD	0c0000000H
	DD	FLAT:??_C@_05CEKJ@Gamma?$AA@
	DD	FLAT:@gamemenu_gamma@4
	DD	080000000H
	DD	00H
	DD	FLAT:_gamemenu_color_cycling
	DD	080000000H
	DD	FLAT:??_C@_0O@JDNH@Previous?5Menu?$AA@
	DD	FLAT:_gamemenu_previous
	DD	080000000H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_05PHIM@Music?$AA@
_DATA	SEGMENT
??_C@_05PHIM@Music?$AA@ DB 'Music', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@CHLE@Music?5Disabled?$AA@
_DATA	SEGMENT
??_C@_0P@CHLE@Music?5Disabled?$AA@ DB 'Music Disabled', 00H ; `string'
_DATA	ENDS
_DATA	SEGMENT
_music_toggle_names DD FLAT:??_C@_05PHIM@Music?$AA@
	DD	FLAT:??_C@_0P@CHLE@Music?5Disabled?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05NJPO@Sound?$AA@
_DATA	SEGMENT
??_C@_05NJPO@Sound?$AA@ DB 'Sound', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@IIDL@Sound?5Disabled?$AA@
_DATA	SEGMENT
??_C@_0P@IIDL@Sound?5Disabled?$AA@ DB 'Sound Disabled', 00H ; `string'
_DATA	ENDS
_DATA	SEGMENT
_sound_toggle_names DD FLAT:??_C@_05NJPO@Sound?$AA@
	DD	FLAT:??_C@_0P@IIDL@Sound?5Disabled?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0BC@HAJJ@Color?5Cycling?5Off?$AA@
_DATA	SEGMENT
??_C@_0BC@HAJJ@Color?5Cycling?5Off?$AA@ DB 'Color Cycling Off', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@JPMD@Color?5Cycling?5On?$AA@
_DATA	SEGMENT
??_C@_0BB@JPMD@Color?5Cycling?5On?$AA@ DB 'Color Cycling On', 00H ; `string'
_DATA	ENDS
_DATA	SEGMENT
_color_cycling_toggle_names DD FLAT:??_C@_0BC@HAJJ@Color?5Cycling?5Off?$AA@
	DD	FLAT:??_C@_0BB@JPMD@Color?5Cycling?5On?$AA@
_DATA	ENDS
PUBLIC	_gamemenu_enable_single
PUBLIC	_gamemenu_enable_multi
EXTRN	@gmenu_call_proc@8:NEAR
EXTRN	_PressEscKey:NEAR
EXTRN	_gbMaxPlayers:BYTE
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_previous
_TEXT	SEGMENT
_gamemenu_previous PROC NEAR				; COMDAT
; File Source/gamemenu.cpp
; Line 46
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85017
; Line 47
	mov	edx, OFFSET FLAT:_gamemenu_enable_single
; Line 48
	mov	ecx, OFFSET FLAT:_sgSingleMenu
; Line 49
	jmp	SHORT $L85018
$L85017:
; Line 50
	mov	edx, OFFSET FLAT:_gamemenu_enable_multi
; Line 51
	mov	ecx, OFFSET FLAT:_sgMultiMenu
$L85018:
; Line 53
	call	@gmenu_call_proc@8
; Line 54
	jmp	_PressEscKey
_gamemenu_previous ENDP
_TEXT	ENDS
EXTRN	@gmenu_enable@8:NEAR
EXTRN	_gbValidSaveFile:DWORD
EXTRN	_myplr:DWORD
EXTRN	_plr:BYTE
EXTRN	_deathflag:DWORD
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_enable_single
_TEXT	SEGMENT
_gamemenu_enable_single PROC NEAR			; COMDAT
; Line 61
	mov	edx, DWORD PTR _gbValidSaveFile
	mov	ecx, OFFSET FLAT:_sgSingleMenu+36
	call	@gmenu_enable@8
; Line 64
	mov	eax, DWORD PTR _myplr
	xor	edx, edx
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax], 8
	je	SHORT $L85021
	cmp	DWORD PTR _deathflag, edx
	jne	SHORT $L85021
; Line 65
	inc	edx
$L85021:
; Line 67
	mov	ecx, OFFSET FLAT:_sgSingleMenu
	jmp	@gmenu_enable@8
_gamemenu_enable_single ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _gamemenu_enable_multi
_TEXT	SEGMENT
_gamemenu_enable_multi PROC NEAR			; COMDAT
; Line 72
	mov	edx, DWORD PTR _deathflag
	mov	ecx, OFFSET FLAT:_sgMultiMenu+24
	jmp	@gmenu_enable@8
_gamemenu_enable_multi ENDP
_TEXT	ENDS
PUBLIC	_gamemenu_off
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_off
_TEXT	SEGMENT
_gamemenu_off PROC NEAR					; COMDAT
; Line 77
	xor	edx, edx
	xor	ecx, ecx
	jmp	@gmenu_call_proc@8
_gamemenu_off ENDP
_TEXT	ENDS
PUBLIC	_gamemenu_handle_previous
EXTRN	_gmenu_exception:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_handle_previous
_TEXT	SEGMENT
_gamemenu_handle_previous PROC NEAR			; COMDAT
; Line 82
	call	_gmenu_exception
	test	eax, eax
	je	SHORT $L85026
; Line 83
	jmp	_gamemenu_off
$L85026:
; Line 85
	jmp	_gamemenu_previous
_gamemenu_handle_previous ENDP
_TEXT	ENDS
EXTRN	_gbRunGame:DWORD
EXTRN	_drawpanflag:DWORD
EXTRN	@scrollrt_draw_game_screen@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_new_game
_TEXT	SEGMENT
_gamemenu_new_game PROC NEAR				; COMDAT
; Line 92
	xor	ecx, ecx
	mov	eax, OFFSET FLAT:_plr+317
	inc	ecx
$L85030:
; Line 93
	mov	DWORD PTR [eax-317], 11			; 0000000bH
; Line 94
	mov	BYTE PTR [eax], cl
	add	eax, 21720				; 000054d8H
	cmp	eax, OFFSET FLAT:_plr+87197
	jl	SHORT $L85030
; Line 97
	and	DWORD PTR _deathflag, 0
; Line 98
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
; Line 99
	call	@scrollrt_draw_game_screen@4
; Line 100
	and	DWORD PTR _gbRunGame, 0
; Line 101
	jmp	_gamemenu_off
_gamemenu_new_game ENDP
_TEXT	ENDS
EXTRN	_gbRunGameResult:DWORD
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_quit_game
_TEXT	SEGMENT
_gamemenu_quit_game PROC NEAR				; COMDAT
; Line 107
	call	_gamemenu_new_game
; Line 108
	and	DWORD PTR _gbRunGameResult, 0
; Line 109
	ret	0
_gamemenu_quit_game ENDP
_TEXT	ENDS
EXTRN	@SetCursor_@4:NEAR
EXTRN	_DisableInputWndProc@16:NEAR
EXTRN	@LoadGame@4:NEAR
EXTRN	@SetWindowProc@4:NEAR
EXTRN	_interface_msg_pump:NEAR
EXTRN	@PaletteFadeIn@4:NEAR
EXTRN	@PaletteFadeOut@4:NEAR
EXTRN	_DrawAndBlit:NEAR
EXTRN	@InitDiabloMsg@4:NEAR
EXTRN	_ClrDiabloMsg:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_load_game
_TEXT	SEGMENT
_gamemenu_load_game PROC NEAR				; COMDAT
; Line 112
	push	edi
; Line 113
	mov	ecx, OFFSET FLAT:_DisableInputWndProc@16
	call	@SetWindowProc@4
	mov	edi, eax
; Line 114
	call	_gamemenu_off
; Line 115
	xor	ecx, ecx
	call	@SetCursor_@4
; Line 116
	mov	cl, 10					; 0000000aH
	call	@InitDiabloMsg@4
; Line 117
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
; Line 118
	call	_DrawAndBlit
; Line 119
	xor	ecx, ecx
	call	@LoadGame@4
; Line 120
	call	_ClrDiabloMsg
; Line 121
	push	8
	pop	ecx
	call	@PaletteFadeOut@4
; Line 122
	and	DWORD PTR _deathflag, 0
; Line 123
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
; Line 124
	call	_DrawAndBlit
; Line 125
	push	8
	pop	ecx
	call	@PaletteFadeIn@4
; Line 126
	xor	ecx, ecx
	inc	ecx
	call	@SetCursor_@4
; Line 127
	call	_interface_msg_pump
; Line 128
	mov	ecx, edi
	pop	edi
	jmp	@SetWindowProc@4
_gamemenu_load_game ENDP
_TEXT	ENDS
EXTRN	_pcurs:DWORD
EXTRN	_SaveGame:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_save_game
_TEXT	SEGMENT
_gamemenu_save_game PROC NEAR				; COMDAT
; Line 134
	cmp	DWORD PTR _pcurs, 1
	jne	SHORT $L85040
; Line 135
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax], 8
	je	SHORT $L85039
	cmp	DWORD PTR _deathflag, 0
	jne	SHORT $L85039
	push	edi
; Line 138
	mov	ecx, OFFSET FLAT:_DisableInputWndProc@16
	call	@SetWindowProc@4
; Line 139
	xor	ecx, ecx
	mov	edi, eax
	call	@SetCursor_@4
; Line 140
	call	_gamemenu_off
; Line 141
	mov	cl, 11					; 0000000bH
	call	@InitDiabloMsg@4
; Line 142
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
; Line 143
	call	_DrawAndBlit
; Line 144
	call	_SaveGame
; Line 145
	call	_ClrDiabloMsg
; Line 147
	xor	ecx, ecx
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	inc	ecx
	call	@SetCursor_@4
; Line 148
	call	_interface_msg_pump
; Line 149
	mov	ecx, edi
	pop	edi
	jmp	@SetWindowProc@4
$L85039:
; Line 136
	jmp	_gamemenu_off
$L85040:
; Line 152
	ret	0
_gamemenu_save_game ENDP
_TEXT	ENDS
EXTRN	@NetSendCmd@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_restart_town
_TEXT	SEGMENT
_gamemenu_restart_town PROC NEAR			; COMDAT
; Line 157
	xor	ecx, ecx
	mov	dl, 83					; 00000053H
	inc	ecx
	jmp	@NetSendCmd@8
_gamemenu_restart_town ENDP
_TEXT	ENDS
PUBLIC	_gamemenu_get_music
PUBLIC	_gamemenu_get_sound
PUBLIC	_gamemenu_get_color_cycling
PUBLIC	_gamemenu_get_gamma
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_options
_TEXT	SEGMENT
_gamemenu_options PROC NEAR				; COMDAT
; Line 162
	call	_gamemenu_get_music
; Line 163
	call	_gamemenu_get_sound
; Line 164
	call	_gamemenu_get_gamma
; Line 165
	call	_gamemenu_get_color_cycling
; Line 166
	xor	edx, edx
	mov	ecx, OFFSET FLAT:_sgOptionMenu
	jmp	@gmenu_call_proc@8
_gamemenu_options ENDP
_TEXT	ENDS
PUBLIC	@gamemenu_sound_music_toggle@12
EXTRN	@sound_get_or_set_music_volume@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_get_music
_TEXT	SEGMENT
_gamemenu_get_music PROC NEAR				; COMDAT
; Line 171
	xor	ecx, ecx
	inc	ecx
	call	@sound_get_or_set_music_volume@4
	push	eax
	mov	edx, OFFSET FLAT:_sgOptionMenu
	mov	ecx, OFFSET FLAT:_music_toggle_names
	call	@gamemenu_sound_music_toggle@12
; Line 172
	ret	0
_gamemenu_get_music ENDP
_TEXT	ENDS
EXTRN	@gmenu_slider_1@16:NEAR
EXTRN	@gmenu_slider_3@8:NEAR
EXTRN	_gbSndInited:BYTE
; Function compile flags: /Ogsy
;	COMDAT @gamemenu_sound_music_toggle@12
_TEXT	SEGMENT
_volume$ = 8
@gamemenu_sound_music_toggle@12 PROC NEAR		; COMDAT
; _names$ = ecx
; _menu_item$ = edx
; Line 176
	cmp	BYTE PTR _gbSndInited, 0
	push	esi
	mov	esi, edx
	je	SHORT $L85053
; Line 177
	or	BYTE PTR [esi+3], -64			; ffffffc0H
; Line 178
	mov	eax, DWORD PTR [ecx]
; Line 179
	push	17					; 00000011H
	mov	ecx, esi
	pop	edx
	mov	DWORD PTR [esi+4], eax
	call	@gmenu_slider_3@8
; Line 180
	mov	edx, -1600				; fffff9c0H
	mov	ecx, esi
	push	DWORD PTR _volume$[esp]
	push	0
	call	@gmenu_slider_1@16
; Line 181
	jmp	SHORT $L85054
$L85053:
; Line 182
	and	BYTE PTR [esi+3], 63			; 0000003fH
; Line 183
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], eax
$L85054:
	pop	esi
; Line 185
	ret	4
@gamemenu_sound_music_toggle@12 ENDP
_TEXT	ENDS
EXTRN	@sound_get_or_set_sound_volume@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_get_sound
_TEXT	SEGMENT
_gamemenu_get_sound PROC NEAR				; COMDAT
; Line 189
	xor	ecx, ecx
	inc	ecx
	call	@sound_get_or_set_sound_volume@4
	push	eax
	mov	edx, OFFSET FLAT:_sgOptionMenu+12
	mov	ecx, OFFSET FLAT:_sound_toggle_names
	call	@gamemenu_sound_music_toggle@12
; Line 190
	ret	0
_gamemenu_get_sound ENDP
_TEXT	ENDS
EXTRN	_palette_get_colour_cycling:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_get_color_cycling
_TEXT	SEGMENT
_gamemenu_get_color_cycling PROC NEAR			; COMDAT
; Line 194
	call	_palette_get_colour_cycling
	and	eax, 1
	mov	eax, DWORD PTR _color_cycling_toggle_names[eax*4]
	mov	DWORD PTR _sgOptionMenu+40, eax
; Line 195
	ret	0
_gamemenu_get_color_cycling ENDP
_TEXT	ENDS
EXTRN	@UpdateGamma@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_get_gamma
_TEXT	SEGMENT
_gamemenu_get_gamma PROC NEAR				; COMDAT
; Line 198
	push	esi
; Line 199
	push	15					; 0000000fH
	mov	esi, OFFSET FLAT:_sgOptionMenu+24
	pop	edx
	mov	ecx, esi
	call	@gmenu_slider_3@8
; Line 200
	xor	ecx, ecx
	call	@UpdateGamma@4
	push	eax
	push	100					; 00000064H
	push	30					; 0000001eH
	mov	ecx, esi
	pop	edx
	call	@gmenu_slider_1@16
	pop	esi
; Line 201
	ret	0
_gamemenu_get_gamma ENDP
_TEXT	ENDS
PUBLIC	@gamemenu_slider_music_sound@4
EXTRN	_music_stop:NEAR
EXTRN	@music_start@4:NEAR
EXTRN	_gbMusicOn:BYTE
EXTRN	_leveltype:BYTE
; Function compile flags: /Ogsy
;	COMDAT @gamemenu_music_volume@4
_TEXT	SEGMENT
@gamemenu_music_volume@4 PROC NEAR			; COMDAT
; _volume$ = ecx
; Line 204
	push	ebx
; Line 205
	xor	ebx, ebx
	cmp	ecx, ebx
	je	SHORT $L85061
; Line 206
	cmp	BYTE PTR _gbMusicOn, bl
	je	SHORT $L85062
; Line 207
	mov	BYTE PTR _gbMusicOn, bl
; Line 208
	call	_music_stop
; Line 209
	mov	ecx, -1600				; fffff9c0H
	call	@sound_get_or_set_music_volume@4
; Line 210
	jmp	SHORT $L85182
$L85062:
; Line 214
	xor	ecx, ecx
	mov	BYTE PTR _gbMusicOn, 1
	call	@sound_get_or_set_music_volume@4
; Line 216
	jmp	SHORT $L85183
$L85061:
	push	esi
; Line 220
	mov	ecx, OFFSET FLAT:_sgOptionMenu
	call	@gamemenu_slider_music_sound@4
	mov	esi, eax
; Line 221
	mov	ecx, esi
	call	@sound_get_or_set_music_volume@4
; Line 223
	cmp	esi, -1600				; fffff9c0H
	pop	esi
	jne	SHORT $L85063
; Line 225
	cmp	BYTE PTR _gbMusicOn, bl
	je	SHORT $L85182
; Line 226
	mov	BYTE PTR _gbMusicOn, bl
; Line 227
	call	_music_stop
; Line 230
	jmp	SHORT $L85182
$L85063:
; Line 234
	cmp	BYTE PTR _gbMusicOn, bl
; Line 235
	jne	SHORT $L85182
; Line 239
	mov	BYTE PTR _gbMusicOn, 1
$L85183:
; Line 240
	movzx	ecx, BYTE PTR _leveltype
	call	@music_start@4
$L85182:
	pop	ebx
; Line 241
	jmp	_gamemenu_get_music
@gamemenu_music_volume@4 ENDP
_TEXT	ENDS
EXTRN	@gmenu_slider_get@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @gamemenu_slider_music_sound@4
_TEXT	SEGMENT
@gamemenu_slider_music_sound@4 PROC NEAR		; COMDAT
; _menu_item$ = ecx
; Line 246
	push	0
	mov	edx, -1600				; fffff9c0H
	call	@gmenu_slider_get@12
; Line 247
	ret	0
@gamemenu_slider_music_sound@4 ENDP
_TEXT	ENDS
EXTRN	@PlaySFX@4:NEAR
EXTRN	_FreeMonsterSnd:NEAR
EXTRN	_gbSoundOn:BYTE
; Function compile flags: /Ogsy
;	COMDAT @gamemenu_sound_volume@4
_TEXT	SEGMENT
@gamemenu_sound_volume@4 PROC NEAR			; COMDAT
; _volume$ = ecx
; Line 250
	push	ebx
; Line 251
	xor	ebx, ebx
	cmp	ecx, ebx
	je	SHORT $L85072
; Line 252
	cmp	BYTE PTR _gbSoundOn, bl
	je	SHORT $L85073
; Line 253
	mov	BYTE PTR _gbSoundOn, bl
; Line 254
	call	_FreeMonsterSnd
; Line 255
	mov	ecx, -1600				; fffff9c0H
$L85191:
	call	@sound_get_or_set_sound_volume@4
; Line 256
	jmp	SHORT $L85079
$L85073:
; Line 257
	mov	BYTE PTR _gbSoundOn, 1
; Line 258
	xor	ecx, ecx
; Line 260
	jmp	SHORT $L85191
$L85072:
	push	esi
; Line 261
	mov	ecx, OFFSET FLAT:_sgOptionMenu+12
	call	@gamemenu_slider_music_sound@4
	mov	esi, eax
; Line 262
	mov	ecx, esi
	call	@sound_get_or_set_sound_volume@4
; Line 263
	cmp	esi, -1600				; fffff9c0H
	pop	esi
	jne	SHORT $L85076
; Line 264
	cmp	BYTE PTR _gbSoundOn, bl
	je	SHORT $L85079
; Line 265
	mov	BYTE PTR _gbSoundOn, bl
; Line 266
	call	_FreeMonsterSnd
; Line 268
	jmp	SHORT $L85079
$L85076:
	cmp	BYTE PTR _gbSoundOn, bl
	jne	SHORT $L85079
; Line 269
	mov	BYTE PTR _gbSoundOn, 1
$L85079:
; Line 272
	push	69					; 00000045H
	pop	ecx
	call	@PlaySFX@4
	pop	ebx
; Line 273
	jmp	_gamemenu_get_sound
@gamemenu_sound_volume@4 ENDP
_TEXT	ENDS
PUBLIC	_gamemenu_slider_gamma
; Function compile flags: /Ogsy
;	COMDAT @gamemenu_gamma@4
_TEXT	SEGMENT
@gamemenu_gamma@4 PROC NEAR				; COMDAT
; _gamma$ = ecx
; Line 278
	test	ecx, ecx
	je	SHORT $L85083
; Line 279
	xor	ecx, ecx
	call	@UpdateGamma@4
	sub	eax, 30					; 0000001eH
	neg	eax
	sbb	eax, eax
	and	al, -70					; ffffffbaH
	add	eax, 100				; 00000064H
; Line 283
	jmp	SHORT $L85086
$L85083:
; Line 284
	call	_gamemenu_slider_gamma
$L85086:
; Line 287
	mov	ecx, eax
	call	@UpdateGamma@4
; Line 288
	jmp	_gamemenu_get_gamma
@gamemenu_gamma@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _gamemenu_slider_gamma
_TEXT	SEGMENT
_gamemenu_slider_gamma PROC NEAR			; COMDAT
; Line 293
	push	100					; 00000064H
	push	30					; 0000001eH
	pop	edx
	mov	ecx, OFFSET FLAT:_sgOptionMenu+24
	call	@gmenu_slider_get@12
; Line 294
	ret	0
_gamemenu_slider_gamma ENDP
_TEXT	ENDS
EXTRN	@palette_set_color_cycling@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gamemenu_color_cycling
_TEXT	SEGMENT
_gamemenu_color_cycling PROC NEAR			; COMDAT
; Line 298
	call	_palette_get_colour_cycling
	neg	al
	sbb	al, al
	inc	al
	mov	cl, al
	call	@palette_set_color_cycling@4
; Line 299
	call	_palette_get_colour_cycling
	and	eax, 1
	mov	eax, DWORD PTR _color_cycling_toggle_names[eax*4]
	mov	DWORD PTR _sgOptionMenu+40, eax
; Line 300
	ret	0
_gamemenu_color_cycling ENDP
_TEXT	ENDS
END
