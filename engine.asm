; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/engine.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0CA@FMFP@C?3?2Src?2Diablo?2Source?2ENGINE?4CPP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@CEOD@Zero?5length?5SFILE?3?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@IOEJ@LoadFileWithMem?$CINULL?$CJ?3?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _qmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDrawDatOnly@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecodeOnly@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecDatOnly@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDrawHdrOnly@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecodeHdrOnly@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecDatLightOnly@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecDatLightEntry@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecDatLightTrans@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecodeLightOnly@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecodeHdrLightOnly@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecodeHdrLightTrans@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDrawHdrLightRed@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cel2DecDatOnly@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cel2DrawHdrOnly@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cel2DecodeHdrOnly@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cel2DecDatLightOnly@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cel2DecDatLightEntry@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cel2DecDatLightTrans@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cel2DecodeHdrLight@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cel2DecodeLightTrans@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cel2DrawHdrLightRed@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecodeRect@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDecodeClr@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CelDrawHdrClrHL@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ENG_set_pixel@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @engine_draw_pixel@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawLine@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @GetDirection@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetRndSeed@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetRndSeed
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @random@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _engine_c_init
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _mem_init_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _mem_atexit_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _mem_free_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DiabloAllocPtr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @mem_free_dbg@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadFileInMem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadFileWithMem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2ApplyTrans@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecodeFrm1@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecDatFrm1@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecodeFrm2@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecDatFrm2@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecodeFrm3@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecDatLightTbl1@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecodeLightTbl@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecodeFrm4@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecDatFrm4@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecodeClrHL@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecDatClrHL@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecodeFrm5@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecDatLightTbl2@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Cl2DecodeFrm6@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlayInGameMovie@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_engine_c_init_funcs
PUBLIC	_rand_increment
PUBLIC	_rand_multiplier
_DATA	SEGMENT
COMM	_gbPixelCol:BYTE
COMM	_dword_52B970:DWORD
COMM	_orgseed:DWORD
COMM	_SeedCount:DWORD
COMM	_dword_52B99C:DWORD
COMM	_sgnWidth:DWORD
COMM	_sglGameSeed:DWORD
_DATA	ENDS
CONST	SEGMENT
_rand_increment DD 01H
_rand_multiplier DD 015a4e35H
CONST	ENDS
CRT$XCU	SEGMENT
_engine_c_init_funcs DD FLAT:_engine_c_init
CRT$XCU	ENDS
PUBLIC	@CelDrawDatOnly@16
; Function compile flags: /Ogsy
;	COMDAT @CelDrawDatOnly@16
_TEXT	SEGMENT
_dwRLESize$ = 8
_dwRLEWdt$ = 12
_v6$ = -4
_v7$ = 8
@CelDrawDatOnly@16 PROC NEAR				; COMDAT
; _pDecodeTo$ = ecx
; _pRLEBytes$ = edx
; File Source/engine.cpp
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 29
	test	ecx, ecx
	je	$L85005
	test	edx, edx
	je	$L85005
	mov	eax, DWORD PTR _dwRLESize$[ebp]
	push	ebx
	push	esi
	push	edi
; Line 30
	mov	edi, edx
; Line 64
	add	edx, eax
	mov	esi, ecx
	mov	DWORD PTR -8+[ebp], edx
$L85003:
	mov	eax, DWORD PTR _dwRLEWdt$[ebp]
	mov	DWORD PTR _v6$[ebp], eax
$L85010:
	movzx	ecx, BYTE PTR [edi]
	inc	edi
	mov	DWORD PTR _v7$[ebp], ecx
	test	cl, 128					; 00000080H
	je	SHORT $L86967
	neg	BYTE PTR _v7$[ebp]
	mov	eax, DWORD PTR _v7$[ebp]
	add	esi, eax
	sub	DWORD PTR _v6$[ebp], eax
	jmp	SHORT $L86971
$L86967:
; Line 45
	sub	DWORD PTR _v6$[ebp], ecx
; Line 46
	mov	eax, ecx
	shr	eax, 1
; Line 47
	test	BYTE PTR _v7$[ebp], 1
	je	SHORT $L85019
; Line 48
	mov	dl, BYTE PTR [edi]
	mov	BYTE PTR [esi], dl
	inc	esi
	inc	edi
; Line 49
	test	eax, eax
	je	SHORT $L85007
$L85019:
; Line 53
	shr	ecx, 2
	test	al, 1
; Line 54
	je	SHORT $L85023
; Line 55
	mov	ax, WORD PTR [edi]
; Line 56
	inc	edi
	mov	WORD PTR [esi], ax
	inc	edi
; Line 57
	inc	esi
	inc	esi
; Line 58
	test	ecx, ecx
	je	SHORT $L85007
$L85023:
; Line 61
	mov	eax, ecx
	mov	ecx, esi
	shl	eax, 2
	test	eax, eax
	jbe	SHORT $L86958
	mov	edx, edi
	mov	DWORD PTR 8+[ebp], eax
	sub	edx, esi
$L86957:
	mov	bl, BYTE PTR [edx+ecx]
	mov	BYTE PTR [ecx], bl
	inc	ecx
	dec	DWORD PTR 8+[ebp]
	jne	SHORT $L86957
$L86958:
; Line 62
	add	edi, eax
; Line 63
	add	esi, eax
$L85007:
; Line 64
	cmp	DWORD PTR _v6$[ebp], 0
$L86971:
	jne	SHORT $L85010
; Line 66
	mov	eax, -768				; fffffd00H
	sub	eax, DWORD PTR _dwRLEWdt$[ebp]
$LABEL_14$85017:
	add	esi, eax
; Line 67
	cmp	DWORD PTR -8+[ebp], edi
	jne	$L85003
	pop	edi
	pop	esi
	pop	ebx
$L85005:
; Line 69
	leave
	ret	8
@CelDrawDatOnly@16 ENDP
_TEXT	ENDS
PUBLIC	@CelDecodeOnly@20
EXTRN	_gpBuffer:DWORD
EXTRN	_screen_y_times_768:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CelDecodeOnly@20
_TEXT	SEGMENT
_pCelBuff$ = 8
_frame$ = 12
_frame_width$ = 16
@CelDecodeOnly@20 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 72
	push	ebx
	push	esi
; Line 73
	mov	esi, DWORD PTR _gpBuffer
	push	edi
	test	esi, esi
	mov	edi, edx
	mov	ebx, ecx
	je	SHORT $L85036
; Line 74
	mov	eax, DWORD PTR _pCelBuff$[esp+8]
	test	eax, eax
	je	SHORT $L85036
; Line 79
	mov	edx, DWORD PTR _frame$[esp+8]
	push	DWORD PTR _frame_width$[esp+8]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [eax+edx*4+4]
	sub	edx, ecx
	push	edx
	lea	edx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _screen_y_times_768[edi*4]
	add	ecx, esi
	add	ecx, ebx
	call	@CelDrawDatOnly@16
$L85036:
	pop	edi
	pop	esi
	pop	ebx
; Line 81
	ret	12					; 0000000cH
@CelDecodeOnly@20 ENDP
_TEXT	ENDS
PUBLIC	@CelDecDatOnly@16
; Function compile flags: /Ogsy
;	COMDAT @CelDecDatOnly@16
_TEXT	SEGMENT
_frame$ = 8
_frame_width$ = 12
@CelDecDatOnly@16 PROC NEAR				; COMDAT
; _pBuff$ = ecx
; _pCelBuff$ = edx
; Line 85
	test	edx, edx
	je	SHORT $L85052
; Line 86
	test	ecx, ecx
	je	SHORT $L85052
	push	esi
; Line 91
	mov	esi, DWORD PTR _frame$[esp]
	push	DWORD PTR _frame_width$[esp]
	mov	eax, DWORD PTR [edx+esi*4]
	mov	esi, DWORD PTR [edx+esi*4+4]
	sub	esi, eax
	add	edx, eax
	push	esi
	call	@CelDrawDatOnly@16
	pop	esi
$L85052:
; Line 93
	ret	8
@CelDecDatOnly@16 ENDP
_TEXT	ENDS
PUBLIC	@CelDrawHdrOnly@28
; Function compile flags: /Ogsy
;	COMDAT @CelDrawHdrOnly@28
_TEXT	SEGMENT
_screen_x$ = -8
_screen_y$ = -4
_pCelBuff$ = 8
_frame$ = 12
_frame_width$ = 16
_always_0$ = 20
_direction$ = 24
@CelDrawHdrOnly@28 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 96
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 106
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _screen_y$[ebp], edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	SHORT $L85082
; Line 107
	mov	eax, DWORD PTR _pCelBuff$[ebp]
	test	eax, eax
	je	SHORT $L85082
; Line 108
	mov	ecx, DWORD PTR _frame$[ebp]
; Line 110
	mov	esi, DWORD PTR _always_0$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	ecx, DWORD PTR [edx+eax]
	mov	bx, WORD PTR [ecx+esi]
; Line 111
	test	bx, bx
	movzx	edi, bx
	je	SHORT $L85082
; Line 112
	mov	ebx, DWORD PTR _direction$[ebp]
	cmp	ebx, 8
	je	SHORT $L85084
	mov	bx, WORD PTR [ecx+ebx]
	test	bx, bx
	je	SHORT $L85084
; Line 113
	movzx	eax, bx
	sub	eax, edi
; Line 114
	jmp	SHORT $L85086
$L85084:
; Line 115
	mov	ebx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+ebx*4+4]
	sub	eax, edi
	sub	eax, edx
$L85086:
; Line 120
	push	DWORD PTR _frame_width$[ebp]
	lea	edx, DWORD PTR [edi+ecx]
	shl	esi, 4
	push	eax
	mov	eax, DWORD PTR _screen_y$[ebp]
	sub	eax, esi
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	call	@CelDrawDatOnly@16
$L85082:
	pop	edi
	pop	esi
	pop	ebx
; Line 124
	leave
	ret	20					; 00000014H
@CelDrawHdrOnly@28 ENDP
_TEXT	ENDS
PUBLIC	@CelDecodeHdrOnly@24
; Function compile flags: /Ogsy
;	COMDAT @CelDecodeHdrOnly@24
_TEXT	SEGMENT
_pBuff$ = -4
_frame$ = 8
_frame_width$ = 12
_always_0$ = 16
_direction$ = 20
@CelDecodeHdrOnly@24 PROC NEAR				; COMDAT
; _pBuff$ = ecx
; _pCelBuff$ = edx
; Line 127
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 134
	test	edx, edx
	mov	DWORD PTR _pBuff$[ebp], ecx
	je	SHORT $L85112
; Line 135
	test	ecx, ecx
	je	SHORT $L85112
; Line 136
	mov	eax, DWORD PTR _frame$[ebp]
; Line 138
	mov	ecx, DWORD PTR _always_0$[ebp]
	push	ebx
	mov	edi, DWORD PTR [edx+eax*4]
	lea	esi, DWORD PTR [edi+edx]
	mov	bx, WORD PTR [esi+ecx]
	movzx	ecx, bx
; Line 139
	test	bx, bx
	pop	ebx
	je	SHORT $L85112
; Line 140
	mov	eax, DWORD PTR [edx+eax*4+4]
; Line 141
	mov	edx, DWORD PTR _direction$[ebp]
	sub	eax, edi
	cmp	edx, 8
	je	SHORT $L85115
	mov	dx, WORD PTR [esi+edx]
	test	dx, dx
	je	SHORT $L85115
; Line 142
	movzx	eax, dx
$L85115:
; Line 145
	push	DWORD PTR _frame_width$[ebp]
	sub	eax, ecx
	lea	edx, DWORD PTR [ecx+esi]
	mov	ecx, DWORD PTR _pBuff$[ebp]
	push	eax
	call	@CelDrawDatOnly@16
$L85112:
	pop	edi
	pop	esi
; Line 149
	leave
	ret	16					; 00000010H
@CelDecodeHdrOnly@24 ENDP
_TEXT	ENDS
PUBLIC	@CelDecDatLightOnly@16
PUBLIC	@CelDecDatLightEntry@16
EXTRN	_pLightTbl:DWORD
EXTRN	_light_table_index:DWORD
; Function compile flags: /Ogsy
;	COMDAT @CelDecDatLightOnly@16
_TEXT	SEGMENT
_frame_content_size$ = 8
_frame_width$ = 12
_v4$ = -8
_v5$ = -4
_v8$ = 8
@CelDecDatLightOnly@16 PROC NEAR			; COMDAT
; _pDecodeTo$ = ecx
; _pRLEBytes$ = edx
; Line 152
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 161
	test	ecx, ecx
	je	SHORT $L85137
	test	edx, edx
	je	SHORT $L85137
; Line 165
	mov	eax, DWORD PTR _frame_content_size$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _light_table_index
	shl	esi, 8
	add	esi, DWORD PTR _pLightTbl
	push	edi
	mov	DWORD PTR _v4$[ebp], edx
	mov	DWORD PTR _v5$[ebp], ecx
	lea	ebx, DWORD PTR [edx+eax]
$L85135:
; Line 167
	mov	edi, DWORD PTR _frame_width$[ebp]
$L85142:
; Line 170
	mov	eax, DWORD PTR _v4$[ebp]
	movzx	eax, BYTE PTR [eax]
	inc	DWORD PTR _v4$[ebp]
	mov	DWORD PTR _v8$[ebp], eax
; Line 171
	test	al, 128					; 00000080H
	jne	SHORT $L86987
; Line 174
	mov	cl, BYTE PTR _v8$[ebp]
	sub	edi, eax
	lea	eax, DWORD PTR _v4$[ebp]
	mov	edx, esi
	push	eax
	lea	eax, DWORD PTR _v5$[ebp]
	push	eax
	call	@CelDecDatLightEntry@16
; Line 176
	test	edi, edi
	jmp	SHORT $L86990
$L86987:
; Line 179
	neg	BYTE PTR _v8$[ebp]
; Line 180
	mov	eax, DWORD PTR _v8$[ebp]
	add	DWORD PTR _v5$[ebp], eax
; Line 181
	sub	edi, eax
$L86990:
; Line 182
	jne	SHORT $L85142
; Line 184
	mov	eax, -768				; fffffd00H
	sub	eax, DWORD PTR _frame_width$[ebp]
$LABEL_9$85147:
	add	DWORD PTR _v5$[ebp], eax
; Line 185
	cmp	ebx, DWORD PTR _v4$[ebp]
	jne	SHORT $L85135
	pop	edi
	pop	esi
	pop	ebx
$L85137:
; Line 187
	leave
	ret	8
@CelDecDatLightOnly@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @CelDecDatLightEntry@16
_TEXT	SEGMENT
_pDecodeTo$ = 8
_pRLEBytes$ = 12
@CelDecDatLightEntry@16 PROC NEAR			; COMDAT
; _n$ = cl
; _LightIndex$ = edx
; Line 194
	movzx	eax, cl
	push	esi
	mov	esi, edx
	test	eax, eax
	jle	SHORT $L85162
	mov	ecx, DWORD PTR _pDecodeTo$[esp]
	push	ebx
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR _pRLEBytes$[esp+8]
$L85160:
; Line 195
	mov	edx, DWORD PTR [eax]
	mov	ebx, DWORD PTR [ecx]
	movsx	edx, BYTE PTR [edx]
	mov	dl, BYTE PTR [edx+esi]
	mov	BYTE PTR [ebx], dl
; Line 196
	inc	DWORD PTR [eax]
; Line 197
	inc	DWORD PTR [ecx]
	dec	edi
	jne	SHORT $L85160
	pop	edi
	pop	ebx
$L85162:
	pop	esi
; Line 199
	ret	8
@CelDecDatLightEntry@16 ENDP
_TEXT	ENDS
PUBLIC	@CelDecDatLightTrans@16
EXTRN	__rotr:NEAR
; Function compile flags: /Ogsy
;	COMDAT @CelDecDatLightTrans@16
_TEXT	SEGMENT
_frame_content_size$ = 8
_frame_width$ = 12
_v6$ = -12
_v7$ = -4
_v8$ = 8
_v12$ = 8
_v21$ = 8
_v28$ = -8
@CelDecDatLightTrans@16 PROC NEAR			; COMDAT
; _pDecodeTo$ = ecx
; _pRLEBytes$ = edx
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 222
	test	ecx, ecx
	je	$L85195
	test	edx, edx
	je	$L85195
; Line 226
	mov	eax, DWORD PTR _frame_content_size$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _light_table_index
	mov	ebx, edx
	shl	edi, 8
	add	edi, DWORD PTR _pLightTbl
	mov	esi, ecx
	add	edx, eax
; Line 227
	and	ecx, 1
	mov	DWORD PTR _v6$[ebp], edx
	mov	DWORD PTR _v28$[ebp], ecx
$L85193:
; Line 229
	mov	eax, DWORD PTR _frame_width$[ebp]
	mov	DWORD PTR _v7$[ebp], eax
$L85200:
; Line 232
	movzx	eax, BYTE PTR [ebx]
	inc	ebx
	mov	DWORD PTR _v8$[ebp], eax
; Line 233
	test	al, 128					; 00000080H
	jne	$L87003
; Line 237
	sub	DWORD PTR _v7$[ebp], eax
; Line 238
	mov	ecx, esi
	and	ecx, 1
; Line 239
	shr	eax, 1
	cmp	ecx, DWORD PTR _v28$[ebp]
	jne	SHORT $L85204
; Line 240
	test	BYTE PTR _v8$[ebp], 1
	je	SHORT $LABEL_10$85206
; Line 242
	inc	ebx
; Line 243
	inc	esi
; Line 244
	test	eax, eax
	jne	SHORT $LABEL_17$85208
; Line 272
	jmp	$LABEL_20$85226
$L85204:
; Line 274
	test	BYTE PTR _v8$[ebp], 1
	jne	SHORT $L85228
$LABEL_17$85208:
; Line 247
	mov	ecx, eax
	shr	ecx, 1
	test	al, 1
	mov	DWORD PTR _v21$[ebp], ecx
; Line 248
	je	SHORT $LABEL_26$85210
; Line 250
	movsx	eax, BYTE PTR [ebx]
; Line 252
	movzx	eax, al
; Line 253
	inc	ebx
	mov	al, BYTE PTR [eax+edi]
	inc	ebx
	mov	BYTE PTR [esi], al
; Line 254
	inc	esi
	inc	esi
; Line 255
	test	ecx, ecx
	je	$LABEL_20$85226
$LABEL_26$85210:
; Line 258
	mov	ecx, DWORD PTR [ebx]
; Line 263
	push	16					; 00000010H
	movzx	eax, cl
	xor	cl, cl
	add	ebx, 4
	movzx	eax, BYTE PTR [eax+edi]
	add	eax, ecx
	push	eax
	mov	BYTE PTR [esi], al
	call	__rotr
; Line 265
	movzx	eax, al
	pop	ecx
; Line 266
	add	esi, 4
	mov	al, BYTE PTR [eax+edi]
; Line 267
	dec	DWORD PTR _v21$[ebp]
	mov	BYTE PTR [esi-2], al
	pop	ecx
; Line 268
	jne	SHORT $LABEL_26$85210
; Line 270
	jmp	SHORT $LABEL_20$85226
$L85228:
; Line 276
	movsx	ecx, BYTE PTR [ebx]
; Line 278
	movzx	ecx, cl
	inc	ebx
	mov	cl, BYTE PTR [ecx+edi]
	mov	BYTE PTR [esi], cl
	inc	esi
; Line 279
	test	eax, eax
	je	SHORT $LABEL_20$85226
$LABEL_10$85206:
; Line 282
	mov	ecx, eax
	shr	ecx, 1
	test	al, 1
	mov	DWORD PTR _v12$[ebp], ecx
; Line 283
	je	SHORT $LABEL_27$85234
; Line 287
	movsx	eax, BYTE PTR [ebx+1]
; Line 290
	movzx	eax, al
	add	ebx, 2
; Line 291
	add	esi, 2
	mov	al, BYTE PTR [eax+edi]
	mov	BYTE PTR [esi-1], al
; Line 292
	test	ecx, ecx
	je	SHORT $LABEL_20$85226
$LABEL_27$85234:
; Line 295
	mov	eax, DWORD PTR [ebx]
; Line 298
	push	8
	add	ebx, 4
	push	eax
	inc	esi
	call	__rotr
; Line 299
	movzx	ecx, al
	xor	al, al
; Line 301
	push	16					; 00000010H
	movzx	ecx, BYTE PTR [ecx+edi]
	add	ecx, eax
	push	ecx
	mov	BYTE PTR [esi], cl
	call	__rotr
; Line 304
	movzx	eax, al
	add	esp, 16					; 00000010H
	inc	esi
	mov	al, BYTE PTR [eax+edi]
	inc	esi
	mov	BYTE PTR [esi], al
; Line 305
	inc	esi
; Line 306
	dec	DWORD PTR _v12$[ebp]
; Line 307
	jne	SHORT $LABEL_27$85234
$LABEL_20$85226:
; Line 314
	cmp	DWORD PTR _v7$[ebp], 0
; Line 231
	jmp	SHORT $L87010
$L87003:
; Line 317
	neg	BYTE PTR _v8$[ebp]
; Line 318
	mov	eax, DWORD PTR _v8$[ebp]
	add	esi, eax
; Line 319
	sub	DWORD PTR _v7$[ebp], eax
$L87010:
; Line 320
	jne	$L85200
; Line 322
	mov	eax, -768				; fffffd00H
	sub	eax, DWORD PTR _frame_width$[ebp]
$LABEL_23$85251:
	add	esi, eax
; Line 323
	mov	al, BYTE PTR _v28$[ebp]
	dec	eax
	and	eax, 1
; Line 324
	cmp	DWORD PTR _v6$[ebp], ebx
	mov	DWORD PTR _v28$[ebp], eax
	jne	$L85193
	pop	edi
	pop	esi
	pop	ebx
$L85195:
; Line 326
	leave
	ret	8
@CelDecDatLightTrans@16 ENDP
_TEXT	ENDS
PUBLIC	@CelDecodeLightOnly@20
; Function compile flags: /Ogsy
;	COMDAT @CelDecodeLightOnly@20
_TEXT	SEGMENT
_screen_x$ = -8
_screen_y$ = -4
_pCelBuff$ = 8
_frame$ = 12
_frame_width$ = 16
@CelDecodeLightOnly@20 PROC NEAR			; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 330
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
; Line 338
	mov	ebx, DWORD PTR _gpBuffer
	test	ebx, ebx
	mov	DWORD PTR _screen_y$[ebp], edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	SHORT $L85276
	mov	eax, DWORD PTR _pCelBuff$[ebp]
	test	eax, eax
	je	SHORT $L85276
	push	esi
; Line 346
	mov	ecx, DWORD PTR _screen_y$[ebp]
	push	edi
	mov	edi, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[ecx*4]
	mov	esi, DWORD PTR [eax+edi*4]
	add	ecx, ebx
	add	ecx, DWORD PTR _screen_x$[ebp]
	lea	edx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [eax+edi*4+4]
	sub	eax, esi
	cmp	DWORD PTR _light_table_index, 0
	pop	edi
	pop	esi
	push	DWORD PTR _frame_width$[ebp]
	push	eax
	je	SHORT $L85275
; Line 344
	call	@CelDecDatLightOnly@16
; Line 345
	jmp	SHORT $L85276
$L85275:
; Line 346
	call	@CelDrawDatOnly@16
$L85276:
	pop	ebx
; Line 348
	leave
	ret	12					; 0000000cH
@CelDecodeLightOnly@20 ENDP
_TEXT	ENDS
PUBLIC	@CelDecodeHdrLightOnly@28
; Function compile flags: /Ogsy
;	COMDAT @CelDecodeHdrLightOnly@28
_TEXT	SEGMENT
_screen_x$ = -4
_pCelBuff$ = 8
_frame$ = 12
_frame_width$ = 16
_always_0$ = 20
_direction$ = 24
_v9$ = 8
@CelDecodeHdrLightOnly@28 PROC NEAR			; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 352
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 366
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	SHORT $L85319
; Line 368
	mov	edx, DWORD PTR _pCelBuff$[ebp]
	test	edx, edx
	je	SHORT $L85319
; Line 369
	mov	eax, DWORD PTR _frame$[ebp]
; Line 372
	mov	ecx, DWORD PTR _always_0$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _v9$[ebp], eax
	add	eax, edx
	mov	si, WORD PTR [eax+ecx]
; Line 373
	test	si, si
	movzx	ebx, si
	je	SHORT $L85319
; Line 374
	mov	esi, DWORD PTR _direction$[ebp]
	cmp	esi, 8
	je	SHORT $L85310
	mov	si, WORD PTR [eax+esi]
	test	si, si
	je	SHORT $L85310
; Line 375
	movzx	esi, si
	sub	esi, ebx
; Line 376
	jmp	SHORT $L85313
$L85310:
; Line 377
	mov	esi, DWORD PTR _frame$[ebp]
	mov	esi, DWORD PTR [edx+esi*4+4]
	sub	esi, ebx
	sub	esi, DWORD PTR _v9$[ebp]
$L85313:
; Line 379
	shl	ecx, 4
; Line 381
	push	DWORD PTR _frame_width$[ebp]
	sub	edi, ecx
	lea	edx, DWORD PTR [ebx+eax]
	mov	ecx, DWORD PTR _screen_y_times_768[edi*4]
	push	esi
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	cmp	DWORD PTR _light_table_index, 0
	je	SHORT $L85318
	call	@CelDecDatLightOnly@16
; Line 382
	jmp	SHORT $L85319
$L85318:
; Line 383
	call	@CelDrawDatOnly@16
$L85319:
	pop	edi
	pop	esi
	pop	ebx
; Line 387
	leave
	ret	20					; 00000014H
@CelDecodeHdrLightOnly@28 ENDP
_TEXT	ENDS
PUBLIC	@CelDecodeHdrLightTrans@24
EXTRN	_cel_transparency_active:DWORD
; Function compile flags: /Ogsy
;	COMDAT @CelDecodeHdrLightTrans@24
_TEXT	SEGMENT
_pBuff$ = -4
_frame$ = 8
_frame_width$ = 12
_always_0$ = 16
_direction$ = 20
@CelDecodeHdrLightTrans@24 PROC NEAR			; COMDAT
; _pBuff$ = ecx
; _pCelBuff$ = edx
; Line 391
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 401
	test	edx, edx
	mov	DWORD PTR _pBuff$[ebp], ecx
	je	SHORT $L85354
; Line 402
	test	ecx, ecx
	je	SHORT $L85354
; Line 403
	mov	eax, DWORD PTR _frame$[ebp]
; Line 405
	mov	ecx, DWORD PTR _always_0$[ebp]
	push	ebx
	mov	edi, DWORD PTR [edx+eax*4]
	lea	esi, DWORD PTR [edi+edx]
	mov	bx, WORD PTR [esi+ecx]
	movzx	ecx, bx
; Line 406
	test	bx, bx
	pop	ebx
	je	SHORT $L85354
; Line 407
	mov	eax, DWORD PTR [edx+eax*4+4]
; Line 408
	mov	edx, DWORD PTR _direction$[ebp]
	sub	eax, edi
	cmp	edx, 8
	je	SHORT $L85348
	mov	dx, WORD PTR [esi+edx]
	test	dx, dx
	je	SHORT $L85348
; Line 409
	movzx	eax, dx
$L85348:
; Line 414
	push	DWORD PTR _frame_width$[ebp]
	sub	eax, ecx
	cmp	DWORD PTR _cel_transparency_active, 0
	lea	edx, DWORD PTR [ecx+esi]
	mov	ecx, DWORD PTR _pBuff$[ebp]
	push	eax
	je	SHORT $L85351
	call	@CelDecDatLightTrans@16
; Line 415
	jmp	SHORT $L85354
$L85351:
	cmp	DWORD PTR _light_table_index, 0
	je	SHORT $L85353
; Line 416
	call	@CelDecDatLightOnly@16
; Line 417
	jmp	SHORT $L85354
$L85353:
; Line 418
	call	@CelDrawDatOnly@16
$L85354:
	pop	edi
	pop	esi
; Line 423
	leave
	ret	16					; 00000010H
@CelDecodeHdrLightTrans@24 ENDP
_TEXT	ENDS
PUBLIC	@CelDrawHdrLightRed@32
EXTRN	_light4flag:DWORD
; Function compile flags: /Ogsy
;	COMDAT @CelDrawHdrLightRed@32
_TEXT	SEGMENT
_screen_x$ = -4
_pCelBuff$ = 8
_frame$ = 12
_frame_width$ = 16
_always_0$ = 20
_direction$ = 24
_always_1$ = 28
_v9$ = 8
_v14$ = 12
_v18$ = 12
_v19$ = 28
_always_0a$ = 8
@CelDrawHdrLightRed@32 PROC NEAR			; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 428
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 451
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	$L85415
; Line 453
	mov	edi, DWORD PTR _pCelBuff$[ebp]
	test	edi, edi
	je	$L85415
; Line 454
	mov	eax, DWORD PTR _frame$[ebp]
	mov	esi, DWORD PTR [edi+eax*4]
; Line 458
	mov	eax, DWORD PTR _always_0$[ebp]
	mov	DWORD PTR _v9$[ebp], esi
	add	esi, edi
	mov	cx, WORD PTR [esi+eax]
; Line 459
	test	cx, cx
	movzx	ebx, cx
	je	$L85415
; Line 460
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edi, DWORD PTR [edi+ecx*4+4]
; Line 461
	mov	ecx, DWORD PTR _direction$[ebp]
	sub	edi, DWORD PTR _v9$[ebp]
	cmp	ecx, 8
	je	SHORT $L85401
	mov	cx, WORD PTR [esi+ecx]
	test	cx, cx
	je	SHORT $L85401
; Line 462
	movzx	ecx, cx
	sub	ecx, ebx
	mov	DWORD PTR _always_0a$[ebp], ecx
; Line 463
	jmp	SHORT $L85404
$L85401:
; Line 464
	sub	edi, ebx
	mov	DWORD PTR _always_0a$[ebp], edi
$L85404:
; Line 466
	shl	eax, 4
	sub	edx, eax
; Line 467
	xor	ecx, ecx
	add	esi, ebx
	mov	eax, DWORD PTR _screen_y_times_768[edx*4]
	add	eax, DWORD PTR _gpBuffer
	add	eax, DWORD PTR _screen_x$[ebp]
	cmp	DWORD PTR _light4flag, ecx
	setne	cl
	neg	ecx
	mov	DWORD PTR _v14$[ebp], ecx
; Line 468
	and	WORD PTR _v14$[ebp], 62464		; 0000f400H
; Line 469
	mov	ecx, DWORD PTR _v14$[ebp]
	add	ecx, 4096				; 00001000H
; Line 471
	cmp	BYTE PTR _always_1$[ebp], 2
	mov	edi, ecx
	jne	SHORT $L85410
; Line 472
	add	ecx, 256				; 00000100H
; Line 473
	mov	edi, ecx
$L85410:
; Line 475
	cmp	BYTE PTR _always_1$[ebp], 4
	jl	SHORT $L85411
; Line 476
	movsx	edx, BYTE PTR _always_1$[ebp]
	shl	edx, 8
	lea	edi, DWORD PTR [edx+ecx-256]
$L85411:
; Line 477
	mov	ecx, DWORD PTR _pLightTbl
; Line 479
	mov	edx, DWORD PTR _always_0a$[ebp]
	add	edi, ecx
	mov	ecx, esi
	add	edx, esi
$L85413:
; Line 481
	mov	esi, DWORD PTR _frame_width$[ebp]
	mov	DWORD PTR _v18$[ebp], esi
$L85420:
; Line 484
	movzx	esi, BYTE PTR [ecx]
	mov	DWORD PTR _v19$[ebp], esi
	inc	ecx
; Line 485
	test	BYTE PTR _v19$[ebp], 128		; 00000080H
	je	SHORT $L87024
; Line 487
	neg	BYTE PTR _v19$[ebp]
; Line 488
	mov	esi, DWORD PTR _v19$[ebp]
	add	eax, esi
; Line 489
	sub	DWORD PTR _v18$[ebp], esi
	jmp	SHORT $L87027
$L87024:
; Line 493
	sub	DWORD PTR _v18$[ebp], esi
$L85428:
; Line 496
	mov	bl, BYTE PTR [ecx]
	inc	ecx
	mov	BYTE PTR _v19$[ebp], bl
; Line 498
	dec	esi
	mov	ebx, DWORD PTR _v19$[ebp]
	mov	bl, BYTE PTR [ebx+edi]
	mov	BYTE PTR [eax], bl
; Line 499
	inc	eax
; Line 500
	test	esi, esi
	jne	SHORT $L85428
; Line 501
	cmp	DWORD PTR _v18$[ebp], esi
$L87027:
	jne	SHORT $L85420
; Line 503
	mov	esi, -768				; fffffd00H
	sub	esi, DWORD PTR _frame_width$[ebp]
$LABEL_20$85427:
	add	eax, esi
; Line 504
	cmp	edx, ecx
	jne	SHORT $L85413
$L85415:
	pop	edi
	pop	esi
	pop	ebx
; Line 508
	leave
	ret	24					; 00000018H
@CelDrawHdrLightRed@32 ENDP
_TEXT	ENDS
PUBLIC	@Cel2DecDatOnly@16
EXTRN	_gpBufEnd:DWORD
; Function compile flags: /Ogsy
;	COMDAT @Cel2DecDatOnly@16
_TEXT	SEGMENT
_frame_content_size$ = 8
_frame_width$ = 12
_v6$ = -4
_v7$ = 8
@Cel2DecDatOnly@16 PROC NEAR				; COMDAT
; _pDecodeTo$ = ecx
; _pRLEBytes$ = edx
; Line 512
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 523
	test	ecx, ecx
	je	$L85453
	test	edx, edx
	je	$L85453
	cmp	DWORD PTR _gpBuffer, 0
	je	$L85453
	mov	eax, DWORD PTR _frame_content_size$[ebp]
	push	ebx
	push	esi
; Line 524
	mov	esi, edx
; Line 558
	add	edx, eax
	push	edi
	mov	DWORD PTR -8+[ebp], edx
$L85451:
	mov	eax, DWORD PTR _frame_width$[ebp]
	mov	DWORD PTR _v6$[ebp], eax
$L85458:
	movzx	eax, BYTE PTR [esi]
	inc	esi
	mov	DWORD PTR _v7$[ebp], eax
	test	al, 128					; 00000080H
	je	SHORT $L87042
	neg	BYTE PTR _v7$[ebp]
	mov	eax, DWORD PTR _v7$[ebp]
	add	ecx, eax
	sub	DWORD PTR _v6$[ebp], eax
	jmp	SHORT $L87047
$L87042:
; Line 539
	sub	DWORD PTR _v6$[ebp], eax
; Line 540
	cmp	ecx, DWORD PTR _gpBufEnd
	jae	SHORT $L85467
; Line 541
	mov	edx, eax
	shr	edx, 1
; Line 542
	test	BYTE PTR _v7$[ebp], 1
	je	SHORT $L85469
	mov	bl, BYTE PTR [esi]
	inc	esi
	mov	BYTE PTR [ecx], bl
	inc	ecx
	test	edx, edx
	je	SHORT $L85455
$L85469:
; Line 544
	shr	eax, 2
	test	dl, 1
; Line 545
	je	SHORT $L85473
	mov	dx, WORD PTR [esi]
	inc	esi
	mov	WORD PTR [ecx], dx
	inc	esi
	inc	ecx
	inc	ecx
	test	eax, eax
	je	SHORT $L85455
$L85473:
; Line 546
	shl	eax, 2
	test	eax, eax
	mov	edi, ecx
	jbe	SHORT $L85467
	mov	edx, esi
	mov	DWORD PTR 8+[ebp], eax
	sub	edx, ecx
$L87034:
	mov	bl, BYTE PTR [edx+edi]
	mov	BYTE PTR [edi], bl
	inc	edi
	dec	DWORD PTR 8+[ebp]
	jne	SHORT $L87034
$L85467:
; Line 552
	add	esi, eax
; Line 553
	add	ecx, eax
$L85455:
; Line 555
	cmp	DWORD PTR _v6$[ebp], 0
$L87047:
	jne	SHORT $L85458
; Line 557
	mov	eax, -768				; fffffd00H
	sub	eax, DWORD PTR _frame_width$[ebp]
$LABEL_17$85465:
	add	ecx, eax
; Line 558
	cmp	DWORD PTR -8+[ebp], esi
	jne	$L85451
	pop	edi
	pop	esi
	pop	ebx
$L85453:
; Line 560
	leave
	ret	8
@Cel2DecDatOnly@16 ENDP
_TEXT	ENDS
PUBLIC	@Cel2DrawHdrOnly@28
; Function compile flags: /Ogsy
;	COMDAT @Cel2DrawHdrOnly@28
_TEXT	SEGMENT
_screen_x$ = -8
_screen_y$ = -4
_pCelBuff$ = 8
_frame$ = 12
_frame_width$ = 16
_a6$ = 20
_direction$ = 24
@Cel2DrawHdrOnly@28 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 564
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 574
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _screen_y$[ebp], edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	SHORT $L85501
; Line 575
	mov	eax, DWORD PTR _pCelBuff$[ebp]
	test	eax, eax
	je	SHORT $L85501
; Line 576
	mov	ecx, DWORD PTR _frame$[ebp]
; Line 578
	mov	esi, DWORD PTR _a6$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	ecx, DWORD PTR [edx+eax]
	mov	bx, WORD PTR [ecx+esi]
; Line 579
	test	bx, bx
	movzx	edi, bx
	je	SHORT $L85501
; Line 580
	mov	ebx, DWORD PTR _direction$[ebp]
	cmp	ebx, 8
	je	SHORT $L85503
	mov	bx, WORD PTR [ecx+ebx]
	test	bx, bx
	je	SHORT $L85503
; Line 581
	movzx	eax, bx
	sub	eax, edi
; Line 582
	jmp	SHORT $L85505
$L85503:
; Line 583
	mov	ebx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+ebx*4+4]
	sub	eax, edi
	sub	eax, edx
$L85505:
; Line 588
	push	DWORD PTR _frame_width$[ebp]
	lea	edx, DWORD PTR [edi+ecx]
	shl	esi, 4
	push	eax
	mov	eax, DWORD PTR _screen_y$[ebp]
	sub	eax, esi
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	call	@Cel2DecDatOnly@16
$L85501:
	pop	edi
	pop	esi
	pop	ebx
; Line 592
	leave
	ret	20					; 00000014H
@Cel2DrawHdrOnly@28 ENDP
_TEXT	ENDS
PUBLIC	@Cel2DecodeHdrOnly@24
; Function compile flags: /Ogsy
;	COMDAT @Cel2DecodeHdrOnly@24
_TEXT	SEGMENT
_pBuff$ = -4
_frame$ = 8
_frame_width$ = 12
_a5$ = 16
_direction$ = 20
@Cel2DecodeHdrOnly@24 PROC NEAR				; COMDAT
; _pBuff$ = ecx
; _pCelBuff$ = edx
; Line 595
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 603
	test	edx, edx
	mov	DWORD PTR _pBuff$[ebp], ecx
	je	SHORT $L85532
; Line 604
	test	ecx, ecx
	je	SHORT $L85532
; Line 605
	mov	eax, DWORD PTR _frame$[ebp]
; Line 607
	mov	ecx, DWORD PTR _a5$[ebp]
	push	ebx
	mov	edi, DWORD PTR [edx+eax*4]
	lea	esi, DWORD PTR [edi+edx]
	mov	bx, WORD PTR [esi+ecx]
	movzx	ecx, bx
; Line 608
	test	bx, bx
	pop	ebx
	je	SHORT $L85532
; Line 609
	mov	eax, DWORD PTR [edx+eax*4+4]
	sub	eax, edi
; Line 610
	mov	edi, DWORD PTR _direction$[ebp]
; Line 611
	cmp	edi, 8
	movzx	edx, WORD PTR [esi+edi]
	jne	SHORT $L85535
; Line 612
	xor	edx, edx
$L85535:
; Line 613
	test	edx, edx
	je	SHORT $L85536
; Line 614
	sub	edx, ecx
	mov	eax, edx
; Line 615
	jmp	SHORT $L85537
$L85536:
; Line 616
	sub	eax, ecx
$L85537:
; Line 617
	push	DWORD PTR _frame_width$[ebp]
	lea	edx, DWORD PTR [ecx+esi]
	mov	ecx, DWORD PTR _pBuff$[ebp]
	push	eax
	call	@Cel2DecDatOnly@16
$L85532:
	pop	edi
	pop	esi
; Line 621
	leave
	ret	16					; 00000010H
@Cel2DecodeHdrOnly@24 ENDP
_TEXT	ENDS
PUBLIC	@Cel2DecDatLightOnly@16
PUBLIC	@Cel2DecDatLightEntry@16
; Function compile flags: /Ogsy
;	COMDAT @Cel2DecDatLightOnly@16
_TEXT	SEGMENT
_frame_content_size$ = 8
_frame_width$ = 12
_v4$ = -8
_v5$ = -4
_v8$ = 8
@Cel2DecDatLightOnly@16 PROC NEAR			; COMDAT
; _pDecodeTo$ = ecx
; _pRLEBytes$ = edx
; Line 624
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 633
	test	ecx, ecx
	je	$L85557
	test	edx, edx
	je	$L85557
	cmp	DWORD PTR _gpBuffer, 0
	je	SHORT $L85557
; Line 637
	mov	eax, DWORD PTR _frame_content_size$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _light_table_index
	shl	esi, 8
	add	esi, DWORD PTR _pLightTbl
	push	edi
	mov	DWORD PTR _v4$[ebp], edx
	mov	DWORD PTR _v5$[ebp], ecx
	lea	ebx, DWORD PTR [edx+eax]
$L85555:
; Line 639
	mov	edi, DWORD PTR _frame_width$[ebp]
$L85562:
; Line 642
	mov	eax, DWORD PTR _v4$[ebp]
	movzx	eax, BYTE PTR [eax]
	inc	DWORD PTR _v4$[ebp]
	mov	DWORD PTR _v8$[ebp], eax
; Line 643
	test	al, 128					; 00000080H
	je	SHORT $L87058
; Line 645
	neg	BYTE PTR _v8$[ebp]
; Line 646
	mov	eax, DWORD PTR _v8$[ebp]
	add	DWORD PTR _v5$[ebp], eax
; Line 647
	sub	edi, eax
	jmp	SHORT $L87061
$L87058:
; Line 652
	mov	ecx, DWORD PTR _v5$[ebp]
	sub	edi, eax
	cmp	ecx, DWORD PTR _gpBufEnd
	jae	SHORT $L85571
; Line 654
	mov	cl, BYTE PTR _v8$[ebp]
	lea	eax, DWORD PTR _v4$[ebp]
	push	eax
	lea	eax, DWORD PTR _v5$[ebp]
	push	eax
	mov	edx, esi
	call	@Cel2DecDatLightEntry@16
; Line 656
	jmp	SHORT $L85559
$L85571:
; Line 657
	add	DWORD PTR _v4$[ebp], eax
; Line 658
	add	DWORD PTR _v5$[ebp], eax
$L85559:
; Line 660
	test	edi, edi
$L87061:
	jne	SHORT $L85562
; Line 662
	mov	eax, -768				; fffffd00H
	sub	eax, DWORD PTR _frame_width$[ebp]
$LABEL_13$85569:
	add	DWORD PTR _v5$[ebp], eax
; Line 663
	cmp	ebx, DWORD PTR _v4$[ebp]
	jne	SHORT $L85555
	pop	edi
	pop	esi
	pop	ebx
$L85557:
; Line 665
	leave
	ret	8
@Cel2DecDatLightOnly@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @Cel2DecDatLightEntry@16
_TEXT	SEGMENT
_pDecodeTo$ = 8
_pRLEBytes$ = 12
@Cel2DecDatLightEntry@16 PROC NEAR			; COMDAT
; _n$ = cl
; _LightIndex$ = edx
; Line 673
	movzx	eax, cl
	push	esi
	mov	esi, edx
	test	eax, eax
	jle	SHORT $L85585
	mov	ecx, DWORD PTR _pDecodeTo$[esp]
	push	ebx
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR _pRLEBytes$[esp+8]
$L85583:
; Line 674
	mov	edx, DWORD PTR [eax]
	mov	ebx, DWORD PTR [ecx]
	movsx	edx, BYTE PTR [edx]
	mov	dl, BYTE PTR [edx+esi]
	mov	BYTE PTR [ebx], dl
; Line 675
	inc	DWORD PTR [eax]
; Line 676
	inc	DWORD PTR [ecx]
	dec	edi
	jne	SHORT $L85583
	pop	edi
	pop	ebx
$L85585:
	pop	esi
; Line 678
	ret	8
@Cel2DecDatLightEntry@16 ENDP
_TEXT	ENDS
PUBLIC	@Cel2DecDatLightTrans@16
; Function compile flags: /Ogsy
;	COMDAT @Cel2DecDatLightTrans@16
_TEXT	SEGMENT
_frame_content_size$ = 8
_frame_width$ = 12
_v6$ = -12
_v7$ = -4
_v8$ = 8
_v12$ = 8
_v21$ = 8
_v28$ = -8
@Cel2DecDatLightTrans@16 PROC NEAR			; COMDAT
; _pDecodeTo$ = ecx
; _pRLEBytes$ = edx
; Line 681
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 701
	test	ecx, ecx
	je	$L85618
	test	edx, edx
	je	$L85618
	cmp	DWORD PTR _gpBuffer, 0
	je	$L85618
; Line 705
	mov	eax, DWORD PTR _frame_content_size$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _light_table_index
	mov	ebx, edx
	shl	edi, 8
	add	edi, DWORD PTR _pLightTbl
	mov	esi, ecx
	add	edx, eax
; Line 706
	and	ecx, 1
	mov	DWORD PTR _v6$[ebp], edx
	mov	DWORD PTR _v28$[ebp], ecx
$L85616:
; Line 708
	mov	eax, DWORD PTR _frame_width$[ebp]
	mov	DWORD PTR _v7$[ebp], eax
$L85623:
; Line 711
	movzx	eax, BYTE PTR [ebx]
	inc	ebx
	mov	DWORD PTR _v8$[ebp], eax
; Line 712
	test	al, 128					; 00000080H
	jne	$L87074
; Line 716
	sub	DWORD PTR _v7$[ebp], eax
; Line 717
	cmp	esi, DWORD PTR _gpBufEnd
	jae	$L85628
; Line 718
	mov	ecx, esi
	and	ecx, 1
; Line 719
	shr	eax, 1
	cmp	ecx, DWORD PTR _v28$[ebp]
	jne	SHORT $L85629
; Line 720
	test	BYTE PTR _v8$[ebp], 1
	je	SHORT $LABEL_13$85631
; Line 722
	inc	ebx
; Line 723
	inc	esi
; Line 724
	test	eax, eax
	jne	SHORT $LABEL_20$85633
; Line 752
	jmp	$LABEL_23$85651
$L85629:
; Line 754
	test	BYTE PTR _v8$[ebp], 1
	jne	SHORT $L85653
$LABEL_20$85633:
; Line 727
	mov	ecx, eax
	shr	ecx, 1
	test	al, 1
	mov	DWORD PTR _v21$[ebp], ecx
; Line 728
	je	SHORT $LABEL_29$85635
; Line 730
	movsx	eax, BYTE PTR [ebx]
; Line 732
	movzx	eax, al
; Line 733
	inc	ebx
	mov	al, BYTE PTR [eax+edi]
	inc	ebx
	mov	BYTE PTR [esi], al
; Line 734
	inc	esi
	inc	esi
; Line 735
	test	ecx, ecx
	je	$LABEL_23$85651
$LABEL_29$85635:
; Line 738
	mov	ecx, DWORD PTR [ebx]
; Line 743
	push	16					; 00000010H
	movzx	eax, cl
	xor	cl, cl
	add	ebx, 4
	movzx	eax, BYTE PTR [eax+edi]
	add	eax, ecx
	push	eax
	mov	BYTE PTR [esi], al
	call	__rotr
; Line 745
	movzx	eax, al
	pop	ecx
; Line 746
	add	esi, 4
	mov	al, BYTE PTR [eax+edi]
; Line 747
	dec	DWORD PTR _v21$[ebp]
	mov	BYTE PTR [esi-2], al
	pop	ecx
; Line 748
	jne	SHORT $LABEL_29$85635
; Line 750
	jmp	SHORT $LABEL_23$85651
$L85653:
; Line 756
	movsx	ecx, BYTE PTR [ebx]
; Line 758
	movzx	ecx, cl
	inc	ebx
	mov	cl, BYTE PTR [ecx+edi]
	mov	BYTE PTR [esi], cl
	inc	esi
; Line 759
	test	eax, eax
	je	SHORT $LABEL_23$85651
$LABEL_13$85631:
; Line 762
	mov	ecx, eax
	shr	ecx, 1
	test	al, 1
	mov	DWORD PTR _v12$[ebp], ecx
; Line 763
	je	SHORT $LABEL_30$85659
; Line 767
	movsx	eax, BYTE PTR [ebx+1]
; Line 770
	movzx	eax, al
	add	ebx, 2
; Line 771
	add	esi, 2
	mov	al, BYTE PTR [eax+edi]
	mov	BYTE PTR [esi-1], al
; Line 772
	test	ecx, ecx
	je	SHORT $LABEL_23$85651
$LABEL_30$85659:
; Line 775
	mov	eax, DWORD PTR [ebx]
; Line 778
	push	8
	add	ebx, 4
	push	eax
	inc	esi
	call	__rotr
; Line 779
	movzx	ecx, al
	xor	al, al
; Line 781
	push	16					; 00000010H
	movzx	ecx, BYTE PTR [ecx+edi]
	add	ecx, eax
	push	ecx
	mov	BYTE PTR [esi], cl
	call	__rotr
; Line 784
	movzx	eax, al
	add	esp, 16					; 00000010H
	inc	esi
	mov	al, BYTE PTR [eax+edi]
	inc	esi
	mov	BYTE PTR [esi], al
; Line 785
	inc	esi
; Line 786
	dec	DWORD PTR _v12$[ebp]
; Line 787
	jne	SHORT $LABEL_30$85659
; Line 789
	jmp	SHORT $LABEL_23$85651
$L85628:
; Line 793
	add	ebx, eax
; Line 794
	add	esi, eax
$LABEL_23$85651:
; Line 798
	cmp	DWORD PTR _v7$[ebp], 0
; Line 710
	jmp	SHORT $L87080
$L87074:
; Line 801
	neg	BYTE PTR _v8$[ebp]
; Line 802
	mov	eax, DWORD PTR _v8$[ebp]
	add	esi, eax
; Line 803
	sub	DWORD PTR _v7$[ebp], eax
$L87080:
; Line 804
	jne	$L85623
; Line 806
	mov	eax, -768				; fffffd00H
	sub	eax, DWORD PTR _frame_width$[ebp]
$LABEL_26$85677:
	add	esi, eax
; Line 807
	mov	al, BYTE PTR _v28$[ebp]
	dec	eax
	and	eax, 1
; Line 808
	cmp	DWORD PTR _v6$[ebp], ebx
	mov	DWORD PTR _v28$[ebp], eax
	jne	$L85616
	pop	edi
	pop	esi
	pop	ebx
$L85618:
; Line 810
	leave
	ret	8
@Cel2DecDatLightTrans@16 ENDP
_TEXT	ENDS
PUBLIC	@Cel2DecodeHdrLight@28
; Function compile flags: /Ogsy
;	COMDAT @Cel2DecodeHdrLight@28
_TEXT	SEGMENT
_screen_x$ = -4
_pCelBuff$ = 8
_frame$ = 12
_frame_width$ = 16
_a6$ = 20
_direction$ = 24
_cel_buf$ = 8
@Cel2DecodeHdrLight@28 PROC NEAR			; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 815
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 829
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	SHORT $L85724
; Line 831
	mov	ecx, DWORD PTR _pCelBuff$[ebp]
	test	ecx, ecx
	je	SHORT $L85724
; Line 832
	mov	eax, DWORD PTR _frame$[ebp]
; Line 835
	mov	esi, DWORD PTR _a6$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	lea	eax, DWORD PTR [edx+ecx]
	movzx	ebx, WORD PTR [eax+esi]
; Line 836
	cmp	WORD PTR [eax+esi], 0
	mov	DWORD PTR _cel_buf$[ebp], ebx
	je	SHORT $L85724
; Line 837
	mov	ebx, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [ecx+ebx*4+4]
; Line 838
	mov	ebx, DWORD PTR _direction$[ebp]
	sub	ecx, edx
; Line 839
	cmp	ebx, 8
	movzx	edx, WORD PTR [eax+ebx]
	jne	SHORT $L85716
; Line 840
	xor	edx, edx
$L85716:
; Line 841
	test	edx, edx
	je	SHORT $L85717
; Line 842
	sub	edx, DWORD PTR _cel_buf$[ebp]
; Line 843
	jmp	SHORT $L85719
$L85717:
; Line 844
	sub	ecx, DWORD PTR _cel_buf$[ebp]
	mov	edx, ecx
$L85719:
; Line 845
	mov	ecx, DWORD PTR _cel_buf$[ebp]
; Line 848
	push	DWORD PTR _frame_width$[ebp]
	shl	esi, 4
	sub	edi, esi
	add	eax, ecx
	push	edx
	mov	edx, eax
	mov	ecx, DWORD PTR _screen_y_times_768[edi*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	cmp	DWORD PTR _light_table_index, 0
	je	SHORT $L85723
	call	@Cel2DecDatLightOnly@16
; Line 849
	jmp	SHORT $L85724
$L85723:
; Line 850
	call	@Cel2DecDatOnly@16
$L85724:
	pop	edi
	pop	esi
	pop	ebx
; Line 854
	leave
	ret	20					; 00000014H
@Cel2DecodeHdrLight@28 ENDP
_TEXT	ENDS
PUBLIC	@Cel2DecodeLightTrans@24
; Function compile flags: /Ogsy
;	COMDAT @Cel2DecodeLightTrans@24
_TEXT	SEGMENT
_dst_buf$ = -4
_frame$ = 8
_frame_width$ = 12
_a5$ = 16
_direction$ = 20
@Cel2DecodeLightTrans@24 PROC NEAR			; COMDAT
; _dst_buf$ = ecx
; _pCelBuff$ = edx
; Line 858
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 869
	test	edx, edx
	mov	DWORD PTR _dst_buf$[ebp], ecx
	je	SHORT $L85759
; Line 870
	mov	eax, DWORD PTR _frame$[ebp]
; Line 872
	mov	ecx, DWORD PTR _a5$[ebp]
	push	ebx
	mov	edi, DWORD PTR [edx+eax*4]
	lea	esi, DWORD PTR [edi+edx]
	mov	bx, WORD PTR [esi+ecx]
	movzx	ecx, bx
; Line 873
	test	bx, bx
	pop	ebx
	je	SHORT $L85759
; Line 874
	mov	eax, DWORD PTR [edx+eax*4+4]
	sub	eax, edi
; Line 875
	mov	edi, DWORD PTR _direction$[ebp]
; Line 876
	cmp	edi, 8
	movzx	edx, WORD PTR [esi+edi]
	jne	SHORT $L85753
; Line 877
	xor	edx, edx
$L85753:
; Line 878
	test	edx, edx
	je	SHORT $L85754
; Line 879
	sub	edx, ecx
	mov	eax, edx
; Line 880
	jmp	SHORT $L85755
$L85754:
; Line 881
	sub	eax, ecx
$L85755:
; Line 884
	push	DWORD PTR _frame_width$[ebp]
	add	esi, ecx
	cmp	DWORD PTR _cel_transparency_active, 0
	mov	ecx, DWORD PTR _dst_buf$[ebp]
	mov	edx, esi
	push	eax
	je	SHORT $L85756
	call	@Cel2DecDatLightTrans@16
; Line 885
	jmp	SHORT $L85759
$L85756:
	cmp	DWORD PTR _light_table_index, 0
	je	SHORT $L85758
; Line 886
	call	@Cel2DecDatLightOnly@16
; Line 887
	jmp	SHORT $L85759
$L85758:
; Line 888
	call	@Cel2DecDatOnly@16
$L85759:
	pop	edi
	pop	esi
; Line 892
	leave
	ret	16					; 00000010H
@Cel2DecodeLightTrans@24 ENDP
_TEXT	ENDS
PUBLIC	@Cel2DrawHdrLightRed@32
; Function compile flags: /Ogsy
;	COMDAT @Cel2DrawHdrLightRed@32
_TEXT	SEGMENT
_screen_x$ = -4
_pCelBuff$ = 8
_frame$ = 12
_frame_width$ = 16
_always_0$ = 20
_direction$ = 24
_always_1$ = 28
_v9$ = 8
_v13$ = 12
_v18$ = 28
_v19$ = 8
_v20$ = 12
@Cel2DrawHdrLightRed@32 PROC NEAR			; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 897
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 920
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	$L85821
; Line 922
	mov	edi, DWORD PTR _pCelBuff$[ebp]
	test	edi, edi
	je	$L85821
; Line 923
	mov	eax, DWORD PTR _frame$[ebp]
	mov	esi, DWORD PTR [edi+eax*4]
; Line 926
	mov	eax, DWORD PTR _always_0$[ebp]
	mov	DWORD PTR _v9$[ebp], esi
	add	esi, edi
	mov	cx, WORD PTR [esi+eax]
; Line 927
	test	cx, cx
	movzx	ebx, cx
	je	$L85821
; Line 928
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edi, DWORD PTR [edi+ecx*4+4]
; Line 929
	mov	ecx, DWORD PTR _direction$[ebp]
	sub	edi, DWORD PTR _v9$[ebp]
	cmp	ecx, 8
	je	SHORT $L85806
	mov	cx, WORD PTR [esi+ecx]
	test	cx, cx
	je	SHORT $L85806
; Line 930
	movzx	edi, cx
$L85806:
; Line 934
	shl	eax, 4
	sub	edx, eax
; Line 935
	xor	ecx, ecx
	sub	edi, ebx
	add	esi, ebx
	mov	eax, DWORD PTR _screen_y_times_768[edx*4]
	add	eax, DWORD PTR _gpBuffer
	add	eax, DWORD PTR _screen_x$[ebp]
	cmp	DWORD PTR _light4flag, ecx
	setne	cl
	neg	ecx
	mov	DWORD PTR _v13$[ebp], ecx
; Line 936
	and	WORD PTR _v13$[ebp], 62464		; 0000f400H
; Line 937
	mov	ecx, DWORD PTR _v13$[ebp]
	add	ecx, 4096				; 00001000H
; Line 938
	cmp	BYTE PTR _always_1$[ebp], 2
	jne	SHORT $L85815
; Line 939
	add	ecx, 256				; 00000100H
$L85815:
; Line 940
	cmp	BYTE PTR _always_1$[ebp], 4
	jl	SHORT $L85816
; Line 941
	movsx	edx, BYTE PTR _always_1$[ebp]
	shl	edx, 8
	lea	ecx, DWORD PTR [ecx+edx-256]
$L85816:
; Line 942
	mov	edx, DWORD PTR _pLightTbl
	add	ecx, edx
; Line 943
	mov	edx, esi
; Line 945
	add	esi, edi
$L85819:
; Line 948
	mov	edi, DWORD PTR _frame_width$[ebp]
; Line 949
	and	DWORD PTR _v19$[ebp], 0
	mov	DWORD PTR _v18$[ebp], edi
$L85827:
; Line 952
	movzx	edi, BYTE PTR [edx]
	mov	DWORD PTR _v20$[ebp], edi
	inc	edx
; Line 953
	test	BYTE PTR _v20$[ebp], 128		; 00000080H
	je	SHORT $L87093
; Line 955
	neg	BYTE PTR _v20$[ebp]
; Line 956
	mov	edi, DWORD PTR _v20$[ebp]
	add	eax, edi
; Line 957
	sub	DWORD PTR _v18$[ebp], edi
	jmp	SHORT $L87097
$L87093:
; Line 961
	sub	DWORD PTR _v18$[ebp], edi
; Line 962
	cmp	eax, DWORD PTR _gpBufEnd
	jae	SHORT $L85835
$L85836:
; Line 964
	mov	bl, BYTE PTR [edx]
	inc	edx
	mov	BYTE PTR _v19$[ebp], bl
; Line 966
	dec	edi
	mov	ebx, DWORD PTR _v19$[ebp]
	mov	bl, BYTE PTR [ebx+ecx]
	mov	BYTE PTR [eax], bl
; Line 967
	inc	eax
; Line 968
	test	edi, edi
	jne	SHORT $L85836
; Line 969
	jmp	SHORT $L85824
$L85835:
; Line 970
	add	edx, edi
; Line 971
	add	eax, edi
$L85824:
; Line 973
	cmp	DWORD PTR _v18$[ebp], 0
$L87097:
	jne	SHORT $L85827
; Line 976
	mov	edi, -768				; fffffd00H
	sub	edi, DWORD PTR _frame_width$[ebp]
$LABEL_21$85834:
	add	eax, edi
; Line 977
	cmp	esi, edx
	jne	SHORT $L85819
$L85821:
	pop	edi
	pop	esi
	pop	ebx
; Line 981
	leave
	ret	24					; 00000018H
@Cel2DrawHdrLightRed@32 ENDP
_TEXT	ENDS
PUBLIC	@CelDecodeRect@28
; Function compile flags: /Ogsy
;	COMDAT @CelDecodeRect@28
_TEXT	SEGMENT
_pBuff$ = -4
_dst_height$ = 8
_dst_width$ = 12
_pCelBuff$ = 16
_frame$ = 20
_frame_width$ = 24
_v11$ = 20
_v12$ = 16
_dst_widtha$ = 12
@CelDecodeRect@28 PROC NEAR				; COMDAT
; _pBuff$ = ecx
; _always_0$ = edx
; Line 986
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 998
	mov	eax, DWORD PTR _pCelBuff$[ebp]
	mov	DWORD PTR _pBuff$[ebp], ecx
	test	eax, eax
	je	$L85874
	test	ecx, ecx
	je	$L85874
; Line 999
	mov	ecx, DWORD PTR _frame$[ebp]
	push	ebx
	push	esi
	push	edi
	lea	esi, DWORD PTR [eax+ecx*4]
; Line 1001
	mov	ecx, DWORD PTR _dst_width$[ebp]
	mov	edi, DWORD PTR [esi]
; Line 1003
	mov	esi, DWORD PTR [esi+4]
	sub	esi, edi
	lea	ebx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR _dst_height$[ebp]
	imul	eax, ecx
	add	eax, DWORD PTR _pBuff$[ebp]
	add	eax, edx
	mov	edx, DWORD PTR _frame_width$[ebp]
	add	ecx, edx
	add	esi, ebx
	mov	DWORD PTR _dst_widtha$[ebp], ecx
$L85872:
; Line 1005
	mov	ecx, DWORD PTR _frame_width$[ebp]
	mov	DWORD PTR _v11$[ebp], ecx
$L85879:
; Line 1008
	movzx	edi, BYTE PTR [ebx]
	mov	DWORD PTR _v12$[ebp], edi
	inc	ebx
; Line 1009
	test	BYTE PTR _v12$[ebp], 128		; 00000080H
	je	SHORT $L87112
; Line 1011
	neg	BYTE PTR _v12$[ebp]
; Line 1012
	mov	ecx, DWORD PTR _v12$[ebp]
	add	eax, ecx
; Line 1013
	sub	DWORD PTR _v11$[ebp], ecx
	jmp	SHORT $L87120
$L87112:
; Line 1017
	sub	DWORD PTR _v11$[ebp], edi
; Line 1018
	mov	ecx, edi
	shr	ecx, 1
; Line 1019
	test	BYTE PTR _v12$[ebp], 1
	je	SHORT $L85888
; Line 1020
	mov	dl, BYTE PTR [ebx]
	mov	BYTE PTR [eax], dl
	inc	eax
	inc	ebx
; Line 1021
	test	ecx, ecx
	je	SHORT $L85876
$L85888:
; Line 1025
	shr	edi, 2
	test	cl, 1
; Line 1026
	je	SHORT $L85892
; Line 1027
	mov	cx, WORD PTR [ebx]
; Line 1028
	inc	ebx
	mov	WORD PTR [eax], cx
	inc	ebx
; Line 1029
	inc	eax
	inc	eax
; Line 1030
	test	edi, edi
	je	SHORT $L85876
$L85892:
; Line 1033
	shl	edi, 2
	test	edi, edi
	mov	ecx, eax
	jbe	SHORT $L87105
	mov	DWORD PTR 16+[ebp], ebx
	mov	DWORD PTR 8+[ebp], edi
	sub	DWORD PTR 16+[ebp], eax
$L87104:
	mov	edx, DWORD PTR 16+[ebp]
	mov	dl, BYTE PTR [edx+ecx]
	mov	BYTE PTR [ecx], dl
	inc	ecx
	dec	DWORD PTR 8+[ebp]
	jne	SHORT $L87104
$L87105:
; Line 1034
	add	ebx, edi
; Line 1035
	add	eax, edi
$L85876:
; Line 1036
	cmp	DWORD PTR _v11$[ebp], 0
$L87120:
	jne	SHORT $L85879
; Line 1038
	sub	eax, DWORD PTR _dst_widtha$[ebp]
; Line 1039
	cmp	esi, ebx
$LABEL_14$85886:
	jne	SHORT $L85872
	pop	edi
	pop	esi
	pop	ebx
$L85874:
; Line 1041
	leave
	ret	20					; 00000014H
@CelDecodeRect@28 ENDP
_TEXT	ENDS
PUBLIC	@CelDecodeClr@32
; Function compile flags: /Ogsy
;	COMDAT @CelDecodeClr@32
_TEXT	SEGMENT
_colour$ = -4
_screen_x$ = -8
_screen_y$ = 8
_pCelBuff$ = 12
_frame$ = 16
_frame_width$ = 20
_a7$ = 24
_direction$ = 28
_v13$ = 12
@CelDecodeClr@32 PROC NEAR				; COMDAT
; _colour$ = cl
; _screen_x$ = edx
; Line 1044
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1059
	mov	eax, DWORD PTR _pCelBuff$[ebp]
	push	ebx
	push	esi
	push	edi
	test	eax, eax
	mov	DWORD PTR _screen_x$[ebp], edx
	mov	BYTE PTR _colour$[ebp], cl
	je	$L85939
; Line 1060
	cmp	DWORD PTR _gpBuffer, 0
	je	$L85939
; Line 1061
	mov	ecx, DWORD PTR _frame$[ebp]
; Line 1063
	mov	esi, DWORD PTR _a7$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR [ecx]
	add	eax, edx
	mov	bx, WORD PTR [eax+esi]
; Line 1064
	test	bx, bx
	movzx	edi, bx
	je	$L85939
; Line 1065
	mov	ebx, DWORD PTR _direction$[ebp]
	cmp	ebx, 8
; Line 1067
	je	SHORT $L85932
; Line 1068
	movzx	ebx, WORD PTR [eax+ebx]
; Line 1069
	test	ebx, ebx
; Line 1071
	jne	SHORT $L87129
$L85932:
; Line 1072
	mov	ebx, DWORD PTR [ecx+4]
	sub	ebx, edx
$L87129:
; Line 1074
	mov	edx, DWORD PTR _screen_y$[ebp]
	sub	ebx, edi
	shl	esi, 4
	sub	edx, esi
	lea	ecx, DWORD PTR [edi+eax]
	mov	esi, DWORD PTR _screen_y_times_768[edx*4]
	add	esi, DWORD PTR _gpBuffer
	add	esi, DWORD PTR _screen_x$[ebp]
	add	ebx, edi
	lea	edi, DWORD PTR [ebx+eax]
$L85937:
; Line 1076
	mov	edx, DWORD PTR _frame_width$[ebp]
$L85944:
; Line 1079
	movzx	eax, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR _v13$[ebp], eax
; Line 1080
	test	al, 128					; 00000080H
	je	SHORT $L87127
; Line 1082
	neg	BYTE PTR _v13$[ebp]
; Line 1083
	add	esi, DWORD PTR _v13$[ebp]
; Line 1084
	sub	edx, DWORD PTR _v13$[ebp]
	jmp	SHORT $L87130
$L87127:
; Line 1088
	sub	edx, eax
; Line 1089
	mov	ebx, eax
$L85952:
; Line 1091
	mov	al, BYTE PTR [ecx]
	inc	ecx
; Line 1092
	test	al, al
	je	SHORT $L85955
; Line 1093
	mov	al, BYTE PTR _colour$[ebp]
	mov	BYTE PTR [esi-768], al
; Line 1094
	mov	BYTE PTR [esi-1], al
; Line 1095
	mov	BYTE PTR [esi+1], al
; Line 1096
	mov	BYTE PTR [esi+768], al
$L85955:
; Line 1098
	inc	esi
; Line 1099
	dec	ebx
; Line 1100
	jne	SHORT $L85952
; Line 1101
	test	edx, edx
$L87130:
	jne	SHORT $L85944
; Line 1103
	mov	eax, -768				; fffffd00H
	sub	eax, DWORD PTR _frame_width$[ebp]
$LABEL_20$85951:
	add	esi, eax
; Line 1104
	cmp	edi, ecx
	jne	SHORT $L85937
$L85939:
	pop	edi
	pop	esi
	pop	ebx
; Line 1108
	leave
	ret	24					; 00000018H
@CelDecodeClr@32 ENDP
_TEXT	ENDS
PUBLIC	@CelDrawHdrClrHL@32
; Function compile flags: /Ogsy
;	COMDAT @CelDrawHdrClrHL@32
_TEXT	SEGMENT
_colour$ = -4
_screen_x$ = -8
_screen_y$ = 8
_pCelBuff$ = 12
_frame$ = 16
_frame_width$ = 20
_a7$ = 24
_direction$ = 28
_v13$ = 12
@CelDrawHdrClrHL@32 PROC NEAR				; COMDAT
; _colour$ = cl
; _screen_x$ = edx
; Line 1111
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1128
	mov	eax, DWORD PTR _pCelBuff$[ebp]
	push	ebx
	push	esi
	push	edi
	test	eax, eax
	mov	DWORD PTR _screen_x$[ebp], edx
	mov	BYTE PTR _colour$[ebp], cl
	je	$L86003
; Line 1129
	cmp	DWORD PTR _gpBuffer, 0
	je	$L86003
; Line 1130
	mov	ecx, DWORD PTR _frame$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
; Line 1131
	mov	edx, DWORD PTR [ecx]
	lea	esi, DWORD PTR [edx+eax]
; Line 1132
	mov	eax, DWORD PTR _a7$[ebp]
	mov	bx, WORD PTR [esi+eax]
; Line 1133
	test	bx, bx
	movzx	edi, bx
	je	$L86003
; Line 1134
	mov	ebx, DWORD PTR _direction$[ebp]
	cmp	ebx, 8
; Line 1136
	je	SHORT $L85996
; Line 1137
	movzx	ebx, WORD PTR [esi+ebx]
; Line 1138
	test	ebx, ebx
; Line 1140
	jne	SHORT $L87140
$L85996:
; Line 1141
	mov	ebx, DWORD PTR [ecx+4]
	sub	ebx, edx
$L87140:
; Line 1143
	mov	edx, DWORD PTR _screen_y$[ebp]
	sub	ebx, edi
	shl	eax, 4
	sub	edx, eax
	lea	ecx, DWORD PTR [edi+esi]
	mov	eax, DWORD PTR _screen_y_times_768[edx*4]
	add	eax, DWORD PTR _gpBuffer
	add	eax, DWORD PTR _screen_x$[ebp]
	add	ebx, edi
	lea	edi, DWORD PTR [ebx+esi]
$L86001:
; Line 1145
	mov	ebx, DWORD PTR _frame_width$[ebp]
$L86008:
; Line 1148
	movzx	esi, BYTE PTR [ecx]
	mov	DWORD PTR _v13$[ebp], esi
	inc	ecx
; Line 1149
	test	BYTE PTR _v13$[ebp], 128		; 00000080H
	je	SHORT $L87138
; Line 1151
	neg	BYTE PTR _v13$[ebp]
; Line 1152
	add	eax, DWORD PTR _v13$[ebp]
; Line 1153
	sub	ebx, DWORD PTR _v13$[ebp]
	jmp	SHORT $L87141
$L87138:
; Line 1158
	mov	edx, DWORD PTR _gpBufEnd
	sub	ebx, esi
	cmp	eax, edx
	jae	SHORT $L86017
; Line 1159
	add	edx, -768				; fffffd00H
	cmp	eax, edx
	jb	SHORT $L86025
$L86020:
; Line 1162
	mov	dl, BYTE PTR [ecx]
	inc	ecx
; Line 1163
	test	dl, dl
	je	SHORT $L86023
; Line 1164
	mov	dl, BYTE PTR _colour$[ebp]
	mov	BYTE PTR [eax-768], dl
; Line 1165
	mov	BYTE PTR [eax-1], dl
; Line 1166
	mov	BYTE PTR [eax+1], dl
$L86023:
; Line 1168
	inc	eax
; Line 1169
	dec	esi
; Line 1170
	jne	SHORT $L86020
; Line 1171
	jmp	SHORT $L86005
$L86025:
; Line 1174
	mov	dl, BYTE PTR [ecx]
	inc	ecx
; Line 1175
	test	dl, dl
	je	SHORT $L86028
; Line 1176
	mov	dl, BYTE PTR _colour$[ebp]
	mov	BYTE PTR [eax-768], dl
; Line 1177
	mov	BYTE PTR [eax-1], dl
; Line 1178
	mov	BYTE PTR [eax+1], dl
; Line 1179
	mov	BYTE PTR [eax+768], dl
$L86028:
; Line 1181
	inc	eax
; Line 1182
	dec	esi
; Line 1183
	jne	SHORT $L86025
; Line 1185
	jmp	SHORT $L86005
$L86017:
; Line 1186
	add	ecx, esi
; Line 1187
	add	eax, esi
$L86005:
; Line 1189
	test	ebx, ebx
$L87141:
	jne	SHORT $L86008
; Line 1191
	mov	edx, -768				; fffffd00H
	sub	edx, DWORD PTR _frame_width$[ebp]
$LABEL_28$86015:
	add	eax, edx
; Line 1192
	cmp	edi, ecx
	jne	$L86001
$L86003:
	pop	edi
	pop	esi
	pop	ebx
; Line 1196
	leave
	ret	24					; 00000018H
@CelDrawHdrClrHL@32 ENDP
_TEXT	ENDS
PUBLIC	@ENG_set_pixel@12
; Function compile flags: /Ogsy
;	COMDAT @ENG_set_pixel@12
_TEXT	SEGMENT
_pixel$ = 8
@ENG_set_pixel@12 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 1203
	test	edx, edx
	jl	SHORT $L86040
	cmp	edx, 640				; 00000280H
	jge	SHORT $L86040
	cmp	ecx, 64					; 00000040H
	jl	SHORT $L86040
	cmp	ecx, 704				; 000002c0H
	jge	SHORT $L86040
; Line 1204
	mov	eax, DWORD PTR _screen_y_times_768[edx*4]
	add	eax, DWORD PTR _gpBuffer
	add	eax, ecx
; Line 1205
	cmp	eax, DWORD PTR _gpBufEnd
	jae	SHORT $L86040
; Line 1206
	mov	cl, BYTE PTR _pixel$[esp-4]
	mov	BYTE PTR [eax], cl
$L86040:
; Line 1208
	ret	4
@ENG_set_pixel@12 ENDP
_TEXT	ENDS
PUBLIC	@engine_draw_pixel@8
; Function compile flags: /Ogsy
;	COMDAT @engine_draw_pixel@8
_TEXT	SEGMENT
@engine_draw_pixel@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1215
	xor	eax, eax
	cmp	DWORD PTR _dword_52B970, eax
	je	SHORT $L86047
; Line 1216
	cmp	DWORD PTR _dword_52B99C, eax
	je	SHORT $L86049
	cmp	ecx, eax
	jl	SHORT $L86056
	cmp	ecx, 640				; 00000280H
	jge	SHORT $L86056
	cmp	edx, 64					; 00000040H
	jl	SHORT $L86056
	cmp	edx, 704				; 000002c0H
; Line 1220
	jge	SHORT $L86056
$L86049:
; Line 1217
	mov	eax, DWORD PTR _screen_y_times_768[ecx*4]
	add	eax, DWORD PTR _gpBuffer
	add	eax, edx
; Line 1218
	jmp	SHORT $LABEL_14$86051
$L86047:
; Line 1220
	cmp	DWORD PTR _dword_52B99C, eax
	je	SHORT $L86054
	cmp	edx, eax
	jl	SHORT $L86056
	cmp	edx, 640				; 00000280H
	jge	SHORT $L86056
	cmp	ecx, 64					; 00000040H
	jl	SHORT $L86056
	cmp	ecx, 704				; 000002c0H
	jge	SHORT $L86056
$L86054:
; Line 1221
	mov	eax, DWORD PTR _screen_y_times_768[edx*4]
	add	eax, DWORD PTR _gpBuffer
	add	eax, ecx
$LABEL_14$86051:
; Line 1223
	cmp	eax, DWORD PTR _gpBufEnd
	jae	SHORT $L86056
; Line 1224
	mov	cl, BYTE PTR _gbPixelCol
	mov	BYTE PTR [eax], cl
$L86056:
; Line 1227
	ret	0
@engine_draw_pixel@8 ENDP
_TEXT	ENDS
PUBLIC	@DrawLine@20
; Function compile flags: /Ogsy
;	COMDAT @DrawLine@20
_TEXT	SEGMENT
_y0$ = -12
_x1$ = 8
_y1$ = 12
_col$ = 16
_v8$ = -8
_v9$ = -20
_v10$ = -16
_v11$ = -4
_v12$ = 8
_v13$ = 16
_v14$ = -20
_v15$ = -24
_v35$ = 16
_v37$ = -4
_v38$ = -4
_v40$ = -8
@DrawLine@20 PROC NEAR					; COMDAT
; _x0$ = ecx
; _y0$ = edx
; Line 1234
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 1276
	mov	al, BYTE PTR _col$[ebp]
; Line 1277
	and	DWORD PTR _dword_52B99C, 0
	push	ebx
	push	esi
; Line 1278
	cmp	ecx, 64					; 00000040H
	push	edi
	mov	DWORD PTR _y0$[ebp], edx
	mov	DWORD PTR _v8$[ebp], edx
	mov	DWORD PTR _v9$[ebp], ecx
	mov	BYTE PTR _gbPixelCol, al
	mov	esi, 704				; 000002c0H
	jl	SHORT $L86107
	cmp	ecx, esi
	jl	SHORT $L87154
$L86107:
; Line 1279
	xor	ebx, ebx
	inc	ebx
	mov	DWORD PTR _dword_52B99C, ebx
	jmp	SHORT $L86106
$L87154:
	xor	ebx, ebx
	inc	ebx
$L86106:
; Line 1280
	mov	eax, DWORD PTR _x1$[ebp]
	cmp	eax, 64					; 00000040H
	jl	SHORT $L86109
	cmp	eax, esi
	jl	SHORT $L86108
$L86109:
; Line 1281
	mov	DWORD PTR _dword_52B99C, ebx
$L86108:
; Line 1282
	mov	esi, 160				; 000000a0H
	mov	edi, 512				; 00000200H
	cmp	edx, esi
	jl	SHORT $L86111
	cmp	edx, edi
	jl	SHORT $L86110
$L86111:
; Line 1283
	mov	DWORD PTR _dword_52B99C, ebx
$L86110:
; Line 1284
	mov	edx, DWORD PTR _y1$[ebp]
	cmp	edx, esi
	jl	SHORT $L86113
	cmp	edx, edi
	jl	SHORT $L86112
$L86113:
; Line 1285
	mov	DWORD PTR _dword_52B99C, ebx
$L86112:
; Line 1286
	mov	esi, eax
	push	0
	sub	esi, ecx
	pop	ebx
	setns	bl
; Line 1291
	push	0
	lea	ebx, DWORD PTR [ebx+ebx-1]
	mov	edi, ebx
	pop	ebx
	imul	esi, edi
	mov	DWORD PTR _v11$[ebp], esi
	mov	esi, edx
	sub	esi, DWORD PTR _y0$[ebp]
	setns	bl
	lea	ebx, DWORD PTR [ebx+ebx-1]
; Line 1295
	imul	esi, ebx
	mov	DWORD PTR _v35$[ebp], ebx
; Line 1296
	xor	ebx, ebx
	cmp	DWORD PTR _v35$[ebp], edi
	mov	DWORD PTR _v10$[ebp], esi
	sete	bl
; Line 1300
	cmp	DWORD PTR _v11$[ebp], esi
	lea	ebx, DWORD PTR [ebx+ebx-1]
	mov	DWORD PTR _v12$[ebp], ebx
	jl	SHORT $L86120
; Line 1301
	and	DWORD PTR _dword_52B970, 0
; Line 1302
	mov	ebx, DWORD PTR _v9$[ebp]
	jmp	SHORT $L86121
$L86120:
; Line 1303
	mov	DWORD PTR _v8$[ebp], ecx
; Line 1308
	mov	ecx, esi
	xor	ecx, DWORD PTR _v11$[ebp]
	mov	ebx, DWORD PTR _y0$[ebp]
	xor	eax, edx
; Line 1311
	mov	DWORD PTR _dword_52B970, 1
	xor	edx, eax
	xor	esi, ecx
	xor	eax, edx
	xor	ecx, esi
	mov	DWORD PTR _v10$[ebp], esi
	mov	DWORD PTR _v11$[ebp], ecx
$L86121:
; Line 1313
	cmp	eax, ebx
	jl	SHORT $L86122
; Line 1315
	mov	edi, DWORD PTR _v8$[ebp]
	mov	esi, ebx
; Line 1316
	mov	ebx, eax
; Line 1317
	mov	DWORD PTR _v13$[ebp], edx
; Line 1318
	jmp	SHORT $L86123
$L86122:
; Line 1319
	mov	esi, eax
; Line 1322
	mov	eax, DWORD PTR _v8$[ebp]
	mov	edi, edx
	mov	DWORD PTR _v13$[ebp], eax
$L86123:
; Line 1324
	mov	eax, DWORD PTR _v11$[ebp]
	push	4
	dec	eax
	pop	ecx
	cdq
	idiv	ecx
; Line 1326
	mov	ecx, esi
	mov	DWORD PTR 12+[ebp], edx
	mov	edx, edi
	mov	DWORD PTR -12+[ebp], eax
	call	@engine_draw_pixel@8
; Line 1327
	mov	edx, DWORD PTR _v13$[ebp]
	mov	ecx, ebx
	call	@engine_draw_pixel@8
; Line 1328
	mov	ecx, DWORD PTR _v10$[ebp]
	mov	edx, DWORD PTR _v11$[ebp]
	lea	eax, DWORD PTR [ecx+ecx]
	mov	DWORD PTR -8+[ebp], eax
	sub	eax, edx
	add	eax, eax
	mov	DWORD PTR _v14$[ebp], eax
; Line 1330
	mov	eax, ecx
	js	$L86124
	sub	eax, edx
	lea	ecx, DWORD PTR [eax+eax]
; Line 1331
	shl	eax, 2
	mov	DWORD PTR _v15$[ebp], eax
; Line 1332
	add	eax, edx
	mov	DWORD PTR _v38$[ebp], eax
; Line 1333
	mov	eax, DWORD PTR -12+[ebp]
	test	eax, eax
	mov	DWORD PTR _v40$[ebp], ecx
	jle	$L86127
; Line 1330
	mov	DWORD PTR -16+[ebp], eax
$L86125:
; Line 1336
	mov	eax, DWORD PTR _v38$[ebp]
	inc	esi
	dec	ebx
; Line 1339
	mov	ecx, esi
	test	eax, eax
	jg	SHORT $L86128
; Line 1337
	cmp	DWORD PTR _v40$[ebp], eax
	jg	SHORT $L86129
; Line 1338
	add	edi, DWORD PTR _v12$[ebp]
; Line 1339
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1340
	inc	esi
; Line 1341
	mov	ecx, esi
	call	@engine_draw_pixel@8
; Line 1342
	mov	eax, DWORD PTR _v12$[ebp]
; Line 1343
	mov	ecx, ebx
	sub	DWORD PTR _v13$[ebp], eax
	mov	edx, DWORD PTR _v13$[ebp]
	call	@engine_draw_pixel@8
; Line 1344
	jmp	SHORT $L86130
$L86129:
; Line 1345
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1346
	add	edi, DWORD PTR _v12$[ebp]
; Line 1347
	inc	esi
; Line 1348
	mov	ecx, esi
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1349
	mov	edx, DWORD PTR _v13$[ebp]
	mov	ecx, ebx
	call	@engine_draw_pixel@8
; Line 1350
	mov	eax, DWORD PTR _v12$[ebp]
	sub	DWORD PTR _v13$[ebp], eax
$L86130:
; Line 1353
	mov	edx, DWORD PTR _v13$[ebp]
	dec	ebx
	mov	ecx, ebx
	call	@engine_draw_pixel@8
; Line 1354
	mov	eax, DWORD PTR _v14$[ebp]
; Line 1355
	jmp	SHORT $L87159
$L86128:
; Line 1356
	mov	eax, DWORD PTR _v12$[ebp]
	lea	edx, DWORD PTR [edi+eax]
; Line 1357
	call	@engine_draw_pixel@8
; Line 1358
	mov	eax, DWORD PTR _v12$[ebp]
; Line 1359
	inc	esi
; Line 1360
	mov	ecx, esi
	lea	edi, DWORD PTR [edx+eax]
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1361
	mov	edx, DWORD PTR _v13$[ebp]
; Line 1362
	mov	ecx, ebx
	sub	edx, DWORD PTR _v12$[ebp]
	call	@engine_draw_pixel@8
; Line 1363
	sub	edx, DWORD PTR _v12$[ebp]
; Line 1364
	dec	ebx
; Line 1365
	mov	ecx, ebx
	mov	DWORD PTR _v13$[ebp], edx
	call	@engine_draw_pixel@8
; Line 1366
	mov	eax, DWORD PTR _v15$[ebp]
$L87159:
	add	DWORD PTR _v38$[ebp], eax
	dec	DWORD PTR -16+[ebp]
	jne	$L86125
$L86127:
; Line 1369
	cmp	DWORD PTR 12+[ebp], 0
	je	$L86163
; Line 1370
	mov	eax, DWORD PTR _v38$[ebp]
; Line 1373
	inc	esi
	test	eax, eax
; Line 1374
	mov	ecx, esi
	jg	SHORT $L86133
; Line 1371
	cmp	DWORD PTR _v40$[ebp], eax
	jg	$L86155
; Line 1372
	mov	eax, DWORD PTR _v12$[ebp]
	lea	edx, DWORD PTR [edi+eax]
; Line 1374
	call	@engine_draw_pixel@8
; Line 1375
	cmp	DWORD PTR 12+[ebp], 1
	jle	SHORT $L86135
; Line 1376
	lea	ecx, DWORD PTR [esi+1]
	call	@engine_draw_pixel@8
$L86135:
; Line 1377
	cmp	DWORD PTR 12+[ebp], 2
	jle	$L86163
; Line 1378
	mov	eax, DWORD PTR _v38$[ebp]
; Line 1379
	mov	edx, DWORD PTR _v13$[ebp]
	cmp	DWORD PTR _v40$[ebp], eax
	lea	ecx, DWORD PTR [ebx-1]
; Line 1380
	jge	$L87160
; Line 1381
	sub	edx, DWORD PTR _v12$[ebp]
; Line 1383
	jmp	$L87160
$L86133:
; Line 1392
	mov	eax, DWORD PTR _v12$[ebp]
	lea	edx, DWORD PTR [edi+eax]
; Line 1394
	call	@engine_draw_pixel@8
; Line 1395
	cmp	DWORD PTR 12+[ebp], 1
	jle	$L86156
; Line 1396
	mov	eax, DWORD PTR _v12$[ebp]
	add	edx, eax
; Line 1401
	jmp	$L87164
$L86124:
; Line 1404
	mov	ecx, DWORD PTR -12+[ebp]
	shl	eax, 2
	mov	DWORD PTR -24+[ebp], eax
	sub	eax, edx
	test	ecx, ecx
	mov	DWORD PTR _v37$[ebp], eax
	jle	$L86148
; Line 1402
	mov	DWORD PTR -16+[ebp], ecx
$L86146:
; Line 1405
	inc	esi
; Line 1406
	dec	ebx
; Line 1407
	test	eax, eax
; Line 1410
	mov	ecx, esi
	jl	SHORT $L86149
; Line 1408
	cmp	DWORD PTR -8+[ebp], eax
	jg	SHORT $L86150
; Line 1409
	add	edi, DWORD PTR _v12$[ebp]
; Line 1410
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1411
	inc	esi
; Line 1412
	mov	ecx, esi
	call	@engine_draw_pixel@8
; Line 1413
	mov	eax, DWORD PTR _v12$[ebp]
; Line 1414
	mov	ecx, ebx
	sub	DWORD PTR _v13$[ebp], eax
	mov	edx, DWORD PTR _v13$[ebp]
	call	@engine_draw_pixel@8
; Line 1415
	jmp	SHORT $L86151
$L86150:
; Line 1416
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1417
	add	edi, DWORD PTR _v12$[ebp]
; Line 1418
	inc	esi
; Line 1419
	mov	ecx, esi
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1420
	mov	edx, DWORD PTR _v13$[ebp]
	mov	ecx, ebx
	call	@engine_draw_pixel@8
; Line 1421
	mov	eax, DWORD PTR _v12$[ebp]
	sub	DWORD PTR _v13$[ebp], eax
$L86151:
; Line 1424
	mov	edx, DWORD PTR _v13$[ebp]
	dec	ebx
	mov	ecx, ebx
	call	@engine_draw_pixel@8
; Line 1425
	mov	eax, DWORD PTR _v14$[ebp]
; Line 1426
	jmp	SHORT $L87163
$L86149:
; Line 1427
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1428
	inc	esi
; Line 1429
	mov	ecx, esi
	call	@engine_draw_pixel@8
; Line 1430
	mov	edx, DWORD PTR _v13$[ebp]
	mov	ecx, ebx
	call	@engine_draw_pixel@8
; Line 1431
	dec	ebx
; Line 1432
	mov	ecx, ebx
	call	@engine_draw_pixel@8
; Line 1433
	mov	eax, DWORD PTR -24+[ebp]
$L87163:
	add	DWORD PTR _v37$[ebp], eax
	dec	DWORD PTR -16+[ebp]
	mov	eax, DWORD PTR _v37$[ebp]
	jne	$L86146
$L86148:
; Line 1436
	cmp	DWORD PTR 12+[ebp], 0
	je	SHORT $L86163
; Line 1440
	inc	esi
	test	eax, eax
; Line 1441
	mov	ecx, esi
	jl	SHORT $L86154
; Line 1438
	cmp	DWORD PTR -8+[ebp], eax
	jg	SHORT $L86155
; Line 1439
	mov	eax, DWORD PTR _v12$[ebp]
	lea	edx, DWORD PTR [edi+eax]
; Line 1441
	call	@engine_draw_pixel@8
; Line 1442
	cmp	DWORD PTR 12+[ebp], 1
	jle	SHORT $L86156
$L87164:
; Line 1443
	lea	ecx, DWORD PTR [esi+1]
	call	@engine_draw_pixel@8
$L86156:
; Line 1444
	cmp	DWORD PTR 12+[ebp], 2
	jle	SHORT $L86163
; Line 1445
	mov	edx, DWORD PTR _v13$[ebp]
	sub	edx, DWORD PTR _v12$[ebp]
; Line 1446
	jmp	SHORT $L87162
$L86155:
; Line 1448
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1449
	cmp	DWORD PTR 12+[ebp], 1
	jle	SHORT $L86162
; Line 1450
	mov	eax, DWORD PTR _v12$[ebp]
	lea	edx, DWORD PTR [edi+eax]
; Line 1454
	jmp	SHORT $L87161
$L86154:
; Line 1456
	mov	edx, edi
	call	@engine_draw_pixel@8
; Line 1457
	cmp	DWORD PTR 12+[ebp], 1
	jle	SHORT $L86162
$L87161:
; Line 1458
	lea	ecx, DWORD PTR [esi+1]
	call	@engine_draw_pixel@8
$L86162:
; Line 1459
	cmp	DWORD PTR 12+[ebp], 2
	jle	SHORT $L86163
; Line 1460
	mov	edx, DWORD PTR _v13$[ebp]
$L87162:
	lea	ecx, DWORD PTR [ebx-1]
$L87160:
	call	@engine_draw_pixel@8
$L86163:
	pop	edi
	pop	esi
	pop	ebx
; Line 1464
	leave
	ret	12					; 0000000cH
@DrawLine@20 ENDP
_TEXT	ENDS
PUBLIC	@GetDirection@16
; Function compile flags: /Ogsy
;	COMDAT @GetDirection@16
_TEXT	SEGMENT
_x2$ = 8
_y2$ = 12
@GetDirection@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 1470
	push	esi
; Line 1474
	mov	esi, DWORD PTR _x2$[esp]
	sub	esi, ecx
; Line 1475
	mov	ecx, DWORD PTR _y2$[esp]
	sub	ecx, edx
; Line 1477
	test	esi, esi
	jl	SHORT $L86177
; Line 1478
	test	ecx, ecx
; Line 1480
	lea	edx, DWORD PTR [esi+esi]
	jl	SHORT $L86178
	xor	eax, eax
	cmp	edx, ecx
	jge	SHORT $L86181
; Line 1481
	inc	eax
; Line 1482
	jmp	SHORT $L86181
$L86178:
; Line 1483
	neg	ecx
; Line 1484
	push	6
; Line 1485
	cmp	edx, ecx
	pop	eax
	jge	SHORT $L86181
; Line 1486
	push	5
	pop	eax
$L86181:
; Line 1488
	add	ecx, ecx
	cmp	ecx, esi
	jge	SHORT $L86172
; Line 1489
	push	7
	jmp	SHORT $L87167
$L86177:
; Line 1491
	neg	esi
; Line 1492
	test	ecx, ecx
; Line 1494
	lea	edx, DWORD PTR [esi+esi]
	jl	SHORT $L86184
	push	2
	cmp	edx, ecx
	pop	eax
	jge	SHORT $L86187
; Line 1495
	xor	eax, eax
	inc	eax
; Line 1496
	jmp	SHORT $L86187
$L86184:
; Line 1497
	neg	ecx
; Line 1498
	push	4
; Line 1499
	cmp	edx, ecx
	pop	eax
	jge	SHORT $L86187
; Line 1500
	push	5
	pop	eax
$L86187:
; Line 1502
	add	ecx, ecx
	cmp	ecx, esi
	jge	SHORT $L86172
; Line 1503
	push	3
$L87167:
	pop	eax
$L86172:
	pop	esi
; Line 1507
	ret	8
@GetDirection@16 ENDP
_TEXT	ENDS
PUBLIC	@SetRndSeed@4
; Function compile flags: /Ogsy
;	COMDAT @SetRndSeed@4
_TEXT	SEGMENT
@SetRndSeed@4 PROC NEAR					; COMDAT
; _s$ = ecx
; Line 1511
	and	DWORD PTR _SeedCount, 0
; Line 1512
	mov	DWORD PTR _sglGameSeed, ecx
; Line 1513
	mov	DWORD PTR _orgseed, ecx
; Line 1514
	ret	0
@SetRndSeed@4 ENDP
_TEXT	ENDS
PUBLIC	_GetRndSeed
EXTRN	_abs:NEAR
; Function compile flags: /Ogsy
;	COMDAT _GetRndSeed
_TEXT	SEGMENT
_GetRndSeed PROC NEAR					; COMDAT
; Line 1522
	mov	eax, DWORD PTR _sglGameSeed
	inc	DWORD PTR _SeedCount
	imul	eax, 22695477				; 015a4e35H
	inc	eax
; Line 1523
	push	eax
	mov	DWORD PTR _sglGameSeed, eax
	call	_abs
	pop	ecx
; Line 1524
	ret	0
_GetRndSeed ENDP
_TEXT	ENDS
PUBLIC	@random@8
; Function compile flags: /Ogsy
;	COMDAT @random@8
_TEXT	SEGMENT
@random@8 PROC NEAR					; COMDAT
; _idx$ = cl
; _v$ = edx
; Line 1529
	push	esi
	mov	esi, edx
; Line 1530
	test	esi, esi
	jg	SHORT $L86198
; Line 1531
	xor	eax, eax
	pop	esi
; Line 1535
	ret	0
$L86198:
; Line 1533
	call	_GetRndSeed
	cmp	esi, 65535				; 0000ffffH
	jge	SHORT $L87177
; Line 1534
	sar	eax, 16					; 00000010H
$L87177:
	cdq
	idiv	esi
	pop	esi
	mov	eax, edx
; Line 1535
	ret	0
@random@8 ENDP
_TEXT	ENDS
PUBLIC	_mem_init_mutex
PUBLIC	_mem_atexit_mutex
; Function compile flags: /Ogsy
;	COMDAT _engine_c_init
_TEXT	SEGMENT
_engine_c_init PROC NEAR				; COMDAT
; Line 1543
	call	_mem_init_mutex
; Line 1544
	jmp	_mem_atexit_mutex
_engine_c_init ENDP
_TEXT	ENDS
EXTRN	__imp__InitializeCriticalSection@4:NEAR
_BSS	SEGMENT
_sgMemCrit DB	018H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT _mem_init_mutex
_TEXT	SEGMENT
_mem_init_mutex PROC NEAR				; COMDAT
; Line 1552
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__InitializeCriticalSection@4
; Line 1553
	ret	0
_mem_init_mutex ENDP
_TEXT	ENDS
PUBLIC	_mem_free_mutex
EXTRN	_atexit:NEAR
; Function compile flags: /Ogsy
;	COMDAT _mem_atexit_mutex
_TEXT	SEGMENT
_mem_atexit_mutex PROC NEAR				; COMDAT
; Line 1557
	push	OFFSET FLAT:_mem_free_mutex
	call	_atexit
	pop	ecx
; Line 1558
	ret	0
_mem_atexit_mutex ENDP
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _mem_free_mutex
_TEXT	SEGMENT
_mem_free_mutex PROC NEAR				; COMDAT
; Line 1562
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__DeleteCriticalSection@4
; Line 1563
	ret	0
_mem_free_mutex ENDP
_TEXT	ENDS
PUBLIC	@DiabloAllocPtr@4
PUBLIC	??_C@_0CA@FMFP@C?3?2Src?2Diablo?2Source?2ENGINE?4CPP?$AA@ ; `string'
EXTRN	__imp__GetLastError@0:NEAR
EXTRN	__imp__EnterCriticalSection@4:NEAR
EXTRN	__imp__LeaveCriticalSection@4:NEAR
EXTRN	@ErrDlg@16:NEAR
EXTRN	_SMemAlloc@16:NEAR
;	COMDAT ??_C@_0CA@FMFP@C?3?2Src?2Diablo?2Source?2ENGINE?4CPP?$AA@
_DATA	SEGMENT
??_C@_0CA@FMFP@C?3?2Src?2Diablo?2Source?2ENGINE?4CPP?$AA@ DB 'C:\Src\Diab'
	DB	'lo\Source\ENGINE.CPP', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DiabloAllocPtr@4
_TEXT	SEGMENT
@DiabloAllocPtr@4 PROC NEAR				; COMDAT
; _dwBytes$ = ecx
; Line 1566
	push	ebx
	push	esi
; Line 1569
	mov	esi, OFFSET FLAT:_sgMemCrit
	push	edi
	push	esi
	mov	ebx, ecx
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 1570
	mov	edi, OFFSET FLAT:??_C@_0CA@FMFP@C?3?2Src?2Diablo?2Source?2ENGINE?4CPP?$AA@ ; `string'
	push	0
	push	2236					; 000008bcH
	push	edi
	push	ebx
	call	_SMemAlloc@16
	mov	ebx, eax
; Line 1571
	push	esi
	call	DWORD PTR __imp__LeaveCriticalSection@4
; Line 1573
	test	ebx, ebx
	jne	SHORT $L86215
; Line 1574
	push	2269					; 000008ddH
	push	edi
	call	DWORD PTR __imp__GetLastError@0
	mov	edx, eax
	push	105					; 00000069H
	pop	ecx
	call	@ErrDlg@16
$L86215:
	pop	edi
; Line 1577
	mov	eax, ebx
	pop	esi
	pop	ebx
; Line 1578
	ret	0
@DiabloAllocPtr@4 ENDP
_TEXT	ENDS
PUBLIC	@mem_free_dbg@4
EXTRN	_SMemFree@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @mem_free_dbg@4
_TEXT	SEGMENT
@mem_free_dbg@4 PROC NEAR				; COMDAT
; _p$ = ecx
; Line 1581
	push	edi
	mov	edi, ecx
; Line 1582
	test	edi, edi
	je	SHORT $L86219
	push	esi
; Line 1583
	mov	esi, OFFSET FLAT:_sgMemCrit
	push	esi
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 1584
	push	0
	push	2317					; 0000090dH
	push	OFFSET FLAT:??_C@_0CA@FMFP@C?3?2Src?2Diablo?2Source?2ENGINE?4CPP?$AA@ ; `string'
	push	edi
	call	_SMemFree@16
; Line 1585
	push	esi
	call	DWORD PTR __imp__LeaveCriticalSection@4
	pop	esi
$L86219:
	pop	edi
; Line 1587
	ret	0
@mem_free_dbg@4 ENDP
_TEXT	ENDS
PUBLIC	@LoadFileInMem@8
PUBLIC	??_C@_0BG@CEOD@Zero?5length?5SFILE?3?6?$CFs?$AA@ ; `string'
EXTRN	@WCloseFile@4:NEAR
EXTRN	@WGetFileSize@8:NEAR
EXTRN	@WOpenFile@12:NEAR
EXTRN	@WReadFile@12:NEAR
EXTRN	_TermMsg:NEAR
;	COMDAT ??_C@_0BG@CEOD@Zero?5length?5SFILE?3?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BG@CEOD@Zero?5length?5SFILE?3?6?$CFs?$AA@ DB 'Zero length SFILE:', 0aH
	DB	'%s', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @LoadFileInMem@8
_TEXT	SEGMENT
_file$ = -4
@LoadFileInMem@8 PROC NEAR				; COMDAT
; _pszName$ = ecx
; _pdwFileLen$ = edx
; Line 1590
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
; Line 1595
	push	0
	lea	edx, DWORD PTR _file$[ebp]
	mov	ebx, ecx
	call	@WOpenFile@12
; Line 1596
	mov	ecx, DWORD PTR _file$[ebp]
	xor	edx, edx
	call	@WGetFileSize@8
; Line 1598
	test	edi, edi
	mov	esi, eax
	je	SHORT $L86229
; Line 1599
	mov	DWORD PTR [edi], esi
$L86229:
; Line 1601
	test	esi, esi
	jne	SHORT $L86230
; Line 1602
	push	ebx
	push	OFFSET FLAT:??_C@_0BG@CEOD@Zero?5length?5SFILE?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86230:
; Line 1604
	mov	ecx, esi
	call	@DiabloAllocPtr@4
; Line 1606
	mov	ecx, DWORD PTR _file$[ebp]
	mov	edi, eax
	push	esi
	mov	edx, edi
	call	@WReadFile@12
; Line 1607
	mov	ecx, DWORD PTR _file$[ebp]
	call	@WCloseFile@4
; Line 1609
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 1610
	leave
	ret	0
@LoadFileInMem@8 ENDP
_TEXT	ENDS
PUBLIC	@LoadFileWithMem@8
PUBLIC	??_C@_0BK@IOEJ@LoadFileWithMem?$CINULL?$CJ?3?6?$CFs?$AA@ ; `string'
;	COMDAT ??_C@_0BK@IOEJ@LoadFileWithMem?$CINULL?$CJ?3?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BK@IOEJ@LoadFileWithMem?$CINULL?$CJ?3?6?$CFs?$AA@ DB 'LoadFileWith'
	DB	'Mem(NULL):', 0aH, '%s', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @LoadFileWithMem@8
_TEXT	SEGMENT
_a1$ = -4
@LoadFileWithMem@8 PROC NEAR				; COMDAT
; _pszName$ = ecx
; _buf$ = edx
; Line 1613
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	ebx, edx
	push	esi
	push	edi
; Line 1621
	test	ebx, ebx
	mov	esi, ecx
	jne	SHORT $L86243
; Line 1622
	push	esi
	push	OFFSET FLAT:??_C@_0BK@IOEJ@LoadFileWithMem?$CINULL?$CJ?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86243:
; Line 1623
	push	0
	lea	edx, DWORD PTR _a1$[ebp]
	mov	ecx, esi
	call	@WOpenFile@12
; Line 1624
	mov	ecx, DWORD PTR _a1$[ebp]
	xor	edx, edx
	call	@WGetFileSize@8
	mov	edi, eax
; Line 1625
	test	edi, edi
	jne	SHORT $L86245
; Line 1626
	push	esi
	push	OFFSET FLAT:??_C@_0BG@CEOD@Zero?5length?5SFILE?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86245:
; Line 1627
	mov	ecx, DWORD PTR _a1$[ebp]
	push	edi
	mov	edx, ebx
	call	@WReadFile@12
; Line 1628
	mov	ecx, DWORD PTR _a1$[ebp]
	call	@WCloseFile@4
	pop	edi
	pop	esi
	pop	ebx
; Line 1629
	leave
	ret	0
@LoadFileWithMem@8 ENDP
_TEXT	ENDS
PUBLIC	@Cl2ApplyTrans@12
; Function compile flags: /Ogsy
;	COMDAT @Cl2ApplyTrans@12
_TEXT	SEGMENT
_last_frame$ = 8
@Cl2ApplyTrans@12 PROC NEAR				; COMDAT
; _p$ = ecx
; _ttbl$ = edx
; Line 1632
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 1643
	mov	esi, DWORD PTR _last_frame$[ebp]
	cmp	esi, 1
	jl	SHORT $L86263
	push	4
	mov	DWORD PTR 8+[ebp], 8
	pop	eax
	mov	DWORD PTR -4+[ebp], esi
	push	ebx
	push	edi
$L86261:
; Line 1644
	mov	edi, DWORD PTR [eax+ecx]
; Line 1645
	mov	esi, DWORD PTR [eax+ecx+4]
	sub	esi, edi
	sub	esi, 10					; 0000000aH
; Line 1646
	lea	eax, DWORD PTR [ecx+edi+10]
; Line 1647
	je	SHORT $L86268
$L86267:
; Line 1648
	mov	bl, BYTE PTR [eax]
	inc	eax
; Line 1649
	dec	esi
; Line 1650
	test	bl, bl
	jge	SHORT $L86277
; Line 1651
	neg	bl
; Line 1652
	cmp	bl, 65					; 00000041H
	jg	SHORT $L86271
; Line 1653
	movsx	edi, bl
	sub	esi, edi
; Line 1654
	test	bl, bl
	je	SHORT $L86277
; Line 1655
	movzx	edi, bl
$L86274:
; Line 1657
	movzx	ebx, BYTE PTR [eax]
	mov	bl, BYTE PTR [ebx+edx]
	mov	BYTE PTR [eax], bl
; Line 1658
	inc	eax
; Line 1659
	dec	edi
; Line 1660
	jne	SHORT $L86274
; Line 1662
	jmp	SHORT $L86277
$L86271:
; Line 1664
	movzx	edi, BYTE PTR [eax]
	dec	esi
	mov	bl, BYTE PTR [edi+edx]
	mov	BYTE PTR [eax], bl
; Line 1665
	inc	eax
$L86277:
; Line 1647
	test	esi, esi
	jne	SHORT $L86267
$L86268:
; Line 1669
	mov	eax, DWORD PTR 8+[ebp]
	add	DWORD PTR 8+[ebp], 4
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L86261
	pop	edi
	pop	ebx
$L86263:
	pop	esi
; Line 1671
	leave
	ret	4
@Cl2ApplyTrans@12 ENDP
_TEXT	ENDS
PUBLIC	@Cl2DecodeFrm1@28
PUBLIC	@Cl2DecDatFrm1@16
; Function compile flags: /Ogsy
;	COMDAT @Cl2DecodeFrm1@28
_TEXT	SEGMENT
_x$ = -4
_pCelBuff$ = 8
_nCel$ = 12
_width$ = 16
_dir1$ = 20
_dir2$ = 24
_v9$ = 8
@Cl2DecodeFrm1@28 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1674
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1681
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	DWORD PTR _x$[ebp], ecx
	je	SHORT $L86305
; Line 1683
	mov	edx, DWORD PTR _pCelBuff$[ebp]
	test	edx, edx
	je	SHORT $L86305
; Line 1684
	mov	eax, DWORD PTR _nCel$[ebp]
	test	eax, eax
	jle	SHORT $L86305
; Line 1685
	mov	ebx, DWORD PTR [edx+eax*4]
; Line 1688
	mov	esi, DWORD PTR _dir1$[ebp]
	mov	DWORD PTR _v9$[ebp], ebx
	lea	ecx, DWORD PTR [ebx+edx]
	cmp	WORD PTR [ecx+esi], 0
	je	SHORT $L86305
; Line 1689
	mov	eax, DWORD PTR _dir2$[ebp]
	cmp	eax, 8
	je	SHORT $L86309
	mov	bx, WORD PTR [ecx+eax]
	test	bx, bx
	movzx	eax, bx
	jne	SHORT $L86308
	mov	ebx, DWORD PTR _v9$[ebp]
$L86309:
; Line 1690
	mov	eax, DWORD PTR _nCel$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+4]
	sub	eax, ebx
$L86308:
; Line 1695
	movzx	edx, WORD PTR [ecx+esi]
	push	DWORD PTR _width$[ebp]
	sub	eax, edx
	shl	esi, 4
	sub	edi, esi
	add	edx, ecx
	push	eax
	mov	ecx, DWORD PTR _screen_y_times_768[edi*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _x$[ebp]
	call	@Cl2DecDatFrm1@16
$L86305:
	pop	edi
	pop	esi
	pop	ebx
; Line 1700
	leave
	ret	20					; 00000014H
@Cl2DecodeFrm1@28 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @Cl2DecDatFrm1@16
_TEXT	SEGMENT
_a3$ = 8
_width$ = 12
_v6$ = -4
@Cl2DecDatFrm1@16 PROC NEAR				; COMDAT
; _buffer$ = ecx
; _frame_content$ = edx
; Line 1703
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1715
	and	DWORD PTR _v6$[ebp], 0
	push	esi
; Line 1716
	mov	esi, DWORD PTR _width$[ebp]
	push	edi
; Line 1717
	mov	edi, DWORD PTR _a3$[ebp]
	mov	eax, ecx
$L86333:
; Line 1719
	mov	cl, BYTE PTR [edx]
	inc	edx
; Line 1720
	dec	edi
	mov	BYTE PTR _v6$[ebp], cl
; Line 1721
	test	cl, cl
	js	SHORT $L86337
$L86338:
; Line 1723
	cmp	DWORD PTR _v6$[ebp], esi
	jg	SHORT $L86341
; Line 1724
	mov	ecx, DWORD PTR _v6$[ebp]
; Line 1725
	add	eax, ecx
; Line 1726
	and	DWORD PTR _v6$[ebp], 0
; Line 1727
	jmp	SHORT $L86342
$L86341:
; Line 1729
	add	eax, esi
; Line 1730
	sub	DWORD PTR _v6$[ebp], esi
	mov	ecx, esi
$L86342:
; Line 1732
	sub	esi, ecx
; Line 1733
	jne	SHORT $L86339
; Line 1734
	mov	esi, DWORD PTR _width$[ebp]
; Line 1735
	mov	ecx, -768				; fffffd00H
	sub	ecx, esi
	add	eax, ecx
$L86339:
; Line 1737
	cmp	DWORD PTR _v6$[ebp], 0
	jne	SHORT $L86338
; Line 1738
	jmp	SHORT $L86334
$L86337:
; Line 1739
	neg	BYTE PTR _v6$[ebp]
; Line 1740
	cmp	BYTE PTR _v6$[ebp], 65			; 00000041H
	jg	SHORT $L86348
; Line 1741
	sub	edi, DWORD PTR _v6$[ebp]
; Line 1742
	sub	esi, DWORD PTR _v6$[ebp]
$L86349:
; Line 1744
	mov	cl, BYTE PTR [edx]
	inc	edx
; Line 1746
	dec	DWORD PTR _v6$[ebp]
	mov	BYTE PTR [eax], cl
; Line 1747
	inc	eax
; Line 1748
	cmp	DWORD PTR _v6$[ebp], 0
	jne	SHORT $L86349
; Line 1749
	jmp	SHORT $L86356
$L86348:
; Line 1750
	add	BYTE PTR _v6$[ebp], 191			; 000000bfH
; Line 1752
	mov	cl, BYTE PTR [edx]
	dec	edi
	inc	edx
; Line 1753
	sub	esi, DWORD PTR _v6$[ebp]
$L86354:
; Line 1756
	dec	DWORD PTR _v6$[ebp]
	mov	BYTE PTR [eax], cl
; Line 1757
	inc	eax
; Line 1758
	cmp	DWORD PTR _v6$[ebp], 0
	jne	SHORT $L86354
$L86356:
; Line 1760
	test	esi, esi
	jne	SHORT $L86334
; Line 1761
	mov	esi, DWORD PTR _width$[ebp]
; Line 1762
	mov	ecx, -768				; fffffd00H
	sub	ecx, esi
	add	eax, ecx
$L86334:
; Line 1765
	test	edi, edi
	jne	$L86333
	pop	edi
	pop	esi
; Line 1766
	leave
	ret	8
@Cl2DecDatFrm1@16 ENDP
_TEXT	ENDS
PUBLIC	@Cl2DecodeFrm2@32
PUBLIC	@Cl2DecDatFrm2@20
; Function compile flags: /Ogsy
;	COMDAT @Cl2DecodeFrm2@32
_TEXT	SEGMENT
_screen_x$ = -8
_screen_y$ = 8
_pCelBuff$ = 12
_nCel$ = 16
_frame_width$ = 20
_a7$ = 24
_a8$ = 28
_colour$ = -4
@Cl2DecodeFrm2@32 PROC NEAR				; COMDAT
; _colour$ = ecx
; _screen_x$ = edx
; Line 1769
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1776
	cmp	DWORD PTR _gpBuffer, 0
	push	esi
	push	edi
	mov	DWORD PTR _screen_x$[ebp], edx
	mov	DWORD PTR _colour$[ebp], ecx
	je	SHORT $L86384
; Line 1777
	mov	edi, DWORD PTR _pCelBuff$[ebp]
	test	edi, edi
	je	SHORT $L86384
; Line 1778
	mov	eax, DWORD PTR _nCel$[ebp]
	test	eax, eax
	jle	SHORT $L86384
; Line 1779
	mov	ecx, DWORD PTR [edi+eax*4]
; Line 1781
	mov	esi, DWORD PTR _a7$[ebp]
	lea	edx, DWORD PTR [ecx+edi]
	cmp	WORD PTR [edx+esi], 0
	je	SHORT $L86384
	push	ebx
; Line 1782
	mov	ebx, DWORD PTR _a8$[ebp]
	cmp	ebx, 8
	je	SHORT $L86388
	mov	bx, WORD PTR [edx+ebx]
	test	bx, bx
	movzx	eax, bx
	jne	SHORT $L86387
	mov	eax, DWORD PTR _nCel$[ebp]
$L86388:
; Line 1783
	mov	eax, DWORD PTR [edi+eax*4+4]
	sub	eax, ecx
$L86387:
; Line 1789
	movzx	edi, WORD PTR [edx+esi]
	push	DWORD PTR _colour$[ebp]
	sub	eax, edi
	shl	esi, 4
	push	DWORD PTR _frame_width$[ebp]
	add	edx, edi
	push	eax
	mov	eax, DWORD PTR _screen_y$[ebp]
	sub	eax, esi
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	call	@Cl2DecDatFrm2@20
	pop	ebx
$L86384:
	pop	edi
	pop	esi
; Line 1794
	leave
	ret	24					; 00000018H
@Cl2DecodeFrm2@32 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @Cl2DecDatFrm2@20
_TEXT	SEGMENT
_a3$ = 8
_frame_width$ = 12
_colour$ = 16
_v7$ = -4
_v9$ = 8
@Cl2DecDatFrm2@20 PROC NEAR				; COMDAT
; _buffer$ = ecx
; _frame_content$ = edx
; Line 1797
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1810
	and	DWORD PTR _v7$[ebp], 0
	mov	eax, ecx
; Line 1812
	mov	ecx, DWORD PTR _a3$[ebp]
	push	esi
	mov	esi, DWORD PTR _frame_width$[ebp]
	push	edi
	mov	DWORD PTR _v9$[ebp], ecx
	mov	cl, BYTE PTR _colour$[ebp]
	mov	edi, edx
$L86413:
; Line 1815
	mov	dl, BYTE PTR [edi]
	inc	edi
; Line 1816
	dec	DWORD PTR _v9$[ebp]
	mov	BYTE PTR _v7$[ebp], dl
; Line 1817
	test	dl, dl
	jns	SHORT $L86433
; Line 1818
	neg	BYTE PTR _v7$[ebp]
; Line 1819
	cmp	BYTE PTR _v7$[ebp], 65			; 00000041H
	jg	SHORT $L86421
; Line 1820
	mov	edx, DWORD PTR _v7$[ebp]
	sub	DWORD PTR _v9$[ebp], edx
; Line 1821
	sub	esi, edx
$L86422:
; Line 1823
	mov	dl, BYTE PTR [edi]
	inc	edi
; Line 1824
	test	dl, dl
	je	SHORT $L86425
; Line 1825
	mov	BYTE PTR [eax-1], cl
; Line 1826
	mov	BYTE PTR [eax+1], cl
; Line 1827
	mov	BYTE PTR [eax-768], cl
; Line 1828
	mov	BYTE PTR [eax+768], cl
$L86425:
; Line 1830
	dec	DWORD PTR _v7$[ebp]
; Line 1831
	inc	eax
; Line 1832
	cmp	DWORD PTR _v7$[ebp], 0
	jne	SHORT $L86422
; Line 1833
	jmp	SHORT $LABEL_12$86426
$L86421:
; Line 1835
	add	BYTE PTR _v7$[ebp], 191			; 000000bfH
; Line 1836
	dec	DWORD PTR _v9$[ebp]
; Line 1837
	mov	dl, BYTE PTR [edi]
	inc	edi
; Line 1838
	test	dl, dl
	je	SHORT $L86433
; Line 1840
	mov	edx, DWORD PTR _v7$[ebp]
	mov	BYTE PTR [eax-1], cl
	sub	esi, edx
; Line 1841
	mov	BYTE PTR [edx+eax], cl
$L86429:
; Line 1845
	dec	DWORD PTR _v7$[ebp]
	mov	BYTE PTR [eax-768], cl
	mov	BYTE PTR [eax+768], cl
; Line 1846
	inc	eax
; Line 1847
	cmp	DWORD PTR _v7$[ebp], 0
	jne	SHORT $L86429
$LABEL_12$86426:
; Line 1849
	test	esi, esi
	jne	SHORT $L86414
; Line 1850
	mov	esi, DWORD PTR _frame_width$[ebp]
; Line 1851
	mov	edx, -768				; fffffd00H
	sub	edx, esi
	add	eax, edx
; Line 1853
	jmp	SHORT $L86414
$L86433:
; Line 1857
	cmp	DWORD PTR _v7$[ebp], esi
	jg	SHORT $L86436
; Line 1858
	mov	edx, DWORD PTR _v7$[ebp]
; Line 1859
	add	eax, edx
; Line 1860
	and	DWORD PTR _v7$[ebp], 0
; Line 1861
	jmp	SHORT $L86437
$L86436:
; Line 1863
	add	eax, esi
; Line 1864
	sub	DWORD PTR _v7$[ebp], esi
	mov	edx, esi
$L86437:
; Line 1866
	sub	esi, edx
; Line 1867
	jne	SHORT $L86434
; Line 1868
	mov	esi, DWORD PTR _frame_width$[ebp]
; Line 1869
	mov	edx, -768				; fffffd00H
	sub	edx, esi
	add	eax, edx
$L86434:
; Line 1871
	cmp	DWORD PTR _v7$[ebp], 0
	jne	SHORT $L86433
$L86414:
; Line 1873
	cmp	DWORD PTR _v9$[ebp], 0
	jne	$L86413
	pop	edi
	pop	esi
; Line 1874
	leave
	ret	12					; 0000000cH
@Cl2DecDatFrm2@20 ENDP
_TEXT	ENDS
PUBLIC	@Cl2DecodeFrm3@32
PUBLIC	@Cl2DecDatLightTbl1@20
; Function compile flags: /Ogsy
;	COMDAT @Cl2DecodeFrm3@32
_TEXT	SEGMENT
_screen_x$ = -8
_screen_y$ = -4
_pCelBuff$ = 8
_nCel$ = 12
_frame_width$ = 16
_a6$ = 20
_a7$ = 24
_a8$ = 28
_v9$ = 8
_v15$ = 12
@Cl2DecodeFrm3@32 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 1877
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1889
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _screen_y$[ebp], edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	$L86473
; Line 1891
	mov	ebx, DWORD PTR _pCelBuff$[ebp]
	test	ebx, ebx
	je	$L86473
; Line 1892
	mov	eax, DWORD PTR _nCel$[ebp]
	test	eax, eax
	jle	$L86473
; Line 1893
	mov	edx, DWORD PTR [ebx+eax*4]
; Line 1896
	mov	esi, DWORD PTR _a6$[ebp]
	mov	DWORD PTR _v9$[ebp], edx
	lea	ecx, DWORD PTR [edx+ebx]
	mov	ax, WORD PTR [ecx+esi]
; Line 1897
	test	ax, ax
	movzx	edi, ax
	je	$L86473
; Line 1898
	mov	eax, DWORD PTR _a7$[ebp]
	cmp	eax, 8
	je	SHORT $L86477
	mov	dx, WORD PTR [ecx+eax]
	test	dx, dx
	movzx	eax, dx
	jne	SHORT $L86476
	mov	edx, DWORD PTR _v9$[ebp]
$L86477:
; Line 1899
	mov	eax, DWORD PTR _nCel$[ebp]
	mov	eax, DWORD PTR [ebx+eax*4+4]
	sub	eax, edx
$L86476:
; Line 1901
	sub	eax, edi
	lea	edx, DWORD PTR [edi+ecx]
	mov	edi, eax
; Line 1902
	xor	eax, eax
	cmp	DWORD PTR _light4flag, eax
	setne	al
	neg	eax
	mov	DWORD PTR _v15$[ebp], eax
; Line 1903
	and	WORD PTR _v15$[ebp], 62464		; 0000f400H
; Line 1905
	cmp	BYTE PTR _a8$[ebp], 2
	mov	eax, DWORD PTR _v15$[ebp]
	lea	ecx, DWORD PTR [eax+4096]
	jne	SHORT $L86482
; Line 1906
	add	ecx, 256				; 00000100H
$L86482:
; Line 1907
	cmp	BYTE PTR _a8$[ebp], 4
	jl	SHORT $L86483
; Line 1908
	movsx	eax, BYTE PTR _a8$[ebp]
	shl	eax, 8
	lea	ecx, DWORD PTR [ecx+eax-256]
$L86483:
; Line 1914
	mov	eax, DWORD PTR _pLightTbl
	add	eax, ecx
	push	eax
	mov	eax, DWORD PTR _screen_y$[ebp]
	push	DWORD PTR _frame_width$[ebp]
	shl	esi, 4
	sub	eax, esi
	push	edi
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	call	@Cl2DecDatLightTbl1@20
$L86473:
	pop	edi
	pop	esi
	pop	ebx
; Line 1919
	leave
	ret	24					; 00000018H
@Cl2DecodeFrm3@32 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @Cl2DecDatLightTbl1@20
_TEXT	SEGMENT
_a3$ = 8
_a4$ = 12
_unused_lindex$ = 16
_v9$ = 12
_v10$ = 8
@Cl2DecDatLightTbl1@20 PROC NEAR			; COMDAT
; _a1$ = ecx
; _a2$ = edx
; Line 1923
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 1934
	mov	edi, DWORD PTR _a4$[ebp]
; Line 1937
	and	DWORD PTR _v9$[ebp], 0
	mov	esi, edx
	mov	edx, DWORD PTR _a3$[ebp]
; Line 1938
	and	DWORD PTR _v10$[ebp], 0
	mov	eax, edi
	mov	DWORD PTR _sgnWidth, eax
$L86503:
; Line 1940
	mov	bl, BYTE PTR [esi]
	inc	esi
; Line 1941
	dec	edx
	mov	BYTE PTR _v9$[ebp], bl
; Line 1942
	test	bl, bl
	js	SHORT $L86507
$L86508:
; Line 1944
	cmp	DWORD PTR _v9$[ebp], edi
	jg	SHORT $L86511
; Line 1945
	mov	ebx, DWORD PTR _v9$[ebp]
; Line 1946
	add	ecx, ebx
; Line 1947
	and	DWORD PTR _v9$[ebp], 0
	mov	DWORD PTR _v10$[ebp], ebx
; Line 1948
	jmp	SHORT $L86512
$L86511:
; Line 1950
	add	ecx, edi
; Line 1951
	sub	DWORD PTR _v9$[ebp], edi
	mov	DWORD PTR _v10$[ebp], edi
$L86512:
; Line 1953
	sub	edi, DWORD PTR _v10$[ebp]
; Line 1954
	jne	SHORT $L86509
; Line 1956
	mov	ebx, -768				; fffffd00H
	mov	edi, eax
	sub	ebx, eax
	add	ecx, ebx
$L86509:
; Line 1958
	cmp	DWORD PTR _v9$[ebp], 0
	jne	SHORT $L86508
; Line 1959
	jmp	SHORT $L86504
$L86507:
; Line 1960
	neg	BYTE PTR _v9$[ebp]
; Line 1961
	cmp	BYTE PTR _v9$[ebp], 65			; 00000041H
	jg	SHORT $L86518
; Line 1962
	sub	edx, DWORD PTR _v9$[ebp]
; Line 1963
	sub	edi, DWORD PTR _v9$[ebp]
$L86519:
; Line 1965
	mov	al, BYTE PTR [esi]
; Line 1966
	mov	ebx, DWORD PTR _unused_lindex$[ebp]
	mov	BYTE PTR _v10$[ebp], al
	inc	esi
	mov	eax, DWORD PTR _v10$[ebp]
; Line 1967
	dec	DWORD PTR _v9$[ebp]
	mov	al, BYTE PTR [eax+ebx]
	mov	BYTE PTR [ecx], al
; Line 1968
	inc	ecx
; Line 1969
	cmp	DWORD PTR _v9$[ebp], 0
	jne	SHORT $L86519
; Line 1970
	jmp	SHORT $L86528
$L86518:
; Line 1974
	mov	al, BYTE PTR [esi]
	add	BYTE PTR _v9$[ebp], 191			; 000000bfH
; Line 1975
	mov	ebx, DWORD PTR _unused_lindex$[ebp]
	sub	edi, DWORD PTR _v9$[ebp]
	mov	BYTE PTR _v10$[ebp], al
	dec	edx
	mov	eax, DWORD PTR _v10$[ebp]
	inc	esi
	mov	al, BYTE PTR [eax+ebx]
$L86526:
; Line 1978
	dec	DWORD PTR _v9$[ebp]
	mov	BYTE PTR [ecx], al
; Line 1979
	inc	ecx
; Line 1980
	cmp	DWORD PTR _v9$[ebp], 0
	jne	SHORT $L86526
$L86528:
; Line 1983
	mov	eax, DWORD PTR _sgnWidth
	test	edi, edi
	jne	SHORT $L86504
; Line 1984
	mov	ebx, -768				; fffffd00H
	mov	edi, eax
	sub	ebx, eax
	add	ecx, ebx
$L86504:
; Line 1987
	test	edx, edx
	jne	$L86503
	pop	edi
	pop	esi
	pop	ebx
; Line 1988
	pop	ebp
	ret	12					; 0000000cH
@Cl2DecDatLightTbl1@20 ENDP
_TEXT	ENDS
PUBLIC	@Cl2DecodeLightTbl@28
; Function compile flags: /Ogsy
;	COMDAT @Cl2DecodeLightTbl@28
_TEXT	SEGMENT
_screen_x$ = -8
_pCelBuff$ = 8
_nCel$ = 12
_frame_width$ = 16
_a6$ = 20
_a7$ = 24
_v9$ = -4
@Cl2DecodeLightTbl@28 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 1992
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2005
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	$L86572
; Line 2007
	mov	eax, DWORD PTR _pCelBuff$[ebp]
	test	eax, eax
	je	$L86572
; Line 2008
	mov	ecx, DWORD PTR _nCel$[ebp]
	test	ecx, ecx
	jle	SHORT $L86572
; Line 2009
	mov	esi, DWORD PTR [eax+ecx*4]
; Line 2012
	mov	ecx, DWORD PTR _a6$[ebp]
	mov	DWORD PTR _v9$[ebp], esi
	add	esi, eax
	mov	bx, WORD PTR [esi+ecx]
; Line 2013
	test	bx, bx
	movzx	edx, bx
	je	SHORT $L86572
; Line 2014
	mov	ebx, DWORD PTR _a7$[ebp]
	cmp	ebx, 8
	je	SHORT $L86566
	mov	bx, WORD PTR [esi+ebx]
	test	bx, bx
	movzx	eax, bx
	jne	SHORT $L86565
	mov	eax, DWORD PTR _pCelBuff$[ebp]
$L86566:
; Line 2015
	mov	ebx, DWORD PTR _nCel$[ebp]
	mov	eax, DWORD PTR [eax+ebx*4+4]
	sub	eax, DWORD PTR _v9$[ebp]
$L86565:
; Line 2018
	shl	ecx, 4
	sub	edi, ecx
	sub	eax, edx
	add	edx, esi
; Line 2019
	mov	esi, DWORD PTR _light_table_index
	mov	ecx, DWORD PTR _screen_y_times_768[edi*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	test	esi, esi
	je	SHORT $L86571
; Line 2025
	shl	esi, 8
	add	esi, DWORD PTR _pLightTbl
	push	esi
	push	DWORD PTR _frame_width$[ebp]
	push	eax
	call	@Cl2DecDatLightTbl1@20
; Line 2026
	jmp	SHORT $L86572
$L86571:
; Line 2027
	push	DWORD PTR _frame_width$[ebp]
	push	eax
	call	@Cl2DecDatFrm1@16
$L86572:
	pop	edi
	pop	esi
	pop	ebx
; Line 2032
	leave
	ret	20					; 00000014H
@Cl2DecodeLightTbl@28 ENDP
_TEXT	ENDS
PUBLIC	@Cl2DecodeFrm4@28
PUBLIC	@Cl2DecDatFrm4@16
; Function compile flags: /Ogsy
;	COMDAT @Cl2DecodeFrm4@28
_TEXT	SEGMENT
_screen_x$ = -4
_pCelBuff$ = 8
_nCel$ = 12
_frame_width$ = 16
_a6$ = 20
_a7$ = 24
_v9$ = 8
@Cl2DecodeFrm4@28 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 2036
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2047
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	SHORT $L86602
; Line 2049
	mov	edx, DWORD PTR _pCelBuff$[ebp]
	test	edx, edx
	je	SHORT $L86602
; Line 2050
	mov	eax, DWORD PTR _nCel$[ebp]
	test	eax, eax
	jle	SHORT $L86602
; Line 2051
	mov	ebx, DWORD PTR [edx+eax*4]
; Line 2054
	mov	esi, DWORD PTR _a6$[ebp]
	mov	DWORD PTR _v9$[ebp], ebx
	lea	ecx, DWORD PTR [ebx+edx]
	cmp	WORD PTR [ecx+esi], 0
	je	SHORT $L86602
; Line 2055
	mov	eax, DWORD PTR _a7$[ebp]
	cmp	eax, 8
	je	SHORT $L86606
	mov	bx, WORD PTR [ecx+eax]
	test	bx, bx
	movzx	eax, bx
	jne	SHORT $L86605
	mov	ebx, DWORD PTR _v9$[ebp]
$L86606:
; Line 2056
	mov	eax, DWORD PTR _nCel$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+4]
	sub	eax, ebx
$L86605:
; Line 2061
	movzx	edx, WORD PTR [ecx+esi]
	push	DWORD PTR _frame_width$[ebp]
	sub	eax, edx
	shl	esi, 4
	sub	edi, esi
	add	edx, ecx
	push	eax
	mov	ecx, DWORD PTR _screen_y_times_768[edi*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	call	@Cl2DecDatFrm4@16
$L86602:
	pop	edi
	pop	esi
	pop	ebx
; Line 2066
	leave
	ret	20					; 00000014H
@Cl2DecodeFrm4@28 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @Cl2DecDatFrm4@16
_TEXT	SEGMENT
_a3$ = 8
_frame_width$ = 12
_v6$ = -4
@Cl2DecDatFrm4@16 PROC NEAR				; COMDAT
; _buffer$ = ecx
; _a2$ = edx
; Line 2069
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2081
	and	DWORD PTR _v6$[ebp], 0
	push	esi
; Line 2082
	mov	esi, DWORD PTR _frame_width$[ebp]
	push	edi
; Line 2083
	mov	edi, DWORD PTR _a3$[ebp]
	mov	eax, ecx
$L86630:
; Line 2085
	mov	cl, BYTE PTR [edx]
	inc	edx
; Line 2086
	dec	edi
	mov	BYTE PTR _v6$[ebp], cl
; Line 2087
	test	cl, cl
	jns	SHORT $L86653
; Line 2088
	neg	BYTE PTR _v6$[ebp]
; Line 2089
	cmp	BYTE PTR _v6$[ebp], 65			; 00000041H
	jg	SHORT $L86638
; Line 2090
	sub	edi, DWORD PTR _v6$[ebp]
; Line 2091
	cmp	eax, DWORD PTR _gpBufEnd
	jae	SHORT $L86640
; Line 2092
	sub	esi, DWORD PTR _v6$[ebp]
$L86641:
; Line 2094
	mov	cl, BYTE PTR [edx]
	inc	edx
; Line 2096
	dec	DWORD PTR _v6$[ebp]
	mov	BYTE PTR [eax], cl
; Line 2097
	inc	eax
; Line 2098
	cmp	DWORD PTR _v6$[ebp], 0
	jne	SHORT $L86641
; Line 2099
	jmp	SHORT $LABEL_12$86644
$L86640:
; Line 2101
	add	edx, DWORD PTR _v6$[ebp]
$L86653:
; Line 2123
	cmp	DWORD PTR _v6$[ebp], esi
	jg	SHORT $L86656
; Line 2124
	mov	ecx, DWORD PTR _v6$[ebp]
; Line 2125
	add	eax, ecx
; Line 2126
	and	DWORD PTR _v6$[ebp], 0
; Line 2127
	jmp	SHORT $L86657
$L86638:
; Line 2103
	add	BYTE PTR _v6$[ebp], 191			; 000000bfH
; Line 2105
	mov	cl, BYTE PTR [edx]
	dec	edi
	inc	edx
; Line 2106
	cmp	eax, DWORD PTR _gpBufEnd
	jae	SHORT $L86653
; Line 2107
	sub	esi, DWORD PTR _v6$[ebp]
$L86649:
; Line 2110
	dec	DWORD PTR _v6$[ebp]
	mov	BYTE PTR [eax], cl
; Line 2111
	inc	eax
; Line 2112
	cmp	DWORD PTR _v6$[ebp], 0
	jne	SHORT $L86649
$LABEL_12$86644:
; Line 2114
	test	esi, esi
	jne	SHORT $L86631
; Line 2115
	mov	esi, DWORD PTR _frame_width$[ebp]
; Line 2116
	mov	ecx, -768				; fffffd00H
	sub	ecx, esi
	add	eax, ecx
; Line 2118
	jmp	SHORT $L86631
$L86656:
; Line 2129
	add	eax, esi
; Line 2130
	sub	DWORD PTR _v6$[ebp], esi
	mov	ecx, esi
$L86657:
; Line 2132
	sub	esi, ecx
; Line 2133
	jne	SHORT $L86654
; Line 2134
	mov	esi, DWORD PTR _frame_width$[ebp]
; Line 2135
	mov	ecx, -768				; fffffd00H
	sub	ecx, esi
	add	eax, ecx
$L86654:
; Line 2137
	cmp	DWORD PTR _v6$[ebp], 0
	jne	SHORT $L86653
$L86631:
; Line 2138
	test	edi, edi
	jne	$L86630
	pop	edi
	pop	esi
; Line 2139
	leave
	ret	8
@Cl2DecDatFrm4@16 ENDP
_TEXT	ENDS
PUBLIC	@Cl2DecodeClrHL@32
PUBLIC	@Cl2DecDatClrHL@20
; Function compile flags: /Ogsy
;	COMDAT @Cl2DecodeClrHL@32
_TEXT	SEGMENT
_colour$ = -4
_screen_x$ = -8
_screen_y$ = 8
_pCelBuff$ = 12
_nCel$ = 16
_frame_width$ = 20
_a7$ = 24
_a8$ = 28
_v8$ = 12
@Cl2DecodeClrHL@32 PROC NEAR				; COMDAT
; _colour$ = ecx
; _screen_x$ = edx
; Line 2143
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2153
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _screen_x$[ebp], edx
	mov	DWORD PTR _colour$[ebp], ecx
	je	SHORT $L86688
; Line 2154
	mov	edi, DWORD PTR _pCelBuff$[ebp]
	test	edi, edi
	je	SHORT $L86688
; Line 2155
	mov	eax, DWORD PTR _nCel$[ebp]
	test	eax, eax
	jle	SHORT $L86688
; Line 2156
	mov	ebx, DWORD PTR [edi+eax*4]
; Line 2158
	mov	esi, DWORD PTR _a7$[ebp]
	mov	DWORD PTR _v8$[ebp], ebx
	lea	edx, DWORD PTR [ebx+edi]
	mov	ax, WORD PTR [edx+esi]
; Line 2159
	test	ax, ax
	movzx	ecx, ax
	je	SHORT $L86688
; Line 2160
	mov	eax, DWORD PTR _a8$[ebp]
	cmp	eax, 8
	je	SHORT $L86692
	mov	bx, WORD PTR [edx+eax]
	test	bx, bx
	movzx	eax, bx
	jne	SHORT $L86691
	mov	ebx, DWORD PTR _v8$[ebp]
$L86692:
; Line 2161
	mov	eax, DWORD PTR _nCel$[ebp]
	mov	eax, DWORD PTR [edi+eax*4+4]
	sub	eax, ebx
$L86691:
; Line 2168
	push	DWORD PTR _colour$[ebp]
	sub	eax, ecx
	shl	esi, 4
	push	DWORD PTR _frame_width$[ebp]
	add	edx, ecx
	mov	edi, 768				; 00000300H
	push	eax
	mov	eax, DWORD PTR _screen_y$[ebp]
	sub	eax, esi
	sub	DWORD PTR _gpBufEnd, edi
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	call	@Cl2DecDatClrHL@20
; Line 2169
	add	DWORD PTR _gpBufEnd, edi
$L86688:
	pop	edi
	pop	esi
	pop	ebx
; Line 2174
	leave
	ret	24					; 00000018H
@Cl2DecodeClrHL@32 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @Cl2DecDatClrHL@20
_TEXT	SEGMENT
_a3$ = 8
_frame_width$ = 12
_colour$ = 16
_v7$ = -4
_v8$ = -8
@Cl2DecDatClrHL@20 PROC NEAR				; COMDAT
; _dst_buf$ = ecx
; _frame_content$ = edx
; Line 2178
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2191
	and	DWORD PTR _v7$[ebp], 0
	push	ebx
; Line 2192
	mov	ebx, DWORD PTR _frame_width$[ebp]
	push	esi
	push	edi
; Line 2193
	mov	edi, DWORD PTR _a3$[ebp]
	mov	eax, ecx
	mov	cl, BYTE PTR _colour$[ebp]
	mov	esi, edx
	mov	DWORD PTR _v8$[ebp], ebx
	jmp	SHORT $L86715
$L87274:
	mov	ebx, DWORD PTR _v8$[ebp]
$L86715:
; Line 2196
	mov	dl, BYTE PTR [esi]
	inc	esi
; Line 2197
	dec	edi
	mov	BYTE PTR _v7$[ebp], dl
; Line 2198
	test	dl, dl
	jns	$L86739
; Line 2199
	neg	BYTE PTR _v7$[ebp]
; Line 2200
	cmp	BYTE PTR _v7$[ebp], 65			; 00000041H
	jg	SHORT $L86723
; Line 2201
	sub	edi, DWORD PTR _v7$[ebp]
; Line 2202
	cmp	eax, DWORD PTR _gpBufEnd
	jae	SHORT $L86725
; Line 2203
	sub	ebx, DWORD PTR _v7$[ebp]
	mov	DWORD PTR _v8$[ebp], ebx
$L86726:
; Line 2205
	mov	dl, BYTE PTR [esi]
	inc	esi
; Line 2206
	test	dl, dl
	je	SHORT $L86729
; Line 2207
	mov	BYTE PTR [eax-1], cl
; Line 2208
	mov	BYTE PTR [eax+1], cl
; Line 2209
	mov	BYTE PTR [eax-768], cl
; Line 2210
	mov	BYTE PTR [eax+768], cl
$L86729:
; Line 2212
	dec	DWORD PTR _v7$[ebp]
; Line 2213
	inc	eax
; Line 2214
	cmp	DWORD PTR _v7$[ebp], 0
	jne	SHORT $L86726
; Line 2215
	jmp	SHORT $LABEL_15$86730
$L86725:
; Line 2217
	add	esi, DWORD PTR _v7$[ebp]
; Line 2218
	jmp	SHORT $L86739
$L86723:
; Line 2219
	add	BYTE PTR _v7$[ebp], 191			; 000000bfH
; Line 2221
	mov	dl, BYTE PTR [esi]
	dec	edi
	inc	esi
; Line 2222
	test	dl, dl
	je	SHORT $L86739
	cmp	eax, DWORD PTR _gpBufEnd
	jae	SHORT $L86739
; Line 2224
	sub	ebx, DWORD PTR _v7$[ebp]
; Line 2225
	mov	edx, DWORD PTR _v7$[ebp]
	mov	BYTE PTR [eax-1], cl
	mov	DWORD PTR _v8$[ebp], ebx
	mov	BYTE PTR [edx+eax], cl
$L86735:
; Line 2229
	dec	DWORD PTR _v7$[ebp]
	mov	BYTE PTR [eax-768], cl
	mov	BYTE PTR [eax+768], cl
; Line 2230
	inc	eax
; Line 2231
	cmp	DWORD PTR _v7$[ebp], 0
	jne	SHORT $L86735
$LABEL_15$86730:
; Line 2233
	test	ebx, ebx
	jne	SHORT $L86716
; Line 2234
	mov	edx, DWORD PTR _frame_width$[ebp]
; Line 2235
	mov	ebx, -768				; fffffd00H
	sub	ebx, edx
	mov	DWORD PTR _v8$[ebp], edx
	add	eax, ebx
; Line 2237
	jmp	SHORT $L86716
$L87275:
	mov	ebx, DWORD PTR _v8$[ebp]
$L86739:
; Line 2242
	cmp	DWORD PTR _v7$[ebp], ebx
	jg	SHORT $L86742
; Line 2243
	mov	edx, DWORD PTR _v7$[ebp]
; Line 2244
	add	eax, edx
; Line 2245
	and	DWORD PTR _v7$[ebp], 0
; Line 2246
	jmp	SHORT $L86743
$L86742:
; Line 2248
	add	eax, DWORD PTR _v8$[ebp]
	mov	edx, ebx
; Line 2249
	mov	ebx, DWORD PTR _v8$[ebp]
	sub	DWORD PTR _v7$[ebp], ebx
$L86743:
; Line 2251
	sub	DWORD PTR _v8$[ebp], edx
; Line 2252
	jne	SHORT $L86740
; Line 2253
	mov	edx, DWORD PTR _frame_width$[ebp]
; Line 2254
	mov	ebx, -768				; fffffd00H
	sub	ebx, edx
	mov	DWORD PTR _v8$[ebp], edx
	add	eax, ebx
$L86740:
; Line 2256
	cmp	DWORD PTR _v7$[ebp], 0
	jne	SHORT $L87275
$L86716:
; Line 2258
	test	edi, edi
	jne	$L87274
	pop	edi
	pop	esi
	pop	ebx
; Line 2259
	leave
	ret	12					; 0000000cH
@Cl2DecDatClrHL@20 ENDP
_TEXT	ENDS
PUBLIC	@Cl2DecodeFrm5@32
PUBLIC	@Cl2DecDatLightTbl2@20
; Function compile flags: /Ogsy
;	COMDAT @Cl2DecodeFrm5@32
_TEXT	SEGMENT
_screen_x$ = -8
_screen_y$ = -4
_pCelBuff$ = 8
_nCel$ = 12
_frame_width$ = 16
_a6$ = 20
_a7$ = 24
_a8$ = 28
_v9$ = 8
_v15$ = 12
@Cl2DecodeFrm5@32 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 2263
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2275
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _screen_y$[ebp], edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	$L86779
; Line 2277
	mov	ebx, DWORD PTR _pCelBuff$[ebp]
	test	ebx, ebx
	je	$L86779
; Line 2278
	mov	eax, DWORD PTR _nCel$[ebp]
	test	eax, eax
	jle	$L86779
; Line 2279
	mov	edx, DWORD PTR [ebx+eax*4]
; Line 2282
	mov	esi, DWORD PTR _a6$[ebp]
	mov	DWORD PTR _v9$[ebp], edx
	lea	ecx, DWORD PTR [edx+ebx]
	mov	ax, WORD PTR [ecx+esi]
; Line 2283
	test	ax, ax
	movzx	edi, ax
	je	$L86779
; Line 2284
	mov	eax, DWORD PTR _a7$[ebp]
	cmp	eax, 8
	je	SHORT $L86783
	mov	dx, WORD PTR [ecx+eax]
	test	dx, dx
	movzx	eax, dx
	jne	SHORT $L86782
	mov	edx, DWORD PTR _v9$[ebp]
$L86783:
; Line 2285
	mov	eax, DWORD PTR _nCel$[ebp]
	mov	eax, DWORD PTR [ebx+eax*4+4]
	sub	eax, edx
$L86782:
; Line 2287
	sub	eax, edi
	lea	edx, DWORD PTR [edi+ecx]
	mov	edi, eax
; Line 2288
	xor	eax, eax
	cmp	DWORD PTR _light4flag, eax
	setne	al
	neg	eax
	mov	DWORD PTR _v15$[ebp], eax
; Line 2289
	and	WORD PTR _v15$[ebp], 62464		; 0000f400H
; Line 2291
	cmp	BYTE PTR _a8$[ebp], 2
	mov	eax, DWORD PTR _v15$[ebp]
	lea	ecx, DWORD PTR [eax+4096]
	jne	SHORT $L86788
; Line 2292
	add	ecx, 256				; 00000100H
$L86788:
; Line 2293
	cmp	BYTE PTR _a8$[ebp], 4
	jl	SHORT $L86789
; Line 2294
	movsx	eax, BYTE PTR _a8$[ebp]
	shl	eax, 8
	lea	ecx, DWORD PTR [ecx+eax-256]
$L86789:
; Line 2300
	mov	eax, DWORD PTR _pLightTbl
	add	eax, ecx
	push	eax
	mov	eax, DWORD PTR _screen_y$[ebp]
	push	DWORD PTR _frame_width$[ebp]
	shl	esi, 4
	sub	eax, esi
	push	edi
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	call	@Cl2DecDatLightTbl2@20
$L86779:
	pop	edi
	pop	esi
	pop	ebx
; Line 2305
	leave
	ret	24					; 00000018H
@Cl2DecodeFrm5@32 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @Cl2DecDatLightTbl2@20
_TEXT	SEGMENT
_a3$ = 8
_frame_width$ = 12
_a5$ = 16
_v8$ = -4
_v9$ = 12
_v10$ = 8
@Cl2DecDatLightTbl2@20 PROC NEAR			; COMDAT
; _dst_buf$ = ecx
; _a2$ = edx
; Line 2309
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2320
	mov	eax, DWORD PTR _frame_width$[ebp]
; Line 2323
	and	DWORD PTR _v9$[ebp], 0
	push	ebx
	push	esi
	mov	esi, edx
	mov	edx, DWORD PTR _a3$[ebp]
; Line 2324
	and	DWORD PTR _v10$[ebp], 0
	push	edi
	mov	edi, eax
	mov	DWORD PTR _sgnWidth, eax
$L86809:
; Line 2326
	mov	bl, BYTE PTR [esi]
	inc	esi
; Line 2327
	dec	edx
	mov	BYTE PTR _v9$[ebp], bl
; Line 2328
	test	bl, bl
	jns	$L86834
; Line 2329
	neg	BYTE PTR _v9$[ebp]
; Line 2330
	cmp	BYTE PTR _v9$[ebp], 65			; 00000041H
	jg	SHORT $L86817
; Line 2331
	sub	edx, DWORD PTR _v9$[ebp]
; Line 2332
	cmp	ecx, DWORD PTR _gpBufEnd
	jae	SHORT $L86819
; Line 2333
	sub	edi, DWORD PTR _v9$[ebp]
$L86820:
; Line 2335
	mov	al, BYTE PTR [esi]
; Line 2336
	mov	ebx, DWORD PTR _a5$[ebp]
	mov	BYTE PTR _v10$[ebp], al
	inc	esi
	mov	eax, DWORD PTR _v10$[ebp]
; Line 2337
	dec	DWORD PTR _v9$[ebp]
	mov	al, BYTE PTR [eax+ebx]
	mov	BYTE PTR [ecx], al
; Line 2338
	inc	ecx
; Line 2339
	cmp	DWORD PTR _v9$[ebp], 0
	jne	SHORT $L86820
; Line 2340
	jmp	SHORT $LABEL_12$86824
$L86819:
; Line 2342
	add	esi, DWORD PTR _v9$[ebp]
; Line 2343
	jmp	SHORT $L86834
$L86817:
; Line 2344
	add	BYTE PTR _v9$[ebp], 191			; 000000bfH
; Line 2347
	mov	ebx, DWORD PTR _a5$[ebp]
	dec	edx
	mov	DWORD PTR _v8$[ebp], edx
	mov	dl, BYTE PTR [esi]
	mov	BYTE PTR _v10$[ebp], dl
	inc	esi
	mov	edx, DWORD PTR _v10$[ebp]
; Line 2348
	cmp	ecx, DWORD PTR _gpBufEnd
	mov	dl, BYTE PTR [edx+ebx]
	jae	SHORT $L87289
; Line 2349
	sub	edi, DWORD PTR _v9$[ebp]
$L86830:
; Line 2352
	dec	DWORD PTR _v9$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 2353
	inc	ecx
; Line 2354
	cmp	DWORD PTR _v9$[ebp], 0
	jne	SHORT $L86830
	mov	edx, DWORD PTR _v8$[ebp]
$LABEL_12$86824:
; Line 2357
	mov	eax, DWORD PTR _sgnWidth
	test	edi, edi
	jne	SHORT $L86810
; Line 2358
	mov	ebx, -768				; fffffd00H
	mov	edi, eax
	sub	ebx, eax
	add	ecx, ebx
; Line 2360
	jmp	SHORT $L86810
$L87289:
	mov	edx, DWORD PTR _v8$[ebp]
$L86834:
; Line 2365
	cmp	DWORD PTR _v9$[ebp], edi
	jg	SHORT $L86837
; Line 2366
	mov	ebx, DWORD PTR _v9$[ebp]
; Line 2367
	add	ecx, ebx
; Line 2368
	and	DWORD PTR _v9$[ebp], 0
	mov	DWORD PTR _v10$[ebp], ebx
; Line 2369
	jmp	SHORT $L86838
$L86837:
; Line 2371
	add	ecx, edi
; Line 2372
	sub	DWORD PTR _v9$[ebp], edi
	mov	DWORD PTR _v10$[ebp], edi
$L86838:
; Line 2374
	sub	edi, DWORD PTR _v10$[ebp]
; Line 2375
	jne	SHORT $L86835
; Line 2377
	mov	ebx, -768				; fffffd00H
	mov	edi, eax
	sub	ebx, eax
	add	ecx, ebx
$L86835:
; Line 2379
	cmp	DWORD PTR _v9$[ebp], 0
	jne	SHORT $L86834
$L86810:
; Line 2380
	test	edx, edx
	jne	$L86809
	pop	edi
	pop	esi
	pop	ebx
; Line 2381
	leave
	ret	12					; 0000000cH
@Cl2DecDatLightTbl2@20 ENDP
_TEXT	ENDS
PUBLIC	@Cl2DecodeFrm6@28
; Function compile flags: /Ogsy
;	COMDAT @Cl2DecodeFrm6@28
_TEXT	SEGMENT
_screen_x$ = -8
_pCelBuff$ = 8
_nCel$ = 12
_frame_width$ = 16
_a6$ = 20
_a7$ = 24
_v9$ = -4
@Cl2DecodeFrm6@28 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 2386
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2399
	cmp	DWORD PTR _gpBuffer, 0
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	DWORD PTR _screen_x$[ebp], ecx
	je	$L86882
; Line 2401
	mov	eax, DWORD PTR _pCelBuff$[ebp]
	test	eax, eax
	je	$L86882
; Line 2402
	mov	ecx, DWORD PTR _nCel$[ebp]
	test	ecx, ecx
	jle	SHORT $L86882
; Line 2403
	mov	esi, DWORD PTR [eax+ecx*4]
; Line 2406
	mov	ecx, DWORD PTR _a6$[ebp]
	mov	DWORD PTR _v9$[ebp], esi
	add	esi, eax
	mov	bx, WORD PTR [esi+ecx]
; Line 2407
	test	bx, bx
	movzx	edx, bx
	je	SHORT $L86882
; Line 2408
	mov	ebx, DWORD PTR _a7$[ebp]
	cmp	ebx, 8
	je	SHORT $L86876
	mov	bx, WORD PTR [esi+ebx]
	test	bx, bx
	movzx	eax, bx
	jne	SHORT $L86875
	mov	eax, DWORD PTR _pCelBuff$[ebp]
$L86876:
; Line 2409
	mov	ebx, DWORD PTR _nCel$[ebp]
	mov	eax, DWORD PTR [eax+ebx*4+4]
	sub	eax, DWORD PTR _v9$[ebp]
$L86875:
; Line 2412
	shl	ecx, 4
	sub	edi, ecx
	sub	eax, edx
	add	edx, esi
; Line 2413
	mov	esi, DWORD PTR _light_table_index
	mov	ecx, DWORD PTR _screen_y_times_768[edi*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _screen_x$[ebp]
	test	esi, esi
	je	SHORT $L86881
; Line 2414
	shl	esi, 8
	add	esi, DWORD PTR _pLightTbl
	push	esi
	push	DWORD PTR _frame_width$[ebp]
	push	eax
	call	@Cl2DecDatLightTbl2@20
; Line 2415
	jmp	SHORT $L86882
$L86881:
; Line 2416
	push	DWORD PTR _frame_width$[ebp]
	push	eax
	call	@Cl2DecDatFrm4@16
$L86882:
	pop	edi
	pop	esi
	pop	ebx
; Line 2421
	leave
	ret	20					; 00000014H
@Cl2DecodeFrm6@28 ENDP
_TEXT	ENDS
PUBLIC	@PlayInGameMovie@4
EXTRN	_drawpanflag:DWORD
EXTRN	@PaletteFadeIn@4:NEAR
EXTRN	@PaletteFadeOut@4:NEAR
EXTRN	@play_movie@8:NEAR
EXTRN	_ClearScreenBuffer:NEAR
EXTRN	@scrollrt_draw_game_screen@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @PlayInGameMovie@4
_TEXT	SEGMENT
@PlayInGameMovie@4 PROC NEAR				; COMDAT
; _pszMovie$ = ecx
; Line 2425
	push	esi
; Line 2426
	push	8
	mov	esi, ecx
	pop	ecx
	call	@PaletteFadeOut@4
; Line 2427
	xor	edx, edx
	mov	ecx, esi
	call	@play_movie@8
; Line 2428
	call	_ClearScreenBuffer
; Line 2430
	xor	ecx, ecx
	mov	esi, 255				; 000000ffH
	inc	ecx
	mov	DWORD PTR _drawpanflag, esi
	call	@scrollrt_draw_game_screen@4
; Line 2431
	push	8
	pop	ecx
	call	@PaletteFadeIn@4
; Line 2432
	mov	DWORD PTR _drawpanflag, esi
	pop	esi
; Line 2433
	ret	0
@PlayInGameMovie@4 ENDP
_TEXT	ENDS
END
