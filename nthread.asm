; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/nthread.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_06LJE@?$CFs?3?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@OLPF@SNetSendTurn?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FDPM@SNetGetTurnsInTransit?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MMFN@SNetReceiveTurns?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@DCNM@SNetGetProviderCaps?3?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FJCB@nthread2?3?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@GLDA@nthread3?3?6?$CI?$CFs?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _nthread_c_init
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nthread_init_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nthread_cleanup_mutex_atexit
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nthread_cleanup_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @nthread_terminate_game@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @nthread_send_and_recv_turn@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @nthread_recv_turns@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nthread_set_turn_upper_bit
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @nthread_start@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nthread_handler@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nthread_cleanup
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @nthread_ignore_mutex@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @nthread_has_500ms_passed@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_nthread_c_init_funcs
_DATA	SEGMENT
COMM	_byte_679704:BYTE
COMM	_gdwMsgLenTbl:DWORD:04H
COMM	_gdwDeltaBytesSec:DWORD
COMM	_nthread_should_run:BYTE
COMM	_gdwTurnsInTransit:DWORD
COMM	_glpMsgTbl:DWORD:04H
COMM	_glpNThreadId:DWORD
COMM	_turn_upper_bit:DWORD
COMM	_byte_679758:BYTE
COMM	_gdwLargestMsgSize:DWORD
COMM	_gdwNormalMsgSize:DWORD
COMM	_last_tick:DWORD
COMM	_sgbSyncCountdown:BYTE
COMM	_sgbPacketCountdown:BYTE
COMM	_sgbThreadIsRunning:BYTE
_sghThread DD	0ffffffffH
_DATA	ENDS
CRT$XCU	SEGMENT
_nthread_c_init_funcs DD FLAT:_nthread_c_init
CRT$XCU	ENDS
PUBLIC	_nthread_init_mutex
PUBLIC	_nthread_cleanup_mutex_atexit
; Function compile flags: /Ogsy
;	COMDAT _nthread_c_init
_TEXT	SEGMENT
_nthread_c_init PROC NEAR				; COMDAT
; File Source/nthread.cpp
; Line 31
	call	_nthread_init_mutex
; Line 32
	jmp	_nthread_cleanup_mutex_atexit
_nthread_c_init ENDP
_TEXT	ENDS
EXTRN	__imp__InitializeCriticalSection@4:NEAR
_BSS	SEGMENT
_sgMemCrit DB	018H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT _nthread_init_mutex
_TEXT	SEGMENT
_nthread_init_mutex PROC NEAR				; COMDAT
; Line 40
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__InitializeCriticalSection@4
; Line 41
	ret	0
_nthread_init_mutex ENDP
_TEXT	ENDS
PUBLIC	_nthread_cleanup_mutex
EXTRN	_atexit:NEAR
; Function compile flags: /Ogsy
;	COMDAT _nthread_cleanup_mutex_atexit
_TEXT	SEGMENT
_nthread_cleanup_mutex_atexit PROC NEAR			; COMDAT
; Line 45
	push	OFFSET FLAT:_nthread_cleanup_mutex
	call	_atexit
	pop	ecx
; Line 46
	ret	0
_nthread_cleanup_mutex_atexit ENDP
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _nthread_cleanup_mutex
_TEXT	SEGMENT
_nthread_cleanup_mutex PROC NEAR			; COMDAT
; Line 50
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__DeleteCriticalSection@4
; Line 51
	ret	0
_nthread_cleanup_mutex ENDP
_TEXT	ENDS
PUBLIC	@nthread_terminate_game@4
PUBLIC	??_C@_06LJE@?$CFs?3?6?$CFs?$AA@			; `string'
EXTRN	_SErrGetLastError@0:NEAR
EXTRN	_gbGameDestroyed:BYTE
EXTRN	_TraceLastError:NEAR
EXTRN	_TermMsg:NEAR
;	COMDAT ??_C@_06LJE@?$CFs?3?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_06LJE@?$CFs?3?6?$CFs?$AA@ DB '%s:', 0aH, '%s', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @nthread_terminate_game@4
_TEXT	SEGMENT
@nthread_terminate_game@4 PROC NEAR			; COMDAT
; _pszFcn$ = ecx
; Line 54
	push	esi
	mov	esi, ecx
; Line 57
	call	_SErrGetLastError@0
; Line 58
	cmp	eax, -2062548886			; 8510006aH
	je	SHORT $L85003
; Line 59
	cmp	eax, -2062548887			; 85100069H
	je	SHORT $L85002
	cmp	eax, -2062548880			; 85100070H
	je	SHORT $L85002
; Line 62
	call	_TraceLastError
	push	eax
	push	esi
	push	OFFSET FLAT:??_C@_06LJE@?$CFs?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	add	esp, 12					; 0000000cH
	pop	esi
; Line 65
	ret	0
$L85002:
; Line 60
	mov	BYTE PTR _gbGameDestroyed, 1
$L85003:
	pop	esi
; Line 65
	ret	0
@nthread_terminate_game@4 ENDP
_TEXT	ENDS
PUBLIC	@nthread_send_and_recv_turn@8
PUBLIC	??_C@_0N@OLPF@SNetSendTurn?$AA@			; `string'
PUBLIC	??_C@_0BG@FDPM@SNetGetTurnsInTransit?$AA@	; `string'
EXTRN	_SNetGetTurnsInTransit@4:NEAR
EXTRN	_SNetSendTurn@8:NEAR
;	COMDAT ??_C@_0N@OLPF@SNetSendTurn?$AA@
_DATA	SEGMENT
??_C@_0N@OLPF@SNetSendTurn?$AA@ DB 'SNetSendTurn', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FDPM@SNetGetTurnsInTransit?$AA@
_DATA	SEGMENT
??_C@_0BG@FDPM@SNetGetTurnsInTransit?$AA@ DB 'SNetGetTurnsInTransit', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @nthread_send_and_recv_turn@8
_TEXT	SEGMENT
_turn$ = -8
_curTurnsInTransit$ = -4
@nthread_send_and_recv_turn@8 PROC NEAR			; COMDAT
; _cur_turn$ = ecx
; _turn_delta$ = edx
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 77
	lea	eax, DWORD PTR _curTurnsInTransit$[ebp]
	push	edi
	push	eax
	mov	ebx, edx
	mov	edi, ecx
	call	_SNetGetTurnsInTransit@4
	test	eax, eax
	je	SHORT $L85015
; Line 78
	mov	eax, DWORD PTR _curTurnsInTransit$[ebp]
	cmp	eax, DWORD PTR _gdwTurnsInTransit
; Line 79
	jae	SHORT $L85167
	mov	esi, 2147483647				; 7fffffffH
$L85019:
; Line 83
	mov	eax, edi
	inc	DWORD PTR _curTurnsInTransit$[ebp]
	and	eax, esi
; Line 87
	push	4
	or	eax, DWORD PTR _turn_upper_bit
	and	DWORD PTR _turn_upper_bit, 0
	mov	DWORD PTR _turn$[ebp], eax
	lea	eax, DWORD PTR _turn$[ebp]
	push	eax
	call	_SNetSendTurn@8
	test	eax, eax
	je	SHORT $L85020
; Line 90
	add	edi, ebx
; Line 91
	cmp	edi, esi
	jb	SHORT $L85023
; Line 92
	movzx	edi, di
$L85023:
; Line 93
	mov	eax, DWORD PTR _curTurnsInTransit$[ebp]
	cmp	eax, DWORD PTR _gdwTurnsInTransit
	jb	SHORT $L85019
$L85167:
; Line 94
	mov	eax, edi
	jmp	SHORT $L85009
$L85020:
; Line 96
	mov	ecx, OFFSET FLAT:??_C@_0N@OLPF@SNetSendTurn?$AA@ ; `string'
; Line 97
	jmp	SHORT $L85028
$L85015:
; Line 98
	mov	ecx, OFFSET FLAT:??_C@_0BG@FDPM@SNetGetTurnsInTransit?$AA@ ; `string'
$L85028:
; Line 100
	call	@nthread_terminate_game@4
; Line 101
	xor	eax, eax
$L85009:
	pop	edi
	pop	esi
	pop	ebx
; Line 102
	leave
	ret	0
@nthread_send_and_recv_turn@8 ENDP
_TEXT	ENDS
PUBLIC	@nthread_recv_turns@4
PUBLIC	??_C@_0BB@MMFN@SNetReceiveTurns?$AA@		; `string'
EXTRN	_SNetReceiveTurns@20:NEAR
EXTRN	_player_state:BYTE
EXTRN	_multi_msg_countdown:NEAR
EXTRN	__imp__GetTickCount@0:NEAR
;	COMDAT ??_C@_0BB@MMFN@SNetReceiveTurns?$AA@
_DATA	SEGMENT
??_C@_0BB@MMFN@SNetReceiveTurns?$AA@ DB 'SNetReceiveTurns', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @nthread_recv_turns@4
_TEXT	SEGMENT
@nthread_recv_turns@4 PROC NEAR				; COMDAT
; _pfSendAsync$ = ecx
; Line 107
	push	esi
	mov	esi, ecx
; Line 110
	and	DWORD PTR [esi], 0
; Line 111
	dec	BYTE PTR _sgbPacketCountdown
; Line 113
	jne	SHORT $L85172
; Line 115
	mov	al, BYTE PTR _sgbSyncCountdown
	dec	BYTE PTR _sgbSyncCountdown
	cmp	al, 1
	jne	SHORT $L85170
	jmp	SHORT $L85171
$L85170:
	xor	al, al
$L85171:
; Line 116
	mov	cl, BYTE PTR _byte_679704
; Line 117
	test	al, al
	mov	BYTE PTR _sgbPacketCountdown, cl
	je	SHORT $LABEL_11$85036
; Line 119
	push	OFFSET FLAT:_player_state
	push	OFFSET FLAT:_gdwMsgLenTbl
	push	OFFSET FLAT:_glpMsgTbl
	push	4
	push	0
	call	_SNetReceiveTurns@20
	test	eax, eax
	je	SHORT $L85040
; Line 120
	cmp	BYTE PTR _byte_679758, 0
	jne	SHORT $L85041
; Line 121
	mov	BYTE PTR _byte_679758, 1
; Line 122
	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR _last_tick, eax
$L85041:
; Line 124
	mov	BYTE PTR _sgbSyncCountdown, 4
; Line 125
	call	_multi_msg_countdown
$LABEL_11$85036:
; Line 127
	mov	DWORD PTR [esi], 1
$L85172:
; Line 128
	add	DWORD PTR _last_tick, 50		; 00000032H
; Line 129
	xor	eax, eax
	inc	eax
	pop	esi
; Line 137
	ret	0
$L85040:
; Line 131
	call	_SErrGetLastError@0
	cmp	eax, -2062548885			; 8510006bH
	je	SHORT $L85042
; Line 132
	mov	ecx, OFFSET FLAT:??_C@_0BB@MMFN@SNetReceiveTurns?$AA@ ; `string'
	call	@nthread_terminate_game@4
$L85042:
; Line 133
	and	BYTE PTR _byte_679758, 0
; Line 134
	mov	BYTE PTR _sgbSyncCountdown, 1
; Line 135
	mov	BYTE PTR _sgbPacketCountdown, 1
; Line 136
	xor	eax, eax
	pop	esi
; Line 137
	ret	0
@nthread_recv_turns@4 ENDP
_TEXT	ENDS
PUBLIC	_nthread_set_turn_upper_bit
; Function compile flags: /Ogsy
;	COMDAT _nthread_set_turn_upper_bit
_TEXT	SEGMENT
_nthread_set_turn_upper_bit PROC NEAR			; COMDAT
; Line 146
	mov	DWORD PTR _turn_upper_bit, -2147483648	; 80000000H
; Line 147
	ret	0
_nthread_set_turn_upper_bit ENDP
_TEXT	ENDS
PUBLIC	@nthread_start@4
PUBLIC	_nthread_handler@4
PUBLIC	??_C@_0BI@DCNM@SNetGetProviderCaps?3?6?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0N@FJCB@nthread2?3?6?$CFs?$AA@		; `string'
EXTRN	__imp__SetThreadPriority@8:NEAR
EXTRN	__imp__EnterCriticalSection@4:NEAR
EXTRN	_SNetGetProviderCaps@4:NEAR
EXTRN	_gbMaxPlayers:BYTE
EXTRN	__beginthreadex:NEAR
;	COMDAT ??_C@_0BI@DCNM@SNetGetProviderCaps?3?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BI@DCNM@SNetGetProviderCaps?3?6?$CFs?$AA@ DB 'SNetGetProviderCaps:'
	DB	0aH, '%s', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@FJCB@nthread2?3?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_0N@FJCB@nthread2?3?6?$CFs?$AA@ DB 'nthread2:', 0aH, '%s', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @nthread_start@4
_TEXT	SEGMENT
_caps$ = -36
@nthread_start@4 PROC NEAR				; COMDAT
; _set_turn_upper_bit$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	mov	esi, ecx
; Line 158
	call	DWORD PTR __imp__GetTickCount@0
; Line 162
	xor	ebx, ebx
	mov	DWORD PTR _last_tick, eax
	cmp	esi, ebx
	mov	BYTE PTR _sgbPacketCountdown, 1
	mov	BYTE PTR _sgbSyncCountdown, 1
	mov	BYTE PTR _byte_679758, 1
	je	SHORT $L85053
; Line 163
	call	_nthread_set_turn_upper_bit
; Line 164
	jmp	SHORT $L85054
$L85053:
; Line 165
	mov	DWORD PTR _turn_upper_bit, ebx
$L85054:
; Line 167
	lea	eax, DWORD PTR _caps$[ebp]
	mov	DWORD PTR _caps$[ebp], 36		; 00000024H
	push	eax
	call	_SNetGetProviderCaps@4
	test	eax, eax
	jne	SHORT $L85055
; Line 168
	call	_TraceLastError
; Line 169
	push	eax
	push	OFFSET FLAT:??_C@_0BI@DCNM@SNetGetProviderCaps?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85055:
; Line 171
	mov	eax, DWORD PTR _caps$[ebp+32]
; Line 172
	cmp	eax, ebx
	mov	DWORD PTR _gdwTurnsInTransit, eax
	jne	SHORT $L85057
; Line 173
	mov	DWORD PTR _gdwTurnsInTransit, 1
$L85057:
; Line 174
	cmp	DWORD PTR _caps$[ebp+28], 20		; 00000014H
	ja	SHORT $L85058
	cmp	DWORD PTR _caps$[ebp+28], ebx
	je	SHORT $L85058
; Line 175
	push	20					; 00000014H
	xor	edx, edx
	pop	eax
	div	DWORD PTR _caps$[ebp+28]
	mov	BYTE PTR _byte_679704, al
; Line 176
	jmp	SHORT $L85059
$L85058:
; Line 177
	mov	BYTE PTR _byte_679704, 1
$L85059:
; Line 178
	mov	eax, 512				; 00000200H
; Line 179
	cmp	DWORD PTR _caps$[ebp+8], eax
	mov	esi, eax
	jae	SHORT $L85060
; Line 180
	mov	esi, DWORD PTR _caps$[ebp+8]
$L85060:
; Line 181
	mov	eax, DWORD PTR _caps$[ebp+20]
; Line 183
	push	4
	shr	eax, 2
	mov	DWORD PTR _gdwDeltaBytesSec, eax
	pop	eax
	cmp	DWORD PTR _caps$[ebp+16], eax
	mov	DWORD PTR _gdwLargestMsgSize, esi
	jbe	SHORT $L85062
; Line 184
	mov	DWORD PTR _caps$[ebp+16], eax
$L85062:
; Line 185
	movzx	eax, BYTE PTR _byte_679704
	imul	eax, DWORD PTR _caps$[ebp+20]
	push	20					; 00000014H
	xor	edx, edx
	pop	ecx
	div	ecx
	xor	edx, edx
; Line 187
	add	ecx, 108				; 0000006cH
	lea	eax, DWORD PTR [eax+eax*2]
	shr	eax, 2
	div	DWORD PTR _caps$[ebp+16]
	cmp	eax, ecx
	mov	DWORD PTR _gdwNormalMsgSize, eax
	jae	SHORT $L85065
$L85066:
; Line 189
	shl	BYTE PTR _byte_679704, 1
; Line 190
	add	eax, eax
; Line 191
	cmp	eax, ecx
	jb	SHORT $L85066
; Line 192
	mov	DWORD PTR _gdwNormalMsgSize, eax
$L85065:
; Line 194
	cmp	eax, esi
	jbe	SHORT $L85069
; Line 195
	mov	DWORD PTR _gdwNormalMsgSize, esi
$L85069:
; Line 196
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L85071
; Line 198
	push	OFFSET FLAT:_sgMemCrit
	mov	BYTE PTR _sgbThreadIsRunning, bl
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 199
	mov	BYTE PTR _nthread_should_run, 1
; Line 200
	push	OFFSET FLAT:_glpNThreadId
	push	ebx
	push	ebx
	push	OFFSET FLAT:_nthread_handler@4
	push	ebx
	push	ebx
	call	__beginthreadex
	add	esp, 24					; 00000018H
; Line 201
	cmp	eax, -1
	mov	DWORD PTR _sghThread, eax
	jne	SHORT $L85076
; Line 202
	call	_TraceLastError
; Line 203
	push	eax
	push	OFFSET FLAT:??_C@_0N@FJCB@nthread2?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85076:
; Line 205
	push	2
	push	DWORD PTR _sghThread
	call	DWORD PTR __imp__SetThreadPriority@8
$L85071:
	pop	esi
	pop	ebx
; Line 207
	leave
	ret	0
@nthread_start@4 ENDP
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:NEAR
EXTRN	__imp__Sleep@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _nthread_handler@4
_TEXT	SEGMENT
_received$ = -4
_nthread_handler@4 PROC NEAR				; COMDAT
; Line 223
	push	ecx
; Line 227
	cmp	BYTE PTR _nthread_should_run, 0
	push	ebx
	push	esi
	push	edi
	je	SHORT $L85083
	mov	ebx, DWORD PTR __imp__LeaveCriticalSection@4
	mov	edi, OFFSET FLAT:_sgMemCrit
$L85085:
; Line 229
	push	edi
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 230
	cmp	BYTE PTR _nthread_should_run, 0
	je	SHORT $L85086
; Line 232
	xor	edx, edx
	xor	ecx, ecx
	call	@nthread_send_and_recv_turn@8
; Line 233
	lea	ecx, DWORD PTR _received$[esp+16]
	call	@nthread_recv_turns@4
	test	eax, eax
	je	SHORT $L85088
; Line 234
	call	DWORD PTR __imp__GetTickCount@0
	mov	esi, DWORD PTR _last_tick
	sub	esi, eax
; Line 235
	jmp	SHORT $L85089
$L85088:
; Line 236
	push	50					; 00000032H
	pop	esi
$L85089:
; Line 237
	push	edi
	call	ebx
; Line 238
	test	esi, esi
	jle	SHORT $L85090
; Line 239
	push	esi
	call	DWORD PTR __imp__Sleep@4
$L85090:
; Line 240
	cmp	BYTE PTR _nthread_should_run, 0
; Line 228
	jne	SHORT $L85085
; Line 241
	jmp	SHORT $L85083
$L85086:
; Line 243
	push	edi
	call	ebx
$L85083:
	pop	edi
	pop	esi
; Line 245
	xor	eax, eax
	pop	ebx
; Line 246
	pop	ecx
	ret	4
_nthread_handler@4 ENDP
_TEXT	ENDS
PUBLIC	_nthread_cleanup
PUBLIC	??_C@_0P@GLDA@nthread3?3?6?$CI?$CFs?$CJ?$AA@	; `string'
EXTRN	__imp__GetCurrentThreadId@0:NEAR
EXTRN	__imp__WaitForSingleObject@8:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
;	COMDAT ??_C@_0P@GLDA@nthread3?3?6?$CI?$CFs?$CJ?$AA@
_DATA	SEGMENT
??_C@_0P@GLDA@nthread3?3?6?$CI?$CFs?$CJ?$AA@ DB 'nthread3:', 0aH, '(%s)', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _nthread_cleanup
_TEXT	SEGMENT
_nthread_cleanup PROC NEAR				; COMDAT
; Line 251
	push	ebx
; Line 252
	xor	ebx, ebx
; Line 256
	cmp	DWORD PTR _sghThread, -1
	mov	BYTE PTR _nthread_should_run, bl
	mov	DWORD PTR _gdwTurnsInTransit, ebx
	mov	DWORD PTR _gdwNormalMsgSize, ebx
	mov	DWORD PTR _gdwLargestMsgSize, ebx
	je	SHORT $L85094
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	DWORD PTR _glpNThreadId, eax
	je	SHORT $L85094
; Line 257
	cmp	BYTE PTR _sgbThreadIsRunning, bl
	jne	SHORT $L85095
; Line 258
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__LeaveCriticalSection@4
$L85095:
; Line 259
	push	-1
	push	DWORD PTR _sghThread
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	eax, -1
	jne	SHORT $L85096
; Line 260
	call	_TraceLastError
	push	eax
	push	OFFSET FLAT:??_C@_0P@GLDA@nthread3?3?6?$CI?$CFs?$CJ?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85096:
; Line 262
	push	DWORD PTR _sghThread
	call	DWORD PTR __imp__CloseHandle@4
; Line 263
	or	DWORD PTR _sghThread, -1
$L85094:
	pop	ebx
; Line 265
	ret	0
_nthread_cleanup ENDP
_TEXT	ENDS
PUBLIC	@nthread_ignore_mutex@4
; Function compile flags: /Ogsy
;	COMDAT @nthread_ignore_mutex@4
_TEXT	SEGMENT
@nthread_ignore_mutex@4 PROC NEAR			; COMDAT
; _bStart$ = ecx
; Line 274
	cmp	DWORD PTR _sghThread, -1
	push	ebx
	mov	ebx, ecx
	je	SHORT $L85103
; Line 275
	test	ebx, ebx
; Line 276
	push	OFFSET FLAT:_sgMemCrit
	je	SHORT $L85104
	call	DWORD PTR __imp__LeaveCriticalSection@4
; Line 277
	jmp	SHORT $L85105
$L85104:
; Line 278
	call	DWORD PTR __imp__EnterCriticalSection@4
$L85105:
; Line 279
	mov	BYTE PTR _sgbThreadIsRunning, bl
$L85103:
	pop	ebx
; Line 281
	ret	0
@nthread_ignore_mutex@4 ENDP
_TEXT	ENDS
PUBLIC	@nthread_has_500ms_passed@4
; Function compile flags: /Ogsy
;	COMDAT @nthread_has_500ms_passed@4
_TEXT	SEGMENT
@nthread_has_500ms_passed@4 PROC NEAR			; COMDAT
; _unused$ = ecx
; Line 289
	call	DWORD PTR __imp__GetTickCount@0
; Line 290
	mov	ecx, eax
	sub	ecx, DWORD PTR _last_tick
; Line 291
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85111
	cmp	ecx, 500				; 000001f4H
	jle	SHORT $L85111
; Line 292
	mov	DWORD PTR _last_tick, eax
; Line 293
	xor	ecx, ecx
$L85111:
; Line 295
	xor	eax, eax
	test	ecx, ecx
	setge	al
; Line 296
	ret	0
@nthread_has_500ms_passed@4 ENDP
_TEXT	ENDS
END
