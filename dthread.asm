; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/dthread.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0N@KJOM@dthread?31?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@ONKA@dthread2?3?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CNHP@dthread4?3?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@CJBJ@dthread3?3?6?$CI?$CFs?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _dthread_c_init
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dthread_init_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dthread_cleanup_mutex_atexit
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dthread_cleanup_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @dthread_remove_player@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @dthread_send_delta@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dthread_start
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dthread_handler@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dthread_cleanup
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_dthread_c_init_funcs
_DATA	SEGMENT
COMM	_glpDThreadId:DWORD
COMM	_dthread_running:BYTE
COMM	_sgpInfoHead:DWORD
COMM	_sghWorkToDoEvent:DWORD
_sghThread DD	0ffffffffH
_DATA	ENDS
CRT$XCU	SEGMENT
_dthread_c_init_funcs DD FLAT:_dthread_c_init
CRT$XCU	ENDS
PUBLIC	_dthread_init_mutex
PUBLIC	_dthread_cleanup_mutex_atexit
; Function compile flags: /Ogsy
;	COMDAT _dthread_c_init
_TEXT	SEGMENT
_dthread_c_init PROC NEAR				; COMDAT
; File Source/dthread.cpp
; Line 20
	call	_dthread_init_mutex
; Line 21
	jmp	_dthread_cleanup_mutex_atexit
_dthread_c_init ENDP
_TEXT	ENDS
EXTRN	__imp__InitializeCriticalSection@4:NEAR
_BSS	SEGMENT
_sgMemCrit DB	018H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT _dthread_init_mutex
_TEXT	SEGMENT
_dthread_init_mutex PROC NEAR				; COMDAT
; Line 29
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__InitializeCriticalSection@4
; Line 30
	ret	0
_dthread_init_mutex ENDP
_TEXT	ENDS
PUBLIC	_dthread_cleanup_mutex
EXTRN	_atexit:NEAR
; Function compile flags: /Ogsy
;	COMDAT _dthread_cleanup_mutex_atexit
_TEXT	SEGMENT
_dthread_cleanup_mutex_atexit PROC NEAR			; COMDAT
; Line 34
	push	OFFSET FLAT:_dthread_cleanup_mutex
	call	_atexit
	pop	ecx
; Line 35
	ret	0
_dthread_cleanup_mutex_atexit ENDP
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _dthread_cleanup_mutex
_TEXT	SEGMENT
_dthread_cleanup_mutex PROC NEAR			; COMDAT
; Line 39
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__DeleteCriticalSection@4
; Line 40
	ret	0
_dthread_cleanup_mutex ENDP
_TEXT	ENDS
PUBLIC	@dthread_remove_player@4
EXTRN	__imp__EnterCriticalSection@4:NEAR
EXTRN	__imp__LeaveCriticalSection@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @dthread_remove_player@4
_TEXT	SEGMENT
@dthread_remove_player@4 PROC NEAR			; COMDAT
; _pnum$ = ecx
; Line 43
	push	esi
; Line 46
	mov	esi, OFFSET FLAT:_sgMemCrit
	push	edi
	push	esi
	mov	edi, ecx
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 47
	mov	eax, DWORD PTR _sgpInfoHead
	jmp	SHORT $L85112
$L84998:
; Line 48
	cmp	DWORD PTR [eax+4], edi
	jne	SHORT $L84999
; Line 49
	mov	DWORD PTR [eax+4], 4
$L84999:
; Line 47
	mov	eax, DWORD PTR [eax]
$L85112:
	test	eax, eax
	jne	SHORT $L84998
; Line 51
	push	esi
	call	DWORD PTR __imp__LeaveCriticalSection@4
	pop	edi
	pop	esi
; Line 52
	ret	0
@dthread_remove_player@4 ENDP
_TEXT	ENDS
PUBLIC	@dthread_send_delta@16
EXTRN	__imp__SetEvent@4:NEAR
EXTRN	_gbMaxPlayers:BYTE
EXTRN	@DiabloAllocPtr@4:NEAR
EXTRN	_memcpy:NEAR
; Function compile flags: /Ogsy
;	COMDAT @dthread_send_delta@16
_TEXT	SEGMENT
_pnum$ = -4
_pbSrc$ = 8
_dwLen$ = 12
@dthread_send_delta@16 PROC NEAR			; COMDAT
; _pnum$ = ecx
; _cmd$ = dl
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 59
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	ebx
	mov	bl, dl
	mov	DWORD PTR _pnum$[ebp], ecx
	je	SHORT $L85010
	push	esi
	push	edi
; Line 63
	mov	edi, DWORD PTR _dwLen$[ebp]
	lea	ecx, DWORD PTR [edi+20]
	call	@DiabloAllocPtr@4
	mov	esi, eax
; Line 65
	mov	eax, DWORD PTR _pnum$[ebp]
; Line 68
	push	edi
	push	DWORD PTR _pbSrc$[ebp]
	and	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], eax
	lea	eax, DWORD PTR [esi+16]
	push	eax
	mov	BYTE PTR [esi+8], bl
	mov	DWORD PTR [esi+12], edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 69
	mov	edi, OFFSET FLAT:_sgMemCrit
	push	edi
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 71
	mov	eax, DWORD PTR _sgpInfoHead
	mov	ecx, OFFSET FLAT:_sgpInfoHead
	jmp	SHORT $L85118
$L85019:
; Line 72
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx]
$L85118:
; Line 71
	test	eax, eax
	jne	SHORT $L85019
; Line 74
	mov	DWORD PTR [ecx], esi
; Line 76
	push	DWORD PTR _sghWorkToDoEvent
	call	DWORD PTR __imp__SetEvent@4
; Line 77
	push	edi
	call	DWORD PTR __imp__LeaveCriticalSection@4
	pop	edi
	pop	esi
$L85010:
	pop	ebx
; Line 78
	leave
	ret	8
@dthread_send_delta@16 ENDP
_TEXT	ENDS
PUBLIC	_dthread_start
PUBLIC	_dthread_handler@4
PUBLIC	??_C@_0N@KJOM@dthread?31?6?$CFs?$AA@		; `string'
PUBLIC	??_C@_0N@ONKA@dthread2?3?6?$CFs?$AA@		; `string'
EXTRN	__imp__CreateEventA@16:NEAR
EXTRN	_TraceLastError:NEAR
EXTRN	_TermMsg:NEAR
EXTRN	__beginthreadex:NEAR
;	COMDAT ??_C@_0N@KJOM@dthread?31?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_0N@KJOM@dthread?31?6?$CFs?$AA@ DB 'dthread:1', 0aH, '%s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@ONKA@dthread2?3?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_0N@ONKA@dthread2?3?6?$CFs?$AA@ DB 'dthread2:', 0aH, '%s', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _dthread_start
_TEXT	SEGMENT
_dthread_start PROC NEAR				; COMDAT
; Line 84
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85032
	push	esi
; Line 88
	xor	esi, esi
	push	esi
	push	esi
	push	1
	push	esi
	call	DWORD PTR __imp__CreateEventA@16
; Line 89
	cmp	eax, esi
	mov	DWORD PTR _sghWorkToDoEvent, eax
	jne	SHORT $L85026
; Line 90
	call	_TraceLastError
; Line 91
	push	eax
	push	OFFSET FLAT:??_C@_0N@KJOM@dthread?31?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85026:
; Line 96
	push	OFFSET FLAT:_glpDThreadId
	push	esi
	push	esi
	push	OFFSET FLAT:_dthread_handler@4
	push	esi
	push	esi
	mov	BYTE PTR _dthread_running, 1
	call	__beginthreadex
	add	esp, 24					; 00000018H
; Line 97
	cmp	eax, -1
	mov	DWORD PTR _sghThread, eax
	pop	esi
	jne	SHORT $L85032
; Line 98
	call	_TraceLastError
; Line 99
	push	eax
	push	OFFSET FLAT:??_C@_0N@ONKA@dthread2?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85032:
; Line 101
	ret	0
_dthread_start ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@CNHP@dthread4?3?6?$CFs?$AA@		; `string'
EXTRN	__imp__ResetEvent@4:NEAR
EXTRN	__imp__WaitForSingleObject@8:NEAR
EXTRN	__imp__Sleep@4:NEAR
EXTRN	@multi_send_zero_packet@16:NEAR
EXTRN	_gdwDeltaBytesSec:DWORD
EXTRN	@mem_free_dbg@4:NEAR
;	COMDAT ??_C@_0N@CNHP@dthread4?3?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_0N@CNHP@dthread4?3?6?$CFs?$AA@ DB 'dthread4:', 0aH, '%s', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _dthread_handler@4
_TEXT	SEGMENT
_dthread_handler@4 PROC NEAR				; COMDAT
; Line 109
	cmp	BYTE PTR _dthread_running, 0
	je	$L85042
	push	ebx
	push	esi
	push	edi
	mov	ebx, OFFSET FLAT:_sgMemCrit
$L85041:
; Line 110
	cmp	DWORD PTR _sgpInfoHead, 0
	jne	SHORT $L85043
	push	-1
	push	DWORD PTR _sghWorkToDoEvent
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	eax, -1
	jne	SHORT $L85043
; Line 111
	call	_TraceLastError
; Line 112
	push	eax
	push	OFFSET FLAT:??_C@_0N@CNHP@dthread4?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85043:
; Line 115
	push	ebx
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 116
	mov	esi, DWORD PTR _sgpInfoHead
; Line 117
	test	esi, esi
	je	SHORT $L85045
; Line 118
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _sgpInfoHead, eax
; Line 119
	jmp	SHORT $L85046
$L85045:
; Line 120
	push	DWORD PTR _sghWorkToDoEvent
	call	DWORD PTR __imp__ResetEvent@4
$L85046:
; Line 121
	push	ebx
	call	DWORD PTR __imp__LeaveCriticalSection@4
; Line 123
	test	esi, esi
	je	SHORT $L85052
; Line 124
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, 4
	je	SHORT $L85048
; Line 125
	push	DWORD PTR [esi+12]
	mov	dl, BYTE PTR [esi+8]
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	@multi_send_zero_packet@16
$L85048:
; Line 127
	mov	eax, DWORD PTR [esi+12]
	xor	edx, edx
	imul	eax, 1000				; 000003e8H
	div	DWORD PTR _gdwDeltaBytesSec
	mov	edi, eax
; Line 128
	cmp	edi, 1
	jb	SHORT $L85051
; Line 129
	xor	edi, edi
	inc	edi
$L85051:
; Line 131
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 133
	test	edi, edi
	je	SHORT $L85052
; Line 134
	push	edi
	call	DWORD PTR __imp__Sleep@4
$L85052:
; Line 109
	cmp	BYTE PTR _dthread_running, 0
	jne	$L85041
	pop	edi
	pop	esi
	pop	ebx
$L85042:
; Line 138
	xor	eax, eax
; Line 139
	ret	4
_dthread_handler@4 ENDP
_TEXT	ENDS
PUBLIC	_dthread_cleanup
PUBLIC	??_C@_0P@CJBJ@dthread3?3?6?$CI?$CFs?$CJ?$AA@	; `string'
EXTRN	__imp__GetCurrentThreadId@0:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
;	COMDAT ??_C@_0P@CJBJ@dthread3?3?6?$CI?$CFs?$CJ?$AA@
_DATA	SEGMENT
??_C@_0P@CJBJ@dthread3?3?6?$CI?$CFs?$CJ?$AA@ DB 'dthread3:', 0aH, '(%s)', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _dthread_cleanup
_TEXT	SEGMENT
_dthread_cleanup PROC NEAR				; COMDAT
; Line 147
	mov	eax, DWORD PTR _sghWorkToDoEvent
	push	esi
	test	eax, eax
	je	$L85067
; Line 151
	and	BYTE PTR _dthread_running, 0
; Line 152
	push	eax
	call	DWORD PTR __imp__SetEvent@4
; Line 153
	cmp	DWORD PTR _sghThread, -1
	mov	esi, DWORD PTR __imp__CloseHandle@4
	je	SHORT $L85060
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	DWORD PTR _glpDThreadId, eax
	je	SHORT $L85060
; Line 154
	push	-1
	push	DWORD PTR _sghThread
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	eax, -1
	jne	SHORT $L85061
; Line 155
	call	_TraceLastError
; Line 156
	push	eax
	push	OFFSET FLAT:??_C@_0P@CJBJ@dthread3?3?6?$CI?$CFs?$CJ?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85061:
; Line 158
	push	DWORD PTR _sghThread
	call	esi
; Line 159
	or	DWORD PTR _sghThread, -1
$L85060:
; Line 161
	push	DWORD PTR _sghWorkToDoEvent
	call	esi
; Line 164
	mov	eax, DWORD PTR _sgpInfoHead
	and	DWORD PTR _sghWorkToDoEvent, 0
	test	eax, eax
	je	SHORT $L85067
$L85066:
; Line 165
	mov	esi, DWORD PTR [eax]
; Line 167
	and	DWORD PTR _sgpInfoHead, 0
; Line 168
	mov	ecx, eax
	call	@mem_free_dbg@4
; Line 169
	mov	eax, esi
	test	esi, esi
	mov	DWORD PTR _sgpInfoHead, eax
	jne	SHORT $L85066
$L85067:
	pop	esi
; Line 171
	ret	0
_dthread_cleanup ENDP
_TEXT	ENDS
END
