; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/quests.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0P@BHI@The?5Magic?5Rock?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@DIJL@Black?5Mushroom?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@NIDO@Gharbad?5The?5Weak?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GCKJ@Lachdanan?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06EMML@Diablo?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@OGO@The?5Butcher?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KFEK@Ogden?8s?5Sign?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IBIL@Halls?5of?5the?5Blind?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05KPFD@Valor?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@FHBG@Anvil?5of?5Fury?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@ECHB@The?5Curse?5of?5King?5Leoric?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@DINJ@Poisoned?5Water?5Supply?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@PFKN@The?5Chamber?5of?5Bone?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@FIHJ@Archbishop?5Lazarus?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@PPKE@King?5Leoric?8s?5Tomb?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CBNC@Maze?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@HPGM@A?5Dark?5Passage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@GMGC@Unholy?5Altar?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@KCIH@Levels?2L3Data?2L3pwater?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NPBD@To?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@DOGE@Levels?2L4Data?2Warlord2?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@MDCL@Levels?2L2Data?2Bonestr1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KKMK@Levels?2L2Data?2Blind1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@GALI@Levels?2L3Data?2L3pfoul?4pal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DKDB@Quest?5Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@OGEA@Close?5Quest?5Log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _InitQuests
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckQuests
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ForceQuests
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @QuestStatus@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckQuestKill@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawButcher
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawSkelKing@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawWarLord@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawSChamber@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawLTBanner@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawBlind@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawBlood@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_CheckQuests@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SetReturnLvlPos
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetReturnLvlPos
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ResyncMPQuests
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ResyncQuests
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PrintQLString@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawQuestLog
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _StartQuestlog
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _QuestlogUp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _QuestlogDown
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _QuestlogEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _QuestlogESC
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetMultiQuest@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_questlist
PUBLIC	_questxoff
PUBLIC	_questyoff
PUBLIC	_questtrigstr
PUBLIC	_QuestGroup1
PUBLIC	_QuestGroup2
PUBLIC	_QuestGroup3
PUBLIC	_QuestGroup4
PUBLIC	??_C@_0P@BHI@The?5Magic?5Rock?$AA@		; `string'
PUBLIC	??_C@_0P@DIJL@Black?5Mushroom?$AA@		; `string'
PUBLIC	??_C@_0BB@NIDO@Gharbad?5The?5Weak?$AA@		; `string'
PUBLIC	??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@		; `string'
PUBLIC	??_C@_09GCKJ@Lachdanan?$AA@			; `string'
PUBLIC	??_C@_06EMML@Diablo?$AA@			; `string'
PUBLIC	??_C@_0M@OGO@The?5Butcher?$AA@			; `string'
PUBLIC	??_C@_0N@KFEK@Ogden?8s?5Sign?$AA@		; `string'
PUBLIC	??_C@_0BD@IBIL@Halls?5of?5the?5Blind?$AA@	; `string'
PUBLIC	??_C@_05KPFD@Valor?$AA@				; `string'
PUBLIC	??_C@_0O@FHBG@Anvil?5of?5Fury?$AA@		; `string'
PUBLIC	??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@		; `string'
PUBLIC	??_C@_0BJ@ECHB@The?5Curse?5of?5King?5Leoric?$AA@ ; `string'
PUBLIC	??_C@_0BG@DINJ@Poisoned?5Water?5Supply?$AA@	; `string'
PUBLIC	??_C@_0BE@PFKN@The?5Chamber?5of?5Bone?$AA@	; `string'
PUBLIC	??_C@_0BD@FIHJ@Archbishop?5Lazarus?$AA@		; `string'
PUBLIC	??_C@_0BD@PPKE@King?5Leoric?8s?5Tomb?$AA@	; `string'
PUBLIC	??_C@_04CBNC@Maze?$AA@				; `string'
PUBLIC	??_C@_0P@HPGM@A?5Dark?5Passage?$AA@		; `string'
PUBLIC	??_C@_0N@GMGC@Unholy?5Altar?$AA@		; `string'
_DATA	SEGMENT
COMM	_qtopline:DWORD
COMM	_questlog:DWORD
COMM	_pQLogCel:DWORD
COMM	_quests:BYTE:0180H
COMM	_qline:DWORD
COMM	_qlist:DWORD:010H
COMM	_numqlines:DWORD
COMM	_WaterDone:DWORD
COMM	_ReturnLvlY:DWORD
COMM	_ReturnLvlX:DWORD
COMM	_ReturnLvlT:DWORD
COMM	_ALLQUESTS:DWORD
COMM	_ReturnLvl:DWORD
_DATA	ENDS
;	COMDAT ??_C@_0P@BHI@The?5Magic?5Rock?$AA@
_DATA	SEGMENT
??_C@_0P@BHI@The?5Magic?5Rock?$AA@ DB 'The Magic Rock', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@DIJL@Black?5Mushroom?$AA@
_DATA	SEGMENT
??_C@_0P@DIJL@Black?5Mushroom?$AA@ DB 'Black Mushroom', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@NIDO@Gharbad?5The?5Weak?$AA@
_DATA	SEGMENT
??_C@_0BB@NIDO@Gharbad?5The?5Weak?$AA@ DB 'Gharbad The Weak', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@
_DATA	SEGMENT
??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@ DB 'Zhar the Mad', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GCKJ@Lachdanan?$AA@
_DATA	SEGMENT
??_C@_09GCKJ@Lachdanan?$AA@ DB 'Lachdanan', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06EMML@Diablo?$AA@
_DATA	SEGMENT
??_C@_06EMML@Diablo?$AA@ DB 'Diablo', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@OGO@The?5Butcher?$AA@
_DATA	SEGMENT
??_C@_0M@OGO@The?5Butcher?$AA@ DB 'The Butcher', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@KFEK@Ogden?8s?5Sign?$AA@
_DATA	SEGMENT
??_C@_0N@KFEK@Ogden?8s?5Sign?$AA@ DB 'Ogden''s Sign', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@IBIL@Halls?5of?5the?5Blind?$AA@
_DATA	SEGMENT
??_C@_0BD@IBIL@Halls?5of?5the?5Blind?$AA@ DB 'Halls of the Blind', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_05KPFD@Valor?$AA@
_DATA	SEGMENT
??_C@_05KPFD@Valor?$AA@ DB 'Valor', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@FHBG@Anvil?5of?5Fury?$AA@
_DATA	SEGMENT
??_C@_0O@FHBG@Anvil?5of?5Fury?$AA@ DB 'Anvil of Fury', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@
_DATA	SEGMENT
??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@ DB 'Warlord of Blood', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@ECHB@The?5Curse?5of?5King?5Leoric?$AA@
_DATA	SEGMENT
??_C@_0BJ@ECHB@The?5Curse?5of?5King?5Leoric?$AA@ DB 'The Curse of King Le'
	DB	'oric', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@DINJ@Poisoned?5Water?5Supply?$AA@
_DATA	SEGMENT
??_C@_0BG@DINJ@Poisoned?5Water?5Supply?$AA@ DB 'Poisoned Water Supply', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@PFKN@The?5Chamber?5of?5Bone?$AA@
_DATA	SEGMENT
??_C@_0BE@PFKN@The?5Chamber?5of?5Bone?$AA@ DB 'The Chamber of Bone', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@FIHJ@Archbishop?5Lazarus?$AA@
_DATA	SEGMENT
??_C@_0BD@FIHJ@Archbishop?5Lazarus?$AA@ DB 'Archbishop Lazarus', 00H ; `string'
_DATA	ENDS
_DATA	SEGMENT
_questlist DB	05H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	073H
	DD	FLAT:??_C@_0P@BHI@The?5Magic?5Rock?$AA@
	DB	09H
	DB	0ffH
	DB	0ffH
	DB	01H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	080H
	DD	FLAT:??_C@_0P@DIJL@Black?5Mushroom?$AA@
	DB	04H
	DB	0ffH
	DB	0ffH
	DB	02H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	090H
	DD	FLAT:??_C@_0BB@NIDO@Gharbad?5The?5Weak?$AA@
	DB	08H
	DB	0ffH
	DB	0ffH
	DB	03H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	094H
	DD	FLAT:??_C@_0N@KGIJ@Zhar?5the?5Mad?$AA@
	DB	0eH
	DB	0ffH
	DB	0ffH
	DB	04H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	051H
	DD	FLAT:??_C@_09GCKJ@Lachdanan?$AA@
	DB	0fH
	DB	0ffH
	DB	0ffH
	DB	05H
	DB	064H
	DB	00H
	ORG $+2
	DD	01H
	DD	019H
	DD	FLAT:??_C@_06EMML@Diablo?$AA@
	DB	02H
	DB	02H
	DB	0ffH
	DB	06H
	DB	064H
	DB	00H
	ORG $+2
	DD	01H
	DD	03fH
	DD	FLAT:??_C@_0M@OGO@The?5Butcher?$AA@
	DB	04H
	DB	0ffH
	DB	0ffH
	DB	07H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	0cH
	DD	FLAT:??_C@_0N@KFEK@Ogden?8s?5Sign?$AA@
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	08H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	0edH
	DD	FLAT:??_C@_0BD@IBIL@Halls?5of?5the?5Blind?$AA@
	DB	05H
	DB	0ffH
	DB	0ffH
	DB	09H
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	0ecH
	DD	FLAT:??_C@_05KPFD@Valor?$AA@
	DB	0aH
	DB	0ffH
	DB	0ffH
	DB	0aH
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	058H
	DD	FLAT:??_C@_0O@FHBG@Anvil?5of?5Fury?$AA@
	DB	0dH
	DB	0ffH
	DB	0ffH
	DB	0bH
	DB	064H
	DB	00H
	ORG $+2
	DD	00H
	DD	0eeH
	DD	FLAT:??_C@_0BB@IIOM@Warlord?5of?5Blood?$AA@
	DB	03H
	DB	03H
	DB	01H
	DB	0cH
	DB	064H
	DB	01H
	ORG $+2
	DD	01H
	DD	01H
	DD	FLAT:??_C@_0BJ@ECHB@The?5Curse?5of?5King?5Leoric?$AA@
	DB	02H
	DB	0ffH
	DB	03H
	DB	0dH
	DB	064H
	DB	04H
	ORG $+2
	DD	00H
	DD	027H
	DD	FLAT:??_C@_0BG@DINJ@Poisoned?5Water?5Supply?$AA@
	DB	06H
	DB	0ffH
	DB	02H
	DB	0eH
	DB	064H
	DB	02H
	ORG $+2
	DD	00H
	DD	0ebH
	DD	FLAT:??_C@_0BE@PFKN@The?5Chamber?5of?5Bone?$AA@
	DB	0fH
	DB	0fH
	DB	01H
	DB	0fH
	DB	064H
	DB	05H
	ORG $+2
	DD	01H
	DD	017H
	DD	FLAT:??_C@_0BD@FIHJ@Archbishop?5Lazarus?$AA@
_questxoff DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	0feH
	DB	0ffH
	DB	0feH
	ORG $+1
_questyoff DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0feH
	DB	0feH
_DATA	ENDS
;	COMDAT ??_C@_0BD@PPKE@King?5Leoric?8s?5Tomb?$AA@
_DATA	SEGMENT
??_C@_0BD@PPKE@King?5Leoric?8s?5Tomb?$AA@ DB 'King Leoric''s Tomb', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CBNC@Maze?$AA@
_DATA	SEGMENT
??_C@_04CBNC@Maze?$AA@ DB 'Maze', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@HPGM@A?5Dark?5Passage?$AA@
_DATA	SEGMENT
??_C@_0P@HPGM@A?5Dark?5Passage?$AA@ DB 'A Dark Passage', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@GMGC@Unholy?5Altar?$AA@
_DATA	SEGMENT
??_C@_0N@GMGC@Unholy?5Altar?$AA@ DB 'Unholy Altar', 00H	; `string'
_DATA	ENDS
_DATA	SEGMENT
	ORG $+1
_questtrigstr DD FLAT:??_C@_0BD@PPKE@King?5Leoric?8s?5Tomb?$AA@
	DD	FLAT:??_C@_0BE@PFKN@The?5Chamber?5of?5Bone?$AA@
	DD	FLAT:??_C@_04CBNC@Maze?$AA@
	DD	FLAT:??_C@_0P@HPGM@A?5Dark?5Passage?$AA@
	DD	FLAT:??_C@_0N@GMGC@Unholy?5Altar?$AA@
_QuestGroup1 DD	06H
	DD	07H
	DD	02H
_QuestGroup2 DD	08H
	DD	00H
	DD	09H
_QuestGroup3 DD	01H
	DD	03H
	DD	0aH
_QuestGroup4 DD	04H
	DD	0bH
_DATA	ENDS
PUBLIC	_InitQuests
EXTRN	_glSeedTbl:BYTE
EXTRN	_gbMaxPlayers:BYTE
EXTRN	@SetRndSeed@4:NEAR
EXTRN	@random@8:NEAR
EXTRN	@delta_quest_inited@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _InitQuests
_TEXT	SEGMENT
_z$ = -4
_InitQuests PROC NEAR					; COMDAT
; File Source/quests.cpp
; Line 55
	push	ecx
; Line 60
	mov	dl, BYTE PTR _gbMaxPlayers
	push	ebx
; Line 61
	xor	ebx, ebx
	push	esi
	cmp	dl, 1
	mov	esi, OFFSET FLAT:_quests+2
	jne	SHORT $L85006
	mov	eax, esi
$L85007:
; Line 62
	mov	BYTE PTR [eax], bl
	add	eax, 24					; 00000018H
	cmp	eax, OFFSET FLAT:_quests+386
	jl	SHORT $L85007
; Line 64
	jmp	SHORT $L85013
$L85006:
; Line 65
	mov	ecx, esi
	mov	eax, OFFSET FLAT:_questlist+8
$L85011:
; Line 66
	test	BYTE PTR [eax], 1
	jne	SHORT $L85012
; Line 67
	mov	BYTE PTR [ecx], bl
$L85012:
; Line 65
	add	eax, 20					; 00000014H
	add	ecx, 24					; 00000018H
	cmp	eax, OFFSET FLAT:_questlist+328
	jl	SHORT $L85011
$L85013:
	push	ebp
	push	edi
; Line 72
	xor	ebp, ebp
; Line 73
	mov	DWORD PTR _questlog, ebx
; Line 74
	mov	DWORD PTR _ALLQUESTS, 1
; Line 75
	mov	DWORD PTR _WaterDone, ebx
; Line 77
	mov	DWORD PTR _z$[esp+20], ebx
	xor	edi, edi
$L85015:
; Line 78
	cmp	dl, 1
	jbe	SHORT $L85019
	test	BYTE PTR _questlist[edi+8], 1
	je	SHORT $L85016
$L85019:
; Line 79
	mov	al, BYTE PTR _questlist[edi+3]
; Line 80
	cmp	dl, 1
	mov	BYTE PTR [esi-1], al
	jbe	SHORT $L85020
; Line 81
	mov	al, BYTE PTR _questlist[edi+1]
; Line 82
	mov	ecx, ebp
	mov	BYTE PTR [esi-2], al
	call	@delta_quest_inited@4
	test	eax, eax
	jne	SHORT $L85021
; Line 83
	mov	BYTE PTR [esi], 1
; Line 84
	mov	BYTE PTR [esi+13], bl
; Line 85
	mov	DWORD PTR [esi+18], ebx
$L85021:
; Line 88
	mov	dl, BYTE PTR _gbMaxPlayers
	inc	ebp
	jmp	SHORT $L85022
$L85020:
; Line 90
	mov	al, BYTE PTR _questlist[edi]
	mov	BYTE PTR [esi], 1
	mov	BYTE PTR [esi-2], al
; Line 91
	mov	BYTE PTR [esi+13], bl
; Line 92
	mov	DWORD PTR [esi+18], ebx
$L85022:
; Line 96
	mov	al, BYTE PTR _questlist[edi+5]
	mov	DWORD PTR [esi+2], ebx
	mov	BYTE PTR [esi+10], al
; Line 97
	mov	al, BYTE PTR _z$[esp+20]
	mov	BYTE PTR [esi+11], al
; Line 98
	mov	al, BYTE PTR _questlist[edi+2]
	mov	BYTE PTR [esi+1], al
; Line 101
	mov	al, BYTE PTR _questlist[edi+12]
	mov	DWORD PTR [esi+6], ebx
	mov	BYTE PTR [esi+14], bl
	mov	BYTE PTR [esi+12], al
$L85016:
	inc	DWORD PTR _z$[esp+20]
	add	edi, 20					; 00000014H
	add	esi, 24					; 00000018H
	cmp	edi, 320				; 00000140H
	jb	$L85015
	pop	edi
; Line 105
	cmp	dl, 1
	pop	ebp
	jne	$L85023
; Line 106
	mov	ecx, DWORD PTR _glSeedTbl+60
	call	@SetRndSeed@4
; Line 107
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85024
; Line 108
	mov	BYTE PTR _quests+314, bl
; Line 109
	jmp	SHORT $L85025
$L85024:
; Line 110
	mov	BYTE PTR _quests+290, bl
$L85025:
; Line 112
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	eax, DWORD PTR _QuestGroup1[eax*4]
; Line 113
	push	3
	pop	edx
	xor	cl, cl
	lea	eax, DWORD PTR [eax+eax*2]
	mov	BYTE PTR _quests[eax*8+2], bl
	call	@random@8
	mov	eax, DWORD PTR _QuestGroup2[eax*4]
; Line 114
	push	3
	pop	edx
	xor	cl, cl
	lea	eax, DWORD PTR [eax+eax*2]
	mov	BYTE PTR _quests[eax*8+2], bl
	call	@random@8
	mov	eax, DWORD PTR _QuestGroup3[eax*4]
; Line 115
	push	2
	pop	edx
	xor	cl, cl
	lea	eax, DWORD PTR [eax+eax*2]
	mov	BYTE PTR _quests[eax*8+2], bl
	call	@random@8
	mov	eax, DWORD PTR _QuestGroup4[eax*4]
	mov	dl, BYTE PTR _gbMaxPlayers
	lea	eax, DWORD PTR [eax+eax*2]
	mov	BYTE PTR _quests[eax*8+2], bl
$L85023:
; Line 121
	cmp	BYTE PTR _quests+290, bl
	jne	SHORT $L85030
; Line 122
	mov	BYTE PTR _quests+304, 2
$L85030:
; Line 123
	cmp	BYTE PTR _quests+2, bl
	pop	esi
	pop	ebx
	jne	SHORT $L85031
; Line 124
	mov	BYTE PTR _quests+16, 2
$L85031:
; Line 126
	cmp	dl, 1
	mov	BYTE PTR _quests+183, 1
	je	SHORT $L85032
; Line 127
	mov	BYTE PTR _quests+375, 2
$L85032:
; Line 128
	pop	ecx
	ret	0
_InitQuests ENDP
_TEXT	ENDS
PUBLIC	_CheckQuests
PUBLIC	@QuestStatus@4
PUBLIC	??_C@_0BL@KCIH@Levels?2L3Data?2L3pwater?4pal?$AA@ ; `string'
EXTRN	_setlvlnum:BYTE
EXTRN	_setlvltype:BYTE
EXTRN	_setlevel:BYTE
EXTRN	_setpc_x:DWORD
EXTRN	_setpc_y:DWORD
EXTRN	@PlaySfxLoc@12:NEAR
EXTRN	@LoadPalette@4:NEAR
EXTRN	@palette_update_quest_palette@4:NEAR
EXTRN	_myplr:DWORD
EXTRN	_plr:BYTE
EXTRN	@AddMissile@40:NEAR
EXTRN	_nummonsters:DWORD
EXTRN	@NetSendCmdQuest@8:NEAR
EXTRN	@StartNewLvl@12:NEAR
EXTRN	@AddObject@12:NEAR
EXTRN	_leveltype:BYTE
EXTRN	_currlevel:BYTE
;	COMDAT ??_C@_0BL@KCIH@Levels?2L3Data?2L3pwater?4pal?$AA@
_DATA	SEGMENT
??_C@_0BL@KCIH@Levels?2L3Data?2L3pwater?4pal?$AA@ DB 'Levels\L3Data\L3pwa'
	DB	'ter.pal', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _CheckQuests
_TEXT	SEGMENT
_CheckQuests PROC NEAR					; COMDAT
; Line 134
	push	ebx
	push	esi
; Line 140
	push	15					; 0000000fH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85039
; Line 141
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $LABEL_6$85038
; Line 143
	cmp	BYTE PTR _quests+375, 2
	jne	SHORT $L85039
; Line 144
	mov	eax, DWORD PTR _setpc_y
	lea	eax, DWORD PTR [eax+eax+22]
	push	eax
	mov	eax, DWORD PTR _setpc_x
	push	83					; 00000053H
	lea	edx, DWORD PTR [eax+eax+20]
	pop	ecx
	call	@AddObject@12
; Line 146
	xor	ecx, ecx
	mov	dl, 15					; 0000000fH
	inc	ecx
	mov	BYTE PTR _quests+375, 3
	call	@NetSendCmdQuest@8
$L85039:
; Line 149
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	$L85057
$LABEL_6$85038:
; Line 152
	mov	al, BYTE PTR _currlevel
	xor	ebx, ebx
	cmp	al, BYTE PTR _quests+360
	jne	SHORT $L85046
	cmp	BYTE PTR _setlevel, bl
	jne	SHORT $L85046
	cmp	BYTE PTR _quests+375, 2
	jb	SHORT $L85046
; Line 153
	mov	al, BYTE PTR _quests+362
	cmp	al, 2
	je	SHORT $L85042
	cmp	al, 3
	jne	$LABEL_29$85043
$L85042:
; Line 155
	mov	al, BYTE PTR _quests+376
	cmp	al, bl
	je	SHORT $L85045
	cmp	al, 2
	jne	SHORT $L85046
$L85045:
; Line 156
	mov	eax, DWORD PTR _quests+364
; Line 158
	push	ebx
	push	ebx
	push	DWORD PTR _myplr
	lea	ecx, DWORD PTR [eax+eax+16]
	mov	eax, DWORD PTR _quests+368
	mov	DWORD PTR _quests+364, ecx
	push	ebx
	push	65					; 00000041H
	lea	edx, DWORD PTR [eax+eax+16]
	push	ebx
	push	edx
	push	ecx
	mov	DWORD PTR _quests+368, edx
	call	@AddMissile@40
; Line 160
	cmp	BYTE PTR _quests+362, 2
	mov	BYTE PTR _quests+376, 1
	jne	SHORT $L85046
; Line 161
	mov	BYTE PTR _quests+375, 3
$L85046:
; Line 164
	cmp	BYTE PTR _quests+362, 3
	push	32					; 00000020H
	pop	esi
	jne	SHORT $L85049
; Line 165
	cmp	BYTE PTR _setlevel, bl
	je	$LABEL_29$85043
; Line 167
	cmp	BYTE PTR _setlvlnum, 5
	jne	SHORT $L85049
	cmp	BYTE PTR _quests+376, 4
	jne	SHORT $L85049
; Line 168
	push	ebx
	push	ebx
	push	DWORD PTR _myplr
	mov	edx, esi
	push	ebx
	push	65					; 00000041H
	push	ebx
	push	esi
	push	35					; 00000023H
	pop	ecx
	push	ecx
	call	@AddMissile@40
; Line 169
	mov	BYTE PTR _quests+376, 3
$L85049:
; Line 172
	cmp	BYTE PTR _setlevel, bl
	je	$LABEL_29$85043
; Line 177
	mov	al, BYTE PTR _setlvlnum
	cmp	al, BYTE PTR _quests+324
	jne	SHORT $L85051
	mov	al, BYTE PTR _quests+314
	cmp	al, 1
	je	SHORT $L85051
	mov	cl, BYTE PTR _leveltype
	cmp	cl, BYTE PTR _quests+315
	jne	SHORT $L85051
	cmp	DWORD PTR _nummonsters, 4
	jne	SHORT $L85051
	cmp	al, 3
	je	SHORT $L85051
; Line 179
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _quests+314, 3
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+60]
	mov	edx, DWORD PTR _plr[eax+56]
	push	12					; 0000000cH
	pop	ecx
	call	@PlaySfxLoc@12
; Line 180
	mov	ecx, OFFSET FLAT:??_C@_0BL@KCIH@Levels?2L3Data?2L3pwater?4pal?$AA@ ; `string'
	call	@LoadPalette@4
; Line 181
	mov	DWORD PTR _WaterDone, esi
$L85051:
; Line 183
	mov	ecx, DWORD PTR _WaterDone
	cmp	ecx, ebx
	jle	$L85057
; Line 184
	call	@palette_update_quest_palette@4
; Line 185
	dec	DWORD PTR _WaterDone
; Line 187
	jmp	$L85057
$LABEL_29$85043:
; Line 190
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax], ebx
	jne	SHORT $L85057
	push	edi
; Line 191
	mov	esi, OFFSET FLAT:_quests+12
$L85055:
; Line 193
	mov	al, BYTE PTR _currlevel
	cmp	al, BYTE PTR [esi-12]
	jne	SHORT $L85062
; Line 194
	mov	cl, BYTE PTR [esi]
; Line 195
	cmp	cl, bl
	je	SHORT $L85062
; Line 196
	cmp	BYTE PTR [esi-10], bl
	je	SHORT $L85062
	mov	edi, DWORD PTR _myplr
	mov	eax, edi
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[eax+56]
	cmp	edx, DWORD PTR [esi-8]
	jne	SHORT $L85062
	mov	eax, DWORD PTR _plr[eax+60]
	cmp	eax, DWORD PTR [esi-4]
	jne	SHORT $L85062
; Line 197
	mov	al, BYTE PTR [esi-9]
	movzx	edx, al
	cmp	edx, -1
	je	SHORT $L85063
; Line 198
	mov	BYTE PTR _setlvltype, al
$L85063:
; Line 199
	movzx	eax, cl
	push	eax
	mov	edx, 1029				; 00000405H
	mov	ecx, edi
	call	@StartNewLvl@12
$L85062:
; Line 203
	add	esi, 24					; 00000018H
; Line 204
	lea	eax, DWORD PTR [esi-10]
	cmp	eax, OFFSET FLAT:_quests+386
	jl	SHORT $L85055
	pop	edi
$L85057:
	pop	esi
	pop	ebx
; Line 206
	ret	0
_CheckQuests ENDP
_TEXT	ENDS
PUBLIC	_ForceQuests
PUBLIC	??_C@_05NPBD@To?5?$CFs?$AA@			; `string'
EXTRN	_cursmx:DWORD
EXTRN	_cursmy:DWORD
EXTRN	_sprintf:NEAR
EXTRN	_infostr:BYTE
;	COMDAT ??_C@_05NPBD@To?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_05NPBD@To?5?$CFs?$AA@ DB 'To %s', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ForceQuests
_TEXT	SEGMENT
_ForceQuests PROC NEAR					; COMDAT
; Line 220
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	esi
	push	edi
; Line 221
	jne	SHORT $L85623
; Line 222
	mov	eax, OFFSET FLAT:_quests+12
$L85076:
; Line 223
	cmp	eax, OFFSET FLAT:_quests+372
	je	SHORT $LABEL_10$85079
	mov	cl, BYTE PTR _currlevel
	cmp	cl, BYTE PTR [eax-12]
	jne	SHORT $LABEL_10$85079
	cmp	BYTE PTR [eax], 0
	je	SHORT $LABEL_10$85079
; Line 229
	mov	esi, DWORD PTR [eax-8]
; Line 230
	mov	edi, DWORD PTR [eax-4]
; Line 231
	xor	ecx, ecx
$L85085:
; Line 232
	movsx	edx, BYTE PTR _questxoff[ecx]
	add	edx, esi
	cmp	edx, DWORD PTR _cursmx
	jne	SHORT $L85087
	movsx	edx, BYTE PTR _questyoff[ecx]
	add	edx, edi
	cmp	edx, DWORD PTR _cursmy
	je	SHORT $L85086
$L85087:
; Line 233
	inc	ecx
	cmp	ecx, 7
	jl	SHORT $L85085
$LABEL_10$85079:
; Line 225
	add	eax, 24					; 00000018H
; Line 226
	cmp	eax, OFFSET FLAT:_quests+396
	jl	SHORT $L85076
$L85623:
; Line 227
	xor	al, al
$L85066:
	pop	edi
	pop	esi
; Line 240
	ret	0
$L85086:
	movzx	eax, BYTE PTR [eax+1]
	lea	eax, DWORD PTR [eax+eax*2]
	movzx	eax, BYTE PTR _quests[eax*8+12]
	push	DWORD PTR _questtrigstr[eax*4-4]
	push	OFFSET FLAT:??_C@_05NPBD@To?5?$CFs?$AA@	; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 236
	add	esp, 12					; 0000000cH
; Line 237
	mov	DWORD PTR _cursmx, esi
; Line 238
	mov	DWORD PTR _cursmy, edi
; Line 239
	mov	al, 1
	jmp	SHORT $L85066
_ForceQuests ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @QuestStatus@4
_TEXT	SEGMENT
@QuestStatus@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 250
	cmp	BYTE PTR _setlevel, 0
	jne	SHORT $L85097
	mov	dl, BYTE PTR _currlevel
	lea	eax, DWORD PTR [ecx+ecx*2]
	shl	eax, 3
	cmp	dl, BYTE PTR _quests[eax]
	jne	SHORT $L85097
	cmp	BYTE PTR _quests[eax+2], 0
	je	SHORT $L85097
	xor	eax, eax
	inc	eax
	cmp	BYTE PTR _gbMaxPlayers, al
	je	SHORT $L85096
	lea	ecx, DWORD PTR [ecx+ecx*4]
	test	BYTE PTR _questlist[ecx*4+8], al
	jne	SHORT $L85096
$L85097:
; Line 251
	xor	eax, eax
$L85096:
; Line 254
	ret	0
@QuestStatus@4 ENDP
_TEXT	ENDS
PUBLIC	@CheckQuestKill@8
EXTRN	_sfxdelay:DWORD
EXTRN	_sfxdnum:DWORD
EXTRN	_trigflag:BYTE
EXTRN	_trigs:BYTE
EXTRN	_InitVPTriggers:NEAR
EXTRN	_UniqMonst:BYTE
EXTRN	_monster:BYTE
EXTRN	_dPiece:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CheckQuestKill@8
_TEXT	SEGMENT
@CheckQuestKill@8 PROC NEAR				; COMDAT
; _m$ = ecx
; _sendmsg$ = edx
; Line 271
	imul	ecx, 228				; 000000e4H
	mov	eax, DWORD PTR _monster[ecx+220]
	mov	al, BYTE PTR [eax]
; Line 272
	cmp	al, 50					; 00000032H
	jne	SHORT $L85112
; Line 275
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _quests+290, 3
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _sfxdelay, 30			; 0000001eH
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85113
; Line 276
	mov	DWORD PTR _sfxdnum, 802			; 00000322H
; Line 277
	jmp	SHORT $L85117
$L85113:
	cmp	al, 1
	jne	SHORT $L85115
; Line 278
	mov	DWORD PTR _sfxdnum, 693			; 000002b5H
; Line 279
	jmp	SHORT $L85117
$L85115:
	cmp	al, 2
	jne	SHORT $L85117
; Line 280
	mov	DWORD PTR _sfxdnum, 590			; 0000024eH
$L85117:
; Line 283
	test	edx, edx
	je	SHORT $L85170
; Line 284
	mov	dl, 12					; 0000000cH
	jmp	$LABEL_10$85119
$L85112:
; Line 290
	cmp	al, 51					; 00000033H
	je	$L85121
; Line 291
	mov	ecx, DWORD PTR _monster[ecx+216]
; Line 292
	cmp	ecx, DWORD PTR _UniqMonst+4
	jne	SHORT $L85122
; Line 295
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _quests+50, 3
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _sfxdelay, 30			; 0000001eH
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85123
; Line 296
	mov	DWORD PTR _sfxdnum, 780			; 0000030cH
$L85170:
; Line 401
	ret	0
$L85123:
; Line 297
	cmp	al, 1
	jne	SHORT $L85125
; Line 298
	mov	DWORD PTR _sfxdnum, 671			; 0000029fH
; Line 401
	ret	0
$L85125:
; Line 299
	cmp	al, 2
	jne	SHORT $L85170
; Line 300
	mov	DWORD PTR _sfxdnum, 568			; 00000238H
; Line 401
	ret	0
$L85122:
; Line 304
	cmp	ecx, DWORD PTR _UniqMonst+68
	jne	SHORT $L85128
; Line 307
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _quests+74, 3
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _sfxdelay, 30			; 0000001eH
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85129
; Line 308
	mov	DWORD PTR _sfxdnum, 781			; 0000030dH
; Line 401
	ret	0
$L85129:
; Line 309
	cmp	al, 1
	jne	SHORT $L85131
; Line 310
	mov	DWORD PTR _sfxdnum, 672			; 000002a0H
; Line 401
	ret	0
$L85131:
; Line 311
	cmp	al, 2
	jne	SHORT $L85170
; Line 312
	mov	DWORD PTR _sfxdnum, 569			; 00000239H
; Line 401
	ret	0
$L85128:
; Line 316
	cmp	ecx, DWORD PTR _UniqMonst+132
	jne	$L85153
; Line 317
	cmp	BYTE PTR _gbMaxPlayers, 1
; Line 320
	mov	DWORD PTR _sfxdelay, 30			; 0000001eH
	mov	BYTE PTR _quests+362, 3
	je	$L85135
	push	ebx
	push	esi
	push	edi
	mov	BYTE PTR _quests+375, 7
; Line 321
	mov	BYTE PTR _quests+122, 2
; Line 322
	xor	edi, edi
; Line 323
	mov	esi, OFFSET FLAT:_dPiece
$L85136:
; Line 326
	mov	eax, DWORD PTR _trigflag+16
	xor	ecx, ecx
	shl	eax, 4
	add	eax, OFFSET FLAT:_trigs+4
; Line 327
	mov	ebx, esi
$L85139:
; Line 329
	cmp	DWORD PTR [ebx], 370			; 00000172H
	jne	SHORT $L85142
; Line 330
	inc	DWORD PTR _trigflag+16
; Line 331
	mov	DWORD PTR [eax-4], ecx
; Line 332
	mov	DWORD PTR [eax], edi
; Line 333
	mov	DWORD PTR [eax+4], 1026			; 00000402H
; Line 334
	add	eax, 16					; 00000010H
$L85142:
; Line 336
	inc	ecx
; Line 337
	add	ebx, 448				; 000001c0H
; Line 338
	cmp	ecx, 112				; 00000070H
	jl	SHORT $L85139
; Line 339
	add	esi, 4
; Line 340
	inc	edi
; Line 341
	cmp	esi, OFFSET FLAT:_dPiece+448
	jl	SHORT $L85136
; Line 342
	mov	eax, DWORD PTR _myplr
	pop	edi
	imul	eax, 21720				; 000054d8H
	pop	esi
	pop	ebx
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85147
; Line 343
	mov	DWORD PTR _sfxdnum, 803			; 00000323H
; Line 344
	jmp	SHORT $L85151
$L85147:
	cmp	al, 1
	jne	SHORT $L85149
; Line 345
	mov	DWORD PTR _sfxdnum, 694			; 000002b6H
; Line 346
	jmp	SHORT $L85151
$L85149:
	cmp	al, 2
	jne	SHORT $L85151
; Line 347
	mov	DWORD PTR _sfxdnum, 591			; 0000024fH
$L85151:
; Line 349
	test	edx, edx
	je	$L85170
; Line 350
	xor	ecx, ecx
	mov	dl, 15					; 0000000fH
	inc	ecx
	call	@NetSendCmdQuest@8
; Line 351
	mov	dl, 5
; Line 352
	jmp	$LABEL_10$85119
$L85135:
; Line 359
	call	_InitVPTriggers
; Line 363
	xor	eax, eax
	mov	BYTE PTR _quests+375, 7
	push	eax
	push	eax
	push	DWORD PTR _myplr
	mov	BYTE PTR _quests+376, 4
	mov	BYTE PTR _quests+122, 2
	push	eax
	push	65					; 00000041H
	push	eax
	push	32					; 00000020H
	pop	edx
	push	edx
	push	35					; 00000023H
	pop	ecx
	push	ecx
	call	@AddMissile@40
; Line 364
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85154
; Line 365
	mov	DWORD PTR _sfxdnum, 803			; 00000323H
; Line 401
	ret	0
$L85154:
; Line 366
	cmp	al, 1
	jne	SHORT $L85156
; Line 367
	mov	DWORD PTR _sfxdnum, 694			; 000002b6H
; Line 401
	ret	0
$L85156:
; Line 368
	cmp	al, 2
	jne	$L85170
; Line 369
	mov	DWORD PTR _sfxdnum, 591			; 0000024fH
; Line 401
	ret	0
$L85153:
; Line 374
	cmp	ecx, DWORD PTR _UniqMonst+260
	jne	$L85170
; Line 377
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _quests+266, 3
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _sfxdelay, 30			; 0000001eH
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85160
; Line 378
	mov	DWORD PTR _sfxdnum, 814			; 0000032eH
; Line 401
	ret	0
$L85160:
; Line 379
	cmp	al, 1
	jne	SHORT $L85162
; Line 380
	mov	DWORD PTR _sfxdnum, 705			; 000002c1H
; Line 401
	ret	0
$L85162:
; Line 381
	cmp	al, 2
	jne	$L85170
; Line 382
	mov	DWORD PTR _sfxdnum, 602			; 0000025aH
; Line 401
	ret	0
$L85121:
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _quests+146, 3
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _sfxdelay, 30			; 0000001eH
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85165
; Line 390
	mov	DWORD PTR _sfxdnum, 800			; 00000320H
; Line 391
	jmp	SHORT $L85169
$L85165:
	cmp	al, 1
	jne	SHORT $L85167
; Line 392
	mov	DWORD PTR _sfxdnum, 691			; 000002b3H
; Line 393
	jmp	SHORT $L85169
$L85167:
	cmp	al, 2
	jne	SHORT $L85169
; Line 394
	mov	DWORD PTR _sfxdnum, 588			; 0000024cH
$L85169:
; Line 396
	test	edx, edx
	je	$L85170
; Line 397
	mov	dl, 6
$LABEL_10$85119:
; Line 286
	xor	ecx, ecx
	inc	ecx
	jmp	@NetSendCmdQuest@8
@CheckQuestKill@8 ENDP
_TEXT	ENDS
PUBLIC	_DrawButcher
EXTRN	@DRLG_RectTrans@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DrawButcher
_TEXT	SEGMENT
_DrawButcher PROC NEAR					; COMDAT
; Line 407
	mov	eax, DWORD PTR _setpc_y
	lea	ecx, DWORD PTR [eax+eax+26]
	push	ecx
	mov	ecx, DWORD PTR _setpc_x
	lea	edx, DWORD PTR [ecx+ecx+26]
	lea	ecx, DWORD PTR [ecx+ecx+19]
	push	edx
	lea	edx, DWORD PTR [eax+eax+19]
	call	@DRLG_RectTrans@16
; Line 408
	ret	0
_DrawButcher ENDP
_TEXT	ENDS
PUBLIC	@DrawSkelKing@12
; Function compile flags: /Ogsy
;	COMDAT @DrawSkelKing@12
_TEXT	SEGMENT
_y$ = 8
@DrawSkelKing@12 PROC NEAR				; COMDAT
; _q$ = ecx
; _x$ = edx
; Line 415
	lea	eax, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [edx+edx+28]
	shl	eax, 3
	mov	DWORD PTR _quests[eax+4], ecx
; Line 416
	mov	ecx, DWORD PTR _y$[esp-4]
	lea	ecx, DWORD PTR [ecx+ecx+23]
	mov	DWORD PTR _quests[eax+8], ecx
; Line 417
	ret	4
@DrawSkelKing@12 ENDP
_TEXT	ENDS
PUBLIC	@DrawWarLord@8
PUBLIC	??_C@_0BL@DOGE@Levels?2L4Data?2Warlord2?4DUN?$AA@ ; `string'
EXTRN	_setpc_h:DWORD
EXTRN	_setpc_w:DWORD
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	@LoadFileInMem@8:NEAR
EXTRN	_dungeon:BYTE
;	COMDAT ??_C@_0BL@DOGE@Levels?2L4Data?2Warlord2?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BL@DOGE@Levels?2L4Data?2Warlord2?4DUN?$AA@ DB 'Levels\L4Data\Warlo'
	DB	'rd2.DUN', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DrawWarLord@8
_TEXT	SEGMENT
_v7$ = -8
_ptr$ = -12
_v13$ = -4
@DrawWarLord@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 420
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx
; Line 437
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BL@DOGE@Levels?2L4Data?2Warlord2?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 438
	movzx	ebx, BYTE PTR [eax]
; Line 439
	mov	DWORD PTR _ptr$[ebp], eax
; Line 440
	inc	eax
	inc	eax
; Line 442
	movzx	edx, BYTE PTR [eax]
; Line 443
	mov	DWORD PTR _setpc_h, edx
; Line 444
	add	edx, esi
; Line 449
	cmp	esi, edx
	mov	DWORD PTR _v7$[ebp], edx
	lea	ecx, DWORD PTR [eax+2]
	mov	DWORD PTR _setpc_w, ebx
	mov	DWORD PTR _setpc_x, edi
	mov	DWORD PTR _setpc_y, esi
	jge	SHORT $L85203
; Line 450
	add	ebx, edi
	mov	DWORD PTR _v13$[ebp], ebx
$L85201:
; Line 452
	mov	eax, DWORD PTR _v13$[ebp]
	cmp	edi, eax
	jge	SHORT $L85207
; Line 454
	lea	edx, DWORD PTR [edi+edi*4]
	sub	eax, edi
	lea	edx, DWORD PTR _dungeon[esi+edx*8]
$L85205:
; Line 456
	mov	bl, BYTE PTR [ecx]
; Line 457
	test	bl, bl
	jne	SHORT $L85208
; Line 458
	add	bl, 6
$L85208:
; Line 460
	inc	ecx
	mov	BYTE PTR [edx], bl
	inc	ecx
; Line 461
	add	edx, 40					; 00000028H
; Line 462
	dec	eax
; Line 463
	jne	SHORT $L85205
$L85207:
; Line 465
	inc	esi
; Line 466
	cmp	esi, DWORD PTR _v7$[ebp]
	jl	SHORT $L85201
$L85203:
; Line 468
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
	pop	ebx
; Line 469
	leave
	ret	0
@DrawWarLord@8 ENDP
_TEXT	ENDS
PUBLIC	@DrawSChamber@12
PUBLIC	??_C@_0BL@MDCL@Levels?2L2Data?2Bonestr1?4DUN?$AA@ ; `string'
;	COMDAT ??_C@_0BL@MDCL@Levels?2L2Data?2Bonestr1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BL@MDCL@Levels?2L2Data?2Bonestr1?4DUN?$AA@ DB 'Levels\L2Data\Bones'
	DB	'tr1.DUN', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DrawSChamber@12
_TEXT	SEGMENT
_q$ = -16
_y$ = 8
_v5$ = -20
_v6$ = -4
_v8$ = 8
_v16$ = -8
@DrawSChamber@12 PROC NEAR				; COMDAT
; _q$ = ecx
; _x$ = edx
; Line 474
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	mov	esi, edx
	mov	DWORD PTR _q$[ebp], ecx
	push	edi
; Line 492
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BL@MDCL@Levels?2L2Data?2Bonestr1?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 497
	movzx	edx, BYTE PTR [eax+2]
	mov	edi, DWORD PTR _y$[ebp]
; Line 498
	lea	ebx, DWORD PTR [eax+4]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _setpc_h, edx
; Line 502
	add	edx, edi
; Line 503
	cmp	edi, edx
	mov	DWORD PTR _v5$[ebp], edi
	mov	DWORD PTR _v6$[ebp], edi
	mov	DWORD PTR _v8$[ebp], ebx
	mov	DWORD PTR _setpc_w, ecx
	mov	DWORD PTR _setpc_x, esi
	mov	DWORD PTR _setpc_y, edi
	mov	DWORD PTR -12+[ebp], edx
	jge	SHORT $L85235
; Line 504
	add	ecx, esi
	mov	edx, edi
	mov	DWORD PTR _v16$[ebp], ecx
$L85233:
; Line 506
	mov	ecx, DWORD PTR _v16$[ebp]
	cmp	esi, ecx
	jge	SHORT $L85239
; Line 508
	lea	ebx, DWORD PTR [esi+esi*4]
	sub	ecx, esi
	lea	edx, DWORD PTR _dungeon[edx+ebx*8]
$L85237:
; Line 510
	mov	ebx, DWORD PTR _v8$[ebp]
	mov	bl, BYTE PTR [ebx]
; Line 511
	test	bl, bl
	jne	SHORT $L85240
; Line 512
	add	bl, 3
$L85240:
; Line 514
	add	DWORD PTR _v8$[ebp], 2
	mov	BYTE PTR [edx], bl
; Line 515
	add	edx, 40					; 00000028H
; Line 516
	dec	ecx
; Line 517
	jne	SHORT $L85237
$L85239:
; Line 520
	lea	edx, DWORD PTR [edi+1]
	mov	edi, edx
	cmp	edi, DWORD PTR -12+[ebp]
	jl	SHORT $L85233
$L85235:
; Line 523
	mov	ecx, DWORD PTR _q$[ebp]
	lea	edx, DWORD PTR [esi+esi+22]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	shl	ecx, 3
	mov	DWORD PTR _quests[ecx+4], edx
; Line 524
	mov	edx, DWORD PTR _v5$[ebp]
	lea	edx, DWORD PTR [edx+edx+23]
	mov	DWORD PTR _quests[ecx+8], edx
; Line 525
	mov	ecx, eax
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
	pop	ebx
; Line 526
	leave
	ret	4
@DrawSChamber@12 ENDP
_TEXT	ENDS
PUBLIC	@DrawLTBanner@8
PUBLIC	??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@ ; `string'
EXTRN	_pdungeon:BYTE
;	COMDAT ??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@ DB 'Levels\L1Data\Banner'
	DB	'1.DUN', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DrawLTBanner@8
_TEXT	SEGMENT
_y$ = -16
_v9$ = -8
_v13$ = -12
_v14$ = -4
@DrawLTBanner@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 531
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	mov	ebx, edx
	mov	esi, ecx
	push	edi
; Line 549
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BK@GIJH@Levels?2L1Data?2Banner1?4DUN?$AA@ ; `string'
	mov	DWORD PTR _y$[ebp], ebx
	call	@LoadFileInMem@8
; Line 555
	movzx	edi, BYTE PTR [eax+2]
	movzx	ecx, BYTE PTR [eax]
	and	DWORD PTR _v14$[ebp], 0
; Line 557
	lea	edx, DWORD PTR [eax+4]
; Line 561
	test	edi, edi
	mov	DWORD PTR _setpc_w, ecx
	mov	DWORD PTR _v9$[ebp], edx
	mov	DWORD PTR _setpc_h, edi
	mov	DWORD PTR _setpc_x, esi
	mov	DWORD PTR _setpc_y, ebx
	jle	SHORT $L85265
$L85263:
; Line 563
	test	ecx, ecx
	jle	SHORT $L85266
; Line 565
	mov	ebx, DWORD PTR _v14$[ebp]
	lea	edx, DWORD PTR [esi+esi*4]
	mov	DWORD PTR _v13$[ebp], ecx
	lea	edx, DWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR _pdungeon[edx+ebx]
$L85267:
; Line 567
	mov	ebx, DWORD PTR _v9$[ebp]
	mov	bl, BYTE PTR [ebx]
	test	bl, bl
	je	SHORT $L85270
; Line 568
	mov	BYTE PTR [edx], bl
$L85270:
; Line 570
	add	DWORD PTR _v9$[ebp], 2
	add	edx, 40					; 00000028H
; Line 571
	dec	DWORD PTR _v13$[ebp]
; Line 572
	jne	SHORT $L85267
$L85266:
; Line 575
	inc	DWORD PTR _v14$[ebp]
; Line 576
	cmp	DWORD PTR _v14$[ebp], edi
	jl	SHORT $L85263
$L85265:
; Line 578
	mov	ecx, eax
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
	pop	ebx
; Line 579
	leave
	ret	0
@DrawLTBanner@8 ENDP
_TEXT	ENDS
PUBLIC	@DrawBlind@8
PUBLIC	??_C@_0BJ@KKMK@Levels?2L2Data?2Blind1?4DUN?$AA@	; `string'
;	COMDAT ??_C@_0BJ@KKMK@Levels?2L2Data?2Blind1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@KKMK@Levels?2L2Data?2Blind1?4DUN?$AA@ DB 'Levels\L2Data\Blind1.'
	DB	'DUN', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DrawBlind@8
_TEXT	SEGMENT
_y$ = -16
_v9$ = -8
_v13$ = -12
_v14$ = -4
@DrawBlind@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 584
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	mov	ebx, edx
	mov	esi, ecx
	push	edi
; Line 602
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@KKMK@Levels?2L2Data?2Blind1?4DUN?$AA@ ; `string'
	mov	DWORD PTR _y$[ebp], ebx
	call	@LoadFileInMem@8
; Line 608
	movzx	edi, BYTE PTR [eax+2]
	movzx	ecx, BYTE PTR [eax]
	and	DWORD PTR _v14$[ebp], 0
; Line 610
	lea	edx, DWORD PTR [eax+4]
; Line 614
	test	edi, edi
	mov	DWORD PTR _setpc_x, esi
	mov	DWORD PTR _v9$[ebp], edx
	mov	DWORD PTR _setpc_y, ebx
	mov	DWORD PTR _setpc_w, ecx
	mov	DWORD PTR _setpc_h, edi
	jle	SHORT $L85295
$L85293:
; Line 616
	test	ecx, ecx
	jle	SHORT $L85296
; Line 618
	mov	ebx, DWORD PTR _v14$[ebp]
	lea	edx, DWORD PTR [esi+esi*4]
	mov	DWORD PTR _v13$[ebp], ecx
	lea	edx, DWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR _pdungeon[edx+ebx]
$L85297:
; Line 620
	mov	ebx, DWORD PTR _v9$[ebp]
	mov	bl, BYTE PTR [ebx]
	test	bl, bl
	je	SHORT $L85300
; Line 621
	mov	BYTE PTR [edx], bl
$L85300:
; Line 623
	add	DWORD PTR _v9$[ebp], 2
	add	edx, 40					; 00000028H
; Line 624
	dec	DWORD PTR _v13$[ebp]
; Line 625
	jne	SHORT $L85297
$L85296:
; Line 628
	inc	DWORD PTR _v14$[ebp]
; Line 629
	cmp	DWORD PTR _v14$[ebp], edi
	jl	SHORT $L85293
$L85295:
; Line 631
	mov	ecx, eax
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
	pop	ebx
; Line 632
	leave
	ret	0
@DrawBlind@8 ENDP
_TEXT	ENDS
PUBLIC	@DrawBlood@8
PUBLIC	??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@	; `string'
;	COMDAT ??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@ DB 'Levels\L2Data\Blood2.'
	DB	'DUN', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DrawBlood@8
_TEXT	SEGMENT
_y$ = -16
_v9$ = -8
_v13$ = -12
_v14$ = -4
@DrawBlood@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 637
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	mov	ebx, edx
	mov	esi, ecx
	push	edi
; Line 655
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@NENH@Levels?2L2Data?2Blood2?4DUN?$AA@ ; `string'
	mov	DWORD PTR _y$[ebp], ebx
	call	@LoadFileInMem@8
; Line 661
	movzx	edi, BYTE PTR [eax+2]
	movzx	ecx, BYTE PTR [eax]
	and	DWORD PTR _v14$[ebp], 0
; Line 663
	lea	edx, DWORD PTR [eax+4]
; Line 667
	test	edi, edi
	mov	DWORD PTR _setpc_x, esi
	mov	DWORD PTR _v9$[ebp], edx
	mov	DWORD PTR _setpc_y, ebx
	mov	DWORD PTR _setpc_w, ecx
	mov	DWORD PTR _setpc_h, edi
	jle	SHORT $L85325
$L85323:
; Line 669
	test	ecx, ecx
	jle	SHORT $L85326
; Line 671
	mov	ebx, DWORD PTR _v14$[ebp]
	lea	edx, DWORD PTR [esi+esi*4]
	mov	DWORD PTR _v13$[ebp], ecx
	lea	edx, DWORD PTR [ebx+edx*8]
	mov	ebx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR _dungeon[edx+ebx]
$L85327:
; Line 673
	mov	ebx, DWORD PTR _v9$[ebp]
	mov	bl, BYTE PTR [ebx]
	test	bl, bl
	je	SHORT $L85330
; Line 674
	mov	BYTE PTR [edx], bl
$L85330:
; Line 676
	add	DWORD PTR _v9$[ebp], 2
	add	edx, 40					; 00000028H
; Line 677
	dec	DWORD PTR _v13$[ebp]
; Line 678
	jne	SHORT $L85327
$L85326:
; Line 681
	inc	DWORD PTR _v14$[ebp]
; Line 682
	cmp	DWORD PTR _v14$[ebp], edi
	jl	SHORT $L85323
$L85325:
; Line 684
	mov	ecx, eax
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
	pop	ebx
; Line 685
	leave
	ret	0
@DrawBlood@8 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_CheckQuests@8
; Function compile flags: /Ogsy
;	COMDAT @DRLG_CheckQuests@8
_TEXT	SEGMENT
@DRLG_CheckQuests@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 690
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx
; Line 699
	xor	ebx, ebx
; Line 700
	mov	ebp, OFFSET FLAT:_quests+1
$L85340:
; Line 703
	mov	ecx, ebx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85345
; Line 704
	movzx	eax, BYTE PTR [ebp]
	sub	eax, 6
	je	SHORT $L85348
	dec	eax
	je	SHORT $L85349
	dec	eax
	je	SHORT $L85350
	dec	eax
	je	SHORT $L85351
	dec	eax
	dec	eax
	je	SHORT $L85352
	dec	eax
	je	SHORT $L85353
	dec	eax
	dec	eax
	jne	SHORT $L85345
; Line 724
	push	esi
	mov	edx, edi
	mov	ecx, ebx
	call	@DrawSChamber@12
; Line 725
	jmp	SHORT $L85345
$L85353:
; Line 721
	push	esi
	mov	edx, edi
	mov	ecx, ebx
	call	@DrawSkelKing@12
; Line 722
	jmp	SHORT $L85345
$L85352:
; Line 718
	mov	edx, esi
	mov	ecx, edi
	call	@DrawWarLord@8
; Line 719
	jmp	SHORT $L85345
$L85351:
; Line 715
	mov	edx, esi
	mov	ecx, edi
	call	@DrawBlood@8
; Line 716
	jmp	SHORT $L85345
$L85350:
; Line 712
	mov	edx, esi
	mov	ecx, edi
	call	@DrawBlind@8
; Line 713
	jmp	SHORT $L85345
$L85349:
; Line 709
	mov	edx, esi
	mov	ecx, edi
	call	@DrawLTBanner@8
; Line 710
	jmp	SHORT $L85345
$L85348:
; Line 706
	call	_DrawButcher
$L85345:
; Line 728
	add	ebp, 24					; 00000018H
; Line 729
	inc	ebx
; Line 730
	cmp	ebp, OFFSET FLAT:_quests+385
	jl	SHORT $L85340
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 731
	ret	0
@DRLG_CheckQuests@8 ENDP
_TEXT	ENDS
PUBLIC	_SetReturnLvlPos
; Function compile flags: /Ogsy
;	COMDAT _SetReturnLvlPos
_TEXT	SEGMENT
_SetReturnLvlPos PROC NEAR				; COMDAT
; Line 738
	mov	cl, BYTE PTR _setlvlnum
	movzx	eax, cl
	dec	eax
	je	SHORT $L85363
	dec	eax
	je	SHORT $L85366
	dec	eax
	dec	eax
	je	SHORT $L85369
; Line 758
	cmp	cl, 5
	jne	$L85357
; Line 761
	mov	eax, DWORD PTR _quests+364
	mov	DWORD PTR _ReturnLvlT, 4
	inc	eax
	mov	DWORD PTR _ReturnLvlX, eax
; Line 762
	mov	eax, DWORD PTR _quests+368
	dec	eax
	mov	DWORD PTR _ReturnLvlY, eax
; Line 763
	movzx	eax, BYTE PTR _quests+360
	jmp	SHORT $LABEL_10$85368
$L85369:
; Line 751
	mov	eax, DWORD PTR _quests+316
	mov	DWORD PTR _ReturnLvlX, eax
; Line 752
	mov	eax, DWORD PTR _quests+320
	inc	eax
	mov	DWORD PTR _ReturnLvlY, eax
; Line 753
	movzx	eax, BYTE PTR _quests+312
	jmp	SHORT $LABEL_9$85365
$L85366:
; Line 746
	mov	eax, DWORD PTR _quests+340
	mov	DWORD PTR _ReturnLvlT, 2
	inc	eax
	mov	DWORD PTR _ReturnLvlX, eax
; Line 747
	mov	eax, DWORD PTR _quests+344
	mov	DWORD PTR _ReturnLvlY, eax
; Line 748
	movzx	eax, BYTE PTR _quests+336
; Line 749
	jmp	SHORT $LABEL_10$85368
$L85363:
; Line 740
	mov	eax, DWORD PTR _quests+292
	inc	eax
	mov	DWORD PTR _ReturnLvlX, eax
; Line 741
	mov	eax, DWORD PTR _quests+296
	mov	DWORD PTR _ReturnLvlY, eax
; Line 742
	movzx	eax, BYTE PTR _quests+288
$LABEL_9$85365:
; Line 755
	mov	DWORD PTR _ReturnLvlT, 1
$LABEL_10$85368:
; Line 765
	mov	DWORD PTR _ReturnLvl, eax
$L85357:
; Line 766
	ret	0
_SetReturnLvlPos ENDP
_TEXT	ENDS
PUBLIC	_GetReturnLvlPos
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
; Function compile flags: /Ogsy
;	COMDAT _GetReturnLvlPos
_TEXT	SEGMENT
_GetReturnLvlPos PROC NEAR				; COMDAT
; Line 770
	cmp	BYTE PTR _quests+362, 3
	jne	SHORT $L85374
; Line 771
	mov	BYTE PTR _quests+376, 2
$L85374:
; Line 772
	mov	eax, DWORD PTR _ReturnLvlX
	mov	DWORD PTR _ViewX, eax
; Line 773
	mov	eax, DWORD PTR _ReturnLvlY
	mov	DWORD PTR _ViewY, eax
; Line 774
	mov	al, BYTE PTR _ReturnLvl
	mov	BYTE PTR _currlevel, al
; Line 775
	mov	al, BYTE PTR _ReturnLvlT
	mov	BYTE PTR _leveltype, al
; Line 776
	ret	0
_GetReturnLvlPos ENDP
_TEXT	ENDS
PUBLIC	_ResyncMPQuests
; Function compile flags: /Ogsy
;	COMDAT _ResyncMPQuests
_TEXT	SEGMENT
_ResyncMPQuests PROC NEAR				; COMDAT
; Line 780
	push	ebx
; Line 783
	xor	ebx, ebx
	inc	ebx
	cmp	BYTE PTR _quests+290, bl
	jne	SHORT $L85378
	movzx	eax, BYTE PTR _quests+288
	movzx	ecx, BYTE PTR _currlevel
	lea	edx, DWORD PTR [eax-1]
	cmp	ecx, edx
	jl	SHORT $L85378
	inc	eax
	cmp	ecx, eax
	jg	SHORT $L85378
; Line 785
	mov	dl, 12					; 0000000cH
	mov	ecx, ebx
	mov	BYTE PTR _quests+290, 2
	call	@NetSendCmdQuest@8
$L85378:
; Line 789
	cmp	BYTE PTR _quests+146, bl
	jne	SHORT $L85381
	movzx	eax, BYTE PTR _quests+144
	movzx	ecx, BYTE PTR _currlevel
	lea	edx, DWORD PTR [eax-1]
	cmp	ecx, edx
	jl	SHORT $L85381
	inc	eax
	cmp	ecx, eax
	jg	SHORT $L85381
; Line 791
	mov	dl, 6
	mov	ecx, ebx
	mov	BYTE PTR _quests+146, 2
	call	@NetSendCmdQuest@8
$L85381:
; Line 793
	cmp	BYTE PTR _quests+362, bl
	jne	SHORT $L85383
	movzx	eax, BYTE PTR _quests+360
	movzx	ecx, BYTE PTR _currlevel
	dec	eax
	cmp	ecx, eax
	jne	SHORT $L85383
; Line 795
	mov	dl, 15					; 0000000fH
	mov	ecx, ebx
	mov	BYTE PTR _quests+362, 2
	call	@NetSendCmdQuest@8
$L85383:
; Line 797
	push	15					; 0000000fH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	pop	ebx
	je	SHORT $L85384
; Line 798
	mov	eax, DWORD PTR _setpc_y
	lea	eax, DWORD PTR [eax+eax+22]
	push	eax
	mov	eax, DWORD PTR _setpc_x
	push	83					; 00000053H
	lea	edx, DWORD PTR [eax+eax+20]
	pop	ecx
	call	@AddObject@12
$L85384:
; Line 799
	ret	0
_ResyncMPQuests ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@GALI@Levels?2L3Data?2L3pfoul?4pal?$AA@ ; `string'
PUBLIC	_ResyncQuests
EXTRN	@DRLG_MRectTrans@16:NEAR
EXTRN	@ObjChangeMapResync@16:NEAR
EXTRN	@SyncObjectAnim@4:NEAR
EXTRN	_Qtalklist:BYTE
EXTRN	_objectactive:BYTE
EXTRN	_nobjects:DWORD
EXTRN	@SpawnQuestItem@20:NEAR
EXTRN	_TransVal:BYTE
;	COMDAT ??_C@_0BK@GALI@Levels?2L3Data?2L3pfoul?4pal?$AA@
_DATA	SEGMENT
??_C@_0BK@GALI@Levels?2L3Data?2L3pfoul?4pal?$AA@ DB 'Levels\L3Data\L3pfou'
	DB	'l.pal', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ResyncQuests
_TEXT	SEGMENT
_ResyncQuests PROC NEAR					; COMDAT
; Line 812
	cmp	BYTE PTR _setlevel, 0
	push	ebx
	push	esi
	je	SHORT $L85398
	mov	al, BYTE PTR _setlvlnum
	cmp	al, BYTE PTR _quests+324
	jne	SHORT $L85398
	mov	al, BYTE PTR _quests+314
	cmp	al, 1
	je	SHORT $L85398
	mov	cl, BYTE PTR _leveltype
	cmp	cl, BYTE PTR _quests+315
	jne	SHORT $L85398
; Line 814
	cmp	al, 3
	mov	ecx, OFFSET FLAT:??_C@_0BL@KCIH@Levels?2L3Data?2L3pwater?4pal?$AA@ ; `string'
	je	SHORT $L85394
; Line 815
	mov	ecx, OFFSET FLAT:??_C@_0BK@GALI@Levels?2L3Data?2L3pfoul?4pal?$AA@ ; `string'
$L85394:
; Line 816
	call	@LoadPalette@4
; Line 817
	xor	esi, esi
$L85396:
; Line 819
	mov	ecx, esi
	inc	esi
	call	@palette_update_quest_palette@4
; Line 820
	cmp	esi, 32					; 00000020H
	jle	SHORT $L85396
$L85398:
; Line 823
	push	7
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	$L85405
; Line 824
	cmp	BYTE PTR _quests+183, 1
	jne	SHORT $L85400
; Line 829
	mov	eax, DWORD PTR _setpc_h
	mov	ecx, DWORD PTR _setpc_y
	mov	edx, DWORD PTR _setpc_x
	add	eax, ecx
	mov	ecx, DWORD PTR _setpc_w
	add	ecx, edx
	lea	edx, DWORD PTR [eax+1]
	push	edx
	lea	edx, DWORD PTR [ecx+1]
	add	ecx, -2					; fffffffeH
	push	edx
	lea	edx, DWORD PTR [eax-2]
	call	@ObjChangeMapResync@16
$L85400:
; Line 830
	cmp	BYTE PTR _quests+183, 2
	jne	$L85401
; Line 835
	mov	eax, DWORD PTR _setpc_h
	mov	ecx, DWORD PTR _setpc_y
	mov	edx, DWORD PTR _setpc_x
	add	eax, ecx
	mov	ecx, DWORD PTR _setpc_w
	add	ecx, edx
	lea	edx, DWORD PTR [eax+1]
	push	edx
	lea	edx, DWORD PTR [ecx+1]
	add	ecx, -2					; fffffffeH
	push	edx
	lea	edx, DWORD PTR [eax-2]
	call	@ObjChangeMapResync@16
; Line 836
	mov	eax, DWORD PTR _setpc_h
	mov	edx, DWORD PTR _setpc_y
	sar	eax, 1
	mov	ecx, DWORD PTR _setpc_x
	lea	eax, DWORD PTR [eax+edx-2]
	push	eax
	mov	eax, DWORD PTR _setpc_w
	sar	eax, 1
	lea	eax, DWORD PTR [eax+ecx+2]
	push	eax
	call	@ObjChangeMapResync@16
; Line 837
	xor	esi, esi
	cmp	DWORD PTR _nobjects, esi
	jle	SHORT $L85404
$L85402:
; Line 838
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@SyncObjectAnim@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85402
$L85404:
; Line 841
	mov	eax, DWORD PTR _setpc_h
	mov	edx, DWORD PTR _setpc_y
	mov	ecx, DWORD PTR _setpc_x
	mov	bl, BYTE PTR _TransVal
	sar	eax, 1
	add	eax, edx
	mov	BYTE PTR _TransVal, 9
	push	eax
	mov	eax, DWORD PTR _setpc_w
	sar	eax, 1
	lea	eax, DWORD PTR [eax+ecx+4]
	push	eax
	call	@DRLG_MRectTrans@16
; Line 842
	mov	BYTE PTR _TransVal, bl
$L85401:
; Line 844
	cmp	BYTE PTR _quests+183, 3
	jne	SHORT $L85405
; Line 845
	mov	edx, DWORD PTR _setpc_y
	mov	eax, DWORD PTR _setpc_h
	mov	ecx, DWORD PTR _setpc_x
	lea	eax, DWORD PTR [edx+eax+1]
	push	eax
	mov	eax, DWORD PTR _setpc_w
	lea	eax, DWORD PTR [ecx+eax+1]
	push	eax
	call	@ObjChangeMapResync@16
; Line 846
	xor	esi, esi
	cmp	DWORD PTR _nobjects, esi
	jle	SHORT $L85408
$L85406:
; Line 847
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@SyncObjectAnim@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85406
$L85408:
; Line 850
	mov	eax, DWORD PTR _setpc_h
	mov	edx, DWORD PTR _setpc_y
	mov	ecx, DWORD PTR _setpc_x
	mov	bl, BYTE PTR _TransVal
	sar	eax, 1
	add	eax, edx
	mov	BYTE PTR _TransVal, 9
	push	eax
	mov	eax, DWORD PTR _setpc_w
	sar	eax, 1
	lea	eax, DWORD PTR [eax+ecx+4]
	push	eax
	call	@DRLG_MRectTrans@16
; Line 851
	mov	BYTE PTR _TransVal, bl
$L85405:
; Line 854
	mov	al, BYTE PTR _currlevel
	push	5
	cmp	al, BYTE PTR _quests+24
	pop	ebx
	jne	SHORT $L85416
; Line 855
	mov	al, BYTE PTR _quests+26
	cmp	al, 1
	jne	SHORT $L85410
; Line 856
	cmp	BYTE PTR _quests+39, 0
	jne	SHORT $L85416
; Line 857
	push	1
	push	ebx
	push	0
	push	19					; 00000013H
	xor	edx, edx
	pop	ecx
	call	@SpawnQuestItem@20
; Line 858
	mov	BYTE PTR _quests+39, 1
; Line 860
	jmp	SHORT $L85416
$L85410:
	cmp	al, 2
	jne	SHORT $L85416
; Line 861
	mov	al, BYTE PTR _quests+39
	cmp	al, bl
	jae	SHORT $L85414
; Line 862
	cmp	al, 7
	jb	SHORT $L85416
; Line 863
	or	DWORD PTR _Qtalklist+68, -1
; Line 864
	jmp	SHORT $L85416
$L85414:
; Line 865
	or	DWORD PTR _Qtalklist+388, -1
; Line 866
	mov	DWORD PTR _Qtalklist+68, 123		; 0000007bH
$L85416:
; Line 870
	movzx	eax, BYTE PTR _quests+96
	movzx	ecx, BYTE PTR _currlevel
	inc	eax
	cmp	ecx, eax
	jne	SHORT $L85418
	cmp	BYTE PTR _quests+98, 2
	jne	SHORT $L85418
	cmp	BYTE PTR _quests+111, 0
	jne	SHORT $L85418
; Line 872
	push	1
	push	ebx
	push	0
	push	15					; 0000000fH
	xor	edx, edx
	pop	ecx
	mov	BYTE PTR _quests+111, 1
	call	@SpawnQuestItem@20
$L85418:
; Line 874
	cmp	BYTE PTR _setlevel, 0
	je	SHORT $L85425
	cmp	BYTE PTR _setlvlnum, bl
	jne	SHORT $L85425
; Line 875
	cmp	BYTE PTR _quests+375, 4
	jb	SHORT $L85420
; Line 876
	push	18					; 00000012H
	push	20					; 00000014H
	push	11					; 0000000bH
	xor	ecx, ecx
	pop	edx
	inc	ecx
	call	@ObjChangeMapResync@16
$L85420:
; Line 877
	cmp	BYTE PTR _quests+375, 6
	jb	SHORT $L85421
; Line 878
	push	24					; 00000018H
	push	20					; 00000014H
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	inc	ecx
	call	@ObjChangeMapResync@16
$L85421:
; Line 879
	cmp	BYTE PTR _quests+375, 7
	jb	SHORT $L85422
; Line 880
	call	_InitVPTriggers
$L85422:
; Line 881
	xor	esi, esi
	cmp	DWORD PTR _nobjects, esi
	jle	SHORT $L85425
$L85423:
; Line 882
	mov	ecx, DWORD PTR _objectactive[esi*4]
	call	@SyncObjectAnim@4
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85423
$L85425:
; Line 887
	mov	al, BYTE PTR _currlevel
	pop	esi
	cmp	al, BYTE PTR _quests+360
	pop	ebx
	jne	SHORT $L85426
	cmp	BYTE PTR _setlevel, 0
	jne	SHORT $L85426
	mov	al, BYTE PTR _quests+376
	cmp	al, 1
	je	SHORT $L85427
	cmp	al, 3
	jb	SHORT $L85426
$L85427:
	mov	al, BYTE PTR _quests+362
	cmp	al, 2
	je	SHORT $L85428
	cmp	al, 3
	jne	SHORT $L85426
$L85428:
; Line 888
	mov	BYTE PTR _quests+376, 2
$L85426:
; Line 890
	ret	0
_ResyncQuests ENDP
_TEXT	ENDS
PUBLIC	@PrintQLString@20
EXTRN	_SStringY:BYTE
EXTRN	_fontframe:BYTE
EXTRN	_fontkern:BYTE
EXTRN	_fontidx:BYTE
EXTRN	_screen_y_times_768:BYTE
EXTRN	@CelDecodeOnly@20:NEAR
EXTRN	_pCelBuff:DWORD
EXTRN	_strlen:NEAR
EXTRN	@CPrintString@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @PrintQLString@20
_TEXT	SEGMENT
_x$ = -8
_y$ = -16
_cjustflag$ = 8
_str$ = 12
_col$ = 16
_v5$ = -20
_v19$ = -12
_v20$ = -4
@PrintQLString@20 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 898
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 917
	mov	eax, DWORD PTR _SStringY[edx*4]
	push	ebx
	push	esi
	push	edi
; Line 922
	push	DWORD PTR _str$[ebp]
	mov	DWORD PTR _v5$[ebp], eax
	mov	eax, DWORD PTR _screen_y_times_768[eax*4+816]
	mov	DWORD PTR _y$[ebp], edx
	mov	DWORD PTR _x$[ebp], ecx
; Line 923
	xor	esi, esi
	lea	ebx, DWORD PTR [eax+ecx+96]
; Line 924
	xor	edi, edi
	call	_strlen
; Line 926
	cmp	BYTE PTR _cjustflag$[ebp], 0
	pop	ecx
	mov	DWORD PTR _v20$[ebp], eax
	je	SHORT $L85457
; Line 927
	xor	eax, eax
; Line 928
	cmp	DWORD PTR _v20$[ebp], eax
	jle	SHORT $LABEL_24$85459
$L85460:
; Line 931
	mov	ecx, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [edi+ecx]
	inc	edi
; Line 932
	movzx	ecx, BYTE PTR _fontidx[ecx]
; Line 933
	cmp	edi, DWORD PTR _v20$[ebp]
	movzx	ecx, BYTE PTR _fontframe[ecx]
	movzx	ecx, BYTE PTR _fontkern[ecx]
	lea	eax, DWORD PTR [eax+ecx+1]
	jl	SHORT $L85460
; Line 934
	cmp	eax, 257				; 00000101H
	jge	SHORT $L85464
$LABEL_24$85459:
; Line 936
	mov	esi, 257				; 00000101H
	sub	esi, eax
	sar	esi, 1
$L85464:
; Line 937
	add	ebx, esi
$L85457:
; Line 939
	mov	eax, DWORD PTR _qline
; Line 940
	mov	edi, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _y$[ebp]
	jne	SHORT $L85465
; Line 941
	cmp	BYTE PTR _cjustflag$[ebp], 0
	lea	ecx, DWORD PTR [esi+edi+76]
	jne	SHORT $L85466
; Line 942
	lea	ecx, DWORD PTR [edi+76]
$L85466:
; Line 943
	mov	eax, DWORD PTR _v5$[ebp]
	push	12					; 0000000cH
	push	DWORD PTR _ALLQUESTS
	lea	edx, DWORD PTR [eax+205]
	push	DWORD PTR _pCelBuff
	call	@CelDecodeOnly@20
$L85465:
; Line 945
	xor	eax, eax
; Line 947
	cmp	DWORD PTR _v20$[ebp], eax
	mov	DWORD PTR _v19$[ebp], eax
	jle	SHORT $L85467
$L85468:
; Line 949
	mov	ecx, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	movzx	ecx, BYTE PTR _fontidx[ecx]
	mov	cl, BYTE PTR _fontframe[ecx]
; Line 950
	movzx	edi, cl
; Line 952
	test	cl, cl
	movzx	edx, BYTE PTR _fontkern[edi]
	lea	esi, DWORD PTR [esi+edx+1]
	je	SHORT $L85472
	cmp	esi, 257				; 00000101H
	jg	SHORT $L85472
; Line 953
	push	DWORD PTR _col$[ebp]
	mov	edx, edi
	mov	ecx, ebx
	call	@CPrintString@12
; Line 954
	mov	eax, DWORD PTR _v19$[ebp]
$L85472:
; Line 957
	movzx	ecx, BYTE PTR _fontkern[edi]
	inc	eax
; Line 958
	cmp	eax, DWORD PTR _v20$[ebp]
	mov	DWORD PTR _v19$[ebp], eax
	lea	ebx, DWORD PTR [ebx+ecx+1]
	jl	SHORT $L85468
	mov	edi, DWORD PTR _x$[ebp]
$L85467:
; Line 961
	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _qline, eax
	jne	SHORT $L85473
; Line 962
	cmp	BYTE PTR _cjustflag$[ebp], 0
	je	SHORT $L85474
; Line 963
	lea	ecx, DWORD PTR [esi+edi+100]
; Line 964
	jmp	SHORT $L85475
$L85474:
; Line 965
	mov	ecx, 340				; 00000154H
	sub	ecx, edi
$L85475:
; Line 966
	mov	eax, DWORD PTR _v5$[ebp]
	push	12					; 0000000cH
	push	DWORD PTR _ALLQUESTS
	lea	edx, DWORD PTR [eax+205]
	push	DWORD PTR _pCelBuff
	call	@CelDecodeOnly@20
$L85473:
	pop	edi
	pop	esi
	pop	ebx
; Line 968
	leave
	ret	12					; 0000000cH
@PrintQLString@20 ENDP
_TEXT	ENDS
PUBLIC	??_C@_09DKDB@Quest?5Log?$AA@			; `string'
PUBLIC	??_C@_0BA@OGEA@Close?5Quest?5Log?$AA@		; `string'
PUBLIC	_DrawQuestLog
;	COMDAT ??_C@_09DKDB@Quest?5Log?$AA@
_DATA	SEGMENT
??_C@_09DKDB@Quest?5Log?$AA@ DB 'Quest Log', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@OGEA@Close?5Quest?5Log?$AA@
_DATA	SEGMENT
??_C@_0BA@OGEA@Close?5Quest?5Log?$AA@ DB 'Close Quest Log', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DrawQuestLog
_TEXT	SEGMENT
_DrawQuestLog PROC NEAR					; COMDAT
; Line 972
	push	esi
	push	edi
; Line 976
	push	3
	push	OFFSET FLAT:??_C@_09DKDB@Quest?5Log?$AA@ ; `string'
	push	1
	push	2
	pop	edx
	xor	ecx, ecx
	call	@PrintQLString@20
; Line 977
	push	320					; 00000140H
	push	1
	push	DWORD PTR _pQLogCel
	mov	edx, 511				; 000001ffH
	push	64					; 00000040H
	pop	ecx
	call	@CelDecodeOnly@20
; Line 978
	mov	edi, DWORD PTR _qtopline
; Line 979
	xor	esi, esi
	cmp	DWORD PTR _numqlines, esi
	jle	SHORT $L85482
$L85480:
; Line 980
	mov	eax, DWORD PTR _qlist[esi*4]
	push	0
	mov	edx, edi
	xor	ecx, ecx
	lea	eax, DWORD PTR [eax+eax*4]
	push	DWORD PTR _questlist[eax*4+16]
	push	1
	call	@PrintQLString@20
; Line 981
	inc	edi
	inc	edi
	inc	esi
	cmp	esi, DWORD PTR _numqlines
	jl	SHORT $L85480
$L85482:
; Line 983
	push	0
	push	OFFSET FLAT:??_C@_0BA@OGEA@Close?5Quest?5Log?$AA@ ; `string'
	push	1
	push	22					; 00000016H
	pop	edx
	xor	ecx, ecx
	call	@PrintQLString@20
; Line 984
	mov	eax, DWORD PTR _ALLQUESTS
	pop	edi
	and	eax, 7
	pop	esi
	inc	eax
	mov	DWORD PTR _ALLQUESTS, eax
; Line 985
	ret	0
_DrawQuestLog ENDP
_TEXT	ENDS
PUBLIC	_StartQuestlog
; Function compile flags: /Ogsy
;	COMDAT _StartQuestlog
_TEXT	SEGMENT
_StartQuestlog PROC NEAR				; COMDAT
; Line 995
	xor	ecx, ecx
; Line 998
	xor	edx, edx
; Line 1004
	xor	eax, eax
$L85489:
; Line 1000
	cmp	BYTE PTR _quests[eax+2], 2
	jne	SHORT $L85492
	cmp	DWORD PTR _quests[eax+20], 0
	je	SHORT $L85492
; Line 1001
	mov	DWORD PTR _qlist[ecx*4], edx
	inc	ecx
$L85492:
; Line 1004
	add	eax, 24					; 00000018H
	inc	edx
	cmp	eax, 384				; 00000180H
	jb	SHORT $L85489
; Line 1006
	push	5
	mov	DWORD PTR _numqlines, ecx
	pop	eax
	cmp	ecx, eax
	jg	SHORT $L85493
; Line 1007
	push	8
	pop	eax
; Line 1008
	jmp	SHORT $L85494
$L85493:
; Line 1009
	mov	edx, ecx
	sar	edx, 1
	sub	eax, edx
$L85494:
; Line 1012
	test	ecx, ecx
	mov	DWORD PTR _qtopline, eax
	mov	DWORD PTR _qline, 22			; 00000016H
	je	SHORT $L85495
; Line 1013
	mov	DWORD PTR _qline, eax
$L85495:
; Line 1014
	xor	eax, eax
	inc	eax
	mov	DWORD PTR _questlog, eax
; Line 1015
	mov	DWORD PTR _ALLQUESTS, eax
; Line 1016
	ret	0
_StartQuestlog ENDP
_TEXT	ENDS
PUBLIC	_QuestlogUp
EXTRN	@PlaySFX@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _QuestlogUp
_TEXT	SEGMENT
_QuestlogUp PROC NEAR					; COMDAT
; Line 1023
	mov	ecx, DWORD PTR _numqlines
	test	ecx, ecx
	je	SHORT $L85497
; Line 1024
	mov	eax, DWORD PTR _qtopline
	cmp	DWORD PTR _qline, eax
	jne	SHORT $L85498
; Line 1025
	mov	DWORD PTR _qline, 22			; 00000016H
; Line 1026
	jmp	SHORT $L85501
$L85498:
	cmp	DWORD PTR _qline, 22			; 00000016H
	jne	SHORT $L85500
; Line 1027
	lea	eax, DWORD PTR [eax+ecx*2-2]
	mov	DWORD PTR _qline, eax
; Line 1028
	jmp	SHORT $L85501
$L85500:
; Line 1029
	sub	DWORD PTR _qline, 2
$L85501:
; Line 1031
	push	69					; 00000045H
	pop	ecx
	jmp	@PlaySFX@4
$L85497:
; Line 1033
	ret	0
_QuestlogUp ENDP
_TEXT	ENDS
PUBLIC	_QuestlogDown
; Function compile flags: /Ogsy
;	COMDAT _QuestlogDown
_TEXT	SEGMENT
_QuestlogDown PROC NEAR					; COMDAT
; Line 1039
	mov	eax, DWORD PTR _numqlines
	test	eax, eax
	je	SHORT $L85503
; Line 1040
	push	22					; 00000016H
	pop	ecx
	cmp	DWORD PTR _qline, ecx
	jne	SHORT $L85504
; Line 1041
	mov	eax, DWORD PTR _qtopline
	mov	DWORD PTR _qline, eax
; Line 1042
	jmp	SHORT $L85507
$L85504:
	mov	edx, DWORD PTR _qtopline
	lea	eax, DWORD PTR [edx+eax*2-2]
	cmp	DWORD PTR _qline, eax
	jne	SHORT $L85506
; Line 1043
	mov	DWORD PTR _qline, ecx
; Line 1044
	jmp	SHORT $L85507
$L85506:
; Line 1045
	add	DWORD PTR _qline, 2
$L85507:
; Line 1047
	push	69					; 00000045H
	pop	ecx
	jmp	@PlaySFX@4
$L85503:
; Line 1049
	ret	0
_QuestlogDown ENDP
_TEXT	ENDS
PUBLIC	_QuestlogEnter
EXTRN	@InitQTextMsg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _QuestlogEnter
_TEXT	SEGMENT
_QuestlogEnter PROC NEAR				; COMDAT
; Line 1055
	push	70					; 00000046H
	pop	ecx
	call	@PlaySFX@4
; Line 1056
	cmp	DWORD PTR _numqlines, 0
	je	SHORT $L85509
	mov	eax, DWORD PTR _qline
	cmp	eax, 22					; 00000016H
	je	SHORT $L85509
; Line 1057
	sub	eax, DWORD PTR _qtopline
	sar	eax, 1
	mov	eax, DWORD PTR _qlist[eax*4]
	lea	eax, DWORD PTR [eax+eax*2]
	movzx	ecx, BYTE PTR _quests[eax*8+14]
	call	@InitQTextMsg@4
$L85509:
; Line 1058
	and	DWORD PTR _questlog, 0
; Line 1059
	ret	0
_QuestlogEnter ENDP
_TEXT	ENDS
PUBLIC	_QuestlogESC
EXTRN	_MouseY:DWORD
; Function compile flags: /Ogsy
;	COMDAT _QuestlogESC
_TEXT	SEGMENT
_QuestlogESC PROC NEAR					; COMDAT
; Line 1069
	mov	eax, DWORD PTR _MouseY
	push	esi
	push	edi
	add	eax, -32				; ffffffe0H
	push	12					; 0000000cH
	cdq
	pop	ecx
	idiv	ecx
	mov	esi, eax
; Line 1070
	mov	eax, DWORD PTR _numqlines
	test	eax, eax
	je	SHORT $L85517
; Line 1071
	xor	edi, edi
	test	eax, eax
	jle	SHORT $L85517
$L85515:
	mov	eax, DWORD PTR _qtopline
	lea	eax, DWORD PTR [eax+edi*2]
; Line 1072
	cmp	esi, eax
	jne	SHORT $L85516
; Line 1073
	mov	DWORD PTR _qline, esi
; Line 1074
	call	_QuestlogEnter
$L85516:
	inc	edi
	cmp	edi, DWORD PTR _numqlines
	jl	SHORT $L85515
$L85517:
; Line 1078
	push	22					; 00000016H
	pop	eax
	pop	edi
	cmp	esi, eax
	pop	esi
	jne	SHORT $L85519
; Line 1079
	mov	DWORD PTR _qline, eax
; Line 1080
	jmp	_QuestlogEnter
$L85519:
; Line 1082
	ret	0
_QuestlogESC ENDP
_TEXT	ENDS
PUBLIC	@SetMultiQuest@16
; Function compile flags: /Ogsy
;	COMDAT @SetMultiQuest@16
_TEXT	SEGMENT
_l$ = 8
_v1$ = 12
@SetMultiQuest@16 PROC NEAR				; COMDAT
; _q$ = ecx
; _s$ = edx
; Line 1093
	lea	eax, DWORD PTR [ecx+ecx*2]
	push	ebx
	shl	eax, 3
	lea	ecx, DWORD PTR _quests[eax+2]
; Line 1094
	mov	bl, BYTE PTR [ecx]
	cmp	bl, 3
	je	SHORT $L85536
	push	esi
; Line 1095
	movzx	esi, bl
	cmp	edx, esi
	pop	esi
	jle	SHORT $L85534
; Line 1096
	mov	BYTE PTR [ecx], dl
$L85534:
; Line 1097
	mov	ecx, DWORD PTR _l$[esp]
	or	DWORD PTR _quests[eax+20], ecx
; Line 1099
	mov	ecx, DWORD PTR _v1$[esp]
	lea	eax, DWORD PTR _quests[eax+15]
	movzx	edx, BYTE PTR [eax]
	cmp	ecx, edx
	jle	SHORT $L85536
; Line 1100
	mov	BYTE PTR [eax], cl
$L85536:
	pop	ebx
; Line 1102
	ret	8
@SetMultiQuest@16 ENDP
_TEXT	ENDS
END
