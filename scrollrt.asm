; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/scrollrt.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_08IEFB@standing?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@COMN@walking?5?$CI1?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@BFDC@walking?5?$CI2?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@DJI@walking?5?$CI3?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09JEGK@attacking?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@BMJO@getting?5hit?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DDAK@dying?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@IOBO@attacking?5?$CIspecial?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DDIF@fading?5in?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@LNEK@fading?5out?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@HFKM@attacking?5?$CIranged?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OABK@standing?5?$CIspecial?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OOM@attacking?5?$CIspecial?5ranged?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PJOE@delaying?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08MNAF@charging?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06EMAO@stoned?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07OKNN@healing?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07EANI@talking?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@ODBG@attacking?5?$CImelee?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PCBE@blocking?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FOIO@casting?5a?5spell?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CIDC@changing?5levels?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08IBIM@quitting?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@PCBJ@C?3?2Src?2Diablo?2Source?2SCROLLRT?4CP@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _qmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ClearCursor
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawMissile@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawClippedMissile@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawDeadPlayer@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawPlayer@40
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawClippedPlayer@40
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawView@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawGame@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_lower@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_clipped_dungeon@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawClippedMonster@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawClippedObject@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_clipped_e_flag@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_lower_2@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_clipped_dungeon_2@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_clipped_e_flag_2@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_upper@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_dungeon@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawMonster@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawObject@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_e_flag@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawZoom@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ClearScreenBuffer
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @scrollrt_draw_game_screen@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _scrollrt_draw_cursor_back_buffer
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _scrollrt_draw_cursor_item
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawMain@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DoBlitScreen@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawAndBlit
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_szMonModeAssert
PUBLIC	_szPlrModeAssert
PUBLIC	??_C@_08IEFB@standing?$AA@			; `string'
PUBLIC	??_C@_0M@COMN@walking?5?$CI1?$CJ?$AA@		; `string'
PUBLIC	??_C@_0M@BFDC@walking?5?$CI2?$CJ?$AA@		; `string'
PUBLIC	??_C@_0M@DJI@walking?5?$CI3?$CJ?$AA@		; `string'
PUBLIC	??_C@_09JEGK@attacking?$AA@			; `string'
PUBLIC	??_C@_0M@BMJO@getting?5hit?$AA@			; `string'
PUBLIC	??_C@_05DDAK@dying?$AA@				; `string'
PUBLIC	??_C@_0BE@IOBO@attacking?5?$CIspecial?$CJ?$AA@	; `string'
PUBLIC	??_C@_09DDIF@fading?5in?$AA@			; `string'
PUBLIC	??_C@_0L@LNEK@fading?5out?$AA@			; `string'
PUBLIC	??_C@_0BD@HFKM@attacking?5?$CIranged?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BD@OABK@standing?5?$CIspecial?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BL@OOM@attacking?5?$CIspecial?5ranged?$CJ?$AA@ ; `string'
PUBLIC	??_C@_08PJOE@delaying?$AA@			; `string'
PUBLIC	??_C@_08MNAF@charging?$AA@			; `string'
PUBLIC	??_C@_06EMAO@stoned?$AA@			; `string'
PUBLIC	??_C@_07OKNN@healing?$AA@			; `string'
PUBLIC	??_C@_07EANI@talking?$AA@			; `string'
PUBLIC	??_C@_0BC@ODBG@attacking?5?$CImelee?$CJ?$AA@	; `string'
PUBLIC	??_C@_08PCBE@blocking?$AA@			; `string'
PUBLIC	??_C@_0BA@FOIO@casting?5a?5spell?$AA@		; `string'
PUBLIC	??_C@_0BA@CIDC@changing?5levels?$AA@		; `string'
PUBLIC	??_C@_08IBIM@quitting?$AA@			; `string'
_DATA	SEGMENT
COMM	_light_table_index:DWORD
COMM	_screen_y_times_768:DWORD:0400H
COMM	_gpBufEnd:DWORD
COMM	_level_cel_block:DWORD
COMM	_arch_draw_type:BYTE
COMM	_DDS_desc:BYTE:06cH
COMM	_cel_transparency_active:DWORD
COMM	_level_piece_id:DWORD
COMM	_DrawPlrProc:DWORD
COMM	_draw_monster_num:DWORD
COMM	_sgdwCursWdtOld:DWORD
COMM	_sgdwCursX:DWORD
COMM	_sgdwCursY:DWORD
COMM	_sgdwCursHgt:DWORD
COMM	_sgdwCursXOld:DWORD
COMM	_sgdwCursYOld:DWORD
COMM	_sgdwCursWdt:DWORD
COMM	_sgSaveBack:BYTE:02000H
COMM	_sgdwCursHgtOld:DWORD
_DATA	ENDS
;	COMDAT ??_C@_08IEFB@standing?$AA@
_DATA	SEGMENT
??_C@_08IEFB@standing?$AA@ DB 'standing', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@COMN@walking?5?$CI1?$CJ?$AA@
_DATA	SEGMENT
??_C@_0M@COMN@walking?5?$CI1?$CJ?$AA@ DB 'walking (1)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@BFDC@walking?5?$CI2?$CJ?$AA@
_DATA	SEGMENT
??_C@_0M@BFDC@walking?5?$CI2?$CJ?$AA@ DB 'walking (2)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@DJI@walking?5?$CI3?$CJ?$AA@
_DATA	SEGMENT
??_C@_0M@DJI@walking?5?$CI3?$CJ?$AA@ DB 'walking (3)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09JEGK@attacking?$AA@
_DATA	SEGMENT
??_C@_09JEGK@attacking?$AA@ DB 'attacking', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@BMJO@getting?5hit?$AA@
_DATA	SEGMENT
??_C@_0M@BMJO@getting?5hit?$AA@ DB 'getting hit', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05DDAK@dying?$AA@
_DATA	SEGMENT
??_C@_05DDAK@dying?$AA@ DB 'dying', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@IOBO@attacking?5?$CIspecial?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BE@IOBO@attacking?5?$CIspecial?$CJ?$AA@ DB 'attacking (special)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09DDIF@fading?5in?$AA@
_DATA	SEGMENT
??_C@_09DDIF@fading?5in?$AA@ DB 'fading in', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@LNEK@fading?5out?$AA@
_DATA	SEGMENT
??_C@_0L@LNEK@fading?5out?$AA@ DB 'fading out', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@HFKM@attacking?5?$CIranged?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BD@HFKM@attacking?5?$CIranged?$CJ?$AA@ DB 'attacking (ranged)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@OABK@standing?5?$CIspecial?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BD@OABK@standing?5?$CIspecial?$CJ?$AA@ DB 'standing (special)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@OOM@attacking?5?$CIspecial?5ranged?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BL@OOM@attacking?5?$CIspecial?5ranged?$CJ?$AA@ DB 'attacking (spec'
	DB	'ial ranged)', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PJOE@delaying?$AA@
_DATA	SEGMENT
??_C@_08PJOE@delaying?$AA@ DB 'delaying', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08MNAF@charging?$AA@
_DATA	SEGMENT
??_C@_08MNAF@charging?$AA@ DB 'charging', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06EMAO@stoned?$AA@
_DATA	SEGMENT
??_C@_06EMAO@stoned?$AA@ DB 'stoned', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07OKNN@healing?$AA@
_DATA	SEGMENT
??_C@_07OKNN@healing?$AA@ DB 'healing', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07EANI@talking?$AA@
_DATA	SEGMENT
??_C@_07EANI@talking?$AA@ DB 'talking', 00H		; `string'
_DATA	ENDS
_DATA	SEGMENT
_szMonModeAssert DD FLAT:??_C@_08IEFB@standing?$AA@
	DD	FLAT:??_C@_0M@COMN@walking?5?$CI1?$CJ?$AA@
	DD	FLAT:??_C@_0M@BFDC@walking?5?$CI2?$CJ?$AA@
	DD	FLAT:??_C@_0M@DJI@walking?5?$CI3?$CJ?$AA@
	DD	FLAT:??_C@_09JEGK@attacking?$AA@
	DD	FLAT:??_C@_0M@BMJO@getting?5hit?$AA@
	DD	FLAT:??_C@_05DDAK@dying?$AA@
	DD	FLAT:??_C@_0BE@IOBO@attacking?5?$CIspecial?$CJ?$AA@
	DD	FLAT:??_C@_09DDIF@fading?5in?$AA@
	DD	FLAT:??_C@_0L@LNEK@fading?5out?$AA@
	DD	FLAT:??_C@_0BD@HFKM@attacking?5?$CIranged?$CJ?$AA@
	DD	FLAT:??_C@_0BD@OABK@standing?5?$CIspecial?$CJ?$AA@
	DD	FLAT:??_C@_0BL@OOM@attacking?5?$CIspecial?5ranged?$CJ?$AA@
	DD	FLAT:??_C@_08PJOE@delaying?$AA@
	DD	FLAT:??_C@_08MNAF@charging?$AA@
	DD	FLAT:??_C@_06EMAO@stoned?$AA@
	DD	FLAT:??_C@_07OKNN@healing?$AA@
	DD	FLAT:??_C@_07EANI@talking?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0BC@ODBG@attacking?5?$CImelee?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BC@ODBG@attacking?5?$CImelee?$CJ?$AA@ DB 'attacking (melee)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PCBE@blocking?$AA@
_DATA	SEGMENT
??_C@_08PCBE@blocking?$AA@ DB 'blocking', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FOIO@casting?5a?5spell?$AA@
_DATA	SEGMENT
??_C@_0BA@FOIO@casting?5a?5spell?$AA@ DB 'casting a spell', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@CIDC@changing?5levels?$AA@
_DATA	SEGMENT
??_C@_0BA@CIDC@changing?5levels?$AA@ DB 'changing levels', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08IBIM@quitting?$AA@
_DATA	SEGMENT
??_C@_08IBIM@quitting?$AA@ DB 'quitting', 00H		; `string'
_DATA	ENDS
_DATA	SEGMENT
_szPlrModeAssert DD FLAT:??_C@_08IEFB@standing?$AA@
	DD	FLAT:??_C@_0M@COMN@walking?5?$CI1?$CJ?$AA@
	DD	FLAT:??_C@_0M@BFDC@walking?5?$CI2?$CJ?$AA@
	DD	FLAT:??_C@_0M@DJI@walking?5?$CI3?$CJ?$AA@
	DD	FLAT:??_C@_0BC@ODBG@attacking?5?$CImelee?$CJ?$AA@
	DD	FLAT:??_C@_0BD@HFKM@attacking?5?$CIranged?$CJ?$AA@
	DD	FLAT:??_C@_08PCBE@blocking?$AA@
	DD	FLAT:??_C@_0M@BMJO@getting?5hit?$AA@
	DD	FLAT:??_C@_05DDAK@dying?$AA@
	DD	FLAT:??_C@_0BA@FOIO@casting?5a?5spell?$AA@
	DD	FLAT:??_C@_0BA@CIDC@changing?5levels?$AA@
	DD	FLAT:??_C@_08IBIM@quitting?$AA@
_DATA	ENDS
PUBLIC	_ClearCursor
; Function compile flags: /Ogsy
;	COMDAT _ClearCursor
_TEXT	SEGMENT
_ClearCursor PROC NEAR					; COMDAT
; File Source/scrollrt.cpp
; Line 66
	and	DWORD PTR _sgdwCursWdt, 0
; Line 67
	and	DWORD PTR _sgdwCursWdtOld, 0
; Line 68
	ret	0
_ClearCursor ENDP
_TEXT	ENDS
PUBLIC	@DrawMissile@28
EXTRN	_dMissile:BYTE
EXTRN	_missileactive:BYTE
EXTRN	_missile:BYTE
EXTRN	_nummissiles:DWORD
EXTRN	@Cl2DecodeFrm1@28:NEAR
EXTRN	@Cl2DecodeFrm3@32:NEAR
EXTRN	@Cl2DecodeLightTbl@28:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DrawMissile@28
_TEXT	SEGMENT
_x$ = -8
_y$ = -12
_sx$ = 8
_sy$ = 12
_a5$ = 16
_a6$ = 20
_pre$ = 24
_i$ = -4
@DrawMissile@28 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _x$[ebp], ecx
; Line 77
	imul	ecx, 112				; 00000070H
	push	ebx
	mov	ebx, edx
	push	esi
	push	edi
	mov	al, BYTE PTR _dMissile[ecx+ebx]
	mov	DWORD PTR _y$[ebp], ebx
	cmp	al, -1
	jne	$L85047
; Line 78
	xor	eax, eax
	cmp	DWORD PTR _nummissiles, eax
	mov	DWORD PTR _i$[ebp], eax
	jle	$L85071
$L85048:
; Line 80
	mov	eax, DWORD PTR _missileactive[eax*4]
	cmp	eax, 125				; 0000007dH
	jge	$L85071
; Line 82
	imul	eax, 176				; 000000b0H
; Line 83
	mov	ecx, DWORD PTR _x$[ebp]
	add	eax, OFFSET FLAT:_missile
	cmp	DWORD PTR [eax+4], ecx
	jne	$L85049
	cmp	DWORD PTR [eax+8], ebx
	jne	$L85049
	mov	ecx, DWORD PTR [eax+104]
	cmp	ecx, DWORD PTR _pre$[ebp]
	jne	$L85049
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $L85049
; Line 84
	mov	edi, DWORD PTR [eax+64]
; Line 85
	test	edi, edi
	je	$L85071
; Line 89
	mov	edx, DWORD PTR [eax+92]
; Line 91
	cmp	edx, 1
	jl	$L85071
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, 50					; 00000032H
	ja	$L85071
	cmp	edx, ecx
	jg	$L85071
; Line 95
	mov	ecx, DWORD PTR [eax+12]
; Line 96
	mov	esi, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR [eax+80]
	add	esi, DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
; Line 97
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $L85058
; Line 98
	mov	bl, BYTE PTR [eax+108]
	add	bl, 3
	push	ebx
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+76]
	push	edx
	push	edi
	mov	edx, esi
	call	@Cl2DecodeFrm3@32
; Line 99
	mov	ebx, DWORD PTR _y$[ebp]
	jmp	SHORT $L85049
$L85058:
; Line 100
	push	DWORD PTR _a6$[ebp]
	cmp	DWORD PTR [eax+100], 0
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+76]
	push	edx
	mov	edx, esi
	push	edi
	je	SHORT $L85061
	call	@Cl2DecodeLightTbl@28
; Line 101
	jmp	SHORT $L85049
$L85061:
; Line 102
	call	@Cl2DecodeFrm1@28
$L85049:
; Line 78
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	cmp	eax, DWORD PTR _nummissiles
	mov	DWORD PTR _i$[ebp], eax
	jl	$L85048
; Line 91
	jmp	$L85071
$L85047:
; Line 106
	movsx	eax, al
	imul	eax, 176				; 000000b0H
	lea	eax, DWORD PTR _missile[eax-176]
; Line 107
	mov	ecx, DWORD PTR [eax+104]
	cmp	ecx, DWORD PTR _pre$[ebp]
	jne	SHORT $L85071
	xor	ebx, ebx
	cmp	DWORD PTR [eax+96], ebx
	je	SHORT $L85071
; Line 108
	mov	edi, DWORD PTR [eax+64]
; Line 109
	cmp	edi, ebx
	je	SHORT $L85071
; Line 113
	mov	edx, DWORD PTR [eax+92]
; Line 115
	cmp	edx, 1
	jl	SHORT $L85071
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, 50					; 00000032H
	ja	SHORT $L85071
	cmp	edx, ecx
	jg	SHORT $L85071
; Line 119
	mov	ecx, DWORD PTR [eax+12]
; Line 120
	mov	esi, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR [eax+80]
	add	esi, DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
; Line 121
	cmp	DWORD PTR [eax+108], ebx
	je	SHORT $L85072
; Line 122
	mov	bl, BYTE PTR [eax+108]
	add	bl, 3
	push	ebx
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+76]
	push	edx
	push	edi
	mov	edx, esi
	call	@Cl2DecodeFrm3@32
; Line 123
	jmp	SHORT $L85071
$L85072:
; Line 124
	push	DWORD PTR _a6$[ebp]
	cmp	DWORD PTR [eax+100], ebx
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+76]
	push	edx
	mov	edx, esi
	push	edi
	je	SHORT $L85075
	call	@Cl2DecodeLightTbl@28
; Line 125
	jmp	SHORT $L85071
$L85075:
; Line 126
	call	@Cl2DecodeFrm1@28
$L85071:
	pop	edi
	pop	esi
	pop	ebx
; Line 129
	leave
	ret	20					; 00000014H
@DrawMissile@28 ENDP
_TEXT	ENDS
PUBLIC	@DrawClippedMissile@28
EXTRN	@Cl2DecodeFrm4@28:NEAR
EXTRN	@Cl2DecodeFrm5@32:NEAR
EXTRN	@Cl2DecodeFrm6@28:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DrawClippedMissile@28
_TEXT	SEGMENT
_x$ = -8
_y$ = -12
_sx$ = 8
_sy$ = 12
_a5$ = 16
_a6$ = 20
_pre$ = 24
_i$ = -4
@DrawClippedMissile@28 PROC NEAR			; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _x$[ebp], ecx
; Line 138
	imul	ecx, 112				; 00000070H
	push	ebx
	mov	ebx, edx
	push	esi
	push	edi
	mov	al, BYTE PTR _dMissile[ecx+ebx]
	mov	DWORD PTR _y$[ebp], ebx
	cmp	al, -1
	jne	$L85101
; Line 139
	xor	eax, eax
	cmp	DWORD PTR _nummissiles, eax
	mov	DWORD PTR _i$[ebp], eax
	jle	$L85125
$L85102:
; Line 141
	mov	eax, DWORD PTR _missileactive[eax*4]
	cmp	eax, 125				; 0000007dH
	jge	$L85125
; Line 143
	imul	eax, 176				; 000000b0H
; Line 144
	mov	ecx, DWORD PTR _x$[ebp]
	add	eax, OFFSET FLAT:_missile
	cmp	DWORD PTR [eax+4], ecx
	jne	$L85103
	cmp	DWORD PTR [eax+8], ebx
	jne	$L85103
	mov	ecx, DWORD PTR [eax+104]
	cmp	ecx, DWORD PTR _pre$[ebp]
	jne	$L85103
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $L85103
; Line 145
	mov	edi, DWORD PTR [eax+64]
; Line 146
	test	edi, edi
	je	$L85125
; Line 150
	mov	edx, DWORD PTR [eax+92]
; Line 152
	cmp	edx, 1
	jl	$L85125
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, 50					; 00000032H
	ja	$L85125
	cmp	edx, ecx
	jg	$L85125
; Line 156
	mov	ecx, DWORD PTR [eax+12]
; Line 157
	mov	esi, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR [eax+80]
	add	esi, DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
; Line 158
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $L85112
; Line 159
	mov	bl, BYTE PTR [eax+108]
	add	bl, 3
	push	ebx
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+76]
	push	edx
	push	edi
	mov	edx, esi
	call	@Cl2DecodeFrm5@32
; Line 160
	mov	ebx, DWORD PTR _y$[ebp]
	jmp	SHORT $L85103
$L85112:
; Line 161
	push	DWORD PTR _a6$[ebp]
	cmp	DWORD PTR [eax+100], 0
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+76]
	push	edx
	mov	edx, esi
	push	edi
	je	SHORT $L85115
	call	@Cl2DecodeFrm6@28
; Line 162
	jmp	SHORT $L85103
$L85115:
; Line 163
	call	@Cl2DecodeFrm4@28
$L85103:
; Line 139
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	cmp	eax, DWORD PTR _nummissiles
	mov	DWORD PTR _i$[ebp], eax
	jl	$L85102
; Line 152
	jmp	$L85125
$L85101:
; Line 167
	movsx	eax, al
	imul	eax, 176				; 000000b0H
	lea	eax, DWORD PTR _missile[eax-176]
; Line 168
	mov	ecx, DWORD PTR [eax+104]
	cmp	ecx, DWORD PTR _pre$[ebp]
	jne	SHORT $L85125
	xor	ebx, ebx
	cmp	DWORD PTR [eax+96], ebx
	je	SHORT $L85125
; Line 169
	mov	edi, DWORD PTR [eax+64]
; Line 170
	cmp	edi, ebx
	je	SHORT $L85125
; Line 174
	mov	edx, DWORD PTR [eax+92]
; Line 176
	cmp	edx, 1
	jl	SHORT $L85125
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, 50					; 00000032H
	ja	SHORT $L85125
	cmp	edx, ecx
	jg	SHORT $L85125
; Line 180
	mov	ecx, DWORD PTR [eax+12]
; Line 181
	mov	esi, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR [eax+80]
	add	esi, DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
; Line 182
	cmp	DWORD PTR [eax+108], ebx
	je	SHORT $L85126
; Line 183
	mov	bl, BYTE PTR [eax+108]
	add	bl, 3
	push	ebx
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+76]
	push	edx
	push	edi
	mov	edx, esi
	call	@Cl2DecodeFrm5@32
; Line 184
	jmp	SHORT $L85125
$L85126:
; Line 185
	push	DWORD PTR _a6$[ebp]
	cmp	DWORD PTR [eax+100], ebx
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+76]
	push	edx
	mov	edx, esi
	push	edi
	je	SHORT $L85129
	call	@Cl2DecodeFrm6@28
; Line 186
	jmp	SHORT $L85125
$L85129:
; Line 187
	call	@Cl2DecodeFrm4@28
$L85125:
	pop	edi
	pop	esi
	pop	ebx
; Line 190
	leave
	ret	20					; 00000014H
@DrawClippedMissile@28 ENDP
_TEXT	ENDS
PUBLIC	@DrawDeadPlayer@28
PUBLIC	@DrawPlayer@40
PUBLIC	@DrawClippedPlayer@40
EXTRN	_dFlags:BYTE
EXTRN	_plr:BYTE
EXTRN	_currlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT @DrawDeadPlayer@28
_TEXT	SEGMENT
_x$ = -4
_sx$ = 8
_sy$ = 12
_a5$ = 16
_a6$ = 20
_clipped$ = 24
_i$ = 24
@DrawDeadPlayer@28 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 193
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 199
	cmp	DWORD PTR _clipped$[ebp], 0
	push	ebx
	push	esi
	push	edi
	mov	ebx, edx
	mov	DWORD PTR _x$[ebp], ecx
; Line 200
	mov	DWORD PTR _DrawPlrProc, OFFSET FLAT:@DrawClippedPlayer@40
	jne	SHORT $L85156
; Line 202
	mov	DWORD PTR _DrawPlrProc, OFFSET FLAT:@DrawPlayer@40
$L85156:
; Line 204
	imul	ecx, 112				; 00000070H
	mov	esi, OFFSET FLAT:_plr+408
	lea	edi, DWORD PTR _dFlags[ecx+ebx]
	and	BYTE PTR [edi], -5			; fffffffbH
; Line 206
	and	DWORD PTR _i$[ebp], 0
$L85157:
; Line 208
	cmp	BYTE PTR [esi-379], 0
	je	SHORT $L85158
	cmp	DWORD PTR [esi], 0
	jne	SHORT $L85158
	movzx	eax, BYTE PTR _currlevel
	cmp	DWORD PTR [esi-356], eax
	jne	SHORT $L85158
	mov	eax, DWORD PTR _x$[ebp]
	cmp	DWORD PTR [esi-352], eax
	jne	SHORT $L85158
	cmp	DWORD PTR [esi-348], ebx
	jne	SHORT $L85158
; Line 209
	mov	eax, DWORD PTR [esi-284]
; Line 210
	test	eax, eax
	je	SHORT $L86750
; Line 214
	mov	ecx, DWORD PTR [esi-268]
; Line 216
	cmp	ecx, 1
	jl	SHORT $L86750
	mov	edx, DWORD PTR [eax]
	cmp	edx, 50					; 00000032H
	ja	SHORT $L86750
	cmp	ecx, edx
	jg	SHORT $L86750
; Line 223
	push	DWORD PTR _a6$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	or	BYTE PTR [edi], 4
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [esi-264]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [esi-308]
	mov	ecx, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _sy$[ebp]
	push	eax
	mov	eax, DWORD PTR [esi-312]
	sub	eax, DWORD PTR [esi-260]
	add	eax, DWORD PTR _sx$[ebp]
	push	eax
	push	ebx
	call	DWORD PTR _DrawPlrProc
$L85158:
	inc	DWORD PTR _i$[ebp]
	add	esi, 21720				; 000054d8H
	cmp	esi, OFFSET FLAT:_plr+87288
	jl	$L85157
$L86750:
	pop	edi
	pop	esi
	pop	ebx
; Line 226
	leave
	ret	20					; 00000014H
@DrawDeadPlayer@28 ENDP
_TEXT	ENDS
EXTRN	_setlevel:BYTE
EXTRN	_pcursplr:BYTE
EXTRN	_myplr:DWORD
EXTRN	@Cl2DecodeFrm2@32:NEAR
EXTRN	_misfiledata:BYTE
; Function compile flags: /Ogsy
;	COMDAT @DrawPlayer@40
_TEXT	SEGMENT
_pnum$ = -4
_y$ = 8
_px$ = 12
_py$ = 16
_pCelBuff$ = 20
_nCel$ = 24
_nWidth$ = 28
_a9$ = 32
_a10$ = 36
_l$ = 20
@DrawPlayer@40 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _x$ = edx
; Line 229
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 233
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _y$[ebp]
	push	ebx
	push	esi
	push	edi
	lea	edx, DWORD PTR _dFlags[edx+eax]
	mov	eax, DWORD PTR _myplr
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	DWORD PTR 8+[ebp], edx
	test	BYTE PTR [edx], 64			; 00000040H
	jne	SHORT $L85191
	mov	ecx, eax
	imul	ecx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ecx+464], 0
	jne	SHORT $L85191
	cmp	BYTE PTR _setlevel, 0
	jne	$L85207
	cmp	BYTE PTR _currlevel, 0
	jne	$L85207
$L85191:
; Line 234
	mov	ecx, DWORD PTR _pCelBuff$[ebp]
	test	ecx, ecx
	je	$L85207
; Line 239
	cmp	DWORD PTR _nCel$[ebp], 1
	jl	$L85207
	mov	esi, DWORD PTR [ecx]
	cmp	esi, 50					; 00000032H
	ja	$L85207
	cmp	DWORD PTR _nCel$[ebp], esi
	jg	$L85207
; Line 255
	movsx	esi, BYTE PTR _pcursplr
	cmp	DWORD PTR _pnum$[ebp], esi
	mov	esi, DWORD PTR _a10$[ebp]
	mov	edi, DWORD PTR _a9$[ebp]
	mov	ebx, DWORD PTR _py$[ebp]
	jne	SHORT $L85197
; Line 256
	push	esi
	push	edi
	push	DWORD PTR _nWidth$[ebp]
	mov	edx, DWORD PTR _px$[ebp]
	push	DWORD PTR _nCel$[ebp]
	push	ecx
	push	ebx
	mov	cl, -91					; ffffffa5H
	call	@Cl2DecodeFrm2@32
	mov	eax, DWORD PTR _myplr
	mov	ecx, DWORD PTR _pCelBuff$[ebp]
	mov	edx, DWORD PTR 8+[ebp]
$L85197:
; Line 257
	cmp	DWORD PTR _pnum$[ebp], eax
	jne	SHORT $L85199
; Line 258
	push	esi
	push	edi
	push	DWORD PTR _nWidth$[ebp]
	mov	edx, ebx
	push	DWORD PTR _nCel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _px$[ebp]
	call	@Cl2DecodeFrm1@28
; Line 259
	mov	eax, DWORD PTR _pnum$[ebp]
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21628], 0
	je	$L85207
; Line 267
	mov	ecx, DWORD PTR _plr[eax+148]
	push	esi
	sub	ecx, DWORD PTR _misfiledata+2296
	push	edi
	push	DWORD PTR _misfiledata+2232
	mov	edx, ebx
	add	ecx, DWORD PTR _px$[ebp]
	push	1
	push	DWORD PTR _misfiledata+2136
	call	@Cl2DecodeFrm1@28
; Line 268
	jmp	$L85207
$L85199:
	test	BYTE PTR [edx], 64			; 00000040H
	je	$L85205
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+464], 0
	mov	eax, DWORD PTR _light_table_index
	je	SHORT $L85204
	cmp	eax, 8
	jg	SHORT $L85205
$L85204:
; Line 282
	cmp	eax, 5
	mov	DWORD PTR _l$[ebp], eax
	jge	SHORT $L85210
; Line 283
	and	DWORD PTR _light_table_index, 0
; Line 284
	jmp	SHORT $L85211
$L85210:
; Line 285
	sub	eax, 5
	mov	DWORD PTR _light_table_index, eax
$L85211:
; Line 286
	push	esi
	push	edi
	push	DWORD PTR _nWidth$[ebp]
	mov	edx, ebx
	push	DWORD PTR _nCel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _px$[ebp]
	call	@Cl2DecodeLightTbl@28
; Line 287
	mov	eax, DWORD PTR _pnum$[ebp]
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21628], 0
	je	SHORT $L85213
; Line 295
	mov	ecx, DWORD PTR _plr[eax+148]
	push	esi
	sub	ecx, DWORD PTR _misfiledata+2296
	push	edi
	push	DWORD PTR _misfiledata+2232
	mov	edx, ebx
	add	ecx, DWORD PTR _px$[ebp]
	push	1
	push	DWORD PTR _misfiledata+2136
	call	@Cl2DecodeLightTbl@28
$L85213:
; Line 296
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR _light_table_index, eax
	jmp	SHORT $L85207
$L85205:
; Line 269
	push	1
	push	esi
	push	edi
	mov	edx, ebx
	push	DWORD PTR _nWidth$[ebp]
	push	DWORD PTR _nCel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _px$[ebp]
	call	@Cl2DecodeFrm3@32
; Line 270
	mov	eax, DWORD PTR _pnum$[ebp]
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21628], 0
	je	SHORT $L85207
; Line 279
	mov	ecx, DWORD PTR _plr[eax+148]
	push	1
	sub	ecx, DWORD PTR _misfiledata+2296
	push	esi
	push	edi
	mov	edx, ebx
	push	DWORD PTR _misfiledata+2232
	add	ecx, DWORD PTR _px$[ebp]
	push	1
	push	DWORD PTR _misfiledata+2136
	call	@Cl2DecodeFrm3@32
$L85207:
	pop	edi
	pop	esi
	pop	ebx
; Line 299
	leave
	ret	32					; 00000020H
@DrawPlayer@40 ENDP
_TEXT	ENDS
EXTRN	@Cl2DecodeClrHL@32:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DrawClippedPlayer@40
_TEXT	SEGMENT
_pnum$ = -4
_y$ = 8
_px$ = 12
_py$ = 16
_pCelBuff$ = 20
_nCel$ = 24
_nWidth$ = 28
_a9$ = 32
_a10$ = 36
_l$ = 20
@DrawClippedPlayer@40 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _x$ = edx
; Line 305
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 309
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _y$[ebp]
	push	ebx
	push	esi
	push	edi
	lea	edx, DWORD PTR _dFlags[edx+eax]
	mov	eax, DWORD PTR _myplr
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	DWORD PTR 8+[ebp], edx
	test	BYTE PTR [edx], 64			; 00000040H
	jne	SHORT $L85239
	mov	ecx, eax
	imul	ecx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ecx+464], 0
	je	$L85255
$L85239:
; Line 310
	mov	ecx, DWORD PTR _pCelBuff$[ebp]
	test	ecx, ecx
	je	$L85255
; Line 315
	cmp	DWORD PTR _nCel$[ebp], 1
	jl	$L85255
	mov	esi, DWORD PTR [ecx]
	cmp	esi, 50					; 00000032H
	ja	$L85255
	cmp	DWORD PTR _nCel$[ebp], esi
	jg	$L85255
; Line 331
	movsx	esi, BYTE PTR _pcursplr
	cmp	DWORD PTR _pnum$[ebp], esi
	mov	esi, DWORD PTR _a10$[ebp]
	mov	edi, DWORD PTR _a9$[ebp]
	mov	ebx, DWORD PTR _py$[ebp]
	jne	SHORT $L85245
; Line 332
	push	esi
	push	edi
	push	DWORD PTR _nWidth$[ebp]
	mov	edx, DWORD PTR _px$[ebp]
	push	DWORD PTR _nCel$[ebp]
	push	ecx
	push	ebx
	mov	cl, -91					; ffffffa5H
	call	@Cl2DecodeClrHL@32
	mov	eax, DWORD PTR _myplr
	mov	ecx, DWORD PTR _pCelBuff$[ebp]
	mov	edx, DWORD PTR 8+[ebp]
$L85245:
; Line 333
	cmp	DWORD PTR _pnum$[ebp], eax
	jne	SHORT $L85247
; Line 334
	push	esi
	push	edi
	push	DWORD PTR _nWidth$[ebp]
	mov	edx, ebx
	push	DWORD PTR _nCel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _px$[ebp]
	call	@Cl2DecodeFrm4@28
; Line 335
	mov	eax, DWORD PTR _pnum$[ebp]
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21628], 0
	je	$L85255
; Line 343
	mov	ecx, DWORD PTR _plr[eax+148]
	push	esi
	sub	ecx, DWORD PTR _misfiledata+2296
	push	edi
	push	DWORD PTR _misfiledata+2232
	mov	edx, ebx
	add	ecx, DWORD PTR _px$[ebp]
	push	1
	push	DWORD PTR _misfiledata+2136
	call	@Cl2DecodeFrm4@28
; Line 344
	jmp	$L85255
$L85247:
	test	BYTE PTR [edx], 64			; 00000040H
	je	$L85253
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+464], 0
	mov	eax, DWORD PTR _light_table_index
	je	SHORT $L85252
	cmp	eax, 8
	jg	SHORT $L85253
$L85252:
; Line 358
	cmp	eax, 5
	mov	DWORD PTR _l$[ebp], eax
	jge	SHORT $L85258
; Line 359
	and	DWORD PTR _light_table_index, 0
; Line 360
	jmp	SHORT $L85259
$L85258:
; Line 361
	sub	eax, 5
	mov	DWORD PTR _light_table_index, eax
$L85259:
; Line 362
	push	esi
	push	edi
	push	DWORD PTR _nWidth$[ebp]
	mov	edx, ebx
	push	DWORD PTR _nCel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _px$[ebp]
	call	@Cl2DecodeFrm6@28
; Line 363
	mov	eax, DWORD PTR _pnum$[ebp]
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21628], 0
	je	SHORT $L85261
; Line 371
	mov	ecx, DWORD PTR _plr[eax+148]
	push	esi
	sub	ecx, DWORD PTR _misfiledata+2296
	push	edi
	push	DWORD PTR _misfiledata+2232
	mov	edx, ebx
	add	ecx, DWORD PTR _px$[ebp]
	push	1
	push	DWORD PTR _misfiledata+2136
	call	@Cl2DecodeFrm6@28
$L85261:
; Line 372
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR _light_table_index, eax
	jmp	SHORT $L85255
$L85253:
; Line 345
	push	1
	push	esi
	push	edi
	mov	edx, ebx
	push	DWORD PTR _nWidth$[ebp]
	push	DWORD PTR _nCel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _px$[ebp]
	call	@Cl2DecodeFrm5@32
; Line 346
	mov	eax, DWORD PTR _pnum$[ebp]
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21628], 0
	je	SHORT $L85255
; Line 355
	mov	ecx, DWORD PTR _plr[eax+148]
	push	1
	sub	ecx, DWORD PTR _misfiledata+2296
	push	esi
	push	edi
	mov	edx, ebx
	push	DWORD PTR _misfiledata+2232
	add	ecx, DWORD PTR _px$[ebp]
	push	1
	push	DWORD PTR _misfiledata+2136
	call	@Cl2DecodeFrm5@32
$L85255:
	pop	edi
	pop	esi
	pop	ebx
; Line 375
	leave
	ret	32					; 00000020H
@DrawClippedPlayer@40 ENDP
_TEXT	ENDS
PUBLIC	@DrawView@8
PUBLIC	@DrawGame@8
PUBLIC	@DrawZoom@8
EXTRN	_DrawInfoBox:NEAR
EXTRN	_DrawChr:NEAR
EXTRN	_DrawLevelUpIcon:NEAR
EXTRN	_DrawDurIcon:NEAR
EXTRN	_RedBack:NEAR
EXTRN	_DrawSpellBook:NEAR
EXTRN	@DrawGoldSplit@4:NEAR
EXTRN	_DrawPlrMsg:NEAR
EXTRN	_gmenu_draw_pause:NEAR
EXTRN	_gmenu_draw:NEAR
EXTRN	_questlog:DWORD
EXTRN	_zoomflag:DWORD
EXTRN	_PauseMode:DWORD
EXTRN	_helpflag:DWORD
EXTRN	_DrawHelp:NEAR
EXTRN	_DrawQuestLog:NEAR
EXTRN	_doom_draw:NEAR
EXTRN	_invflag:DWORD
EXTRN	_DrawInv:NEAR
EXTRN	_qtextflag:BYTE
EXTRN	_DrawQText:NEAR
EXTRN	_uitemflag:DWORD
EXTRN	_deathflag:DWORD
EXTRN	_automapflag:DWORD
EXTRN	_DrawAutomap:NEAR
EXTRN	_dropGoldFlag:DWORD
EXTRN	_msgflag:BYTE
EXTRN	_dropGoldValue:DWORD
EXTRN	_DrawDiabloMsg:NEAR
EXTRN	_sbookflag:DWORD
EXTRN	_chrflag:DWORD
EXTRN	_spselflag:DWORD
EXTRN	_DrawSpellList:NEAR
EXTRN	_DrawUniqueInfo:NEAR
EXTRN	_DrawLifeFlask:NEAR
EXTRN	_DrawManaFlask:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DrawView@8
_TEXT	SEGMENT
@DrawView@8 PROC NEAR					; COMDAT
; _StartX$ = ecx
; _StartY$ = edx
; Line 380
	push	ebx
; Line 381
	xor	ebx, ebx
	cmp	DWORD PTR _zoomflag, ebx
	je	SHORT $L85268
; Line 382
	call	@DrawGame@8
; Line 383
	jmp	SHORT $L85269
$L85268:
; Line 384
	call	@DrawZoom@8
$L85269:
; Line 386
	cmp	DWORD PTR _automapflag, ebx
	je	SHORT $L85270
; Line 387
	call	_DrawAutomap
$L85270:
; Line 389
	cmp	DWORD PTR _invflag, ebx
	je	SHORT $L85271
; Line 390
	call	_DrawInv
; Line 391
	jmp	SHORT $L85273
$L85271:
	cmp	DWORD PTR _sbookflag, ebx
	je	SHORT $L85273
; Line 392
	call	_DrawSpellBook
$L85273:
; Line 394
	call	_DrawDurIcon
; Line 396
	cmp	DWORD PTR _chrflag, ebx
	je	SHORT $L85274
; Line 397
	call	_DrawChr
; Line 398
	jmp	SHORT $L85278
$L85274:
	cmp	DWORD PTR _questlog, ebx
	je	SHORT $L85276
; Line 399
	call	_DrawQuestLog
; Line 400
	jmp	SHORT $L85278
$L85276:
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+388], ebx
	je	SHORT $L85278
	cmp	DWORD PTR _spselflag, ebx
	jne	SHORT $L85278
; Line 401
	call	_DrawLevelUpIcon
$L85278:
; Line 403
	cmp	DWORD PTR _uitemflag, ebx
	je	SHORT $L85279
; Line 404
	call	_DrawUniqueInfo
$L85279:
; Line 405
	cmp	BYTE PTR _qtextflag, bl
	je	SHORT $L85280
; Line 406
	call	_DrawQText
$L85280:
; Line 407
	cmp	DWORD PTR _spselflag, ebx
	je	SHORT $L85281
; Line 408
	call	_DrawSpellList
$L85281:
; Line 409
	cmp	DWORD PTR _dropGoldFlag, ebx
	je	SHORT $L85282
; Line 410
	mov	ecx, DWORD PTR _dropGoldValue
	call	@DrawGoldSplit@4
$L85282:
; Line 411
	cmp	DWORD PTR _helpflag, ebx
	je	SHORT $L85283
; Line 412
	call	_DrawHelp
$L85283:
; Line 413
	cmp	BYTE PTR _msgflag, bl
	je	SHORT $L85284
; Line 414
	call	_DrawDiabloMsg
$L85284:
; Line 416
	cmp	DWORD PTR _deathflag, ebx
	je	SHORT $L85285
; Line 417
	call	_RedBack
; Line 418
	jmp	SHORT $L85287
$L85285:
	cmp	DWORD PTR _PauseMode, ebx
	je	SHORT $L85287
; Line 419
	call	_gmenu_draw_pause
$L85287:
; Line 421
	call	_DrawPlrMsg
; Line 422
	call	_gmenu_draw
; Line 423
	call	_doom_draw
; Line 424
	call	_DrawInfoBox
; Line 425
	call	_DrawLifeFlask
	pop	ebx
; Line 426
	jmp	_DrawManaFlask
@DrawView@8 ENDP
_TEXT	ENDS
PUBLIC	@scrollrt_draw_lower@24
PUBLIC	@scrollrt_draw_lower_2@28
PUBLIC	@scrollrt_draw_upper@28
EXTRN	_scr_pix_height:DWORD
EXTRN	_gpBuffer:DWORD
EXTRN	_ScrollInfo:BYTE
EXTRN	_dword_5C2FF8:DWORD
EXTRN	_dword_5C2FFC:DWORD
EXTRN	_scr_pix_width:DWORD
; Function compile flags: /Ogsy
;	COMDAT @DrawGame@8
_TEXT	SEGMENT
_v3$ = -4
_v11$ = -12
_a6$ = -16
_a6a$ = -16
_a5$ = -8
@DrawGame@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 438
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 455
	mov	eax, DWORD PTR _ScrollInfo
	push	ebx
	push	esi
	push	edi
; Line 456
	add	ecx, -10				; fffffff6H
; Line 464
	cmp	DWORD PTR _chrflag, 0
	push	10					; 0000000aH
	mov	DWORD PTR _v3$[ebp], ecx
	mov	ecx, DWORD PTR _ScrollInfo+4
	pop	edi
	mov	DWORD PTR _dword_5C2FF8, edi
	mov	DWORD PTR _a5$[ebp], edi
	lea	esi, DWORD PTR [eax+64]
	lea	ebx, DWORD PTR [edx-1]
	lea	edi, DWORD PTR [ecx+175]
	mov	DWORD PTR _scr_pix_width, 640		; 00000280H
	mov	DWORD PTR _scr_pix_height, 352		; 00000160H
	mov	DWORD PTR _dword_5C2FFC, 11		; 0000000bH
	mov	DWORD PTR _v11$[ebp], 8
	jne	SHORT $L85308
	cmp	DWORD PTR _questlog, 0
	je	SHORT $L85307
$L85308:
; Line 466
	add	DWORD PTR _v3$[ebp], 2
	lea	ebx, DWORD PTR [edx-3]
; Line 467
	lea	esi, DWORD PTR [eax+352]
; Line 468
	mov	DWORD PTR _a5$[ebp], 6
$L85307:
; Line 470
	xor	edx, edx
	cmp	DWORD PTR _invflag, edx
	jne	SHORT $L85310
	cmp	DWORD PTR _sbookflag, edx
	je	SHORT $L85309
$L85310:
; Line 472
	add	DWORD PTR _v3$[ebp], 2
	dec	ebx
	dec	ebx
; Line 473
	sub	esi, 32					; 00000020H
; Line 474
	mov	DWORD PTR _a5$[ebp], 6
$L85309:
; Line 476
	mov	eax, DWORD PTR _ScrollInfo+16
	dec	eax
	cmp	eax, 7
	ja	SHORT $L85327
	jmp	DWORD PTR $L86779[eax*4]
$L85317:
; Line 480
	inc	DWORD PTR _a5$[ebp]
$LABEL_9$85316:
; Line 483
	dec	DWORD PTR _v3$[ebp]
; Line 484
	dec	ebx
; Line 485
	jmp	SHORT $L86778
$L85321:
; Line 489
	mov	DWORD PTR _v11$[ebp], 9
; Line 490
	jmp	SHORT $LABEL_13$85320
$L85323:
; Line 494
	mov	DWORD PTR _v11$[ebp], 9
$LABEL_12$85324:
; Line 498
	sub	esi, 64					; 00000040H
; Line 499
	dec	DWORD PTR _v3$[ebp]
; Line 500
	inc	ebx
$LABEL_13$85320:
; Line 502
	inc	DWORD PTR _a5$[ebp]
; Line 503
	jmp	SHORT $L85327
$L85326:
; Line 507
	sub	DWORD PTR _v3$[ebp], 2
	sub	esi, 64					; 00000040H
; Line 508
	inc	DWORD PTR _a5$[ebp]
$L86778:
; Line 506
	lea	edi, DWORD PTR [ecx+143]
$LABEL_15$85318:
; Line 510
	mov	DWORD PTR _v11$[ebp], 9
$L85327:
; Line 516
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _screen_y_times_768+640
	add	ecx, eax
	mov	DWORD PTR _a6$[ebp], edx
	mov	DWORD PTR _gpBufEnd, ecx
$L85329:
; Line 518
	push	0
	mov	ecx, DWORD PTR _v3$[ebp]
	push	DWORD PTR _a6$[ebp]
	mov	edx, ebx
	inc	ebx
	push	DWORD PTR _a5$[ebp]
	push	edi
	push	esi
	call	@scrollrt_draw_upper@28
; Line 521
	mov	ecx, DWORD PTR _v3$[ebp]
	add	edi, 16					; 00000010H
	push	1
	add	esi, -32				; ffffffe0H
	push	DWORD PTR _a6$[ebp]
	inc	DWORD PTR _v3$[ebp]
	mov	edx, ebx
	push	DWORD PTR _a5$[ebp]
	push	edi
	push	esi
	call	@scrollrt_draw_upper@28
; Line 522
	add	esi, 32					; 00000020H
; Line 523
	add	edi, 16					; 00000010H
; Line 524
	inc	DWORD PTR _a6$[ebp]
; Line 525
	cmp	DWORD PTR _a6$[ebp], 4
	jl	SHORT $L85329
; Line 526
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _screen_y_times_768+2048
	add	ecx, eax
; Line 527
	cmp	DWORD PTR _v11$[ebp], 0
	mov	DWORD PTR _gpBufEnd, ecx
	jle	SHORT $L85336
$L85334:
; Line 529
	mov	ecx, DWORD PTR _v3$[ebp]
	push	0
	push	DWORD PTR _a5$[ebp]
	mov	edx, ebx
	inc	ebx
	push	edi
	push	esi
	call	@scrollrt_draw_lower@24
; Line 532
	mov	ecx, DWORD PTR _v3$[ebp]
	add	edi, 16					; 00000010H
	push	1
	add	esi, -32				; ffffffe0H
	push	DWORD PTR _a5$[ebp]
	inc	DWORD PTR _v3$[ebp]
	mov	edx, ebx
	push	edi
	push	esi
	call	@scrollrt_draw_lower@24
; Line 533
	add	esi, 32					; 00000020H
; Line 534
	add	edi, 16					; 00000010H
; Line 535
	dec	DWORD PTR _v11$[ebp]
; Line 536
	jne	SHORT $L85334
$L85336:
; Line 538
	and	BYTE PTR _arch_draw_type, 0
; Line 539
	and	DWORD PTR _a6a$[ebp], 0
$L85337:
; Line 541
	push	0
	mov	ecx, DWORD PTR _v3$[ebp]
	push	DWORD PTR _a6a$[ebp]
	mov	edx, ebx
	inc	ebx
	push	DWORD PTR _a5$[ebp]
	push	edi
	push	esi
	call	@scrollrt_draw_lower_2@28
; Line 544
	mov	ecx, DWORD PTR _v3$[ebp]
	add	edi, 16					; 00000010H
	push	1
	add	esi, -32				; ffffffe0H
	push	DWORD PTR _a6a$[ebp]
	inc	DWORD PTR _v3$[ebp]
	mov	edx, ebx
	push	DWORD PTR _a5$[ebp]
	push	edi
	push	esi
	call	@scrollrt_draw_lower_2@28
; Line 545
	add	esi, 32					; 00000020H
; Line 546
	add	edi, 16					; 00000010H
; Line 547
	inc	DWORD PTR _a6a$[ebp]
; Line 548
	cmp	DWORD PTR _a6a$[ebp], 4
	jl	SHORT $L85337
	pop	edi
	pop	esi
	pop	ebx
; Line 549
	leave
	ret	0
$L86779:
	DD	$LABEL_9$85316
	DD	$L85317
	DD	$LABEL_13$85320
	DD	$L85321
	DD	$LABEL_15$85318
	DD	$L85323
	DD	$LABEL_12$85324
	DD	$L85326
@DrawGame@8 ENDP
_TEXT	ENDS
PUBLIC	@scrollrt_draw_clipped_dungeon@24
EXTRN	@gendung_get_dpiece_num_from_coord@8:NEAR
EXTRN	@drawLowerScreen@4:NEAR
EXTRN	@world_draw_black_tile@4:NEAR
EXTRN	_nTransTable:BYTE
EXTRN	_dpiece_defs_map_1:BYTE
EXTRN	_dword_5A5594:DWORD
EXTRN	_dPiece:BYTE
EXTRN	_dTransVal:BYTE
EXTRN	_dung_map:BYTE
EXTRN	_leveltype:BYTE
EXTRN	_TransList:BYTE
; Function compile flags: /Ogsy
;	COMDAT @scrollrt_draw_lower@24
_TEXT	SEGMENT
_sx$ = 8
_sy$ = 12
_a5$ = 16
_some_flag$ = 20
_v46$ = -20
_v47$ = -24
_sya$ = -4
_sxa$ = -8
_i$ = -12
_x$ = -16
_y$ = -20
@scrollrt_draw_lower@24 PROC NEAR			; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 560
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	ebx, ecx
	mov	DWORD PTR _y$[ebp], edi
	mov	DWORD PTR _x$[ebp], ebx
; Line 610
	mov	DWORD PTR _sya$[ebp], edi
; Line 611
	mov	DWORD PTR _sxa$[ebp], ebx
; Line 612
	call	@gendung_get_dpiece_num_from_coord@8
	mov	esi, eax
	shl	esi, 5
	add	esi, OFFSET FLAT:_dpiece_defs_map_1
; Line 613
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	$LABEL_23$85418
; Line 614
	cmp	edi, 112				; 00000070H
	jae	$LABEL_21$85416
	cmp	ebx, 112				; 00000070H
	jae	$LABEL_21$85416
; Line 616
	mov	eax, ebx
	imul	eax, 112				; 00000070H
	add	eax, edi
; Line 617
	movsx	edx, BYTE PTR _dTransVal[eax]
	mov	ecx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _light_table_index, edx
; Line 619
	test	ecx, ecx
	mov	DWORD PTR _level_piece_id, ecx
	je	$L85403
; Line 623
	movsx	eax, BYTE PTR _dung_map[eax]
	movzx	ecx, BYTE PTR _nTransTable[ecx]
	movzx	eax, BYTE PTR _TransList[eax]
	and	eax, ecx
; Line 626
	mov	edx, DWORD PTR _sx$[ebp]
	mov	DWORD PTR _cel_transparency_active, eax
	mov	eax, DWORD PTR _sy$[ebp]
	movzx	ecx, WORD PTR [esi+2]
	lea	edi, DWORD PTR _screen_y_times_768[eax*4]
	mov	BYTE PTR _arch_draw_type, 2
	mov	DWORD PTR _level_cel_block, ecx
	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR _gpBuffer
; Line 627
	test	ecx, ecx
	lea	ebx, DWORD PTR [eax+edx+32]
	je	SHORT $L85407
; Line 628
	mov	ecx, ebx
	call	@drawLowerScreen@4
$L85407:
; Line 629
	movzx	eax, WORD PTR [esi+6]
; Line 630
	and	BYTE PTR _arch_draw_type, 0
; Line 631
	add	ebx, -24576				; ffffa000H
; Line 633
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85410
; Line 634
	mov	ecx, ebx
	call	@drawLowerScreen@4
$L85410:
; Line 636
	movzx	eax, WORD PTR [esi+10]
	add	ebx, -24576				; ffffa000H
	mov	DWORD PTR _level_cel_block, eax
; Line 637
	test	eax, eax
	je	SHORT $L85411
; Line 638
	mov	ecx, ebx
	call	@drawLowerScreen@4
$L85411:
; Line 640
	movzx	eax, WORD PTR [esi+14]
	add	ebx, -24576				; ffffa000H
	mov	DWORD PTR _level_cel_block, eax
; Line 641
	test	eax, eax
	je	SHORT $L85412
; Line 642
	mov	ecx, ebx
	call	@drawLowerScreen@4
$L85412:
; Line 644
	movzx	eax, WORD PTR [esi+18]
	add	ebx, -24576				; ffffa000H
	mov	DWORD PTR _level_cel_block, eax
; Line 645
	test	eax, eax
	je	SHORT $L85413
; Line 646
	mov	ecx, ebx
	call	@drawLowerScreen@4
$L85413:
; Line 648
	mov	ax, WORD PTR [esi+22]
	movzx	ecx, ax
; Line 649
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85414
	cmp	BYTE PTR _leveltype, 4
	jne	SHORT $L85414
; Line 650
	lea	ecx, DWORD PTR [ebx-24576]
	call	@drawLowerScreen@4
$L85414:
; Line 652
	mov	ecx, DWORD PTR [edi]
	push	0
	push	DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _gpBuffer
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sx$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
	push	DWORD PTR _y$[ebp]
	call	@scrollrt_draw_clipped_dungeon@24
; Line 653
	mov	edi, DWORD PTR _y$[ebp]
	mov	ebx, DWORD PTR _x$[ebp]
	jmp	SHORT $LABEL_21$85416
$L85403:
; Line 655
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _sx$[ebp]
	call	@world_draw_black_tile@4
$LABEL_21$85416:
; Line 661
	add	DWORD PTR _sx$[ebp], 64			; 00000040H
	inc	ebx
	dec	edi
; Line 662
	add	esi, 32					; 00000020H
; Line 663
	dec	DWORD PTR _a5$[ebp]
	mov	DWORD PTR _sxa$[ebp], ebx
	mov	DWORD PTR _sya$[ebp], edi
$LABEL_23$85418:
; Line 668
	mov	eax, DWORD PTR _a5$[ebp]
; Line 669
	test	eax, eax
	mov	DWORD PTR _v46$[ebp], eax
	je	$L85422
; Line 670
	mov	eax, DWORD PTR _sxa$[ebp]
	push	2
	imul	eax, 112				; 00000070H
	pop	ecx
; Line 671
	mov	DWORD PTR _v47$[ebp], eax
	sub	ecx, esi
	mov	DWORD PTR -16+[ebp], ecx
$L85420:
; Line 674
	mov	ecx, DWORD PTR _sya$[ebp]
	dec	DWORD PTR _v46$[ebp]
	test	ecx, ecx
	jl	$L85422
	cmp	eax, 12544				; 00003100H
	jge	$L85422
; Line 676
	cmp	ecx, 112				; 00000070H
	jge	$L85425
	test	eax, eax
	jl	$L85425
; Line 677
	add	eax, ecx
; Line 679
	movsx	ecx, BYTE PTR _dTransVal[eax]
	mov	edx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _light_table_index, ecx
; Line 681
	test	edx, edx
	mov	DWORD PTR _level_piece_id, edx
	je	$L85426
; Line 682
	mov	ecx, DWORD PTR _sy$[ebp]
; Line 687
	mov	BYTE PTR _arch_draw_type, 1
	movsx	eax, BYTE PTR _dung_map[eax]
	movzx	edx, BYTE PTR _nTransTable[edx]
	movzx	eax, BYTE PTR _TransList[eax]
	lea	ebx, DWORD PTR _screen_y_times_768[ecx*4]
	and	eax, edx
	movzx	ecx, WORD PTR [esi]
; Line 768
	mov	edi, DWORD PTR [ebx]
	mov	DWORD PTR _cel_transparency_active, eax
	add	edi, DWORD PTR _gpBuffer
	mov	DWORD PTR _level_cel_block, ecx
	add	edi, DWORD PTR _sx$[ebp]
	test	ecx, ecx
	je	SHORT $L85429
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85429:
	movzx	eax, WORD PTR [esi+2]
	test	eax, eax
	mov	BYTE PTR _arch_draw_type, 2
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85430
	lea	ecx, DWORD PTR [edi+32]
	call	@drawLowerScreen@4
$L85430:
	and	BYTE PTR _arch_draw_type, 0
	push	2
	pop	eax
	cmp	DWORD PTR _dword_5A5594, eax
	mov	DWORD PTR _i$[ebp], eax
	jle	SHORT $L85433
	push	4
	lea	ecx, DWORD PTR [esi+6]
	pop	eax
	mov	DWORD PTR 16+[ebp], ecx
$L85431:
	movzx	eax, WORD PTR [eax+esi]
	sub	edi, 24576				; 00006000H
	mov	DWORD PTR _level_cel_block, eax
	test	eax, eax
	je	SHORT $L85434
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85434:
	mov	eax, DWORD PTR 16+[ebp]
	movzx	eax, WORD PTR [eax]
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85435
	lea	ecx, DWORD PTR [edi+32]
	call	@drawLowerScreen@4
$L85435:
	mov	eax, DWORD PTR -16+[ebp]
	mov	ecx, DWORD PTR 16+[ebp]
	add	DWORD PTR _i$[ebp], 2
	add	DWORD PTR 16+[ebp], 4
	add	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _dword_5A5594
	jl	SHORT $L85431
$L85433:
; Line 710
	mov	ecx, DWORD PTR [ebx]
	push	1
	push	DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _gpBuffer
	mov	edx, DWORD PTR _sxa$[ebp]
	push	DWORD PTR _sx$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sya$[ebp]
	call	@scrollrt_draw_clipped_dungeon@24
; Line 712
	jmp	SHORT $L85437
$L85426:
; Line 713
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _sx$[ebp]
	call	@world_draw_black_tile@4
$L85437:
; Line 715
	mov	eax, DWORD PTR _v47$[ebp]
$L85425:
; Line 717
	inc	DWORD PTR _sxa$[ebp]
; Line 718
	add	DWORD PTR _sx$[ebp], 64			; 00000040H
; Line 721
	sub	DWORD PTR -16+[ebp], 32			; 00000020H
	add	eax, 112				; 00000070H
	dec	DWORD PTR _sya$[ebp]
	add	esi, 32					; 00000020H
; Line 723
	cmp	DWORD PTR _v46$[ebp], 0
	mov	DWORD PTR _v47$[ebp], eax
	jne	$L85420
$L85422:
; Line 725
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	$L85453
	cmp	DWORD PTR _sya$[ebp], 112		; 00000070H
	jae	$L85453
	mov	eax, DWORD PTR _sxa$[ebp]
	cmp	eax, 112				; 00000070H
	jae	$L85453
; Line 726
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _sya$[ebp]
; Line 728
	movsx	ecx, BYTE PTR _dTransVal[eax]
	mov	edx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _light_table_index, ecx
; Line 730
	test	edx, edx
	mov	DWORD PTR _level_piece_id, edx
	je	$L85441
; Line 731
	mov	ecx, DWORD PTR _sy$[ebp]
; Line 737
	mov	BYTE PTR _arch_draw_type, 1
	movsx	eax, BYTE PTR _dung_map[eax]
	movzx	edx, BYTE PTR _nTransTable[edx]
	movzx	eax, BYTE PTR _TransList[eax]
	lea	ebx, DWORD PTR _screen_y_times_768[ecx*4]
	and	eax, edx
	movzx	ecx, WORD PTR [esi]
; Line 768
	mov	edi, DWORD PTR [ebx]
	mov	DWORD PTR _cel_transparency_active, eax
	add	edi, DWORD PTR _gpBuffer
	mov	DWORD PTR _level_cel_block, ecx
	add	edi, DWORD PTR _sx$[ebp]
	test	ecx, ecx
	je	SHORT $L85445
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85445:
	movzx	eax, WORD PTR [esi+4]
	and	BYTE PTR _arch_draw_type, 0
	add	edi, -24576				; ffffa000H
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85446
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85446:
	movzx	eax, WORD PTR [esi+8]
	add	edi, -24576				; ffffa000H
	mov	DWORD PTR _level_cel_block, eax
	test	eax, eax
	je	SHORT $L85447
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85447:
	movzx	eax, WORD PTR [esi+12]
	add	edi, -24576				; ffffa000H
	mov	DWORD PTR _level_cel_block, eax
	test	eax, eax
	je	SHORT $L85448
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85448:
	movzx	eax, WORD PTR [esi+16]
	add	edi, -24576				; ffffa000H
	mov	DWORD PTR _level_cel_block, eax
	test	eax, eax
	je	SHORT $L85449
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85449:
	mov	si, WORD PTR [esi+20]
	movzx	eax, si
	test	si, si
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85451
; Line 763
	cmp	BYTE PTR _leveltype, 4
	jne	SHORT $L85451
; Line 764
	lea	ecx, DWORD PTR [edi-24576]
	call	@drawLowerScreen@4
$L85451:
; Line 766
	mov	ecx, DWORD PTR [ebx]
	push	0
	push	DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _gpBuffer
	mov	edx, DWORD PTR _sxa$[ebp]
	push	DWORD PTR _sx$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sya$[ebp]
	call	@scrollrt_draw_clipped_dungeon@24
; Line 767
	jmp	SHORT $L85453
$L85441:
; Line 768
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _sx$[ebp]
	call	@world_draw_black_tile@4
$L85453:
	pop	edi
	pop	esi
	pop	ebx
; Line 771
	leave
	ret	16					; 00000010H
@scrollrt_draw_lower@24 ENDP
_TEXT	ENDS
PUBLIC	@DrawClippedMonster@28
PUBLIC	@DrawClippedObject@28
PUBLIC	@scrollrt_draw_clipped_e_flag@20
EXTRN	_dArch:BYTE
EXTRN	_level_special_cel:DWORD
EXTRN	_dItem:BYTE
EXTRN	_pcursmonst:DWORD
EXTRN	_pcursitem:BYTE
EXTRN	_lightmax:BYTE
EXTRN	_dead:BYTE
EXTRN	_pSquareCel:DWORD
EXTRN	_visiondebug:DWORD
EXTRN	_MissilePreFlag:DWORD
EXTRN	@Cel2DecodeHdrOnly@24:NEAR
EXTRN	@Cel2DecodeHdrLight@28:NEAR
EXTRN	_item:BYTE
EXTRN	@Cel2DecodeLightTrans@24:NEAR
EXTRN	@CelDrawHdrClrHL@32:NEAR
EXTRN	_monster:BYTE
EXTRN	_dMonster:BYTE
EXTRN	_dObject:BYTE
EXTRN	_dDead:BYTE
EXTRN	_dPlayer:BYTE
; Function compile flags: /Ogsy
;	COMDAT @scrollrt_draw_clipped_dungeon@24
_TEXT	SEGMENT
_a1$ = -16
_sx$ = -12
_sy$ = 8
_a4$ = 12
_a5$ = 16
_a6$ = 20
_v15$ = -24
_v40$ = -28
_v41$ = -20
_v44$ = -7
_v45$ = -6
_v46$ = -5
_v47$ = -4
_v48$ = -3
_v49$ = -2
_v50$ = -1
@scrollrt_draw_clipped_dungeon@24 PROC NEAR		; COMDAT
; _a1$ = ecx
; _sx$ = edx
; Line 779
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, edx
	mov	DWORD PTR _a1$[ebp], ecx
	mov	DWORD PTR _sx$[ebp], eax
; Line 828
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _sy$[ebp]
	push	ebx
	push	esi
	push	edi
; Line 842
	xor	edi, edi
	mov	cl, BYTE PTR _dFlags[eax]
	mov	bl, BYTE PTR _dDead[eax]
	mov	BYTE PTR _v50$[ebp], cl
	mov	cl, BYTE PTR _dObject[eax]
	mov	BYTE PTR _v47$[ebp], cl
	mov	cl, BYTE PTR _dItem[eax]
	mov	BYTE PTR _v49$[ebp], cl
	lea	ecx, DWORD PTR _dPlayer[eax]
	cmp	DWORD PTR _visiondebug, edi
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _v48$[ebp], dl
	mov	dl, BYTE PTR _dArch[eax]
	mov	BYTE PTR _v46$[ebp], dl
	lea	edx, DWORD PTR _dMonster[eax*4]
	mov	al, BYTE PTR _dung_map[eax]
	mov	BYTE PTR _v44$[ebp], al
	mov	al, BYTE PTR [ecx-1]
	mov	BYTE PTR _v45$[ebp], al
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _v40$[ebp], eax
	mov	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _v41$[ebp], eax
	je	SHORT $L85515
	test	BYTE PTR _v50$[ebp], 64			; 00000040H
	je	SHORT $L85515
; Line 843
	mov	edx, DWORD PTR _pSquareCel
	mov	ecx, DWORD PTR _a1$[ebp]
	push	8
	push	edi
	push	64					; 00000040H
	push	1
	call	@Cel2DecodeHdrOnly@24
$L85515:
; Line 844
	cmp	DWORD PTR _MissilePreFlag, edi
	je	SHORT $L85517
	test	BYTE PTR _v50$[ebp], 1
	je	SHORT $L85517
; Line 845
	push	1
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _sx$[ebp]
	push	8
	push	edi
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR _a4$[ebp]
	call	@DrawClippedMissile@28
$L85517:
; Line 846
	movsx	eax, BYTE PTR _lightmax
	cmp	DWORD PTR _light_table_index, eax
	jge	$L85528
; Line 847
	test	bl, bl
	je	SHORT $L85526
; Line 848
	movsx	ecx, bl
	mov	eax, ecx
; Line 850
	mov	esi, DWORD PTR _a4$[ebp]
	and	eax, 31					; 0000001fH
	sar	ecx, 5
	lea	eax, DWORD PTR [eax+eax*2]
	and	ecx, 7
	shl	eax, 4
	lea	eax, DWORD PTR _dead[eax-48]
	mov	ecx, DWORD PTR [eax+ecx*4]
	sub	esi, DWORD PTR [eax+40]
; Line 851
	cmp	ecx, edi
	je	SHORT $L85526
; Line 852
	mov	edx, DWORD PTR [eax+32]
; Line 853
	cmp	edx, 1
	jl	SHORT $L85526
	mov	ebx, DWORD PTR [ecx]
	cmp	ebx, 50					; 00000032H
	ja	SHORT $L85526
	cmp	edx, ebx
	jg	SHORT $L85526
; Line 854
	mov	bl, BYTE PTR [eax+44]
; Line 855
	test	bl, bl
	mov	BYTE PTR _v15$[ebp], bl
	je	SHORT $L85524
; Line 856
	push	DWORD PTR _v15$[ebp]
	push	8
	push	edi
	push	DWORD PTR [eax+36]
	push	edx
	mov	edx, DWORD PTR _a5$[ebp]
	push	ecx
	mov	ecx, esi
	call	@Cl2DecodeFrm5@32
; Line 857
	jmp	SHORT $L85526
$L85524:
; Line 858
	push	8
	push	edi
	push	DWORD PTR [eax+36]
	push	edx
	mov	edx, DWORD PTR _a5$[ebp]
	push	ecx
	mov	ecx, esi
	call	@Cl2DecodeFrm6@28
$L85526:
; Line 862
	cmp	BYTE PTR _v47$[ebp], 0
	je	SHORT $L85528
; Line 863
	push	8
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _sx$[ebp]
	push	edi
	push	1
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR _a4$[ebp]
	call	@DrawClippedObject@28
$L85528:
; Line 865
	cmp	BYTE PTR _v49$[ebp], 0
	je	SHORT $L85536
; Line 866
	movsx	ecx, BYTE PTR _v49$[ebp]
	mov	eax, ecx
	imul	eax, 368				; 00000170H
	lea	esi, DWORD PTR _item[eax-368]
; Line 867
	cmp	DWORD PTR [esi+52], edi
	jne	SHORT $L85536
	cmp	BYTE PTR _v49$[ebp], 127		; 0000007fH
	ja	SHORT $L85536
; Line 868
	mov	eax, DWORD PTR [esi+24]
; Line 869
	cmp	eax, edi
	je	SHORT $L85536
; Line 870
	mov	ebx, DWORD PTR [esi+32]
; Line 871
	cmp	ebx, 1
	jl	SHORT $L85536
	mov	edx, DWORD PTR [eax]
	cmp	edx, 50					; 00000032H
	ja	SHORT $L85536
	cmp	ebx, edx
	ja	SHORT $L85536
; Line 872
	mov	ebx, DWORD PTR _a4$[ebp]
; Line 873
	movsx	edx, BYTE PTR _pcursitem
	sub	ebx, DWORD PTR [esi+40]
	dec	ecx
	cmp	ecx, edx
	jne	SHORT $L85537
; Line 874
	push	8
	push	edi
	push	DWORD PTR [esi+36]
	mov	edx, ebx
	mov	cl, -75					; ffffffb5H
	push	DWORD PTR [esi+32]
	push	eax
	push	DWORD PTR _a5$[ebp]
	call	@CelDrawHdrClrHL@32
$L85537:
; Line 875
	push	8
	push	edi
	push	DWORD PTR [esi+36]
	mov	edx, DWORD PTR _a5$[ebp]
	mov	ecx, ebx
	push	DWORD PTR [esi+32]
	push	DWORD PTR [esi+24]
	call	@Cel2DecodeHdrLight@28
$L85536:
; Line 880
	test	BYTE PTR _v50$[ebp], 32			; 00000020H
	je	$L85542
; Line 881
	movsx	eax, BYTE PTR _v45$[ebp]
	or	ecx, -1
	sub	ecx, eax
; Line 882
	cmp	ecx, 4
	jae	$L85542
; Line 883
	mov	esi, ecx
; Line 894
	push	8
	imul	esi, 21720				; 000054d8H
	add	esi, OFFSET FLAT:_plr
	push	edi
	mov	ebx, DWORD PTR _sy$[ebp]
	mov	edx, DWORD PTR _sx$[ebp]
	push	DWORD PTR [esi+144]
	mov	eax, DWORD PTR [esi+100]
	add	eax, DWORD PTR _a5$[ebp]
	push	DWORD PTR [esi+140]
	push	DWORD PTR [esi+124]
	push	eax
	mov	eax, DWORD PTR [esi+96]
	sub	eax, DWORD PTR [esi+148]
	add	eax, DWORD PTR _a4$[ebp]
	push	eax
	lea	eax, DWORD PTR [ebx-1]
	push	eax
	call	@DrawClippedPlayer@40
; Line 895
	cmp	DWORD PTR _a6$[ebp], edi
	je	SHORT $L85542
; Line 896
	mov	esi, DWORD PTR [esi+152]
; Line 897
	cmp	esi, edi
	je	SHORT $L85542
; Line 898
	cmp	esi, 2
	jne	SHORT $L85543
; Line 899
	mov	eax, DWORD PTR _a5$[ebp]
	add	eax, -16				; fffffff0H
	push	eax
	mov	eax, DWORD PTR _a4$[ebp]
	add	eax, -96				; ffffffa0H
	push	eax
	lea	eax, DWORD PTR [ebx+1]
	push	eax
	mov	eax, DWORD PTR _sx$[ebp]
	lea	edx, DWORD PTR [eax-2]
	mov	eax, DWORD PTR _a1$[ebp]
	lea	ecx, DWORD PTR [eax-12384]
	call	@scrollrt_draw_clipped_e_flag@20
$L85543:
; Line 900
	mov	eax, DWORD PTR _a4$[ebp]
	push	DWORD PTR _a5$[ebp]
	add	eax, -64				; ffffffc0H
	inc	ebx
	push	eax
	mov	eax, DWORD PTR _sx$[ebp]
	push	ebx
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _a1$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@scrollrt_draw_clipped_e_flag@20
$L85542:
; Line 905
	test	BYTE PTR _v50$[ebp], 16			; 00000010H
	je	$L85552
	test	BYTE PTR _v50$[ebp], 64			; 00000040H
	jne	SHORT $L85545
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+464], edi
	je	$L85552
$L85545:
	cmp	DWORD PTR _v41$[ebp], edi
	jge	$L85552
; Line 908
	or	ecx, -1
	or	eax, -1
	sub	ecx, DWORD PTR _v41$[ebp]
	sub	eax, DWORD PTR _v41$[ebp]
	cmp	ecx, 200				; 000000c8H
	mov	DWORD PTR _draw_monster_num, eax
	jae	$L85552
; Line 909
	mov	esi, eax
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 910
	test	BYTE PTR [esi+156], 1
	jne	$L85552
; Line 911
	mov	ecx, DWORD PTR [esi+220]
; Line 912
	cmp	ecx, edi
	je	SHORT $L85552
; Line 914
	mov	edi, DWORD PTR [esi+56]
	mov	ebx, DWORD PTR [esi+60]
	sub	edi, DWORD PTR [ecx+304]
	add	ebx, DWORD PTR _a5$[ebp]
	add	edi, DWORD PTR _a4$[ebp]
; Line 915
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L85550
; Line 916
	push	8
	push	0
	push	DWORD PTR [ecx+300]
	mov	edx, edi
	mov	cl, -23					; ffffffe9H
	push	DWORD PTR [esi+100]
	push	DWORD PTR [esi+84]
	push	ebx
	call	@Cl2DecodeClrHL@32
; Line 917
	mov	eax, DWORD PTR _draw_monster_num
$L85550:
; Line 919
	push	8
	push	0
	push	eax
	push	ebx
	mov	ebx, DWORD PTR _sy$[ebp]
	push	edi
	mov	edi, DWORD PTR _sx$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@DrawClippedMonster@28
; Line 920
	cmp	DWORD PTR _a6$[ebp], 0
	je	SHORT $L86797
	cmp	DWORD PTR [esi+104], 0
	je	SHORT $L86797
; Line 921
	mov	eax, DWORD PTR _a4$[ebp]
	push	DWORD PTR _a5$[ebp]
	add	eax, -64				; ffffffc0H
	inc	ebx
	push	eax
	mov	eax, DWORD PTR _a1$[ebp]
	push	ebx
	lea	edx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [eax-64]
	call	@scrollrt_draw_clipped_e_flag@20
$L86797:
	xor	edi, edi
$L85552:
; Line 926
	test	BYTE PTR _v50$[ebp], 4
	je	SHORT $L85553
; Line 927
	push	1
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _sx$[ebp]
	push	8
	push	edi
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR _a4$[ebp]
	call	@DrawDeadPlayer@28
$L85553:
; Line 928
	cmp	BYTE PTR _v48$[ebp], 0
	jle	$L85557
; Line 929
	movsx	ecx, BYTE PTR _v48$[ebp]
	dec	ecx
; Line 930
	cmp	ecx, 4
	jae	$L85557
; Line 931
	mov	esi, ecx
; Line 942
	push	8
	imul	esi, 21720				; 000054d8H
	add	esi, OFFSET FLAT:_plr
	push	edi
	mov	ebx, DWORD PTR _a4$[ebp]
	mov	edx, DWORD PTR _sx$[ebp]
	push	DWORD PTR [esi+144]
	mov	eax, DWORD PTR [esi+100]
	add	eax, DWORD PTR _a5$[ebp]
	push	DWORD PTR [esi+140]
	push	DWORD PTR [esi+124]
	push	eax
	mov	eax, DWORD PTR [esi+96]
	sub	eax, DWORD PTR [esi+148]
	add	eax, ebx
	push	eax
	push	DWORD PTR _sy$[ebp]
	call	@DrawClippedPlayer@40
; Line 943
	cmp	DWORD PTR _a6$[ebp], edi
	je	SHORT $L85557
; Line 944
	mov	esi, DWORD PTR [esi+152]
; Line 945
	cmp	esi, edi
	je	SHORT $L85557
; Line 946
	cmp	esi, 2
	jne	SHORT $L85558
; Line 947
	mov	eax, DWORD PTR _a5$[ebp]
	add	eax, -16				; fffffff0H
	push	eax
	lea	eax, DWORD PTR [ebx-96]
	push	eax
	mov	eax, DWORD PTR _sy$[ebp]
	inc	eax
	push	eax
	mov	eax, DWORD PTR _sx$[ebp]
	lea	edx, DWORD PTR [eax-2]
	mov	eax, DWORD PTR _a1$[ebp]
	lea	ecx, DWORD PTR [eax-12384]
	call	@scrollrt_draw_clipped_e_flag@20
$L85558:
; Line 948
	push	DWORD PTR _a5$[ebp]
	mov	eax, DWORD PTR _sy$[ebp]
	add	ebx, -64				; ffffffc0H
	inc	eax
	push	ebx
	push	eax
	mov	eax, DWORD PTR _sx$[ebp]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _a1$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@scrollrt_draw_clipped_e_flag@20
$L85557:
; Line 953
	mov	ecx, DWORD PTR _v40$[ebp]
	cmp	ecx, edi
	jle	$L85567
	test	BYTE PTR _v50$[ebp], 64			; 00000040H
	jne	SHORT $L85560
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+464], edi
	je	$L85567
$L85560:
; Line 954
	lea	eax, DWORD PTR [ecx-1]
; Line 956
	dec	ecx
	cmp	ecx, 200				; 000000c8H
	mov	DWORD PTR _draw_monster_num, eax
	jae	$L85567
; Line 957
	mov	esi, eax
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 958
	test	BYTE PTR [esi+156], 1
	jne	$L85567
; Line 959
	mov	ecx, DWORD PTR [esi+220]
; Line 960
	cmp	ecx, edi
	je	SHORT $L85567
; Line 962
	mov	edi, DWORD PTR [esi+56]
	mov	ebx, DWORD PTR [esi+60]
	sub	edi, DWORD PTR [ecx+304]
	add	ebx, DWORD PTR _a5$[ebp]
	add	edi, DWORD PTR _a4$[ebp]
; Line 963
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L85565
; Line 964
	push	8
	push	0
	push	DWORD PTR [ecx+300]
	mov	edx, edi
	mov	cl, -23					; ffffffe9H
	push	DWORD PTR [esi+100]
	push	DWORD PTR [esi+84]
	push	ebx
	call	@Cl2DecodeClrHL@32
; Line 965
	mov	eax, DWORD PTR _draw_monster_num
$L85565:
; Line 967
	push	8
	push	0
	push	eax
	push	ebx
	mov	ebx, DWORD PTR _sy$[ebp]
	push	edi
	mov	edi, DWORD PTR _sx$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@DrawClippedMonster@28
; Line 968
	cmp	DWORD PTR _a6$[ebp], 0
	je	SHORT $L86800
	cmp	DWORD PTR [esi+104], 0
	je	SHORT $L86800
; Line 969
	mov	eax, DWORD PTR _a4$[ebp]
	push	DWORD PTR _a5$[ebp]
	add	eax, -64				; ffffffc0H
	inc	ebx
	push	eax
	mov	eax, DWORD PTR _a1$[ebp]
	push	ebx
	lea	edx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [eax-64]
	call	@scrollrt_draw_clipped_e_flag@20
$L86800:
	xor	edi, edi
$L85567:
; Line 974
	test	BYTE PTR _v50$[ebp], 1
	je	SHORT $L85568
; Line 975
	push	edi
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _sx$[ebp]
	push	8
	push	edi
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR _a4$[ebp]
	call	@DrawClippedMissile@28
$L85568:
; Line 976
	cmp	BYTE PTR _v47$[ebp], 0
	je	SHORT $L85569
	movsx	eax, BYTE PTR _lightmax
	cmp	DWORD PTR _light_table_index, eax
	jge	SHORT $L85569
; Line 977
	push	8
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _sx$[ebp]
	push	edi
	push	edi
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR _a4$[ebp]
	call	@DrawClippedObject@28
$L85569:
; Line 978
	cmp	BYTE PTR _v49$[ebp], 0
	je	SHORT $L85578
; Line 979
	movsx	edx, BYTE PTR _v49$[ebp]
	mov	eax, edx
	imul	eax, 368				; 00000170H
	lea	esi, DWORD PTR _item[eax-368]
; Line 980
	cmp	DWORD PTR [esi+52], edi
	je	SHORT $L85578
; Line 981
	cmp	BYTE PTR _v49$[ebp], 127		; 0000007fH
	ja	SHORT $L85578
; Line 982
	mov	ecx, DWORD PTR [esi+24]
; Line 983
	cmp	ecx, edi
	je	SHORT $L85578
; Line 984
	mov	ebx, DWORD PTR [esi+32]
; Line 985
	cmp	ebx, 1
	jl	SHORT $L85578
	mov	eax, DWORD PTR [ecx]
	cmp	eax, 50					; 00000032H
	ja	SHORT $L85578
	cmp	ebx, eax
	ja	SHORT $L85578
; Line 986
	mov	eax, DWORD PTR _a4$[ebp]
	sub	eax, DWORD PTR [esi+40]
; Line 987
	dec	edx
	mov	ebx, eax
	movsx	eax, BYTE PTR _pcursitem
	cmp	edx, eax
	jne	SHORT $L85579
; Line 988
	push	8
	push	edi
	push	DWORD PTR [esi+36]
	mov	edx, ebx
	push	DWORD PTR [esi+32]
	push	ecx
	mov	cl, -75					; ffffffb5H
	push	DWORD PTR _a5$[ebp]
	call	@CelDrawHdrClrHL@32
$L85579:
; Line 996
	push	8
	push	edi
	push	DWORD PTR [esi+36]
	mov	edx, DWORD PTR _a5$[ebp]
	mov	ecx, ebx
	push	DWORD PTR [esi+32]
	push	DWORD PTR [esi+24]
	call	@Cel2DecodeHdrLight@28
$L85578:
; Line 1002
	cmp	BYTE PTR _v46$[ebp], 0
	je	SHORT $L85581
; Line 1003
	movsx	eax, BYTE PTR _v44$[ebp]
; Line 1004
	mov	edx, DWORD PTR _level_special_cel
	mov	ecx, DWORD PTR _a1$[ebp]
	movzx	eax, BYTE PTR _TransList[eax]
	mov	DWORD PTR _cel_transparency_active, eax
	push	8
	movsx	eax, BYTE PTR _v46$[ebp]
	push	edi
	push	64					; 00000040H
	push	eax
	call	@Cel2DecodeLightTrans@24
$L85581:
	pop	edi
	pop	esi
	pop	ebx
; Line 1006
	leave
	ret	16					; 00000010H
@scrollrt_draw_clipped_dungeon@24 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DrawClippedMonster@28
_TEXT	SEGMENT
_mx$ = 8
_my$ = 12
_m$ = 16
_a6$ = 20
_a7$ = 24
_trans$ = 16
@DrawClippedMonster@28 PROC NEAR			; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1016
	push	ebp
	mov	ebp, esp
; Line 1022
	mov	eax, DWORD PTR _m$[ebp]
	push	ebx
	push	esi
	cmp	eax, 200				; 000000c8H
	push	edi
	jae	$L85609
; Line 1027
	imul	eax, 228				; 000000e4H
	mov	esi, DWORD PTR _monster[eax+84]
; Line 1028
	test	esi, esi
	je	$L85609
; Line 1033
	mov	ebx, DWORD PTR _monster[eax+100]
; Line 1035
	cmp	ebx, 1
	jl	$L85609
	mov	edi, DWORD PTR [esi]
	cmp	edi, 50					; 00000032H
	ja	$L85609
	cmp	ebx, edi
	jg	$L85609
; Line 1051
	imul	ecx, 112				; 00000070H
	test	BYTE PTR _dFlags[ecx+edx], 64		; 00000040H
	jne	SHORT $L85610
; Line 1052
	mov	eax, DWORD PTR _monster[eax+220]
	mov	edx, DWORD PTR _my$[ebp]
	mov	ecx, DWORD PTR _mx$[ebp]
	push	1
$L86833:
	push	DWORD PTR _a7$[ebp]
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR [eax+300]
	push	ebx
	push	esi
	call	@Cl2DecodeFrm5@32
; Line 1053
	jmp	SHORT $L85609
$L85610:
; Line 1054
	xor	cl, cl
; Line 1055
	cmp	BYTE PTR _monster[eax+188], cl
	mov	BYTE PTR _trans$[ebp], cl
	je	SHORT $L85613
; Line 1056
	mov	cl, BYTE PTR _monster[eax+189]
	add	cl, 4
	mov	BYTE PTR _trans$[ebp], cl
$L85613:
; Line 1057
	cmp	DWORD PTR _monster[eax+4], 15		; 0000000fH
	jne	SHORT $L85614
; Line 1058
	mov	cl, 2
	mov	BYTE PTR _trans$[ebp], cl
$L85614:
; Line 1059
	mov	edx, DWORD PTR _myplr
	imul	edx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[edx+464], 0
	je	SHORT $L85615
	cmp	DWORD PTR _light_table_index, 8
	jle	SHORT $L85615
; Line 1060
	mov	cl, 1
	mov	BYTE PTR _trans$[ebp], cl
$L85615:
; Line 1062
	mov	edx, DWORD PTR _my$[ebp]
	mov	eax, DWORD PTR _monster[eax+220]
	test	cl, cl
	mov	ecx, DWORD PTR _mx$[ebp]
	je	SHORT $L85616
	push	DWORD PTR _trans$[ebp]
; Line 1063
	jmp	SHORT $L86833
$L85616:
; Line 1064
	push	DWORD PTR _a7$[ebp]
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR [eax+300]
	push	ebx
	push	esi
	call	@Cl2DecodeFrm6@28
$L85609:
	pop	edi
	pop	esi
	pop	ebx
; Line 1066
	pop	ebp
	ret	20					; 00000014H
@DrawClippedMonster@28 ENDP
_TEXT	ENDS
EXTRN	_pcursobj:BYTE
EXTRN	@Cel2DrawHdrOnly@28:NEAR
EXTRN	_object:BYTE
; Function compile flags: /Ogsy
;	COMDAT @DrawClippedObject@28
_TEXT	SEGMENT
_ox$ = 8
_oy$ = 12
_pre$ = 16
_a6$ = 20
_dir$ = 24
_bv$ = -1
@DrawClippedObject@28 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1070
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1076
	mov	eax, ecx
	push	ebx
	imul	eax, 112				; 00000070H
	push	esi
	push	edi
	mov	edi, edx
	mov	al, BYTE PTR _dObject[eax+edi]
	test	al, al
	jle	SHORT $L85643
; Line 1077
	dec	al
	mov	dl, al
; Line 1078
	movsx	esi, dl
	imul	esi, 120				; 00000078H
	mov	BYTE PTR _bv$[ebp], dl
	mov	eax, DWORD PTR _object[esi+68]
	cmp	eax, DWORD PTR _pre$[ebp]
	jne	$L85653
; Line 1080
	mov	edi, DWORD PTR _ox$[ebp]
; Line 1081
	mov	ebx, DWORD PTR _oy$[ebp]
	sub	edi, DWORD PTR _object[esi+44]
; Line 1082
	jmp	SHORT $L85645
$L85643:
; Line 1083
	or	dl, -1
	sub	dl, al
; Line 1084
	movsx	esi, dl
	imul	esi, 120				; 00000078H
	mov	BYTE PTR _bv$[ebp], dl
	mov	eax, DWORD PTR _object[esi+68]
	cmp	eax, DWORD PTR _pre$[ebp]
	jne	$L85653
; Line 1086
	mov	eax, DWORD PTR _object[esi+4]
; Line 1091
	mov	DWORD PTR _dir$[ebp], 8
	sub	eax, ecx
	mov	ecx, DWORD PTR _object[esi+8]
	sub	ecx, edi
	mov	edi, eax
	shl	edi, 5
	sub	edi, DWORD PTR _object[esi+44]
	mov	ebx, ecx
	shl	ebx, 5
	sub	edi, ebx
	lea	ebx, DWORD PTR [ecx+eax]
	add	edi, DWORD PTR _ox$[ebp]
	shl	ebx, 4
	add	ebx, DWORD PTR _oy$[ebp]
	and	DWORD PTR _a6$[ebp], 0
$L85645:
; Line 1095
	cmp	dl, 127					; 0000007fH
	jae	SHORT $L85653
; Line 1098
	mov	eax, DWORD PTR _object[esi+20]
; Line 1099
	test	eax, eax
	je	SHORT $L85653
; Line 1104
	mov	ecx, DWORD PTR _object[esi+36]
; Line 1106
	cmp	ecx, 1
	jl	SHORT $L85653
	mov	edx, DWORD PTR [eax]
	cmp	edx, 50					; 00000032H
	ja	SHORT $L85653
	cmp	ecx, edx
	jg	SHORT $L85653
; Line 1111
	mov	dl, BYTE PTR _bv$[ebp]
	cmp	dl, BYTE PTR _pcursobj
	jne	SHORT $L85654
; Line 1112
	push	DWORD PTR _dir$[ebp]
	mov	edx, edi
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _object[esi+40]
	push	ecx
	push	eax
	push	ebx
	mov	cl, -62					; ffffffc2H
	call	@CelDrawHdrClrHL@32
$L85654:
; Line 1114
	push	DWORD PTR _dir$[ebp]
	cmp	DWORD PTR _object[esi+12], 0
	mov	ecx, edi
	mov	edx, ebx
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _object[esi+40]
	push	DWORD PTR _object[esi+36]
	push	DWORD PTR _object[esi+20]
	je	SHORT $L85656
	call	@Cel2DecodeHdrLight@28
; Line 1115
	jmp	SHORT $L85653
$L85656:
; Line 1116
	call	@Cel2DrawHdrOnly@28
$L85653:
	pop	edi
	pop	esi
	pop	ebx
; Line 1117
	leave
	ret	20					; 00000014H
@DrawClippedObject@28 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @scrollrt_draw_clipped_e_flag@20
_TEXT	SEGMENT
_buffer$ = -16
_x$ = -12
_y$ = 8
_a4$ = 12
_a5$ = 16
_v6$ = -24
_v10$ = -20
_v18$ = -28
_i$ = -8
_pbDst$ = -4
@scrollrt_draw_clipped_e_flag@20 PROC NEAR		; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 1121
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 1142
	mov	eax, DWORD PTR _level_piece_id
	push	ebx
	mov	DWORD PTR _v18$[ebp], eax
; Line 1143
	mov	eax, edx
	imul	eax, 112				; 00000070H
	push	esi
; Line 1149
	mov	esi, DWORD PTR _light_table_index
	mov	DWORD PTR _x$[ebp], edx
	mov	edx, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR _cel_transparency_active
	add	eax, edx
	mov	DWORD PTR _v6$[ebp], ecx
	mov	DWORD PTR _v10$[ebp], esi
	mov	ecx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _buffer$[ebp], edi
; Line 1152
	movsx	esi, BYTE PTR _dTransVal[eax]
; Line 1153
	movsx	eax, BYTE PTR _dung_map[eax]
	mov	DWORD PTR _level_piece_id, ecx
	mov	DWORD PTR _light_table_index, esi
	movzx	eax, BYTE PTR _TransList[eax]
	movzx	ecx, BYTE PTR _nTransTable[ecx]
	and	eax, ecx
; Line 1154
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _cel_transparency_active, eax
	call	@gendung_get_dpiece_num_from_coord@8
; Line 1156
	shl	eax, 5
	add	eax, OFFSET FLAT:_dpiece_defs_map_1
	mov	BYTE PTR _arch_draw_type, 1
	mov	esi, eax
; Line 1158
	mov	ax, WORD PTR [esi]
	movzx	ecx, ax
; Line 1159
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85693
; Line 1160
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85693:
; Line 1161
	movzx	eax, WORD PTR [esi+2]
; Line 1164
	test	eax, eax
	mov	BYTE PTR _arch_draw_type, 2
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85694
; Line 1165
	lea	ecx, DWORD PTR [edi+32]
	call	@drawLowerScreen@4
$L85694:
; Line 1166
	and	BYTE PTR _arch_draw_type, 0
; Line 1169
	push	2
	pop	ebx
	mov	DWORD PTR _pbDst$[ebp], edi
	cmp	DWORD PTR _dword_5A5594, ebx
	mov	DWORD PTR _i$[ebp], ebx
	jle	SHORT $L85697
	push	4
	lea	edi, DWORD PTR [esi+6]
	pop	eax
	sub	ebx, esi
$L85695:
; Line 1171
	movzx	eax, WORD PTR [eax+esi]
	sub	DWORD PTR _pbDst$[ebp], 24576		; 00006000H
	mov	DWORD PTR _level_cel_block, eax
; Line 1172
	test	eax, eax
	je	SHORT $L85698
; Line 1173
	mov	ecx, DWORD PTR _pbDst$[ebp]
	call	@drawLowerScreen@4
$L85698:
; Line 1174
	movzx	eax, WORD PTR [edi]
; Line 1176
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L85699
; Line 1177
	mov	eax, DWORD PTR _pbDst$[ebp]
	lea	ecx, DWORD PTR [eax+32]
	call	@drawLowerScreen@4
$L85699:
	add	DWORD PTR _i$[ebp], 2
; Line 1178
	lea	eax, DWORD PTR [ebx+edi]
	mov	ecx, DWORD PTR _i$[ebp]
	add	edi, 4
	cmp	ecx, DWORD PTR _dword_5A5594
	jl	SHORT $L85695
; Line 1169
	mov	edi, DWORD PTR _buffer$[ebp]
$L85697:
; Line 1180
	push	0
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, edi
	push	DWORD PTR _a4$[ebp]
	push	DWORD PTR _y$[ebp]
	call	@scrollrt_draw_clipped_dungeon@24
; Line 1181
	mov	eax, DWORD PTR _v10$[ebp]
	mov	DWORD PTR _light_table_index, eax
; Line 1182
	mov	eax, DWORD PTR _v6$[ebp]
	mov	DWORD PTR _cel_transparency_active, eax
; Line 1183
	mov	eax, DWORD PTR _v18$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR _level_piece_id, eax
	pop	ebx
; Line 1184
	leave
	ret	12					; 0000000cH
@scrollrt_draw_clipped_e_flag@20 ENDP
_TEXT	ENDS
PUBLIC	@scrollrt_draw_clipped_dungeon_2@32
; Function compile flags: /Ogsy
;	COMDAT @scrollrt_draw_lower_2@28
_TEXT	SEGMENT
_x$ = -16
_sx$ = 8
_sy$ = 12
_a5$ = 16
_a6$ = 20
_some_flag$ = 24
_v24$ = -12
_v25$ = -20
_a1$ = -12
_a1a$ = 8
_a1b$ = 16
_v29$ = -8
_xa$ = -4
_a6a$ = -4
_a6b$ = 16
_a6c$ = 8
_a5a$ = 8
_a5b$ = 24
@scrollrt_draw_lower_2@28 PROC NEAR			; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1192
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	mov	esi, edx
	push	edi
; Line 1226
	mov	edi, DWORD PTR _sx$[ebp]
	mov	DWORD PTR _x$[ebp], ecx
	mov	DWORD PTR _a1$[ebp], esi
	mov	DWORD PTR _xa$[ebp], ecx
; Line 1227
	call	@gendung_get_dpiece_num_from_coord@8
	mov	edx, eax
	shl	edx, 5
	add	edx, OFFSET FLAT:_dpiece_defs_map_1
; Line 1228
	cmp	DWORD PTR _some_flag$[ebp], 0
	mov	DWORD PTR _v29$[ebp], edx
	je	$L85746
; Line 1229
	test	esi, esi
	jl	$L86850
	cmp	esi, 112				; 00000070H
	jge	$L86850
	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jl	$L86850
	cmp	eax, 112				; 00000070H
	jge	$L86850
; Line 1230
	imul	eax, 112				; 00000070H
	add	eax, esi
; Line 1232
	movsx	edi, BYTE PTR _dTransVal[eax]
	mov	ecx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _light_table_index, edi
; Line 1234
	test	ecx, ecx
	mov	DWORD PTR _level_piece_id, ecx
	je	$L86850
; Line 1236
	movsx	eax, BYTE PTR _dung_map[eax]
	movzx	ecx, BYTE PTR _nTransTable[ecx]
	movzx	eax, BYTE PTR _TransList[eax]
; Line 1237
	mov	ebx, DWORD PTR _sx$[ebp]
	and	eax, ecx
	mov	DWORD PTR _cel_transparency_active, eax
	mov	eax, DWORD PTR _sy$[ebp]
	and	DWORD PTR _a6a$[ebp], 0
	lea	edi, DWORD PTR _screen_y_times_768[eax*4]
	mov	eax, DWORD PTR _gpBuffer
	add	eax, ebx
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+ecx-24544]
	mov	DWORD PTR _a1a$[ebp], eax
; Line 1238
	mov	eax, DWORD PTR _dword_5A5594
	sar	eax, 1
	dec	eax
	test	eax, eax
	jle	SHORT $L85755
; Line 1239
	add	edx, 6
	mov	DWORD PTR _v24$[ebp], edx
$L85753:
; Line 1241
	mov	eax, DWORD PTR _a6a$[ebp]
	cmp	DWORD PTR _a6$[ebp], eax
	jg	SHORT $L85757
; Line 1243
	mov	eax, DWORD PTR _v24$[ebp]
	mov	ax, WORD PTR [eax]
	movzx	ecx, ax
; Line 1244
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85757
; Line 1245
	mov	ecx, DWORD PTR _a1a$[ebp]
	call	@drawLowerScreen@4
$L85757:
; Line 1250
	mov	eax, DWORD PTR _dword_5A5594
	sub	DWORD PTR _a1a$[ebp], 24576		; 00006000H
	inc	DWORD PTR _a6a$[ebp]
	add	DWORD PTR _v24$[ebp], 4
	sar	eax, 1
	dec	eax
	cmp	DWORD PTR _a6a$[ebp], eax
	jl	SHORT $L85753
$L85755:
; Line 1252
	mov	ecx, DWORD PTR _a6$[ebp]
	lea	eax, DWORD PTR [ecx+ecx+2]
; Line 1253
	cmp	eax, 8
	jge	SHORT $L85758
; Line 1262
	push	0
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [eax+eax*2]
	push	ecx
	mov	ecx, DWORD PTR _gpBuffer
	push	esi
	shl	eax, 12					; 0000000cH
	sub	ecx, eax
	add	ecx, ebx
	add	ecx, DWORD PTR [edi]
	call	@scrollrt_draw_clipped_dungeon_2@32
	jmp	SHORT $L85758
$L86850:
	mov	ebx, DWORD PTR _sx$[ebp]
$L85758:
; Line 1265
	mov	eax, DWORD PTR _x$[ebp]
; Line 1269
	mov	edx, DWORD PTR _v29$[ebp]
	inc	eax
	dec	esi
	dec	DWORD PTR _a5$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _xa$[ebp], eax
	lea	edi, DWORD PTR [ebx+64]
	mov	DWORD PTR _v29$[ebp], edx
; Line 1270
	mov	DWORD PTR _a1$[ebp], esi
$L85746:
; Line 1272
	mov	eax, DWORD PTR _a5$[ebp]
; Line 1273
	test	eax, eax
	mov	DWORD PTR _v25$[ebp], eax
	je	$L85763
; Line 1274
	mov	eax, DWORD PTR _xa$[ebp]
	imul	eax, 112				; 00000070H
	lea	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR -16+[ebp], ecx
$L85761:
; Line 1277
	dec	DWORD PTR _v25$[ebp]
; Line 1278
	cmp	eax, 12544				; 00003100H
	jge	$L85763
	test	esi, esi
	jl	$L85763
; Line 1280
	cmp	esi, 112				; 00000070H
	jge	$L85767
	test	eax, eax
	jl	$L85767
; Line 1281
	add	eax, esi
; Line 1283
	movsx	ebx, BYTE PTR _dTransVal[eax]
	mov	ecx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _light_table_index, ebx
; Line 1285
	test	ecx, ecx
	mov	DWORD PTR _level_piece_id, ecx
	je	$L85767
; Line 1287
	movsx	eax, BYTE PTR _dung_map[eax]
	movzx	ecx, BYTE PTR _nTransTable[ecx]
	movzx	eax, BYTE PTR _TransList[eax]
	and	eax, ecx
	and	DWORD PTR _a6b$[ebp], 0
	mov	DWORD PTR _cel_transparency_active, eax
; Line 1288
	mov	eax, DWORD PTR _sy$[ebp]
	lea	esi, DWORD PTR _screen_y_times_768[eax*4]
	mov	eax, DWORD PTR _gpBuffer
	add	eax, edi
	mov	ecx, DWORD PTR [esi]
	lea	ebx, DWORD PTR [eax+ecx-24576]
; Line 1289
	mov	eax, DWORD PTR _dword_5A5594
	sar	eax, 1
	dec	eax
	test	eax, eax
	jle	SHORT $L85774
; Line 1327
	add	edx, 6
	mov	DWORD PTR _a5a$[ebp], edx
$L85772:
	mov	eax, DWORD PTR _a6b$[ebp]
	cmp	DWORD PTR _a6$[ebp], eax
	jg	SHORT $L85777
	mov	eax, DWORD PTR _a5a$[ebp]
	mov	ax, WORD PTR [eax-2]
	movzx	ecx, ax
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85776
	mov	ecx, ebx
	call	@drawLowerScreen@4
$L85776:
	mov	eax, DWORD PTR _a5a$[ebp]
	mov	ax, WORD PTR [eax]
	movzx	ecx, ax
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85777
	lea	ecx, DWORD PTR [ebx+32]
	call	@drawLowerScreen@4
$L85777:
	mov	eax, DWORD PTR _dword_5A5594
	inc	DWORD PTR _a6b$[ebp]
	add	DWORD PTR _a5a$[ebp], 4
	sub	ebx, 24576				; 00006000H
	sar	eax, 1
	dec	eax
	cmp	DWORD PTR _a6b$[ebp], eax
	jl	SHORT $L85772
$L85774:
; Line 1307
	mov	ecx, DWORD PTR _a6$[ebp]
	lea	eax, DWORD PTR [ecx+ecx+2]
	cmp	eax, 8
	jge	SHORT $L85778
; Line 1316
	push	1
	mov	edx, DWORD PTR _xa$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR [ecx+ecx*2+3]
	push	ecx
	mov	ecx, DWORD PTR _gpBuffer
	push	DWORD PTR _a1$[ebp]
	shl	eax, 13					; 0000000dH
	sub	ecx, eax
	add	ecx, edi
	add	ecx, DWORD PTR [esi]
	call	@scrollrt_draw_clipped_dungeon_2@32
$L85778:
; Line 1317
	mov	esi, DWORD PTR _a1$[ebp]
	mov	edx, DWORD PTR _v29$[ebp]
$L85767:
; Line 1320
	inc	DWORD PTR _xa$[ebp]
; Line 1322
	mov	eax, DWORD PTR -16+[ebp]
; Line 1325
	add	DWORD PTR -16+[ebp], 112		; 00000070H
	add	edx, 32					; 00000020H
	dec	esi
	add	edi, 64					; 00000040H
; Line 1327
	cmp	DWORD PTR _v25$[ebp], 0
	mov	DWORD PTR _v29$[ebp], edx
	mov	DWORD PTR _a1$[ebp], esi
	jne	$L85761
$L85763:
; Line 1329
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	$L85794
; Line 1330
	cmp	esi, 112				; 00000070H
	jae	$L85794
	mov	eax, DWORD PTR _xa$[ebp]
	cmp	eax, 112				; 00000070H
	jae	$L85794
; Line 1331
	imul	eax, 112				; 00000070H
	add	eax, esi
; Line 1333
	movsx	ebx, BYTE PTR _dTransVal[eax]
	mov	ecx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _light_table_index, ebx
; Line 1335
	test	ecx, ecx
	mov	DWORD PTR _level_piece_id, ecx
	je	$L85794
; Line 1337
	movsx	eax, BYTE PTR _dung_map[eax]
	movzx	ecx, BYTE PTR _nTransTable[ecx]
	movzx	eax, BYTE PTR _TransList[eax]
	and	eax, ecx
	and	DWORD PTR _a6c$[ebp], 0
	mov	DWORD PTR _cel_transparency_active, eax
; Line 1338
	mov	eax, DWORD PTR _sy$[ebp]
	lea	ebx, DWORD PTR _screen_y_times_768[eax*4]
	mov	eax, DWORD PTR _gpBuffer
	add	eax, edi
	mov	ecx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [eax+ecx-24576]
	mov	DWORD PTR _a1b$[ebp], eax
; Line 1339
	mov	eax, DWORD PTR _dword_5A5594
	sar	eax, 1
	dec	eax
	test	eax, eax
	jle	SHORT $L85791
; Line 1340
	add	edx, 4
	mov	DWORD PTR _a5b$[ebp], edx
$L85789:
; Line 1342
	mov	eax, DWORD PTR _a6c$[ebp]
	cmp	DWORD PTR _a6$[ebp], eax
	jg	SHORT $L85793
; Line 1344
	mov	eax, DWORD PTR _a5b$[ebp]
	mov	ax, WORD PTR [eax]
	movzx	ecx, ax
; Line 1345
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85793
; Line 1346
	mov	ecx, DWORD PTR _a1b$[ebp]
	call	@drawLowerScreen@4
$L85793:
; Line 1351
	mov	eax, DWORD PTR _dword_5A5594
	sub	DWORD PTR _a1b$[ebp], 24576		; 00006000H
	inc	DWORD PTR _a6c$[ebp]
	add	DWORD PTR _a5b$[ebp], 4
	sar	eax, 1
	dec	eax
	cmp	DWORD PTR _a6c$[ebp], eax
	jl	SHORT $L85789
$L85791:
; Line 1353
	mov	ecx, DWORD PTR _a6$[ebp]
	lea	eax, DWORD PTR [ecx+ecx+2]
; Line 1354
	cmp	eax, 8
	jge	SHORT $L85794
; Line 1363
	push	0
	mov	edx, DWORD PTR _xa$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	edi
	push	eax
	lea	eax, DWORD PTR [eax+eax*2]
	push	ecx
	mov	ecx, DWORD PTR _gpBuffer
	push	esi
	shl	eax, 12					; 0000000cH
	sub	ecx, eax
	add	ecx, edi
	add	ecx, DWORD PTR [ebx]
	call	@scrollrt_draw_clipped_dungeon_2@32
$L85794:
	pop	edi
	pop	esi
	pop	ebx
; Line 1367
	leave
	ret	20					; 00000014H
@scrollrt_draw_lower_2@28 ENDP
_TEXT	ENDS
PUBLIC	@scrollrt_draw_clipped_e_flag_2@28
; Function compile flags: /Ogsy
;	COMDAT @scrollrt_draw_clipped_dungeon_2@32
_TEXT	SEGMENT
_buffer$ = -16
_x$ = -12
_y$ = 8
_a4$ = 12
_a5$ = 16
_sx$ = 20
_sy$ = 24
_me_flag$ = 28
_v17$ = -20
_v18$ = -28
_v43$ = -32
_v44$ = -24
_v47$ = -7
_v48$ = -6
_v49$ = -5
_v50$ = -4
_v51$ = -3
_v52$ = -2
_v53$ = -1
@scrollrt_draw_clipped_dungeon_2@32 PROC NEAR		; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 1374
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, edx
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	DWORD PTR _x$[ebp], eax
; Line 1424
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _y$[ebp]
	push	ebx
; Line 1438
	cmp	DWORD PTR _visiondebug, 0
	push	esi
	push	edi
	mov	cl, BYTE PTR _dFlags[eax]
	mov	bl, BYTE PTR _dDead[eax]
	mov	BYTE PTR _v53$[ebp], cl
	mov	cl, BYTE PTR _dObject[eax]
	mov	BYTE PTR _v50$[ebp], cl
	mov	cl, BYTE PTR _dItem[eax]
	mov	BYTE PTR _v52$[ebp], cl
	lea	ecx, DWORD PTR _dPlayer[eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _v51$[ebp], dl
	mov	dl, BYTE PTR _dArch[eax]
	mov	BYTE PTR _v49$[ebp], dl
	lea	edx, DWORD PTR _dMonster[eax*4]
	mov	al, BYTE PTR _dung_map[eax]
	mov	BYTE PTR _v47$[ebp], al
	mov	al, BYTE PTR [ecx-1]
	mov	BYTE PTR _v48$[ebp], al
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _v43$[ebp], eax
	mov	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _v44$[ebp], eax
	je	SHORT $L85861
	test	BYTE PTR _v53$[ebp], 64			; 00000040H
	je	SHORT $L85861
; Line 1439
	mov	edx, DWORD PTR _pSquareCel
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	8
	push	DWORD PTR _a5$[ebp]
	push	64					; 00000040H
	push	1
	call	@Cel2DecodeHdrOnly@24
$L85861:
; Line 1440
	cmp	DWORD PTR _MissilePreFlag, 0
	je	SHORT $L86869
	test	BYTE PTR _v53$[ebp], 1
	je	SHORT $L86869
; Line 1442
	mov	edi, DWORD PTR _sx$[ebp]
	push	1
	push	8
	mov	edx, DWORD PTR _y$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawClippedMissile@28
	jmp	SHORT $L85863
$L86869:
	mov	edi, DWORD PTR _sx$[ebp]
$L85863:
; Line 1446
	movsx	eax, BYTE PTR _lightmax
	cmp	DWORD PTR _light_table_index, eax
	jge	$L85875
; Line 1447
	test	bl, bl
	je	SHORT $L85873
; Line 1448
	movsx	ecx, bl
	mov	eax, ecx
; Line 1450
	mov	esi, edi
	and	eax, 31					; 0000001fH
	sar	ecx, 5
	lea	eax, DWORD PTR [eax+eax*2]
	and	ecx, 7
	shl	eax, 4
	lea	eax, DWORD PTR _dead[eax-48]
	mov	ecx, DWORD PTR [eax+ecx*4]
	sub	esi, DWORD PTR [eax+40]
; Line 1451
	test	ecx, ecx
	je	SHORT $L85873
; Line 1452
	mov	edx, DWORD PTR [eax+32]
; Line 1453
	cmp	edx, 1
	mov	DWORD PTR _v17$[ebp], edx
	jl	SHORT $L85873
	mov	edx, DWORD PTR [ecx]
	cmp	edx, 50					; 00000032H
	ja	SHORT $L85873
	cmp	DWORD PTR _v17$[ebp], edx
	jg	SHORT $L85873
; Line 1454
	mov	dl, BYTE PTR [eax+44]
	mov	BYTE PTR _v18$[ebp], dl
; Line 1455
	test	dl, dl
; Line 1456
	mov	edx, DWORD PTR _sy$[ebp]
	je	SHORT $L85871
	push	DWORD PTR _v18$[ebp]
	push	8
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+36]
	push	DWORD PTR _v17$[ebp]
	push	ecx
	mov	ecx, esi
	call	@Cl2DecodeFrm5@32
; Line 1457
	jmp	SHORT $L85873
$L85871:
; Line 1458
	push	8
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [eax+36]
	push	DWORD PTR _v17$[ebp]
	push	ecx
	mov	ecx, esi
	call	@Cl2DecodeFrm6@28
$L85873:
; Line 1462
	cmp	BYTE PTR _v50$[ebp], 0
	je	SHORT $L85875
; Line 1463
	push	8
	mov	edx, DWORD PTR _y$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	1
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawClippedObject@28
$L85875:
; Line 1465
	cmp	BYTE PTR _v52$[ebp], 0
	je	SHORT $L85883
; Line 1466
	movsx	ecx, BYTE PTR _v52$[ebp]
	mov	eax, ecx
	imul	eax, 368				; 00000170H
	lea	esi, DWORD PTR _item[eax-368]
; Line 1467
	cmp	DWORD PTR [esi+52], 0
	jne	SHORT $L85883
	cmp	BYTE PTR _v52$[ebp], 127		; 0000007fH
	ja	SHORT $L85883
; Line 1468
	mov	eax, DWORD PTR [esi+24]
; Line 1469
	test	eax, eax
	je	SHORT $L85883
; Line 1470
	mov	ebx, DWORD PTR [esi+32]
; Line 1471
	cmp	ebx, 1
	jl	SHORT $L85883
	mov	edx, DWORD PTR [eax]
	cmp	edx, 50					; 00000032H
	ja	SHORT $L85883
	cmp	ebx, edx
	ja	SHORT $L85883
; Line 1473
	movsx	edx, BYTE PTR _pcursitem
	mov	ebx, edi
	sub	ebx, DWORD PTR [esi+40]
	dec	ecx
	cmp	ecx, edx
	jne	SHORT $L85884
; Line 1474
	push	8
	mov	edx, ebx
	push	DWORD PTR _a5$[ebp]
	mov	cl, -75					; ffffffb5H
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	push	eax
	push	DWORD PTR _sy$[ebp]
	call	@CelDrawHdrClrHL@32
$L85884:
; Line 1475
	push	8
	mov	edx, DWORD PTR _sy$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, ebx
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	push	DWORD PTR [esi+24]
	call	@Cel2DecodeHdrLight@28
$L85883:
; Line 1480
	test	BYTE PTR _v53$[ebp], 32			; 00000020H
	je	$L85889
; Line 1481
	movsx	eax, BYTE PTR _v48$[ebp]
	or	ecx, -1
	sub	ecx, eax
; Line 1482
	cmp	ecx, 4
	jae	$L85889
; Line 1483
	mov	esi, ecx
; Line 1494
	push	8
	imul	esi, 21720				; 000054d8H
	push	DWORD PTR _a5$[ebp]
	add	esi, OFFSET FLAT:_plr
	mov	ebx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR [esi+144]
	mov	eax, DWORD PTR [esi+100]
	add	eax, DWORD PTR _sy$[ebp]
	push	DWORD PTR [esi+140]
	push	DWORD PTR [esi+124]
	push	eax
	mov	eax, DWORD PTR [esi+96]
	sub	eax, DWORD PTR [esi+148]
	add	eax, edi
	push	eax
	lea	eax, DWORD PTR [ebx-1]
	push	eax
	call	@DrawClippedPlayer@40
; Line 1495
	cmp	DWORD PTR _me_flag$[ebp], 0
	je	SHORT $L85889
; Line 1496
	mov	esi, DWORD PTR [esi+152]
; Line 1497
	test	esi, esi
	je	SHORT $L85889
; Line 1498
	cmp	esi, 2
	jne	SHORT $L85890
; Line 1499
	mov	eax, DWORD PTR _sy$[ebp]
	add	eax, -16				; fffffff0H
	push	eax
	lea	eax, DWORD PTR [edi-96]
	push	eax
	lea	eax, DWORD PTR [ebx+1]
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax-2]
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax-12384]
	call	@scrollrt_draw_clipped_e_flag_2@28
$L85890:
; Line 1500
	push	DWORD PTR _sy$[ebp]
	lea	eax, DWORD PTR [edi-64]
	inc	ebx
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	push	DWORD PTR _a5$[ebp]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _a4$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	push	ebx
	call	@scrollrt_draw_clipped_e_flag_2@28
$L85889:
; Line 1505
	test	BYTE PTR _v53$[ebp], 16			; 00000010H
	je	$L85899
	test	BYTE PTR _v53$[ebp], 64			; 00000040H
	jne	SHORT $L85892
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+464], 0
	je	$L85899
$L85892:
	cmp	DWORD PTR _v44$[ebp], 0
	jge	$L85899
; Line 1508
	or	ecx, -1
	or	eax, -1
	sub	ecx, DWORD PTR _v44$[ebp]
	sub	eax, DWORD PTR _v44$[ebp]
	cmp	ecx, 200				; 000000c8H
	mov	DWORD PTR _draw_monster_num, eax
	jae	$L85899
; Line 1509
	mov	esi, eax
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 1510
	test	BYTE PTR [esi+156], 1
	jne	$L85899
; Line 1511
	mov	ecx, DWORD PTR [esi+220]
; Line 1512
	test	ecx, ecx
	je	$L85899
; Line 1514
	mov	edi, DWORD PTR [esi+56]
	mov	ebx, DWORD PTR [esi+60]
	sub	edi, DWORD PTR [ecx+304]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 1515
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L85897
; Line 1516
	push	8
	mov	edx, edi
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [ecx+300]
	mov	cl, -23					; ffffffe9H
	push	DWORD PTR [esi+100]
	push	DWORD PTR [esi+84]
	push	ebx
	call	@Cl2DecodeClrHL@32
; Line 1517
	mov	eax, DWORD PTR _draw_monster_num
$L85897:
; Line 1519
	push	8
	push	DWORD PTR _a5$[ebp]
	push	eax
	push	ebx
	mov	ebx, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@DrawClippedMonster@28
; Line 1520
	cmp	DWORD PTR _me_flag$[ebp], 0
	je	SHORT $L86864
	cmp	DWORD PTR [esi+104], 0
	jne	SHORT $L86864
; Line 1521
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	inc	ebx
	push	eax
	mov	eax, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _a5$[ebp]
	lea	edx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [eax-64]
	push	DWORD PTR _a4$[ebp]
	push	ebx
	call	@scrollrt_draw_clipped_e_flag_2@28
$L86864:
	mov	edi, DWORD PTR _sx$[ebp]
$L85899:
; Line 1527
	test	BYTE PTR _v53$[ebp], 4
	je	SHORT $L85900
; Line 1528
	push	1
	push	8
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawDeadPlayer@28
$L85900:
; Line 1529
	cmp	BYTE PTR _v51$[ebp], 0
	jle	$L85904
; Line 1530
	movsx	ecx, BYTE PTR _v51$[ebp]
	dec	ecx
; Line 1531
	cmp	ecx, 4
	jae	$L85904
; Line 1532
	mov	esi, ecx
; Line 1543
	push	8
	imul	esi, 21720				; 000054d8H
	push	DWORD PTR _a5$[ebp]
	add	esi, OFFSET FLAT:_plr
	mov	ebx, DWORD PTR _x$[ebp]
	push	DWORD PTR [esi+144]
	mov	eax, DWORD PTR [esi+100]
	add	eax, DWORD PTR _sy$[ebp]
	mov	edx, ebx
	push	DWORD PTR [esi+140]
	push	DWORD PTR [esi+124]
	push	eax
	mov	eax, DWORD PTR [esi+96]
	sub	eax, DWORD PTR [esi+148]
	add	eax, edi
	push	eax
	push	DWORD PTR _y$[ebp]
	call	@DrawClippedPlayer@40
; Line 1544
	cmp	DWORD PTR _me_flag$[ebp], 0
	je	SHORT $L85904
; Line 1545
	mov	esi, DWORD PTR [esi+152]
; Line 1546
	test	esi, esi
	je	SHORT $L85904
; Line 1547
	cmp	esi, 2
	jne	SHORT $L85905
; Line 1548
	mov	eax, DWORD PTR _sy$[ebp]
	lea	edx, DWORD PTR [ebx-2]
	add	eax, -16				; fffffff0H
	push	eax
	lea	eax, DWORD PTR [edi-96]
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	push	DWORD PTR _a5$[ebp]
	inc	eax
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax-12384]
	call	@scrollrt_draw_clipped_e_flag_2@28
$L85905:
; Line 1549
	push	DWORD PTR _sy$[ebp]
	lea	eax, DWORD PTR [edi-64]
	lea	edx, DWORD PTR [ebx-1]
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	push	DWORD PTR _a5$[ebp]
	inc	eax
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@scrollrt_draw_clipped_e_flag_2@28
$L85904:
; Line 1554
	mov	ecx, DWORD PTR _v43$[ebp]
	test	ecx, ecx
	jle	$L85914
	test	BYTE PTR _v53$[ebp], 64			; 00000040H
	jne	SHORT $L85907
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+464], 0
	je	$L85914
$L85907:
; Line 1555
	lea	eax, DWORD PTR [ecx-1]
; Line 1557
	dec	ecx
	cmp	ecx, 200				; 000000c8H
	mov	DWORD PTR _draw_monster_num, eax
	jae	$L85914
; Line 1558
	mov	esi, eax
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 1559
	test	BYTE PTR [esi+156], 1
	jne	$L85914
; Line 1560
	mov	ecx, DWORD PTR [esi+220]
; Line 1561
	test	ecx, ecx
	je	$L85914
; Line 1563
	mov	edi, DWORD PTR [esi+56]
	mov	ebx, DWORD PTR [esi+60]
	sub	edi, DWORD PTR [ecx+304]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 1564
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L85912
; Line 1565
	push	8
	mov	edx, edi
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [ecx+300]
	mov	cl, -23					; ffffffe9H
	push	DWORD PTR [esi+100]
	push	DWORD PTR [esi+84]
	push	ebx
	call	@Cl2DecodeClrHL@32
; Line 1566
	mov	eax, DWORD PTR _draw_monster_num
$L85912:
; Line 1568
	push	8
	push	DWORD PTR _a5$[ebp]
	push	eax
	push	ebx
	mov	ebx, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@DrawClippedMonster@28
; Line 1569
	cmp	DWORD PTR _me_flag$[ebp], 0
	je	SHORT $L86867
	cmp	DWORD PTR [esi+104], 0
	jne	SHORT $L86867
; Line 1570
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	inc	ebx
	push	eax
	mov	eax, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _a5$[ebp]
	lea	edx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [eax-64]
	push	DWORD PTR _a4$[ebp]
	push	ebx
	call	@scrollrt_draw_clipped_e_flag_2@28
$L86867:
	mov	edi, DWORD PTR _sx$[ebp]
$L85914:
; Line 1576
	test	BYTE PTR _v53$[ebp], 1
	je	SHORT $L85915
; Line 1577
	push	0
	push	8
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawClippedMissile@28
$L85915:
; Line 1578
	cmp	BYTE PTR _v50$[ebp], 0
	je	SHORT $L85916
	movsx	eax, BYTE PTR _lightmax
	cmp	DWORD PTR _light_table_index, eax
	jge	SHORT $L85916
; Line 1579
	push	8
	mov	edx, DWORD PTR _y$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	0
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawClippedObject@28
$L85916:
; Line 1580
	cmp	BYTE PTR _v52$[ebp], 0
	je	SHORT $L85925
; Line 1581
	movsx	edx, BYTE PTR _v52$[ebp]
	mov	eax, edx
	imul	eax, 368				; 00000170H
	lea	esi, DWORD PTR _item[eax-368]
; Line 1582
	cmp	DWORD PTR [esi+52], 0
	je	SHORT $L85925
; Line 1583
	cmp	BYTE PTR _v52$[ebp], 127		; 0000007fH
	ja	SHORT $L85925
; Line 1584
	mov	eax, DWORD PTR [esi+24]
; Line 1585
	test	eax, eax
	je	SHORT $L85925
; Line 1586
	mov	ecx, DWORD PTR [esi+32]
; Line 1587
	cmp	ecx, 1
	jl	SHORT $L85925
	mov	ebx, DWORD PTR [eax]
	cmp	ebx, 50					; 00000032H
	ja	SHORT $L85925
	cmp	ecx, ebx
	ja	SHORT $L85925
; Line 1589
	movsx	ebx, BYTE PTR _pcursitem
	sub	edi, DWORD PTR [esi+40]
	dec	edx
	cmp	edx, ebx
	jne	SHORT $L85926
; Line 1590
	push	8
	mov	edx, edi
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR [esi+36]
	push	ecx
	push	eax
	push	DWORD PTR _sy$[ebp]
	mov	cl, -75					; ffffffb5H
	call	@CelDrawHdrClrHL@32
$L85926:
; Line 1598
	push	8
	mov	edx, DWORD PTR _sy$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, edi
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	push	DWORD PTR [esi+24]
	call	@Cel2DecodeHdrLight@28
$L85925:
; Line 1604
	cmp	BYTE PTR _v49$[ebp], 0
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $L85928
; Line 1605
	movsx	eax, BYTE PTR _v47$[ebp]
; Line 1606
	mov	edx, DWORD PTR _level_special_cel
	mov	ecx, DWORD PTR _buffer$[ebp]
	movzx	eax, BYTE PTR _TransList[eax]
	push	8
	mov	DWORD PTR _cel_transparency_active, eax
	push	DWORD PTR _a5$[ebp]
	movsx	eax, BYTE PTR _v49$[ebp]
	push	64					; 00000040H
	push	eax
	call	@Cel2DecodeLightTrans@24
$L85928:
; Line 1608
	leave
	ret	24					; 00000018H
@scrollrt_draw_clipped_dungeon_2@32 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @scrollrt_draw_clipped_e_flag_2@28
_TEXT	SEGMENT
_buffer$ = -8
_x$ = -4
_y$ = 8
_a4$ = 12
_a5$ = 16
_sx$ = 20
_sy$ = 24
_v20$ = -20
_v21$ = -16
_v22$ = -12
@scrollrt_draw_clipped_e_flag_2@28 PROC NEAR		; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 1618
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, edx
; Line 1642
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	imul	eax, 112				; 00000070H
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	ecx, DWORD PTR _light_table_index
	mov	DWORD PTR _v22$[ebp], ecx
	mov	ecx, DWORD PTR _cel_transparency_active
	mov	DWORD PTR _v21$[ebp], ecx
	mov	ecx, DWORD PTR _level_piece_id
	add	eax, edx
	push	ebx
; Line 1648
	mov	ebx, DWORD PTR _a4$[ebp]
	push	esi
; Line 1650
	movsx	esi, BYTE PTR _dTransVal[eax]
	mov	DWORD PTR _v20$[ebp], ecx
	mov	ecx, DWORD PTR _dPiece[eax*4]
; Line 1651
	movsx	eax, BYTE PTR _dung_map[eax]
	mov	DWORD PTR _level_piece_id, ecx
	push	edi
	movzx	eax, BYTE PTR _TransList[eax]
	movzx	ecx, BYTE PTR _nTransTable[ecx]
	lea	edi, DWORD PTR [ebx+ebx*2]
	and	eax, ecx
; Line 1652
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _light_table_index, esi
	shl	edi, 13					; 0000000dH
	add	edi, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _cel_transparency_active, eax
	call	@gendung_get_dpiece_num_from_coord@8
	mov	esi, eax
	shl	esi, 5
	add	esi, OFFSET FLAT:_dpiece_defs_map_1
; Line 1653
	test	ebx, ebx
	jne	SHORT $L85968
; Line 1655
	mov	ax, WORD PTR [esi+4]
	movzx	ecx, ax
; Line 1656
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L85969
; Line 1657
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85969:
; Line 1659
	mov	ax, WORD PTR [esi+6]
	movzx	ecx, ax
; Line 1660
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $LABEL_10$85971
; Line 1661
	lea	ecx, DWORD PTR [edi+32]
	call	@drawLowerScreen@4
; Line 1662
	jmp	SHORT $LABEL_10$85971
$L85968:
; Line 1664
	cmp	ebx, 1
	jne	$L85972
$LABEL_10$85971:
; Line 1667
	movzx	eax, WORD PTR [esi+8]
	sub	edi, 24576				; 00006000H
	mov	DWORD PTR _level_cel_block, eax
; Line 1668
	test	eax, eax
	je	SHORT $L85973
; Line 1669
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85973:
; Line 1671
	mov	ax, WORD PTR [esi+10]
	movzx	ecx, ax
; Line 1672
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $LABEL_14$85975
; Line 1673
	lea	ecx, DWORD PTR [edi+32]
	call	@drawLowerScreen@4
$LABEL_14$85975:
; Line 1683
	movzx	eax, WORD PTR [esi+12]
	sub	edi, 24576				; 00006000H
	mov	DWORD PTR _level_cel_block, eax
; Line 1684
	test	eax, eax
	je	SHORT $L85980
; Line 1685
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85980:
; Line 1687
	mov	ax, WORD PTR [esi+14]
	movzx	ecx, ax
; Line 1688
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $LABEL_18$85979
; Line 1689
	lea	ecx, DWORD PTR [edi+32]
	call	@drawLowerScreen@4
$LABEL_18$85979:
; Line 1692
	movzx	eax, WORD PTR [esi+16]
	add	edi, -24576				; ffffa000H
	mov	DWORD PTR _level_cel_block, eax
; Line 1693
	test	eax, eax
	je	SHORT $L85982
; Line 1694
	mov	ecx, edi
	call	@drawLowerScreen@4
$L85982:
; Line 1696
	mov	si, WORD PTR [esi+18]
	movzx	eax, si
; Line 1697
	test	si, si
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $LABEL_22$85978
; Line 1698
	lea	ecx, DWORD PTR [edi+32]
	call	@drawLowerScreen@4
$LABEL_22$85978:
; Line 1700
	cmp	DWORD PTR _a5$[ebp], 8
	jge	SHORT $L85984
; Line 1701
	push	0
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _sx$[ebp]
	push	DWORD PTR _a5$[ebp]
	push	ebx
	push	DWORD PTR _y$[ebp]
	call	@scrollrt_draw_clipped_dungeon_2@32
$L85984:
; Line 1702
	mov	eax, DWORD PTR _v22$[ebp]
	pop	edi
	mov	DWORD PTR _light_table_index, eax
; Line 1703
	mov	eax, DWORD PTR _v21$[ebp]
	mov	DWORD PTR _cel_transparency_active, eax
; Line 1704
	mov	eax, DWORD PTR _v20$[ebp]
	pop	esi
	mov	DWORD PTR _level_piece_id, eax
	pop	ebx
; Line 1705
	leave
	ret	20					; 00000014H
$L85972:
; Line 1676
	cmp	ebx, 2
	je	$LABEL_14$85975
; Line 1677
	cmp	ebx, 3
	jne	SHORT $LABEL_22$85978
; Line 1679
	jmp	$LABEL_18$85979
@scrollrt_draw_clipped_e_flag_2@28 ENDP
_TEXT	ENDS
PUBLIC	@scrollrt_draw_dungeon@32
EXTRN	@drawUpperScreen@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @scrollrt_draw_upper@28
_TEXT	SEGMENT
_x$ = -20
_y$ = -8
_sx$ = 8
_sy$ = 12
_a5$ = 16
_a6$ = 20
_some_flag$ = 24
_v20$ = -8
_v40$ = -20
_a5a$ = -12
_ya$ = -16
_xa$ = -4
_i$ = 16
@scrollrt_draw_upper@28 PROC NEAR			; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1712
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _y$[ebp], edx
	mov	DWORD PTR _x$[ebp], ecx
; Line 1753
	mov	esi, edx
; Line 1754
	mov	ebx, ecx
; Line 1755
	mov	DWORD PTR _ya$[ebp], edx
; Line 1756
	mov	DWORD PTR _xa$[ebp], ecx
; Line 1757
	call	@gendung_get_dpiece_num_from_coord@8
; Line 1758
	mov	edx, DWORD PTR _a6$[ebp]
	mov	edi, eax
; Line 1759
	push	8
	shl	edi, 5
	lea	ecx, DWORD PTR [edx+edx+2]
	pop	eax
	add	edi, OFFSET FLAT:_dpiece_defs_map_1
	cmp	ecx, eax
	mov	DWORD PTR _a5a$[ebp], ecx
	jle	SHORT $L86041
; Line 1760
	mov	DWORD PTR _a5a$[ebp], eax
$L86041:
; Line 1761
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	$L86042
; Line 1762
	cmp	DWORD PTR _y$[ebp], 0
	jl	$L86059
	cmp	DWORD PTR _y$[ebp], 112			; 00000070H
	jge	$L86059
	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jl	$L86059
	cmp	eax, 112				; 00000070H
	jge	$L86059
; Line 1763
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _y$[ebp]
; Line 1765
	movsx	esi, BYTE PTR _dTransVal[eax]
	mov	ecx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _light_table_index, esi
; Line 1767
	test	ecx, ecx
	mov	DWORD PTR _level_piece_id, ecx
	je	$L86044
; Line 1768
	movsx	eax, BYTE PTR _dung_map[eax]
	movzx	ecx, BYTE PTR _nTransTable[ecx]
	movzx	eax, BYTE PTR _TransList[eax]
	and	eax, ecx
; Line 1770
	mov	ecx, DWORD PTR _sx$[ebp]
	mov	DWORD PTR _cel_transparency_active, eax
	mov	eax, DWORD PTR _sy$[ebp]
	lea	esi, DWORD PTR _screen_y_times_768[eax*4]
	mov	eax, DWORD PTR [esi]
	add	eax, DWORD PTR _gpBuffer
; Line 1771
	test	edx, edx
	lea	ebx, DWORD PTR [eax+ecx+32]
	jl	SHORT $L86049
; Line 1773
	mov	ax, WORD PTR [edi+2]
	movzx	ecx, ax
; Line 1774
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L86049
; Line 1776
	mov	ecx, ebx
	mov	BYTE PTR _arch_draw_type, 2
	call	@drawUpperScreen@4
; Line 1777
	and	BYTE PTR _arch_draw_type, 0
$L86049:
; Line 1780
	add	ebx, -24576				; ffffa000H
; Line 1781
	cmp	DWORD PTR _a6$[ebp], 1
	jl	SHORT $L86053
; Line 1783
	mov	ax, WORD PTR [edi+6]
	movzx	ecx, ax
; Line 1784
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L86053
; Line 1785
	mov	ecx, ebx
	call	@drawUpperScreen@4
$L86053:
; Line 1787
	add	ebx, -24576				; ffffa000H
; Line 1788
	cmp	DWORD PTR _a6$[ebp], 2
	jl	SHORT $L86055
; Line 1790
	mov	ax, WORD PTR [edi+10]
	movzx	ecx, ax
; Line 1791
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L86055
; Line 1792
	mov	ecx, ebx
	call	@drawUpperScreen@4
$L86055:
; Line 1794
	cmp	DWORD PTR _a6$[ebp], 3
	jl	SHORT $L86057
; Line 1796
	mov	ax, WORD PTR [edi+14]
	movzx	ecx, ax
; Line 1797
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L86057
; Line 1798
	lea	ecx, DWORD PTR [ebx-24576]
	call	@drawUpperScreen@4
$L86057:
; Line 1801
	push	0
	mov	ecx, DWORD PTR [esi]
	push	DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _gpBuffer
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sx$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
	push	DWORD PTR _a5a$[ebp]
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _y$[ebp]
	call	@scrollrt_draw_dungeon@32
; Line 1802
	jmp	SHORT $L86059
$L86044:
; Line 1803
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _sx$[ebp]
	call	@world_draw_black_tile@4
$L86059:
; Line 1807
	mov	eax, DWORD PTR _x$[ebp]
	add	DWORD PTR _sx$[ebp], 64			; 00000040H
; Line 1809
	dec	DWORD PTR _a5$[ebp]
; Line 1812
	add	edi, 32					; 00000020H
	lea	ebx, DWORD PTR [eax+1]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _xa$[ebp], ebx
	lea	esi, DWORD PTR [eax-1]
	mov	DWORD PTR _ya$[ebp], esi
$L86042:
; Line 1814
	mov	eax, DWORD PTR _a5$[ebp]
	test	eax, eax
	jle	$L86064
; Line 1815
	imul	ebx, 112				; 00000070H
	mov	DWORD PTR _v20$[ebp], ebx
; Line 1817
	mov	DWORD PTR _v40$[ebp], eax
$L86062:
; Line 1819
	test	esi, esi
	jl	$L86078
	cmp	esi, 112				; 00000070H
	jge	$L86078
	test	ebx, ebx
	jl	$L86078
	cmp	ebx, 12544				; 00003100H
	jge	$L86078
; Line 1820
	lea	eax, DWORD PTR [ebx+esi]
; Line 1821
	movsx	ecx, BYTE PTR _dTransVal[eax]
	mov	edx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _light_table_index, ecx
; Line 1823
	test	edx, edx
	mov	DWORD PTR _level_piece_id, edx
	je	$L86066
; Line 1829
	movsx	eax, BYTE PTR _dung_map[eax]
	movzx	edx, BYTE PTR _nTransTable[edx]
	movzx	eax, BYTE PTR _TransList[eax]
	and	eax, edx
	mov	BYTE PTR _arch_draw_type, 1
	mov	DWORD PTR _cel_transparency_active, eax
	mov	eax, DWORD PTR _sy$[ebp]
	movzx	ecx, WORD PTR [edi]
	lea	ebx, DWORD PTR _screen_y_times_768[eax*4]
; Line 1830
	mov	DWORD PTR _level_cel_block, ecx
; Line 1908
	mov	esi, DWORD PTR [ebx]
	add	esi, DWORD PTR _gpBuffer
	add	esi, DWORD PTR _sx$[ebp]
	test	ecx, ecx
	je	SHORT $L86069
	mov	ecx, esi
	call	@drawUpperScreen@4
$L86069:
	movzx	eax, WORD PTR [edi+2]
	test	eax, eax
	mov	BYTE PTR _arch_draw_type, 2
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L86070
	lea	ecx, DWORD PTR [esi+32]
	call	@drawUpperScreen@4
$L86070:
	mov	ecx, DWORD PTR _dword_5A5594
	and	BYTE PTR _arch_draw_type, 0
	xor	eax, eax
	sar	ecx, 1
	inc	eax
	dec	ecx
	cmp	ecx, eax
	mov	DWORD PTR _i$[ebp], eax
	jle	SHORT $L86073
$L86071:
; Line 1842
	mov	eax, DWORD PTR _i$[ebp]
	sub	esi, 24576				; 00006000H
	cmp	DWORD PTR _a6$[ebp], eax
	jl	SHORT $L86072
; Line 1843
	movzx	eax, WORD PTR [edi+eax*4]
; Line 1845
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L86075
; Line 1846
	mov	ecx, esi
	call	@drawUpperScreen@4
$L86075:
; Line 1847
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, WORD PTR [edi+eax*4+2]
; Line 1849
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L86072
	lea	ecx, DWORD PTR [esi+32]
; Line 1850
	call	@drawUpperScreen@4
$L86072:
	mov	eax, DWORD PTR _dword_5A5594
	inc	DWORD PTR _i$[ebp]
	sar	eax, 1
	dec	eax
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $L86071
$L86073:
; Line 1853
	push	1
	mov	ecx, DWORD PTR [ebx]
	push	DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _gpBuffer
	mov	esi, DWORD PTR _ya$[ebp]
	mov	edx, DWORD PTR _xa$[ebp]
	push	DWORD PTR _sx$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
	push	DWORD PTR _a5a$[ebp]
	push	DWORD PTR _a6$[ebp]
	push	esi
	call	@scrollrt_draw_dungeon@32
; Line 1856
	jmp	SHORT $L86078
$L86066:
; Line 1857
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _sx$[ebp]
	call	@world_draw_black_tile@4
$L86078:
; Line 1862
	mov	ebx, DWORD PTR _v20$[ebp]
	inc	DWORD PTR _xa$[ebp]
	add	DWORD PTR _sx$[ebp], 64			; 00000040H
; Line 1865
	mov	eax, DWORD PTR _v40$[ebp]
	add	ebx, 112				; 00000070H
	dec	esi
	add	edi, 32					; 00000020H
	dec	DWORD PTR _v40$[ebp]
	cmp	eax, 1
	mov	DWORD PTR _v20$[ebp], ebx
	jne	SHORT $L86902
	mov	al, al
	jmp	SHORT $L86903
$L86902:
	xor	al, al
$L86903:
; Line 1868
	test	al, al
	mov	DWORD PTR _ya$[ebp], esi
	je	$L86062
$L86064:
; Line 1870
	cmp	DWORD PTR _some_flag$[ebp], 0
	je	$L86093
	test	esi, esi
	jl	$L86093
	cmp	esi, 112				; 00000070H
	jge	$L86093
	mov	eax, DWORD PTR _xa$[ebp]
	test	eax, eax
	jl	$L86093
	cmp	eax, 112				; 00000070H
	jge	$L86093
; Line 1871
	imul	eax, 112				; 00000070H
	add	eax, esi
; Line 1873
	movsx	edx, BYTE PTR _dTransVal[eax]
	mov	ecx, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR _light_table_index, edx
; Line 1875
	test	ecx, ecx
	mov	DWORD PTR _level_piece_id, ecx
	je	$L86081
; Line 1877
	movsx	eax, BYTE PTR _dung_map[eax]
	movzx	ecx, BYTE PTR _nTransTable[ecx]
	movzx	eax, BYTE PTR _TransList[eax]
	and	eax, ecx
	mov	BYTE PTR _arch_draw_type, 1
	mov	DWORD PTR _cel_transparency_active, eax
; Line 1878
	mov	eax, DWORD PTR _sy$[ebp]
	lea	ebx, DWORD PTR _screen_y_times_768[eax*4]
	mov	esi, DWORD PTR [ebx]
	add	esi, DWORD PTR _gpBuffer
	add	esi, DWORD PTR _sx$[ebp]
; Line 1879
	cmp	DWORD PTR _a6$[ebp], 0
	jl	SHORT $L86085
; Line 1881
	mov	ax, WORD PTR [edi]
	movzx	ecx, ax
; Line 1882
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L86085
; Line 1883
	mov	ecx, esi
	call	@drawUpperScreen@4
$L86085:
; Line 1885
	and	BYTE PTR _arch_draw_type, 0
; Line 1886
	add	esi, -24576				; ffffa000H
; Line 1887
	cmp	DWORD PTR _a6$[ebp], 1
	jl	SHORT $L86087
; Line 1889
	mov	ax, WORD PTR [edi+4]
	movzx	ecx, ax
; Line 1890
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L86087
; Line 1891
	mov	ecx, esi
	call	@drawUpperScreen@4
$L86087:
; Line 1893
	add	esi, -24576				; ffffa000H
; Line 1894
	cmp	DWORD PTR _a6$[ebp], 2
	jl	SHORT $L86089
; Line 1896
	mov	ax, WORD PTR [edi+8]
	movzx	ecx, ax
; Line 1897
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L86089
; Line 1898
	mov	ecx, esi
	call	@drawUpperScreen@4
$L86089:
; Line 1900
	cmp	DWORD PTR _a6$[ebp], 3
	jl	SHORT $L86091
; Line 1902
	mov	di, WORD PTR [edi+12]
	movzx	eax, di
; Line 1903
	test	di, di
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L86091
; Line 1904
	lea	ecx, DWORD PTR [esi-24576]
	call	@drawUpperScreen@4
$L86091:
; Line 1906
	push	0
	mov	ecx, DWORD PTR [ebx]
	push	DWORD PTR _sy$[ebp]
	add	ecx, DWORD PTR _gpBuffer
	mov	edx, DWORD PTR _xa$[ebp]
	push	DWORD PTR _sx$[ebp]
	add	ecx, DWORD PTR _sx$[ebp]
	push	DWORD PTR _a5a$[ebp]
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _ya$[ebp]
	call	@scrollrt_draw_dungeon@32
; Line 1907
	jmp	SHORT $L86093
$L86081:
; Line 1908
	mov	eax, DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _screen_y_times_768[eax*4]
	add	ecx, DWORD PTR _gpBuffer
	add	ecx, DWORD PTR _sx$[ebp]
	call	@world_draw_black_tile@4
$L86093:
	pop	edi
	pop	esi
	pop	ebx
; Line 1911
	leave
	ret	20					; 00000014H
@scrollrt_draw_upper@28 ENDP
_TEXT	ENDS
PUBLIC	@DrawMonster@28
PUBLIC	@DrawObject@28
PUBLIC	@scrollrt_draw_e_flag@28
EXTRN	@CelDecodeHdrOnly@24:NEAR
EXTRN	@CelDecodeHdrLightOnly@28:NEAR
EXTRN	@CelDecodeHdrLightTrans@24:NEAR
EXTRN	@CelDecodeClr@32:NEAR
; Function compile flags: /Ogsy
;	COMDAT @scrollrt_draw_dungeon@32
_TEXT	SEGMENT
_buffer$ = -16
_x$ = -12
_y$ = 8
_a4$ = 12
_a5$ = 16
_sx$ = 20
_sy$ = 24
_me_flag$ = 28
_v17$ = -24
_v42$ = -28
_v43$ = -20
_v46$ = -7
_v47$ = -6
_v48$ = -5
_v49$ = -4
_v50$ = -3
_v51$ = -2
_v52$ = -1
@scrollrt_draw_dungeon@32 PROC NEAR			; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 1919
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, edx
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	DWORD PTR _x$[ebp], eax
; Line 1968
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _y$[ebp]
	push	ebx
	push	esi
; Line 1982
	xor	esi, esi
	cmp	DWORD PTR _visiondebug, esi
	push	edi
	mov	cl, BYTE PTR _dFlags[eax]
	mov	bl, BYTE PTR _dDead[eax]
	mov	BYTE PTR _v52$[ebp], cl
	mov	cl, BYTE PTR _dObject[eax]
	mov	BYTE PTR _v49$[ebp], cl
	mov	cl, BYTE PTR _dItem[eax]
	mov	BYTE PTR _v51$[ebp], cl
	lea	ecx, DWORD PTR _dPlayer[eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _v50$[ebp], dl
	mov	dl, BYTE PTR _dArch[eax]
	mov	BYTE PTR _v48$[ebp], dl
	lea	edx, DWORD PTR _dMonster[eax*4]
	mov	al, BYTE PTR _dung_map[eax]
	mov	BYTE PTR _v46$[ebp], al
	mov	al, BYTE PTR [ecx-1]
	mov	BYTE PTR _v47$[ebp], al
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _v42$[ebp], eax
	mov	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _v43$[ebp], eax
	je	SHORT $L86159
	test	BYTE PTR _v52$[ebp], 64			; 00000040H
	je	SHORT $L86159
; Line 1983
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _pSquareCel
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	esi
	push	64					; 00000040H
	push	1
	call	@CelDecodeHdrOnly@24
$L86159:
; Line 1984
	cmp	DWORD PTR _MissilePreFlag, esi
	je	SHORT $L86923
	test	BYTE PTR _v52$[ebp], 1
	je	SHORT $L86923
; Line 1985
	push	1
	mov	edi, DWORD PTR _sx$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	esi
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawMissile@28
	jmp	SHORT $L86161
$L86923:
	mov	edi, DWORD PTR _sx$[ebp]
$L86161:
; Line 1986
	movsx	eax, BYTE PTR _lightmax
	cmp	DWORD PTR _light_table_index, eax
	jge	$L86172
; Line 1987
	test	bl, bl
	je	SHORT $L86170
; Line 1988
	movsx	ecx, bl
	mov	eax, ecx
; Line 1990
	mov	esi, edi
	and	eax, 31					; 0000001fH
	sar	ecx, 5
	lea	eax, DWORD PTR [eax+eax*2]
	and	ecx, 7
	shl	eax, 4
	lea	eax, DWORD PTR _dead[eax-48]
	mov	ecx, DWORD PTR [eax+ecx*4]
	sub	esi, DWORD PTR [eax+40]
; Line 1991
	test	ecx, ecx
	je	SHORT $L86170
; Line 1992
	mov	edx, DWORD PTR [eax+32]
; Line 1993
	cmp	edx, 1
	jl	SHORT $L86170
	mov	ebx, DWORD PTR [ecx]
	cmp	ebx, 50					; 00000032H
	ja	SHORT $L86170
	cmp	edx, ebx
	jg	SHORT $L86170
; Line 1994
	mov	bl, BYTE PTR [eax+44]
; Line 1995
	test	bl, bl
	mov	BYTE PTR _v17$[ebp], bl
	je	SHORT $L86168
; Line 1996
	push	DWORD PTR _v17$[ebp]
	push	DWORD PTR _a5$[ebp]
	push	0
	push	DWORD PTR [eax+36]
	push	edx
	mov	edx, DWORD PTR _sy$[ebp]
	push	ecx
	mov	ecx, esi
	call	@Cl2DecodeFrm3@32
; Line 1997
	jmp	SHORT $L86170
$L86168:
; Line 1998
	push	DWORD PTR _a5$[ebp]
	push	0
	push	DWORD PTR [eax+36]
	push	edx
	mov	edx, DWORD PTR _sy$[ebp]
	push	ecx
	mov	ecx, esi
	call	@Cl2DecodeLightTbl@28
$L86170:
; Line 2002
	cmp	BYTE PTR _v49$[ebp], 0
	je	SHORT $L86172
; Line 2003
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	0
	push	1
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawObject@28
$L86172:
; Line 2005
	cmp	BYTE PTR _v51$[ebp], 0
	je	SHORT $L86180
; Line 2006
	movsx	ecx, BYTE PTR _v51$[ebp]
	mov	eax, ecx
	imul	eax, 368				; 00000170H
	lea	esi, DWORD PTR _item[eax-368]
; Line 2007
	cmp	DWORD PTR [esi+52], 0
	jne	SHORT $L86180
	cmp	BYTE PTR _v51$[ebp], 127		; 0000007fH
	ja	SHORT $L86180
; Line 2008
	mov	eax, DWORD PTR [esi+24]
; Line 2009
	test	eax, eax
	je	SHORT $L86180
; Line 2010
	mov	ebx, DWORD PTR [esi+32]
; Line 2011
	cmp	ebx, 1
	jl	SHORT $L86180
	mov	edx, DWORD PTR [eax]
	cmp	edx, 50					; 00000032H
	ja	SHORT $L86180
	cmp	ebx, edx
	ja	SHORT $L86180
; Line 2013
	movsx	edx, BYTE PTR _pcursitem
	mov	ebx, edi
	sub	ebx, DWORD PTR [esi+40]
	dec	ecx
	cmp	ecx, edx
	jne	SHORT $L86181
; Line 2014
	push	DWORD PTR _a5$[ebp]
	mov	edx, ebx
	mov	cl, 181					; 000000b5H
	push	0
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	push	eax
	push	DWORD PTR _sy$[ebp]
	call	@CelDecodeClr@32
$L86181:
; Line 2015
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, ebx
	push	0
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	push	DWORD PTR [esi+24]
	call	@CelDecodeHdrLightOnly@28
$L86180:
; Line 2020
	test	BYTE PTR _v52$[ebp], 32			; 00000020H
	je	$L86186
; Line 2021
	movsx	eax, BYTE PTR _v47$[ebp]
	or	ecx, -1
	sub	ecx, eax
; Line 2022
	cmp	ecx, 4
	jae	$L86186
; Line 2023
	mov	esi, ecx
; Line 2034
	push	DWORD PTR _a5$[ebp]
	imul	esi, 21720				; 000054d8H
	add	esi, OFFSET FLAT:_plr
	push	0
	mov	ebx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR [esi+144]
	mov	eax, DWORD PTR [esi+100]
	add	eax, DWORD PTR _sy$[ebp]
	push	DWORD PTR [esi+140]
	push	DWORD PTR [esi+124]
	push	eax
	mov	eax, DWORD PTR [esi+96]
	sub	eax, DWORD PTR [esi+148]
	add	eax, edi
	push	eax
	lea	eax, DWORD PTR [ebx-1]
	push	eax
	call	@DrawPlayer@40
; Line 2035
	cmp	DWORD PTR _me_flag$[ebp], 0
	je	SHORT $L86186
; Line 2036
	mov	esi, DWORD PTR [esi+152]
; Line 2037
	test	esi, esi
	je	SHORT $L86186
; Line 2038
	cmp	esi, 2
	jne	SHORT $L86187
; Line 2039
	mov	eax, DWORD PTR _sy$[ebp]
	add	eax, -16				; fffffff0H
	push	eax
	lea	eax, DWORD PTR [edi-96]
	push	eax
	lea	eax, DWORD PTR [ebx+1]
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax-2]
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax-12384]
	call	@scrollrt_draw_e_flag@28
$L86187:
; Line 2040
	push	DWORD PTR _sy$[ebp]
	lea	eax, DWORD PTR [edi-64]
	inc	ebx
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	push	DWORD PTR _a5$[ebp]
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _a4$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	push	ebx
	call	@scrollrt_draw_e_flag@28
$L86186:
; Line 2045
	test	BYTE PTR _v52$[ebp], 16			; 00000010H
	je	$L86196
	test	BYTE PTR _v52$[ebp], 64			; 00000040H
	jne	SHORT $L86189
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+464], 0
	je	$L86196
$L86189:
	cmp	DWORD PTR _v43$[ebp], 0
	jge	$L86196
; Line 2048
	or	ecx, -1
	or	eax, -1
	sub	ecx, DWORD PTR _v43$[ebp]
	sub	eax, DWORD PTR _v43$[ebp]
	cmp	ecx, 200				; 000000c8H
	mov	DWORD PTR _draw_monster_num, eax
	jae	$L86196
; Line 2049
	mov	esi, eax
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 2050
	test	BYTE PTR [esi+156], 1
	jne	$L86196
; Line 2051
	mov	ecx, DWORD PTR [esi+220]
; Line 2052
	test	ecx, ecx
	je	$L86196
; Line 2054
	mov	edi, DWORD PTR [esi+56]
	mov	ebx, DWORD PTR [esi+60]
	sub	edi, DWORD PTR [ecx+304]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 2055
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L86194
; Line 2056
	push	DWORD PTR _a5$[ebp]
	mov	edx, edi
	push	0
	push	DWORD PTR [ecx+300]
	mov	cl, -23					; ffffffe9H
	push	DWORD PTR [esi+100]
	push	DWORD PTR [esi+84]
	push	ebx
	call	@Cl2DecodeFrm2@32
; Line 2057
	mov	eax, DWORD PTR _draw_monster_num
$L86194:
; Line 2059
	push	DWORD PTR _a5$[ebp]
	push	0
	push	eax
	push	ebx
	mov	ebx, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@DrawMonster@28
; Line 2060
	cmp	DWORD PTR _me_flag$[ebp], 0
	je	SHORT $L86918
	cmp	DWORD PTR [esi+104], 0
	jne	SHORT $L86918
; Line 2061
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	inc	ebx
	push	eax
	mov	eax, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _a5$[ebp]
	lea	edx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [eax-64]
	push	DWORD PTR _a4$[ebp]
	push	ebx
	call	@scrollrt_draw_e_flag@28
$L86918:
	mov	edi, DWORD PTR _sx$[ebp]
$L86196:
; Line 2066
	test	BYTE PTR _v52$[ebp], 4
	je	SHORT $L86197
; Line 2067
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	0
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawDeadPlayer@28
$L86197:
; Line 2068
	cmp	BYTE PTR _v50$[ebp], 0
	jle	$L86201
; Line 2069
	movsx	ecx, BYTE PTR _v50$[ebp]
	dec	ecx
; Line 2070
	cmp	ecx, 4
	jae	$L86201
; Line 2071
	mov	esi, ecx
; Line 2082
	push	DWORD PTR _a5$[ebp]
	imul	esi, 21720				; 000054d8H
	add	esi, OFFSET FLAT:_plr
	push	0
	mov	ebx, DWORD PTR _x$[ebp]
	push	DWORD PTR [esi+144]
	mov	eax, DWORD PTR [esi+100]
	add	eax, DWORD PTR _sy$[ebp]
	mov	edx, ebx
	push	DWORD PTR [esi+140]
	push	DWORD PTR [esi+124]
	push	eax
	mov	eax, DWORD PTR [esi+96]
	sub	eax, DWORD PTR [esi+148]
	add	eax, edi
	push	eax
	push	DWORD PTR _y$[ebp]
	call	@DrawPlayer@40
; Line 2083
	cmp	DWORD PTR _me_flag$[ebp], 0
	je	SHORT $L86201
; Line 2084
	mov	esi, DWORD PTR [esi+152]
; Line 2085
	test	esi, esi
	je	SHORT $L86201
; Line 2086
	cmp	esi, 2
	jne	SHORT $L86202
; Line 2087
	mov	eax, DWORD PTR _sy$[ebp]
	lea	edx, DWORD PTR [ebx-2]
	add	eax, -16				; fffffff0H
	push	eax
	lea	eax, DWORD PTR [edi-96]
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	push	DWORD PTR _a5$[ebp]
	inc	eax
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax-12384]
	call	@scrollrt_draw_e_flag@28
$L86202:
; Line 2088
	push	DWORD PTR _sy$[ebp]
	lea	eax, DWORD PTR [edi-64]
	lea	edx, DWORD PTR [ebx-1]
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	push	DWORD PTR _a5$[ebp]
	inc	eax
	push	DWORD PTR _a4$[ebp]
	push	eax
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax-64]
	call	@scrollrt_draw_e_flag@28
$L86201:
; Line 2093
	mov	ecx, DWORD PTR _v42$[ebp]
	test	ecx, ecx
	jle	$L86211
	test	BYTE PTR _v52$[ebp], 64			; 00000040H
	jne	SHORT $L86204
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+464], 0
	je	$L86211
$L86204:
; Line 2094
	lea	eax, DWORD PTR [ecx-1]
; Line 2096
	dec	ecx
	cmp	ecx, 200				; 000000c8H
	mov	DWORD PTR _draw_monster_num, eax
	jae	$L86211
; Line 2097
	mov	esi, eax
	imul	esi, 228				; 000000e4H
	add	esi, OFFSET FLAT:_monster
; Line 2098
	test	BYTE PTR [esi+156], 1
	jne	$L86211
; Line 2099
	mov	ecx, DWORD PTR [esi+220]
; Line 2100
	test	ecx, ecx
	je	$L86211
; Line 2102
	mov	edi, DWORD PTR [esi+56]
	mov	ebx, DWORD PTR [esi+60]
	sub	edi, DWORD PTR [ecx+304]
	add	ebx, DWORD PTR _sy$[ebp]
	add	edi, DWORD PTR _sx$[ebp]
; Line 2103
	cmp	eax, DWORD PTR _pcursmonst
	jne	SHORT $L86209
; Line 2104
	push	DWORD PTR _a5$[ebp]
	mov	edx, edi
	push	0
	push	DWORD PTR [ecx+300]
	mov	cl, -23					; ffffffe9H
	push	DWORD PTR [esi+100]
	push	DWORD PTR [esi+84]
	push	ebx
	call	@Cl2DecodeFrm2@32
; Line 2105
	mov	eax, DWORD PTR _draw_monster_num
$L86209:
; Line 2107
	push	DWORD PTR _a5$[ebp]
	push	0
	push	eax
	push	ebx
	mov	ebx, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	call	@DrawMonster@28
; Line 2108
	cmp	DWORD PTR _me_flag$[ebp], 0
	je	SHORT $L86921
	cmp	DWORD PTR [esi+104], 0
	jne	SHORT $L86921
; Line 2109
	mov	eax, DWORD PTR _sx$[ebp]
	push	DWORD PTR _sy$[ebp]
	add	eax, -64				; ffffffc0H
	inc	ebx
	push	eax
	mov	eax, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _a5$[ebp]
	lea	edx, DWORD PTR [edi-1]
	lea	ecx, DWORD PTR [eax-64]
	push	DWORD PTR _a4$[ebp]
	push	ebx
	call	@scrollrt_draw_e_flag@28
$L86921:
	mov	edi, DWORD PTR _sx$[ebp]
$L86211:
; Line 2114
	test	BYTE PTR _v52$[ebp], 1
	je	SHORT $L86212
; Line 2115
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	0
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawMissile@28
$L86212:
; Line 2116
	cmp	BYTE PTR _v49$[ebp], 0
	je	SHORT $L86213
	movsx	eax, BYTE PTR _lightmax
	cmp	DWORD PTR _light_table_index, eax
	jge	SHORT $L86213
; Line 2117
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	0
	push	0
	push	DWORD PTR _sy$[ebp]
	push	edi
	call	@DrawObject@28
$L86213:
; Line 2118
	cmp	BYTE PTR _v51$[ebp], 0
	je	SHORT $L86222
; Line 2119
	movsx	edx, BYTE PTR _v51$[ebp]
	mov	eax, edx
	imul	eax, 368				; 00000170H
	lea	esi, DWORD PTR _item[eax-368]
; Line 2120
	cmp	DWORD PTR [esi+52], 0
	je	SHORT $L86222
; Line 2121
	cmp	BYTE PTR _v51$[ebp], 127		; 0000007fH
	ja	SHORT $L86222
; Line 2122
	mov	eax, DWORD PTR [esi+24]
; Line 2123
	test	eax, eax
	je	SHORT $L86222
; Line 2124
	mov	ecx, DWORD PTR [esi+32]
; Line 2125
	cmp	ecx, 1
	jl	SHORT $L86222
	mov	ebx, DWORD PTR [eax]
	cmp	ebx, 50					; 00000032H
	ja	SHORT $L86222
	cmp	ecx, ebx
	ja	SHORT $L86222
; Line 2127
	movsx	ebx, BYTE PTR _pcursitem
	sub	edi, DWORD PTR [esi+40]
	dec	edx
	cmp	edx, ebx
	jne	SHORT $L86223
; Line 2128
	push	DWORD PTR _a5$[ebp]
	mov	edx, edi
	push	0
	push	DWORD PTR [esi+36]
	push	ecx
	push	eax
	push	DWORD PTR _sy$[ebp]
	mov	cl, 181					; 000000b5H
	call	@CelDecodeClr@32
$L86223:
; Line 2136
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _sy$[ebp]
	mov	ecx, edi
	push	0
	push	DWORD PTR [esi+36]
	push	DWORD PTR [esi+32]
	push	DWORD PTR [esi+24]
	call	@CelDecodeHdrLightOnly@28
$L86222:
; Line 2142
	cmp	BYTE PTR _v48$[ebp], 0
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $L86225
; Line 2143
	movsx	eax, BYTE PTR _v46$[ebp]
; Line 2144
	push	DWORD PTR _a5$[ebp]
	mov	edx, DWORD PTR _level_special_cel
	movzx	eax, BYTE PTR _TransList[eax]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _cel_transparency_active, eax
	movsx	eax, BYTE PTR _v48$[ebp]
	push	0
	push	64					; 00000040H
	push	eax
	call	@CelDecodeHdrLightTrans@24
$L86225:
; Line 2146
	leave
	ret	24					; 00000018H
@scrollrt_draw_dungeon@32 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DrawMonster@28
_TEXT	SEGMENT
_mx$ = 8
_my$ = 12
_m$ = 16
_a6$ = 20
_a7$ = 24
_trans$ = 16
@DrawMonster@28 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2156
	push	ebp
	mov	ebp, esp
; Line 2162
	mov	eax, DWORD PTR _m$[ebp]
	push	ebx
	push	esi
	cmp	eax, 200				; 000000c8H
	push	edi
	jae	$L86253
; Line 2167
	imul	eax, 228				; 000000e4H
	mov	esi, DWORD PTR _monster[eax+84]
; Line 2168
	test	esi, esi
	je	$L86253
; Line 2173
	mov	ebx, DWORD PTR _monster[eax+100]
; Line 2175
	cmp	ebx, 1
	jl	$L86253
	mov	edi, DWORD PTR [esi]
	cmp	edi, 50					; 00000032H
	ja	$L86253
	cmp	ebx, edi
	jg	$L86253
; Line 2191
	imul	ecx, 112				; 00000070H
	test	BYTE PTR _dFlags[ecx+edx], 64		; 00000040H
	jne	SHORT $L86254
; Line 2192
	mov	eax, DWORD PTR _monster[eax+220]
	mov	edx, DWORD PTR _my$[ebp]
	mov	ecx, DWORD PTR _mx$[ebp]
	push	1
$L86954:
	push	DWORD PTR _a7$[ebp]
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR [eax+300]
	push	ebx
	push	esi
	call	@Cl2DecodeFrm3@32
; Line 2193
	jmp	SHORT $L86253
$L86254:
; Line 2194
	xor	cl, cl
; Line 2195
	cmp	BYTE PTR _monster[eax+188], cl
	mov	BYTE PTR _trans$[ebp], cl
	je	SHORT $L86257
; Line 2196
	mov	cl, BYTE PTR _monster[eax+189]
	add	cl, 4
	mov	BYTE PTR _trans$[ebp], cl
$L86257:
; Line 2197
	cmp	DWORD PTR _monster[eax+4], 15		; 0000000fH
	jne	SHORT $L86258
; Line 2198
	mov	cl, 2
	mov	BYTE PTR _trans$[ebp], cl
$L86258:
; Line 2199
	mov	edx, DWORD PTR _myplr
	imul	edx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[edx+464], 0
	je	SHORT $L86259
	cmp	DWORD PTR _light_table_index, 8
	jle	SHORT $L86259
; Line 2200
	mov	cl, 1
	mov	BYTE PTR _trans$[ebp], cl
$L86259:
; Line 2202
	mov	edx, DWORD PTR _my$[ebp]
	mov	eax, DWORD PTR _monster[eax+220]
	test	cl, cl
	mov	ecx, DWORD PTR _mx$[ebp]
	je	SHORT $L86260
	push	DWORD PTR _trans$[ebp]
; Line 2203
	jmp	SHORT $L86954
$L86260:
; Line 2204
	push	DWORD PTR _a7$[ebp]
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR [eax+300]
	push	ebx
	push	esi
	call	@Cl2DecodeLightTbl@28
$L86253:
	pop	edi
	pop	esi
	pop	ebx
; Line 2206
	pop	ebp
	ret	20					; 00000014H
@DrawMonster@28 ENDP
_TEXT	ENDS
EXTRN	@CelDrawHdrOnly@28:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DrawObject@28
_TEXT	SEGMENT
_ox$ = 8
_oy$ = 12
_pre$ = 16
_a6$ = 20
_dir$ = 24
_bv$ = -1
@DrawObject@28 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2210
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2216
	mov	eax, ecx
	push	ebx
	imul	eax, 112				; 00000070H
	push	esi
	push	edi
	mov	edi, edx
	mov	al, BYTE PTR _dObject[eax+edi]
	test	al, al
	jle	SHORT $L86287
; Line 2217
	dec	al
	mov	dl, al
; Line 2218
	movsx	esi, dl
	imul	esi, 120				; 00000078H
	mov	BYTE PTR _bv$[ebp], dl
	mov	eax, DWORD PTR _object[esi+68]
	cmp	eax, DWORD PTR _pre$[ebp]
	jne	$L86297
; Line 2220
	mov	edi, DWORD PTR _ox$[ebp]
; Line 2221
	mov	ebx, DWORD PTR _oy$[ebp]
	sub	edi, DWORD PTR _object[esi+44]
; Line 2222
	jmp	SHORT $L86289
$L86287:
; Line 2223
	or	dl, -1
	sub	dl, al
; Line 2224
	movsx	esi, dl
	imul	esi, 120				; 00000078H
	mov	BYTE PTR _bv$[ebp], dl
	mov	eax, DWORD PTR _object[esi+68]
	cmp	eax, DWORD PTR _pre$[ebp]
	jne	$L86297
; Line 2226
	mov	eax, DWORD PTR _object[esi+4]
; Line 2231
	mov	DWORD PTR _dir$[ebp], 8
	sub	eax, ecx
	mov	ecx, DWORD PTR _object[esi+8]
	sub	ecx, edi
	mov	edi, eax
	shl	edi, 5
	sub	edi, DWORD PTR _object[esi+44]
	mov	ebx, ecx
	shl	ebx, 5
	sub	edi, ebx
	lea	ebx, DWORD PTR [ecx+eax]
	add	edi, DWORD PTR _ox$[ebp]
	shl	ebx, 4
	add	ebx, DWORD PTR _oy$[ebp]
	and	DWORD PTR _a6$[ebp], 0
$L86289:
; Line 2235
	cmp	dl, 127					; 0000007fH
	jae	$L86297
; Line 2238
	mov	eax, DWORD PTR _object[esi+20]
; Line 2239
	test	eax, eax
	je	$L86297
; Line 2244
	mov	ecx, DWORD PTR _object[esi+36]
; Line 2246
	cmp	ecx, 1
	jl	$L86297
	mov	edx, DWORD PTR [eax]
	cmp	edx, 50					; 00000032H
	ja	SHORT $L86297
	cmp	ecx, edx
	jg	SHORT $L86297
; Line 2251
	mov	dl, BYTE PTR _bv$[ebp]
	cmp	dl, BYTE PTR _pcursobj
	jne	SHORT $L86298
; Line 2252
	push	DWORD PTR _dir$[ebp]
	mov	edx, edi
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _object[esi+40]
	push	ecx
	push	eax
	push	ebx
	mov	cl, 194					; 000000c2H
	call	@CelDecodeClr@32
$L86298:
; Line 2253
	cmp	DWORD PTR _object[esi+12], 0
	je	SHORT $L86300
; Line 2254
	push	DWORD PTR _dir$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _object[esi+40]
	push	DWORD PTR _object[esi+36]
	push	DWORD PTR _object[esi+20]
	call	@CelDecodeHdrLightOnly@28
; Line 2255
	jmp	SHORT $L86297
$L86300:
; Line 2257
	mov	eax, DWORD PTR _object[esi+20]
	test	eax, eax
	je	SHORT $L86297
; Line 2258
	push	DWORD PTR _dir$[ebp]
	mov	edx, ebx
	mov	ecx, edi
	push	DWORD PTR _a6$[ebp]
	push	DWORD PTR _object[esi+40]
	push	DWORD PTR _object[esi+36]
	push	eax
	call	@CelDrawHdrOnly@28
$L86297:
	pop	edi
	pop	esi
	pop	ebx
; Line 2260
	leave
	ret	20					; 00000014H
@DrawObject@28 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @scrollrt_draw_e_flag@28
_TEXT	SEGMENT
_buffer$ = -12
_x$ = -16
_y$ = 8
_a4$ = 12
_a5$ = 16
_sx$ = 20
_sy$ = 24
_v15$ = -20
_v25$ = -8
_i$ = -4
@scrollrt_draw_e_flag@28 PROC NEAR			; COMDAT
; _buffer$ = ecx
; _x$ = edx
; Line 2264
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, edx
	push	ebx
	mov	DWORD PTR _x$[ebp], eax
; Line 2288
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _y$[ebp]
	push	esi
; Line 2297
	mov	esi, DWORD PTR _light_table_index
	mov	edx, ecx
	mov	DWORD PTR _v15$[ebp], esi
	push	edi
	mov	ecx, DWORD PTR _dPiece[eax*4]
	mov	edi, DWORD PTR _level_piece_id
; Line 2298
	movsx	esi, BYTE PTR _dTransVal[eax]
; Line 2301
	movsx	eax, BYTE PTR _dung_map[eax]
	mov	ebx, DWORD PTR _cel_transparency_active
	mov	DWORD PTR _level_piece_id, ecx
	movzx	eax, BYTE PTR _TransList[eax]
	movzx	ecx, BYTE PTR _nTransTable[ecx]
	mov	DWORD PTR _buffer$[ebp], edx
	mov	DWORD PTR _v25$[ebp], edx
; Line 2302
	mov	edx, DWORD PTR _y$[ebp]
	and	eax, ecx
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _light_table_index, esi
	mov	DWORD PTR _cel_transparency_active, eax
	call	@gendung_get_dpiece_num_from_coord@8
; Line 2304
	shl	eax, 5
	add	eax, OFFSET FLAT:_dpiece_defs_map_1
	mov	BYTE PTR _arch_draw_type, 1
	mov	esi, eax
; Line 2306
	mov	ax, WORD PTR [esi]
	movzx	ecx, ax
; Line 2307
	test	ax, ax
	mov	DWORD PTR _level_cel_block, ecx
	je	SHORT $L86346
; Line 2308
	mov	ecx, DWORD PTR _buffer$[ebp]
	call	@drawUpperScreen@4
$L86346:
; Line 2309
	movzx	eax, WORD PTR [esi+2]
; Line 2312
	test	eax, eax
	mov	BYTE PTR _arch_draw_type, 2
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L86347
; Line 2313
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax+32]
	call	@drawUpperScreen@4
$L86347:
; Line 2315
	mov	ecx, DWORD PTR _dword_5A5594
	and	BYTE PTR _arch_draw_type, 0
	xor	eax, eax
	sar	ecx, 1
	inc	eax
	dec	ecx
	cmp	ecx, eax
	mov	DWORD PTR _i$[ebp], eax
	jle	SHORT $L86350
$L86348:
; Line 2317
	mov	eax, DWORD PTR _i$[ebp]
	sub	DWORD PTR _v25$[ebp], 24576		; 00006000H
	cmp	DWORD PTR _a4$[ebp], eax
	jl	SHORT $L86349
; Line 2318
	movzx	eax, WORD PTR [esi+eax*4]
; Line 2320
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L86352
; Line 2321
	mov	ecx, DWORD PTR _v25$[ebp]
	call	@drawUpperScreen@4
$L86352:
; Line 2322
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, WORD PTR [esi+eax*4+2]
; Line 2324
	test	eax, eax
	mov	DWORD PTR _level_cel_block, eax
	je	SHORT $L86349
; Line 2325
	mov	eax, DWORD PTR _v25$[ebp]
	lea	ecx, DWORD PTR [eax+32]
	call	@drawUpperScreen@4
$L86349:
	mov	eax, DWORD PTR _dword_5A5594
	inc	DWORD PTR _i$[ebp]
	sar	eax, 1
	dec	eax
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $L86348
$L86350:
; Line 2328
	push	0
	mov	edx, DWORD PTR _x$[ebp]
	push	DWORD PTR _sy$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	DWORD PTR _sx$[ebp]
	push	DWORD PTR _a5$[ebp]
	push	DWORD PTR _a4$[ebp]
	push	DWORD PTR _y$[ebp]
	call	@scrollrt_draw_dungeon@32
; Line 2329
	mov	eax, DWORD PTR _v15$[ebp]
; Line 2331
	mov	DWORD PTR _level_piece_id, edi
	pop	edi
	mov	DWORD PTR _cel_transparency_active, ebx
	pop	esi
	mov	DWORD PTR _light_table_index, eax
	pop	ebx
; Line 2332
	leave
	ret	20					; 00000014H
@scrollrt_draw_e_flag@28 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DrawZoom@8
_TEXT	SEGMENT
_v15$ = -20
_v16$ = -2
_v18$ = -12
_a5$ = -8
_a6$ = -16
_a6a$ = -16
_ya$ = -4
_x$ = -16
_y$ = -20
@DrawZoom@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2340
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	mov	ebx, ecx
; Line 2366
	mov	ecx, DWORD PTR _ScrollInfo
	push	esi
	mov	DWORD PTR _x$[ebp], ebx
	push	edi
	mov	DWORD PTR _y$[ebp], edx
; Line 2369
	add	ebx, -6					; fffffffaH
	push	6
; Line 2370
	dec	edx
	pop	eax
	mov	DWORD PTR _ya$[ebp], edx
; Line 2376
	mov	edx, DWORD PTR _ScrollInfo+16
	mov	DWORD PTR _dword_5C2FF8, eax
	mov	DWORD PTR _dword_5C2FFC, eax
	mov	DWORD PTR _a5$[ebp], eax
	mov	eax, DWORD PTR _ScrollInfo+4
	dec	edx
	cmp	edx, 7
	lea	edi, DWORD PTR [ecx+64]
	lea	esi, DWORD PTR [eax+143]
	mov	DWORD PTR _scr_pix_width, 384		; 00000180H
	mov	DWORD PTR _scr_pix_height, 192		; 000000c0H
	mov	DWORD PTR _v18$[ebp], 3
	ja	SHORT $L86400
	jmp	DWORD PTR $L86977[edx*4]
$L86390:
; Line 2380
	mov	DWORD PTR _a5$[ebp], 7
$LABEL_3$86389:
; Line 2382
	lea	esi, DWORD PTR [eax+111]
; Line 2383
	mov	eax, DWORD PTR _x$[ebp]
	lea	ebx, DWORD PTR [eax-7]
; Line 2384
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, -2					; fffffffeH
	mov	DWORD PTR _ya$[ebp], eax
; Line 2385
	jmp	SHORT $LABEL_9$86391
$L86394:
; Line 2389
	mov	DWORD PTR _v18$[ebp], 4
; Line 2390
	jmp	SHORT $LABEL_7$86393
$L86396:
; Line 2394
	mov	DWORD PTR _v18$[ebp], 4
$LABEL_6$86397:
; Line 2399
	mov	eax, DWORD PTR _x$[ebp]
	mov	edi, ecx
	lea	ebx, DWORD PTR [eax-7]
; Line 2400
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _ya$[ebp], eax
$LABEL_7$86393:
; Line 2402
	mov	DWORD PTR _a5$[ebp], 7
; Line 2403
	jmp	SHORT $L86400
$L86399:
; Line 2406
	lea	esi, DWORD PTR [eax+111]
; Line 2408
	mov	eax, DWORD PTR _x$[ebp]
	mov	edi, ecx
	mov	DWORD PTR _a5$[ebp], 7
	lea	ebx, DWORD PTR [eax-8]
$LABEL_9$86391:
; Line 2410
	mov	DWORD PTR _v18$[ebp], 4
$L86400:
; Line 2416
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _screen_y_times_768+572
	and	DWORD PTR _a6$[ebp], 0
	add	ecx, eax
	mov	DWORD PTR _gpBufEnd, ecx
$L86402:
; Line 2418
	push	0
	mov	edx, DWORD PTR _ya$[ebp]
	push	DWORD PTR _a6$[ebp]
	inc	DWORD PTR _ya$[ebp]
	mov	ecx, ebx
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	edi
	call	@scrollrt_draw_upper@28
; Line 2421
	mov	edx, DWORD PTR _ya$[ebp]
	add	esi, 16					; 00000010H
	push	1
	add	edi, -32				; ffffffe0H
	push	DWORD PTR _a6$[ebp]
	mov	ecx, ebx
	inc	ebx
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	edi
	call	@scrollrt_draw_upper@28
; Line 2422
	add	edi, 32					; 00000020H
; Line 2423
	add	esi, 16					; 00000010H
; Line 2424
	inc	DWORD PTR _a6$[ebp]
; Line 2425
	cmp	DWORD PTR _a6$[ebp], 4
	jl	SHORT $L86402
; Line 2426
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _screen_y_times_768+1280
	add	ecx, eax
; Line 2427
	cmp	DWORD PTR _v18$[ebp], 0
	mov	DWORD PTR _gpBufEnd, ecx
	jle	SHORT $L86409
$L86407:
; Line 2429
	mov	edx, DWORD PTR _ya$[ebp]
	inc	DWORD PTR _ya$[ebp]
	push	0
	mov	ecx, ebx
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	edi
	call	@scrollrt_draw_lower@24
; Line 2432
	mov	edx, DWORD PTR _ya$[ebp]
	add	esi, 16					; 00000010H
	push	1
	add	edi, -32				; ffffffe0H
	push	DWORD PTR _a5$[ebp]
	mov	ecx, ebx
	inc	ebx
	push	esi
	push	edi
	call	@scrollrt_draw_lower@24
; Line 2433
	add	edi, 32					; 00000020H
; Line 2434
	add	esi, 16					; 00000010H
; Line 2435
	dec	DWORD PTR _v18$[ebp]
; Line 2436
	jne	SHORT $L86407
$L86409:
; Line 2438
	and	BYTE PTR _arch_draw_type, 0
; Line 2439
	and	DWORD PTR _a6a$[ebp], 0
$L86410:
; Line 2441
	push	0
	mov	edx, DWORD PTR _ya$[ebp]
	push	DWORD PTR _a6a$[ebp]
	inc	DWORD PTR _ya$[ebp]
	mov	ecx, ebx
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	edi
	call	@scrollrt_draw_lower_2@28
; Line 2444
	mov	edx, DWORD PTR _ya$[ebp]
	add	esi, 16					; 00000010H
	push	1
	add	edi, -32				; ffffffe0H
	push	DWORD PTR _a6a$[ebp]
	mov	ecx, ebx
	inc	ebx
	push	DWORD PTR _a5$[ebp]
	push	esi
	push	edi
	call	@scrollrt_draw_lower_2@28
; Line 2445
	add	edi, 32					; 00000020H
; Line 2446
	add	esi, 16					; 00000010H
; Line 2447
	inc	DWORD PTR _a6a$[ebp]
; Line 2448
	cmp	DWORD PTR _a6a$[ebp], 4
	jl	SHORT $L86410
; Line 2449
	xor	eax, eax
	cmp	DWORD PTR _chrflag, eax
	jne	SHORT $L86414
	cmp	DWORD PTR _questlog, eax
	jne	SHORT $L86414
; Line 2453
	cmp	DWORD PTR _invflag, eax
	jne	SHORT $L86417
	cmp	DWORD PTR _sbookflag, eax
	jne	SHORT $L86417
; Line 2460
	mov	edx, 245088				; 0003bd60H
; Line 2461
	mov	ecx, 391744				; 0005fa40H
; Line 2462
	mov	edi, 320				; 00000140H
	jmp	SHORT $LABEL_24$86418
$L86417:
; Line 2454
	mov	ecx, 391744				; 0005fa40H
	jmp	SHORT $LABEL_23$86415
$L86414:
; Line 2450
	mov	ecx, 392064				; 0005fb80H
$LABEL_23$86415:
; Line 2456
	mov	edx, 245168				; 0003bdb0H
; Line 2457
	mov	edi, 160				; 000000a0H
$LABEL_24$86418:
; Line 2464
	mov	eax, DWORD PTR _gpBuffer
; Line 2480
	lea	ebx, DWORD PTR [edi+edi+1536]
	add	ecx, eax
	add	eax, edx
	mov	DWORD PTR -16+[ebp], 176		; 000000b0H
	lea	esi, DWORD PTR [ecx+768]
$L86422:
; Line 2469
	mov	DWORD PTR _v15$[ebp], edi
$L86425:
; Line 2471
	mov	dl, BYTE PTR [eax]
	inc	eax
	mov	BYTE PTR _v16$[ebp], dl
; Line 2472
	mov	BYTE PTR _v16$[ebp+1], dl
; Line 2473
	mov	dx, WORD PTR _v16$[ebp]
	mov	WORD PTR [ecx], dx
; Line 2475
	inc	ecx
	mov	WORD PTR [esi], dx
	inc	ecx
; Line 2476
	inc	esi
	inc	esi
; Line 2477
	dec	DWORD PTR _v15$[ebp]
; Line 2478
	jne	SHORT $L86425
; Line 2479
	mov	edx, -768				; fffffd00H
; Line 2481
	sub	esi, ebx
	sub	edx, edi
; Line 2482
	sub	ecx, ebx
	add	eax, edx
; Line 2484
	dec	DWORD PTR -16+[ebp]
	jne	SHORT $L86422
	pop	edi
	pop	esi
	pop	ebx
; Line 2485
	leave
	ret	0
$L86977:
	DD	$LABEL_3$86389
	DD	$L86390
	DD	$LABEL_7$86393
	DD	$L86394
	DD	$LABEL_9$86391
	DD	$L86396
	DD	$LABEL_6$86397
	DD	$L86399
@DrawZoom@8 ENDP
_TEXT	ENDS
PUBLIC	_ClearScreenBuffer
EXTRN	@j_lock_buf_priv@4:NEAR
EXTRN	@j_unlock_buf_priv@4:NEAR
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT _ClearScreenBuffer
_TEXT	SEGMENT
_ClearScreenBuffer PROC NEAR				; COMDAT
; Line 2496
	push	esi
; Line 2499
	mov	cl, 3
	call	@j_lock_buf_priv@4
	xor	esi, esi
$L86436:
; Line 2502
	mov	eax, DWORD PTR _gpBuffer
	push	640					; 00000280H
	push	0
	lea	eax, DWORD PTR [esi+eax+122944]
	push	eax
	call	_memset
	add	esi, 768				; 00000300H
	add	esp, 12					; 0000000cH
	cmp	esi, 368640				; 0005a000H
	jl	SHORT $L86436
; Line 2504
	mov	cl, 3
	pop	esi
	jmp	@j_unlock_buf_priv@4
_ClearScreenBuffer ENDP
_TEXT	ENDS
PUBLIC	@scrollrt_draw_game_screen@4
PUBLIC	_scrollrt_draw_cursor_back_buffer
PUBLIC	_scrollrt_draw_cursor_item
PUBLIC	@DrawMain@24
EXTRN	_drawpanflag:DWORD
; Function compile flags: /Ogsy
;	COMDAT @scrollrt_draw_game_screen@4
_TEXT	SEGMENT
@scrollrt_draw_game_screen@4 PROC NEAR			; COMDAT
; _draw_cursor$ = ecx
; Line 2597
	cmp	DWORD PTR _drawpanflag, 255		; 000000ffH
	push	ebx
	push	edi
	mov	ebx, ecx
	jne	SHORT $L86443
; Line 2598
	and	DWORD PTR _drawpanflag, 0
; Line 2599
	mov	edi, 480				; 000001e0H
; Line 2600
	jmp	SHORT $L86444
$L86443:
; Line 2601
	xor	edi, edi
$L86444:
; Line 2603
	test	ebx, ebx
	je	SHORT $L86445
; Line 2604
	xor	cl, cl
	call	@j_lock_buf_priv@4
; Line 2605
	call	_scrollrt_draw_cursor_item
; Line 2606
	xor	cl, cl
	call	@j_unlock_buf_priv@4
$L86445:
; Line 2608
	push	0
	push	0
	push	0
	push	0
	xor	edx, edx
	mov	ecx, edi
	call	@DrawMain@24
; Line 2609
	test	ebx, ebx
	pop	edi
	pop	ebx
	je	SHORT $L86446
; Line 2610
	xor	cl, cl
	call	@j_lock_buf_priv@4
; Line 2611
	call	_scrollrt_draw_cursor_back_buffer
; Line 2612
	xor	cl, cl
	jmp	@j_unlock_buf_priv@4
$L86446:
; Line 2614
	ret	0
@scrollrt_draw_game_screen@4 ENDP
_TEXT	ENDS
EXTRN	_memcpy:NEAR
; Function compile flags: /Ogsy
;	COMDAT _scrollrt_draw_cursor_back_buffer
_TEXT	SEGMENT
_scrollrt_draw_cursor_back_buffer PROC NEAR		; COMDAT
; Line 2626
	mov	edx, DWORD PTR _sgdwCursWdt
; Line 2627
	test	edx, edx
	je	$L86454
; Line 2628
	mov	eax, DWORD PTR _sgdwCursY
	push	esi
; Line 2630
	mov	esi, DWORD PTR _gpBuffer
	mov	ecx, eax
	lea	eax, DWORD PTR [eax+eax*2]
	push	edi
	shl	eax, 8
	add	eax, DWORD PTR _sgdwCursX
	mov	edi, OFFSET FLAT:_sgSaveBack
	lea	esi, DWORD PTR [eax+esi+122944]
; Line 2631
	mov	eax, DWORD PTR _sgdwCursHgt
; Line 2632
	test	eax, eax
	je	SHORT $L86455
	push	ebx
; Line 2633
	mov	ebx, eax
$L86456:
; Line 2635
	push	edx
	push	edi
	push	esi
	call	_memcpy
; Line 2636
	mov	eax, DWORD PTR _sgdwCursWdt
	add	esp, 12					; 0000000cH
; Line 2637
	add	edi, eax
; Line 2638
	add	esi, 768				; 00000300H
; Line 2639
	dec	ebx
	mov	edx, eax
; Line 2640
	jne	SHORT $L86456
; Line 2641
	mov	ecx, DWORD PTR _sgdwCursY
; Line 2642
	mov	eax, DWORD PTR _sgdwCursHgt
	pop	ebx
$L86455:
; Line 2645
	mov	esi, DWORD PTR _sgdwCursX
	and	DWORD PTR _sgdwCursWdt, 0
	mov	DWORD PTR _sgdwCursXOld, esi
	pop	edi
; Line 2646
	mov	DWORD PTR _sgdwCursYOld, ecx
; Line 2647
	mov	DWORD PTR _sgdwCursWdtOld, edx
; Line 2648
	mov	DWORD PTR _sgdwCursHgtOld, eax
	pop	esi
$L86454:
; Line 2650
	ret	0
_scrollrt_draw_cursor_back_buffer ENDP
_TEXT	ENDS
EXTRN	_cursH:DWORD
EXTRN	_cursW:DWORD
EXTRN	_pCursCels:DWORD
EXTRN	_pcurs:DWORD
EXTRN	_MouseY:DWORD
EXTRN	_MouseX:DWORD
EXTRN	@Cel2DrawHdrLightRed@32:NEAR
; Function compile flags: /Ogsy
;	COMDAT _scrollrt_draw_cursor_item
_TEXT	SEGMENT
_v0$ = -8
_v1$ = -12
_v4$ = -4
_v8$ = -12
_colour$ = -4
_v14$ = -4
_scrollrt_draw_cursor_item PROC NEAR			; COMDAT
; Line 2653
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 2670
	cmp	DWORD PTR _pcurs, 0
	push	ebx
	push	esi
	push	edi
	jle	$L86500
; Line 2671
	mov	eax, DWORD PTR _cursW
; Line 2672
	test	eax, eax
	mov	DWORD PTR _v0$[ebp], eax
	je	$L86500
; Line 2673
	mov	ecx, DWORD PTR _cursH
; Line 2674
	test	ecx, ecx
	mov	DWORD PTR _v1$[ebp], ecx
	je	$L86500
; Line 2675
	mov	edx, DWORD PTR _MouseX
	lea	edi, DWORD PTR [edx-1]
; Line 2676
	mov	edx, 639				; 0000027fH
	test	edi, edi
	jl	SHORT $L86478
; Line 2677
	cmp	edi, edx
	jg	$L86500
; Line 2679
	jmp	SHORT $L86480
$L86478:
; Line 2680
	xor	edi, edi
$L86480:
; Line 2682
	mov	esi, DWORD PTR _MouseY
; Line 2683
	mov	ebx, 479				; 000001dfH
	dec	esi
	test	esi, esi
	jl	SHORT $L86481
; Line 2684
	cmp	esi, ebx
	jg	$L86500
; Line 2686
	jmp	SHORT $L86483
$L86481:
; Line 2687
	xor	esi, esi
$L86483:
; Line 2689
	lea	eax, DWORD PTR [eax+edi+1]
; Line 2690
	cmp	eax, edx
	mov	DWORD PTR _v4$[ebp], eax
	jbe	SHORT $L86484
; Line 2691
	mov	DWORD PTR _v4$[ebp], edx
$L86484:
; Line 2692
	or	BYTE PTR _v4$[ebp], 3
; Line 2694
	mov	edx, edi
; Line 2695
	mov	eax, DWORD PTR _v4$[ebp]
	and	edx, -4					; fffffffcH
	sub	eax, edx
; Line 2696
	lea	ecx, DWORD PTR [ecx+esi+1]
	inc	eax
; Line 2697
	cmp	ecx, ebx
	mov	DWORD PTR _sgdwCursY, esi
	mov	DWORD PTR _sgdwCursX, edx
	mov	DWORD PTR _sgdwCursWdt, eax
	jbe	SHORT $L86486
; Line 2698
	mov	ecx, ebx
$L86486:
; Line 2702
	lea	ebx, DWORD PTR [esi+esi*2]
	sub	ecx, esi
	shl	ebx, 8
	add	ebx, edx
	mov	edx, DWORD PTR _gpBuffer
	inc	ecx
	mov	DWORD PTR _v14$[ebp], OFFSET FLAT:_sgSaveBack
; Line 2703
	test	ecx, ecx
	mov	DWORD PTR _sgdwCursHgt, ecx
	lea	ebx, DWORD PTR [ebx+edx+122944]
	je	SHORT $L86487
; Line 2704
	mov	DWORD PTR _v8$[ebp], ecx
$L86488:
; Line 2706
	push	eax
	push	ebx
	push	DWORD PTR _v14$[ebp]
	call	_memcpy
; Line 2707
	mov	eax, DWORD PTR _sgdwCursWdt
	add	esp, 12					; 0000000cH
	add	DWORD PTR _v14$[ebp], eax
; Line 2708
	add	ebx, 768				; 00000300H
; Line 2709
	dec	DWORD PTR _v8$[ebp]
; Line 2710
	jne	SHORT $L86488
; Line 2711
	mov	eax, DWORD PTR _cursW
	mov	DWORD PTR _v0$[ebp], eax
; Line 2712
	mov	eax, DWORD PTR _cursH
	mov	DWORD PTR _v1$[ebp], eax
$L86487:
; Line 2716
	mov	eax, DWORD PTR _screen_y_times_768+2560
	mov	ecx, DWORD PTR _gpBuffer
	sub	eax, DWORD PTR _v0$[ebp]
	lea	eax, DWORD PTR [eax+ecx-2]
	mov	DWORD PTR _gpBufEnd, eax
; Line 2717
	mov	eax, DWORD PTR _pcurs
	cmp	eax, 12					; 0000000cH
	jge	SHORT $L86492
; Line 2718
	push	8
	push	0
	push	DWORD PTR _v0$[ebp]
	lea	ecx, DWORD PTR [edi+65]
	push	eax
	mov	eax, DWORD PTR _v1$[ebp]
	lea	edx, DWORD PTR [esi+eax+160]
; Line 2719
	jmp	$L86995
$L86492:
; Line 2721
	mov	eax, DWORD PTR _myplr
	mov	DWORD PTR _colour$[ebp], 197		; 000000c5H
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21236], 0
	je	SHORT $L86495
; Line 2722
	mov	DWORD PTR _colour$[ebp], 181		; 000000b5H
$L86495:
; Line 2723
	cmp	DWORD PTR _plr[eax+21532], 0
	mov	ebx, 229				; 000000e5H
	jne	SHORT $L86496
; Line 2724
	mov	DWORD PTR _colour$[ebp], ebx
$L86496:
; Line 2726
	mov	eax, DWORD PTR _v1$[ebp]
	push	8
	push	0
	mov	cl, BYTE PTR _colour$[ebp]
	push	DWORD PTR _v0$[ebp]
	add	edi, 65					; 00000041H
	lea	eax, DWORD PTR [esi+eax+160]
	mov	edx, edi
	push	DWORD PTR _pcurs
	push	DWORD PTR _pCursCels
	push	eax
	call	@CelDrawHdrClrHL@32
; Line 2727
	mov	eax, DWORD PTR _cursH
; Line 2728
	cmp	DWORD PTR _colour$[ebp], ebx
; Line 2729
	mov	ecx, edi
	lea	edx, DWORD PTR [eax+esi+160]
	jne	SHORT $L86498
	push	1
	push	8
	push	0
	push	DWORD PTR _cursW
	push	DWORD PTR _pcurs
	push	DWORD PTR _pCursCels
	call	@Cel2DrawHdrLightRed@32
; Line 2730
	jmp	SHORT $L86500
$L86498:
; Line 2731
	push	8
	push	0
	push	DWORD PTR _cursW
	push	DWORD PTR _pcurs
$L86995:
	push	DWORD PTR _pCursCels
	call	@Cel2DrawHdrOnly@28
$L86500:
	pop	edi
	pop	esi
	pop	ebx
; Line 2736
	leave
	ret	0
_scrollrt_draw_cursor_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@PCBJ@C?3?2Src?2Diablo?2Source?2SCROLLRT?4CP@ ; `string'
PUBLIC	@DoBlitScreen@16
EXTRN	_lpDDSBackBuf:DWORD
EXTRN	_lpDDSPrimary:DWORD
EXTRN	_dx_reinit:NEAR
EXTRN	_gbActive:DWORD
EXTRN	_ResetPal:NEAR
EXTRN	__imp__Sleep@4:NEAR
EXTRN	_gbMaxPlayers:BYTE
EXTRN	@DDErrMsg@12:NEAR
EXTRN	__imp__GetTickCount@0:NEAR
;	COMDAT ??_C@_0CC@PCBJ@C?3?2Src?2Diablo?2Source?2SCROLLRT?4CP@
_DATA	SEGMENT
??_C@_0CC@PCBJ@C?3?2Src?2Diablo?2Source?2SCROLLRT?4CP@ DB 'C:\Src\Diablo\'
	DB	'Source\SCROLLRT.CPP', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DrawMain@24
_TEXT	SEGMENT
_draw_desc$ = -4
_draw_hp$ = 8
_draw_mana$ = 12
_draw_sbar$ = 16
_draw_btn$ = 20
_a4$ = -8
@DrawMain@24 PROC NEAR					; COMDAT
; _dwHgt$ = ecx
; _draw_desc$ = edx
; Line 2741
	push	ecx
	push	ecx
; Line 2749
	cmp	DWORD PTR _gbActive, 0
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _draw_desc$[esp+24], edx
	mov	DWORD PTR _a4$[esp+24], ecx
	je	$L86587
	mov	eax, DWORD PTR _lpDDSPrimary
	test	eax, eax
	je	$L86587
; Line 2755
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+96]
	cmp	eax, -2005532222			; 887601c2H
	jne	SHORT $L86525
; Line 2756
	mov	eax, DWORD PTR _lpDDSPrimary
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+108]
	test	eax, eax
	jne	$L86587
; Line 2759
	call	_ResetPal
; Line 2760
	mov	DWORD PTR _a4$[esp+24], 480		; 000001e0H
$L86525:
; Line 2762
	cmp	DWORD PTR _lpDDSBackBuf, 0
	jne	$L86532
; Line 2763
	mov	edi, DWORD PTR __imp__GetTickCount@0
	xor	ebx, ebx
	inc	ebx
$LABEL_8$86529:
; Line 2765
	call	edi
	mov	ebp, eax
$L86531:
; Line 2771
	mov	eax, DWORD PTR _lpDDSPrimary
	push	0
	push	33					; 00000021H
	mov	DWORD PTR _DDS_desc, 108		; 0000006cH
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:_DDS_desc
	push	0
	push	eax
	call	DWORD PTR [ecx+100]
	mov	esi, eax
; Line 2773
	test	esi, esi
	je	$L86532
; Line 2775
	call	edi
	mov	ecx, ebp
	sub	ecx, eax
	cmp	ecx, 5000				; 00001388H
	ja	SHORT $LABEL_17$86537
; Line 2777
	push	1
	call	DWORD PTR __imp__Sleep@4
; Line 2778
	cmp	esi, -2005532222			; 887601c2H
	je	$L86587
; Line 2780
	cmp	esi, -2005532132			; 8876021cH
	je	SHORT $L86531
	cmp	esi, -2005532242			; 887601aeH
; Line 2794
	je	SHORT $L86531
; Line 2781
	test	ebx, ebx
	je	SHORT $LABEL_17$86537
	cmp	esi, -2147467259			; 80004005H
	jne	SHORT $LABEL_17$86537
; Line 2782
	xor	ebx, ebx
; Line 2783
	call	_dx_reinit
; Line 2784
	mov	DWORD PTR _a4$[esp+24], 480		; 000001e0H
; Line 2785
	jmp	SHORT $LABEL_8$86529
$LABEL_17$86537:
; Line 2788
	cmp	esi, -2005532222			; 887601c2H
	je	$L86587
	cmp	esi, -2005532132			; 8876021cH
	je	$L86587
	cmp	esi, -2005532242			; 887601aeH
	je	$L86587
; Line 2789
	push	OFFSET FLAT:??_C@_0CC@PCBJ@C?3?2Src?2Diablo?2Source?2SCROLLRT?4CP@ ; `string'
	mov	edx, 3707				; 00000e7bH
	mov	ecx, esi
	call	@DDErrMsg@12
$L86532:
; Line 2796
	mov	esi, DWORD PTR _a4$[esp+24]
	test	esi, esi
	jle	SHORT $L86568
; Line 2797
	push	esi
	push	640					; 00000280H
	xor	edx, edx
	xor	ecx, ecx
	call	@DoBlitScreen@16
$L86568:
; Line 2798
	cmp	esi, 480				; 000001e0H
	jge	$L86578
; Line 2799
	cmp	DWORD PTR _draw_sbar$[esp+20], 0
	mov	ebx, 357				; 00000165H
	je	SHORT $L86570
; Line 2800
	push	28					; 0000001cH
	push	232					; 000000e8H
	mov	edx, ebx
	mov	ecx, 204				; 000000ccH
	call	@DoBlitScreen@16
$L86570:
; Line 2801
	cmp	DWORD PTR _draw_desc$[esp+24], 0
	je	SHORT $L86571
; Line 2802
	push	60					; 0000003cH
	push	288					; 00000120H
	mov	edx, 398				; 0000018eH
	mov	ecx, 176				; 000000b0H
	call	@DoBlitScreen@16
$L86571:
; Line 2803
	xor	ebp, ebp
	push	72					; 00000048H
	cmp	DWORD PTR _draw_mana$[esp+24], ebp
	pop	edi
	mov	esi, 352				; 00000160H
	je	SHORT $L86572
; Line 2804
	push	edi
	push	88					; 00000058H
	mov	edx, esi
	mov	ecx, 460				; 000001ccH
	call	@DoBlitScreen@16
; Line 2805
	mov	edx, 416				; 000001a0H
	mov	ecx, 564				; 00000234H
	push	56					; 00000038H
	push	56					; 00000038H
	call	@DoBlitScreen@16
$L86572:
; Line 2807
	cmp	DWORD PTR _draw_hp$[esp+20], ebp
	je	SHORT $L86573
; Line 2808
	push	edi
	push	88					; 00000058H
	push	96					; 00000060H
	mov	edx, esi
	pop	ecx
	call	@DoBlitScreen@16
$L86573:
; Line 2809
	cmp	DWORD PTR _draw_btn$[esp+20], ebp
	je	SHORT $L86576
; Line 2810
	push	119					; 00000077H
	push	edi
	push	8
	mov	edx, ebx
	pop	ecx
	call	@DoBlitScreen@16
; Line 2811
	mov	edx, ebx
	mov	ecx, 556				; 0000022cH
	push	48					; 00000030H
	push	edi
	call	@DoBlitScreen@16
; Line 2812
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L86576
; Line 2813
	push	32					; 00000020H
	push	36					; 00000024H
	mov	esi, 443				; 000001bbH
	push	84					; 00000054H
	mov	edx, esi
	pop	ecx
	call	@DoBlitScreen@16
; Line 2814
	mov	edx, esi
	mov	ecx, 524				; 0000020cH
	push	32					; 00000020H
	push	36					; 00000024H
	call	@DoBlitScreen@16
$L86576:
; Line 2817
	mov	eax, DWORD PTR _sgdwCursWdtOld
	cmp	eax, ebp
	je	SHORT $L86577
; Line 2818
	push	DWORD PTR _sgdwCursHgtOld
	mov	edx, DWORD PTR _sgdwCursYOld
	mov	ecx, DWORD PTR _sgdwCursXOld
	push	eax
	call	@DoBlitScreen@16
$L86577:
; Line 2819
	mov	eax, DWORD PTR _sgdwCursWdt
	cmp	eax, ebp
	je	SHORT $L86578
; Line 2820
	push	DWORD PTR _sgdwCursHgt
	mov	edx, DWORD PTR _sgdwCursY
	mov	ecx, DWORD PTR _sgdwCursX
	push	eax
	call	@DoBlitScreen@16
$L86578:
; Line 2822
	cmp	DWORD PTR _lpDDSBackBuf, 0
	jne	SHORT $L86587
; Line 2826
	mov	eax, DWORD PTR _lpDDSPrimary
	push	0
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+128]
; Line 2828
	cmp	eax, -2005532222			; 887601c2H
	je	SHORT $L86587
; Line 2829
	test	eax, eax
	je	SHORT $L86587
; Line 2830
	push	OFFSET FLAT:??_C@_0CC@PCBJ@C?3?2Src?2Diablo?2Source?2SCROLLRT?4CP@ ; `string'
	mov	edx, 3779				; 00000ec3H
	mov	ecx, eax
	call	@DDErrMsg@12
$L86587:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2837
	pop	ecx
	pop	ecx
	ret	16					; 00000010H
@DrawMain@24 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DoBlitScreen@16
_TEXT	SEGMENT
_dwX$ = -8
_dwY$ = -4
_dwWdt$ = 8
_dwHgt$ = 12
_Rect$ = -28
_v15$ = -12
_a4$ = 8
_out$87015 = 8
@DoBlitScreen@16 PROC NEAR				; COMDAT
; _dwX$ = ecx
; _dwY$ = edx
; Line 2877
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 2895
	cmp	DWORD PTR _lpDDSBackBuf, 0
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	ebx, ecx
	mov	DWORD PTR _dwY$[ebp], edi
	mov	DWORD PTR _dwX$[ebp], ebx
	je	$L86612
; Line 2896
	lea	eax, DWORD PTR [ebx+64]
	mov	DWORD PTR _Rect$[ebp], eax
; Line 2897
	mov	eax, DWORD PTR _dwWdt$[ebp]
	lea	eax, DWORD PTR [ebx+eax+63]
	mov	DWORD PTR _Rect$[ebp+8], eax
; Line 2898
	lea	eax, DWORD PTR [edi+160]
	mov	DWORD PTR _Rect$[ebp+4], eax
; Line 2899
	mov	eax, DWORD PTR _dwHgt$[ebp]
	lea	eax, DWORD PTR [edi+eax+159]
	mov	DWORD PTR _Rect$[ebp+12], eax
; Line 2900
	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR _a4$[ebp], eax
$L86614:
; Line 2905
	mov	eax, DWORD PTR _lpDDSPrimary
	lea	edx, DWORD PTR _Rect$[ebp]
	push	16					; 00000010H
	push	edx
	push	DWORD PTR _lpDDSBackBuf
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	ebx
	push	eax
	call	DWORD PTR [ecx+28]
	mov	esi, eax
; Line 2907
	test	esi, esi
	je	$L86646
; Line 2909
	call	DWORD PTR __imp__GetTickCount@0
	mov	ecx, DWORD PTR _a4$[ebp]
	sub	ecx, eax
	cmp	ecx, 5000				; 00001388H
	ja	SHORT $L86631
; Line 2910
	push	1
	call	DWORD PTR __imp__Sleep@4
; Line 2911
	cmp	esi, -2005532222			; 887601c2H
	je	$L86646
; Line 2913
	cmp	esi, -2005532132			; 8876021cH
	je	SHORT $L86614
	cmp	esi, -2005532242			; 887601aeH
; Line 2914
	je	SHORT $L86614
$L86631:
; Line 2916
	cmp	esi, -2005532222			; 887601c2H
	je	$L86646
	cmp	esi, -2005532132			; 8876021cH
	je	$L86646
	cmp	esi, -2005532242			; 887601aeH
	je	$L86646
; Line 2917
	push	OFFSET FLAT:??_C@_0CC@PCBJ@C?3?2Src?2Diablo?2Source?2SCROLLRT?4CP@ ; `string'
	mov	edx, 3596				; 00000e0cH
	mov	ecx, esi
	call	@DDErrMsg@12
; Line 2918
	jmp	$L86646
$L86612:
; Line 2922
	mov	eax, DWORD PTR _DDS_desc+16
; Line 2927
	mov	cl, 6
	mov	esi, eax
	imul	eax, edi
	mov	edi, DWORD PTR _dwWdt$[ebp]
	sub	esi, DWORD PTR _dwWdt$[ebp]
	add	eax, ebx
	mov	ebx, 768				; 00000300H
	sub	ebx, DWORD PTR _dwWdt$[ebp]
	mov	DWORD PTR _v15$[ebp], eax
	shr	edi, 2
	call	@j_lock_buf_priv@4
	mov	eax, DWORD PTR _dwY$[ebp]
; Line 2928
	mov	ecx, DWORD PTR _dwX$[ebp]
; Line 2929
	mov	edx, DWORD PTR _v15$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 8
; Line 2937
	add	eax, DWORD PTR _gpBuffer
	shl	edi, 2
	add	ebx, edi
	lea	ecx, DWORD PTR [eax+ecx+122944]
	mov	eax, DWORD PTR _DDS_desc+36
	add	eax, edx
	mov	edx, DWORD PTR _dwHgt$[ebp]
	add	esi, edi
	mov	DWORD PTR -12+[ebp], ebx
	mov	DWORD PTR -8+[ebp], esi
$L86650:
	test	edi, edi
	mov	DWORD PTR _out$87015[ebp], eax
	jbe	SHORT $L87018
	mov	DWORD PTR 12+[ebp], ecx
	mov	DWORD PTR -4+[ebp], edi
	sub	DWORD PTR 12+[ebp], eax
$L87017:
	mov	esi, DWORD PTR 12+[ebp]
	mov	ebx, DWORD PTR _out$87015[ebp]
	mov	bl, BYTE PTR [esi+ebx]
	mov	esi, DWORD PTR _out$87015[ebp]
	inc	DWORD PTR _out$87015[ebp]
	dec	DWORD PTR -4+[ebp]
	mov	BYTE PTR [esi], bl
	jne	SHORT $L87017
; Line 2932
$L87018:
; Line 2933
	add	ecx, DWORD PTR -12+[ebp]
; Line 2934
	add	eax, DWORD PTR -8+[ebp]
; Line 2935
	dec	edx
; Line 2936
	jne	SHORT $L86650
; Line 2937
	mov	cl, 6
	call	@j_unlock_buf_priv@4
$L86646:
	pop	edi
	pop	esi
	pop	ebx
; Line 2939
	leave
	ret	8
@DoBlitScreen@16 ENDP
_TEXT	ENDS
PUBLIC	_DrawAndBlit
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
EXTRN	_DrawTalkPan:NEAR
EXTRN	_gbRunGame:DWORD
EXTRN	_drawsbarflag:DWORD
EXTRN	_DrawInvBelt:NEAR
EXTRN	@T_DrawView@8:NEAR
EXTRN	_drawhpflag:DWORD
EXTRN	_drawmanaflag:DWORD
EXTRN	_talkflag:DWORD
EXTRN	_drawbtnflag:DWORD
EXTRN	_UpdateLifeFlask:NEAR
EXTRN	_UpdateManaFlask:NEAR
EXTRN	_ClearCtrlPan:NEAR
EXTRN	_DrawCtrlPan:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DrawAndBlit
_TEXT	SEGMENT
_ddsdesc$ = -1
_DrawAndBlit PROC NEAR					; COMDAT
; Line 2942
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 2947
	xor	edi, edi
	cmp	DWORD PTR _gbRunGame, edi
	je	$L86657
; Line 2948
	mov	ecx, DWORD PTR _drawpanflag
; Line 2949
	xor	eax, eax
	inc	eax
	cmp	ecx, 255				; 000000ffH
	jne	SHORT $L86658
; Line 2953
	and	BYTE PTR _ddsdesc$[ebp], 0
	mov	DWORD PTR _drawhpflag, eax
	mov	DWORD PTR _drawmanaflag, eax
	mov	DWORD PTR _drawbtnflag, eax
	mov	DWORD PTR _drawsbarflag, eax
; Line 2954
	mov	bl, al
; Line 2955
	mov	esi, 480				; 000001e0H
; Line 2956
	jmp	SHORT $L86659
$L86658:
; Line 2957
	cmp	ecx, eax
	jne	$L86657
; Line 2959
	mov	BYTE PTR _ddsdesc$[ebp], al
; Line 2960
	xor	bl, bl
; Line 2961
	mov	esi, 352				; 00000160H
$L86659:
; Line 2964
	xor	cl, cl
	mov	DWORD PTR _drawpanflag, edi
	call	@j_lock_buf_priv@4
; Line 2965
	cmp	BYTE PTR _leveltype, 0
; Line 2966
	mov	ecx, DWORD PTR _ViewX
	mov	edx, DWORD PTR _ViewY
	je	SHORT $L86661
	call	@DrawView@8
; Line 2967
	jmp	SHORT $L86662
$L86661:
; Line 2968
	call	@T_DrawView@8
$L86662:
; Line 2969
	test	bl, bl
	je	SHORT $L86663
; Line 2970
	call	_ClearCtrlPan
$L86663:
; Line 2971
	cmp	DWORD PTR _drawhpflag, edi
	je	SHORT $L86664
; Line 2972
	call	_UpdateLifeFlask
$L86664:
; Line 2973
	cmp	DWORD PTR _drawmanaflag, edi
	je	SHORT $L86665
; Line 2974
	call	_UpdateManaFlask
$L86665:
; Line 2975
	cmp	DWORD PTR _drawbtnflag, edi
	je	SHORT $L86666
; Line 2976
	call	_DrawCtrlPan
$L86666:
; Line 2977
	cmp	DWORD PTR _drawsbarflag, edi
	je	SHORT $L86667
; Line 2978
	call	_DrawInvBelt
$L86667:
; Line 2979
	cmp	DWORD PTR _talkflag, edi
	je	SHORT $L86668
; Line 2980
	call	_DrawTalkPan
; Line 2981
	mov	esi, 480				; 000001e0H
$L86668:
; Line 2983
	call	_scrollrt_draw_cursor_item
; Line 2984
	xor	cl, cl
	call	@j_unlock_buf_priv@4
; Line 2985
	push	DWORD PTR _drawbtnflag
	mov	ecx, esi
	movzx	edx, BYTE PTR _ddsdesc$[ebp]
	push	DWORD PTR _drawsbarflag
	push	DWORD PTR _drawmanaflag
	push	DWORD PTR _drawhpflag
	call	@DrawMain@24
; Line 2986
	xor	cl, cl
	call	@j_lock_buf_priv@4
; Line 2987
	call	_scrollrt_draw_cursor_back_buffer
; Line 2988
	xor	cl, cl
	call	@j_unlock_buf_priv@4
; Line 2989
	mov	DWORD PTR _drawhpflag, edi
; Line 2990
	mov	DWORD PTR _drawmanaflag, edi
; Line 2991
	mov	DWORD PTR _drawbtnflag, edi
; Line 2992
	mov	DWORD PTR _drawsbarflag, edi
$L86657:
	pop	edi
	pop	esi
	pop	ebx
; Line 2994
	leave
	ret	0
_DrawAndBlit ENDP
_TEXT	ENDS
END
