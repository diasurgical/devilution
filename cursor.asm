; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/cursor.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BF@HBCI@Data?2Inv?2Objcurs?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JECA@Town?5Portal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07EPOD@from?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09FPJ@Portal?5to?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HMCJ@The?5Unholy?5Altar?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08LOH@level?515?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _InitCursor
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FreeCursor
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetICursor@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetCursor_@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NewCursor@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitLevelCursor
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckTown
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckRportal
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckCursMove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_InvItemWidth
PUBLIC	_InvItemHeight
_DATA	SEGMENT
COMM	_cursH:DWORD
COMM	_icursH28:DWORD
COMM	_cursW:DWORD
COMM	_pcursmonst:DWORD
COMM	_icursW28:DWORD
COMM	_pCursCels:DWORD
COMM	_icursH:DWORD
COMM	_pcursinvitem:BYTE
COMM	_icursW:DWORD
COMM	_pcursitem:BYTE
COMM	_pcursobj:BYTE
COMM	_pcursplr:BYTE
COMM	_cursmx:DWORD
COMM	_cursmy:DWORD
COMM	_dword_4B8CCC:DWORD
COMM	_pcurs:DWORD
_DATA	ENDS
CONST	SEGMENT
_InvItemWidth DD 00H
	DD	021H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	017H
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
_InvItemHeight DD 00H
	DD	01dH
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	020H
	DD	023H
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	01cH
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	038H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
	DD	054H
CONST	ENDS
PUBLIC	_InitCursor
PUBLIC	??_C@_0BF@HBCI@Data?2Inv?2Objcurs?4CEL?$AA@	; `string'
EXTRN	_ClearCursor:NEAR
EXTRN	@LoadFileInMem@8:NEAR
;	COMDAT ??_C@_0BF@HBCI@Data?2Inv?2Objcurs?4CEL?$AA@
; File Source/cursor.cpp
_DATA	SEGMENT
??_C@_0BF@HBCI@Data?2Inv?2Objcurs?4CEL?$AA@ DB 'Data\Inv\Objcurs.CEL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _InitCursor
_TEXT	SEGMENT
_InitCursor PROC NEAR					; COMDAT
; Line 74
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@HBCI@Data?2Inv?2Objcurs?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	DWORD PTR _pCursCels, eax
; Line 75
	jmp	_ClearCursor
_InitCursor ENDP
_TEXT	ENDS
PUBLIC	_FreeCursor
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _FreeCursor
_TEXT	SEGMENT
_FreeCursor PROC NEAR					; COMDAT
; Line 82
	mov	ecx, DWORD PTR _pCursCels
; Line 83
	and	DWORD PTR _pCursCels, 0
; Line 84
	call	@mem_free_dbg@4
; Line 86
	jmp	_ClearCursor
_FreeCursor ENDP
_TEXT	ENDS
PUBLIC	@SetICursor@4
; Function compile flags: /Ogsy
;	COMDAT @SetICursor@4
_TEXT	SEGMENT
@SetICursor@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 91
	shl	ecx, 2
	push	esi
; Line 93
	push	28					; 0000001cH
	mov	eax, DWORD PTR _InvItemWidth[ecx]
	pop	esi
	mov	DWORD PTR _icursW, eax
	mov	ecx, DWORD PTR _InvItemHeight[ecx]
	cdq
	idiv	esi
; Line 94
	push	esi
	mov	DWORD PTR _icursH, ecx
	mov	DWORD PTR _icursW28, eax
	mov	eax, ecx
	cdq
	pop	ecx
	pop	esi
	idiv	ecx
	mov	DWORD PTR _icursH28, eax
; Line 95
	ret	0
@SetICursor@4 ENDP
_TEXT	ENDS
PUBLIC	@SetCursor_@4
; Function compile flags: /Ogsy
;	COMDAT @SetCursor_@4
_TEXT	SEGMENT
@SetCursor_@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 102
	mov	eax, DWORD PTR _InvItemWidth[ecx*4]
	mov	DWORD PTR _pcurs, ecx
	mov	DWORD PTR _cursW, eax
; Line 103
	mov	eax, DWORD PTR _InvItemHeight[ecx*4]
	mov	DWORD PTR _cursH, eax
; Line 104
	jmp	@SetICursor@4
@SetCursor_@4 ENDP
_TEXT	ENDS
PUBLIC	@NewCursor@4
; Function compile flags: /Ogsy
;	COMDAT @NewCursor@4
_TEXT	SEGMENT
@NewCursor@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 110
	jmp	@SetCursor_@4
@NewCursor@4 ENDP
_TEXT	ENDS
PUBLIC	_InitLevelCursor
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
; Function compile flags: /Ogsy
;	COMDAT _InitLevelCursor
_TEXT	SEGMENT
_InitLevelCursor PROC NEAR				; COMDAT
; Line 115
	xor	ecx, ecx
	inc	ecx
	call	@SetCursor_@4
; Line 116
	mov	eax, DWORD PTR _ViewX
	mov	DWORD PTR _cursmx, eax
; Line 117
	mov	eax, DWORD PTR _ViewY
	mov	DWORD PTR _cursmy, eax
; Line 118
	or	eax, -1
	mov	DWORD PTR _dword_4B8CCC, eax
; Line 119
	mov	DWORD PTR _pcursmonst, eax
; Line 120
	mov	BYTE PTR _pcursobj, al
; Line 121
	mov	BYTE PTR _pcursitem, al
; Line 122
	mov	BYTE PTR _pcursplr, al
; Line 123
	jmp	_ClearCursor
_InitLevelCursor ENDP
_TEXT	ENDS
PUBLIC	_CheckTown
PUBLIC	??_C@_0M@JECA@Town?5Portal?$AA@			; `string'
PUBLIC	??_C@_07EPOD@from?5?$CFs?$AA@			; `string'
EXTRN	_sprintf:NEAR
EXTRN	_missileactive:BYTE
EXTRN	_missile:BYTE
EXTRN	_nummissiles:DWORD
EXTRN	_trigflag:BYTE
EXTRN	_plr:BYTE
EXTRN	_tempstr:BYTE
EXTRN	_infostr:BYTE
EXTRN	_strcpy:NEAR
EXTRN	@AddPanelString@8:NEAR
EXTRN	_ClearPanel:NEAR
;	COMDAT ??_C@_0M@JECA@Town?5Portal?$AA@
_DATA	SEGMENT
??_C@_0M@JECA@Town?5Portal?$AA@ DB 'Town Portal', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07EPOD@from?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_07EPOD@from?5?$CFs?$AA@ DB 'from %s', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _CheckTown
_TEXT	SEGMENT
_i$ = -4
_CheckTown PROC NEAR					; COMDAT
; Line 131
	push	ecx
; Line 134
	and	DWORD PTR _i$[esp+4], 0
	cmp	DWORD PTR _nummissiles, 0
	jle	$L85002
	mov	ecx, DWORD PTR _cursmx
	mov	eax, DWORD PTR _cursmy
	push	ebx
	push	ebp
	push	esi
	push	edi
$L85000:
; Line 135
	mov	edx, DWORD PTR _i$[esp+20]
	mov	esi, DWORD PTR _missileactive[edx*4]
; Line 136
	imul	esi, 176				; 000000b0H
	cmp	DWORD PTR _missile[esi], 10		; 0000000aH
	jne	$L85001
; Line 143
	mov	edx, DWORD PTR _missile[esi+4]
	lea	ebx, DWORD PTR [edx-1]
	cmp	ecx, ebx
	jne	SHORT $L85006
	cmp	eax, DWORD PTR _missile[esi+8]
	je	SHORT $L85005
$L85006:
	cmp	ecx, edx
	jne	SHORT $L85007
	mov	edi, DWORD PTR _missile[esi+8]
	dec	edi
	cmp	eax, edi
	je	SHORT $L85005
$L85007:
	cmp	ecx, ebx
	jne	SHORT $L85008
	mov	edi, DWORD PTR _missile[esi+8]
	dec	edi
	cmp	eax, edi
	je	SHORT $L85005
$L85008:
	lea	edi, DWORD PTR [edx-2]
	cmp	ecx, edi
	jne	SHORT $L85010
	mov	ebp, DWORD PTR _missile[esi+8]
	dec	ebp
	cmp	eax, ebp
	je	SHORT $L85005
	cmp	ecx, edi
	jne	SHORT $L85010
	mov	edi, DWORD PTR _missile[esi+8]
	dec	edi
	dec	edi
	cmp	eax, edi
	je	SHORT $L85005
$L85010:
	cmp	ecx, ebx
	jne	SHORT $L85011
	mov	edi, DWORD PTR _missile[esi+8]
	dec	edi
	dec	edi
	cmp	eax, edi
	je	SHORT $L85005
$L85011:
	cmp	ecx, edx
	jne	SHORT $L85001
	cmp	eax, DWORD PTR _missile[esi+8]
	jne	SHORT $L85001
$L85005:
; Line 144
	xor	ebx, ebx
	inc	ebx
	mov	DWORD PTR _trigflag+12, ebx
; Line 145
	call	_ClearPanel
; Line 146
	push	OFFSET FLAT:??_C@_0M@JECA@Town?5Portal?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
; Line 147
	mov	eax, DWORD PTR _missile[esi+116]
	mov	edi, OFFSET FLAT:_tempstr
	imul	eax, 21720				; 000054d8H
	add	eax, OFFSET FLAT:_plr+320
	push	eax
	push	OFFSET FLAT:??_C@_07EPOD@from?5?$CFs?$AA@ ; `string'
	push	edi
	call	_sprintf
	add	esp, 20					; 00000014H
; Line 148
	mov	edx, ebx
	mov	ecx, edi
	call	@AddPanelString@8
; Line 149
	mov	ecx, DWORD PTR _missile[esi+4]
; Line 150
	mov	eax, DWORD PTR _missile[esi+8]
	mov	DWORD PTR _cursmx, ecx
	mov	DWORD PTR _cursmy, eax
$L85001:
	inc	DWORD PTR _i$[esp+20]
	mov	edx, DWORD PTR _i$[esp+20]
	cmp	edx, DWORD PTR _nummissiles
	jl	$L85000
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$L85002:
; Line 154
	pop	ecx
	ret	0
_CheckTown ENDP
_TEXT	ENDS
PUBLIC	_CheckRportal
PUBLIC	??_C@_09FPJ@Portal?5to?$AA@			; `string'
PUBLIC	??_C@_0BB@HMCJ@The?5Unholy?5Altar?$AA@		; `string'
PUBLIC	??_C@_08LOH@level?515?$AA@			; `string'
EXTRN	_setlevel:BYTE
;	COMDAT ??_C@_09FPJ@Portal?5to?$AA@
_DATA	SEGMENT
??_C@_09FPJ@Portal?5to?$AA@ DB 'Portal to', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@HMCJ@The?5Unholy?5Altar?$AA@
_DATA	SEGMENT
??_C@_0BB@HMCJ@The?5Unholy?5Altar?$AA@ DB 'The Unholy Altar', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08LOH@level?515?$AA@
_DATA	SEGMENT
??_C@_08LOH@level?515?$AA@ DB 'level 15', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _CheckRportal
_TEXT	SEGMENT
_i$ = -4
_CheckRportal PROC NEAR					; COMDAT
; Line 157
	push	ecx
; Line 160
	and	DWORD PTR _i$[esp+4], 0
	cmp	DWORD PTR _nummissiles, 0
	jle	$L85019
	mov	ecx, DWORD PTR _cursmx
	mov	eax, DWORD PTR _cursmy
	push	ebx
	push	ebp
	push	esi
	push	edi
$L85017:
; Line 161
	mov	edx, DWORD PTR _i$[esp+20]
	mov	esi, DWORD PTR _missileactive[edx*4]
; Line 162
	imul	esi, 176				; 000000b0H
	cmp	DWORD PTR _missile[esi], 65		; 00000041H
	jne	$L85018
; Line 169
	mov	edx, DWORD PTR _missile[esi+4]
	lea	ebx, DWORD PTR [edx-1]
	cmp	ecx, ebx
	jne	SHORT $L85023
	cmp	eax, DWORD PTR _missile[esi+8]
	je	SHORT $L85022
$L85023:
	cmp	ecx, edx
	jne	SHORT $L85024
	mov	edi, DWORD PTR _missile[esi+8]
	dec	edi
	cmp	eax, edi
	je	SHORT $L85022
$L85024:
	cmp	ecx, ebx
	jne	SHORT $L85025
	mov	edi, DWORD PTR _missile[esi+8]
	dec	edi
	cmp	eax, edi
	je	SHORT $L85022
$L85025:
	lea	edi, DWORD PTR [edx-2]
	cmp	ecx, edi
	jne	SHORT $L85027
	mov	ebp, DWORD PTR _missile[esi+8]
	dec	ebp
	cmp	eax, ebp
	je	SHORT $L85022
	cmp	ecx, edi
	jne	SHORT $L85027
	mov	edi, DWORD PTR _missile[esi+8]
	dec	edi
	dec	edi
	cmp	eax, edi
	je	SHORT $L85022
$L85027:
	cmp	ecx, ebx
	jne	SHORT $L85028
	mov	edi, DWORD PTR _missile[esi+8]
	dec	edi
	dec	edi
	cmp	eax, edi
	je	SHORT $L85022
$L85028:
	cmp	ecx, edx
	jne	SHORT $L85018
	cmp	eax, DWORD PTR _missile[esi+8]
	jne	SHORT $L85018
$L85022:
; Line 170
	xor	ebx, ebx
	inc	ebx
	mov	DWORD PTR _trigflag+12, ebx
; Line 171
	call	_ClearPanel
; Line 172
	push	OFFSET FLAT:??_C@_09FPJ@Portal?5to?$AA@	; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
; Line 173
	cmp	BYTE PTR _setlevel, 0
	pop	ecx
	pop	ecx
; Line 174
	mov	edi, OFFSET FLAT:_tempstr
	jne	SHORT $L85030
	push	OFFSET FLAT:??_C@_0BB@HMCJ@The?5Unholy?5Altar?$AA@ ; `string'
; Line 175
	jmp	SHORT $L85256
$L85030:
; Line 176
	push	OFFSET FLAT:??_C@_08LOH@level?515?$AA@	; `string'
$L85256:
	push	edi
	call	_strcpy
	pop	ecx
; Line 177
	mov	edx, ebx
	pop	ecx
	mov	ecx, edi
	call	@AddPanelString@8
; Line 178
	mov	ecx, DWORD PTR _missile[esi+4]
; Line 179
	mov	eax, DWORD PTR _missile[esi+8]
	mov	DWORD PTR _cursmx, ecx
	mov	DWORD PTR _cursmy, eax
$L85018:
	inc	DWORD PTR _i$[esp+20]
	mov	edx, DWORD PTR _i$[esp+20]
	cmp	edx, DWORD PTR _nummissiles
	jl	$L85017
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$L85019:
; Line 183
	pop	ecx
	ret	0
_CheckRportal ENDP
_TEXT	ENDS
PUBLIC	_CheckCursMove
EXTRN	_CheckPanelInfo:NEAR
EXTRN	_dFlags:BYTE
EXTRN	_dItem:BYTE
EXTRN	_MouseY:DWORD
EXTRN	_MouseX:DWORD
EXTRN	_questlog:DWORD
EXTRN	_zoomflag:DWORD
EXTRN	_doomflag:DWORD
EXTRN	_invflag:DWORD
EXTRN	_drawsbarflag:DWORD
EXTRN	_towner:BYTE
EXTRN	_track_isscrolling:NEAR
EXTRN	_CheckTrigForce:NEAR
EXTRN	_CheckInvHLight:NEAR
EXTRN	_uitemflag:DWORD
EXTRN	_item:BYTE
EXTRN	_myplr:DWORD
EXTRN	_object:BYTE
EXTRN	_monster:BYTE
EXTRN	_sbookflag:DWORD
EXTRN	_chrflag:DWORD
EXTRN	_panelflag:DWORD
EXTRN	_spselflag:DWORD
EXTRN	_dMonster:BYTE
EXTRN	_dObject:BYTE
EXTRN	_leveltype:BYTE
EXTRN	_ScrollInfo:BYTE
EXTRN	_dPlayer:BYTE
; Function compile flags: /Ogsy
;	COMDAT _CheckCursMove
_TEXT	SEGMENT
_mx$ = -12
_i$ = -8
_xx$ = -20
_yy$ = -16
_some_bool$ = -4
_CheckCursMove PROC NEAR				; COMDAT
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
; Line 210
	xor	eax, eax
	cmp	DWORD PTR _chrflag, eax
	push	esi
	mov	esi, DWORD PTR _MouseY
	push	edi
	mov	edi, DWORD PTR _MouseX
	jne	SHORT $L85055
	cmp	DWORD PTR _questlog, eax
	jne	SHORT $L85055
; Line 215
	cmp	DWORD PTR _invflag, eax
	jne	SHORT $L85060
	cmp	DWORD PTR _sbookflag, eax
	je	SHORT $L85057
$L85060:
; Line 216
	cmp	edi, 320				; 00000140H
	jle	SHORT $L85061
$L85347:
; Line 217
	xor	edi, edi
; Line 218
	jmp	SHORT $L85057
$L85061:
; Line 219
	add	edi, 160				; 000000a0H
	jmp	SHORT $L85057
$L85055:
; Line 211
	cmp	edi, 160				; 000000a0H
; Line 213
	jl	SHORT $L85347
; Line 214
	add	edi, -160				; ffffff60H
$L85057:
; Line 226
	mov	ebx, 351				; 0000015fH
	cmp	esi, ebx
	jle	SHORT $L85063
	call	_track_isscrolling
	test	eax, eax
	je	SHORT $L85063
; Line 227
	mov	esi, ebx
$L85063:
; Line 228
	mov	eax, DWORD PTR _zoomflag
	test	eax, eax
	jne	SHORT $L85064
; Line 229
	sar	edi, 1
; Line 230
	sar	esi, 1
$L85064:
; Line 232
	sub	edi, DWORD PTR _ScrollInfo
; Line 233
	sub	esi, DWORD PTR _ScrollInfo+4
; Line 234
	cmp	DWORD PTR _ScrollInfo+16, 0
	je	SHORT $L85065
; Line 235
	mov	ecx, DWORD PTR _myplr
	imul	ecx, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[ecx+488]
	mov	ebx, DWORD PTR _plr[ecx+104]
	add	ebx, edx
	sar	ebx, 8
	sar	edx, 8
	sub	ebx, edx
; Line 236
	mov	edx, DWORD PTR _plr[ecx+492]
	mov	ecx, DWORD PTR _plr[ecx+108]
	add	edi, ebx
	add	ecx, edx
	sar	ecx, 8
	sar	edx, 8
	sub	ecx, edx
	add	esi, ecx
$L85065:
; Line 239
	test	edi, edi
	jge	SHORT $L85066
; Line 240
	xor	edi, edi
$L85066:
; Line 241
	mov	ecx, 640				; 00000280H
	cmp	edi, ecx
	jl	SHORT $L85067
; Line 242
	mov	edi, ecx
$L85067:
; Line 243
	test	esi, esi
	jge	SHORT $L85068
; Line 244
	xor	esi, esi
$L85068:
; Line 245
	mov	ecx, 480				; 000001e0H
	cmp	esi, ecx
	jl	SHORT $L85069
; Line 246
	mov	esi, ecx
$L85069:
; Line 248
	mov	ecx, esi
; Line 249
	mov	edx, edi
	and	ecx, 31					; 0000001fH
	and	edx, 63					; 0000003fH
; Line 250
	sar	esi, 5
	sar	edi, 6
	neg	eax
	sbb	eax, eax
	mov	ebx, edi
	and	eax, 5
	add	eax, 5
	sub	ebx, eax
	add	ebx, esi
; Line 251
	sub	esi, edi
	add	ebx, DWORD PTR _ViewX
	add	esi, DWORD PTR _ViewY
; Line 253
	mov	edi, edx
	sar	edi, 1
	cmp	ecx, edi
	mov	DWORD PTR _mx$[ebp], ebx
	jge	SHORT $L85070
; Line 254
	dec	esi
$L85070:
; Line 256
	push	32					; 00000020H
	xor	ebx, ebx
	pop	eax
	sub	eax, edi
	cmp	ecx, eax
	setge	bl
	mov	eax, ebx
; Line 258
	mov	ebx, DWORD PTR _mx$[ebp]
	test	eax, eax
	je	SHORT $L85071
	inc	ebx
	mov	DWORD PTR _mx$[ebp], ebx
$L85071:
; Line 260
	test	ebx, ebx
	jge	SHORT $L85072
; Line 261
	xor	ebx, ebx
	mov	DWORD PTR _mx$[ebp], ebx
$L85072:
; Line 262
	cmp	ebx, 112				; 00000070H
	jl	SHORT $L85073
; Line 263
	push	111					; 0000006fH
	pop	ebx
	mov	DWORD PTR _mx$[ebp], ebx
$L85073:
; Line 264
	test	esi, esi
	jge	SHORT $L85074
; Line 265
	xor	esi, esi
$L85074:
; Line 266
	cmp	esi, 112				; 00000070H
	jl	SHORT $L85075
; Line 267
	push	111					; 0000006fH
	pop	esi
$L85075:
; Line 269
	cmp	ecx, edi
	jl	SHORT $L85076
; Line 270
	test	eax, eax
	jne	SHORT $L85077
; Line 271
	and	DWORD PTR _some_bool$[ebp], eax
; Line 272
	jmp	SHORT $L85083
$L85076:
; Line 276
	test	eax, eax
	jne	SHORT $L85083
$L85077:
; Line 277
	xor	eax, eax
	cmp	edx, 32					; 00000020H
	setl	al
	mov	DWORD PTR _some_bool$[ebp], eax
$L85083:
; Line 283
	mov	edx, DWORD PTR _pcursmonst
; Line 285
	or	BYTE PTR _pcursobj, -1
; Line 286
	or	BYTE PTR _pcursitem, -1
	or	edi, -1
; Line 287
	cmp	BYTE PTR _pcursinvitem, -1
	mov	DWORD PTR _dword_4B8CCC, edx
	mov	DWORD PTR _pcursmonst, edi
	je	SHORT $L85085
; Line 288
	mov	DWORD PTR _drawsbarflag, 1
$L85085:
; Line 295
	mov	ecx, DWORD PTR _myplr
	or	BYTE PTR _pcursinvitem, -1
	imul	ecx, 21720				; 000054d8H
	or	BYTE PTR _pcursplr, -1
	xor	eax, eax
	cmp	BYTE PTR _plr[ecx+317], al
	mov	DWORD PTR _uitemflag, eax
	mov	DWORD PTR _panelflag, eax
	mov	DWORD PTR _trigflag+12, eax
	jne	$L85202
; Line 297
	cmp	DWORD PTR _pcurs, 12			; 0000000cH
	jge	$L85088
	cmp	DWORD PTR _spselflag, eax
	jne	$L85088
; Line 302
	cmp	DWORD PTR _MouseY, 352			; 00000160H
	jle	SHORT $L85089
; Line 303
	call	_CheckPanelInfo
; Line 304
	jmp	$L85202
$L85089:
; Line 306
	cmp	DWORD PTR _doomflag, eax
	jne	$L85202
; Line 308
	cmp	DWORD PTR _invflag, eax
	mov	eax, 320				; 00000140H
	je	SHORT $L85091
	cmp	DWORD PTR _MouseX, eax
	jle	SHORT $L85091
; Line 309
	call	_CheckInvHLight
	mov	BYTE PTR _pcursinvitem, al
; Line 310
	jmp	$L85202
$L85091:
; Line 312
	cmp	DWORD PTR _sbookflag, 0
	je	SHORT $L85094
	cmp	DWORD PTR _MouseX, eax
	jg	$L85202
$L85094:
	cmp	DWORD PTR _chrflag, 0
	jne	SHORT $L85095
	cmp	DWORD PTR _questlog, 0
	je	SHORT $L85092
$L85095:
	cmp	DWORD PTR _MouseX, eax
; Line 313
	jl	$L85202
$L85092:
; Line 315
	cmp	BYTE PTR _leveltype, 0
	jne	$L85096
; Line 317
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	lea	eax, DWORD PTR [ecx+esi]
	shl	eax, 2
	cmp	DWORD PTR _some_bool$[ebp], 0
	je	SHORT $L85097
	mov	edx, DWORD PTR _dMonster[eax+4]
; Line 318
	test	edx, edx
	jle	SHORT $L85100
; Line 320
	lea	edi, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, edi
; Line 323
	jmp	SHORT $L85348
$L85097:
; Line 324
	mov	edx, DWORD PTR _dMonster[eax+448]
; Line 325
	test	edx, edx
	jle	SHORT $L85100
; Line 326
	lea	edi, DWORD PTR [ebx+1]
; Line 327
	mov	DWORD PTR _cursmy, esi
	mov	DWORD PTR _cursmx, edi
$L85348:
; Line 328
	lea	edi, DWORD PTR [edx-1]
	mov	DWORD PTR _pcursmonst, edi
$L85100:
; Line 331
	mov	edx, DWORD PTR _dMonster[eax]
; Line 332
	test	edx, edx
	jle	SHORT $L85101
; Line 335
	lea	edi, DWORD PTR [edx-1]
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, esi
	mov	DWORD PTR _pcursmonst, edi
$L85101:
; Line 337
	mov	eax, DWORD PTR _dMonster[eax+452]
; Line 338
	test	eax, eax
	jle	SHORT $L85102
; Line 339
	lea	edx, DWORD PTR [ebx+1]
; Line 341
	lea	edi, DWORD PTR [eax-1]
	mov	DWORD PTR _cursmx, edx
	lea	edx, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmy, edx
	mov	DWORD PTR _pcursmonst, edi
$L85102:
; Line 343
	mov	eax, edi
	imul	eax, 232				; 000000e8H
	cmp	DWORD PTR _towner[eax+84], 0
	jne	$L85148
; Line 344
	or	edi, -1
; Line 345
	jmp	$L85349
$L85096:
; Line 346
	cmp	edx, -1
	je	$L85128
; Line 348
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	lea	eax, DWORD PTR [ecx+esi]
	shl	eax, 2
	cmp	DWORD PTR _some_bool$[ebp], 0
	je	SHORT $L85106
	mov	edx, DWORD PTR _dMonster[eax+456]
; Line 349
	test	edx, edx
	je	SHORT $L85113
; Line 350
	test	BYTE PTR _dFlags[ecx+esi+114], 64	; 00000040H
$L85350:
	je	SHORT $L85113
; Line 351
	test	edx, edx
	jg	SHORT $L85262
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85263
$L85106:
; Line 362
	mov	edx, DWORD PTR _dMonster[eax+900]
; Line 363
	test	edx, edx
	je	SHORT $L85113
; Line 364
	test	BYTE PTR _dFlags[ecx+esi+225], 64	; 00000040H
; Line 365
	jmp	SHORT $L85350
$L85262:
	lea	edi, DWORD PTR [edx-1]
$L85263:
; Line 368
	cmp	edi, DWORD PTR _dword_4B8CCC
	jne	SHORT $L85113
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85113
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 4
	je	SHORT $L85113
; Line 369
	lea	edx, DWORD PTR [ebx+1]
; Line 371
	mov	DWORD PTR _pcursmonst, edi
	mov	DWORD PTR _cursmx, edx
	lea	edx, DWORD PTR [esi+2]
	mov	DWORD PTR _cursmy, edx
$L85113:
; Line 376
	mov	edx, DWORD PTR _dMonster[eax+904]
; Line 377
	test	edx, edx
	je	SHORT $L85115
	test	BYTE PTR _dFlags[ecx+esi+226], 64	; 00000040H
	je	SHORT $L85115
; Line 378
	test	edx, edx
	jg	SHORT $L85264
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85265
$L85264:
	lea	edi, DWORD PTR [edx-1]
$L85265:
; Line 381
	cmp	edi, DWORD PTR _dword_4B8CCC
	jne	SHORT $L85115
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85115
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 4
	je	SHORT $L85115
; Line 382
	lea	edx, DWORD PTR [ebx+2]
; Line 384
	mov	DWORD PTR _pcursmonst, edi
	mov	DWORD PTR _cursmx, edx
	lea	edx, DWORD PTR [esi+2]
	mov	DWORD PTR _cursmy, edx
$L85115:
; Line 387
	cmp	DWORD PTR _some_bool$[ebp], 0
	je	SHORT $L85116
; Line 388
	mov	edx, DWORD PTR _dMonster[eax+4]
; Line 389
	test	edx, edx
	je	$L85121
	test	BYTE PTR _dFlags[ecx+esi+1], 64		; 00000040H
	je	$L85121
; Line 390
	test	edx, edx
	jg	SHORT $L85266
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85267
$L85266:
	lea	edi, DWORD PTR [edx-1]
$L85267:
; Line 393
	cmp	edi, DWORD PTR _dword_4B8CCC
	jne	$L85121
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85121
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 2
	je	SHORT $L85121
; Line 395
	lea	edx, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, edx
; Line 399
	jmp	SHORT $L85351
$L85116:
; Line 400
	mov	edx, DWORD PTR _dMonster[eax+448]
; Line 401
	test	edx, edx
	je	SHORT $L85121
	test	BYTE PTR _dFlags[ecx+esi+112], 64	; 00000040H
	je	SHORT $L85121
; Line 402
	test	edx, edx
	jg	SHORT $L85268
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85269
$L85268:
	lea	edi, DWORD PTR [edx-1]
$L85269:
; Line 405
	cmp	edi, DWORD PTR _dword_4B8CCC
	jne	SHORT $L85121
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85121
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 2
	je	SHORT $L85121
; Line 407
	lea	edx, DWORD PTR [ebx+1]
	mov	DWORD PTR _cursmy, esi
	mov	DWORD PTR _cursmx, edx
$L85351:
; Line 408
	mov	DWORD PTR _pcursmonst, edi
$L85121:
; Line 412
	mov	edx, DWORD PTR _dMonster[eax]
; Line 413
	test	edx, edx
	je	SHORT $L85123
	test	BYTE PTR _dFlags[ecx+esi], 64		; 00000040H
	je	SHORT $L85123
; Line 414
	test	edx, edx
	jg	SHORT $L85270
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85271
$L85270:
	lea	edi, DWORD PTR [edx-1]
$L85271:
; Line 417
	cmp	edi, DWORD PTR _dword_4B8CCC
	jne	SHORT $L85123
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85123
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 1
	je	SHORT $L85123
; Line 418
	mov	DWORD PTR _cursmx, ebx
; Line 419
	mov	DWORD PTR _cursmy, esi
; Line 420
	mov	DWORD PTR _pcursmonst, edi
$L85123:
; Line 423
	mov	eax, DWORD PTR _dMonster[eax+452]
; Line 424
	test	eax, eax
	je	SHORT $L85125
	test	BYTE PTR _dFlags[ecx+esi+113], 64	; 00000040H
	je	SHORT $L85125
; Line 425
	test	eax, eax
	jg	SHORT $L85272
	or	ecx, -1
	sub	ecx, eax
	jmp	SHORT $L85273
$L85272:
	lea	ecx, DWORD PTR [eax-1]
$L85273:
; Line 428
	cmp	ecx, DWORD PTR _dword_4B8CCC
	jne	SHORT $L85125
	mov	eax, ecx
	imul	eax, 228				; 000000e4H
	test	DWORD PTR _monster[eax+148], -64	; ffffffc0H
	jle	SHORT $L85125
	mov	eax, DWORD PTR _monster[eax+224]
	test	BYTE PTR [eax+122], 2
	je	SHORT $L85125
; Line 429
	lea	eax, DWORD PTR [ebx+1]
; Line 431
	mov	DWORD PTR _pcursmonst, ecx
	mov	DWORD PTR _cursmx, eax
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmy, eax
$L85125:
; Line 434
	cmp	DWORD PTR _pcursmonst, -1
	je	SHORT $L85128
	mov	eax, DWORD PTR _pcursmonst
	imul	eax, 228				; 000000e4H
	test	BYTE PTR _monster[eax+156], 1
	je	SHORT $L85126
; Line 437
	or	DWORD PTR _pcursmonst, -1
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, esi
$L85126:
; Line 439
	cmp	DWORD PTR _pcursmonst, -1
	je	SHORT $L85128
	mov	eax, DWORD PTR _pcursmonst
	imul	eax, 228				; 000000e4H
	test	BYTE PTR _monster[eax+156], 32		; 00000020H
	je	SHORT $L85127
; Line 440
	or	DWORD PTR _pcursmonst, -1
$L85127:
; Line 441
	cmp	DWORD PTR _pcursmonst, -1
	jne	$L85202
$L85128:
; Line 445
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	lea	eax, DWORD PTR [ecx+esi]
	shl	eax, 2
	cmp	DWORD PTR _some_bool$[ebp], 0
	je	SHORT $L85129
	mov	edx, DWORD PTR _dMonster[eax+456]
; Line 446
	test	edx, edx
	je	$L85134
	test	BYTE PTR _dFlags[ecx+esi+114], 64	; 00000040H
	je	$L85134
; Line 447
	test	edx, edx
	jg	SHORT $L85274
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85275
$L85274:
	lea	edi, DWORD PTR [edx-1]
$L85275:
; Line 448
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85134
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 4
	je	SHORT $L85134
; Line 449
	lea	edx, DWORD PTR [ebx+1]
	mov	DWORD PTR _cursmx, edx
; Line 450
	lea	edx, DWORD PTR [esi+2]
; Line 454
	jmp	SHORT $L85352
$L85129:
; Line 455
	mov	edx, DWORD PTR _dMonster[eax+900]
; Line 456
	test	edx, edx
	je	SHORT $L85134
	test	BYTE PTR _dFlags[ecx+esi+225], 64	; 00000040H
	je	SHORT $L85134
; Line 457
	test	edx, edx
	jg	SHORT $L85276
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85277
$L85276:
	lea	edi, DWORD PTR [edx-1]
$L85277:
; Line 458
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85134
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 4
	je	SHORT $L85134
; Line 459
	lea	edx, DWORD PTR [ebx+2]
	mov	DWORD PTR _cursmx, edx
; Line 460
	lea	edx, DWORD PTR [esi+1]
$L85352:
	mov	DWORD PTR _cursmy, edx
; Line 461
	mov	DWORD PTR _pcursmonst, edi
$L85134:
; Line 465
	mov	edx, DWORD PTR _dMonster[eax+904]
; Line 466
	test	edx, edx
	je	SHORT $L85136
	test	BYTE PTR _dFlags[ecx+esi+226], 64	; 00000040H
	je	SHORT $L85136
; Line 467
	test	edx, edx
	jg	SHORT $L85278
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85279
$L85278:
	lea	edi, DWORD PTR [edx-1]
$L85279:
; Line 468
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85136
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 4
	je	SHORT $L85136
; Line 470
	lea	edx, DWORD PTR [ebx+2]
	mov	DWORD PTR _pcursmonst, edi
	mov	DWORD PTR _cursmx, edx
; Line 471
	lea	edx, DWORD PTR [esi+2]
	mov	DWORD PTR _cursmy, edx
$L85136:
; Line 474
	cmp	DWORD PTR _some_bool$[ebp], 0
	je	SHORT $L85137
; Line 475
	mov	edx, DWORD PTR _dMonster[eax+4]
; Line 476
	test	edx, edx
	je	$L85142
	test	BYTE PTR _dFlags[ecx+esi+1], 64		; 00000040H
	je	$L85142
; Line 477
	test	edx, edx
	jg	SHORT $L85280
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85281
$L85280:
	lea	edi, DWORD PTR [edx-1]
$L85281:
; Line 478
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85142
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 2
	je	SHORT $L85142
; Line 480
	lea	edx, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, edx
; Line 484
	jmp	SHORT $L85353
$L85137:
; Line 485
	mov	edx, DWORD PTR _dMonster[eax+448]
; Line 486
	test	edx, edx
	je	SHORT $L85142
	test	BYTE PTR _dFlags[ecx+esi+112], 64	; 00000040H
	je	SHORT $L85142
; Line 487
	test	edx, edx
	jg	SHORT $L85282
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85283
$L85282:
	lea	edi, DWORD PTR [edx-1]
$L85283:
; Line 488
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85142
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 2
	je	SHORT $L85142
; Line 490
	lea	edx, DWORD PTR [ebx+1]
	mov	DWORD PTR _cursmy, esi
	mov	DWORD PTR _cursmx, edx
$L85353:
; Line 491
	mov	DWORD PTR _pcursmonst, edi
$L85142:
; Line 495
	mov	edx, DWORD PTR _dMonster[eax]
; Line 496
	test	edx, edx
	je	SHORT $L85144
	test	BYTE PTR _dFlags[ecx+esi], 64		; 00000040H
	je	SHORT $L85144
; Line 497
	test	edx, edx
	jg	SHORT $L85284
	or	edi, -1
	sub	edi, edx
	jmp	SHORT $L85285
$L85284:
	lea	edi, DWORD PTR [edx-1]
$L85285:
; Line 498
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	DWORD PTR _monster[edx+148], -64	; ffffffc0H
	jle	SHORT $L85144
	mov	edx, DWORD PTR _monster[edx+224]
	test	BYTE PTR [edx+122], 1
	je	SHORT $L85144
; Line 499
	mov	DWORD PTR _cursmx, ebx
; Line 500
	mov	DWORD PTR _cursmy, esi
; Line 501
	mov	DWORD PTR _pcursmonst, edi
$L85144:
; Line 504
	mov	eax, DWORD PTR _dMonster[eax+452]
; Line 505
	test	eax, eax
	je	SHORT $L85335
	test	BYTE PTR _dFlags[ecx+esi+113], 64	; 00000040H
	je	SHORT $L85335
; Line 506
	test	eax, eax
	jg	SHORT $L85286
	or	edx, -1
	sub	edx, eax
	jmp	SHORT $L85287
$L85286:
	lea	edx, DWORD PTR [eax-1]
$L85287:
; Line 507
	mov	eax, edx
	imul	eax, 228				; 000000e4H
	test	DWORD PTR _monster[eax+148], -64	; ffffffc0H
	jle	SHORT $L85335
	mov	eax, DWORD PTR _monster[eax+224]
	test	BYTE PTR [eax+122], 2
	je	SHORT $L85335
; Line 509
	lea	eax, DWORD PTR [ebx+1]
	mov	edi, edx
	mov	DWORD PTR _cursmx, eax
; Line 510
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _pcursmonst, edi
	mov	DWORD PTR _cursmy, eax
	jmp	SHORT $L85146
$L85335:
	mov	edi, DWORD PTR _pcursmonst
$L85146:
; Line 513
	or	eax, -1
	cmp	edi, eax
	je	SHORT $L85312
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	BYTE PTR _monster[edx+156], 1
	je	SHORT $L85147
; Line 516
	mov	edi, eax
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, esi
	mov	DWORD PTR _pcursmonst, edi
$L85147:
; Line 518
	cmp	edi, eax
	je	SHORT $L85312
	mov	edx, edi
	imul	edx, 228				; 000000e4H
	test	BYTE PTR _monster[edx+156], 32		; 00000020H
	je	SHORT $L85148
; Line 519
	mov	edi, eax
$L85349:
	mov	DWORD PTR _pcursmonst, edi
$L85148:
; Line 521
	cmp	edi, -1
	jne	$L85200
$L85312:
; Line 522
	cmp	DWORD PTR _some_bool$[ebp], 0
	je	SHORT $L85150
; Line 523
	mov	al, BYTE PTR _dPlayer[ecx+esi+1]
; Line 524
	test	al, al
	je	SHORT $L85155
; Line 525
	jg	SHORT $L85288
	or	dl, -1
	sub	dl, al
	jmp	SHORT $L85289
$L85288:
	dec	al
	mov	dl, al
$L85289:
; Line 526
	movsx	eax, dl
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L85155
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+408], 0
	je	SHORT $L85155
; Line 528
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, eax
; Line 532
	jmp	SHORT $L85354
$L85150:
; Line 533
	mov	al, BYTE PTR _dPlayer[ecx+esi+112]
; Line 534
	test	al, al
	je	SHORT $L85155
; Line 535
	jg	SHORT $L85290
	or	dl, -1
	sub	dl, al
	jmp	SHORT $L85291
$L85290:
	dec	al
	mov	dl, al
$L85291:
; Line 536
	movsx	eax, dl
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L85155
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+408], 0
	je	SHORT $L85155
; Line 538
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR _cursmy, esi
	mov	DWORD PTR _cursmx, eax
$L85354:
; Line 539
	mov	BYTE PTR _pcursplr, dl
$L85155:
; Line 543
	mov	al, BYTE PTR _dPlayer[ecx+esi]
; Line 544
	test	al, al
	je	SHORT $L85157
; Line 545
	jg	SHORT $L85292
	or	dl, -1
	sub	dl, al
	jmp	SHORT $L85293
$L85292:
	dec	al
	mov	dl, al
$L85293:
; Line 546
	movsx	eax, dl
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L85157
; Line 547
	mov	DWORD PTR _cursmx, ebx
; Line 548
	mov	DWORD PTR _cursmy, esi
; Line 549
	mov	BYTE PTR _pcursplr, dl
$L85157:
; Line 552
	lea	eax, DWORD PTR _dFlags[ecx+esi]
	test	BYTE PTR [eax], 4
	je	SHORT $L85161
; Line 553
	and	DWORD PTR _i$[ebp], 0
	mov	edi, OFFSET FLAT:_plr+60
$L85159:
; Line 554
	cmp	DWORD PTR [edi-4], ebx
	jne	SHORT $L85160
	cmp	DWORD PTR [edi], esi
	jne	SHORT $L85160
	mov	edx, DWORD PTR _myplr
	cmp	DWORD PTR _i$[ebp], edx
	je	SHORT $L85160
; Line 557
	mov	dl, BYTE PTR _i$[ebp]
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, esi
	mov	BYTE PTR _pcursplr, dl
$L85160:
	inc	DWORD PTR _i$[ebp]
	add	edi, 21720				; 000054d8H
	cmp	edi, OFFSET FLAT:_plr+86940
	jl	SHORT $L85159
$L85161:
; Line 561
	cmp	DWORD PTR _pcurs, 8
	jne	SHORT $L85166
; Line 562
	or	DWORD PTR _xx$[ebp], -1
	add	eax, -112				; ffffff90H
	mov	DWORD PTR -24+[ebp], eax
$L85164:
; Line 563
	mov	eax, DWORD PTR _xx$[ebp]
	or	DWORD PTR _yy$[ebp], -1
	add	eax, ebx
	lea	edx, DWORD PTR [esi-1]
$L85167:
; Line 564
	mov	edi, DWORD PTR -24+[ebp]
	mov	ebx, DWORD PTR _yy$[ebp]
	test	BYTE PTR [edi+ebx], 4
	je	SHORT $L85168
; Line 565
	and	DWORD PTR _i$[ebp], 0
	mov	edi, OFFSET FLAT:_plr+60
$L85171:
; Line 567
	cmp	DWORD PTR [edi-4], eax
	jne	SHORT $L85172
	cmp	DWORD PTR [edi], edx
	jne	SHORT $L85172
	mov	ebx, DWORD PTR _myplr
	cmp	DWORD PTR _i$[ebp], ebx
	je	SHORT $L85172
; Line 570
	mov	bl, BYTE PTR _i$[ebp]
	mov	DWORD PTR _cursmx, eax
	mov	DWORD PTR _cursmy, edx
	mov	BYTE PTR _pcursplr, bl
$L85172:
	inc	DWORD PTR _i$[ebp]
	add	edi, 21720				; 000054d8H
	cmp	edi, OFFSET FLAT:_plr+86940
	jl	SHORT $L85171
$L85168:
; Line 563
	inc	DWORD PTR _yy$[ebp]
	inc	edx
	cmp	DWORD PTR _yy$[ebp], 2
	jl	SHORT $L85167
	inc	DWORD PTR _xx$[ebp]
	add	DWORD PTR -24+[ebp], 112		; 00000070H
	cmp	DWORD PTR _xx$[ebp], 2
	mov	ebx, DWORD PTR _mx$[ebp]
	jl	SHORT $L85164
$L85166:
; Line 577
	mov	al, BYTE PTR _dPlayer[ecx+esi+113]
; Line 578
	test	al, al
	je	SHORT $L85176
; Line 579
	jg	SHORT $L85294
	or	dl, -1
	sub	dl, al
	jmp	SHORT $L85295
$L85294:
	dec	al
	mov	dl, al
$L85295:
; Line 580
	movsx	eax, dl
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L85176
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+408], 0
	je	SHORT $L85176
; Line 582
	lea	eax, DWORD PTR [ebx+1]
	mov	BYTE PTR _pcursplr, dl
	mov	DWORD PTR _cursmx, eax
; Line 583
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmy, eax
$L85176:
; Line 587
	cmp	DWORD PTR _pcursmonst, -1
	jne	$L85200
	cmp	BYTE PTR _pcursplr, -1
	jne	$L85200
; Line 589
	cmp	DWORD PTR _some_bool$[ebp], 0
	je	SHORT $L85178
; Line 590
	mov	al, BYTE PTR _dObject[ecx+esi+1]
; Line 591
	test	al, al
	je	SHORT $L85183
; Line 592
	jg	SHORT $L85296
	or	dl, -1
	sub	dl, al
	jmp	SHORT $L85297
$L85296:
	dec	al
	mov	dl, al
$L85297:
; Line 593
	movsx	eax, dl
	imul	eax, 120				; 00000078H
	cmp	BYTE PTR _object[eax+64], 2
	jl	SHORT $L85183
; Line 595
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, eax
; Line 599
	jmp	SHORT $L85355
$L85178:
; Line 600
	mov	al, BYTE PTR _dObject[ecx+esi+112]
; Line 601
	test	al, al
	je	SHORT $L85183
; Line 602
	jg	SHORT $L85298
	or	dl, -1
	sub	dl, al
	jmp	SHORT $L85299
$L85298:
	dec	al
	mov	dl, al
$L85299:
; Line 603
	movsx	eax, dl
	imul	eax, 120				; 00000078H
	cmp	BYTE PTR _object[eax+64], 2
	jl	SHORT $L85183
; Line 605
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR _cursmy, esi
	mov	DWORD PTR _cursmx, eax
$L85355:
; Line 606
	mov	BYTE PTR _pcursobj, dl
$L85183:
; Line 610
	mov	al, BYTE PTR _dObject[ecx+esi]
; Line 611
	test	al, al
	je	SHORT $L85185
; Line 612
	jg	SHORT $L85300
	or	dl, -1
	sub	dl, al
	jmp	SHORT $L85301
$L85300:
	dec	al
	mov	dl, al
$L85301:
; Line 613
	movsx	eax, dl
	imul	eax, 120				; 00000078H
	mov	al, BYTE PTR _object[eax+64]
	cmp	al, 1
	je	SHORT $L85186
	cmp	al, 3
	jne	SHORT $L85185
$L85186:
; Line 614
	mov	DWORD PTR _cursmx, ebx
; Line 615
	mov	DWORD PTR _cursmy, esi
; Line 616
	mov	BYTE PTR _pcursobj, dl
$L85185:
; Line 619
	mov	al, BYTE PTR _dObject[ecx+esi+113]
; Line 620
	test	al, al
	je	SHORT $L85187
	jg	SHORT $L85302
	or	dl, -1
	sub	dl, al
	jmp	SHORT $L85303
$L85302:
	dec	al
	mov	dl, al
$L85303:
	movsx	eax, dl
	imul	eax, 120				; 00000078H
	cmp	BYTE PTR _object[eax+64], 2
	jl	SHORT $L85187
; Line 622
	lea	eax, DWORD PTR [ebx+1]
	mov	BYTE PTR _pcursobj, dl
	mov	DWORD PTR _cursmx, eax
; Line 623
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmy, eax
$L85187:
; Line 626
	cmp	BYTE PTR _pcursobj, -1
	jne	$L85200
; Line 627
	cmp	DWORD PTR _some_bool$[ebp], 0
	je	SHORT $L85189
; Line 628
	mov	al, BYTE PTR _dItem[ecx+esi+1]
; Line 629
	test	al, al
	jle	SHORT $L85194
; Line 630
	dec	al
; Line 631
	movsx	edx, al
	imul	edx, 368				; 00000170H
	cmp	BYTE PTR _item[edx+48], 2
	jl	SHORT $L85194
; Line 633
	lea	edx, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _cursmy, edx
; Line 637
	jmp	SHORT $L85356
$L85189:
; Line 638
	mov	al, BYTE PTR _dItem[ecx+esi+112]
; Line 639
	test	al, al
	jle	SHORT $L85194
; Line 640
	dec	al
; Line 641
	movsx	edx, al
	imul	edx, 368				; 00000170H
	cmp	BYTE PTR _item[edx+48], 2
	jl	SHORT $L85194
; Line 643
	lea	edx, DWORD PTR [ebx+1]
	mov	DWORD PTR _cursmy, esi
	mov	DWORD PTR _cursmx, edx
$L85356:
; Line 644
	mov	BYTE PTR _pcursitem, al
$L85194:
; Line 648
	mov	al, BYTE PTR _dItem[ecx+esi]
; Line 649
	test	al, al
	jle	SHORT $L85196
; Line 650
	dec	al
; Line 651
	movsx	edx, al
	imul	edx, 368				; 00000170H
	mov	dl, BYTE PTR _item[edx+48]
	cmp	dl, 1
	je	SHORT $L85197
	cmp	dl, 3
	jne	SHORT $L85196
$L85197:
; Line 652
	mov	DWORD PTR _cursmx, ebx
; Line 653
	mov	DWORD PTR _cursmy, esi
; Line 654
	mov	BYTE PTR _pcursitem, al
$L85196:
; Line 657
	mov	cl, BYTE PTR _dItem[ecx+esi+113]
; Line 658
	test	cl, cl
	jle	SHORT $L85199
; Line 659
	dec	cl
; Line 660
	movsx	eax, cl
	imul	eax, 368				; 00000170H
	cmp	BYTE PTR _item[eax+48], 2
	jl	SHORT $L85199
; Line 662
	lea	eax, DWORD PTR [ebx+1]
	mov	BYTE PTR _pcursitem, cl
	mov	DWORD PTR _cursmx, eax
; Line 663
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR _cursmy, eax
$L85199:
; Line 667
	cmp	BYTE PTR _pcursitem, -1
	jne	SHORT $L85200
; Line 668
	mov	DWORD PTR _cursmx, ebx
; Line 669
	mov	DWORD PTR _cursmy, esi
; Line 670
	call	_CheckTrigForce
; Line 671
	call	_CheckTown
; Line 672
	call	_CheckRportal
$L85200:
; Line 674
	cmp	DWORD PTR _pcurs, 2
	jne	SHORT $L85342
; Line 675
	or	BYTE PTR _pcursobj, -1
; Line 676
	or	BYTE PTR _pcursitem, -1
; Line 677
	or	eax, -1
; Line 678
	mov	DWORD PTR _cursmx, ebx
	mov	DWORD PTR _pcursmonst, eax
; Line 679
	mov	DWORD PTR _cursmy, esi
	jmp	SHORT $L85201
$L85342:
	mov	eax, DWORD PTR _pcursmonst
$L85201:
; Line 681
	cmp	eax, -1
	je	SHORT $L85202
	imul	eax, 228				; 000000e4H
	test	BYTE PTR _monster[eax+156], 32		; 00000020H
	je	SHORT $L85202
; Line 682
	or	DWORD PTR _pcursmonst, -1
	jmp	SHORT $L85202
$L85088:
; Line 298
	mov	DWORD PTR _cursmx, ebx
; Line 299
	mov	DWORD PTR _cursmy, esi
$L85202:
	pop	edi
	pop	esi
	pop	ebx
; Line 683
	leave
	ret	0
_CheckCursMove ENDP
_TEXT	ENDS
END
