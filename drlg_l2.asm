; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/drlg_l2.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DELI@Levels?2L2Data?2Blood1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CDEE@Levels?2L2Data?2Bonestr2?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _InitDungeon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L2LockoutFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L2DoorFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadL2Dungeon@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L2Pass3
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadPreL2Dungeon@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CreateL2Dungeon@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_LoadL2SP
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_FreeL2SP
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L2@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L2PlaceMiniSet@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L2PlaceRndSet@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L2Subs
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L2Shadows
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L2SetRoom@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L2TileFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CreateDungeon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CreateRoom@36
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DefineRoom@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddHall@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @GetHall@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ConnectHall@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CreateDoorType@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlaceHallExt@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DoPatternCheck@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DL2_FillVoids
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DL2_Cont@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DL2_NumNoChar
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DL2_DrawRoom@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DL2_KnockWalls@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L2FloodTVal
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L2FTVR@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L2TransFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L2DirtFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_InitL2Vals
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_Area_Min
PUBLIC	_Room_Max
PUBLIC	_Room_Min
PUBLIC	_Dir_Xadd
PUBLIC	_Dir_Yadd
PUBLIC	_SPATSL2
PUBLIC	_BTYPESL2
PUBLIC	_BSTYPESL2
PUBLIC	_VARCH1
PUBLIC	_VARCH2
PUBLIC	_VARCH3
PUBLIC	_VARCH4
PUBLIC	_VARCH5
PUBLIC	_VARCH6
PUBLIC	_VARCH7
PUBLIC	_VARCH8
PUBLIC	_VARCH9
PUBLIC	_VARCH10
PUBLIC	_VARCH11
PUBLIC	_VARCH12
PUBLIC	_VARCH13
PUBLIC	_VARCH14
PUBLIC	_VARCH15
PUBLIC	_VARCH16
PUBLIC	_VARCH17
PUBLIC	_VARCH18
PUBLIC	_VARCH19
PUBLIC	_VARCH20
PUBLIC	_VARCH21
PUBLIC	_VARCH22
PUBLIC	_VARCH23
PUBLIC	_VARCH24
PUBLIC	_VARCH25
PUBLIC	_VARCH26
PUBLIC	_VARCH27
PUBLIC	_VARCH28
PUBLIC	_VARCH29
PUBLIC	_VARCH30
PUBLIC	_VARCH31
PUBLIC	_VARCH32
PUBLIC	_VARCH33
PUBLIC	_VARCH34
PUBLIC	_VARCH35
PUBLIC	_VARCH36
PUBLIC	_VARCH37
PUBLIC	_VARCH38
PUBLIC	_VARCH39
PUBLIC	_VARCH40
PUBLIC	_HARCH1
PUBLIC	_HARCH2
PUBLIC	_HARCH3
PUBLIC	_HARCH4
PUBLIC	_HARCH5
PUBLIC	_HARCH6
PUBLIC	_HARCH7
PUBLIC	_HARCH8
PUBLIC	_HARCH9
PUBLIC	_HARCH10
PUBLIC	_HARCH11
PUBLIC	_HARCH12
PUBLIC	_HARCH13
PUBLIC	_HARCH14
PUBLIC	_HARCH15
PUBLIC	_HARCH16
PUBLIC	_HARCH17
PUBLIC	_HARCH18
PUBLIC	_HARCH19
PUBLIC	_HARCH20
PUBLIC	_HARCH21
PUBLIC	_HARCH22
PUBLIC	_HARCH23
PUBLIC	_HARCH24
PUBLIC	_HARCH25
PUBLIC	_HARCH26
PUBLIC	_HARCH27
PUBLIC	_HARCH28
PUBLIC	_HARCH29
PUBLIC	_HARCH30
PUBLIC	_HARCH31
PUBLIC	_HARCH32
PUBLIC	_HARCH33
PUBLIC	_HARCH34
PUBLIC	_HARCH35
PUBLIC	_HARCH36
PUBLIC	_HARCH37
PUBLIC	_HARCH38
PUBLIC	_HARCH39
PUBLIC	_HARCH40
PUBLIC	_USTAIRS
PUBLIC	_DSTAIRS
PUBLIC	_WARPSTAIRS
PUBLIC	_CRUSHCOL
PUBLIC	_BIG1
PUBLIC	_BIG2
PUBLIC	_BIG3
PUBLIC	_BIG4
PUBLIC	_BIG5
PUBLIC	_BIG6
PUBLIC	_BIG7
PUBLIC	_BIG8
PUBLIC	_BIG9
PUBLIC	_BIG10
PUBLIC	_RUINS1
PUBLIC	_RUINS2
PUBLIC	_RUINS3
PUBLIC	_RUINS4
PUBLIC	_RUINS5
PUBLIC	_RUINS6
PUBLIC	_RUINS7
PUBLIC	_PANCREAS1
PUBLIC	_PANCREAS2
PUBLIC	_CTRDOOR1
PUBLIC	_CTRDOOR2
PUBLIC	_CTRDOOR3
PUBLIC	_CTRDOOR4
PUBLIC	_CTRDOOR5
PUBLIC	_CTRDOOR6
PUBLIC	_CTRDOOR7
PUBLIC	_CTRDOOR8
PUBLIC	_Patterns
_DATA	SEGMENT
COMM	_nSx1:DWORD
COMM	_nSx2:DWORD
COMM	_nSy1:DWORD
COMM	_nSy2:DWORD
COMM	_nRoomCnt:DWORD
COMM	_predungeon:BYTE:0640H
COMM	_RoomList:BYTE:0654H
COMM	_pHallList:DWORD
_Area_Min DD	02H
_Room_Max DD	0aH
_Room_Min DD	04H
_Dir_Xadd DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
_Dir_Yadd DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
_SPATSL2 DB	06H
	DB	03H
	DB	00H
	DB	03H
	DB	030H
	DB	00H
	DB	032H
	DB	09H
	DB	03H
	DB	00H
	DB	03H
	DB	030H
	DB	00H
	DB	032H
	ORG $+6
_BTYPESL2 DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	011H
	DB	012H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	03H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
_BSTYPESL2 DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	06H
	DB	06H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	06H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	01H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
_VARCH1	DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	04H
	DB	00H
	DB	07H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH2	DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	04H
	DB	00H
	DB	08H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH3	DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	04H
	DB	00H
	DB	06H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH4	DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	04H
	DB	00H
	DB	09H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH5	DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	04H
	DB	00H
	DB	0eH
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH6	DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	04H
	DB	00H
	DB	0dH
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH7	DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	04H
	DB	00H
	DB	010H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH8	DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	04H
	DB	00H
	DB	0fH
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH9	DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	07H
	DB	030H
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH10 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	08H
	DB	030H
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH11 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	06H
	DB	030H
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH12 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	09H
	DB	030H
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH13 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	0eH
	DB	030H
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH14 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	0dH
	DB	030H
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH15 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	010H
	DB	030H
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH16 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	0fH
	DB	030H
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH17 DB	02H
	DB	03H
	DB	02H
	DB	07H
	DB	03H
	DB	04H
	DB	00H
	DB	07H
	DB	08dH
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH18 DB	02H
	DB	03H
	DB	02H
	DB	07H
	DB	03H
	DB	04H
	DB	00H
	DB	08H
	DB	08dH
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH19 DB	02H
	DB	03H
	DB	02H
	DB	07H
	DB	03H
	DB	04H
	DB	00H
	DB	06H
	DB	08dH
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH20 DB	02H
	DB	03H
	DB	02H
	DB	07H
	DB	03H
	DB	04H
	DB	00H
	DB	09H
	DB	08dH
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH21 DB	02H
	DB	03H
	DB	02H
	DB	07H
	DB	03H
	DB	04H
	DB	00H
	DB	0eH
	DB	08dH
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH22 DB	02H
	DB	03H
	DB	02H
	DB	07H
	DB	03H
	DB	04H
	DB	00H
	DB	0dH
	DB	08dH
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH23 DB	02H
	DB	03H
	DB	02H
	DB	07H
	DB	03H
	DB	04H
	DB	00H
	DB	010H
	DB	08dH
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH24 DB	02H
	DB	03H
	DB	02H
	DB	07H
	DB	03H
	DB	04H
	DB	00H
	DB	0fH
	DB	08dH
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH25 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	04H
	DB	03H
	DB	01H
	DB	00H
	DB	07H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH26 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	04H
	DB	03H
	DB	01H
	DB	00H
	DB	08H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH27 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	04H
	DB	03H
	DB	01H
	DB	00H
	DB	06H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH28 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	04H
	DB	03H
	DB	01H
	DB	00H
	DB	09H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH29 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	04H
	DB	03H
	DB	01H
	DB	00H
	DB	0eH
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH30 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	04H
	DB	03H
	DB	01H
	DB	00H
	DB	0dH
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH31 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	04H
	DB	03H
	DB	01H
	DB	00H
	DB	010H
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH32 DB	02H
	DB	04H
	DB	03H
	DB	00H
	DB	03H
	DB	04H
	DB	03H
	DB	01H
	DB	00H
	DB	0fH
	DB	030H
	DB	00H
	DB	033H
	DB	027H
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH33 DB	02H
	DB	04H
	DB	02H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	07H
	DB	08eH
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH34 DB	02H
	DB	04H
	DB	02H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	08H
	DB	08eH
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH35 DB	02H
	DB	04H
	DB	02H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	06H
	DB	08eH
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH36 DB	02H
	DB	04H
	DB	02H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	09H
	DB	08eH
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH37 DB	02H
	DB	04H
	DB	02H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	0eH
	DB	08eH
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH38 DB	02H
	DB	04H
	DB	02H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	0dH
	DB	08eH
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH39 DB	02H
	DB	04H
	DB	02H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	010H
	DB	08eH
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_VARCH40 DB	02H
	DB	04H
	DB	02H
	DB	00H
	DB	03H
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	0fH
	DB	08eH
	DB	00H
	DB	033H
	DB	02aH
	DB	02fH
	DB	02cH
	DB	00H
	DB	00H
	ORG $+2
_HARCH1	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	02H
	DB	05H
	DB	09H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH2	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	02H
	DB	05H
	DB	06H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH3	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	02H
	DB	05H
	DB	08H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH4	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	02H
	DB	05H
	DB	07H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH5	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	02H
	DB	05H
	DB	0fH
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH6	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	02H
	DB	05H
	DB	010H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH7	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	02H
	DB	05H
	DB	0dH
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH8	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	02H
	DB	05H
	DB	0eH
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH9	DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	09H
	DB	031H
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH10 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	06H
	DB	031H
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH11 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	08H
	DB	031H
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH12 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	07H
	DB	031H
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH13 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0fH
	DB	031H
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH14 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	010H
	DB	031H
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH15 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0dH
	DB	031H
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH16 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0eH
	DB	031H
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH17 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	09H
	DB	08cH
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH18 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	06H
	DB	08cH
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH19 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	08H
	DB	08cH
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH20 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	07H
	DB	08cH
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH21 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0fH
	DB	08cH
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH22 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	010H
	DB	08cH
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH23 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0dH
	DB	08cH
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH24 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0eH
	DB	08cH
	DB	02eH
	DB	00H
	DB	02bH
	DB	02dH
	DB	00H
	ORG $+2
_HARCH25 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	05H
	DB	02H
	DB	09H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH26 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	05H
	DB	02H
	DB	06H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH27 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	05H
	DB	02H
	DB	08H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH28 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	05H
	DB	02H
	DB	07H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH29 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	05H
	DB	02H
	DB	0fH
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH30 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	05H
	DB	02H
	DB	010H
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH31 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	05H
	DB	02H
	DB	0dH
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH32 DB	03H
	DB	02H
	DB	03H
	DB	03H
	DB	00H
	DB	05H
	DB	02H
	DB	0eH
	DB	031H
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH33 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	09H
	DB	05H
	DB	09H
	DB	08cH
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH34 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	09H
	DB	05H
	DB	06H
	DB	08cH
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH35 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	09H
	DB	05H
	DB	08H
	DB	08cH
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH36 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	09H
	DB	05H
	DB	07H
	DB	08cH
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH37 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	09H
	DB	05H
	DB	0fH
	DB	08cH
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH38 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	09H
	DB	05H
	DB	010H
	DB	08cH
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH39 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	09H
	DB	05H
	DB	0dH
	DB	08cH
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_HARCH40 DB	03H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	09H
	DB	05H
	DB	0eH
	DB	08cH
	DB	02eH
	DB	00H
	DB	028H
	DB	02dH
	DB	00H
	ORG $+2
_USTAIRS DB	04H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	04dH
	DB	00H
	DB	00H
	DB	04cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_DSTAIRS DB	04H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	047H
	DB	00H
	DB	00H
	DB	032H
	DB	04eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_WARPSTAIRS DB	04H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	09eH
	DB	0a0H
	DB	00H
	DB	00H
	DB	09fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_CRUSHCOL DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	02H
	DB	06H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	053H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_BIG1	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	071H
	DB	00H
	DB	070H
	DB	00H
	ORG $+2
_BIG2	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	072H
	DB	073H
	DB	00H
	DB	00H
	ORG $+2
_BIG3	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	075H
	DB	074H
	ORG $+2
_BIG4	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	076H
	DB	077H
	ORG $+2
_BIG5	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	078H
	DB	07aH
	DB	079H
	DB	07bH
	ORG $+2
_BIG6	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	07dH
	DB	07cH
	ORG $+2
_BIG7	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	07eH
	DB	07fH
	ORG $+2
_BIG8	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	080H
	DB	082H
	DB	081H
	DB	083H
	ORG $+2
_BIG9	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	085H
	DB	087H
	DB	084H
	DB	086H
	ORG $+2
_BIG10	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	088H
	DB	089H
	DB	03H
	DB	03H
	ORG $+2
_RUINS1	DB	01H
	DB	01H
	DB	01H
	DB	050H
_RUINS2	DB	01H
	DB	01H
	DB	01H
	DB	051H
_RUINS3	DB	01H
	DB	01H
	DB	01H
	DB	052H
_RUINS4	DB	01H
	DB	01H
	DB	02H
	DB	054H
_RUINS5	DB	01H
	DB	01H
	DB	02H
	DB	055H
_RUINS6	DB	01H
	DB	01H
	DB	02H
	DB	056H
_RUINS7	DB	01H
	DB	01H
	DB	08H
	DB	057H
_PANCREAS1 DB	05H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_PANCREAS2 DB	05H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_CTRDOOR1 DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_CTRDOOR2 DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_CTRDOOR3 DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_CTRDOOR4 DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_CTRDOOR5 DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_CTRDOOR6 DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_CTRDOOR7 DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_CTRDOOR8 DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	0eH
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_Patterns DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	07H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	05H
	DD	00H
	DD	02H
	DD	00H
	DD	05H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	07H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	07H
	DD	01H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	05H
	DD	01H
	DD	07H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	03H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	05H
	DD	00H
	DD	06H
	DD	00H
	DD	06H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
	DD	00H
	DD	01H
	DD	06H
	DD	00H
	DD	00H
	DD	00H
	DD	09H
	DD	00H
	DD	00H
	DD	00H
	DD	06H
	DD	01H
	DD	00H
	DD	00H
	DD	06H
	DD	00H
	DD	07H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
	DD	08H
	DD	00H
	DD	06H
	DD	00H
	DD	06H
	DD	06H
	DD	00H
	DD	08H
	DD	06H
	DD	00H
	DD	07H
	DD	00H
	DD	06H
	DD	08H
	DD	06H
	DD	06H
	DD	06H
	DD	00H
	DD	00H
	DD	00H
	DD	09H
	DD	00H
	DD	06H
	DD	00H
	DD	00H
	DD	06H
	DD	06H
	DD	00H
	DD	06H
	DD	08H
	DD	08H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
	DD	08H
	DD	02H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
	DD	08H
	DD	07H
	DD	07H
	DD	07H
	DD	06H
	DD	06H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
	DD	08H
	DD	06H
	DD	06H
	DD	02H
	DD	06H
	DD	06H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
	DD	08H
	DD	06H
	DD	02H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
	DD	08H
	DD	02H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
	DD	08H
	DD	06H
	DD	07H
	DD	07H
	DD	06H
	DD	06H
	DD	06H
	DD	00H
	DD	06H
	DD	00H
	DD	08H
	DD	04H
	DD	04H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	02H
	DD	06H
	DD	02H
	DD	08H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	06H
	DD	02H
	DD	02H
	DD	06H
	DD	02H
	DD	07H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	06H
	DD	02H
	DD	06H
	DD	06H
	DD	06H
	DD	07H
	DD	02H
	DD	02H
	DD	06H
	DD	02H
	DD	06H
	DD	06H
	DD	02H
	DD	02H
	DD	06H
	DD	09H
	DD	02H
	DD	06H
	DD	02H
	DD	02H
	DD	06H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	06H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	06H
	DD	06H
	DD	02H
	DD	02H
	DD	02H
	DD	09H
	DD	02H
	DD	02H
	DD	02H
	DD	06H
	DD	06H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	06H
	DD	02H
	DD	02H
	DD	00H
	DD	02H
	DD	06H
	DD	06H
	DD	02H
	DD	02H
	DD	00H
	DD	09H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0cH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	04H
	DD	00H
	DD	01H
	DD	00H
	DD	0aH
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	04H
	DD	00H
	DD	0bH
	DD	00H
	DD	00H
	DD	00H
	DD	06H
	DD	01H
	DD	04H
	DD	00H
	DD	01H
	DD	00H
	DD	0eH
	DD	00H
	DD	06H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	00H
	DD	010H
	DD	00H
	DD	06H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	04H
	DD	00H
	DD	0fH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	04H
	DD	0dH
	DD	08H
	DD	08H
	DD	08H
	DD	08H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	0dH
	DD	08H
	DD	08H
	DD	04H
	DD	08H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	0aH
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	0bH
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	08H
	DD	02H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	04H
	DD	01H
	DD	01H
	DD	00H
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	04H
	DD	0bH
	DD	01H
	DD	01H
	DD	04H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	06H
	DD	02H
	DD	06H
	DD	02H
	DD	04H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	06H
	DD	02H
	DD	06H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	04H
	DD	01H
	DD	01H
	DD	0bH
	DD	04H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	04H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	06H
	DD	01H
	DD	01H
	DD	01H
	DD	04H
	DD	01H
	DD	01H
	DD	0bH
	DD	04H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	06H
	DD	02H
	DD	01H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	04H
	DD	01H
	DD	01H
	DD	0bH
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	0aH
	DD	02H
	DD	01H
	DD	01H
	DD	03H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	0eH
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	04H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	0eH
	DD	04H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	04H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	0fH
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	02H
	DD	02H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	04H
	DD	0aH
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	04H
	DD	00H
	DD	010H
	DD	01H
	DD	01H
	DD	04H
	DD	01H
	DD	01H
	DD	02H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	04H
	DD	0aH
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	02H
	DD	04H
	DD	01H
	DD	08H
	DD	01H
	DD	02H
	DD	01H
	DD	04H
	DD	01H
	DD	01H
	DD	01H
	DD	04H
	DD	04H
	DD	01H
	DD	010H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	010H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	0fH
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	0eH
	DD	04H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	0eH
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	08H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	_InitDungeon
EXTRN	_dflags:BYTE
; Function compile flags: /Ogsy
;	COMDAT _InitDungeon
_TEXT	SEGMENT
_InitDungeon PROC NEAR					; COMDAT
; File Source/drlg_l2.cpp
; Line 243
	xor	edx, edx
$L84986:
; Line 245
	push	40					; 00000028H
; Line 248
	mov	eax, edx
	pop	ecx
$L84989:
	and	BYTE PTR _dflags[eax], 0
; Line 249
	mov	BYTE PTR _predungeon[eax], 32		; 00000020H
	add	eax, 40					; 00000028H
; Line 252
	dec	ecx
	jne	SHORT $L84989
; Line 253
	inc	edx
; Line 254
	cmp	edx, 40					; 00000028H
	jl	SHORT $L84986
; Line 255
	ret	0
_InitDungeon ENDP
_TEXT	ENDS
PUBLIC	_L2LockoutFix
EXTRN	_dungeon:BYTE
; Function compile flags: /Ogsy
;	COMDAT _L2LockoutFix
_TEXT	SEGMENT
_L2LockoutFix PROC NEAR					; COMDAT
; Line 275
	xor	ecx, ecx
$L85008:
; Line 277
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[ecx]
	pop	edx
$L85012:
; Line 280
	cmp	BYTE PTR [eax], 4
	jne	SHORT $L85015
	cmp	BYTE PTR [eax-40], 3
	je	SHORT $L85015
; Line 281
	mov	BYTE PTR [eax], 1
$L85015:
; Line 282
	cmp	BYTE PTR [eax], 5
	jne	SHORT $L85016
	cmp	BYTE PTR [eax-1], 3
	je	SHORT $L85016
; Line 283
	mov	BYTE PTR [eax], 2
$L85016:
; Line 284
	add	eax, 40					; 00000028H
; Line 286
	dec	edx
	jne	SHORT $L85012
; Line 287
	inc	ecx
; Line 288
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85008
	push	esi
	push	edi
; Line 289
	xor	edi, edi
	inc	edi
$L85017:
; Line 291
	xor	ecx, ecx
	inc	ecx
$L85020:
; Line 294
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	esi, DWORD PTR [edi+eax*8]
	cmp	BYTE PTR _dflags[esi], 0
	jl	SHORT $L85033
; Line 295
	lea	eax, DWORD PTR _dungeon[esi]
; Line 296
	mov	dl, BYTE PTR [eax]
	cmp	dl, 2
	je	SHORT $L85025
	cmp	dl, 5
	jne	SHORT $L85033
$L85025:
	cmp	BYTE PTR [eax-1], 3
	jne	SHORT $L85033
	cmp	BYTE PTR _dungeon[esi+1], 3
	jne	SHORT $L85033
; Line 297
	xor	esi, esi
$L85027:
; Line 299
	mov	dl, BYTE PTR [eax]
; Line 300
	cmp	dl, 2
	je	SHORT $L85029
	cmp	dl, 5
	jne	SHORT $L86542
$L85029:
; Line 302
	cmp	BYTE PTR [eax-1], 3
	jne	SHORT $L86542
	cmp	BYTE PTR [eax+1], 3
	jne	SHORT $L86542
; Line 304
	cmp	dl, 5
	jne	SHORT $L85032
; Line 305
	xor	esi, esi
	inc	esi
$L85032:
; Line 306
	inc	ecx
; Line 307
	add	eax, 40					; 00000028H
	jmp	SHORT $L85027
$L86542:
; Line 309
	test	esi, esi
	jne	SHORT $L85033
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [edi+eax*8]
	cmp	BYTE PTR _dflags[eax-40], 0
	jl	SHORT $L85033
; Line 310
	mov	BYTE PTR _dungeon[eax-40], 5
$L85033:
; Line 313
	inc	ecx
; Line 314
	cmp	ecx, 39					; 00000027H
	jl	SHORT $L85020
; Line 315
	inc	edi
; Line 316
	cmp	edi, 39					; 00000027H
	jl	$L85017
; Line 317
	push	40					; 00000028H
	pop	ecx
$L85034:
; Line 319
	xor	eax, eax
	inc	eax
$L85037:
; Line 321
	cmp	BYTE PTR _dflags[ecx+eax], 0
	jl	SHORT $L85050
; Line 322
	mov	dl, BYTE PTR _dungeon[ecx+eax]
; Line 325
	cmp	dl, 1
	je	SHORT $L85042
	cmp	dl, 4
	jne	SHORT $L85050
$L85042:
	cmp	BYTE PTR _dungeon[ecx+eax-40], 3
	jne	SHORT $L85050
	cmp	BYTE PTR _dungeon[ecx+eax+40], 3
	jne	SHORT $L85050
; Line 326
	xor	esi, esi
$L85044:
; Line 328
	mov	dl, BYTE PTR _dungeon[ecx+eax]
; Line 329
	cmp	dl, 1
	je	SHORT $L85046
	cmp	dl, 4
	jne	SHORT $L86544
$L85046:
; Line 332
	cmp	BYTE PTR _dungeon[ecx+eax-40], 3
	jne	SHORT $L86544
	cmp	BYTE PTR _dungeon[ecx+eax+40], 3
	jne	SHORT $L86544
; Line 334
	cmp	dl, 4
	jne	SHORT $L85049
; Line 335
	xor	esi, esi
	inc	esi
$L85049:
; Line 336
	inc	eax
; Line 327
	jmp	SHORT $L85044
$L86544:
; Line 338
	test	esi, esi
	jne	SHORT $L85050
	cmp	BYTE PTR _dflags[ecx+eax-1], 0
	jl	SHORT $L85050
; Line 339
	mov	BYTE PTR _dungeon[ecx+eax-1], 4
$L85050:
; Line 342
	inc	eax
; Line 343
	cmp	eax, 39					; 00000027H
	jl	SHORT $L85037
; Line 344
	add	ecx, 40					; 00000028H
; Line 345
	cmp	ecx, 1560				; 00000618H
	jb	$L85034
	pop	edi
	pop	esi
; Line 346
	ret	0
_L2LockoutFix ENDP
_TEXT	ENDS
PUBLIC	_L2DoorFix
; Function compile flags: /Ogsy
;	COMDAT _L2DoorFix
_TEXT	SEGMENT
_L2DoorFix PROC NEAR					; COMDAT
; Line 354
	xor	ecx, ecx
	inc	ecx
$L85055:
; Line 356
	push	39					; 00000027H
	lea	eax, DWORD PTR _dungeon[ecx+40]
	pop	edx
$L85058:
; Line 359
	cmp	BYTE PTR [eax], 4
	jne	SHORT $L85061
	cmp	BYTE PTR [eax-1], 3
	jne	SHORT $L85061
; Line 360
	mov	BYTE PTR [eax], 7
$L85061:
; Line 361
	cmp	BYTE PTR [eax], 5
	jne	SHORT $L85062
	cmp	BYTE PTR [eax-40], 3
	jne	SHORT $L85062
; Line 362
	mov	BYTE PTR [eax], 9
$L85062:
; Line 363
	add	eax, 40					; 00000028H
; Line 365
	dec	edx
	jne	SHORT $L85058
; Line 366
	inc	ecx
; Line 367
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85055
; Line 368
	ret	0
_L2DoorFix ENDP
_TEXT	ENDS
PUBLIC	@LoadL2Dungeon@12
PUBLIC	_DRLG_L2Pass3
EXTRN	_dArch:BYTE
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
EXTRN	_DRLG_InitTrans:NEAR
EXTRN	_DRLG_Init_Globals:NEAR
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	@LoadFileInMem@8:NEAR
EXTRN	@SetMapObjects@12:NEAR
EXTRN	@SetMapMonsters@12:NEAR
EXTRN	_dPiece:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadL2Dungeon@12
_TEXT	SEGMENT
_vx$ = -12
_vy$ = 8
_v4$ = -4
_v32$ = -8
@LoadL2Dungeon@12 PROC NEAR				; COMDAT
; _sFileName$ = ecx
; _vx$ = edx
; Line 371
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _vx$[ebp], edx
	mov	esi, ecx
; Line 406
	call	_InitDungeon
; Line 407
	call	_DRLG_InitTrans
; Line 408
	xor	edx, edx
	mov	ecx, esi
	call	@LoadFileInMem@8
	mov	edi, eax
; Line 409
	xor	edx, edx
	mov	DWORD PTR _v4$[ebp], edi
$L85102:
; Line 412
	push	40					; 00000028H
; Line 415
	mov	eax, edx
	pop	ecx
$L85105:
	and	BYTE PTR _dflags[eax], 0
; Line 416
	mov	BYTE PTR _dungeon[eax], 12		; 0000000cH
	add	eax, 40					; 00000028H
; Line 419
	dec	ecx
	jne	SHORT $L85105
; Line 420
	inc	edx
; Line 421
	cmp	edx, 40					; 00000028H
	jl	SHORT $L85102
; Line 422
	movzx	esi, BYTE PTR [edi]
; Line 425
	movzx	edi, BYTE PTR [edi+2]
; Line 426
	mov	eax, DWORD PTR _v4$[ebp]
	xor	ebx, ebx
; Line 427
	test	edi, edi
	lea	ecx, DWORD PTR [eax+4]
	jle	SHORT $L85113
$L85111:
; Line 429
	test	esi, esi
	jle	SHORT $L85117
; Line 431
	mov	DWORD PTR _v32$[ebp], esi
; Line 443
	mov	eax, ebx
$L85115:
	mov	dl, BYTE PTR [ecx]
	test	dl, dl
	je	SHORT $L85118
	or	BYTE PTR _dflags[eax], -128		; ffffff80H
	mov	BYTE PTR _dungeon[eax], dl
	jmp	SHORT $L85119
$L85118:
; Line 438
	mov	BYTE PTR _dungeon[eax], 3
$L85119:
; Line 443
	add	eax, 40					; 00000028H
	inc	ecx
	inc	ecx
	dec	DWORD PTR _v32$[ebp]
	jne	SHORT $L85115
$L85117:
; Line 445
	inc	ebx
; Line 446
	cmp	ebx, edi
	jl	SHORT $L85111
$L85113:
; Line 448
	xor	ecx, ecx
$L85120:
; Line 450
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[ecx]
	pop	edx
$L85124:
; Line 453
	cmp	BYTE PTR [eax], 0
	jne	SHORT $L85127
; Line 454
	mov	BYTE PTR [eax], 12			; 0000000cH
$L85127:
; Line 455
	add	eax, 40					; 00000028H
; Line 457
	dec	edx
	jne	SHORT $L85124
; Line 458
	inc	ecx
; Line 459
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85120
; Line 460
	call	_DRLG_L2Pass3
; Line 461
	call	_DRLG_Init_Globals
; Line 463
	mov	ebx, OFFSET FLAT:_dPiece
	mov	DWORD PTR -8+[ebp], OFFSET FLAT:_dArch
$L85128:
; Line 466
	mov	edx, DWORD PTR -8+[ebp]
	push	112					; 00000070H
	mov	esi, ebx
	pop	edi
$L85132:
; Line 469
	mov	ecx, DWORD PTR [esi]
; Line 470
	xor	al, al
; Line 471
	cmp	ecx, 541				; 0000021dH
	jne	SHORT $L85135
; Line 472
	add	al, 5
$L85135:
; Line 473
	cmp	ecx, 178				; 000000b2H
	jne	SHORT $L85136
; Line 474
	mov	al, 5
$L85136:
; Line 475
	cmp	ecx, 551				; 00000227H
	jne	SHORT $L85137
; Line 476
	mov	al, 5
$L85137:
; Line 477
	cmp	ecx, 542				; 0000021eH
	jne	SHORT $L85138
; Line 478
	mov	al, 6
$L85138:
; Line 479
	cmp	ecx, 553				; 00000229H
	jne	SHORT $L85139
; Line 480
	mov	al, 6
$L85139:
; Line 481
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $L85140
; Line 482
	mov	al, 5
$L85140:
; Line 483
	cmp	ecx, 17					; 00000011H
	jne	SHORT $L85141
; Line 484
	mov	al, 6
$L85141:
; Line 485
	mov	BYTE PTR [edx], al
; Line 486
	add	esi, 448				; 000001c0H
; Line 487
	add	edx, 112				; 00000070H
; Line 489
	dec	edi
	jne	SHORT $L85132
; Line 490
	add	ebx, 4
; Line 491
	inc	DWORD PTR -8+[ebp]
; Line 492
	cmp	ebx, OFFSET FLAT:_dPiece+448
	jl	SHORT $L85128
; Line 494
	mov	esi, OFFSET FLAT:_dPiece
	mov	ebx, OFFSET FLAT:_dArch+2
$L85146:
; Line 496
	push	112					; 00000070H
	mov	eax, ebx
; Line 497
	mov	ecx, esi
	pop	edi
$L85149:
; Line 500
	mov	edx, DWORD PTR [ecx]
; Line 501
	cmp	edx, 132				; 00000084H
	jne	SHORT $L85152
; Line 502
	mov	BYTE PTR [eax-1], 2
; Line 503
	mov	BYTE PTR [eax], 1
; Line 504
	jmp	SHORT $L85154
$L85152:
	cmp	edx, 135				; 00000087H
	je	SHORT $L85155
	cmp	edx, 139				; 0000008bH
	jne	SHORT $L85154
$L85155:
; Line 505
	mov	BYTE PTR [eax+110], 3
; Line 506
	mov	BYTE PTR [eax+222], 4
$L85154:
; Line 508
	add	ecx, 448				; 000001c0H
; Line 509
	add	eax, 112				; 00000070H
; Line 511
	dec	edi
	jne	SHORT $L85149
; Line 512
	add	esi, 4
; Line 513
	inc	ebx
; Line 514
	cmp	esi, OFFSET FLAT:_dPiece+448
	jl	SHORT $L85146
; Line 515
	mov	eax, DWORD PTR _vx$[ebp]
; Line 517
	mov	ecx, DWORD PTR _v4$[ebp]
	mov	DWORD PTR _ViewX, eax
	mov	eax, DWORD PTR _vy$[ebp]
	push	0
	xor	edx, edx
	mov	DWORD PTR _ViewY, eax
	call	@SetMapMonsters@12
; Line 518
	mov	ecx, DWORD PTR _v4$[ebp]
	xor	edx, edx
	push	0
	call	@SetMapObjects@12
; Line 519
	mov	ecx, DWORD PTR _v4$[ebp]
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
	pop	ebx
; Line 520
	leave
	ret	4
@LoadL2Dungeon@12 ENDP
_TEXT	ENDS
EXTRN	_pMegaTiles:DWORD
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L2Pass3
_TEXT	SEGMENT
_v0$ = -4
_v1$ = -4
_v4$ = -8
_v9$ = -4
_v10$ = -20
_v11$ = -24
_v16$ = -8
_v17$ = -16
_DRLG_L2Pass3 PROC NEAR					; COMDAT
; Line 523
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 544
	mov	eax, DWORD PTR _pMegaTiles
	push	ebx
	push	esi
	push	edi
	movzx	ecx, WORD PTR [eax+88]
; Line 552
	mov	ebx, 896				; 00000380H
	lea	edx, DWORD PTR [ecx+1]
	mov	cx, WORD PTR [eax+90]
	mov	DWORD PTR _v0$[ebp], edx
	mov	WORD PTR _v0$[ebp], cx
	inc	DWORD PTR _v0$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _v17$[ebp], ecx
	mov	cx, WORD PTR [eax+92]
	mov	WORD PTR _v0$[ebp], cx
	inc	DWORD PTR _v0$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _v16$[ebp], ecx
	mov	cx, WORD PTR [eax+94]
	mov	WORD PTR _v0$[ebp], cx
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _v1$[ebp], OFFSET FLAT:_dPiece+448
	lea	esi, DWORD PTR [ecx+1]
$L85190:
; Line 554
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR -12+[ebp], 56			; 00000038H
	add	ecx, -444				; fffffe44H
$L85193:
; Line 558
	mov	edi, DWORD PTR _v17$[ebp]
	mov	DWORD PTR [ecx-4], edx
	mov	DWORD PTR [ecx+444], edi
; Line 559
	mov	edi, DWORD PTR _v16$[ebp]
	mov	DWORD PTR [ecx], edi
; Line 560
	mov	DWORD PTR [ecx+448], esi
; Line 561
	add	ecx, ebx
; Line 563
	dec	DWORD PTR -12+[ebp]
	jne	SHORT $L85193
; Line 564
	add	DWORD PTR _v1$[ebp], 8
; Line 565
	cmp	DWORD PTR _v1$[ebp], OFFSET FLAT:_dPiece+896
	jl	SHORT $L85190
; Line 566
	and	DWORD PTR _v4$[ebp], 0
	mov	DWORD PTR -12+[ebp], OFFSET FLAT:_dPiece+7236
$L85198:
; Line 570
	mov	ecx, DWORD PTR _v4$[ebp]
	mov	edx, DWORD PTR -12+[ebp]
	mov	DWORD PTR -16+[ebp], 40			; 00000028H
	lea	edi, DWORD PTR _dungeon[ecx]
$L85202:
; Line 573
	movzx	ecx, BYTE PTR [edi]
; Line 584
	add	edi, 40					; 00000028H
	lea	ecx, DWORD PTR [eax+ecx*8-8]
	mov	si, WORD PTR [ecx]
	inc	ecx
	movzx	esi, si
	inc	ecx
	inc	esi
	mov	DWORD PTR _v9$[ebp], esi
	mov	DWORD PTR _v10$[ebp], esi
	mov	si, WORD PTR [ecx]
	inc	ecx
	mov	WORD PTR _v9$[ebp], si
	inc	ecx
	inc	DWORD PTR _v9$[ebp]
	mov	esi, DWORD PTR _v9$[ebp]
	mov	DWORD PTR _v11$[ebp], esi
	mov	si, WORD PTR [ecx]
	mov	cx, WORD PTR [ecx+2]
	mov	WORD PTR _v9$[ebp], si
	inc	DWORD PTR _v9$[ebp]
	mov	esi, DWORD PTR _v9$[ebp]
	mov	WORD PTR _v9$[ebp], cx
; Line 585
	mov	ecx, DWORD PTR _v10$[ebp]
; Line 587
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx-4], ecx
	mov	ecx, DWORD PTR _v11$[ebp]
	mov	DWORD PTR [edx+444], ecx
; Line 588
	mov	ecx, DWORD PTR _v9$[ebp]
	inc	ecx
	mov	DWORD PTR [edx+448], ecx
; Line 589
	add	edx, ebx
; Line 591
	dec	DWORD PTR -16+[ebp]
	jne	SHORT $L85202
; Line 592
	add	DWORD PTR -12+[ebp], 8
; Line 593
	inc	DWORD PTR _v4$[ebp]
; Line 594
	cmp	DWORD PTR _v4$[ebp], 40			; 00000028H
	jl	$L85198
	pop	edi
	pop	esi
	pop	ebx
; Line 595
	leave
	ret	0
_DRLG_L2Pass3 ENDP
_TEXT	ENDS
PUBLIC	@LoadPreL2Dungeon@12
EXTRN	_pdungeon:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadPreL2Dungeon@12
_TEXT	SEGMENT
_v4$ = -12
_v20$ = -8
_v21$ = -4
@LoadPreL2Dungeon@12 PROC NEAR				; COMDAT
; _sFileName$ = ecx
; _vx$ = edx
; Line 598
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx
; Line 620
	call	_InitDungeon
; Line 621
	call	_DRLG_InitTrans
; Line 622
	xor	edx, edx
	mov	ecx, esi
	call	@LoadFileInMem@8
	mov	ebx, eax
; Line 623
	xor	esi, esi
	push	40					; 00000028H
	mov	DWORD PTR _v4$[ebp], ebx
	pop	ecx
$L85236:
; Line 629
	mov	edx, esi
	mov	eax, ecx
$L85239:
	and	BYTE PTR _dflags[edx], 0
; Line 630
	mov	BYTE PTR _dungeon[edx], 12		; 0000000cH
	add	edx, ecx
; Line 633
	dec	eax
	jne	SHORT $L85239
; Line 634
	inc	esi
; Line 635
	cmp	esi, ecx
	jl	SHORT $L85236
; Line 637
	movzx	eax, BYTE PTR [ebx+2]
	and	DWORD PTR _v21$[ebp], 0
	push	edi
; Line 638
	movzx	edi, BYTE PTR [ebx]
; Line 640
	test	eax, eax
	lea	esi, DWORD PTR [ebx+4]
	jle	SHORT $L85246
$L85244:
; Line 642
	test	edi, edi
	jle	SHORT $L85250
; Line 656
	mov	edx, DWORD PTR _v21$[ebp]
	mov	DWORD PTR _v20$[ebp], edi
$L85248:
	mov	bl, BYTE PTR [esi]
	test	bl, bl
	je	SHORT $L85251
	or	BYTE PTR _dflags[edx], -128		; ffffff80H
	mov	BYTE PTR _dungeon[edx], bl
	jmp	SHORT $L85252
$L85251:
; Line 651
	mov	BYTE PTR _dungeon[edx], 3
$L85252:
; Line 656
	add	edx, ecx
	inc	esi
	inc	esi
	dec	DWORD PTR _v20$[ebp]
	jne	SHORT $L85248
$L85250:
; Line 658
	inc	DWORD PTR _v21$[ebp]
; Line 659
	cmp	DWORD PTR _v21$[ebp], eax
	jl	SHORT $L85244
$L85246:
; Line 661
	xor	esi, esi
	pop	edi
$L85253:
; Line 663
	lea	edx, DWORD PTR _dungeon[esi]
	mov	eax, ecx
$L85257:
; Line 666
	cmp	BYTE PTR [edx], 0
	jne	SHORT $L85260
; Line 667
	mov	BYTE PTR [edx], 12			; 0000000cH
$L85260:
; Line 668
	add	edx, ecx
; Line 670
	dec	eax
	jne	SHORT $L85257
; Line 671
	inc	esi
; Line 672
	cmp	esi, ecx
	jl	SHORT $L85253
; Line 673
	xor	eax, eax
$L85261:
; Line 678
	mov	edx, eax
	mov	esi, ecx
$L85264:
	mov	bl, BYTE PTR _dungeon[edx]
	mov	BYTE PTR _pdungeon[edx], bl
	add	edx, ecx
; Line 681
	dec	esi
	jne	SHORT $L85264
; Line 682
	inc	eax
; Line 683
	cmp	eax, ecx
	jl	SHORT $L85261
; Line 684
	mov	ecx, DWORD PTR _v4$[ebp]
	call	@mem_free_dbg@4
	pop	esi
	pop	ebx
; Line 685
	leave
	ret	4
@LoadPreL2Dungeon@12 ENDP
_TEXT	ENDS
PUBLIC	@CreateL2Dungeon@8
PUBLIC	_DRLG_LoadL2SP
PUBLIC	_DRLG_FreeL2SP
PUBLIC	@DRLG_L2@4
PUBLIC	_DRLG_InitL2Vals
EXTRN	_dmaxx:DWORD
EXTRN	_dmaxy:DWORD
EXTRN	_dminx:DWORD
EXTRN	_dminy:DWORD
EXTRN	_DRLG_InitSetPC:NEAR
EXTRN	_DRLG_SetPC:NEAR
EXTRN	_glSeedTbl:BYTE
EXTRN	_quests:BYTE
EXTRN	_gbMaxPlayers:BYTE
EXTRN	@SetRndSeed@4:NEAR
EXTRN	_currlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CreateL2Dungeon@8
_TEXT	SEGMENT
@CreateL2Dungeon@8 PROC NEAR				; COMDAT
; _rseed$ = ecx
; _entry$ = edx
; Line 695
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx
	jne	SHORT $LABEL_10$85278
; Line 696
	cmp	BYTE PTR _currlevel, 7
	jne	SHORT $L85276
; Line 697
	cmp	BYTE PTR _quests+194, 0
	jne	SHORT $LABEL_10$85278
; Line 700
	mov	ecx, DWORD PTR _glSeedTbl+24
	push	4
	pop	edx
	mov	BYTE PTR _currlevel, 6
	call	@CreateL2Dungeon@8
; Line 701
	mov	BYTE PTR _currlevel, 7
$L85276:
; Line 703
	cmp	BYTE PTR _currlevel, 8
	jne	SHORT $LABEL_10$85278
; Line 704
	cmp	BYTE PTR _quests+194, 0
	je	SHORT $L85280
; Line 705
	mov	ecx, DWORD PTR _glSeedTbl+28
; Line 706
	mov	BYTE PTR _currlevel, 7
; Line 707
	jmp	SHORT $L85281
$L85280:
; Line 708
	mov	ecx, DWORD PTR _glSeedTbl+24
; Line 709
	mov	BYTE PTR _currlevel, 6
$L85281:
; Line 711
	push	4
	pop	edx
	call	@CreateL2Dungeon@8
; Line 712
	mov	BYTE PTR _currlevel, 8
$LABEL_10$85278:
; Line 716
	mov	ecx, edi
	call	@SetRndSeed@4
; Line 717
	push	16					; 00000010H
	pop	eax
; Line 719
	push	96					; 00000060H
	mov	DWORD PTR _dminx, eax
	mov	DWORD PTR _dminy, eax
	pop	eax
	mov	DWORD PTR _dmaxx, eax
; Line 720
	mov	DWORD PTR _dmaxy, eax
; Line 721
	call	_DRLG_InitTrans
; Line 722
	call	_DRLG_InitSetPC
; Line 723
	call	_DRLG_LoadL2SP
; Line 724
	mov	ecx, esi
	call	@DRLG_L2@4
; Line 725
	call	_DRLG_L2Pass3
; Line 726
	call	_DRLG_FreeL2SP
; Line 727
	call	_DRLG_InitL2Vals
	pop	edi
	pop	esi
; Line 728
	jmp	_DRLG_SetPC
@CreateL2Dungeon@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@DELI@Levels?2L2Data?2Blood1?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BL@CDEE@Levels?2L2Data?2Bonestr2?4DUN?$AA@ ; `string'
EXTRN	_pSetPiece_2:DWORD
EXTRN	@QuestStatus@4:NEAR
EXTRN	_setloadflag_2:DWORD
;	COMDAT ??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@ DB 'Levels\L2Data\Blind2.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DELI@Levels?2L2Data?2Blood1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@DELI@Levels?2L2Data?2Blood1?4DUN?$AA@ DB 'Levels\L2Data\Blood1.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@CDEE@Levels?2L2Data?2Bonestr2?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BL@CDEE@Levels?2L2Data?2Bonestr2?4DUN?$AA@ DB 'Levels\L2Data\Bones'
	DB	'tr2.DUN', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DRLG_LoadL2SP
_TEXT	SEGMENT
_DRLG_LoadL2SP PROC NEAR				; COMDAT
; Line 740
	and	DWORD PTR _setloadflag_2, 0
; Line 741
	push	8
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85284
; Line 742
	mov	ecx, OFFSET FLAT:??_C@_0BJ@EKKF@Levels?2L2Data?2Blind2?4DUN?$AA@ ; `string'
; Line 743
	jmp	SHORT $L85289
$L85284:
; Line 744
	push	9
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85287
; Line 745
	mov	ecx, OFFSET FLAT:??_C@_0BJ@DELI@Levels?2L2Data?2Blood1?4DUN?$AA@ ; `string'
; Line 746
	jmp	SHORT $L85289
$L85287:
; Line 747
	push	14					; 0000000eH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85282
; Line 749
	mov	ecx, OFFSET FLAT:??_C@_0BL@CDEE@Levels?2L2Data?2Bonestr2?4DUN?$AA@ ; `string'
$L85289:
; Line 752
	xor	edx, edx
	call	@LoadFileInMem@8
	mov	DWORD PTR _pSetPiece_2, eax
; Line 753
	mov	DWORD PTR _setloadflag_2, 1
$L85282:
; Line 754
	ret	0
_DRLG_LoadL2SP ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_FreeL2SP
_TEXT	SEGMENT
_DRLG_FreeL2SP PROC NEAR				; COMDAT
; Line 761
	mov	ecx, DWORD PTR _pSetPiece_2
; Line 762
	and	DWORD PTR _pSetPiece_2, 0
; Line 763
	jmp	@mem_free_dbg@4
_DRLG_FreeL2SP ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L2PlaceMiniSet@28
PUBLIC	@DRLG_L2PlaceRndSet@8
PUBLIC	_DRLG_L2Subs
PUBLIC	_DRLG_L2Shadows
PUBLIC	@DRLG_L2SetRoom@8
PUBLIC	_L2TileFix
PUBLIC	_CreateDungeon
PUBLIC	_DRLG_L2FloodTVal
PUBLIC	_DRLG_L2TransFix
PUBLIC	_L2DirtFix
EXTRN	@DRLG_PlaceThemeRooms@20:NEAR
EXTRN	@DRLG_CheckQuests@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L2@4
_TEXT	SEGMENT
_entry$ = -4
@DRLG_L2@4 PROC NEAR					; COMDAT
; _entry$ = ecx
; Line 767
	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 782
	xor	edi, edi
	xor	esi, esi
	inc	edi
	mov	DWORD PTR _entry$[esp+20], ecx
	or	ebx, -1
$L85311:
; Line 785
	and	DWORD PTR _nRoomCnt, 0
; Line 786
	call	_InitDungeon
; Line 787
	call	_DRLG_InitTrans
; Line 788
	call	_CreateDungeon
; Line 789
	test	al, al
	je	$L86604
; Line 791
	call	_L2TileFix
; Line 792
	xor	ebp, ebp
	cmp	DWORD PTR _setloadflag_2, ebp
	je	SHORT $L85315
; Line 793
	mov	edx, DWORD PTR _nSy1
	mov	ecx, DWORD PTR _nSx1
	call	@DRLG_L2SetRoom@8
$L85315:
; Line 794
	call	_DRLG_L2FloodTVal
; Line 795
	call	_DRLG_L2TransFix
; Line 796
	cmp	DWORD PTR _entry$[esp+20], ebp
; Line 797
	mov	ecx, OFFSET FLAT:_USTAIRS
	mov	edx, edi
	push	ebp
	jne	SHORT $L85316
	push	edi
	push	ebx
	push	ebx
	push	edi
	call	@DRLG_L2PlaceMiniSet@28
	movzx	esi, al
; Line 799
	cmp	esi, ebp
	je	SHORT $LABEL_21$85318
; Line 801
	push	edi
	push	ebp
	push	ebx
	push	ebx
	push	edi
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_DSTAIRS
	call	@DRLG_L2PlaceMiniSet@28
	movzx	esi, al
; Line 803
	cmp	esi, ebp
	je	SHORT $LABEL_21$85318
	cmp	BYTE PTR _currlevel, 5
	jne	SHORT $LABEL_21$85318
; Line 805
	push	6
	push	ebp
	jmp	SHORT $L86607
$L85316:
; Line 812
	push	ebp
	push	ebx
	push	ebx
	push	edi
	call	@DRLG_L2PlaceMiniSet@28
; Line 814
	cmp	DWORD PTR _entry$[esp+20], edi
	movzx	esi, al
	je	SHORT $L85322
; Line 815
	cmp	esi, ebp
	je	SHORT $LABEL_21$85318
; Line 817
	push	edi
	push	ebp
	push	ebx
	push	ebx
	push	edi
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_DSTAIRS
	call	@DRLG_L2PlaceMiniSet@28
	movzx	esi, al
; Line 819
	cmp	esi, ebp
	je	SHORT $LABEL_21$85318
	cmp	BYTE PTR _currlevel, 5
	jne	SHORT $LABEL_21$85318
; Line 821
	push	6
	push	edi
$L86607:
	push	ebx
	push	ebx
	mov	ecx, OFFSET FLAT:_WARPSTAIRS
	mov	edx, edi
	push	edi
	call	@DRLG_L2PlaceMiniSet@28
	movzx	esi, al
$LABEL_21$85318:
$LABEL_20$85321:
; Line 809
	sub	DWORD PTR _ViewY, 2
; Line 810
	jmp	SHORT $L85312
$L85322:
; Line 824
	cmp	esi, ebp
	je	SHORT $L85328
; Line 825
	push	edi
	push	edi
	push	ebx
	push	ebx
	push	edi
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_DSTAIRS
	call	@DRLG_L2PlaceMiniSet@28
	movzx	esi, al
; Line 827
	cmp	esi, ebp
	je	SHORT $L85328
; Line 828
	cmp	BYTE PTR _currlevel, 5
	jne	SHORT $L85328
; Line 829
	push	6
	push	ebp
	push	ebx
	push	ebx
	push	edi
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_WARPSTAIRS
	call	@DRLG_L2PlaceMiniSet@28
; Line 830
	movzx	esi, al
$L85328:
; Line 834
	dec	DWORD PTR _ViewX
	jmp	SHORT $L85312
$L86604:
	xor	ebp, ebp
$L85312:
; Line 835
	cmp	esi, ebp
	je	$L85311
; Line 836
	call	_L2LockoutFix
; Line 837
	call	_L2DoorFix
; Line 838
	call	_L2DirtFix
; Line 839
	push	0
	push	0
	push	3
	pop	ebp
	push	ebp
	push	10					; 0000000aH
	pop	ebx
	push	6
	mov	edx, ebx
	pop	ecx
	call	@DRLG_PlaceThemeRooms@20
; Line 840
	mov	ecx, OFFSET FLAT:_CTRDOOR1
	push	100					; 00000064H
	pop	esi
	mov	edx, esi
	call	@DRLG_L2PlaceRndSet@8
; Line 841
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_CTRDOOR2
	call	@DRLG_L2PlaceRndSet@8
; Line 842
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_CTRDOOR3
	call	@DRLG_L2PlaceRndSet@8
; Line 843
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_CTRDOOR4
	call	@DRLG_L2PlaceRndSet@8
; Line 844
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_CTRDOOR5
	call	@DRLG_L2PlaceRndSet@8
; Line 845
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_CTRDOOR6
	call	@DRLG_L2PlaceRndSet@8
; Line 846
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_CTRDOOR7
	call	@DRLG_L2PlaceRndSet@8
; Line 847
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_CTRDOOR8
	call	@DRLG_L2PlaceRndSet@8
; Line 848
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH33
	call	@DRLG_L2PlaceRndSet@8
; Line 849
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH34
	call	@DRLG_L2PlaceRndSet@8
; Line 850
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH35
	call	@DRLG_L2PlaceRndSet@8
; Line 851
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH36
	call	@DRLG_L2PlaceRndSet@8
; Line 852
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH37
	call	@DRLG_L2PlaceRndSet@8
; Line 853
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH38
	call	@DRLG_L2PlaceRndSet@8
; Line 854
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH39
	call	@DRLG_L2PlaceRndSet@8
; Line 855
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH40
	call	@DRLG_L2PlaceRndSet@8
; Line 856
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH1
	call	@DRLG_L2PlaceRndSet@8
; Line 857
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH2
	call	@DRLG_L2PlaceRndSet@8
; Line 858
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH3
	call	@DRLG_L2PlaceRndSet@8
; Line 859
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH4
	call	@DRLG_L2PlaceRndSet@8
; Line 860
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH5
	call	@DRLG_L2PlaceRndSet@8
; Line 861
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH6
	call	@DRLG_L2PlaceRndSet@8
; Line 862
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH7
	call	@DRLG_L2PlaceRndSet@8
; Line 863
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH8
	call	@DRLG_L2PlaceRndSet@8
; Line 864
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH9
	call	@DRLG_L2PlaceRndSet@8
; Line 865
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH10
	call	@DRLG_L2PlaceRndSet@8
; Line 866
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH11
	call	@DRLG_L2PlaceRndSet@8
; Line 867
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH12
	call	@DRLG_L2PlaceRndSet@8
; Line 868
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH13
	call	@DRLG_L2PlaceRndSet@8
; Line 869
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH14
	call	@DRLG_L2PlaceRndSet@8
; Line 870
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH15
	call	@DRLG_L2PlaceRndSet@8
; Line 871
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH16
	call	@DRLG_L2PlaceRndSet@8
; Line 872
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH17
	call	@DRLG_L2PlaceRndSet@8
; Line 873
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH18
	call	@DRLG_L2PlaceRndSet@8
; Line 874
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH19
	call	@DRLG_L2PlaceRndSet@8
; Line 875
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH20
	call	@DRLG_L2PlaceRndSet@8
; Line 876
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH21
	call	@DRLG_L2PlaceRndSet@8
; Line 877
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH22
	call	@DRLG_L2PlaceRndSet@8
; Line 878
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH23
	call	@DRLG_L2PlaceRndSet@8
; Line 879
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH24
	call	@DRLG_L2PlaceRndSet@8
; Line 880
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH25
	call	@DRLG_L2PlaceRndSet@8
; Line 881
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH26
	call	@DRLG_L2PlaceRndSet@8
; Line 882
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH27
	call	@DRLG_L2PlaceRndSet@8
; Line 883
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH28
	call	@DRLG_L2PlaceRndSet@8
; Line 884
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH29
	call	@DRLG_L2PlaceRndSet@8
; Line 885
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH30
	call	@DRLG_L2PlaceRndSet@8
; Line 886
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH31
	call	@DRLG_L2PlaceRndSet@8
; Line 887
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_VARCH32
	call	@DRLG_L2PlaceRndSet@8
; Line 888
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH1
	call	@DRLG_L2PlaceRndSet@8
; Line 889
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH2
	call	@DRLG_L2PlaceRndSet@8
; Line 890
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH3
	call	@DRLG_L2PlaceRndSet@8
; Line 891
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH4
	call	@DRLG_L2PlaceRndSet@8
; Line 892
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH5
	call	@DRLG_L2PlaceRndSet@8
; Line 893
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH6
	call	@DRLG_L2PlaceRndSet@8
; Line 894
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH7
	call	@DRLG_L2PlaceRndSet@8
; Line 895
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH8
	call	@DRLG_L2PlaceRndSet@8
; Line 896
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH9
	call	@DRLG_L2PlaceRndSet@8
; Line 897
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH10
	call	@DRLG_L2PlaceRndSet@8
; Line 898
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH11
	call	@DRLG_L2PlaceRndSet@8
; Line 899
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH12
	call	@DRLG_L2PlaceRndSet@8
; Line 900
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH13
	call	@DRLG_L2PlaceRndSet@8
; Line 901
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH14
	call	@DRLG_L2PlaceRndSet@8
; Line 902
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH15
	call	@DRLG_L2PlaceRndSet@8
; Line 903
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH16
	call	@DRLG_L2PlaceRndSet@8
; Line 904
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH17
	call	@DRLG_L2PlaceRndSet@8
; Line 905
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH18
	call	@DRLG_L2PlaceRndSet@8
; Line 906
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH19
	call	@DRLG_L2PlaceRndSet@8
; Line 907
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH20
	call	@DRLG_L2PlaceRndSet@8
; Line 908
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH21
	call	@DRLG_L2PlaceRndSet@8
; Line 909
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH22
	call	@DRLG_L2PlaceRndSet@8
; Line 910
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH23
	call	@DRLG_L2PlaceRndSet@8
; Line 911
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH24
	call	@DRLG_L2PlaceRndSet@8
; Line 912
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH25
	call	@DRLG_L2PlaceRndSet@8
; Line 913
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH26
	call	@DRLG_L2PlaceRndSet@8
; Line 914
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH27
	call	@DRLG_L2PlaceRndSet@8
; Line 915
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH28
	call	@DRLG_L2PlaceRndSet@8
; Line 916
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH29
	call	@DRLG_L2PlaceRndSet@8
; Line 917
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH30
	call	@DRLG_L2PlaceRndSet@8
; Line 918
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH31
	call	@DRLG_L2PlaceRndSet@8
; Line 919
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH32
	call	@DRLG_L2PlaceRndSet@8
; Line 920
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH33
	call	@DRLG_L2PlaceRndSet@8
; Line 921
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH34
	call	@DRLG_L2PlaceRndSet@8
; Line 922
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH35
	call	@DRLG_L2PlaceRndSet@8
; Line 923
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH36
	call	@DRLG_L2PlaceRndSet@8
; Line 924
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH37
	call	@DRLG_L2PlaceRndSet@8
; Line 925
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH38
	call	@DRLG_L2PlaceRndSet@8
; Line 926
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH39
	call	@DRLG_L2PlaceRndSet@8
; Line 927
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_HARCH40
	call	@DRLG_L2PlaceRndSet@8
; Line 928
	mov	ecx, OFFSET FLAT:_CRUSHCOL
	push	99					; 00000063H
	pop	edx
	call	@DRLG_L2PlaceRndSet@8
; Line 929
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:_RUINS1
	call	@DRLG_L2PlaceRndSet@8
; Line 930
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:_RUINS2
	call	@DRLG_L2PlaceRndSet@8
; Line 931
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:_RUINS3
	call	@DRLG_L2PlaceRndSet@8
; Line 932
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:_RUINS4
	call	@DRLG_L2PlaceRndSet@8
; Line 933
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:_RUINS5
	call	@DRLG_L2PlaceRndSet@8
; Line 934
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:_RUINS6
	call	@DRLG_L2PlaceRndSet@8
; Line 935
	mov	ecx, OFFSET FLAT:_RUINS7
	push	50					; 00000032H
	pop	edx
	call	@DRLG_L2PlaceRndSet@8
; Line 936
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_PANCREAS1
	call	@DRLG_L2PlaceRndSet@8
; Line 937
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_PANCREAS2
	call	@DRLG_L2PlaceRndSet@8
; Line 938
	mov	edx, ebp
	mov	ecx, OFFSET FLAT:_BIG1
	call	@DRLG_L2PlaceRndSet@8
; Line 939
	mov	edx, ebp
	mov	ecx, OFFSET FLAT:_BIG2
	call	@DRLG_L2PlaceRndSet@8
; Line 940
	mov	edx, ebp
	mov	ecx, OFFSET FLAT:_BIG3
	call	@DRLG_L2PlaceRndSet@8
; Line 941
	mov	edx, ebp
	mov	ecx, OFFSET FLAT:_BIG4
	call	@DRLG_L2PlaceRndSet@8
; Line 942
	mov	edx, ebp
	mov	ecx, OFFSET FLAT:_BIG5
	call	@DRLG_L2PlaceRndSet@8
; Line 943
	mov	ecx, OFFSET FLAT:_BIG6
	push	20					; 00000014H
	pop	esi
	mov	edx, esi
	call	@DRLG_L2PlaceRndSet@8
; Line 944
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_BIG7
	call	@DRLG_L2PlaceRndSet@8
; Line 945
	mov	edx, ebp
	mov	ecx, OFFSET FLAT:_BIG8
	call	@DRLG_L2PlaceRndSet@8
; Line 946
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_BIG9
	call	@DRLG_L2PlaceRndSet@8
; Line 947
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_BIG10
	call	@DRLG_L2PlaceRndSet@8
; Line 948
	call	_DRLG_L2Subs
; Line 949
	call	_DRLG_L2Shadows
; Line 950
	xor	ecx, ecx
$L85329:
; Line 952
	push	40					; 00000028H
; Line 955
	mov	eax, ecx
	pop	esi
$L85332:
	mov	dl, BYTE PTR _dungeon[eax]
	mov	BYTE PTR _pdungeon[eax], dl
	add	eax, 40					; 00000028H
; Line 958
	dec	esi
	jne	SHORT $L85332
; Line 959
	inc	ecx
; Line 960
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85329
; Line 961
	call	_DRLG_Init_Globals
; Line 962
	mov	edx, DWORD PTR _nSy1
	mov	ecx, DWORD PTR _nSx1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 963
	add	esp, 4
	jmp	@DRLG_CheckQuests@8
@DRLG_L2@4 ENDP
_TEXT	ENDS
EXTRN	_LvlViewY:DWORD
EXTRN	_LvlViewX:DWORD
EXTRN	@random@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L2PlaceMiniSet@28
_TEXT	SEGMENT
_setview$ = 20
_ldir$ = 24
_v20$ = -16
_v29$ = -44
_v30$ = -40
_v31$ = -36
_v32$ = -32
_v33$ = -28
_v36$ = -24
_max$ = -20
_v39$ = -12
_tmaxa$ = 8
_tmax$ = 8
_cx$ = 12
_cy$ = 16
@DRLG_L2PlaceMiniSet@28 PROC NEAR			; COMDAT
; _miniset$ = ecx
; _tmin$ = edx
; Line 967
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
; Line 1002
	movzx	ebx, BYTE PTR [ecx]
	push	edi
	mov	esi, edx
	movzx	edi, BYTE PTR [ecx+1]
; Line 1004
	mov	edx, DWORD PTR _tmax$[ebp]
	mov	DWORD PTR -8+[ebp], edi
	sub	edx, esi
	mov	DWORD PTR -4+[ebp], ebx
	mov	DWORD PTR _v29$[ebp], ecx
; Line 1007
	je	SHORT $L85380
; Line 1008
	xor	cl, cl
	call	@random@8
	add	eax, esi
	mov	DWORD PTR _v30$[ebp], eax
; Line 1009
	jmp	SHORT $L85381
$L85380:
; Line 1010
	mov	DWORD PTR _v30$[ebp], 1
$L85381:
; Line 1012
	xor	edx, edx
; Line 1013
	cmp	DWORD PTR _v30$[ebp], edx
	mov	DWORD PTR _v31$[ebp], edx
	jg	SHORT $L85382
; Line 1014
	mov	esi, DWORD PTR _ldir$[ebp]
$L85386:
; Line 1101
	cmp	BYTE PTR _setview$[ebp], 1
	jne	SHORT $L85419
; Line 1102
	lea	eax, DWORD PTR [esi+esi+21]
	mov	DWORD PTR _ViewX, eax
; Line 1103
	lea	eax, DWORD PTR [edx+edx+22]
	mov	DWORD PTR _ViewY, eax
$L85419:
; Line 1105
	cmp	DWORD PTR _ldir$[ebp], 0
	jne	SHORT $L85420
; Line 1106
	lea	eax, DWORD PTR [esi+esi+21]
	mov	DWORD PTR _LvlViewX, eax
; Line 1107
	lea	eax, DWORD PTR [edx+edx+22]
	mov	DWORD PTR _LvlViewY, eax
$L85420:
; Line 1109
	cmp	DWORD PTR _ldir$[ebp], 6
	jne	SHORT $L85421
; Line 1110
	lea	eax, DWORD PTR [esi+esi+21]
	mov	DWORD PTR _LvlViewX, eax
; Line 1111
	lea	eax, DWORD PTR [edx+edx+22]
	mov	DWORD PTR _LvlViewY, eax
$L85421:
; Line 1113
	mov	al, 1
$L85349:
	pop	edi
	pop	esi
	pop	ebx
; Line 1114
	leave
	ret	20					; 00000014H
$L85382:
; Line 1017
	push	40					; 00000028H
	pop	eax
	sub	eax, ebx
; Line 1018
	push	40					; 00000028H
	mov	DWORD PTR _max$[ebp], eax
	pop	eax
	sub	eax, edi
	mov	DWORD PTR _v36$[ebp], eax
$L85384:
; Line 1020
	mov	edx, DWORD PTR _max$[ebp]
	xor	cl, cl
	call	@random@8
; Line 1023
	mov	edx, DWORD PTR _v36$[ebp]
	xor	ebx, ebx
	xor	cl, cl
	mov	esi, eax
	mov	DWORD PTR _v33$[ebp], ebx
	call	@random@8
	mov	edx, eax
; Line 1024
	mov	DWORD PTR _v39$[ebp], edx
$L85387:
; Line 1026
	cmp	DWORD PTR _v33$[ebp], 200		; 000000c8H
	jge	$L86621
; Line 1029
	cmp	esi, DWORD PTR _nSx1
	mov	DWORD PTR _tmaxa$[ebp], 1
	jl	SHORT $L85391
	cmp	esi, DWORD PTR _nSx2
	jg	SHORT $L85391
	cmp	edx, DWORD PTR _nSy1
	jl	SHORT $L85391
	cmp	edx, DWORD PTR _nSy2
	jg	SHORT $L85391
; Line 1030
	mov	DWORD PTR _tmaxa$[ebp], ebx
$L85391:
; Line 1031
	mov	eax, DWORD PTR _cx$[ebp]
	cmp	eax, -1
	je	SHORT $L85393
; Line 1033
	mov	ecx, eax
	sub	ecx, DWORD PTR -4+[ebp]
	cmp	esi, ecx
	jl	SHORT $L85393
	add	eax, 12					; 0000000cH
	cmp	esi, eax
	jg	SHORT $L85393
; Line 1034
	mov	edx, DWORD PTR _max$[ebp]
	xor	cl, cl
	call	@random@8
; Line 1037
	mov	edx, DWORD PTR _v36$[ebp]
	xor	cl, cl
	mov	esi, eax
	mov	DWORD PTR _tmaxa$[ebp], ebx
	call	@random@8
	mov	edx, eax
	mov	DWORD PTR _v39$[ebp], edx
$L85393:
; Line 1041
	mov	eax, DWORD PTR _cy$[ebp]
	cmp	eax, -1
	je	SHORT $L85394
	mov	ecx, eax
	sub	ecx, DWORD PTR -8+[ebp]
	cmp	edx, ecx
	jl	SHORT $L85394
	add	eax, 12					; 0000000cH
	cmp	edx, eax
	jg	SHORT $L85394
; Line 1042
	mov	edx, DWORD PTR _max$[ebp]
	xor	cl, cl
	call	@random@8
; Line 1045
	mov	edx, DWORD PTR _v36$[ebp]
	xor	cl, cl
	mov	esi, eax
	mov	DWORD PTR _tmaxa$[ebp], ebx
	call	@random@8
	mov	edx, eax
	mov	DWORD PTR _v39$[ebp], edx
$L85394:
; Line 1049
	cmp	DWORD PTR -8+[ebp], ebx
	push	2
	mov	DWORD PTR _v20$[ebp], ebx
	pop	edi
	jle	SHORT $L86618
$L85395:
; Line 1050
	cmp	DWORD PTR _tmaxa$[ebp], 1
	jne	SHORT $L86618
; Line 1053
	cmp	DWORD PTR -4+[ebp], ebx
	mov	DWORD PTR _v32$[ebp], ebx
	jle	SHORT $L85402
; Line 1054
	mov	ecx, DWORD PTR _v20$[ebp]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	ecx, DWORD PTR [ecx+eax*8]
	add	ecx, edx
$L85400:
; Line 1056
	cmp	DWORD PTR _tmaxa$[ebp], 1
	jne	SHORT $L85402
; Line 1058
	mov	eax, DWORD PTR _v29$[ebp]
	mov	al, BYTE PTR [edi+eax]
; Line 1059
	test	al, al
	je	SHORT $L85404
	movsx	ebx, BYTE PTR _dungeon[ecx]
	movzx	eax, al
	cmp	ebx, eax
	je	SHORT $L86625
; Line 1060
	and	DWORD PTR _tmaxa$[ebp], 0
$L86625:
	xor	ebx, ebx
$L85404:
; Line 1061
	cmp	BYTE PTR _dflags[ecx], 0
	je	SHORT $L85405
; Line 1062
	mov	DWORD PTR _tmaxa$[ebp], ebx
$L85405:
; Line 1063
	inc	edi
; Line 1064
	inc	DWORD PTR _v32$[ebp]
; Line 1066
	mov	eax, DWORD PTR _v32$[ebp]
	add	ecx, 40					; 00000028H
	xor	ebx, ebx
	cmp	eax, DWORD PTR -4+[ebp]
	jl	SHORT $L85400
$L85402:
; Line 1049
	inc	DWORD PTR _v20$[ebp]
	mov	eax, DWORD PTR _v20$[ebp]
	cmp	eax, DWORD PTR -8+[ebp]
	jl	SHORT $L85395
$L86618:
; Line 1069
	cmp	DWORD PTR _tmaxa$[ebp], ebx
	jne	SHORT $L85407
	inc	esi
	cmp	esi, DWORD PTR _max$[ebp]
	jne	SHORT $L85407
; Line 1070
	xor	esi, esi
; Line 1071
	inc	edx
; Line 1072
	cmp	edx, DWORD PTR _v36$[ebp]
	mov	DWORD PTR _v39$[ebp], edx
	jne	SHORT $L85407
; Line 1073
	mov	DWORD PTR _v39$[ebp], ebx
; Line 1074
	xor	edx, edx
$L85407:
; Line 1077
	inc	DWORD PTR _v33$[ebp]
; Line 1078
	cmp	DWORD PTR _tmaxa$[ebp], ebx
	je	$L85387
; Line 1079
	cmp	DWORD PTR _v33$[ebp], 200		; 000000c8H
	jge	SHORT $L86621
; Line 1082
	mov	ecx, DWORD PTR -8+[ebp]
	xor	eax, eax
	imul	ecx, DWORD PTR -4+[ebp]
	inc	ecx
	inc	ecx
	cmp	DWORD PTR -8+[ebp], ebx
	jle	SHORT $L85412
$L85410:
; Line 1083
	mov	ebx, DWORD PTR -4+[ebp]
; Line 1084
	test	ebx, ebx
	jle	SHORT $L85411
; Line 1085
	lea	edi, DWORD PTR [esi+esi*4]
	lea	edi, DWORD PTR [eax+edi*8]
	lea	edi, DWORD PTR _dungeon[edi+edx]
$L85414:
; Line 1087
	mov	edx, DWORD PTR _v29$[ebp]
	mov	dl, BYTE PTR [edx+ecx]
; Line 1088
	test	dl, dl
	je	SHORT $L85418
; Line 1089
	mov	BYTE PTR [edi], dl
$L85418:
; Line 1090
	inc	ecx
; Line 1091
	add	edi, 40					; 00000028H
; Line 1092
	dec	ebx
; Line 1093
	jne	SHORT $L85414
; Line 1094
	mov	edx, DWORD PTR _v39$[ebp]
$L85411:
; Line 1082
	inc	eax
	cmp	eax, DWORD PTR -8+[ebp]
	jl	SHORT $L85410
$L85412:
; Line 1097
	inc	DWORD PTR _v31$[ebp]
; Line 1098
	mov	eax, DWORD PTR _v31$[ebp]
	cmp	eax, DWORD PTR _v30$[ebp]
	jl	$L85384
	jmp	$L85386
$L86621:
; Line 1080
	xor	al, al
	jmp	$L85349
@DRLG_L2PlaceMiniSet@28 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L2PlaceRndSet@8
_TEXT	SEGMENT
_miniset$ = -44
_rndper$ = -68
_v6$ = -40
_i$ = -24
_v11$ = -40
_v14$ = -24
_v17$ = -24
_v23$ = -52
_v25$ = -32
_v27$ = -60
_v30$ = -16
_v31$ = -20
_v32$ = -8
_v33$ = -4
@DRLG_L2PlaceRndSet@8 PROC NEAR				; COMDAT
; _miniset$ = ecx
; _rndper$ = edx
; Line 1121
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, ecx
; Line 1156
	and	DWORD PTR _v32$[ebp], 0
; Line 1162
	push	40					; 00000028H
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _rndper$[ebp], edx
	pop	edx
	mov	DWORD PTR _miniset$[ebp], eax
	mov	DWORD PTR -36+[ebp], edx
	movzx	eax, BYTE PTR [eax]
	sub	DWORD PTR -36+[ebp], ecx
	mov	DWORD PTR _v30$[ebp], eax
; Line 1164
	cmp	DWORD PTR -36+[ebp], 0
	mov	DWORD PTR _v31$[ebp], ecx
	jle	$L86649
; Line 1166
	mov	esi, ecx
	sub	edx, eax
	neg	esi
	mov	DWORD PTR _v27$[ebp], edx
	mov	DWORD PTR _v23$[ebp], esi
$L85461:
; Line 1168
	xor	edi, edi
; Line 1170
	cmp	edx, edi
	mov	DWORD PTR _v25$[ebp], edi
	jle	$L85466
; Line 1172
	mov	esi, eax
	mov	edx, eax
	imul	esi, ecx
	mov	ecx, DWORD PTR _v32$[ebp]
	lea	eax, DWORD PTR [eax+eax*4]
	neg	edx
	shl	eax, 3
	mov	ebx, OFFSET FLAT:_dungeon
	inc	esi
	sub	ebx, eax
; Line 1250
	mov	DWORD PTR -48+[ebp], 1
	inc	esi
	sub	DWORD PTR -48+[ebp], edx
	mov	DWORD PTR -28+[ebp], ecx
	mov	DWORD PTR -12+[ebp], edx
	mov	DWORD PTR -56+[ebp], ebx
$L85464:
	cmp	edi, DWORD PTR _nSx1
	mov	DWORD PTR _v33$[ebp], 1
	mov	DWORD PTR _v6$[ebp], 2
	jl	SHORT $L85467
; Line 1178
	cmp	edi, DWORD PTR _nSx2
	jg	SHORT $L85467
	mov	eax, DWORD PTR _v32$[ebp]
	cmp	eax, DWORD PTR _nSy1
	jl	SHORT $L85467
	cmp	eax, DWORD PTR _nSy2
	jg	SHORT $L85467
; Line 1179
	and	DWORD PTR _v33$[ebp], 0
$L85467:
; Line 1180
	mov	eax, DWORD PTR _v31$[ebp]
	and	DWORD PTR _i$[ebp], 0
	test	eax, eax
	jle	SHORT $L86647
$L85468:
; Line 1181
	cmp	DWORD PTR _v33$[ebp], 1
	jne	SHORT $L86647
; Line 1183
	xor	edi, edi
; Line 1184
	cmp	DWORD PTR _v30$[ebp], edi
	jle	SHORT $L85475
; Line 1185
	mov	eax, DWORD PTR -28+[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, eax
$L85473:
; Line 1187
	cmp	DWORD PTR _v33$[ebp], 1
	jne	SHORT $L85475
; Line 1189
	mov	eax, DWORD PTR _miniset$[ebp]
	mov	edx, DWORD PTR _v6$[ebp]
	mov	al, BYTE PTR [edx+eax]
; Line 1190
	test	al, al
	je	SHORT $L85477
	movsx	edx, BYTE PTR _dungeon[ecx]
	movzx	eax, al
	cmp	edx, eax
	je	SHORT $L85477
; Line 1191
	and	DWORD PTR _v33$[ebp], 0
$L85477:
; Line 1192
	cmp	BYTE PTR _dflags[ecx], 0
	je	SHORT $L85478
; Line 1193
	and	DWORD PTR _v33$[ebp], 0
$L85478:
; Line 1194
	inc	DWORD PTR _v6$[ebp]
; Line 1195
	inc	edi
; Line 1197
	add	ecx, 40					; 00000028H
	cmp	edi, DWORD PTR _v30$[ebp]
	jl	SHORT $L85473
$L85475:
; Line 1180
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _v31$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $L85468
$L86647:
; Line 1201
	cmp	DWORD PTR _v33$[ebp], 1
	mov	DWORD PTR _v11$[ebp], esi
	jne	$L85486
; Line 1204
	mov	ecx, DWORD PTR _v32$[ebp]
	mov	edi, DWORD PTR _v23$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	cmp	edi, eax
	mov	DWORD PTR -64+[ebp], eax
	jge	SHORT $LABEL_34$85482
	mov	eax, DWORD PTR _v30$[ebp]
; Line 1207
	mov	ecx, DWORD PTR _v25$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _v14$[ebp], eax
$L85495:
; Line 1226
	mov	eax, DWORD PTR _v14$[ebp]
	cmp	DWORD PTR -12+[ebp], eax
	jge	SHORT $L85498
; Line 1228
	mov	edx, DWORD PTR _miniset$[ebp]
	sub	eax, DWORD PTR -12+[ebp]
	lea	ecx, DWORD PTR [ebx+edi]
	mov	dl, BYTE PTR [esi+edx]
$L85500:
; Line 1230
	cmp	BYTE PTR [ecx], dl
	jne	SHORT $L85503
; Line 1231
	and	DWORD PTR _v33$[ebp], 0
	mov	ebx, DWORD PTR -56+[ebp]
$L85503:
; Line 1232
	add	ecx, 40					; 00000028H
; Line 1233
	dec	eax
; Line 1234
	jne	SHORT $L85500
$L85498:
; Line 1237
	inc	edi
	cmp	edi, DWORD PTR -64+[ebp]
	jge	SHORT $L86648
; Line 1223
	cmp	DWORD PTR _v33$[ebp], 1
	je	SHORT $L85495
; Line 1254
	jmp	SHORT $L85486
$L86648:
; Line 1238
	cmp	DWORD PTR _v33$[ebp], 1
	jne	SHORT $L85486
$LABEL_34$85482:
; Line 1206
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, DWORD PTR _rndper$[ebp]
	jge	SHORT $L85486
; Line 1207
	xor	edx, edx
	cmp	DWORD PTR _v31$[ebp], edx
	jle	SHORT $L85486
$L85484:
; Line 1208
	mov	eax, DWORD PTR _v30$[ebp]
; Line 1209
	test	eax, eax
	mov	DWORD PTR _v17$[ebp], eax
	jle	SHORT $L85491
; Line 1210
	mov	eax, DWORD PTR -28+[ebp]
	lea	ecx, DWORD PTR _dungeon[eax+edx]
$L85489:
; Line 1212
	mov	eax, DWORD PTR _miniset$[ebp]
	mov	edi, DWORD PTR _v11$[ebp]
	mov	al, BYTE PTR [edi+eax]
; Line 1213
	test	al, al
	je	SHORT $L85492
; Line 1214
	mov	BYTE PTR [ecx], al
$L85492:
; Line 1215
	inc	DWORD PTR _v11$[ebp]
; Line 1216
	add	ecx, 40					; 00000028H
; Line 1217
	dec	DWORD PTR _v17$[ebp]
; Line 1218
	jne	SHORT $L85489
$L85491:
; Line 1207
	inc	edx
	cmp	edx, DWORD PTR _v31$[ebp]
	jl	SHORT $L85484
$L85486:
; Line 1250
	mov	eax, DWORD PTR -48+[ebp]
	mov	ecx, DWORD PTR -12+[ebp]
	add	DWORD PTR -28+[ebp], 40			; 00000028H
	add	ebx, 40					; 00000028H
	inc	DWORD PTR _v25$[ebp]
	inc	DWORD PTR -12+[ebp]
	lea	edi, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _v25$[ebp]
	cmp	eax, DWORD PTR _v27$[ebp]
	mov	DWORD PTR -56+[ebp], ebx
	jl	$L85464
	mov	edx, DWORD PTR _v27$[ebp]
$L85466:
; Line 1252
	inc	DWORD PTR _v32$[ebp]
; Line 1253
	inc	DWORD PTR _v23$[ebp]
; Line 1254
	mov	eax, DWORD PTR _v32$[ebp]
	cmp	eax, DWORD PTR -36+[ebp]
	jge	SHORT $L86649
; Line 1256
	mov	eax, DWORD PTR _v30$[ebp]
; Line 1257
	mov	ecx, DWORD PTR _v31$[ebp]
	jmp	$L85461
$L86649:
	pop	edi
	pop	esi
	pop	ebx
; Line 1260
	leave
	ret	0
@DRLG_L2PlaceRndSet@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L2Subs
_TEXT	SEGMENT
_v0$ = -20
_v7$ = -16
_v8$ = -12
_v9$ = -8
_v10$ = -4
_DRLG_L2Subs PROC NEAR					; COMDAT
; Line 1265
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
; Line 1278
	push	3
	pop	edi
; Line 1279
	mov	DWORD PTR _v9$[ebp], -2			; fffffffeH
; Line 1280
	mov	DWORD PTR _v7$[ebp], edi
$L85519:
; Line 1283
	mov	eax, DWORD PTR _v9$[ebp]
	and	DWORD PTR _v10$[ebp], 0
	lea	eax, DWORD PTR _dungeon[eax+2]
	mov	DWORD PTR _v8$[ebp], eax
$L85522:
; Line 1285
	mov	eax, DWORD PTR _v10$[ebp]
	cmp	eax, DWORD PTR _nSx1
	jl	SHORT $L85526
	cmp	eax, DWORD PTR _nSx2
	jle	$L85543
$L85526:
	lea	eax, DWORD PTR [edi-3]
	cmp	eax, DWORD PTR _nSy1
	jl	SHORT $L85527
	cmp	eax, DWORD PTR _nSy2
	jle	$L85543
$L85527:
	push	4
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $L85543
; Line 1286
	mov	eax, DWORD PTR _v8$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	bl, BYTE PTR _BTYPESL2[eax]
; Line 1287
	test	bl, bl
	je	SHORT $L85543
; Line 1288
	push	16					; 00000010H
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 1289
	or	edx, -1
	jmp	SHORT $L86683
$L85531:
; Line 1291
	inc	edx
	cmp	edx, 161				; 000000a1H
	jne	SHORT $L85533
; Line 1292
	xor	edx, edx
$L85533:
; Line 1293
	cmp	bl, BYTE PTR _BTYPESL2[edx]
	jne	SHORT $L86683
; Line 1294
	dec	eax
$L86683:
; Line 1290
	test	eax, eax
	jge	SHORT $L85531
; Line 1296
	mov	esi, DWORD PTR _v9$[ebp]
; Line 1297
	lea	ebx, DWORD PTR [edi-1]
	cmp	esi, ebx
	jge	SHORT $L85537
; Line 1312
	mov	eax, DWORD PTR _v10$[ebp]
	lea	ecx, DWORD PTR [eax+2]
$L85535:
	lea	eax, DWORD PTR [ecx-4]
	cmp	eax, ecx
	jge	SHORT $L85536
	mov	edi, DWORD PTR _v7$[ebp]
	mov	DWORD PTR _v0$[ebp], edi
$L85538:
	lea	edi, DWORD PTR [eax+eax*4]
	movzx	edi, BYTE PTR _dungeon[esi+edi*8]
	cmp	edi, edx
	jne	SHORT $L85539
	mov	esi, DWORD PTR _v7$[ebp]
	mov	eax, ecx
$L85539:
	inc	eax
	cmp	eax, ecx
	jl	SHORT $L85538
; Line 1298
	mov	edi, DWORD PTR _v0$[ebp]
$L85536:
; Line 1297
	inc	esi
	cmp	esi, ebx
	jl	SHORT $L85535
$L85537:
; Line 1306
	cmp	esi, edi
	jge	SHORT $L85543
; Line 1307
	mov	eax, DWORD PTR _v8$[ebp]
	mov	BYTE PTR [eax], dl
$L85543:
; Line 1310
	inc	DWORD PTR _v10$[ebp]
; Line 1311
	add	DWORD PTR _v8$[ebp], 40			; 00000028H
; Line 1312
	cmp	DWORD PTR _v10$[ebp], 40		; 00000028H
	jl	$L85522
; Line 1313
	inc	DWORD PTR _v9$[ebp]
; Line 1314
	inc	edi
	mov	DWORD PTR _v7$[ebp], edi
; Line 1315
	lea	eax, DWORD PTR [edi-3]
	cmp	eax, 40					; 00000028H
	jl	$L85519
	pop	edi
	pop	esi
	pop	ebx
; Line 1316
	leave
	ret	0
_DRLG_L2Subs ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L2Shadows
_TEXT	SEGMENT
_v10$ = -8
_v11$ = -2
_v12$ = -3
_v13$ = -1
_DRLG_L2Shadows PROC NEAR				; COMDAT
; Line 1321
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 1337
	mov	DWORD PTR _v10$[ebp], 1
$L85559:
; Line 1340
	mov	eax, DWORD PTR _v10$[ebp]
	mov	DWORD PTR -12+[ebp], 39			; 00000027H
	lea	eax, DWORD PTR _dungeon[eax+39]
$L85562:
; Line 1343
	movzx	ecx, BYTE PTR [eax+1]
	mov	esi, OFFSET FLAT:_SPATSL2+2
	mov	dl, BYTE PTR _BSTYPESL2[ecx]
; Line 1344
	movzx	ecx, BYTE PTR [eax-39]
	mov	cl, BYTE PTR _BSTYPESL2[ecx]
	mov	BYTE PTR _v12$[ebp], cl
; Line 1345
	movzx	ecx, BYTE PTR [eax]
	mov	cl, BYTE PTR _BSTYPESL2[ecx]
	mov	BYTE PTR _v11$[ebp], cl
; Line 1346
	movzx	ecx, BYTE PTR [eax-40]
	mov	cl, BYTE PTR _BSTYPESL2[ecx]
	mov	BYTE PTR _v13$[ebp], cl
$L85569:
; Line 1348
	cmp	BYTE PTR [esi-2], dl
	jne	SHORT $L85579
; Line 1350
	mov	cl, BYTE PTR [esi-1]
	xor	edi, edi
	inc	edi
	test	cl, cl
	je	SHORT $L85573
	cmp	cl, BYTE PTR _v13$[ebp]
	je	SHORT $L85573
; Line 1351
	xor	edi, edi
$L85573:
; Line 1352
	mov	cl, BYTE PTR [esi]
; Line 1353
	test	cl, cl
	je	SHORT $L85574
	movzx	ebx, BYTE PTR _v11$[ebp]
	movsx	ecx, cl
	cmp	ecx, ebx
	je	SHORT $L85574
; Line 1354
	xor	edi, edi
$L85574:
; Line 1355
	mov	cl, BYTE PTR [esi+1]
; Line 1356
	test	cl, cl
	je	SHORT $L85575
	movzx	ebx, BYTE PTR _v12$[ebp]
	movsx	ecx, cl
	cmp	ecx, ebx
	je	SHORT $L85575
; Line 1357
	xor	edi, edi
$L85575:
; Line 1358
	cmp	edi, 1
	jne	SHORT $L85579
; Line 1359
	mov	cl, BYTE PTR [esi+2]
; Line 1360
	test	cl, cl
	je	SHORT $L85577
; Line 1361
	mov	BYTE PTR [eax-40], cl
$L85577:
; Line 1362
	mov	cl, BYTE PTR [esi+3]
; Line 1363
	test	cl, cl
	je	SHORT $L85578
; Line 1364
	mov	BYTE PTR [eax], cl
$L85578:
; Line 1365
	mov	cl, BYTE PTR [esi+4]
; Line 1366
	test	cl, cl
	je	SHORT $L85579
; Line 1367
	mov	BYTE PTR [eax-39], cl
$L85579:
; Line 1370
	add	esi, 7
; Line 1371
	lea	ecx, DWORD PTR [esi-1]
	cmp	ecx, OFFSET FLAT:_SPATSL2+15
	jl	SHORT $L85569
; Line 1372
	add	eax, 40					; 00000028H
; Line 1374
	dec	DWORD PTR -12+[ebp]
	jne	$L85562
; Line 1375
	inc	DWORD PTR _v10$[ebp]
; Line 1376
	cmp	DWORD PTR _v10$[ebp], 40		; 00000028H
	jl	$L85559
	pop	edi
	pop	esi
	pop	ebx
; Line 1377
	leave
	ret	0
_DRLG_L2Shadows ENDP
_TEXT	ENDS
EXTRN	_setpc_h:DWORD
EXTRN	_setpc_w:DWORD
EXTRN	_setpc_x:DWORD
EXTRN	_setpc_y:DWORD
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L2SetRoom@8
_TEXT	SEGMENT
_v6$ = -12
_v7$ = -8
_v8$ = -4
@DRLG_L2SetRoom@8 PROC NEAR				; COMDAT
; _rx1$ = ecx
; _ry1$ = edx
; Line 1381
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1391
	mov	eax, DWORD PTR _pSetPiece_2
	and	DWORD PTR _v8$[ebp], 0
	push	esi
	push	edi
	movzx	edi, BYTE PTR [eax+2]
; Line 1392
	movzx	esi, BYTE PTR [eax]
; Line 1397
	add	eax, 4
	mov	DWORD PTR _setpc_x, ecx
; Line 1398
	test	edi, edi
	mov	DWORD PTR _setpc_y, edx
	mov	DWORD PTR _setpc_w, esi
	mov	DWORD PTR _setpc_h, edi
	mov	DWORD PTR _v7$[ebp], eax
	jle	SHORT $L85599
	push	ebx
$L85597:
; Line 1400
	test	esi, esi
	jle	SHORT $L85603
; Line 1402
	mov	ebx, DWORD PTR _v8$[ebp]
	lea	eax, DWORD PTR [ecx+ecx*4]
	mov	DWORD PTR _v6$[ebp], esi
	lea	eax, DWORD PTR [ebx+eax*8]
	add	eax, edx
$L85601:
; Line 1404
	mov	ebx, DWORD PTR _v7$[ebp]
	mov	bl, BYTE PTR [ebx]
; Line 1405
	test	bl, bl
	je	SHORT $L85604
; Line 1406
	or	BYTE PTR _dflags[eax], -128		; ffffff80H
; Line 1407
	mov	BYTE PTR _dungeon[eax], bl
; Line 1408
	jmp	SHORT $L85605
$L85604:
; Line 1409
	mov	BYTE PTR _dungeon[eax], 3
$L85605:
; Line 1411
	add	DWORD PTR _v7$[ebp], 2
; Line 1414
	add	eax, 40					; 00000028H
	dec	DWORD PTR _v6$[ebp]
	jne	SHORT $L85601
$L85603:
; Line 1416
	inc	DWORD PTR _v8$[ebp]
; Line 1417
	cmp	DWORD PTR _v8$[ebp], edi
	jl	SHORT $L85597
	pop	ebx
$L85599:
	pop	edi
	pop	esi
; Line 1419
	leave
	ret	0
@DRLG_L2SetRoom@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L2TileFix
_TEXT	SEGMENT
_L2TileFix PROC NEAR					; COMDAT
; Line 1430
	xor	edx, edx
	push	esi
$L85611:
; Line 1432
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[edx]
	pop	esi
$L85615:
; Line 1435
	mov	cl, BYTE PTR [eax]
; Line 1436
	cmp	cl, 1
	jne	SHORT $L85618
	cmp	BYTE PTR [eax+1], 3
	jne	SHORT $L85618
; Line 1437
	mov	BYTE PTR [eax+1], cl
$L85618:
; Line 1438
	cmp	cl, 3
	jne	SHORT $L85621
; Line 1439
	cmp	BYTE PTR [eax+1], 1
	jne	SHORT $L85620
; Line 1440
	mov	BYTE PTR [eax+1], cl
$L85620:
; Line 1441
	cmp	BYTE PTR [eax+40], 7
	jne	SHORT $L85623
; Line 1442
	mov	BYTE PTR [eax+40], 3
$L85621:
; Line 1444
	cmp	cl, 2
	jne	SHORT $L85622
	cmp	BYTE PTR [eax+40], 3
	jne	SHORT $L85623
; Line 1445
	mov	BYTE PTR [eax+40], cl
$L85622:
; Line 1446
	cmp	cl, 11					; 0000000bH
	jne	SHORT $L85623
	cmp	BYTE PTR [eax+40], 14			; 0000000eH
	jne	SHORT $L85623
; Line 1447
	mov	BYTE PTR [eax+40], 16			; 00000010H
$L85623:
; Line 1448
	add	eax, 40					; 00000028H
; Line 1450
	dec	esi
	jne	SHORT $L85615
; Line 1451
	inc	edx
; Line 1452
	cmp	edx, 40					; 00000028H
	jl	SHORT $L85611
	pop	esi
; Line 1453
	ret	0
_L2TileFix ENDP
_TEXT	ENDS
PUBLIC	@CreateRoom@36
PUBLIC	@GetHall@20
PUBLIC	@ConnectHall@20
PUBLIC	@DoPatternCheck@8
PUBLIC	_DL2_FillVoids
; Function compile flags: /Ogsy
;	COMDAT _CreateDungeon
_TEXT	SEGMENT
_nX1$ = -24
_nY1$ = -20
_nX2$ = -16
_nY2$ = -12
_nHd$ = -8
_CreateDungeon PROC NEAR				; COMDAT
; Line 1456
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 1478
	mov	al, BYTE PTR _currlevel
	push	esi
	push	edi
	xor	edi, edi
	xor	ecx, ecx
	xor	edx, edx
	xor	esi, esi
	cmp	al, 5
	jne	SHORT $L85642
; Line 1479
	cmp	BYTE PTR _quests+218, 0
	je	SHORT $LABEL_12$85644
; Line 1481
	push	20					; 00000014H
	pop	edx
; Line 1482
	push	14					; 0000000eH
	pop	ecx
; Line 1483
	jmp	SHORT $L85645
$L85642:
; Line 1484
	cmp	al, 6
	jne	SHORT $L85646
; Line 1485
	cmp	BYTE PTR _quests+338, 0
	je	SHORT $LABEL_12$85644
; Line 1487
	push	10					; 0000000aH
; Line 1488
	jmp	SHORT $L86716
$L85646:
; Line 1489
	cmp	al, 7
	jne	SHORT $LABEL_12$85644
	cmp	BYTE PTR _quests+194, 0
	je	SHORT $LABEL_12$85644
; Line 1491
	push	15					; 0000000fH
$L86716:
	pop	ecx
; Line 1494
	mov	edx, ecx
$L85645:
; Line 1496
	xor	esi, esi
	inc	esi
$LABEL_12$85644:
; Line 1498
	push	ecx
	push	edx
	push	esi
	push	edi
	push	edi
	push	39					; 00000027H
	push	39					; 00000027H
	push	2
	pop	ecx
	mov	edx, ecx
	call	@CreateRoom@36
	jmp	SHORT $L86717
$L85652:
; Line 1500
	lea	eax, DWORD PTR _nHd$[ebp]
	lea	edx, DWORD PTR _nY1$[ebp]
	push	eax
	lea	eax, DWORD PTR _nY2$[ebp]
	push	eax
	lea	eax, DWORD PTR _nX2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nX1$[ebp]
	call	@GetHall@20
; Line 1501
	push	DWORD PTR _nHd$[ebp]
	mov	edx, DWORD PTR _nY1$[ebp]
	mov	ecx, DWORD PTR _nX1$[ebp]
	push	DWORD PTR _nY2$[ebp]
	push	DWORD PTR _nX2$[ebp]
	call	@ConnectHall@20
$L86717:
; Line 1499
	cmp	DWORD PTR _pHallList, edi
	jne	SHORT $L85652
; Line 1541
	mov	edi, OFFSET FLAT:_predungeon
	push	ebx
	xor	esi, esi
	sub	edi, 40					; 00000028H
	mov	bl, 32					; 00000020H
$L85654:
	lea	eax, DWORD PTR [edi+esi]
	mov	DWORD PTR -4+[ebp], 41			; 00000029H
$L85657:
	lea	ecx, DWORD PTR [eax+40]
	cmp	BYTE PTR [ecx], 67			; 00000043H
	jne	SHORT $L85661
; Line 1510
	mov	BYTE PTR [ecx], 35			; 00000023H
$L85661:
; Line 1511
	cmp	BYTE PTR [ecx], 66			; 00000042H
	jne	SHORT $L85662
; Line 1512
	mov	BYTE PTR [ecx], 35			; 00000023H
$L85662:
; Line 1513
	cmp	BYTE PTR [ecx], 69			; 00000045H
	jne	SHORT $L85663
; Line 1514
	mov	BYTE PTR [ecx], 35			; 00000023H
$L85663:
; Line 1515
	cmp	BYTE PTR [ecx], 65			; 00000041H
	jne	SHORT $L85664
; Line 1516
	mov	BYTE PTR [ecx], 35			; 00000023H
$L85664:
; Line 1517
	cmp	BYTE PTR [ecx], 44			; 0000002cH
	jne	SHORT $L85673
; Line 1518
	cmp	BYTE PTR [eax-1], bl
; Line 1519
	mov	BYTE PTR [ecx], 46			; 0000002eH
	sete	dl
; Line 1520
	test	dl, dl
	je	SHORT $L85666
; Line 1521
	mov	BYTE PTR [eax-1], 35			; 00000023H
$L85666:
; Line 1522
	cmp	BYTE PTR [eax], bl
	jne	SHORT $L85667
; Line 1523
	mov	BYTE PTR [eax], 35			; 00000023H
$L85667:
; Line 1524
	cmp	BYTE PTR [eax+1], bl
	jne	SHORT $L85668
; Line 1525
	mov	BYTE PTR [eax+1], 35			; 00000023H
$L85668:
; Line 1526
	cmp	BYTE PTR [eax+79], bl
	jne	SHORT $L85669
; Line 1527
	mov	BYTE PTR [eax+79], 35			; 00000023H
$L85669:
; Line 1528
	cmp	BYTE PTR [eax+80], bl
	jne	SHORT $L85670
; Line 1529
	mov	BYTE PTR [eax+80], 35			; 00000023H
$L85670:
; Line 1530
	cmp	BYTE PTR [eax+81], bl
	jne	SHORT $L85671
; Line 1531
	mov	BYTE PTR [eax+81], 35			; 00000023H
$L85671:
; Line 1532
	cmp	BYTE PTR [eax+39], bl
	jne	SHORT $L85672
; Line 1533
	mov	BYTE PTR [eax+39], 35			; 00000023H
$L85672:
; Line 1534
	cmp	BYTE PTR [eax+41], bl
	jne	SHORT $L85673
; Line 1535
	mov	BYTE PTR [eax+41], 35			; 00000023H
$L85673:
; Line 1539
	dec	DWORD PTR -4+[ebp]
	mov	eax, ecx
	jne	SHORT $L85657
; Line 1540
	inc	esi
; Line 1541
	cmp	esi, 40					; 00000028H
	jle	$L85654
; Line 1542
	call	_DL2_FillVoids
; Line 1543
	test	al, al
	pop	ebx
	je	SHORT $L85674
; Line 1544
	xor	edi, edi
$L85675:
; Line 1546
	xor	esi, esi
$L85678:
; Line 1548
	mov	ecx, esi
	mov	edx, edi
	inc	esi
	call	@DoPatternCheck@8
; Line 1549
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85678
; Line 1550
	inc	edi
; Line 1551
	cmp	edi, 40					; 00000028H
	jl	SHORT $L85675
; Line 1552
	mov	al, 1
$L85674:
	pop	edi
	pop	esi
; Line 1555
	leave
	ret	0
_CreateDungeon ENDP
_TEXT	ENDS
PUBLIC	@DefineRoom@20
PUBLIC	@AddHall@20
; Function compile flags: /Ogsy
;	COMDAT @CreateRoom@36
_TEXT	SEGMENT
_nX2$ = 8
_nY2$ = 12
_nRDest$ = 16
_nHDir$ = 20
_ForceHW$ = 24
_nH$ = 28
_nW$ = 32
_v27$ = 24
_v30$ = 16
_nX1a$ = -44
_v33$ = -40
_v34$ = -36
_v35$ = -32
_v36$ = -48
_v37$ = -24
_nY1a$ = -20
_v39$ = -16
_v40$ = -12
_v41$ = -28
_v42$ = -8
_v43$ = -4
@CreateRoom@36 PROC NEAR				; COMDAT
; _nX1$ = ecx
; _nY1$ = edx
; Line 1558
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 1596
	cmp	DWORD PTR _nRoomCnt, 80			; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _v39$[ebp], edx
	mov	DWORD PTR _v37$[ebp], ecx
	jge	$L86721
; Line 1597
	mov	eax, DWORD PTR _nX2$[ebp]
	add	eax, -2					; fffffffeH
; Line 1598
	add	edx, 2
	mov	DWORD PTR _v40$[ebp], eax
	mov	DWORD PTR _nY1a$[ebp], edx
$L85736:
; Line 1600
	mov	esi, DWORD PTR _nX2$[ebp]
; Line 1601
	mov	ebx, DWORD PTR _nY2$[ebp]
	sub	esi, DWORD PTR _v37$[ebp]
; Line 1602
	mov	eax, DWORD PTR _Area_Min
	sub	ebx, DWORD PTR _v39$[ebp]
	cmp	esi, eax
	jl	$L86721
	cmp	ebx, eax
	jl	$L86721
; Line 1604
	mov	eax, DWORD PTR _Room_Max
	cmp	esi, eax
	jg	SHORT $L85737
; Line 1606
	mov	ecx, DWORD PTR _Room_Min
; Line 1607
	cmp	esi, ecx
	jle	SHORT $L85741
; Line 1608
	mov	eax, esi
	sub	eax, ecx
; Line 1609
	jmp	SHORT $LABEL_7$85742
$L85741:
; Line 1611
	mov	DWORD PTR _v41$[ebp], esi
	jmp	SHORT $LABEL_11$85743
$L85737:
; Line 1743
	sub	eax, DWORD PTR _Room_Min
$LABEL_7$85742:
; Line 1745
	mov	edx, eax
	xor	cl, cl
	call	@random@8
; Line 1746
	mov	ecx, DWORD PTR _Room_Min
; Line 1747
	add	eax, ecx
	mov	DWORD PTR _v41$[ebp], eax
	mov	eax, DWORD PTR _Room_Max
$LABEL_11$85743:
	cmp	ebx, eax
	mov	edx, eax
	jg	SHORT $L85744
; Line 1615
	cmp	ebx, ecx
	jg	SHORT $L85745
; Line 1616
	mov	DWORD PTR _v36$[ebp], ebx
; Line 1617
	jmp	SHORT $LABEL_16$85746
$L85745:
; Line 1619
	mov	edx, ebx
$L85744:
; Line 1621
	sub	edx, ecx
; Line 1622
	xor	cl, cl
	call	@random@8
	add	eax, DWORD PTR _Room_Min
	mov	DWORD PTR _v36$[ebp], eax
$LABEL_16$85746:
; Line 1624
	cmp	DWORD PTR _ForceHW$[ebp], 1
	jne	SHORT $L85747
; Line 1625
	mov	eax, DWORD PTR _nW$[ebp]
	mov	DWORD PTR _v41$[ebp], eax
; Line 1626
	mov	eax, DWORD PTR _nH$[ebp]
	mov	DWORD PTR _v36$[ebp], eax
$L85747:
; Line 1628
	mov	edx, esi
	xor	cl, cl
	call	@random@8
	mov	edi, eax
; Line 1629
	mov	edx, ebx
	add	edi, DWORD PTR _v37$[ebp]
	xor	cl, cl
	call	@random@8
	mov	esi, eax
; Line 1630
	mov	eax, DWORD PTR _v41$[ebp]
	add	esi, DWORD PTR _v39$[ebp]
	lea	ebx, DWORD PTR [edi+eax]
; Line 1631
	mov	eax, DWORD PTR _v36$[ebp]
; Line 1632
	cmp	ebx, DWORD PTR _nX2$[ebp]
	lea	edx, DWORD PTR [esi+eax]
	mov	DWORD PTR _v43$[ebp], edx
	jle	SHORT $L85748
; Line 1633
	mov	ebx, DWORD PTR _nX2$[ebp]
; Line 1634
	mov	edi, ebx
	sub	edi, DWORD PTR _v41$[ebp]
$L85748:
; Line 1636
	mov	ecx, DWORD PTR _nY2$[ebp]
	cmp	edx, ecx
	jle	SHORT $L85749
; Line 1638
	mov	esi, ecx
	mov	DWORD PTR _v43$[ebp], ecx
	sub	esi, eax
$L85749:
; Line 1640
	push	38					; 00000026H
	pop	ecx
	cmp	edi, ecx
	jl	SHORT $L85750
; Line 1641
	mov	edi, ecx
$L85750:
; Line 1642
	cmp	esi, ecx
	jl	SHORT $L85751
; Line 1643
	mov	esi, ecx
$L85751:
; Line 1644
	xor	eax, eax
	inc	eax
	cmp	edi, eax
	jg	SHORT $L85752
; Line 1645
	mov	edi, eax
$L85752:
; Line 1646
	cmp	esi, eax
	jg	SHORT $L85753
; Line 1647
	mov	esi, eax
$L85753:
; Line 1648
	cmp	ebx, ecx
	jl	SHORT $L85754
; Line 1649
	mov	ebx, ecx
$L85754:
; Line 1650
	cmp	DWORD PTR _v43$[ebp], ecx
	jl	SHORT $L85755
; Line 1651
	mov	DWORD PTR _v43$[ebp], ecx
$L85755:
; Line 1652
	cmp	ebx, eax
	jg	SHORT $L85756
; Line 1653
	mov	ebx, eax
$L85756:
; Line 1654
	cmp	DWORD PTR _v43$[ebp], eax
	jg	SHORT $L85757
; Line 1655
	mov	DWORD PTR _v43$[ebp], eax
$L85757:
; Line 1656
	push	DWORD PTR _ForceHW$[ebp]
	mov	edx, esi
	mov	ecx, edi
	push	DWORD PTR _v43$[ebp]
	push	ebx
	call	@DefineRoom@20
; Line 1657
	cmp	DWORD PTR _ForceHW$[ebp], 1
	jne	SHORT $L85758
; Line 1659
	lea	eax, DWORD PTR [edi+2]
	mov	DWORD PTR _nSx2, ebx
	mov	DWORD PTR _nSx1, eax
; Line 1660
	lea	eax, DWORD PTR [esi+2]
	mov	DWORD PTR _nSy1, eax
; Line 1661
	mov	eax, DWORD PTR _v43$[ebp]
	mov	DWORD PTR _nSy2, eax
$L85758:
; Line 1663
	mov	eax, DWORD PTR _nRoomCnt
; Line 1666
	mov	ecx, DWORD PTR _nRDest$[ebp]
	mov	edx, eax
	mov	DWORD PTR _v42$[ebp], eax
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR _RoomList[eax*4+16], ecx
; Line 1667
	xor	eax, eax
	cmp	ecx, eax
	je	$L85759
; Line 1668
	cmp	DWORD PTR _nHDir$[ebp], 1
	jne	SHORT $L85760
; Line 1670
	mov	edx, ebx
	xor	cl, cl
	sub	edx, edi
	dec	edx
	dec	edx
	call	@random@8
	lea	eax, DWORD PTR [eax+edi+1]
; Line 1672
	xor	cl, cl
	mov	DWORD PTR _nX1a$[ebp], eax
	mov	eax, DWORD PTR _nRDest$[ebp]
	mov	DWORD PTR _v33$[ebp], esi
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
	mov	DWORD PTR 24+[ebp], eax
	mov	edx, DWORD PTR _RoomList[eax+8]
	sub	edx, DWORD PTR _RoomList[eax]
	dec	edx
	dec	edx
	call	@random@8
; Line 1674
	mov	ecx, DWORD PTR 24+[ebp]
	mov	edx, DWORD PTR _RoomList[ecx]
	lea	eax, DWORD PTR [edx+eax+1]
	mov	DWORD PTR _v34$[ebp], eax
; Line 1675
	mov	eax, DWORD PTR _RoomList[ecx+12]
	mov	DWORD PTR _v35$[ebp], eax
$L85760:
; Line 1677
	cmp	DWORD PTR _nHDir$[ebp], 3
	jne	SHORT $L85761
; Line 1679
	mov	edx, ebx
	xor	cl, cl
	sub	edx, edi
	dec	edx
	dec	edx
	call	@random@8
	lea	eax, DWORD PTR [eax+edi+1]
; Line 1681
	xor	cl, cl
	mov	DWORD PTR _nX1a$[ebp], eax
	mov	eax, DWORD PTR _v43$[ebp]
	mov	DWORD PTR _v33$[ebp], eax
	mov	eax, DWORD PTR _nRDest$[ebp]
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
	mov	DWORD PTR 24+[ebp], eax
	mov	edx, DWORD PTR _RoomList[eax+8]
	sub	edx, DWORD PTR _RoomList[eax]
	dec	edx
	dec	edx
	call	@random@8
; Line 1683
	mov	ecx, DWORD PTR 24+[ebp]
	mov	edx, DWORD PTR _RoomList[ecx]
	lea	eax, DWORD PTR [edx+eax+1]
	mov	DWORD PTR _v34$[ebp], eax
; Line 1684
	mov	eax, DWORD PTR _RoomList[ecx+4]
	mov	DWORD PTR _v35$[ebp], eax
$L85761:
; Line 1686
	cmp	DWORD PTR _nHDir$[ebp], 2
	jne	SHORT $L85762
; Line 1688
	mov	edx, DWORD PTR _v43$[ebp]
	xor	cl, cl
	sub	edx, esi
	mov	DWORD PTR _nX1a$[ebp], ebx
	dec	edx
	dec	edx
	call	@random@8
	lea	eax, DWORD PTR [eax+esi+1]
	mov	DWORD PTR _v33$[ebp], eax
; Line 1689
	mov	eax, DWORD PTR _nRDest$[ebp]
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
	mov	ecx, DWORD PTR _RoomList[eax]
	mov	DWORD PTR _v34$[ebp], ecx
; Line 1690
	lea	ecx, DWORD PTR _RoomList[eax+4]
; Line 1692
	mov	eax, DWORD PTR _RoomList[eax+12]
	mov	DWORD PTR _v27$[ebp], ecx
	sub	eax, DWORD PTR [ecx]
; Line 1693
	xor	cl, cl
	lea	edx, DWORD PTR [eax-2]
	call	@random@8
; Line 1695
	mov	ecx, DWORD PTR _v27$[ebp]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _v35$[ebp], eax
$L85762:
; Line 1697
	cmp	DWORD PTR _nHDir$[ebp], 4
	jne	SHORT $L85763
; Line 1699
	mov	edx, DWORD PTR _v43$[ebp]
	xor	cl, cl
	sub	edx, esi
	mov	DWORD PTR _nX1a$[ebp], edi
	dec	edx
	dec	edx
	call	@random@8
	lea	eax, DWORD PTR [eax+esi+1]
	mov	DWORD PTR _v33$[ebp], eax
; Line 1700
	mov	eax, DWORD PTR _nRDest$[ebp]
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
	mov	ecx, DWORD PTR _RoomList[eax+8]
	mov	DWORD PTR _v34$[ebp], ecx
; Line 1701
	lea	ecx, DWORD PTR _RoomList[eax+4]
; Line 1703
	mov	eax, DWORD PTR _RoomList[eax+12]
	mov	DWORD PTR _v30$[ebp], ecx
	sub	eax, DWORD PTR [ecx]
; Line 1704
	xor	cl, cl
	lea	edx, DWORD PTR [eax-2]
	call	@random@8
	mov	ecx, DWORD PTR _v30$[ebp]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _v35$[ebp], eax
$L85763:
; Line 1706
	push	DWORD PTR _nHDir$[ebp]
	mov	edx, DWORD PTR _v33$[ebp]
	mov	ecx, DWORD PTR _nX1a$[ebp]
	push	DWORD PTR _v35$[ebp]
	push	DWORD PTR _v34$[ebp]
	call	@AddHall@20
; Line 1707
	mov	edx, DWORD PTR _v42$[ebp]
	xor	eax, eax
$L85759:
; Line 1709
	mov	ecx, DWORD PTR _v41$[ebp]
; Line 1710
	push	eax
	cmp	DWORD PTR _v36$[ebp], ecx
	mov	ecx, DWORD PTR _v37$[ebp]
	push	eax
	push	eax
	jg	$L85764
	push	3
	lea	eax, DWORD PTR [esi-2]
	push	edx
	mov	edx, DWORD PTR _nY1a$[ebp]
	push	eax
	lea	eax, DWORD PTR [ebx-2]
	add	ecx, 2
	push	eax
	mov	DWORD PTR 20+[ebp], ecx
	call	@CreateRoom@36
; Line 1711
	mov	eax, DWORD PTR _nY2$[ebp]
	xor	ecx, ecx
	push	ecx
	push	ecx
	push	ecx
	push	1
	push	DWORD PTR _v42$[ebp]
	add	eax, -2					; fffffffeH
	mov	DWORD PTR 16+[ebp], eax
	lea	ecx, DWORD PTR [edi+2]
	push	eax
	mov	eax, DWORD PTR _v43$[ebp]
	push	DWORD PTR _v40$[ebp]
	lea	edx, DWORD PTR [eax+2]
	call	@CreateRoom@36
; Line 1712
	xor	eax, eax
	mov	ecx, DWORD PTR 20+[ebp]
	push	eax
	push	eax
	push	eax
	push	2
	push	DWORD PTR _v42$[ebp]
	add	edi, -2					; fffffffeH
	lea	edx, DWORD PTR [esi+2]
	push	DWORD PTR 16+[ebp]
	push	edi
	call	@CreateRoom@36
; Line 1714
	xor	eax, eax
	mov	DWORD PTR _nHDir$[ebp], 4
	mov	DWORD PTR _nW$[ebp], eax
; Line 1715
	mov	DWORD PTR _nH$[ebp], eax
; Line 1716
	mov	DWORD PTR _ForceHW$[ebp], eax
; Line 1717
	mov	eax, DWORD PTR _v42$[ebp]
	mov	DWORD PTR _nRDest$[ebp], eax
; Line 1718
	mov	eax, DWORD PTR _v43$[ebp]
	add	eax, -2					; fffffffeH
; Line 1719
	push	2
	mov	DWORD PTR _nY2$[ebp], eax
	pop	eax
	sub	DWORD PTR _nX2$[ebp], eax
; Line 1720
	sub	DWORD PTR _v40$[ebp], eax
; Line 1721
	add	DWORD PTR _v39$[ebp], eax
; Line 1722
	add	DWORD PTR _nY1a$[ebp], eax
; Line 1723
	add	ebx, eax
	mov	DWORD PTR _v37$[ebp], ebx
; Line 1724
	jmp	$L85765
$L85764:
; Line 1725
	mov	eax, DWORD PTR _v43$[ebp]
	push	2
	add	eax, -2					; fffffffeH
	push	edx
	mov	edx, DWORD PTR _nY1a$[ebp]
	push	eax
	lea	eax, DWORD PTR [edi-2]
	add	ecx, 2
	push	eax
	mov	DWORD PTR 20+[ebp], ecx
	call	@CreateRoom@36
; Line 1726
	mov	eax, DWORD PTR _nY2$[ebp]
	xor	ecx, ecx
	push	ecx
	push	ecx
	push	ecx
	push	4
	push	DWORD PTR _v42$[ebp]
	add	eax, -2					; fffffffeH
	lea	edx, DWORD PTR [esi+2]
	lea	ecx, DWORD PTR [ebx+2]
	push	eax
	mov	DWORD PTR 16+[ebp], eax
	push	DWORD PTR _v40$[ebp]
	call	@CreateRoom@36
; Line 1727
	xor	eax, eax
	mov	ecx, DWORD PTR 20+[ebp]
	push	eax
	push	eax
	push	eax
	mov	eax, DWORD PTR _v43$[ebp]
	push	1
	add	ebx, -2					; fffffffeH
	push	DWORD PTR _v42$[ebp]
	lea	edx, DWORD PTR [eax+2]
	push	DWORD PTR 16+[ebp]
	push	ebx
	call	@CreateRoom@36
; Line 1728
	xor	eax, eax
; Line 1737
	add	esi, -2					; fffffffeH
	mov	DWORD PTR _nW$[ebp], eax
	mov	DWORD PTR _nH$[ebp], eax
	mov	DWORD PTR _ForceHW$[ebp], eax
	mov	eax, DWORD PTR _v42$[ebp]
	push	2
	mov	DWORD PTR _nRDest$[ebp], eax
	pop	eax
	mov	DWORD PTR _nHDir$[ebp], 3
	sub	DWORD PTR _nX2$[ebp], eax
	sub	DWORD PTR _v40$[ebp], eax
	add	DWORD PTR _v39$[ebp], eax
	add	DWORD PTR _nY1a$[ebp], eax
; Line 1738
	add	edi, eax
	mov	DWORD PTR _nY2$[ebp], esi
	mov	DWORD PTR _v37$[ebp], edi
$L85765:
; Line 1740
	cmp	DWORD PTR _nRoomCnt, 80			; 00000050H
	jl	$L85736
$L86721:
	pop	edi
	pop	esi
	pop	ebx
; Line 1750
	leave
	ret	28					; 0000001cH
@CreateRoom@36 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DefineRoom@20
_TEXT	SEGMENT
_nX1$ = -8
_nX2$ = 8
_nY2$ = 12
_ForceHW$ = 16
_i$ = -4
_v9$ = 15
_v11$ = 12
_v15$ = -8
_nY2a$ = 12
_ForceHWa$ = 16
@DefineRoom@20 PROC NEAR				; COMDAT
; _nX1$ = ecx
; _nY1$ = edx
; Line 1758
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1779
	mov	eax, DWORD PTR _nRoomCnt
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _nX2$[ebp]
	lea	esi, DWORD PTR [ecx+ecx*4]
	shl	esi, 3
	lea	edi, DWORD PTR [edi+edi*4]
	mov	ebx, DWORD PTR _nY2$[ebp]
	shl	edi, 3
	inc	eax
	mov	DWORD PTR _nX1$[ebp], ecx
; Line 1780
	mov	DWORD PTR _nRoomCnt, eax
	mov	BYTE PTR _predungeon[esi+edx], 67	; 00000043H
; Line 1781
	lea	eax, DWORD PTR [eax+eax*4]
	mov	BYTE PTR _predungeon[esi+ebx], 69	; 00000045H
	shl	eax, 2
; Line 1786
	cmp	DWORD PTR _ForceHW$[ebp], 1
	mov	BYTE PTR _predungeon[edi+edx], 66	; 00000042H
	mov	DWORD PTR _RoomList[eax], ecx
	mov	ecx, DWORD PTR _nX2$[ebp]
	mov	DWORD PTR _RoomList[eax+8], ecx
	mov	DWORD PTR _RoomList[eax+4], edx
	mov	BYTE PTR _predungeon[edi+ebx], 65	; 00000041H
	mov	DWORD PTR _RoomList[eax+12], ebx
	jne	SHORT $L85802
; Line 1787
	mov	eax, DWORD PTR _nX1$[ebp]
	cmp	eax, ecx
	mov	DWORD PTR _i$[ebp], eax
	jge	SHORT $L85802
$L85800:
; Line 1788
	cmp	eax, ebx
	jge	SHORT $L85806
; Line 1789
	lea	ecx, DWORD PTR [eax+eax*4]
; Line 1791
	mov	DWORD PTR _i$[ebp], ebx
	lea	ecx, DWORD PTR _dflags[edx+ecx*8]
	mov	DWORD PTR _ForceHWa$[ebp], ecx
	mov	ecx, ebx
	sub	ecx, eax
$L85804:
; Line 1793
	mov	eax, DWORD PTR _ForceHWa$[ebp]
	or	BYTE PTR [eax], -128			; ffffff80H
; Line 1794
	mov	eax, ecx
	dec	ecx
	cmp	eax, 1
	jne	SHORT $L86728
	mov	BYTE PTR _v9$[ebp], al
	jmp	SHORT $L86729
$L86728:
	and	BYTE PTR _v9$[ebp], 0
$L86729:
; Line 1795
	add	DWORD PTR _ForceHWa$[ebp], 40		; 00000028H
; Line 1796
	cmp	BYTE PTR _v9$[ebp], 0
	je	SHORT $L85804
	mov	ecx, DWORD PTR _nX2$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
$L85806:
	inc	eax
	cmp	eax, ecx
	jl	SHORT $L85800
$L85802:
; Line 1800
	mov	eax, DWORD PTR _nX1$[ebp]
	inc	eax
; Line 1801
	dec	ecx
	cmp	eax, ecx
	jg	SHORT $L85810
; Line 1802
	mov	ecx, DWORD PTR _nX2$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _v15$[ebp], ecx
; Line 1803
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR _predungeon[ebx+ecx*8]
	mov	DWORD PTR _v11$[ebp], ecx
	sub	ecx, ebx
	add	ecx, edx
	mov	DWORD PTR 16+[ebp], ecx
	jmp	SHORT $L85808
$L86738:
; Line 1802
	mov	ecx, DWORD PTR 16+[ebp]
$L85808:
; Line 1807
	add	DWORD PTR 16+[ebp], 40			; 00000028H
	mov	BYTE PTR [ecx], 35			; 00000023H
	mov	ecx, DWORD PTR _v11$[ebp]
	add	DWORD PTR _v11$[ebp], 40		; 00000028H
; Line 1808
	dec	DWORD PTR _v15$[ebp]
	mov	BYTE PTR [ecx], 35			; 00000023H
; Line 1809
	jne	SHORT $L86738
$L85810:
; Line 1811
	dec	ebx
; Line 1812
	inc	edx
	cmp	edx, ebx
	mov	DWORD PTR _nY2a$[ebp], ebx
	jg	SHORT $L85813
$L85812:
; Line 1815
	mov	ecx, DWORD PTR _nX2$[ebp]
	mov	BYTE PTR _predungeon[esi+edx], 35	; 00000023H
	cmp	eax, ecx
	mov	BYTE PTR _predungeon[edi+edx], 35	; 00000023H
	jge	SHORT $L85817
; Line 1816
	lea	ebx, DWORD PTR [eax+eax*4]
; Line 1817
	sub	ecx, eax
	lea	ebx, DWORD PTR _predungeon[edx+ebx*8]
$L85815:
; Line 1819
	mov	BYTE PTR [ebx], 46			; 0000002eH
; Line 1820
	add	ebx, 40					; 00000028H
; Line 1821
	dec	ecx
; Line 1822
	jne	SHORT $L85815
$L85817:
; Line 1812
	inc	edx
	cmp	edx, DWORD PTR _nY2a$[ebp]
	jle	SHORT $L85812
$L85813:
	pop	edi
	pop	esi
	pop	ebx
; Line 1825
	leave
	ret	12					; 0000000cH
@DefineRoom@20 ENDP
_TEXT	ENDS
EXTRN	@DiabloAllocPtr@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @AddHall@20
_TEXT	SEGMENT
_nX2$ = 8
_nY2$ = 12
_nHd$ = 16
@AddHall@20 PROC NEAR					; COMDAT
; _nX1$ = ecx
; _nY1$ = edx
; Line 1828
	push	ebp
	mov	ebp, esp
; Line 1836
	cmp	DWORD PTR _pHallList, 0
	push	esi
	push	edi
; Line 1837
	push	24					; 00000018H
	mov	edi, ecx
	mov	esi, edx
	pop	ecx
	je	SHORT $L85833
	call	@DiabloAllocPtr@4
; Line 1839
	mov	ecx, DWORD PTR _nX2$[ebp]
	and	DWORD PTR [eax+20], 0
	mov	DWORD PTR [eax+8], ecx
; Line 1840
	mov	ecx, DWORD PTR _nY2$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1843
	mov	ecx, DWORD PTR _nHd$[ebp]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+16], ecx
; Line 1844
	mov	ecx, DWORD PTR _pHallList
	jmp	SHORT $L86745
$L85835:
	mov	ecx, edx
$L86745:
	mov	edx, DWORD PTR [ecx+20]
	test	edx, edx
	jne	SHORT $L85835
; Line 1846
	mov	DWORD PTR [ecx+20], eax
; Line 1847
	jmp	SHORT $L85838
$L85833:
; Line 1848
	call	@DiabloAllocPtr@4
; Line 1851
	mov	ecx, DWORD PTR _nX2$[ebp]
	mov	DWORD PTR _pHallList, eax
	mov	DWORD PTR [eax], edi
	mov	eax, DWORD PTR _pHallList
	mov	DWORD PTR [eax+4], esi
	mov	eax, DWORD PTR _pHallList
	mov	DWORD PTR [eax+8], ecx
; Line 1852
	mov	eax, DWORD PTR _pHallList
	mov	ecx, DWORD PTR _nY2$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1853
	mov	eax, DWORD PTR _pHallList
	mov	ecx, DWORD PTR _nHd$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1854
	mov	eax, DWORD PTR _pHallList
	and	DWORD PTR [eax+20], 0
$L85838:
	pop	edi
	pop	esi
; Line 1856
	pop	ebp
	ret	12					; 0000000cH
@AddHall@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @GetHall@20
_TEXT	SEGMENT
_nX2$ = 8
_nY2$ = 12
_nHd$ = 16
@GetHall@20 PROC NEAR					; COMDAT
; _nX1$ = ecx
; _nY1$ = edx
; Line 1863
	mov	eax, DWORD PTR _pHallList
	push	esi
	mov	esi, DWORD PTR [eax+20]
; Line 1864
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
; Line 1865
	mov	eax, DWORD PTR _pHallList
; Line 1866
	mov	ecx, DWORD PTR _nX2$[esp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _pHallList
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx], eax
; Line 1867
	mov	eax, DWORD PTR _pHallList
	mov	ecx, DWORD PTR _nY2$[esp]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx], eax
; Line 1868
	mov	eax, DWORD PTR _pHallList
	mov	ecx, DWORD PTR _nHd$[esp]
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], eax
; Line 1869
	mov	ecx, DWORD PTR _pHallList
; Line 1870
	and	DWORD PTR _pHallList, 0
; Line 1871
	call	@mem_free_dbg@4
; Line 1872
	mov	DWORD PTR _pHallList, esi
	pop	esi
; Line 1873
	ret	12					; 0000000cH
@GetHall@20 ENDP
_TEXT	ENDS
PUBLIC	@CreateDoorType@8
PUBLIC	@PlaceHallExt@8
EXTRN	_abs:NEAR
; Function compile flags: /Ogsy
;	COMDAT @ConnectHall@20
_TEXT	SEGMENT
_nX1$ = -16
_nY1$ = -24
_nX2$ = 8
_nY2$ = 12
_nHd$ = 16
_v6$ = -8
_v10$ = 12
_v11$ = 8
_v20$ = -20
_v32$ = -36
_v33$ = -32
_v34$ = -28
_v37$ = -12
_nY$ = -4
_nHda$ = 16
@ConnectHall@20 PROC NEAR				; COMDAT
; _nX1$ = ecx
; _nY1$ = edx
; Line 1876
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 1913
	and	DWORD PTR _v34$[ebp], 0
	push	ebx
	push	esi
	push	edi
; Line 1917
	push	100					; 00000064H
	mov	ebx, edx
	mov	esi, ecx
	pop	edx
	xor	cl, cl
	mov	DWORD PTR _nY1$[ebp], ebx
	mov	DWORD PTR _nX1$[ebp], esi
	mov	DWORD PTR _v6$[ebp], esi
	mov	DWORD PTR _nY$[ebp], ebx
	call	@random@8
; Line 1919
	xor	cl, cl
	mov	DWORD PTR _v33$[ebp], eax
	push	100					; 00000064H
	pop	edx
	call	@random@8
; Line 1922
	mov	edx, ebx
	mov	ecx, esi
	mov	DWORD PTR _v32$[ebp], eax
	call	@CreateDoorType@8
; Line 1923
	mov	esi, DWORD PTR _nY2$[ebp]
	mov	edi, DWORD PTR _nX2$[ebp]
	mov	edx, esi
	mov	ecx, edi
	call	@CreateDoorType@8
; Line 1924
	mov	eax, edi
	sub	eax, DWORD PTR _nX1$[ebp]
	push	eax
	call	_abs
; Line 1925
	mov	eax, esi
	sub	eax, ebx
	push	eax
	call	_abs
; Line 1926
	mov	eax, DWORD PTR _nHd$[ebp]
	pop	ecx
	mov	ebx, eax
	pop	ecx
; Line 1927
	shl	eax, 2
; Line 1933
	mov	ecx, DWORD PTR _nY1$[ebp]
	sub	edi, DWORD PTR _Dir_Xadd[eax]
	sub	esi, DWORD PTR _Dir_Yadd[eax]
	and	DWORD PTR _nHda$[ebp], 0
	mov	DWORD PTR _v10$[ebp], edi
	mov	DWORD PTR _v11$[ebp], esi
	lea	eax, DWORD PTR [edi+edi*4]
	mov	BYTE PTR _predungeon[esi+eax*8], 44	; 0000002cH
	mov	eax, DWORD PTR _nX1$[ebp]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR _predungeon[ecx+eax*8]
	mov	DWORD PTR _v37$[ebp], eax
$L86752:
	mov	edi, DWORD PTR _v6$[ebp]
	xor	ecx, ecx
	inc	ecx
; Line 1935
	cmp	edi, 38					; 00000026H
	jl	SHORT $L85901
	cmp	ebx, 2
	jne	SHORT $L85901
; Line 1936
	push	4
	pop	ebx
$L85901:
; Line 1937
	cmp	DWORD PTR _nY$[ebp], 38			; 00000026H
	jl	SHORT $L85902
	cmp	ebx, 3
	jne	SHORT $L85902
; Line 1938
	mov	ebx, ecx
$L85902:
; Line 1939
	cmp	edi, ecx
	jg	SHORT $L85903
	cmp	ebx, 4
	jne	SHORT $L85903
; Line 1940
	push	2
	pop	ebx
$L85903:
; Line 1941
	cmp	DWORD PTR _nY$[ebp], ecx
	jg	SHORT $L85904
	cmp	ebx, ecx
	jne	SHORT $L85904
; Line 1942
	push	3
	pop	ebx
$L85904:
; Line 1943
	mov	eax, DWORD PTR _v37$[ebp]
	mov	al, BYTE PTR [eax]
; Line 1944
	cmp	al, 67					; 00000043H
	jne	SHORT $L85905
	cmp	ebx, ecx
	je	SHORT $L85906
	cmp	ebx, 4
	jne	SHORT $L85905
$L85906:
; Line 1945
	push	2
	pop	ebx
$L85905:
; Line 1946
	cmp	al, 66					; 00000042H
	jne	SHORT $L85907
	cmp	ebx, ecx
	je	SHORT $L85908
	cmp	ebx, 2
	jne	SHORT $L85911
$L85908:
; Line 1947
	push	3
	pop	ebx
$L85907:
; Line 1948
	cmp	al, 69					; 00000045H
	jne	SHORT $L85909
	cmp	ebx, 4
	je	SHORT $L85910
	cmp	ebx, 3
	jne	SHORT $L85911
$L85910:
; Line 1949
	mov	ebx, ecx
$L85909:
; Line 1950
	cmp	al, 65					; 00000041H
	jne	SHORT $L85911
	cmp	ebx, 2
	je	SHORT $L85912
	cmp	ebx, 3
	jne	SHORT $L85911
$L85912:
; Line 1951
	push	4
	pop	ebx
$L85911:
; Line 1952
	mov	eax, DWORD PTR _Dir_Xadd[ebx*4]
; Line 1953
	mov	ecx, DWORD PTR _Dir_Yadd[ebx*4]
; Line 1954
	add	DWORD PTR _nY$[ebp], ecx
; Line 1955
	add	edi, eax
; Line 1956
	mov	esi, DWORD PTR _nY$[ebp]
	mov	DWORD PTR _v6$[ebp], edi
	lea	edx, DWORD PTR [edi+edi*4]
	lea	esi, DWORD PTR _predungeon[esi+edx*8]
	mov	DWORD PTR _v37$[ebp], esi
; Line 1958
	mov	dl, BYTE PTR [esi]
	cmp	dl, 32					; 00000020H
	jne	SHORT $L85913
; Line 1959
	cmp	DWORD PTR _nHda$[ebp], 0
	je	SHORT $L85914
; Line 1960
	mov	edx, DWORD PTR _nY$[ebp]
	sub	edx, ecx
	mov	ecx, edi
	sub	ecx, eax
	call	@CreateDoorType@8
; Line 1961
	jmp	SHORT $L85920
$L85914:
; Line 1962
	cmp	DWORD PTR _v33$[ebp], 50		; 00000032H
	jge	SHORT $L85916
; Line 1963
	cmp	ebx, 1
	je	SHORT $L85918
	cmp	ebx, 3
	je	SHORT $L85918
; Line 1968
	mov	eax, DWORD PTR _nY$[ebp]
	mov	ecx, edi
	lea	edx, DWORD PTR [eax-1]
	jmp	SHORT $L85919
$L85918:
; Line 1964
	mov	edx, DWORD PTR _nY$[ebp]
; Line 1965
	lea	ecx, DWORD PTR [edi-1]
$L85919:
; Line 1970
	call	@PlaceHallExt@8
$L85916:
; Line 1972
	cmp	DWORD PTR _v32$[ebp], 50		; 00000032H
	jge	SHORT $L85920
; Line 1973
	cmp	ebx, 1
	je	SHORT $L85922
	cmp	ebx, 3
	je	SHORT $L85922
; Line 1978
	mov	eax, DWORD PTR _nY$[ebp]
	mov	ecx, edi
	lea	edx, DWORD PTR [eax+1]
	jmp	SHORT $L85923
$L85922:
; Line 1974
	mov	edx, DWORD PTR _nY$[ebp]
; Line 1975
	lea	ecx, DWORD PTR [edi+1]
$L85923:
; Line 1980
	call	@PlaceHallExt@8
$L85920:
; Line 1983
	and	DWORD PTR _nHda$[ebp], 0
; Line 1984
	mov	BYTE PTR [esi], 44			; 0000002cH
; Line 1985
	jmp	SHORT $L85926
$L85913:
; Line 1986
	cmp	DWORD PTR _nHda$[ebp], 0
	jne	SHORT $L85925
	cmp	dl, 35					; 00000023H
	jne	SHORT $L85925
; Line 1987
	mov	edx, DWORD PTR _nY$[ebp]
	mov	ecx, edi
	call	@CreateDoorType@8
$L85925:
; Line 1988
	cmp	BYTE PTR [esi], 44			; 0000002cH
	je	SHORT $L85926
; Line 1989
	mov	DWORD PTR _nHda$[ebp], 1
$L85926:
; Line 1991
	mov	eax, DWORD PTR _v10$[ebp]
	sub	eax, edi
	push	eax
	call	_abs
	mov	edi, eax
; Line 1992
	mov	eax, DWORD PTR _v11$[ebp]
	sub	eax, DWORD PTR _nY$[ebp]
	push	eax
	call	_abs
	pop	ecx
; Line 1995
	cmp	edi, eax
	pop	ecx
	mov	DWORD PTR _v20$[ebp], eax
	jg	SHORT $L85927
; Line 1996
	mov	esi, eax
	lea	esi, DWORD PTR [esi+esi*4]
; Line 1997
	cmp	esi, 80					; 00000050H
	jle	SHORT $L85928
; Line 1998
	push	80					; 00000050H
	pop	esi
$L85928:
; Line 1999
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, esi
	jge	SHORT $L86754
; Line 2000
	mov	eax, DWORD PTR _nY$[ebp]
	cmp	DWORD PTR _v11$[ebp], eax
	jle	SHORT $L85931
	cmp	eax, 40					; 00000028H
	jge	SHORT $L85931
; Line 2004
	push	3
; Line 2005
	jmp	SHORT $L86790
$L85931:
; Line 2001
	xor	ecx, ecx
	inc	ecx
	mov	ebx, ecx
; Line 2002
	jmp	SHORT $LABEL_67$85932
$L85927:
; Line 2008
	lea	esi, DWORD PTR [edi+edi]
; Line 2009
	cmp	esi, 30					; 0000001eH
	jle	SHORT $L85935
; Line 2010
	push	30					; 0000001eH
	pop	esi
$L85935:
; Line 2011
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, esi
	jge	SHORT $L86754
; Line 2012
	mov	eax, DWORD PTR _v6$[ebp]
	cmp	DWORD PTR _v10$[ebp], eax
	jle	SHORT $L85938
	cmp	eax, 40					; 00000028H
	jge	SHORT $L85938
; Line 2015
	push	2
	jmp	SHORT $L86790
$L85938:
; Line 2013
	push	4
$L86790:
	pop	ebx
$LABEL_58$85933:
$L86754:
; Line 2002
	xor	ecx, ecx
	inc	ecx
$LABEL_67$85932:
; Line 2022
	mov	esi, DWORD PTR _v20$[ebp]
	mov	edx, DWORD PTR _v6$[ebp]
	cmp	esi, 10					; 0000000aH
	jge	SHORT $L85944
	cmp	edx, DWORD PTR _v10$[ebp]
	jne	SHORT $L85944
	cmp	ebx, 2
	je	SHORT $L85941
	cmp	ebx, 4
	jne	SHORT $L85944
$L85941:
; Line 2023
	mov	eax, DWORD PTR _nY$[ebp]
	cmp	DWORD PTR _v11$[ebp], eax
	jle	SHORT $L85943
	cmp	eax, 40					; 00000028H
	jge	SHORT $L85943
; Line 2026
	push	3
	pop	ebx
	jmp	SHORT $L85944
$L85943:
; Line 2024
	mov	ebx, ecx
$L85944:
; Line 2028
	cmp	edi, 10					; 0000000aH
	jge	SHORT $L85945
	mov	eax, DWORD PTR _nY$[ebp]
	cmp	eax, DWORD PTR _v11$[ebp]
	jne	SHORT $L85945
	cmp	ebx, ecx
	je	SHORT $L85946
	cmp	ebx, 3
	jne	SHORT $L85945
$L85946:
; Line 2029
	cmp	DWORD PTR _v10$[ebp], edx
	jle	SHORT $L85948
	cmp	edx, 40					; 00000028H
	jge	SHORT $L85948
; Line 2032
	push	2
	jmp	SHORT $L86792
$L85948:
; Line 2030
	push	4
$L86792:
	pop	ebx
$L85945:
; Line 2035
	cmp	esi, ecx
	jne	SHORT $L85953
; Line 2036
	cmp	edi, ecx
	sete	al
; Line 2037
	cmp	edi, ecx
	jle	SHORT $LABEL_94$85952
; Line 2039
	cmp	ebx, ecx
	je	SHORT $L85954
	cmp	ebx, 3
	jne	SHORT $L85953
$L85954:
; Line 2040
	cmp	DWORD PTR _v10$[ebp], edx
	jle	SHORT $L85956
	cmp	edx, 40					; 00000028H
	jge	SHORT $L85956
; Line 2043
	push	2
	jmp	SHORT $L86793
$L85956:
; Line 2041
	push	4
$L86793:
	pop	ebx
$L85953:
; Line 2047
	cmp	edi, ecx
	sete	al
$LABEL_94$85952:
; Line 2049
	test	al, al
	je	SHORT $L85958
; Line 2050
	cmp	esi, ecx
	jle	SHORT $LABEL_109$85961
	cmp	ebx, 2
	je	SHORT $L85959
	cmp	ebx, 4
	jne	SHORT $LABEL_109$85961
$L85959:
; Line 2052
	mov	eax, DWORD PTR _v11$[ebp]
	cmp	eax, DWORD PTR _nY$[ebp]
	jle	SHORT $L85962
	cmp	edx, 40					; 00000028H
	jl	SHORT $LABEL_100$85963
$L85962:
; Line 2054
	mov	ebx, ecx
$L85958:
; Line 2056
	test	edi, edi
	jne	SHORT $LABEL_109$85961
	mov	eax, DWORD PTR _v37$[ebp]
	cmp	BYTE PTR [eax], 32			; 00000020H
	je	SHORT $LABEL_109$85961
	cmp	ebx, 2
	je	SHORT $L85965
	cmp	ebx, 4
	jne	SHORT $LABEL_109$85961
$L85965:
; Line 2057
	mov	eax, DWORD PTR _v10$[ebp]
	cmp	eax, DWORD PTR _nX1$[ebp]
	jle	SHORT $L85967
	cmp	edx, 40					; 00000028H
	jge	SHORT $L85967
$LABEL_100$85963:
; Line 2062
	push	3
	pop	ebx
	jmp	SHORT $LABEL_109$85961
$L85967:
; Line 2058
	mov	ebx, ecx
$LABEL_109$85961:
; Line 2065
	test	esi, esi
	jne	SHORT $L85968
	mov	eax, DWORD PTR _v37$[ebp]
	cmp	BYTE PTR [eax], 32			; 00000020H
	je	SHORT $L85968
	cmp	ebx, ecx
	je	SHORT $L85969
	cmp	ebx, 3
	jne	SHORT $L85968
$L85969:
; Line 2066
	mov	eax, DWORD PTR _v11$[ebp]
	cmp	eax, DWORD PTR _nY1$[ebp]
	jle	SHORT $L85971
	cmp	DWORD PTR _nY$[ebp], 40			; 00000028H
	jge	SHORT $L85971
; Line 2069
	push	2
	jmp	SHORT $L86794
$L85971:
; Line 2067
	push	4
$L86794:
	pop	ebx
$L85968:
; Line 2072
	cmp	edx, DWORD PTR _v10$[ebp]
	jne	SHORT $L85899
	mov	eax, DWORD PTR _nY$[ebp]
	cmp	eax, DWORD PTR _v11$[ebp]
	jne	SHORT $L85899
; Line 2073
	mov	DWORD PTR _v34$[ebp], ecx
$L85899:
; Line 2074
	cmp	DWORD PTR _v34$[ebp], 0
	je	$L86752
	pop	edi
	pop	esi
	pop	ebx
; Line 2075
	leave
	ret	12					; 0000000cH
@ConnectHall@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @CreateDoorType@8
_TEXT	SEGMENT
@CreateDoorType@8 PROC NEAR				; COMDAT
; _nX$ = ecx
; _nY$ = edx
; Line 2086
	lea	eax, DWORD PTR [ecx+ecx*4]
	push	esi
	shl	eax, 3
	xor	esi, esi
	lea	ecx, DWORD PTR _predungeon[eax+edx]
; Line 2087
	cmp	BYTE PTR [ecx-40], 68			; 00000044H
	jne	SHORT $L85983
; Line 2088
	inc	esi
$L85983:
; Line 2089
	cmp	BYTE PTR _predungeon[eax+edx+40], 68	; 00000044H
	jne	SHORT $L85984
; Line 2090
	xor	esi, esi
	inc	esi
$L85984:
; Line 2091
	cmp	BYTE PTR [ecx-1], 68			; 00000044H
	jne	SHORT $L85985
; Line 2092
	xor	esi, esi
	inc	esi
$L85985:
; Line 2093
	cmp	BYTE PTR _predungeon[eax+edx+1], 68	; 00000044H
	jne	SHORT $L85986
; Line 2094
	xor	esi, esi
	inc	esi
$L85986:
; Line 2095
	mov	al, BYTE PTR [ecx]
; Line 2096
	cmp	al, 66					; 00000042H
	je	SHORT $L85988
	cmp	al, 67					; 00000043H
	je	SHORT $L85988
	cmp	al, 65					; 00000041H
	je	SHORT $L85988
	cmp	al, 69					; 00000045H
	jne	SHORT $L85987
$L85988:
; Line 2097
	xor	esi, esi
	inc	esi
$L85987:
; Line 2098
	test	esi, esi
	pop	esi
	jne	SHORT $L85989
; Line 2099
	mov	BYTE PTR [ecx], 68			; 00000044H
$L85989:
; Line 2100
	ret	0
@CreateDoorType@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @PlaceHallExt@8
_TEXT	SEGMENT
@PlaceHallExt@8 PROC NEAR				; COMDAT
; _nX$ = ecx
; _nY$ = edx
; Line 2106
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR _predungeon[edx+eax*8]
; Line 2107
	cmp	BYTE PTR [eax], 32			; 00000020H
	jne	SHORT $L85996
; Line 2108
	mov	BYTE PTR [eax], 44			; 0000002cH
$L85996:
; Line 2109
	ret	0
@PlaceHallExt@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DoPatternCheck@8
_TEXT	SEGMENT
_i$ = -8
_j$ = -4
_v4$ = -16
_v11$ = -20
@DoPatternCheck@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 2112
	sub	esp, 20					; 00000014H
; Line 2129
	cmp	DWORD PTR _Patterns+16, 255		; 000000ffH
	push	ebx
	mov	ebx, ecx
	mov	DWORD PTR _j$[esp+24], edx
	mov	DWORD PTR _i$[esp+24], ebx
	je	$L86018
	push	ebp
	push	esi
	push	edi
; Line 2131
	lea	edx, DWORD PTR [ebx-1]
; Line 2132
	mov	DWORD PTR _v11$[esp+36], OFFSET FLAT:_Patterns+16
	mov	DWORD PTR -12+[esp+36], OFFSET FLAT:_Patterns
$L86016:
; Line 2136
	mov	ecx, DWORD PTR _j$[esp+36]
	mov	ebp, DWORD PTR -12+[esp+36]
	mov	eax, edx
; Line 2137
	xor	edi, edi
	lea	esi, DWORD PTR [ecx-1]
$L86020:
; Line 2140
	cmp	edi, 3
	mov	DWORD PTR _v4$[esp+36], 255		; 000000ffH
	je	SHORT $L86023
	cmp	edi, 6
	jne	SHORT $L86022
$L86023:
; Line 2141
	inc	esi
; Line 2142
	mov	eax, edx
$L86022:
; Line 2144
	test	eax, eax
	jl	$LABEL_26$86026
	cmp	eax, 40					; 00000028H
	jge	$LABEL_26$86026
	test	esi, esi
	jl	$LABEL_26$86026
	cmp	esi, 40					; 00000028H
	jge	$LABEL_26$86026
; Line 2148
	mov	ecx, DWORD PTR [ebp]
	cmp	ecx, 8
	ja	$L86029
	jmp	DWORD PTR $L86815[ecx*4]
$L86033:
; Line 2152
	lea	ecx, DWORD PTR [eax+eax*4]
	cmp	BYTE PTR _predungeon[esi+ecx*8], 35	; 00000023H
; Line 2153
	jmp	SHORT $L86813
$L86035:
; Line 2155
	lea	ecx, DWORD PTR [eax+eax*4]
	cmp	BYTE PTR _predungeon[esi+ecx*8], 46	; 0000002eH
; Line 2156
	jmp	SHORT $L86813
$L86036:
; Line 2158
	lea	ecx, DWORD PTR [eax+eax*4]
	cmp	BYTE PTR _predungeon[esi+ecx*8], 68	; 00000044H
; Line 2159
	jmp	SHORT $L86813
$L86037:
; Line 2161
	lea	ecx, DWORD PTR [eax+eax*4]
	cmp	BYTE PTR _predungeon[esi+ecx*8], 32	; 00000020H
; Line 2162
	jmp	SHORT $L86813
$L86038:
; Line 2164
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	bl, BYTE PTR _predungeon[esi+ecx*8]
; Line 2165
	cmp	bl, 68					; 00000044H
; Line 2166
	jmp	SHORT $L86814
$L86040:
; Line 2168
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	cl, BYTE PTR _predungeon[esi+ecx*8]
; Line 2169
	cmp	cl, 68					; 00000044H
	je	SHORT $LABEL_26$86026
; Line 2171
	cmp	cl, 35					; 00000023H
; Line 2172
	jmp	SHORT $L86813
$L86042:
; Line 2174
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	bl, BYTE PTR _predungeon[esi+ecx*8]
; Line 2175
	cmp	bl, 32					; 00000020H
; Line 2176
	jmp	SHORT $L86814
$L86043:
; Line 2178
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	bl, BYTE PTR _predungeon[esi+ecx*8]
; Line 2179
	cmp	bl, 68					; 00000044H
	je	SHORT $L86807
; Line 2181
	cmp	bl, 35					; 00000023H
$L86814:
	sete	cl
; Line 2183
	test	cl, cl
$LABEL_23$86039:
	jne	SHORT $L86807
; Line 2185
	cmp	bl, 46					; 0000002eH
$L86813:
	sete	bl
; Line 2187
	test	bl, bl
$LABEL_25$86034:
; Line 2189
	je	SHORT $L86809
$L86807:
	mov	ebx, DWORD PTR _i$[esp+36]
$LABEL_26$86026:
; Line 2146
	mov	DWORD PTR _v4$[esp+36], 254		; 000000feH
	jmp	SHORT $L86029
$L86809:
	mov	ebx, DWORD PTR _i$[esp+36]
$L86029:
; Line 2194
	inc	eax
; Line 2195
	inc	edi
	add	ebp, 4
	cmp	edi, 9
	jge	SHORT $L86805
; Line 2138
	cmp	DWORD PTR _v4$[esp+36], 254		; 000000feH
	je	$L86020
; Line 2195
	jmp	SHORT $L86049
$L86805:
; Line 2196
	cmp	DWORD PTR _v4$[esp+36], 254		; 000000feH
	jne	SHORT $L86049
; Line 2197
	mov	ecx, DWORD PTR _v11$[esp+36]
	mov	esi, DWORD PTR _j$[esp+36]
	lea	eax, DWORD PTR [ebx+ebx*4]
	mov	cl, BYTE PTR [ecx+20]
	mov	BYTE PTR _dungeon[esi+eax*8], cl
$L86049:
; Line 2201
	add	DWORD PTR _v11$[esp+36], 40		; 00000028H
; Line 2202
	add	DWORD PTR -12+[esp+36], 40		; 00000028H
; Line 2203
	mov	eax, DWORD PTR _v11$[esp+36]
	cmp	DWORD PTR [eax], 255			; 000000ffH
	jne	$L86016
	pop	edi
	pop	esi
	pop	ebp
$L86018:
	pop	ebx
; Line 2205
	add	esp, 20					; 00000014H
	ret	0
$L86815:
	DD	$LABEL_26$86026
	DD	$L86033
	DD	$L86035
	DD	$L86036
	DD	$L86037
	DD	$L86038
	DD	$L86040
	DD	$L86042
	DD	$L86043
@DoPatternCheck@8 ENDP
_TEXT	ENDS
PUBLIC	@DL2_Cont@16
PUBLIC	_DL2_NumNoChar
PUBLIC	@DL2_DrawRoom@16
PUBLIC	@DL2_KnockWalls@16
; Function compile flags: /Ogsy
;	COMDAT _DL2_FillVoids
_TEXT	SEGMENT
_v4$ = -40
_v6$ = -12
_v11$ = -20
_v12$ = -48
_v13$ = -32
_v14$ = -4
_v31$ = -40
_v42$ = -40
_v48$ = -44
_y1f$ = -24
_y2f$ = -36
_x2f$ = -16
_x1f$ = -28
_x2a$ = -32
_y1$ = -8
_DL2_FillVoids PROC NEAR				; COMDAT
; Line 2208
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 2269
	and	DWORD PTR _v48$[ebp], 0
	push	ebx
	push	esi
	push	edi
; Line 2270
	call	_DL2_NumNoChar
	mov	ebx, 700				; 000002bcH
	cmp	eax, ebx
	jle	$L86113
	xor	esi, esi
	inc	esi
$L86111:
	cmp	DWORD PTR _v48$[ebp], 100		; 00000064H
	jge	$L86113
; Line 2271
	push	38					; 00000026H
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	edi, eax
; Line 2273
	push	38					; 00000026H
	inc	edi
	pop	edx
	xor	cl, cl
	mov	DWORD PTR _v4$[ebp], edi
	call	@random@8
; Line 2274
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR _v6$[ebp], ecx
; Line 2275
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+ecx*8+1]
; Line 2276
	cmp	BYTE PTR _predungeon[eax], 35		; 00000023H
	jne	$L86112
; Line 2282
	movsx	ecx, BYTE PTR _predungeon[eax-40]
	xor	edx, edx
; Line 2283
	cmp	cl, 32					; 00000020H
	mov	DWORD PTR _y2f$[ebp], edx
	mov	DWORD PTR _y1f$[ebp], edx
	mov	DWORD PTR _x2f$[ebp], edx
	mov	DWORD PTR _x1f$[ebp], edx
	jne	SHORT $L86116
	cmp	BYTE PTR _predungeon[eax+40], 46	; 0000002eH
	jne	SHORT $L86116
; Line 2287
	cmp	BYTE PTR _predungeon[eax+39], 46	; 0000002eH
	jne	$LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax+41], 46	; 0000002eH
	jne	$LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax-41], cl
	jne	$LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax-39], cl
	jne	$LABEL_34$86119
; Line 2291
	mov	DWORD PTR _y1f$[ebp], esi
	jmp	$LABEL_32$86120
$L86116:
; Line 2298
	cmp	BYTE PTR _predungeon[eax+40], 32	; 00000020H
	jne	SHORT $L86123
	cmp	cl, 46					; 0000002eH
	jne	SHORT $L86123
; Line 2302
	cmp	BYTE PTR _predungeon[eax-41], cl
	jne	$LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax-39], cl
	jne	$LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax+39], 32	; 00000020H
	jne	$LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax+41], 32	; 00000020H
	jne	$LABEL_34$86119
; Line 2305
	mov	DWORD PTR _y1f$[ebp], esi
; Line 2306
	mov	DWORD PTR _x2f$[ebp], esi
; Line 2307
	jmp	SHORT $LABEL_33$86121
$L86123:
; Line 2309
	mov	cl, BYTE PTR _predungeon[eax-1]
; Line 2310
	cmp	cl, 32					; 00000020H
	jne	SHORT $L86127
	cmp	BYTE PTR _predungeon[eax+1], 46		; 0000002eH
	jne	SHORT $L86127
; Line 2325
	cmp	BYTE PTR _predungeon[eax-39], 46	; 0000002eH
	jne	SHORT $LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax+41], 46	; 0000002eH
	jne	SHORT $LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax-41], cl
	jne	SHORT $LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax+39], cl
	jne	SHORT $LABEL_34$86119
; Line 2329
	push	edx
	mov	dl, 1
	mov	DWORD PTR _x2f$[ebp], esi
	mov	DWORD PTR _x1f$[ebp], esi
	mov	DWORD PTR _y1f$[ebp], esi
	push	esi
	mov	cl, dl
; Line 2330
	jmp	SHORT $L86864
$L86127:
; Line 2316
	cmp	BYTE PTR _predungeon[eax+1], 32		; 00000020H
	jne	SHORT $LABEL_34$86119
	cmp	cl, 46					; 0000002eH
	jne	SHORT $LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax-41], cl
	jne	SHORT $LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax+39], cl
	jne	SHORT $LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax-39], 32	; 00000020H
	jne	SHORT $LABEL_34$86119
	cmp	BYTE PTR _predungeon[eax+41], 32	; 00000020H
	jne	SHORT $LABEL_34$86119
; Line 2319
	mov	DWORD PTR _x2f$[ebp], esi
$LABEL_32$86120:
; Line 2293
	mov	DWORD PTR _x1f$[ebp], esi
$LABEL_33$86121:
; Line 2295
	mov	DWORD PTR _y2f$[ebp], esi
$LABEL_34$86119:
; Line 2333
	push	DWORD PTR _y2f$[ebp]
	mov	dl, BYTE PTR _y1f$[ebp]
	mov	cl, BYTE PTR _x1f$[ebp]
	push	DWORD PTR _x2f$[ebp]
$L86864:
	call	@DL2_Cont@16
; Line 2335
	test	al, al
$LABEL_35$86131:
	je	$LABEL_177$86142
; Line 2337
	mov	ebx, DWORD PTR _x1f$[ebp]
	lea	edx, DWORD PTR [edi-1]
	test	ebx, ebx
	mov	DWORD PTR _v11$[ebp], edx
	jne	SHORT $L86133
; Line 2338
	mov	DWORD PTR _v11$[ebp], edi
	mov	edx, edi
$L86133:
; Line 2339
	mov	eax, DWORD PTR _x2f$[ebp]
; Line 2340
	test	eax, eax
	mov	DWORD PTR _v12$[ebp], eax
	je	SHORT $L86134
; Line 2341
	inc	edi
	mov	DWORD PTR _v4$[ebp], edi
$L86134:
; Line 2343
	mov	eax, DWORD PTR _y1f$[ebp]
; Line 2345
	mov	ecx, DWORD PTR _v6$[ebp]
	test	eax, eax
	mov	DWORD PTR _v13$[ebp], eax
	lea	esi, DWORD PTR [ecx-1]
	jne	SHORT $L86865
; Line 2347
	mov	esi, ecx
$L86865:
; Line 2348
	mov	eax, DWORD PTR _y2f$[ebp]
	mov	DWORD PTR _y1$[ebp], esi
; Line 2349
	test	eax, eax
	mov	DWORD PTR _v14$[ebp], eax
	je	SHORT $L86137
; Line 2350
	inc	ecx
	mov	DWORD PTR _v6$[ebp], ecx
$L86137:
; Line 2353
	test	ebx, ebx
	je	$L86138
; Line 2354
	cmp	DWORD PTR _x2f$[ebp], 0
	je	$L86195
; Line 2355
	cmp	DWORD PTR _y1f$[ebp], 0
	je	$L86140
; Line 2356
	cmp	DWORD PTR _y2f$[ebp], 0
	jne	$LABEL_177$86142
; Line 2358
	mov	esi, DWORD PTR _x1f$[ebp]
; Line 2359
	mov	ecx, DWORD PTR _x2f$[ebp]
; Line 2360
	mov	eax, edi
	mov	edi, DWORD PTR _y1$[ebp]
$L86144:
; Line 2361
	test	esi, esi
	jne	SHORT $L86146
	test	ecx, ecx
	je	SHORT $L86145
$L86146:
; Line 2362
	test	edx, edx
	jne	SHORT $L86147
; Line 2363
	xor	esi, esi
$L86147:
; Line 2364
	cmp	eax, 39					; 00000027H
	jne	SHORT $L86148
; Line 2365
	xor	ecx, ecx
$L86148:
; Line 2366
	mov	ebx, eax
	sub	ebx, edx
	cmp	ebx, 14					; 0000000eH
	jl	SHORT $L86149
; Line 2367
	xor	esi, esi
; Line 2368
	xor	ecx, ecx
$L86149:
; Line 2370
	test	esi, esi
	je	SHORT $L86150
; Line 2371
	dec	edx
$L86150:
; Line 2372
	test	ecx, ecx
	je	SHORT $L86151
; Line 2373
	inc	eax
$L86151:
; Line 2374
	lea	ebx, DWORD PTR [edx+edx*4]
	cmp	BYTE PTR _predungeon[edi+ebx*8], 32	; 00000020H
	je	SHORT $L86152
; Line 2375
	xor	esi, esi
$L86152:
; Line 2376
	lea	ebx, DWORD PTR [eax+eax*4]
	cmp	BYTE PTR _predungeon[edi+ebx*8], 32	; 00000020H
	je	SHORT $L86144
; Line 2377
	xor	ecx, ecx
; Line 2378
	jmp	SHORT $L86144
$L86145:
; Line 2380
	lea	ebx, DWORD PTR [eax-2]
	lea	esi, DWORD PTR [edx+2]
; Line 2382
	mov	eax, ebx
	mov	DWORD PTR _x2a$[ebp], ebx
	sub	eax, esi
; Line 2383
	cmp	eax, 5
	jle	$LABEL_177$86142
; Line 2385
	mov	ecx, DWORD PTR _y1f$[ebp]
	mov	DWORD PTR _v42$[ebp], ecx
; Line 2386
	mov	ecx, DWORD PTR _y1$[ebp]
$L86155:
; Line 2387
	test	ecx, ecx
	jne	SHORT $L86158
; Line 2388
	and	DWORD PTR _v42$[ebp], ecx
$L86158:
; Line 2389
	mov	edx, DWORD PTR _v6$[ebp]
	sub	edx, ecx
	cmp	edx, 12					; 0000000cH
	jl	SHORT $L86159
; Line 2390
	and	DWORD PTR _v42$[ebp], 0
$L86159:
; Line 2391
	cmp	esi, ebx
	jg	SHORT $L86163
; Line 2393
	lea	edx, DWORD PTR [esi+esi*4]
	lea	edi, DWORD PTR [eax+1]
	lea	edx, DWORD PTR _predungeon[ecx+edx*8]
$L86161:
; Line 2395
	cmp	BYTE PTR [edx], 32			; 00000020H
	je	SHORT $L86164
; Line 2396
	and	DWORD PTR _v42$[ebp], 0
	mov	ebx, DWORD PTR _x2a$[ebp]
$L86164:
; Line 2397
	add	edx, 40					; 00000028H
; Line 2398
	dec	edi
; Line 2399
	jne	SHORT $L86161
$L86163:
; Line 2401
	cmp	DWORD PTR _v42$[ebp], 0
	je	SHORT $L86832
; Line 2386
	dec	ecx
	jmp	SHORT $L86155
$L86832:
; Line 2405
	mov	eax, DWORD PTR _v6$[ebp]
	lea	edi, DWORD PTR [ecx+2]
	sub	eax, edi
	cmp	eax, 5
	jle	$LABEL_177$86142
; Line 2407
	push	DWORD PTR _v6$[ebp]
	mov	edx, edi
	mov	ecx, esi
	push	ebx
	call	@DL2_DrawRoom@16
; Line 2408
	mov	edx, edi
; Line 2409
	mov	edi, DWORD PTR _v6$[ebp]
; Line 2410
	jmp	$L86167
$L86140:
; Line 2411
	mov	esi, DWORD PTR _v12$[ebp]
	mov	eax, edi
$L86169:
; Line 2412
	test	ebx, ebx
	jne	SHORT $L86171
	test	esi, esi
	je	SHORT $L86170
$L86171:
; Line 2413
	test	edx, edx
	jne	SHORT $L86172
; Line 2414
	xor	ebx, ebx
$L86172:
; Line 2415
	cmp	eax, 39					; 00000027H
	jne	SHORT $L86173
; Line 2416
	xor	esi, esi
$L86173:
; Line 2417
	mov	edi, eax
	sub	edi, edx
	cmp	edi, 14					; 0000000eH
	jl	SHORT $L86174
; Line 2418
	xor	ebx, ebx
; Line 2419
	xor	esi, esi
$L86174:
; Line 2421
	test	ebx, ebx
	je	SHORT $L86175
; Line 2422
	dec	edx
$L86175:
; Line 2423
	test	esi, esi
	je	SHORT $L86176
; Line 2424
	inc	eax
$L86176:
; Line 2425
	lea	edi, DWORD PTR [edx+edx*4]
	cmp	BYTE PTR _predungeon[ecx+edi*8], 32	; 00000020H
	je	SHORT $L86177
; Line 2426
	xor	ebx, ebx
$L86177:
; Line 2427
	lea	edi, DWORD PTR [eax+eax*4]
	cmp	BYTE PTR _predungeon[ecx+edi*8], 32	; 00000020H
	je	SHORT $L86169
; Line 2428
	xor	esi, esi
; Line 2429
	jmp	SHORT $L86169
$L86170:
; Line 2431
	lea	ebx, DWORD PTR [eax-2]
	lea	esi, DWORD PTR [edx+2]
; Line 2433
	mov	eax, ebx
	mov	DWORD PTR _x2a$[ebp], ebx
	sub	eax, esi
; Line 2434
	cmp	eax, 5
	jle	$LABEL_177$86142
; Line 2436
	mov	edx, DWORD PTR _y2f$[ebp]
; Line 2437
	mov	ecx, DWORD PTR _v6$[ebp]
; Line 2438
	test	edx, edx
	mov	DWORD PTR _v31$[ebp], edx
	je	SHORT $L86833
$L86182:
; Line 2440
	cmp	ecx, 39					; 00000027H
	jne	SHORT $L86184
; Line 2441
	and	DWORD PTR _v31$[ebp], 0
$L86184:
; Line 2442
	mov	edx, ecx
	sub	edx, DWORD PTR _y1$[ebp]
	cmp	edx, 12					; 0000000cH
	jl	SHORT $L86185
; Line 2443
	and	DWORD PTR _v31$[ebp], 0
$L86185:
; Line 2444
	cmp	esi, ebx
	jg	SHORT $L86189
; Line 2446
	lea	edx, DWORD PTR [esi+esi*4]
	lea	edi, DWORD PTR [eax+1]
	lea	edx, DWORD PTR _predungeon[ecx+edx*8]
$L86187:
; Line 2448
	cmp	BYTE PTR [edx], 32			; 00000020H
	je	SHORT $L86190
; Line 2449
	and	DWORD PTR _v31$[ebp], 0
	mov	ebx, DWORD PTR _x2a$[ebp]
$L86190:
; Line 2450
	add	edx, 40					; 00000028H
; Line 2451
	dec	edi
; Line 2452
	jne	SHORT $L86187
$L86189:
; Line 2454
	cmp	DWORD PTR _v31$[ebp], 0
	je	SHORT $L86833
; Line 2456
	inc	ecx
; Line 2439
	jmp	SHORT $L86182
$L86833:
; Line 2459
	lea	edi, DWORD PTR [ecx-2]
; Line 2460
	mov	eax, edi
	sub	eax, DWORD PTR _y1$[ebp]
	cmp	eax, 5
	jle	$LABEL_177$86142
; Line 2462
	mov	edx, DWORD PTR _y1$[ebp]
	push	edi
	push	ebx
	mov	ecx, esi
	call	@DL2_DrawRoom@16
; Line 2463
	mov	edx, DWORD PTR _y1$[ebp]
$L86167:
; Line 2466
	push	edi
	push	ebx
	mov	ecx, esi
; Line 2467
	jmp	$L86866
$L86195:
; Line 2469
	xor	eax, eax
	cmp	DWORD PTR _v13$[ebp], eax
	jne	SHORT $L86197
	cmp	DWORD PTR _v14$[ebp], eax
	je	SHORT $L86196
$L86197:
; Line 2470
	cmp	esi, eax
	jne	SHORT $L86198
; Line 2471
	mov	DWORD PTR _v13$[ebp], eax
$L86198:
; Line 2472
	cmp	ecx, 39					; 00000027H
	jne	SHORT $L86199
; Line 2473
	mov	DWORD PTR _v14$[ebp], eax
$L86199:
; Line 2474
	mov	edi, ecx
	sub	edi, esi
	cmp	edi, 14					; 0000000eH
	jl	SHORT $L86200
; Line 2475
	mov	DWORD PTR _v13$[ebp], eax
; Line 2476
	mov	DWORD PTR _v14$[ebp], eax
$L86200:
; Line 2478
	cmp	DWORD PTR _v13$[ebp], eax
	je	SHORT $L86201
; Line 2479
	dec	esi
$L86201:
; Line 2480
	cmp	DWORD PTR _v14$[ebp], eax
	je	SHORT $L86202
; Line 2481
	inc	ecx
$L86202:
; Line 2482
	lea	eax, DWORD PTR [edx+edx*4]
	lea	eax, DWORD PTR _predungeon[eax*8]
; Line 2483
	cmp	BYTE PTR [eax+esi], 32			; 00000020H
	je	SHORT $L86203
; Line 2484
	and	DWORD PTR _v13$[ebp], 0
$L86203:
; Line 2485
	cmp	BYTE PTR [eax+ecx], 32			; 00000020H
	je	SHORT $L86195
; Line 2486
	and	DWORD PTR _v14$[ebp], 0
; Line 2487
	jmp	SHORT $L86195
$L86196:
; Line 2488
	lea	ebx, DWORD PTR [ecx-2]
; Line 2489
	add	esi, 2
; Line 2491
	mov	eax, ebx
	sub	eax, esi
	cmp	eax, 5
	jle	$LABEL_177$86142
; Line 2492
	mov	edi, DWORD PTR _x1f$[ebp]
$L86207:
; Line 2494
	test	edx, edx
	jne	SHORT $L86209
; Line 2495
	xor	edi, edi
$L86209:
; Line 2496
	mov	eax, DWORD PTR _v4$[ebp]
	sub	eax, edx
	cmp	eax, 12					; 0000000cH
	jl	SHORT $L86210
; Line 2497
	xor	edi, edi
$L86210:
; Line 2499
	cmp	esi, ebx
	mov	ecx, esi
	jg	SHORT $L86211
	lea	eax, DWORD PTR [edx+edx*4]
	lea	eax, DWORD PTR _predungeon[esi+eax*8]
$L86212:
; Line 2501
	cmp	BYTE PTR [eax], 32			; 00000020H
	je	SHORT $L86215
; Line 2502
	xor	edi, edi
$L86215:
; Line 2503
	inc	ecx
	inc	eax
; Line 2504
	cmp	ecx, ebx
	jle	SHORT $L86212
; Line 2505
	mov	edx, DWORD PTR _v11$[ebp]
$L86211:
; Line 2507
	test	edi, edi
	je	SHORT $L86834
; Line 2509
	dec	edx
	mov	DWORD PTR _v11$[ebp], edx
	jmp	SHORT $L86207
$L86834:
; Line 2512
	mov	eax, DWORD PTR _v4$[ebp]
	lea	edi, DWORD PTR [edx+2]
	sub	eax, edi
	cmp	eax, 5
	jle	$LABEL_177$86142
; Line 2513
	push	ebx
	mov	edx, esi
	push	DWORD PTR _v4$[ebp]
	mov	ecx, edi
	call	@DL2_DrawRoom@16
; Line 2514
	push	ebx
	mov	edx, esi
	push	DWORD PTR _v4$[ebp]
	mov	ecx, edi
; Line 2518
	jmp	$L86866
$L86138:
; Line 2519
	mov	ebx, DWORD PTR _v13$[ebp]
	mov	edx, edi
$L86220:
; Line 2520
	test	ebx, ebx
	jne	SHORT $L86222
	cmp	DWORD PTR _v14$[ebp], ebx
	je	SHORT $L86221
$L86222:
; Line 2521
	test	esi, esi
	jne	SHORT $L86223
; Line 2522
	xor	ebx, ebx
$L86223:
; Line 2523
	cmp	ecx, 39					; 00000027H
	jne	SHORT $L86224
; Line 2524
	and	DWORD PTR _v14$[ebp], 0
$L86224:
; Line 2525
	mov	eax, ecx
	sub	eax, esi
	cmp	eax, 14					; 0000000eH
	jl	SHORT $L86225
; Line 2526
	xor	ebx, ebx
; Line 2527
	and	DWORD PTR _v14$[ebp], ebx
$L86225:
; Line 2529
	test	ebx, ebx
	je	SHORT $L86226
; Line 2530
	dec	esi
$L86226:
; Line 2531
	cmp	DWORD PTR _v14$[ebp], 0
	je	SHORT $L86227
; Line 2532
	inc	ecx
$L86227:
; Line 2533
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR _predungeon[eax*8]
; Line 2534
	cmp	BYTE PTR [eax+esi], 32			; 00000020H
	je	SHORT $L86228
; Line 2535
	xor	ebx, ebx
$L86228:
; Line 2536
	cmp	BYTE PTR [eax+ecx], 32			; 00000020H
	je	SHORT $L86220
; Line 2537
	and	DWORD PTR _v14$[ebp], 0
; Line 2538
	jmp	SHORT $L86220
$L86221:
; Line 2540
	mov	eax, esi
	lea	ebx, DWORD PTR [ecx-2]
	mov	DWORD PTR _y1$[ebp], esi
	lea	edi, DWORD PTR [eax+2]
; Line 2541
	mov	eax, ebx
	sub	eax, edi
	cmp	eax, 5
	jle	SHORT $LABEL_177$86142
; Line 2542
	mov	esi, DWORD PTR _x2f$[ebp]
; Line 2543
	test	esi, esi
	je	SHORT $L86835
$L86233:
; Line 2545
	cmp	edx, 39					; 00000027H
	jne	SHORT $L86235
; Line 2546
	xor	esi, esi
$L86235:
; Line 2547
	mov	eax, edx
	sub	eax, DWORD PTR _v11$[ebp]
	cmp	eax, 12					; 0000000cH
	jl	SHORT $L86236
; Line 2548
	xor	esi, esi
$L86236:
; Line 2549
	cmp	edi, ebx
	mov	eax, edi
	jg	SHORT $L86239
	lea	ecx, DWORD PTR [edx+edx*4]
	lea	ecx, DWORD PTR _predungeon[ecx*8]
$L86237:
; Line 2550
	cmp	BYTE PTR [ecx+eax], 32			; 00000020H
	je	SHORT $L86238
; Line 2551
	xor	esi, esi
$L86238:
; Line 2549
	inc	eax
	cmp	eax, ebx
	jle	SHORT $L86237
$L86239:
; Line 2553
	test	esi, esi
	je	SHORT $L86835
; Line 2555
	inc	edx
; Line 2544
	jmp	SHORT $L86233
$L86835:
; Line 2558
	lea	esi, DWORD PTR [edx-2]
; Line 2559
	mov	eax, esi
	sub	eax, DWORD PTR _v11$[ebp]
	cmp	eax, 5
	jle	SHORT $LABEL_177$86142
; Line 2560
	mov	ecx, DWORD PTR _v11$[ebp]
	push	ebx
	push	esi
	mov	edx, edi
	call	@DL2_DrawRoom@16
; Line 2561
	mov	ecx, DWORD PTR _v11$[ebp]
	push	ebx
	push	esi
	mov	edx, edi
$L86866:
	call	@DL2_KnockWalls@16
$LABEL_177$86142:
; Line 2567
	inc	DWORD PTR _v48$[ebp]
	xor	esi, esi
	inc	esi
	mov	ebx, 700				; 000002bcH
$L86112:
	call	_DL2_NumNoChar
	cmp	eax, ebx
	jg	$L86111
$L86113:
; Line 2569
	call	_DL2_NumNoChar
	xor	ecx, ecx
	cmp	eax, ebx
	setle	cl
	pop	edi
	pop	esi
	mov	al, cl
	pop	ebx
; Line 2570
	leave
	ret	0
_DL2_FillVoids ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DL2_Cont@16
_TEXT	SEGMENT
_x2f$ = 8
_y2f$ = 12
@DL2_Cont@16 PROC NEAR					; COMDAT
; _x1f$ = cl
; _y1f$ = dl
; Line 2573
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 2576
	xor	bl, bl
	cmp	cl, bl
	je	SHORT $L86253
	cmp	BYTE PTR _x2f$[ebp], bl
	je	SHORT $L86253
; Line 2577
	cmp	dl, bl
	je	SHORT $LABEL_16$86255
; Line 2579
	cmp	BYTE PTR _y2f$[ebp], bl
	je	SHORT $L86257
$L86260:
; Line 2589
	xor	al, al
$L86251:
	pop	ebx
; Line 2597
	pop	ebp
	ret	8
$LABEL_16$86255:
; Line 2583
	cmp	BYTE PTR _y2f$[ebp], bl
; Line 2584
	jmp	SHORT $L86869
$L86253:
; Line 2588
	cmp	dl, bl
	je	SHORT $L86260
	cmp	BYTE PTR _y2f$[ebp], bl
	je	SHORT $L86260
; Line 2590
	cmp	cl, bl
	je	SHORT $L86261
$L86257:
; Line 2591
	mov	al, 1
	jmp	SHORT $L86251
$L86261:
; Line 2592
	cmp	BYTE PTR _x2f$[ebp], bl
$L86869:
	sete	al
; Line 2594
	cmp	al, bl
$LABEL_11$86258:
	sete	al
; Line 2596
	jmp	SHORT $L86251
@DL2_Cont@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DL2_NumNoChar
_TEXT	SEGMENT
_DL2_NumNoChar PROC NEAR				; COMDAT
; Line 2606
	xor	eax, eax
; Line 2607
	xor	edx, edx
	push	esi
$L86268:
; Line 2609
	push	40					; 00000028H
	lea	ecx, DWORD PTR _predungeon[edx]
	pop	esi
$L86272:
; Line 2612
	cmp	BYTE PTR [ecx], 32			; 00000020H
	jne	SHORT $L86275
; Line 2613
	inc	eax
$L86275:
; Line 2614
	add	ecx, 40					; 00000028H
; Line 2616
	dec	esi
	jne	SHORT $L86272
; Line 2617
	inc	edx
; Line 2618
	cmp	edx, 40					; 00000028H
	jl	SHORT $L86268
	pop	esi
; Line 2620
	ret	0
_DL2_NumNoChar ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DL2_DrawRoom@16
_TEXT	SEGMENT
_y1$ = -4
_x2$ = 8
_y2$ = 12
@DL2_DrawRoom@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 2623
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2634
	mov	eax, DWORD PTR _x2$[ebp]
	push	ebx
	push	esi
	mov	ebx, edx
	push	edi
	mov	edi, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _y1$[ebp], ebx
	jmp	SHORT $L86883
$L86293:
; Line 2635
	cmp	ecx, eax
	jg	SHORT $L86298
; Line 2637
	mov	esi, eax
	lea	edx, DWORD PTR [ecx+ecx*4]
	sub	esi, ecx
	lea	edx, DWORD PTR _predungeon[ebx+edx*8]
	inc	esi
$L86296:
; Line 2639
	mov	BYTE PTR [edx], 46			; 0000002eH
; Line 2640
	add	edx, 40					; 00000028H
; Line 2641
	dec	esi
; Line 2642
	jne	SHORT $L86296
$L86298:
; Line 2644
	inc	ebx
$L86883:
; Line 2634
	cmp	ebx, edi
	jle	SHORT $L86293
; Line 2646
	mov	esi, DWORD PTR _y1$[ebp]
	cmp	esi, edi
	jg	SHORT $L86301
	lea	edx, DWORD PTR [ecx+ecx*4]
	lea	ebx, DWORD PTR _predungeon[edx*8]
	lea	edx, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR _predungeon[edx*8]
$L86299:
; Line 2647
	mov	BYTE PTR [ebx+esi], 35			; 00000023H
; Line 2648
	mov	BYTE PTR [edx+esi], 35			; 00000023H
	inc	esi
	cmp	esi, edi
	jle	SHORT $L86299
$L86301:
; Line 2650
	cmp	ecx, eax
	jg	SHORT $L86305
; Line 2651
	lea	edx, DWORD PTR [ecx+ecx*4]
; Line 2652
	sub	eax, ecx
	inc	eax
	lea	esi, DWORD PTR _predungeon[edi+edx*8]
	mov	ecx, eax
	mov	eax, esi
	sub	eax, edi
	add	eax, DWORD PTR _y1$[ebp]
$L86303:
; Line 2654
	mov	BYTE PTR [eax], 35			; 00000023H
; Line 2655
	mov	BYTE PTR [esi], 35			; 00000023H
; Line 2656
	add	esi, 40					; 00000028H
	add	eax, 40					; 00000028H
; Line 2657
	dec	ecx
; Line 2658
	jne	SHORT $L86303
$L86305:
	pop	edi
	pop	esi
	pop	ebx
; Line 2660
	leave
	ret	8
@DL2_DrawRoom@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DL2_KnockWalls@16
_TEXT	SEGMENT
_x2$ = 8
_y2$ = 12
@DL2_KnockWalls@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 2663
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 2674
	mov	edi, DWORD PTR _x2$[ebp]
	lea	eax, DWORD PTR [ecx+1]
	cmp	eax, edi
	jge	SHORT $L86326
; Line 2675
	lea	esi, DWORD PTR [eax+eax*4]
; Line 2677
	sub	edi, eax
	push	ebx
	mov	ebx, DWORD PTR _y2$[ebp]
	lea	esi, DWORD PTR _predungeon[edx+esi*8-1]
	mov	eax, esi
	sub	eax, edx
	lea	eax, DWORD PTR [eax+ebx+2]
; Line 2690
	mov	ebx, edx
	sub	ebx, DWORD PTR _y2$[ebp]
$L86324:
; Line 2679
	cmp	BYTE PTR [esi], 46			; 0000002eH
	jne	SHORT $L86327
	cmp	BYTE PTR [ebx+eax], 46			; 0000002eH
	jne	SHORT $L86327
; Line 2680
	mov	BYTE PTR [ebx+eax-1], 46		; 0000002eH
$L86327:
; Line 2681
	cmp	BYTE PTR [eax-2], 46			; 0000002eH
	jne	SHORT $L86328
	cmp	BYTE PTR [eax], 46			; 0000002eH
	jne	SHORT $L86328
; Line 2682
	mov	BYTE PTR [eax-1], 46			; 0000002eH
$L86328:
; Line 2683
	cmp	BYTE PTR [esi], 68			; 00000044H
	jne	SHORT $L86329
; Line 2684
	mov	BYTE PTR [esi], 46			; 0000002eH
$L86329:
; Line 2685
	cmp	BYTE PTR [eax], 68			; 00000044H
	jne	SHORT $L86330
; Line 2686
	mov	BYTE PTR [eax], 46			; 0000002eH
$L86330:
; Line 2687
	add	esi, 40					; 00000028H
	add	eax, 40					; 00000028H
; Line 2689
	dec	edi
; Line 2690
	jne	SHORT $L86324
	mov	edi, DWORD PTR _x2$[ebp]
	pop	ebx
$L86326:
; Line 2692
	lea	eax, DWORD PTR [edx+1]
; Line 2693
	cmp	eax, DWORD PTR _y2$[ebp]
	jge	SHORT $L86334
; Line 2695
	lea	edx, DWORD PTR [edi+edi*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	ecx, 3
	lea	edx, DWORD PTR _predungeon[edx*8+40]
$L86332:
; Line 2707
	lea	esi, DWORD PTR _predungeon[ecx+eax-40]
	cmp	BYTE PTR [esi], 46			; 0000002eH
	jne	SHORT $L86335
; Line 2698
	cmp	BYTE PTR _predungeon[ecx+eax+40], 46	; 0000002eH
	jne	SHORT $L86335
; Line 2699
	mov	BYTE PTR _predungeon[ecx+eax], 46	; 0000002eH
$L86335:
; Line 2700
	cmp	BYTE PTR [edx+eax-80], 46		; 0000002eH
	jne	SHORT $L86336
	cmp	BYTE PTR [edx+eax], 46			; 0000002eH
	jne	SHORT $L86336
; Line 2701
	mov	BYTE PTR [edx+eax-40], 46		; 0000002eH
$L86336:
; Line 2702
	cmp	BYTE PTR [esi], 68			; 00000044H
	jne	SHORT $L86337
; Line 2703
	mov	BYTE PTR [esi], 46			; 0000002eH
$L86337:
; Line 2704
	cmp	BYTE PTR [edx+eax], 68			; 00000044H
	jne	SHORT $L86338
; Line 2705
	mov	BYTE PTR [edx+eax], 46			; 0000002eH
$L86338:
; Line 2706
	inc	eax
; Line 2707
	cmp	eax, DWORD PTR _y2$[ebp]
	jl	SHORT $L86332
$L86334:
	pop	edi
	pop	esi
; Line 2709
	pop	ebp
	ret	8
@DL2_KnockWalls@16 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L2FTVR@20
EXTRN	_TransVal:BYTE
EXTRN	_dung_map:BYTE
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L2FloodTVal
_TEXT	SEGMENT
_v3$ = -12
_x$ = -8
_i$ = -4
_DRLG_L2FloodTVal PROC NEAR				; COMDAT
; Line 2712
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 2720
	push	16					; 00000010H
	pop	ebx
; Line 2721
	xor	esi, esi
$L86346:
; Line 2723
	and	DWORD PTR _i$[ebp], 0
; Line 2726
	lea	eax, DWORD PTR _dungeon[esi]
	mov	DWORD PTR _x$[ebp], 16			; 00000010H
	lea	edi, DWORD PTR _dung_map[ebx+1792]
	mov	DWORD PTR _v3$[ebp], eax
$L86350:
; Line 2728
	mov	eax, DWORD PTR _v3$[ebp]
	cmp	BYTE PTR [eax], 3
	jne	SHORT $L86353
	cmp	BYTE PTR [edi], 0
	jne	SHORT $L86353
; Line 2729
	mov	ecx, DWORD PTR _i$[ebp]
	push	0
	push	ebx
	mov	edx, esi
	push	DWORD PTR _x$[ebp]
	call	@DRLG_L2FTVR@20
; Line 2730
	inc	BYTE PTR _TransVal
$L86353:
; Line 2732
	add	DWORD PTR _x$[ebp], 2
; Line 2733
	add	DWORD PTR _v3$[ebp], 40			; 00000028H
; Line 2734
	add	edi, 224				; 000000e0H
; Line 2735
	inc	DWORD PTR _i$[ebp]
; Line 2736
	cmp	DWORD PTR _i$[ebp], 40			; 00000028H
	jl	SHORT $L86350
; Line 2737
	inc	ebx
	inc	ebx
; Line 2738
	inc	esi
; Line 2739
	cmp	esi, 40					; 00000028H
	jl	SHORT $L86346
	pop	edi
	pop	esi
	pop	ebx
; Line 2740
	leave
	ret	0
_DRLG_L2FloodTVal ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L2FTVR@20
_TEXT	SEGMENT
_y$ = 12
_d$ = 16
_v10$ = -12
_k$ = -32
_ia$ = -8
_x$ = 8
@DRLG_L2FTVR@20 PROC NEAR				; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 2744
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
; Line 2770
	mov	edi, DWORD PTR _x$[ebp]
	mov	eax, edi
	mov	ebx, DWORD PTR _y$[ebp]
	imul	eax, 112				; 00000070H
	lea	esi, DWORD PTR [eax+ebx]
; Line 2773
	cmp	BYTE PTR _dung_map[esi], 0
	jne	$L86898
; Line 2775
	lea	edi, DWORD PTR [ecx-1]
	mov	DWORD PTR _ia$[ebp], edi
; Line 2776
	mov	edi, DWORD PTR _x$[ebp]
	add	edi, -2					; fffffffeH
	mov	DWORD PTR _v10$[ebp], edi
; Line 2780
	lea	edi, DWORD PTR [ecx+ecx*4]
	shl	edi, 3
	mov	DWORD PTR _k$[ebp], edi
	cmp	BYTE PTR _dungeon[edi+edx], 3
	jne	$L86902
	mov	edi, DWORD PTR _ia$[ebp]
	mov	DWORD PTR -28+[ebp], eax
	mov	eax, ebx
	sub	edi, ecx
	inc	eax
	mov	DWORD PTR -24+[ebp], edx
	inc	eax
	sub	DWORD PTR -24+[ebp], ecx
	mov	DWORD PTR -16+[ebp], eax
	mov	eax, DWORD PTR _ia$[ebp]
	lea	edi, DWORD PTR [edi+edx+1]
	mov	ecx, ebx
	mov	DWORD PTR -4+[ebp], edi
	lea	edi, DWORD PTR [eax+2]
	mov	eax, DWORD PTR _v10$[ebp]
; Line 2795
	mov	DWORD PTR _d$[ebp], 8
	add	eax, 4
	mov	DWORD PTR -20+[ebp], eax
	lea	eax, DWORD PTR [ecx-2]
	mov	DWORD PTR 12+[ebp], eax
	sub	DWORD PTR 12+[ebp], ecx
$L86386:
	mov	al, BYTE PTR _TransVal
	mov	edx, DWORD PTR -4+[ebp]
	push	1
	push	ebx
	push	DWORD PTR -20+[ebp]
	mov	ecx, edi
	mov	BYTE PTR _dung_map[esi], al
	mov	BYTE PTR _dung_map[esi+112], al
	mov	BYTE PTR _dung_map[esi+1], al
	mov	BYTE PTR _dung_map[esi+113], al
	call	@DRLG_L2FTVR@20
	mov	edx, DWORD PTR -4+[ebp]
	mov	ecx, DWORD PTR _ia$[ebp]
	push	2
	push	ebx
	push	DWORD PTR _v10$[ebp]
	call	@DRLG_L2FTVR@20
	mov	eax, DWORD PTR -24+[ebp]
	lea	ecx, DWORD PTR [edi-1]
	push	3
	push	DWORD PTR -16+[ebp]
	lea	edx, DWORD PTR [eax+edi]
	mov	DWORD PTR -36+[ebp], edx
	push	DWORD PTR _x$[ebp]
	call	@DRLG_L2FTVR@20
	mov	eax, DWORD PTR 12+[ebp]
	lea	ecx, DWORD PTR [edi-1]
	push	4
	lea	esi, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR -4+[ebp]
	push	esi
	push	DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax-1]
	call	@DRLG_L2FTVR@20
	mov	eax, DWORD PTR -4+[ebp]
	mov	ecx, DWORD PTR _ia$[ebp]
	push	5
	push	esi
	push	DWORD PTR _v10$[ebp]
	lea	edx, DWORD PTR [eax-1]
	call	@DRLG_L2FTVR@20
	mov	eax, DWORD PTR -4+[ebp]
	mov	ecx, edi
	push	6
	push	esi
	push	DWORD PTR -20+[ebp]
	lea	edx, DWORD PTR [eax-1]
	call	@DRLG_L2FTVR@20
	mov	edx, DWORD PTR -36+[ebp]
	mov	ecx, DWORD PTR _ia$[ebp]
	push	7
	push	DWORD PTR -16+[ebp]
	push	DWORD PTR _v10$[ebp]
	call	@DRLG_L2FTVR@20
	add	DWORD PTR -28+[ebp], 224		; 000000e0H
	add	DWORD PTR _k$[ebp], 40			; 00000028H
; Line 2796
	push	2
	pop	eax
	add	DWORD PTR _x$[ebp], eax
; Line 2798
	add	DWORD PTR -16+[ebp], eax
; Line 2799
	add	DWORD PTR _v10$[ebp], eax
	add	DWORD PTR -20+[ebp], eax
	add	ebx, eax
; Line 2804
	mov	eax, DWORD PTR -28+[ebp]
	inc	DWORD PTR _ia$[ebp]
	inc	edi
	inc	DWORD PTR -4+[ebp]
	lea	esi, DWORD PTR [eax+ebx]
; Line 2805
	cmp	BYTE PTR _dung_map[esi], 0
	jne	SHORT $L86902
	mov	eax, DWORD PTR -4+[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	BYTE PTR _dungeon[eax+ecx], 3
	je	$L86386
$L86902:
; Line 2780
	mov	edi, DWORD PTR _x$[ebp]
$L86898:
; Line 2811
	mov	edx, DWORD PTR _d$[ebp]
	mov	al, BYTE PTR _TransVal
	cmp	edx, 1
	jne	SHORT $L86390
; Line 2812
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	add	ecx, ebx
; Line 2813
	mov	BYTE PTR _dung_map[ecx], al
; Line 2814
	mov	BYTE PTR _dung_map[ecx+1], al
$L86390:
; Line 2816
	cmp	edx, 2
	jne	SHORT $L86391
; Line 2817
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	add	ecx, ebx
; Line 2818
	mov	BYTE PTR _dung_map[ecx+112], al
; Line 2819
	mov	BYTE PTR _dung_map[ecx+113], al
$L86391:
; Line 2821
	cmp	edx, 3
	jne	SHORT $L86392
; Line 2822
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	add	ecx, ebx
; Line 2823
	mov	BYTE PTR _dung_map[ecx], al
; Line 2824
	mov	BYTE PTR _dung_map[ecx+112], al
$L86392:
; Line 2826
	cmp	edx, 4
	jne	SHORT $L86393
; Line 2827
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	add	ecx, ebx
; Line 2828
	mov	BYTE PTR _dung_map[ecx+1], al
; Line 2829
	mov	BYTE PTR _dung_map[ecx+113], al
$L86393:
; Line 2831
	cmp	edx, 5
	jne	SHORT $L86394
; Line 2832
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ecx+ebx+113], al
$L86394:
; Line 2833
	cmp	edx, 6
	jne	SHORT $L86395
; Line 2834
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ecx+ebx+1], al
$L86395:
; Line 2835
	cmp	edx, 7
	jne	SHORT $L86396
; Line 2836
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ecx+ebx+112], al
$L86396:
; Line 2837
	cmp	edx, 8
	jne	SHORT $L86397
; Line 2838
	imul	edi, 112				; 00000070H
	mov	BYTE PTR _dung_map[edi+ebx], al
$L86397:
	pop	edi
	pop	esi
	pop	ebx
; Line 2839
	leave
	ret	12					; 0000000cH
@DRLG_L2FTVR@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L2TransFix
_TEXT	SEGMENT
_DRLG_L2TransFix PROC NEAR				; COMDAT
; Line 2843
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 2856
	xor	esi, esi
	mov	DWORD PTR -4+[ebp], OFFSET FLAT:_dung_map+1809
$L86410:
; Line 2859
	mov	eax, DWORD PTR -4+[ebp]
	push	40					; 00000028H
; Line 2860
	lea	ecx, DWORD PTR _dungeon[esi]
	pop	edi
$L86414:
; Line 2863
	mov	bl, BYTE PTR [ecx]
; Line 2864
	cmp	bl, 14					; 0000000eH
	jne	SHORT $L86417
	cmp	BYTE PTR [ecx-1], 10			; 0000000aH
	jne	SHORT $L86417
; Line 2866
	mov	dl, BYTE PTR [eax-1]
	mov	BYTE PTR [eax+111], dl
; Line 2867
	mov	BYTE PTR [eax+112], dl
$L86417:
; Line 2869
	cmp	bl, 15					; 0000000fH
	jne	SHORT $L86418
	cmp	BYTE PTR [ecx+40], 11			; 0000000bH
	jne	SHORT $L86421
; Line 2871
	mov	dl, BYTE PTR [eax-1]
	mov	BYTE PTR [eax], dl
; Line 2872
	mov	BYTE PTR [eax+112], dl
$L86418:
; Line 2874
	cmp	bl, 10					; 0000000aH
	jne	SHORT $L86419
; Line 2876
	mov	dl, BYTE PTR [eax-1]
	mov	BYTE PTR [eax+111], dl
; Line 2877
	mov	BYTE PTR [eax+112], dl
$L86419:
; Line 2879
	cmp	bl, 11					; 0000000bH
	jne	SHORT $L86420
; Line 2881
	mov	dl, BYTE PTR [eax-1]
	mov	BYTE PTR [eax], dl
; Line 2882
	mov	BYTE PTR [eax+112], dl
$L86420:
; Line 2884
	cmp	bl, 16					; 00000010H
	jne	SHORT $L86421
; Line 2885
	mov	dl, BYTE PTR [eax-1]
; Line 2886
	mov	BYTE PTR [eax+111], dl
; Line 2887
	mov	BYTE PTR [eax], dl
; Line 2888
	mov	BYTE PTR [eax+112], dl
$L86421:
; Line 2890
	add	eax, 224				; 000000e0H
; Line 2891
	add	ecx, 40					; 00000028H
; Line 2893
	dec	edi
	jne	SHORT $L86414
; Line 2894
	add	DWORD PTR -4+[ebp], 2
; Line 2895
	inc	esi
; Line 2896
	cmp	esi, 40					; 00000028H
	jl	SHORT $L86410
	pop	edi
	pop	esi
	pop	ebx
; Line 2897
	leave
	ret	0
_DRLG_L2TransFix ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L2DirtFix
_TEXT	SEGMENT
_L2DirtFix PROC NEAR					; COMDAT
; Line 2905
	xor	ecx, ecx
$L86426:
; Line 2907
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[ecx]
	pop	edx
$L86430:
; Line 2910
	cmp	BYTE PTR [eax], 13			; 0000000dH
	jne	SHORT $L86433
	cmp	BYTE PTR [eax+40], 11			; 0000000bH
	je	SHORT $L86433
; Line 2911
	mov	BYTE PTR [eax], -110			; ffffff92H
$L86433:
; Line 2912
	cmp	BYTE PTR [eax], 11			; 0000000bH
	jne	SHORT $L86434
	cmp	BYTE PTR [eax+40], 11			; 0000000bH
	je	SHORT $L86434
; Line 2913
	mov	BYTE PTR [eax], -112			; ffffff90H
$L86434:
; Line 2914
	cmp	BYTE PTR [eax], 15			; 0000000fH
	jne	SHORT $L86435
	cmp	BYTE PTR [eax+40], 11			; 0000000bH
	je	SHORT $L86435
; Line 2915
	mov	BYTE PTR [eax], -108			; ffffff94H
$L86435:
; Line 2916
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $L86436
	cmp	BYTE PTR [eax+1], 10			; 0000000aH
	je	SHORT $L86436
; Line 2917
	mov	BYTE PTR [eax], -113			; ffffff8fH
$L86436:
; Line 2918
	cmp	BYTE PTR [eax], 13			; 0000000dH
	jne	SHORT $L86437
	cmp	BYTE PTR [eax+1], 10			; 0000000aH
	je	SHORT $L86437
; Line 2919
	mov	BYTE PTR [eax], -110			; ffffff92H
$L86437:
; Line 2920
	cmp	BYTE PTR [eax], 14			; 0000000eH
	jne	SHORT $L86438
	cmp	BYTE PTR [eax+1], 15			; 0000000fH
	je	SHORT $L86438
; Line 2921
	mov	BYTE PTR [eax], -109			; ffffff93H
$L86438:
; Line 2922
	add	eax, 40					; 00000028H
; Line 2924
	dec	edx
	jne	SHORT $L86430
; Line 2925
	inc	ecx
; Line 2926
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L86426
; Line 2927
	ret	0
_L2DirtFix ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_InitL2Vals
_TEXT	SEGMENT
_DRLG_InitL2Vals PROC NEAR				; COMDAT
; Line 2930
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 2946
	mov	edi, OFFSET FLAT:_dPiece
	mov	edx, OFFSET FLAT:_dArch
	mov	ebp, 448				; 000001c0H
$L86453:
; Line 2948
	push	112					; 00000070H
	mov	esi, edx
; Line 2949
	mov	ecx, edi
	pop	ebx
$L86457:
; Line 2952
	mov	eax, DWORD PTR [ecx]
; Line 2953
	cmp	eax, 541				; 0000021dH
	je	SHORT $L86464
	cmp	eax, 178				; 000000b2H
	je	SHORT $L86464
	cmp	eax, 551				; 00000227H
	je	SHORT $L86464
; Line 2954
	cmp	eax, 542				; 0000021eH
	je	SHORT $LABEL_11$86463
	cmp	eax, 553				; 00000229H
	je	SHORT $LABEL_11$86463
; Line 2956
	cmp	eax, 13					; 0000000dH
	je	SHORT $L86464
; Line 2957
	cmp	eax, 17					; 00000011H
; Line 2958
	jne	SHORT $LABEL_13$86466
$LABEL_11$86463:
; Line 2960
	mov	al, 6
; Line 2961
	jmp	SHORT $LABEL_12$86467
$L86464:
; Line 2964
	mov	al, 5
$LABEL_12$86467:
; Line 2966
	mov	BYTE PTR [esi], al
$LABEL_13$86466:
; Line 2968
	add	ecx, ebp
; Line 2969
	add	esi, 112				; 00000070H
; Line 2971
	dec	ebx
	jne	SHORT $L86457
; Line 2972
	add	edi, 4
; Line 2973
	inc	edx
; Line 2974
	cmp	edi, OFFSET FLAT:_dPiece+448
	jl	SHORT $L86453
; Line 2976
	mov	edx, OFFSET FLAT:_dPiece
	mov	ebx, OFFSET FLAT:_dArch+2
$L86472:
; Line 2978
	push	112					; 00000070H
	mov	eax, ebx
; Line 2979
	mov	ecx, edx
	pop	edi
$L86475:
; Line 2982
	mov	esi, DWORD PTR [ecx]
; Line 2983
	cmp	esi, 132				; 00000084H
	jne	SHORT $L86478
; Line 2984
	mov	BYTE PTR [eax-1], 2
; Line 2985
	mov	BYTE PTR [eax], 1
; Line 2986
	jmp	SHORT $L86480
$L86478:
	cmp	esi, 135				; 00000087H
	je	SHORT $L86481
	cmp	esi, 139				; 0000008bH
	jne	SHORT $L86480
$L86481:
; Line 2987
	mov	BYTE PTR [eax+110], 3
; Line 2988
	mov	BYTE PTR [eax+222], 4
$L86480:
; Line 2990
	add	ecx, ebp
; Line 2991
	add	eax, 112				; 00000070H
; Line 2993
	dec	edi
	jne	SHORT $L86475
; Line 2994
	add	edx, 4
; Line 2995
	inc	ebx
; Line 2996
	cmp	edx, OFFSET FLAT:_dPiece+448
	jl	SHORT $L86472
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2997
	ret	0
_DRLG_InitL2Vals ENDP
_TEXT	ENDS
END
