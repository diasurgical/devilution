; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/themes.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @TFit_Shrine@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @TFit_Obj5@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @TFit_SkelRoom@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @TFit_GoatShrine@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckThemeObj3@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @TFit_Obj3@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckThemeReqs@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SpecialThemeFit@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckThemeRoom@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitThemes
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _HoldThemeRooms
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlaceThemeMonsts@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_Barrel@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_Shrine@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_MonstPit@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_SkelRoom@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_Treasure@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_Library@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_Torture@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_BloodFountain@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_Decap@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_PurifyingFountain@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_ArmorStand@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_GoatShrine@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_Cauldron@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_MurkyFountain@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_TearFountain@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_BrnCross@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @Theme_WeaponRack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _UpdateL4Trans
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CreateThemeRooms
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_ThemeGood
PUBLIC	_trm5x
PUBLIC	_trm5y
PUBLIC	_trm3x
PUBLIC	_trm3y
_DATA	SEGMENT
COMM	_numthemes:DWORD
COMM	_armorFlag:DWORD
COMM	_ThemeGoodIn:DWORD:04H
COMM	_weaponFlag:DWORD
COMM	_treasureFlag:BYTE
COMM	_mFountainFlag:BYTE
COMM	_cauldronFlag:BYTE
COMM	_tFountainFlag:BYTE
COMM	_zharlib:DWORD
COMM	_themex:DWORD
COMM	_themey:DWORD
COMM	_themeVar1:DWORD
COMM	_themes:QWORD:032H
COMM	_pFountainFlag:BYTE
COMM	_bFountainFlag:BYTE
COMM	_bCrossFlag:DWORD
_ThemeGood DD	0bH
	DD	01H
	DD	03H
	DD	05H
_trm5x	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	ORG $+4
_trm5y	DD	0fffffffeH
	DD	0fffffffeH
	DD	0fffffffeH
	DD	0fffffffeH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
_trm3x	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	01H
_trm3y	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
_DATA	ENDS
PUBLIC	@TFit_Shrine@4
EXTRN	_dObject:BYTE
EXTRN	_dPiece:BYTE
EXTRN	_dung_map:BYTE
EXTRN	_nTrapTable:BYTE
EXTRN	_nSolidTable:BYTE
; Function compile flags: /Ogsy
;	COMDAT @TFit_Shrine@4
_TEXT	SEGMENT
_v2$ = -4
_v6$ = -8
@TFit_Shrine@4 PROC NEAR				; COMDAT
; _i$ = ecx
; File Source/themes.cpp
; Line 53
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 61
	movsx	esi, BYTE PTR _themes[ecx*8+4]
; Line 62
	xor	edx, edx
	push	edi
	xor	edi, edi
; Line 63
	mov	DWORD PTR _v2$[ebp], edx
; Line 64
	mov	DWORD PTR _v6$[ebp], edx
$L84992:
; Line 66
	mov	eax, edi
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _v2$[ebp]
; Line 67
	movsx	ecx, BYTE PTR _dung_map[eax]
	cmp	ecx, esi
	jne	$LABEL_20$84995
; Line 70
	mov	ecx, DWORD PTR _dPiece[eax*4-4]
; Line 77
	cmp	BYTE PTR _nTrapTable[ecx], dl
	je	SHORT $L84996
	mov	ebx, DWORD PTR _dPiece[eax*4-448]
	cmp	BYTE PTR _nSolidTable[ebx], dl
	jne	SHORT $L84996
	mov	ebx, DWORD PTR _dPiece[eax*4+448]
	cmp	BYTE PTR _nSolidTable[ebx], dl
	jne	SHORT $L84996
	movsx	ebx, BYTE PTR _dung_map[eax-112]
	cmp	ebx, esi
	jne	SHORT $L84996
	movsx	ebx, BYTE PTR _dung_map[eax+112]
	cmp	ebx, esi
	jne	SHORT $L84996
	cmp	BYTE PTR _dObject[eax-113], dl
	jne	SHORT $L84996
	cmp	BYTE PTR _dObject[eax+111], dl
	jne	SHORT $L84996
; Line 78
	mov	DWORD PTR _v6$[ebp], 1
$L84996:
; Line 80
	cmp	DWORD PTR _v6$[ebp], edx
	jne	SHORT $L84993
; Line 89
	mov	ebx, DWORD PTR _dPiece[eax*4-448]
	cmp	BYTE PTR _nTrapTable[ebx], dl
	je	SHORT $LABEL_21$85000
	cmp	BYTE PTR _nSolidTable[ecx], dl
	jne	SHORT $LABEL_21$85000
	mov	ecx, DWORD PTR _dPiece[eax*4+4]
	cmp	BYTE PTR _nSolidTable[ecx], dl
	jne	SHORT $LABEL_21$85000
	movsx	ecx, BYTE PTR _dung_map[eax-1]
	cmp	ecx, esi
	jne	SHORT $LABEL_21$85000
	movsx	ecx, BYTE PTR _dung_map[eax+1]
	cmp	ecx, esi
	jne	SHORT $LABEL_21$85000
	cmp	BYTE PTR _dObject[eax-113], dl
	jne	SHORT $LABEL_21$85000
	cmp	BYTE PTR _dObject[eax-111], dl
	jne	SHORT $LABEL_21$85000
; Line 93
	mov	DWORD PTR _v6$[ebp], 2
$LABEL_20$84995:
; Line 95
	cmp	DWORD PTR _v6$[ebp], edx
	jne	SHORT $L84993
$LABEL_21$85000:
; Line 99
	inc	edi
	cmp	edi, 112				; 00000070H
	jne	$L84992
; Line 100
	inc	DWORD PTR _v2$[ebp]
; Line 101
	xor	edi, edi
; Line 102
	cmp	DWORD PTR _v2$[ebp], 112		; 00000070H
	jne	$L84992
; Line 103
	xor	al, al
	jmp	SHORT $L84984
$L84993:
; Line 107
	mov	eax, DWORD PTR _v2$[ebp]
; Line 108
	mov	DWORD PTR _themex, edi
	mov	DWORD PTR _themey, eax
; Line 109
	mov	eax, DWORD PTR _v6$[ebp]
	mov	DWORD PTR _themeVar1, eax
; Line 110
	mov	al, 1
$L84984:
	pop	edi
	pop	esi
	pop	ebx
; Line 111
	leave
	ret	0
@TFit_Shrine@4 ENDP
_TEXT	ENDS
PUBLIC	@TFit_Obj5@4
EXTRN	@random@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @TFit_Obj5@4
_TEXT	SEGMENT
_v2$ = -4
_v5$ = -12
_v10$ = -16
_v11$ = -8
@TFit_Obj5@4 PROC NEAR					; COMDAT
; _t$ = ecx
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
; Line 128
	push	5
	mov	esi, ecx
	xor	edi, edi
	pop	edx
	xor	cl, cl
	mov	DWORD PTR _v2$[ebp], edi
	call	@random@8
	inc	eax
; Line 130
	cmp	eax, edi
	mov	DWORD PTR _v10$[ebp], eax
	jle	$LABEL_19$85018
; Line 136
	movsx	ebx, BYTE PTR _themes[esi*8+4]
; Line 137
	mov	DWORD PTR _v11$[ebp], ebx
$L85020:
; Line 139
	mov	ecx, DWORD PTR _v2$[ebp]
	imul	ecx, 112				; 00000070H
	add	ecx, edi
; Line 140
	movsx	edx, BYTE PTR _dung_map[ecx]
	cmp	edx, ebx
	jne	SHORT $L85029
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	BYTE PTR _nSolidTable[ecx], 0
	jne	SHORT $L85029
; Line 141
	xor	esi, esi
	inc	esi
; Line 156
	xor	edx, edx
$L85023:
; Line 144
	cmp	edx, 100				; 00000064H
	jge	SHORT $L85025
; Line 147
	mov	ecx, DWORD PTR _trm5x[edx]
	add	ecx, DWORD PTR _v2$[ebp]
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _trm5y[edx]
	add	ecx, edi
; Line 148
	mov	ebx, DWORD PTR _dPiece[ecx*4]
	cmp	BYTE PTR _nSolidTable[ebx], 0
	je	SHORT $L85027
; Line 149
	xor	esi, esi
$L85027:
; Line 152
	movsx	ecx, BYTE PTR _dung_map[ecx]
	mov	ebx, DWORD PTR _v11$[ebp]
	cmp	ecx, ebx
	mov	DWORD PTR _v5$[ebp], ebx
	je	SHORT $L85028
; Line 153
	xor	esi, esi
$L85028:
; Line 156
	mov	ebx, DWORD PTR _v5$[ebp]
	add	edx, 4
	test	esi, esi
	jne	SHORT $L85023
$L85025:
; Line 157
	test	esi, esi
	je	SHORT $L85029
; Line 158
	dec	eax
; Line 159
	jmp	SHORT $LABEL_18$85030
$L85029:
; Line 162
	inc	DWORD PTR _v2$[ebp]
	cmp	DWORD PTR _v2$[ebp], 112		; 00000070H
	jne	SHORT $LABEL_18$85030
; Line 165
	and	DWORD PTR _v2$[ebp], 0
; Line 166
	inc	edi
	cmp	edi, 112				; 00000070H
	jne	SHORT $LABEL_18$85030
; Line 169
	cmp	eax, DWORD PTR _v10$[ebp]
	je	SHORT $L85588
; Line 172
	xor	edi, edi
$LABEL_18$85030:
; Line 174
	test	eax, eax
	jg	$L85020
$LABEL_19$85018:
; Line 132
	mov	eax, DWORD PTR _v2$[ebp]
; Line 133
	mov	DWORD PTR _themey, edi
	mov	DWORD PTR _themex, eax
; Line 134
	mov	al, 1
$L85021:
	pop	edi
	pop	esi
	pop	ebx
; Line 178
	leave
	ret	0
$L85588:
; Line 170
	xor	al, al
	jmp	SHORT $L85021
@TFit_Obj5@4 ENDP
_TEXT	ENDS
PUBLIC	@TFit_SkelRoom@4
EXTRN	@IsSkel@4:NEAR
EXTRN	_Monsters:BYTE
EXTRN	_nummtypes:DWORD
EXTRN	_leveltype:BYTE
; Function compile flags: /Ogsy
;	COMDAT @TFit_SkelRoom@4
_TEXT	SEGMENT
@TFit_SkelRoom@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 184
	mov	al, BYTE PTR _leveltype
	push	ebx
	push	esi
	cmp	al, 1
	push	edi
	mov	ebx, ecx
	je	SHORT $L85039
	cmp	al, 2
; Line 185
	jne	SHORT $L85599
$L85039:
; Line 187
	xor	esi, esi
; Line 188
	cmp	DWORD PTR _nummtypes, esi
; Line 189
	jle	SHORT $L85599
; Line 192
	movzx	ecx, BYTE PTR _Monsters
	call	@IsSkel@4
	test	eax, eax
	jne	SHORT $L85043
	mov	edi, OFFSET FLAT:_Monsters
$L85042:
; Line 193
	inc	esi
	add	edi, 328				; 00000148H
; Line 194
	cmp	esi, DWORD PTR _nummtypes
	jge	SHORT $L85599
	movzx	ecx, BYTE PTR [edi]
	call	@IsSkel@4
	test	eax, eax
	je	SHORT $L85042
$L85043:
; Line 198
	mov	DWORD PTR _themeVar1, esi
	pop	edi
; Line 199
	mov	ecx, ebx
	pop	esi
	pop	ebx
	jmp	@TFit_Obj5@4
$L85599:
	pop	edi
	pop	esi
; Line 195
	xor	al, al
	pop	ebx
; Line 200
	ret	0
@TFit_SkelRoom@4 ENDP
_TEXT	ENDS
PUBLIC	@TFit_GoatShrine@4
EXTRN	@IsGoat@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @TFit_GoatShrine@4
_TEXT	SEGMENT
@TFit_GoatShrine@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 203
	push	ebx
	push	esi
; Line 206
	xor	esi, esi
	push	edi
; Line 207
	cmp	DWORD PTR _nummtypes, esi
	mov	ebx, ecx
; Line 208
	jle	SHORT $L85605
; Line 211
	movzx	ecx, BYTE PTR _Monsters
	call	@IsGoat@4
	test	eax, eax
	jne	SHORT $L85052
	mov	edi, OFFSET FLAT:_Monsters
$L85051:
; Line 212
	inc	esi
	add	edi, 328				; 00000148H
; Line 213
	cmp	esi, DWORD PTR _nummtypes
	jge	SHORT $L85605
	movzx	ecx, BYTE PTR [edi]
	call	@IsGoat@4
	test	eax, eax
	je	SHORT $L85051
$L85052:
; Line 217
	mov	DWORD PTR _themeVar1, esi
	pop	edi
; Line 218
	mov	ecx, ebx
	pop	esi
	pop	ebx
	jmp	@TFit_Obj5@4
$L85605:
	pop	edi
	pop	esi
; Line 214
	xor	al, al
	pop	ebx
; Line 219
	ret	0
@TFit_GoatShrine@4 ENDP
_TEXT	ENDS
PUBLIC	@CheckThemeObj3@16
; Function compile flags: /Ogsy
;	COMDAT @CheckThemeObj3@16
_TEXT	SEGMENT
_t$ = 8
_f$ = 12
@CheckThemeObj3@16 PROC NEAR				; COMDAT
; _xp$ = ecx
; _yp$ = edx
; Line 222
	push	ebx
	push	esi
	push	edi
	mov	esi, edx
	mov	ebx, ecx
; Line 226
	xor	edi, edi
$L85065:
; Line 227
	mov	eax, DWORD PTR _trm3x[edi]
	add	eax, ebx
	test	eax, eax
	jl	SHORT $L85066
; Line 230
	mov	ecx, DWORD PTR _trm3y[edi]
	lea	edx, DWORD PTR [ecx+esi]
	test	edx, edx
	jl	SHORT $L85066
; Line 233
	imul	eax, 112				; 00000070H
	add	eax, ecx
	add	eax, esi
	mov	ecx, DWORD PTR _dPiece[eax*4]
	cmp	BYTE PTR _nSolidTable[ecx], 0
	jne	SHORT $L85066
; Line 236
	mov	edx, DWORD PTR _t$[esp+8]
	mov	cl, BYTE PTR _dung_map[eax]
	cmp	cl, BYTE PTR _themes[edx*8+4]
	jne	SHORT $L85066
; Line 239
	cmp	BYTE PTR _dObject[eax], 0
	jne	SHORT $L85066
; Line 242
	mov	edx, DWORD PTR _f$[esp+8]
	cmp	edx, -1
	je	SHORT $L85073
; Line 243
	xor	cl, cl
	call	@random@8
	test	eax, eax
	je	SHORT $L85066
$L85073:
; Line 226
	add	edi, 4
; Line 248
	cmp	edi, 36					; 00000024H
	jl	SHORT $L85065
; Line 249
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85062
$L85066:
; Line 252
	xor	eax, eax
$L85062:
	pop	edi
	pop	esi
	pop	ebx
; Line 253
	ret	8
@CheckThemeObj3@16 ENDP
_TEXT	ENDS
PUBLIC	@TFit_Obj3@4
; Function compile flags: /Ogsy
;	COMDAT @TFit_Obj3@4
_TEXT	SEGMENT
_objrnd$ = -4
@TFit_Obj3@4 PROC NEAR					; COMDAT
; _t$ = ecx
; Line 256
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 265
	xor	edi, edi
	mov	ebx, ecx
	mov	BYTE PTR _objrnd$[ebp], 4
	mov	BYTE PTR _objrnd$[ebp+1], 4
	mov	BYTE PTR _objrnd$[ebp+2], 3
	mov	BYTE PTR _objrnd$[ebp+3], 5
	inc	edi
$L85082:
; Line 267
	xor	esi, esi
	inc	esi
$L85084:
; Line 269
	movzx	eax, BYTE PTR _leveltype
	mov	edx, edi
	mov	ecx, esi
	movsx	eax, BYTE PTR _objrnd$[ebp+eax-1]
	push	eax
	push	ebx
	call	@CheckThemeObj3@16
	test	eax, eax
	jne	SHORT $L85624
; Line 274
	inc	esi
; Line 275
	cmp	esi, 111				; 0000006fH
	jl	SHORT $L85084
; Line 276
	inc	edi
	cmp	edi, 111				; 0000006fH
	jl	SHORT $L85082
; Line 281
	xor	al, al
$L85077:
	pop	edi
	pop	esi
	pop	ebx
; Line 282
	leave
	ret	0
$L85624:
; Line 270
	mov	DWORD PTR _themex, esi
; Line 271
	mov	DWORD PTR _themey, edi
; Line 272
	mov	al, 1
	jmp	SHORT $L85077
@TFit_Obj3@4 ENDP
_TEXT	ENDS
PUBLIC	@CheckThemeReqs@4
; Function compile flags: /Ogsy
;	COMDAT @CheckThemeReqs@4
_TEXT	SEGMENT
@CheckThemeReqs@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 297
	xor	edx, edx
	cmp	ecx, 10					; 0000000aH
	jg	SHORT $L85101
; Line 298
	je	SHORT $LABEL_16$85112
; Line 299
	lea	eax, DWORD PTR [ecx-1]
; Line 300
	cmp	eax, edx
	je	SHORT $L85105
; Line 301
	add	eax, -2					; fffffffeH
; Line 302
	cmp	eax, edx
	je	SHORT $L85105
; Line 303
	add	eax, -2					; fffffffeH
; Line 304
	cmp	eax, edx
	je	SHORT $L85105
; Line 305
	add	eax, -2					; fffffffeH
; Line 306
	cmp	eax, edx
	je	SHORT $L85106
; Line 307
	cmp	eax, 2
; Line 308
	jne	SHORT $L85629
; Line 310
	cmp	BYTE PTR _pFountainFlag, dl
; Line 311
	jmp	SHORT $L85628
$L85106:
; Line 312
	cmp	BYTE PTR _bFountainFlag, dl
	jmp	SHORT $L85628
$L85105:
; Line 322
	mov	al, BYTE PTR _leveltype
	cmp	al, 3
	je	SHORT $L85117
; Line 323
	cmp	al, 4
; Line 324
	jmp	SHORT $L85628
$L85101:
; Line 332
	lea	eax, DWORD PTR [ecx-12]
; Line 333
	cmp	eax, edx
	je	SHORT $L85113
; Line 334
	dec	eax
; Line 335
	cmp	eax, edx
	jne	SHORT $L85114
; Line 336
	cmp	BYTE PTR _mFountainFlag, dl
; Line 337
	jmp	SHORT $L85628
$L85114:
; Line 339
	dec	eax
; Line 340
	cmp	eax, edx
	jne	SHORT $L85115
; Line 341
	cmp	BYTE PTR _tFountainFlag, dl
; Line 342
	jmp	SHORT $L85628
$L85115:
; Line 344
	cmp	eax, 2
	je	SHORT $LABEL_16$85112
$L85629:
; Line 345
	mov	al, 1
; Line 354
	ret	0
$LABEL_16$85112:
; Line 329
	cmp	BYTE PTR _leveltype, 1
; Line 330
	jmp	SHORT $L85628
$L85113:
; Line 349
	cmp	BYTE PTR _leveltype, 4
	jne	SHORT $L85117
; Line 350
	cmp	BYTE PTR _cauldronFlag, dl
$L85628:
	sete	al
	cmp	al, dl
$LABEL_21$85109:
	sete	al
; Line 354
	ret	0
$L85117:
; Line 353
	xor	al, al
; Line 354
	ret	0
@CheckThemeReqs@4 ENDP
_TEXT	ENDS
PUBLIC	@SpecialThemeFit@8
; Function compile flags: /Ogsy
;	COMDAT @SpecialThemeFit@8
_TEXT	SEGMENT
@SpecialThemeFit@8 PROC NEAR				; COMDAT
; _i$ = ecx
; _t$ = edx
; Line 362
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
; Line 365
	mov	ecx, edi
	call	@CheckThemeReqs@4
; Line 366
	lea	ecx, DWORD PTR [edi-1]
	cmp	ecx, 15					; 0000000fH
	ja	$L85122
	jmp	DWORD PTR $L85634[ecx*4]
$L85128:
; Line 369
	test	al, al
	je	$L85122
; Line 370
	mov	ecx, esi
	pop	edi
	pop	esi
	jmp	@TFit_Shrine@4
$L85130:
; Line 374
	test	al, al
	je	$L85122
; Line 375
	mov	ecx, esi
	pop	edi
	pop	esi
	jmp	@TFit_SkelRoom@4
$L85132:
; Line 379
	mov	al, BYTE PTR _treasureFlag
; Line 380
	test	al, al
	je	$L85122
; Line 381
	and	BYTE PTR _treasureFlag, 0
; Line 383
	jmp	$L85122
$L85134:
; Line 389
	test	al, al
	je	$L85122
; Line 390
	mov	ecx, esi
	pop	edi
	pop	esi
	jmp	@TFit_Obj3@4
$L85136:
; Line 394
	test	al, al
	je	SHORT $L85122
; Line 395
	mov	ecx, esi
	call	@TFit_Obj5@4
; Line 396
	test	al, al
	je	SHORT $L85122
; Line 397
	and	BYTE PTR _bFountainFlag, 0
; Line 400
	jmp	SHORT $L85122
$L85139:
; Line 402
	test	al, al
	je	SHORT $L85122
; Line 403
	mov	ecx, esi
	call	@TFit_Obj5@4
; Line 404
	test	al, al
	je	SHORT $L85122
; Line 405
	and	BYTE PTR _pFountainFlag, 0
; Line 408
	jmp	SHORT $L85122
$L85142:
; Line 410
	test	al, al
	je	SHORT $L85122
; Line 411
	mov	ecx, esi
	pop	edi
	pop	esi
	jmp	@TFit_GoatShrine@4
$L85144:
; Line 415
	test	al, al
	je	SHORT $L85122
; Line 416
	mov	ecx, esi
	call	@TFit_Obj5@4
; Line 417
	test	al, al
	je	SHORT $L85122
; Line 418
	and	BYTE PTR _cauldronFlag, 0
; Line 421
	jmp	SHORT $L85122
$L85147:
; Line 423
	test	al, al
	je	SHORT $L85122
; Line 424
	mov	ecx, esi
	call	@TFit_Obj5@4
; Line 425
	test	al, al
	je	SHORT $L85122
; Line 426
	and	BYTE PTR _mFountainFlag, 0
; Line 429
	jmp	SHORT $L85122
$L85150:
; Line 431
	test	al, al
	je	SHORT $L85122
; Line 432
	mov	ecx, esi
	call	@TFit_Obj5@4
; Line 433
	test	al, al
	je	SHORT $L85122
; Line 434
	and	BYTE PTR _tFountainFlag, 0
$L85122:
	pop	edi
	pop	esi
; Line 442
	ret	0
$L85634:
	DD	$L85128
	DD	$L85122
	DD	$L85130
	DD	$L85132
	DD	$L85128
	DD	$L85134
	DD	$L85136
	DD	$L85134
	DD	$L85139
	DD	$L85134
	DD	$L85142
	DD	$L85144
	DD	$L85147
	DD	$L85150
	DD	$L85134
	DD	$L85134
@SpecialThemeFit@8 ENDP
_TEXT	ENDS
PUBLIC	@CheckThemeRoom@4
EXTRN	_dFlags:BYTE
EXTRN	_trigflag:BYTE
EXTRN	_trigs:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CheckThemeRoom@4
_TEXT	SEGMENT
_v12$ = -8
@CheckThemeRoom@4 PROC NEAR				; COMDAT
; _tv$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 465
	mov	eax, DWORD PTR _trigflag+16
	push	ebx
	push	esi
	xor	esi, esi
	test	eax, eax
	push	edi
	jle	SHORT $LABEL_5$85169
; Line 512
	mov	edi, DWORD PTR _trigs
	mov	ebx, DWORD PTR _trigs+4
	mov	edx, OFFSET FLAT:_trigs+4
	jmp	SHORT $L85652
$L85195:
; Line 513
	inc	esi
; Line 514
	add	edx, 16					; 00000010H
; Line 515
	cmp	esi, eax
	jge	SHORT $LABEL_5$85169
	mov	edi, DWORD PTR [edx-4]
	mov	ebx, DWORD PTR [edx]
$L85652:
	imul	edi, 112				; 00000070H
	movsx	edi, BYTE PTR _dung_map[edi+ebx]
	cmp	edi, ecx
	jne	SHORT $L85195
$L85196:
; Line 520
	xor	al, al
$L85156:
	pop	edi
	pop	esi
	pop	ebx
; Line 521
	leave
	ret	0
$LABEL_5$85169:
; Line 467
	xor	edi, edi
; Line 468
	xor	esi, esi
$L85170:
; Line 470
	xor	edx, edx
; Line 481
	mov	eax, esi
$L85173:
	movsx	ebx, BYTE PTR _dung_map[eax]
	cmp	ebx, ecx
	jne	SHORT $L85176
; Line 474
	test	BYTE PTR _dFlags[eax], 8
	jne	SHORT $L85196
; Line 477
	inc	edi
$L85176:
; Line 479
	inc	edx
; Line 481
	add	eax, 112				; 00000070H
	cmp	edx, 112				; 00000070H
	jl	SHORT $L85173
; Line 482
	inc	esi
; Line 483
	cmp	esi, 112				; 00000070H
	jl	SHORT $L85170
; Line 484
	cmp	BYTE PTR _leveltype, 1
	jne	SHORT $L85179
	cmp	edi, 9
	jl	SHORT $L85196
	cmp	edi, 100				; 00000064H
	jg	SHORT $L85196
$L85179:
; Line 486
	mov	edi, OFFSET FLAT:_dPiece
	mov	esi, OFFSET FLAT:_dung_map
	mov	eax, edi
	add	eax, -448				; fffffe40H
	dec	esi
	mov	DWORD PTR -4+[ebp], eax
$LABEL_16$85180:
; Line 488
	and	DWORD PTR _v12$[ebp], 0
	mov	eax, DWORD PTR -4+[ebp]
; Line 489
	mov	edx, esi
$L85182:
; Line 496
	movsx	ebx, BYTE PTR [edx+1]
	cmp	ebx, ecx
	jne	SHORT $L85188
	mov	ebx, DWORD PTR [eax+448]
	cmp	BYTE PTR _nSolidTable[ebx], 0
	jne	SHORT $L85188
	movsx	ebx, BYTE PTR [edx-111]
	cmp	ebx, ecx
	je	SHORT $L85185
	mov	ebx, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[ebx], 0
	je	$L85196
$L85185:
	movsx	ebx, BYTE PTR [edx+113]
	cmp	ebx, ecx
	je	SHORT $L85186
	mov	ebx, DWORD PTR [eax+896]
	cmp	BYTE PTR _nSolidTable[ebx], 0
	je	$L85196
$L85186:
	movsx	ebx, BYTE PTR [edx]
	cmp	ebx, ecx
	je	SHORT $L85187
	mov	ebx, DWORD PTR [eax+444]
	cmp	BYTE PTR _nSolidTable[ebx], 0
	je	$L85196
$L85187:
	movsx	ebx, BYTE PTR [edx+2]
	cmp	ebx, ecx
	je	SHORT $L85188
	mov	ebx, DWORD PTR [eax+452]
	cmp	BYTE PTR _nSolidTable[ebx], 0
	je	$L85196
$L85188:
; Line 497
	inc	DWORD PTR _v12$[ebp]
; Line 498
	add	eax, 448				; 000001c0H
; Line 499
	add	edx, 112				; 00000070H
; Line 500
	cmp	DWORD PTR _v12$[ebp], 112		; 00000070H
	jl	$L85182
; Line 501
	add	DWORD PTR -4+[ebp], 4
; Line 502
	inc	esi
; Line 503
	cmp	DWORD PTR -4+[ebp], edi
; Line 504
	jl	$LABEL_16$85180
; Line 506
	mov	al, 1
	jmp	$L85156
@CheckThemeRoom@4 ENDP
_TEXT	ENDS
PUBLIC	_InitThemes
EXTRN	@QuestStatus@4:NEAR
EXTRN	_themeCount:DWORD
EXTRN	_currlevel:BYTE
EXTRN	_themeLoc:BYTE
; Function compile flags: /Ogsy
;	COMDAT _InitThemes
_TEXT	SEGMENT
_v2$ = -4
_InitThemes PROC NEAR					; COMDAT
; Line 524
	push	ecx
; Line 544
	or	DWORD PTR _zharlib, -1
	push	ebx
	push	esi
; Line 548
	xor	ecx, ecx
	push	edi
	xor	edi, edi
	xor	esi, esi
	inc	ecx
; Line 556
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	mov	DWORD PTR _bCrossFlag, edi
	mov	DWORD PTR _numthemes, edi
	mov	DWORD PTR _armorFlag, ecx
	mov	BYTE PTR _bFountainFlag, cl
	mov	BYTE PTR _cauldronFlag, cl
	mov	BYTE PTR _mFountainFlag, cl
	mov	BYTE PTR _pFountainFlag, cl
	mov	BYTE PTR _tFountainFlag, cl
	mov	BYTE PTR _treasureFlag, cl
	mov	DWORD PTR _weaponFlag, ecx
	je	$L85223
; Line 557
	mov	al, BYTE PTR _leveltype
; Line 558
	cmp	al, cl
	mov	bl, al
	jne	$L85216
; Line 559
	mov	DWORD PTR _ThemeGoodIn, edi
; Line 560
	mov	DWORD PTR _ThemeGoodIn+4, edi
; Line 561
	mov	DWORD PTR _ThemeGoodIn+8, edi
; Line 562
	mov	DWORD PTR _ThemeGoodIn+12, edi
; Line 563
	mov	DWORD PTR _v2$[esp+16], edi
$L85214:
; Line 565
	cmp	esi, 50					; 00000032H
	jge	SHORT $L85216
; Line 569
	mov	ecx, DWORD PTR _v2$[esp+16]
	call	@CheckThemeRoom@4
	test	al, al
	je	SHORT $L85218
; Line 571
	push	4
	mov	al, cl
	pop	edx
	xor	cl, cl
	mov	BYTE PTR _themes[esi*8+4], al
	call	@random@8
	mov	esi, DWORD PTR _ThemeGood[eax*4]
; Line 573
	jmp	SHORT $L85675
$L85219:
; Line 571
	push	17					; 00000011H
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	esi, eax
$L85675:
; Line 573
	mov	ecx, DWORD PTR _numthemes
	mov	edx, esi
	call	@SpecialThemeFit@8
	test	al, al
	je	SHORT $L85219
; Line 578
	mov	eax, DWORD PTR _numthemes
; Line 579
	mov	bl, BYTE PTR _leveltype
	mov	DWORD PTR _themes[eax*8], esi
; Line 580
	lea	esi, DWORD PTR [eax+1]
; Line 581
	mov	DWORD PTR _numthemes, esi
$L85218:
; Line 583
	inc	DWORD PTR _v2$[esp+16]
; Line 584
	cmp	DWORD PTR _v2$[esp+16], 256		; 00000100H
	jl	SHORT $L85214
$L85216:
; Line 586
	cmp	bl, 2
	je	SHORT $L85224
	cmp	bl, 3
	je	SHORT $L85224
	cmp	bl, 4
	jne	$L85223
$L85224:
; Line 587
	mov	ecx, DWORD PTR _themeCount
; Line 588
	xor	eax, eax
	cmp	ecx, edi
	jle	SHORT $L85227
$L85225:
; Line 589
	or	DWORD PTR _themes[eax*8], -1
	inc	eax
	cmp	eax, ecx
	jl	SHORT $L85225
$L85227:
	push	ebp
; Line 592
	push	3
	mov	ebx, OFFSET FLAT:_themeLoc+8
	pop	ecx
	mov	ebp, ebx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $LABEL_23$85235
; Line 593
	xor	esi, esi
; Line 594
	cmp	DWORD PTR _themeCount, edi
	jle	SHORT $LABEL_23$85235
$L85231:
; Line 597
	mov	al, BYTE PTR [ebx]
; Line 599
	push	5
	pop	edx
	mov	ecx, esi
	mov	BYTE PTR _themes[esi*8+4], al
	call	@SpecialThemeFit@8
	test	al, al
	jne	SHORT $L85232
; Line 602
	inc	esi
; Line 603
	add	ebx, 20					; 00000014H
; Line 604
	cmp	esi, DWORD PTR _themeCount
	jl	SHORT $L85231
; Line 596
	jmp	SHORT $L85673
$L85232:
; Line 608
	mov	DWORD PTR _themes[esi*8], 5
; Line 609
	mov	DWORD PTR _zharlib, esi
$L85673:
	xor	edi, edi
$LABEL_23$85235:
; Line 613
	mov	eax, DWORD PTR _themeCount
; Line 614
	cmp	eax, edi
	jle	SHORT $L85238
$L85236:
; Line 615
	cmp	DWORD PTR _themes[edi*8], -1
	jne	SHORT $L85239
; Line 616
	mov	al, BYTE PTR [ebp]
; Line 617
	push	4
	pop	edx
	xor	cl, cl
	mov	BYTE PTR _themes[edi*8+4], al
	call	@random@8
	mov	esi, DWORD PTR _ThemeGood[eax*4]
; Line 619
	jmp	SHORT $L85677
$L85240:
; Line 617
	push	17					; 00000011H
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	esi, eax
$L85677:
; Line 619
	mov	ecx, edi
	mov	edx, esi
	call	@SpecialThemeFit@8
	test	al, al
	je	SHORT $L85240
; Line 623
	mov	DWORD PTR _themes[edi*8], esi
$L85239:
; Line 625
	mov	eax, DWORD PTR _themeCount
; Line 626
	inc	edi
	add	ebp, 20					; 00000014H
	cmp	edi, eax
	jl	SHORT $L85236
$L85238:
; Line 628
	add	DWORD PTR _numthemes, eax
	pop	ebp
$L85223:
	pop	edi
	pop	esi
	pop	ebx
; Line 631
	pop	ecx
	ret	0
_InitThemes ENDP
_TEXT	ENDS
PUBLIC	_HoldThemeRooms
EXTRN	_DRLG_HoldThemeRooms:NEAR
; Function compile flags: /Ogsy
;	COMDAT _HoldThemeRooms
_TEXT	SEGMENT
_HoldThemeRooms PROC NEAR				; COMDAT
; Line 646
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	push	ebx
	push	esi
	je	SHORT $L85260
; Line 647
	cmp	BYTE PTR _leveltype, 1
	jne	SHORT $L85249
; Line 648
	mov	ebx, DWORD PTR _numthemes
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $L85260
	push	edi
$L85250:
	mov	dl, BYTE PTR _themes[esi*8+4]
; Line 649
	xor	ecx, ecx
$L85253:
; Line 650
	push	112					; 00000070H
	mov	eax, ecx
	pop	edi
$L85256:
; Line 651
	cmp	BYTE PTR _dung_map[eax], dl
	jne	SHORT $L85257
; Line 652
	or	BYTE PTR _dFlags[eax], 8
$L85257:
; Line 650
	add	eax, 112				; 00000070H
	dec	edi
	jne	SHORT $L85256
	inc	ecx
	cmp	ecx, 112				; 00000070H
	jl	SHORT $L85253
	inc	esi
	cmp	esi, ebx
	jl	SHORT $L85250
	pop	edi
$L85260:
	pop	esi
	pop	ebx
; Line 661
	ret	0
$L85249:
	pop	esi
	pop	ebx
	jmp	_DRLG_HoldThemeRooms
_HoldThemeRooms ENDP
_TEXT	ENDS
PUBLIC	@PlaceThemeMonsts@8
EXTRN	_dItem:BYTE
EXTRN	@AddMonster@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT @PlaceThemeMonsts@8
_TEXT	SEGMENT
_f$ = -20
_mtype$ = -16
_scattertypes$ = -464
@PlaceThemeMonsts@8 PROC NEAR				; COMDAT
; _t$ = ecx
; _f$ = edx
; Line 669
	push	ebp
	mov	ebp, esp
	sub	esp, 464				; 000001d0H
; Line 678
	mov	eax, DWORD PTR _nummtypes
	push	ebx
	push	esi
	mov	DWORD PTR _f$[ebp], edx
	mov	esi, ecx
	xor	edx, edx
	xor	ecx, ecx
	push	edi
	test	eax, eax
	jle	SHORT $L85274
; Line 677
	mov	edi, OFFSET FLAT:_Monsters+1
$L85272:
; Line 679
	test	BYTE PTR [edi], 1
	je	SHORT $L85273
; Line 680
	mov	DWORD PTR _scattertypes$[ebp+edx*4], ecx
; Line 681
	inc	edx
$L85273:
	inc	ecx
	add	edi, 328				; 00000148H
	cmp	ecx, eax
	jl	SHORT $L85272
$L85274:
; Line 684
	xor	cl, cl
	call	@random@8
	mov	eax, DWORD PTR _scattertypes$[ebp+eax*4]
; Line 685
	xor	ebx, ebx
	mov	DWORD PTR _mtype$[ebp], eax
	lea	eax, DWORD PTR _themes[esi*8+4]
	mov	DWORD PTR -12+[ebp], eax
	mov	DWORD PTR -4+[ebp], OFFSET FLAT:_dPiece
$L85276:
; Line 686
	mov	eax, DWORD PTR -4+[ebp]
	xor	edi, edi
	mov	DWORD PTR -8+[ebp], eax
	mov	esi, ebx
$L85279:
; Line 687
	mov	ecx, DWORD PTR -12+[ebp]
	mov	al, BYTE PTR _dung_map[esi]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $L85280
	mov	eax, DWORD PTR -8+[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[eax], 0
	jne	SHORT $L85280
	cmp	BYTE PTR _dItem[esi], 0
	jne	SHORT $L85280
	cmp	BYTE PTR _dObject[esi], 0
	jne	SHORT $L85280
; Line 688
	mov	edx, DWORD PTR _f$[ebp]
	xor	cl, cl
	call	@random@8
	test	eax, eax
	jne	SHORT $L85280
; Line 689
	push	1
	xor	cl, cl
	push	DWORD PTR _mtype$[ebp]
	push	8
	pop	edx
	call	@random@8
	mov	edx, ebx
	mov	ecx, edi
	push	eax
	call	@AddMonster@20
$L85280:
	add	DWORD PTR -8+[ebp], 448			; 000001c0H
	inc	edi
	add	esi, 112				; 00000070H
	cmp	edi, 112				; 00000070H
	jl	SHORT $L85279
	add	DWORD PTR -4+[ebp], 4
	inc	ebx
	cmp	DWORD PTR -4+[ebp], OFFSET FLAT:_dPiece+448
	jl	SHORT $L85276
	pop	edi
	pop	esi
	pop	ebx
; Line 694
	leave
	ret	0
@PlaceThemeMonsts@8 ENDP
_TEXT	ENDS
PUBLIC	@Theme_Barrel@4
EXTRN	@AddObject@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @Theme_Barrel@4
_TEXT	SEGMENT
_t$ = -20
_barrnd$ = -4
_monstrnd$ = -12
@Theme_Barrel@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 701
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _t$[ebp], ecx
; Line 705
	mov	BYTE PTR _barrnd$[ebp], 2
	mov	BYTE PTR _barrnd$[ebp+1], 6
	mov	BYTE PTR _barrnd$[ebp+2], 4
	mov	BYTE PTR _barrnd$[ebp+3], 8
; Line 706
	mov	BYTE PTR _monstrnd$[ebp], 5
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 708
	xor	edi, edi
	mov	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece
$L85292:
; Line 709
	mov	eax, DWORD PTR -8+[ebp]
	xor	ebx, ebx
	lea	esi, DWORD PTR _dung_map[edi]
	mov	DWORD PTR -16+[ebp], eax
$L85295:
; Line 710
	mov	ecx, DWORD PTR _t$[ebp]
	mov	al, BYTE PTR [esi]
	cmp	al, BYTE PTR _themes[ecx*8+4]
	jne	SHORT $L85296
	mov	eax, DWORD PTR -16+[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[eax], 0
	jne	SHORT $L85296
; Line 711
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _barrnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
	jne	SHORT $L85296
; Line 713
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _barrnd$[ebp+eax-1]
	call	@random@8
	neg	eax
	sbb	eax, eax
; Line 714
	push	edi
	neg	eax
	add	eax, 57					; 00000039H
	mov	edx, ebx
	mov	ecx, eax
	call	@AddObject@12
$L85296:
	add	DWORD PTR -16+[ebp], 448		; 000001c0H
	inc	ebx
	add	esi, 112				; 00000070H
	cmp	ebx, 112				; 00000070H
	jl	SHORT $L85295
	add	DWORD PTR -8+[ebp], 4
	inc	edi
	cmp	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece+448
	jl	$L85292
; Line 719
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, DWORD PTR _t$[ebp]
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	edi
	pop	esi
	pop	ebx
; Line 720
	leave
	ret	0
@Theme_Barrel@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_Shrine@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_Shrine@4
_TEXT	SEGMENT
_monstrnd$ = -4
@Theme_Shrine@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 727
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 728
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 6
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 730
	call	@TFit_Shrine@4
; Line 731
	cmp	DWORD PTR _themeVar1, 1
	jne	SHORT $L85304
; Line 732
	push	DWORD PTR _themey
	mov	eax, DWORD PTR _themex
	push	9
	lea	edx, DWORD PTR [eax-1]
	pop	ecx
	call	@AddObject@12
; Line 733
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	60					; 0000003cH
	pop	ecx
	call	@AddObject@12
; Line 734
	mov	eax, DWORD PTR _themex
	push	DWORD PTR _themey
	lea	edx, DWORD PTR [eax+1]
; Line 735
	jmp	SHORT $L85711
$L85304:
; Line 736
	mov	eax, DWORD PTR _themey
	mov	edx, DWORD PTR _themex
	dec	eax
	push	eax
	push	9
	pop	ecx
	call	@AddObject@12
; Line 737
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	59					; 0000003bH
	pop	ecx
	call	@AddObject@12
; Line 738
	mov	eax, DWORD PTR _themey
	mov	edx, DWORD PTR _themex
	inc	eax
	push	eax
$L85711:
	push	9
	pop	ecx
	call	@AddObject@12
; Line 740
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, esi
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	esi
; Line 741
	leave
	ret	0
@Theme_Shrine@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_MonstPit@4
EXTRN	_ItemNoFlippy:NEAR
EXTRN	@CreateRndItem@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT @Theme_MonstPit@4
_TEXT	SEGMENT
_monstrnd$ = -4
@Theme_MonstPit@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 748
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	edi
; Line 754
	push	100					; 00000064H
	mov	ebx, ecx
	pop	edx
	xor	cl, cl
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
	call	@random@8
	inc	eax
; Line 755
	xor	edi, edi
; Line 756
	xor	edx, edx
; Line 757
	test	eax, eax
	jle	SHORT $L85715
	mov	cl, BYTE PTR _themes[ebx*8+4]
	push	esi
$L85315:
; Line 759
	mov	esi, edi
	imul	esi, 112				; 00000070H
	add	esi, edx
	cmp	BYTE PTR _dung_map[esi], cl
	jne	SHORT $L85317
	mov	esi, DWORD PTR _dPiece[esi*4]
	cmp	BYTE PTR _nSolidTable[esi], 0
	jne	SHORT $L85317
; Line 760
	dec	eax
$L85317:
; Line 762
	test	eax, eax
	jle	SHORT $L85716
; Line 765
	inc	edi
; Line 766
	cmp	edi, 112				; 00000070H
	jne	SHORT $L85315
; Line 767
	xor	edi, edi
; Line 768
	inc	edx
; Line 769
	cmp	edx, 112				; 00000070H
	jne	SHORT $L85315
; Line 770
	xor	edx, edx
; Line 758
	jmp	SHORT $L85315
$L85716:
	pop	esi
$L85715:
; Line 775
	push	1
	push	0
	push	1
	mov	ecx, edi
	call	@CreateRndItem@20
; Line 776
	call	_ItemNoFlippy
; Line 777
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, ebx
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	edi
	pop	ebx
; Line 778
	leave
	ret	0
@Theme_MonstPit@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_SkelRoom@4
EXTRN	@SpawnSkeleton@12:NEAR
EXTRN	_PreSpawnSkeleton:NEAR
; Function compile flags: /Ogsy
;	COMDAT @Theme_SkelRoom@4
_TEXT	SEGMENT
_monstrnd$ = -4
@Theme_SkelRoom@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 785
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 788
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 790
	call	@TFit_SkelRoom@4
; Line 792
	mov	esi, DWORD PTR _themey
	mov	edi, DWORD PTR _themex
; Line 793
	push	esi
	push	3
	mov	edx, edi
	pop	ecx
	call	@AddObject@12
; Line 794
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@random@8
; Line 795
	lea	ebx, DWORD PTR [esi-1]
	test	eax, eax
	push	ebx
	je	SHORT $L85327
	call	_PreSpawnSkeleton
	lea	edx, DWORD PTR [edi-1]
	mov	ecx, eax
	call	@SpawnSkeleton@12
; Line 796
	jmp	SHORT $L85328
$L85327:
; Line 797
	push	11					; 0000000bH
	lea	edx, DWORD PTR [edi-1]
	pop	ecx
	call	@AddObject@12
$L85328:
; Line 799
	push	ebx
	call	_PreSpawnSkeleton
	mov	edx, edi
	mov	ecx, eax
	call	@SpawnSkeleton@12
; Line 800
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
; Line 801
	push	ebx
	je	SHORT $L85329
	call	_PreSpawnSkeleton
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, eax
	call	@SpawnSkeleton@12
; Line 802
	jmp	SHORT $L85330
$L85329:
; Line 803
	push	13					; 0000000dH
	lea	edx, DWORD PTR [edi+1]
	pop	ecx
	call	@AddObject@12
$L85330:
; Line 805
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
; Line 806
	push	esi
	je	SHORT $L85331
	call	_PreSpawnSkeleton
	lea	edx, DWORD PTR [edi-1]
	mov	ecx, eax
	call	@SpawnSkeleton@12
; Line 807
	jmp	SHORT $L85332
$L85331:
; Line 808
	push	12					; 0000000cH
	lea	edx, DWORD PTR [edi-1]
	pop	ecx
	call	@AddObject@12
$L85332:
; Line 810
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
; Line 811
	push	esi
	je	SHORT $L85333
	call	_PreSpawnSkeleton
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, eax
	call	@SpawnSkeleton@12
; Line 812
	jmp	SHORT $L85334
$L85333:
; Line 813
	push	12					; 0000000cH
	lea	edx, DWORD PTR [edi+1]
	pop	ecx
	call	@AddObject@12
$L85334:
; Line 815
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@random@8
; Line 816
	lea	ebx, DWORD PTR [esi+1]
	test	eax, eax
	push	ebx
	je	SHORT $L85335
	call	_PreSpawnSkeleton
	lea	edx, DWORD PTR [edi-1]
	mov	ecx, eax
	call	@SpawnSkeleton@12
; Line 817
	jmp	SHORT $L85336
$L85335:
; Line 818
	push	13					; 0000000dH
	lea	edx, DWORD PTR [edi-1]
	pop	ecx
	call	@AddObject@12
$L85336:
; Line 820
	push	ebx
	call	_PreSpawnSkeleton
	mov	edx, edi
	mov	ecx, eax
	call	@SpawnSkeleton@12
; Line 821
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
; Line 822
	push	ebx
	je	SHORT $L85337
	call	_PreSpawnSkeleton
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, eax
	call	@SpawnSkeleton@12
; Line 823
	jmp	SHORT $L85338
$L85337:
; Line 824
	push	11					; 0000000bH
	lea	edx, DWORD PTR [edi+1]
	pop	ecx
	call	@AddObject@12
$L85338:
; Line 826
	mov	eax, edi
	imul	eax, 112				; 00000070H
	lea	ebx, DWORD PTR [eax+esi]
	cmp	BYTE PTR _dObject[ebx-3], 0
	jne	SHORT $L85339
; Line 827
	lea	eax, DWORD PTR [esi-2]
	mov	edx, edi
	push	eax
	push	61					; 0000003dH
	pop	ecx
	call	@AddObject@12
$L85339:
; Line 829
	cmp	BYTE PTR _dObject[ebx+3], 0
	jne	SHORT $L85340
; Line 830
	add	esi, 2
	mov	edx, edi
	push	esi
	push	61					; 0000003dH
	pop	ecx
	call	@AddObject@12
$L85340:
	pop	edi
	pop	esi
	pop	ebx
; Line 832
	leave
	ret	0
@Theme_SkelRoom@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_Treasure@4
EXTRN	_item:BYTE
EXTRN	_GetRndSeed:NEAR
EXTRN	@CreateTypeItem@28:NEAR
; Function compile flags: /Ogsy
;	COMDAT @Theme_Treasure@4
_TEXT	SEGMENT
_treasrnd$ = -4
_monstrnd$ = -12
_rv$85356 = -16
_t$ = -24
@Theme_Treasure@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 839
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _t$[ebp], ecx
; Line 842
	mov	BYTE PTR _treasrnd$[ebp], 4
	mov	BYTE PTR _treasrnd$[ebp+1], 9
	mov	BYTE PTR _treasrnd$[ebp+2], 7
	mov	BYTE PTR _treasrnd$[ebp+3], 10		; 0000000aH
; Line 843
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 8
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 7
; Line 845
	call	_GetRndSeed
	mov	cl, BYTE PTR _leveltype
; Line 846
	xor	esi, esi
	mov	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece
$L85349:
; Line 847
	mov	eax, DWORD PTR -8+[ebp]
	xor	edi, edi
	lea	ebx, DWORD PTR _dung_map[esi]
	mov	DWORD PTR -20+[ebp], eax
$L85352:
; Line 848
	mov	edx, DWORD PTR _t$[ebp]
	mov	al, BYTE PTR [ebx]
	cmp	al, BYTE PTR _themes[edx*8+4]
	jne	$L85353
	mov	eax, DWORD PTR -20+[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[eax], 0
	jne	$L85353
; Line 849
	movzx	eax, cl
	xor	cl, cl
	movsx	edx, BYTE PTR _treasrnd$[ebp+eax-1]
	call	@random@8
	mov	DWORD PTR _rv$85356[ebp], eax
; Line 851
	xor	cl, cl
	movzx	eax, BYTE PTR _leveltype
	movsx	edx, BYTE PTR _treasrnd$[ebp+eax-1]
	call	@random@8
	add	eax, eax
	jne	SHORT $L85357
; Line 852
	xor	eax, eax
	push	1
	push	eax
	push	eax
	push	11					; 0000000bH
	push	eax
	mov	edx, esi
	mov	ecx, edi
	call	@CreateTypeItem@28
; Line 853
	call	_ItemNoFlippy
$L85357:
; Line 855
	xor	eax, eax
	cmp	DWORD PTR _rv$85356[ebp], eax
	jne	SHORT $L85725
; Line 856
	push	1
	push	eax
	push	eax
	mov	edx, esi
	mov	ecx, edi
	call	@CreateRndItem@20
; Line 857
	call	_ItemNoFlippy
; Line 859
	jmp	SHORT $L85360
$L85725:
	mov	cl, BYTE PTR _leveltype
	movzx	eax, cl
	movsx	eax, BYTE PTR _treasrnd$[ebp+eax-1]
	dec	eax
	dec	eax
	cmp	DWORD PTR _rv$85356[ebp], eax
	jl	SHORT $L85353
$L85360:
; Line 860
	call	_ItemNoFlippy
; Line 861
	mov	cl, BYTE PTR _leveltype
	movzx	edx, cl
	movsx	edx, BYTE PTR _treasrnd$[ebp+edx-1]
	dec	edx
	dec	edx
	cmp	DWORD PTR _rv$85356[ebp], edx
	jl	SHORT $L85353
	cmp	cl, 1
	je	SHORT $L85353
; Line 862
	imul	eax, 368				; 00000170H
	lea	eax, DWORD PTR _item[eax+196]
	sar	DWORD PTR [eax], 1
$L85353:
	add	DWORD PTR -20+[ebp], 448		; 000001c0H
	inc	edi
	add	ebx, 112				; 00000070H
	cmp	edi, 112				; 00000070H
	jl	$L85352
	add	DWORD PTR -8+[ebp], 4
	inc	esi
	cmp	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece+448
	jl	$L85349
; Line 868
	movzx	eax, cl
	mov	ecx, DWORD PTR _t$[ebp]
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	edi
	pop	esi
	pop	ebx
; Line 869
	leave
	ret	0
@Theme_Treasure@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_Library@4
EXTRN	_object:BYTE
EXTRN	_dMonster:BYTE
; Function compile flags: /Ogsy
;	COMDAT @Theme_Library@4
_TEXT	SEGMENT
_t$ = -20
_librnd$ = -4
_monstrnd$ = -12
@Theme_Library@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 876
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _t$[ebp], ecx
; Line 880
	mov	BYTE PTR _librnd$[ebp], 1
	mov	BYTE PTR _librnd$[ebp+1], 2
	mov	BYTE PTR _librnd$[ebp+2], 2
	mov	BYTE PTR _librnd$[ebp+3], 5
; Line 881
	mov	BYTE PTR _monstrnd$[ebp], 5
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 883
	call	@TFit_Shrine@4
; Line 884
	xor	edi, edi
	inc	edi
	cmp	DWORD PTR _themeVar1, edi
	jne	SHORT $L85370
; Line 885
	push	DWORD PTR _themey
	mov	eax, DWORD PTR _themex
	push	65					; 00000041H
	lea	edx, DWORD PTR [eax-1]
	pop	ecx
	call	@AddObject@12
; Line 886
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	63					; 0000003fH
	pop	ecx
	call	@AddObject@12
; Line 887
	mov	eax, DWORD PTR _themex
	push	DWORD PTR _themey
	lea	edx, DWORD PTR [eax+1]
; Line 888
	jmp	SHORT $L85739
$L85370:
; Line 889
	mov	eax, DWORD PTR _themey
	mov	edx, DWORD PTR _themex
	dec	eax
	push	eax
	push	65					; 00000041H
	pop	ecx
	call	@AddObject@12
; Line 890
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	62					; 0000003eH
	pop	ecx
	call	@AddObject@12
; Line 891
	mov	eax, DWORD PTR _themey
	mov	edx, DWORD PTR _themex
	inc	eax
	push	eax
$L85739:
	push	65					; 00000041H
	pop	ecx
	call	@AddObject@12
; Line 894
	mov	DWORD PTR -8+[ebp], OFFSET FLAT:_dMonster+452
$L85372:
; Line 895
	mov	eax, DWORD PTR -8+[ebp]
	xor	ebx, ebx
	inc	ebx
	lea	esi, DWORD PTR _dObject[edi+112]
	mov	DWORD PTR -16+[ebp], eax
$L85375:
; Line 896
	push	-1
	mov	edx, edi
	push	DWORD PTR _t$[ebp]
	mov	ecx, ebx
	call	@CheckThemeObj3@16
	test	eax, eax
	je	SHORT $L85376
; Line 897
	mov	eax, DWORD PTR -16+[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L85376
; Line 898
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _librnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
	jne	SHORT $L85376
; Line 899
	push	edi
	push	64					; 00000040H
	mov	edx, ebx
	pop	ecx
	call	@AddObject@12
; Line 900
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _librnd$[ebp+eax-1]
	add	edx, edx
	call	@random@8
	test	eax, eax
	je	SHORT $L85376
; Line 901
	movsx	eax, BYTE PTR [esi]
	dec	eax
; Line 902
	imul	eax, 120				; 00000078H
	and	BYTE PTR _object[eax+64], 0
; Line 903
	add	DWORD PTR _object[eax+36], 2
$L85376:
	add	DWORD PTR -16+[ebp], 448		; 000001c0H
	inc	ebx
	add	esi, 112				; 00000070H
	cmp	ebx, 111				; 0000006fH
	jl	SHORT $L85375
	add	DWORD PTR -8+[ebp], 4
	inc	edi
	cmp	DWORD PTR -8+[ebp], OFFSET FLAT:_dMonster+892
	jl	$L85372
; Line 911
	push	3
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $L85383
	mov	eax, DWORD PTR _t$[ebp]
	cmp	eax, DWORD PTR _zharlib
	je	SHORT $L85382
$L85383:
; Line 912
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, DWORD PTR _t$[ebp]
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
$L85382:
; Line 914
	leave
	ret	0
@Theme_Library@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_Torture@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_Torture@4
_TEXT	SEGMENT
_xp$ = -4
_tortrnd$ = -8
_monstrnd$ = -16
@Theme_Torture@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 921
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
; Line 927
	xor	esi, esi
	push	edi
	mov	ebx, ecx
	mov	BYTE PTR _tortrnd$[ebp], 6
	mov	BYTE PTR _tortrnd$[ebp+1], 8
	mov	BYTE PTR _tortrnd$[ebp+2], 3
	mov	BYTE PTR _tortrnd$[ebp+3], 8
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 8
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
	inc	esi
	mov	DWORD PTR -12+[ebp], OFFSET FLAT:_dPiece+452
$L85391:
; Line 928
	mov	eax, DWORD PTR -12+[ebp]
	mov	DWORD PTR _xp$[ebp], 1
	lea	edi, DWORD PTR _dung_map[esi+112]
	mov	DWORD PTR -20+[ebp], eax
$L85394:
; Line 929
	mov	al, BYTE PTR [edi]
	cmp	al, BYTE PTR _themes[ebx*8+4]
	jne	SHORT $L85395
	mov	eax, DWORD PTR -20+[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[eax], 0
	jne	SHORT $L85395
; Line 930
	mov	ecx, DWORD PTR _xp$[ebp]
	push	-1
	push	ebx
	mov	edx, esi
	call	@CheckThemeObj3@16
	test	eax, eax
	je	SHORT $L85395
; Line 931
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _tortrnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
	jne	SHORT $L85395
; Line 932
	mov	edx, DWORD PTR _xp$[ebp]
	push	esi
	push	30					; 0000001eH
	pop	ecx
	call	@AddObject@12
$L85395:
	inc	DWORD PTR _xp$[ebp]
	add	DWORD PTR -20+[ebp], 448		; 000001c0H
	add	edi, 112				; 00000070H
	cmp	DWORD PTR _xp$[ebp], 111		; 0000006fH
	jl	SHORT $L85394
	add	DWORD PTR -12+[ebp], 4
	inc	esi
	cmp	DWORD PTR -12+[ebp], OFFSET FLAT:_dPiece+892
	jl	$L85391
; Line 938
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, ebx
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	edi
	pop	esi
	pop	ebx
; Line 939
	leave
	ret	0
@Theme_Torture@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_BloodFountain@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_BloodFountain@4
_TEXT	SEGMENT
_monstrnd$ = -4
@Theme_BloodFountain@4 PROC NEAR			; COMDAT
; _t$ = ecx
; Line 946
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 947
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 8
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 949
	call	@TFit_Obj5@4
; Line 950
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	66					; 00000042H
	pop	ecx
	call	@AddObject@12
; Line 951
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, esi
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	esi
; Line 952
	leave
	ret	0
@Theme_BloodFountain@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_Decap@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_Decap@4
_TEXT	SEGMENT
_xp$ = -4
_decaprnd$ = -8
_monstrnd$ = -16
@Theme_Decap@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 959
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
; Line 965
	xor	esi, esi
	push	edi
	mov	ebx, ecx
	mov	BYTE PTR _decaprnd$[ebp], 6
	mov	BYTE PTR _decaprnd$[ebp+1], 8
	mov	BYTE PTR _decaprnd$[ebp+2], 3
	mov	BYTE PTR _decaprnd$[ebp+3], 8
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 8
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
	inc	esi
	mov	DWORD PTR -12+[ebp], OFFSET FLAT:_dPiece+452
$L85411:
; Line 966
	mov	eax, DWORD PTR -12+[ebp]
	mov	DWORD PTR _xp$[ebp], 1
	lea	edi, DWORD PTR _dung_map[esi+112]
	mov	DWORD PTR -20+[ebp], eax
$L85414:
; Line 967
	mov	al, BYTE PTR [edi]
	cmp	al, BYTE PTR _themes[ebx*8+4]
	jne	SHORT $L85415
	mov	eax, DWORD PTR -20+[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[eax], 0
	jne	SHORT $L85415
; Line 968
	mov	ecx, DWORD PTR _xp$[ebp]
	push	-1
	push	ebx
	mov	edx, esi
	call	@CheckThemeObj3@16
	test	eax, eax
	je	SHORT $L85415
; Line 969
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _decaprnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
	jne	SHORT $L85415
; Line 970
	mov	edx, DWORD PTR _xp$[ebp]
	push	esi
	push	67					; 00000043H
	pop	ecx
	call	@AddObject@12
$L85415:
	inc	DWORD PTR _xp$[ebp]
	add	DWORD PTR -20+[ebp], 448		; 000001c0H
	add	edi, 112				; 00000070H
	cmp	DWORD PTR _xp$[ebp], 111		; 0000006fH
	jl	SHORT $L85414
	add	DWORD PTR -12+[ebp], 4
	inc	esi
	cmp	DWORD PTR -12+[ebp], OFFSET FLAT:_dPiece+892
	jl	$L85411
; Line 976
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, ebx
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	edi
	pop	esi
	pop	ebx
; Line 977
	leave
	ret	0
@Theme_Decap@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_PurifyingFountain@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_PurifyingFountain@4
_TEXT	SEGMENT
_monstrnd$ = -4
@Theme_PurifyingFountain@4 PROC NEAR			; COMDAT
; _t$ = ecx
; Line 984
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 985
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 987
	call	@TFit_Obj5@4
; Line 988
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	76					; 0000004cH
	pop	ecx
	call	@AddObject@12
; Line 989
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, esi
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	esi
; Line 990
	leave
	ret	0
@Theme_PurifyingFountain@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_ArmorStand@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_ArmorStand@4
_TEXT	SEGMENT
_t$ = -20
_armorrnd$ = -4
_monstrnd$ = -12
@Theme_ArmorStand@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 997
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
; Line 1003
	xor	esi, esi
	push	edi
	cmp	DWORD PTR _armorFlag, esi
	mov	DWORD PTR _t$[ebp], ecx
	mov	BYTE PTR _armorrnd$[ebp], 6
	mov	BYTE PTR _armorrnd$[ebp+1], 8
	mov	BYTE PTR _armorrnd$[ebp+2], 3
	mov	BYTE PTR _armorrnd$[ebp+3], 8
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
	je	SHORT $L85431
; Line 1004
	call	@TFit_Obj3@4
; Line 1005
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	77					; 0000004dH
	pop	ecx
	call	@AddObject@12
$L85431:
; Line 1007
	mov	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece
$L85432:
; Line 1008
	mov	eax, DWORD PTR -8+[ebp]
	xor	ebx, ebx
	lea	edi, DWORD PTR _dung_map[esi]
	mov	DWORD PTR -16+[ebp], eax
$L85435:
; Line 1009
	mov	eax, DWORD PTR _t$[ebp]
	mov	cl, BYTE PTR [edi]
	cmp	cl, BYTE PTR _themes[eax*8+4]
	jne	SHORT $L85436
	mov	ecx, DWORD PTR -16+[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	BYTE PTR _nSolidTable[ecx], 0
	jne	SHORT $L85436
; Line 1010
	push	-1
	push	eax
	mov	edx, esi
	mov	ecx, ebx
	call	@CheckThemeObj3@16
	test	eax, eax
	je	SHORT $L85436
; Line 1011
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _armorrnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
	jne	SHORT $L85436
; Line 1012
	push	esi
	push	78					; 0000004eH
	mov	edx, ebx
	pop	ecx
	call	@AddObject@12
$L85436:
	add	DWORD PTR -16+[ebp], 448		; 000001c0H
	inc	ebx
	add	edi, 112				; 00000070H
	cmp	ebx, 112				; 00000070H
	jl	SHORT $L85435
	add	DWORD PTR -8+[ebp], 4
	inc	esi
	cmp	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece+448
	jl	SHORT $L85432
; Line 1018
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, DWORD PTR _t$[ebp]
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
; Line 1019
	and	DWORD PTR _armorFlag, 0
	pop	edi
	pop	esi
	pop	ebx
; Line 1020
	leave
	ret	0
@Theme_ArmorStand@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_GoatShrine@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_GoatShrine@4
_TEXT	SEGMENT
_t$ = -4
@Theme_GoatShrine@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 1027
	push	ecx
	push	ecx
	push	esi
	mov	DWORD PTR _t$[esp+12], ecx
; Line 1031
	call	@TFit_GoatShrine@4
; Line 1032
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	79					; 0000004fH
	pop	ecx
	call	@AddObject@12
; Line 1033
	mov	edx, DWORD PTR _themey
	lea	esi, DWORD PTR [edx-1]
	lea	eax, DWORD PTR [edx+1]
	cmp	esi, eax
	jg	$L85448
	mov	ecx, DWORD PTR _themex
	push	ebx
	push	ebp
	push	edi
$L85446:
; Line 1034
	lea	edi, DWORD PTR [ecx-1]
	lea	eax, DWORD PTR [ecx+1]
	cmp	edi, eax
	jg	SHORT $L85447
	mov	eax, DWORD PTR _t$[esp+24]
	lea	ebx, DWORD PTR _themes[eax*8+4]
	mov	eax, edi
	imul	eax, 112				; 00000070H
	add	eax, esi
	lea	ebp, DWORD PTR _dung_map[eax]
	lea	eax, DWORD PTR _dPiece[eax*4]
	mov	DWORD PTR -8+[esp+24], eax
$L85449:
; Line 1035
	mov	al, BYTE PTR [ebp]
	cmp	al, BYTE PTR [ebx]
	jne	SHORT $L85450
	mov	eax, DWORD PTR -8+[esp+24]
	mov	eax, DWORD PTR [eax]
	cmp	BYTE PTR _nSolidTable[eax], 0
	jne	SHORT $L85450
	cmp	edi, ecx
	jne	SHORT $L85453
	cmp	esi, edx
	je	SHORT $L85450
$L85453:
; Line 1036
	push	1
	mov	edx, esi
	push	DWORD PTR _themeVar1
	mov	ecx, edi
	push	1
	call	@AddMonster@20
	mov	edx, DWORD PTR _themey
	mov	ecx, DWORD PTR _themex
$L85450:
	add	DWORD PTR -8+[esp+24], 448		; 000001c0H
	inc	edi
	lea	eax, DWORD PTR [ecx+1]
	add	ebp, 112				; 00000070H
	cmp	edi, eax
	jle	SHORT $L85449
$L85447:
; Line 1033
	inc	esi
	lea	eax, DWORD PTR [edx+1]
	cmp	esi, eax
	jle	$L85446
	pop	edi
	pop	ebp
	pop	ebx
$L85448:
	pop	esi
; Line 1040
	pop	ecx
	pop	ecx
	ret	0
@Theme_GoatShrine@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_Cauldron@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_Cauldron@4
_TEXT	SEGMENT
_monstrnd$ = -4
@Theme_Cauldron@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 1047
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 1048
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 1050
	call	@TFit_Obj5@4
; Line 1051
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	80					; 00000050H
	pop	ecx
	call	@AddObject@12
; Line 1052
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, esi
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	esi
; Line 1053
	leave
	ret	0
@Theme_Cauldron@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_MurkyFountain@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_MurkyFountain@4
_TEXT	SEGMENT
_monstrnd$ = -4
@Theme_MurkyFountain@4 PROC NEAR			; COMDAT
; _t$ = ecx
; Line 1060
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 1061
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 1063
	call	@TFit_Obj5@4
; Line 1064
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	81					; 00000051H
	pop	ecx
	call	@AddObject@12
; Line 1065
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, esi
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	esi
; Line 1066
	leave
	ret	0
@Theme_MurkyFountain@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_TearFountain@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_TearFountain@4
_TEXT	SEGMENT
_monstrnd$ = -4
@Theme_TearFountain@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 1073
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 1074
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 1076
	call	@TFit_Obj5@4
; Line 1077
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	82					; 00000052H
	pop	ecx
	call	@AddObject@12
; Line 1078
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, esi
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
	pop	esi
; Line 1079
	leave
	ret	0
@Theme_TearFountain@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_BrnCross@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_BrnCross@4
_TEXT	SEGMENT
_t$ = -20
_monstrnd$ = -12
_bcrossrnd$ = -4
@Theme_BrnCross@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 1086
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _t$[ebp], ecx
; Line 1089
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 8
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
; Line 1090
	mov	BYTE PTR _bcrossrnd$[ebp], 5
	mov	BYTE PTR _bcrossrnd$[ebp+1], 7
	mov	BYTE PTR _bcrossrnd$[ebp+2], 3
	mov	BYTE PTR _bcrossrnd$[ebp+3], 8
; Line 1092
	xor	esi, esi
	mov	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece
$L85473:
; Line 1093
	mov	eax, DWORD PTR -8+[ebp]
	xor	ebx, ebx
	lea	edi, DWORD PTR _dung_map[esi]
	mov	DWORD PTR -16+[ebp], eax
$L85476:
; Line 1094
	mov	eax, DWORD PTR _t$[ebp]
	mov	cl, BYTE PTR [edi]
	cmp	cl, BYTE PTR _themes[eax*8+4]
	jne	SHORT $L85477
	mov	ecx, DWORD PTR -16+[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	BYTE PTR _nSolidTable[ecx], 0
	jne	SHORT $L85477
; Line 1095
	push	-1
	push	eax
	mov	edx, esi
	mov	ecx, ebx
	call	@CheckThemeObj3@16
	test	eax, eax
	je	SHORT $L85477
; Line 1096
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _bcrossrnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
	jne	SHORT $L85477
; Line 1097
	push	esi
	push	91					; 0000005bH
	mov	edx, ebx
	pop	ecx
	call	@AddObject@12
$L85477:
	add	DWORD PTR -16+[ebp], 448		; 000001c0H
	inc	ebx
	add	edi, 112				; 00000070H
	cmp	ebx, 112				; 00000070H
	jl	SHORT $L85476
	add	DWORD PTR -8+[ebp], 4
	inc	esi
	cmp	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece+448
	jl	SHORT $L85473
; Line 1103
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, DWORD PTR _t$[ebp]
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
; Line 1104
	mov	DWORD PTR _bCrossFlag, 1
	pop	edi
	pop	esi
	pop	ebx
; Line 1105
	leave
	ret	0
@Theme_BrnCross@4 ENDP
_TEXT	ENDS
PUBLIC	@Theme_WeaponRack@4
; Function compile flags: /Ogsy
;	COMDAT @Theme_WeaponRack@4
_TEXT	SEGMENT
_t$ = -20
_weaponrnd$ = -4
_monstrnd$ = -12
@Theme_WeaponRack@4 PROC NEAR				; COMDAT
; _t$ = ecx
; Line 1112
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
; Line 1118
	xor	esi, esi
	push	edi
	cmp	DWORD PTR _weaponFlag, esi
	mov	DWORD PTR _t$[ebp], ecx
	mov	BYTE PTR _weaponrnd$[ebp], 6
	mov	BYTE PTR _weaponrnd$[ebp+1], 8
	mov	BYTE PTR _weaponrnd$[ebp+2], 5
	mov	BYTE PTR _weaponrnd$[ebp+3], 8
	mov	BYTE PTR _monstrnd$[ebp], 6
	mov	BYTE PTR _monstrnd$[ebp+1], 7
	mov	BYTE PTR _monstrnd$[ebp+2], 3
	mov	BYTE PTR _monstrnd$[ebp+3], 9
	je	SHORT $L85489
; Line 1119
	call	@TFit_Obj3@4
; Line 1120
	mov	edx, DWORD PTR _themex
	push	DWORD PTR _themey
	push	92					; 0000005cH
	pop	ecx
	call	@AddObject@12
$L85489:
; Line 1122
	mov	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece
$L85490:
; Line 1123
	mov	eax, DWORD PTR -8+[ebp]
	xor	ebx, ebx
	lea	edi, DWORD PTR _dung_map[esi]
	mov	DWORD PTR -16+[ebp], eax
$L85493:
; Line 1124
	mov	eax, DWORD PTR _t$[ebp]
	mov	cl, BYTE PTR [edi]
	cmp	cl, BYTE PTR _themes[eax*8+4]
	jne	SHORT $L85494
	mov	ecx, DWORD PTR -16+[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	BYTE PTR _nSolidTable[ecx], 0
	jne	SHORT $L85494
; Line 1125
	push	-1
	push	eax
	mov	edx, esi
	mov	ecx, ebx
	call	@CheckThemeObj3@16
	test	eax, eax
	je	SHORT $L85494
; Line 1126
	movzx	eax, BYTE PTR _leveltype
	xor	cl, cl
	movsx	edx, BYTE PTR _weaponrnd$[ebp+eax-1]
	call	@random@8
	test	eax, eax
	jne	SHORT $L85494
; Line 1127
	push	esi
	push	93					; 0000005dH
	mov	edx, ebx
	pop	ecx
	call	@AddObject@12
$L85494:
	add	DWORD PTR -16+[ebp], 448		; 000001c0H
	inc	ebx
	add	edi, 112				; 00000070H
	cmp	ebx, 112				; 00000070H
	jl	SHORT $L85493
	add	DWORD PTR -8+[ebp], 4
	inc	esi
	cmp	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece+448
	jl	SHORT $L85490
; Line 1133
	movzx	eax, BYTE PTR _leveltype
	mov	ecx, DWORD PTR _t$[ebp]
	movsx	edx, BYTE PTR _monstrnd$[ebp+eax-1]
	call	@PlaceThemeMonsts@8
; Line 1134
	and	DWORD PTR _weaponFlag, 0
	pop	edi
	pop	esi
	pop	ebx
; Line 1135
	leave
	ret	0
@Theme_WeaponRack@4 ENDP
_TEXT	ENDS
PUBLIC	_UpdateL4Trans
; Function compile flags: /Ogsy
;	COMDAT _UpdateL4Trans
_TEXT	SEGMENT
_UpdateL4Trans PROC NEAR				; COMDAT
; Line 1143
	xor	ecx, ecx
$L85502:
; Line 1144
	push	112					; 00000070H
	lea	eax, DWORD PTR _dung_map[ecx]
	pop	edx
$L85505:
; Line 1145
	cmp	BYTE PTR [eax], 0
	je	SHORT $L85506
; Line 1146
	mov	BYTE PTR [eax], 1
$L85506:
; Line 1144
	add	eax, 112				; 00000070H
	dec	edx
	jne	SHORT $L85505
	inc	ecx
	cmp	ecx, 112				; 00000070H
	jl	SHORT $L85502
; Line 1150
	ret	0
_UpdateL4Trans ENDP
_TEXT	ENDS
PUBLIC	_CreateThemeRooms
EXTRN	_InitObjFlag:DWORD
; Function compile flags: /Ogsy
;	COMDAT _CreateThemeRooms
_TEXT	SEGMENT
_CreateThemeRooms PROC NEAR				; COMDAT
; Line 1157
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	push	edi
	je	$L85536
	push	esi
; Line 1161
	xor	edi, edi
	xor	esi, esi
	cmp	DWORD PTR _numthemes, edi
	mov	DWORD PTR _InitObjFlag, 1
	jle	$L85514
$L85512:
; Line 1164
	mov	eax, DWORD PTR _themes[esi*8]
	mov	DWORD PTR _themex, edi
	cmp	eax, 16					; 00000010H
	mov	DWORD PTR _themey, edi
	ja	$L85513
	jmp	DWORD PTR $L85812[eax*4]
$L85519:
; Line 1166
	mov	ecx, esi
	call	@Theme_Barrel@4
; Line 1167
	jmp	$L85513
$L85520:
; Line 1169
	mov	ecx, esi
	call	@Theme_Shrine@4
; Line 1170
	jmp	$L85513
$L85521:
; Line 1172
	mov	ecx, esi
	call	@Theme_MonstPit@4
; Line 1173
	jmp	SHORT $L85513
$L85522:
; Line 1175
	mov	ecx, esi
	call	@Theme_SkelRoom@4
; Line 1176
	jmp	SHORT $L85513
$L85523:
; Line 1178
	mov	ecx, esi
	call	@Theme_Treasure@4
; Line 1179
	jmp	SHORT $L85513
$L85524:
; Line 1181
	mov	ecx, esi
	call	@Theme_Library@4
; Line 1182
	jmp	SHORT $L85513
$L85525:
; Line 1184
	mov	ecx, esi
	call	@Theme_Torture@4
; Line 1185
	jmp	SHORT $L85513
$L85526:
; Line 1187
	mov	ecx, esi
	call	@Theme_BloodFountain@4
; Line 1188
	jmp	SHORT $L85513
$L85527:
; Line 1190
	mov	ecx, esi
	call	@Theme_Decap@4
; Line 1191
	jmp	SHORT $L85513
$L85528:
; Line 1193
	mov	ecx, esi
	call	@Theme_PurifyingFountain@4
; Line 1194
	jmp	SHORT $L85513
$L85529:
; Line 1196
	mov	ecx, esi
	call	@Theme_ArmorStand@4
; Line 1197
	jmp	SHORT $L85513
$L85530:
; Line 1199
	mov	ecx, esi
	call	@Theme_GoatShrine@4
; Line 1200
	jmp	SHORT $L85513
$L85531:
; Line 1202
	mov	ecx, esi
	call	@Theme_Cauldron@4
; Line 1203
	jmp	SHORT $L85513
$L85532:
; Line 1205
	mov	ecx, esi
	call	@Theme_MurkyFountain@4
; Line 1206
	jmp	SHORT $L85513
$L85533:
; Line 1208
	mov	ecx, esi
	call	@Theme_TearFountain@4
; Line 1209
	jmp	SHORT $L85513
$L85534:
; Line 1211
	mov	ecx, esi
	call	@Theme_BrnCross@4
; Line 1212
	jmp	SHORT $L85513
$L85535:
; Line 1214
	mov	ecx, esi
	call	@Theme_WeaponRack@4
$L85513:
	inc	esi
	cmp	esi, DWORD PTR _numthemes
	jl	$L85512
$L85514:
; Line 1219
	cmp	BYTE PTR _leveltype, 4
	mov	DWORD PTR _InitObjFlag, edi
	pop	esi
	jne	SHORT $L85536
	cmp	DWORD PTR _themeCount, edi
	jle	SHORT $L85536
	pop	edi
; Line 1220
	jmp	_UpdateL4Trans
$L85536:
	pop	edi
; Line 1222
	ret	0
$L85812:
	DD	$L85519
	DD	$L85520
	DD	$L85521
	DD	$L85522
	DD	$L85523
	DD	$L85524
	DD	$L85525
	DD	$L85526
	DD	$L85527
	DD	$L85528
	DD	$L85529
	DD	$L85530
	DD	$L85531
	DD	$L85532
	DD	$L85533
	DD	$L85534
	DD	$L85535
_CreateThemeRooms ENDP
_TEXT	ENDS
END
