; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/msg.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@LDLI@Waiting?5for?5game?5data?4?4?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@CIOP@The?5game?5ended?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KNHE@Unable?5to?5get?5level?5data?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05OHJH@msg?31?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07IDNM@delta?31?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@KAHG@Trying?5to?5drop?5a?5floor?5item?$DP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @msg_send_drop_pkt@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @msg_send_packet@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _msg_get_next_packet
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _msg_wait_resync
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _msg_free_packets
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _msg_wait_for_turns
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _msg_process_net_packets
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _msg_pre_packet
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaExportData@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaExportItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaExportObject@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaExportMonster@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaExportJunk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @msg_comp_level@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _delta_init
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_kill_monster@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_monster_hp@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_sync_monster@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_sync_golem@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_leave_sync@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_portal_inited@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_quest_inited@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaAddItem@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DeltaSaveLevel
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DeltaLoadLevel
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmd@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdGolem@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdLoc@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdLocParam1@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdLocParam2@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdLocParam3@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdParam1@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdParam2@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdParam3@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdQuest@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdGItem@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdGItem2@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdReq2@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdExtra@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdPItem@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdChItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdDelItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdDItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdDamage@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendCmdString@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RemovePlrPortal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ParseCmd@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_DLEVEL@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaImportData@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaImportItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaImportObject@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaImportMonster@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeltaImportJunk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SYNCDATA@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_WALKXY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ADDSTR@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ADDMAG@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ADDDEX@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ADDVIT@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SBSPELL@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _msg_errorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_GOTOGETITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_REQUESTGITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @i_own_level@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_GETITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_get_item@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_GOTOAGETITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_REQUESTAGITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_AGETITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ITEMEXTRA@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_PUTITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_put_item@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @check_update_plr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SYNCPUTITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_RESPAWNITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ATTACKXY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SATTACKXY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_RATTACKXY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SPELLXYD@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SPELLXY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_TSPELLXY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_OPOBJXY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_DISARMXY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_OPOBJT@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ATTACKID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ATTACKPID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_RATTACKID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_RATTACKPID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SPELLID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SPELLPID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_TSPELLID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_TSPELLPID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_KNOCKBACK@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_RESURRECT@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_HEALOTHER@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_TALKXY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_NEWLVL@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_WARP@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_MONSTDEATH@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_KILLGOLEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_AWAKEGOLEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_MONSTDAMAGE@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_PLRDEAD@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_PLRDAMAGE@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_OPENDOOR@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_sync_object@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_CLOSEDOOR@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_OPERATEOBJ@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_PLROPOBJ@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_BREAKOBJ@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_CHANGEPLRITEMS@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_DELPLRITEMS@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_PLRLEVEL@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_DROPITEM@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SEND_PLRINFO@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ACK_PLRINFO@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_PLAYER_JOINLEVEL@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ACTIVATEPORTAL@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @delta_open_portal@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_DEACTIVATEPORTAL@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_RETOWN@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SETSTR@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SETDEX@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SETMAG@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SETVIT@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_STRING@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_STRING2@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SYNCQUEST@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_ENDSHIELD@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_CHEAT_EXPERIENCE@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_CHEAT_SPELL_LEVEL@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_DEBUG@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_NOVA@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_SETSHIELD@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @On_REMSHIELD@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_deltaload:DWORD
COMM	_gbBufferMsgs:BYTE
COMM	_pkt_counter:DWORD
_DATA	ENDS
PUBLIC	@msg_send_drop_pkt@8
PUBLIC	@msg_send_packet@12
; Function compile flags: /Ogsy
;	COMDAT @msg_send_drop_pkt@8
_TEXT	SEGMENT
_cmd$ = -8
@msg_send_drop_pkt@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _reason$ = edx
; File Source/msg.cpp
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 26
	mov	DWORD PTR _cmd$[ebp+2], edx
; Line 29
	push	6
	lea	edx, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR _cmd$[ebp], 95			; 0000005fH
	mov	BYTE PTR _cmd$[ebp+1], cl
	call	@msg_send_packet@12
; Line 30
	leave
	ret	0
@msg_send_drop_pkt@8 ENDP
_TEXT	ENDS
PUBLIC	_msg_get_next_packet
EXTRN	_memcpy:NEAR
_BSS	SEGMENT
_sgnCurrMegaPlayer DD 01H DUP (?)
_sgpCurrPkt DD	01H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT @msg_send_packet@12
_TEXT	SEGMENT
_dwSize$ = 8
_cmd$ = -2
@msg_send_packet@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _packet$ = edx
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 37
	cmp	ecx, DWORD PTR _sgnCurrMegaPlayer
	push	esi
	push	edi
	mov	edi, edx
	je	SHORT $L85011
; Line 41
	push	2
	lea	edx, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _sgnCurrMegaPlayer, ecx
	mov	BYTE PTR _cmd$[ebp], 94			; 0000005eH
	mov	BYTE PTR _cmd$[ebp+1], cl
	call	@msg_send_packet@12
$L85011:
; Line 44
	mov	eax, DWORD PTR _sgpCurrPkt
	mov	esi, DWORD PTR _dwSize$[ebp]
	cmp	DWORD PTR [eax+4], esi
	jae	SHORT $L85012
; Line 45
	call	_msg_get_next_packet
	mov	eax, DWORD PTR _sgpCurrPkt
$L85012:
; Line 48
	mov	ecx, eax
	push	esi
	sub	ecx, DWORD PTR [eax+4]
	push	edi
	add	ecx, 32008				; 00007d08H
	push	ecx
	call	_memcpy
; Line 49
	mov	eax, DWORD PTR _sgpCurrPkt
	add	esp, 12					; 0000000cH
	sub	DWORD PTR [eax+4], esi
	pop	edi
	pop	esi
; Line 50
	leave
	ret	4
@msg_send_packet@12 ENDP
_TEXT	ENDS
EXTRN	@DiabloAllocPtr@4:NEAR
_BSS	SEGMENT
_sgpMegaPkt DD	01H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT _msg_get_next_packet
_TEXT	SEGMENT
_msg_get_next_packet PROC NEAR				; COMDAT
; Line 57
	mov	ecx, 32008				; 00007d08H
	call	@DiabloAllocPtr@4
	mov	DWORD PTR _sgpCurrPkt, eax
; Line 58
	and	DWORD PTR [eax], 0
; Line 59
	mov	eax, DWORD PTR _sgpCurrPkt
	mov	DWORD PTR [eax+4], 32000		; 00007d00H
; Line 62
	mov	ecx, DWORD PTR _sgpMegaPkt
	mov	eax, OFFSET FLAT:_sgpMegaPkt
	jmp	SHORT $L86685
$L85020:
; Line 63
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax]
$L86685:
; Line 62
	test	ecx, ecx
	jne	SHORT $L85020
; Line 65
	mov	ecx, DWORD PTR _sgpCurrPkt
	mov	DWORD PTR [eax], ecx
; Line 68
	ret	0
_msg_get_next_packet ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@LDLI@Waiting?5for?5game?5data?4?4?4?$AA@ ; `string'
PUBLIC	??_C@_0P@CIOP@The?5game?5ended?$AA@		; `string'
PUBLIC	??_C@_0BJ@KNHE@Unable?5to?5get?5level?5data?$AA@ ; `string'
PUBLIC	_msg_wait_resync
PUBLIC	_msg_free_packets
PUBLIC	_msg_wait_for_turns
EXTRN	_ghMainWnd:DWORD
EXTRN	_gbGameDestroyed:BYTE
EXTRN	_UiProgressDialog@20:NEAR
EXTRN	_DrawDlg:NEAR
EXTRN	__imp__GetTickCount@0:NEAR
_BSS	SEGMENT
_sgdwOwnerWait DD 01H DUP (?)
_sgbRecvCmd DB	01H DUP (?)
	ALIGN	4

_sgbDeltaChunks DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BJ@LDLI@Waiting?5for?5game?5data?4?4?4?$AA@
_DATA	SEGMENT
??_C@_0BJ@LDLI@Waiting?5for?5game?5data?4?4?4?$AA@ DB 'Waiting for game d'
	DB	'ata...', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@CIOP@The?5game?5ended?$AA@
_DATA	SEGMENT
??_C@_0P@CIOP@The?5game?5ended?$AA@ DB 'The game ended', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KNHE@Unable?5to?5get?5level?5data?$AA@
_DATA	SEGMENT
??_C@_0BJ@KNHE@Unable?5to?5get?5level?5data?$AA@ DB 'Unable to get level '
	DB	'data', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _msg_wait_resync
_TEXT	SEGMENT
_msg_wait_resync PROC NEAR				; COMDAT
; Line 74
	call	_msg_get_next_packet
; Line 75
	and	BYTE PTR _sgbDeltaChunks, 0
; Line 76
	or	DWORD PTR _sgnCurrMegaPlayer, -1
; Line 77
	mov	BYTE PTR _sgbRecvCmd, 76		; 0000004cH
; Line 78
	mov	BYTE PTR _gbBufferMsgs, 1
; Line 79
	call	DWORD PTR __imp__GetTickCount@0
; Line 80
	push	20					; 00000014H
	push	OFFSET FLAT:_msg_wait_for_turns
	push	1
	push	OFFSET FLAT:??_C@_0BJ@LDLI@Waiting?5for?5game?5data?4?4?4?$AA@ ; `string'
	push	DWORD PTR _ghMainWnd
	mov	DWORD PTR _sgdwOwnerWait, eax
	call	_UiProgressDialog@20
; Line 81
	and	BYTE PTR _gbBufferMsgs, 0
; Line 82
	test	eax, eax
; Line 84
	je	SHORT $L86690
; Line 87
	cmp	BYTE PTR _gbGameDestroyed, 0
	je	SHORT $L85026
; Line 88
	push	OFFSET FLAT:??_C@_0P@CIOP@The?5game?5ended?$AA@ ; `string'
; Line 90
	jmp	SHORT $L86689
$L85026:
; Line 93
	cmp	BYTE PTR _sgbDeltaChunks, 21		; 00000015H
	je	SHORT $L85028
; Line 94
	push	OFFSET FLAT:??_C@_0BJ@KNHE@Unable?5to?5get?5level?5data?$AA@ ; `string'
$L86689:
	call	_DrawDlg
	pop	ecx
$L86690:
; Line 95
	call	_msg_free_packets
; Line 96
	xor	eax, eax
; Line 100
	ret	0
$L85028:
; Line 99
	xor	eax, eax
	inc	eax
; Line 100
	ret	0
_msg_wait_resync ENDP
_TEXT	ENDS
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _msg_free_packets
_TEXT	SEGMENT
_msg_free_packets PROC NEAR				; COMDAT
; Line 111
	mov	eax, DWORD PTR _sgpMegaPkt
	jmp	SHORT $L86696
$L85033:
; Line 112
	mov	ecx, DWORD PTR [eax]
; Line 114
	and	DWORD PTR _sgpMegaPkt, 0
	mov	DWORD PTR _sgpCurrPkt, ecx
; Line 115
	mov	ecx, eax
	call	@mem_free_dbg@4
; Line 116
	mov	eax, DWORD PTR _sgpCurrPkt
	mov	DWORD PTR _sgpMegaPkt, eax
$L86696:
; Line 111
	test	eax, eax
	jne	SHORT $L85033
; Line 118
	ret	0
_msg_free_packets ENDP
_TEXT	ENDS
EXTRN	_SErrGetLastError@0:NEAR
EXTRN	_SNetGetOwnerTurnsWaiting@4:NEAR
EXTRN	_gbDeltaSender:BYTE
EXTRN	_multi_process_network_packets:NEAR
EXTRN	_gdwTurnsInTransit:DWORD
EXTRN	@nthread_send_and_recv_turn@8:NEAR
EXTRN	@nthread_recv_turns@4:NEAR
EXTRN	_nthread_set_turn_upper_bit:NEAR
EXTRN	_myplr:DWORD
EXTRN	@nthread_has_500ms_passed@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _msg_wait_for_turns
_TEXT	SEGMENT
_recieved$ = -8
_turns$ = -4
_msg_wait_for_turns PROC NEAR				; COMDAT
; Line 121
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 125
	cmp	BYTE PTR _sgbDeltaChunks, 0
	jne	SHORT $L85039
; Line 126
	xor	edx, edx
	xor	ecx, ecx
	call	@nthread_send_and_recv_turn@8
; Line 127
	lea	eax, DWORD PTR _turns$[ebp]
	push	eax
	call	_SNetGetOwnerTurnsWaiting@4
	test	eax, eax
	jne	SHORT $L85040
	call	_SErrGetLastError@0
	cmp	eax, -2062548880			; 85100070H
	jne	SHORT $L85040
$L86701:
; Line 128
	push	100					; 00000064H
	jmp	$L86700
$L85040:
; Line 129
	call	DWORD PTR __imp__GetTickCount@0
	sub	eax, DWORD PTR _sgdwOwnerWait
	cmp	eax, 2000				; 000007d0H
	ja	SHORT $L85041
	mov	eax, DWORD PTR _turns$[ebp]
	cmp	eax, DWORD PTR _gdwTurnsInTransit
	jae	SHORT $L85041
; Line 130
	xor	eax, eax
; Line 151
	leave
	ret	0
$L85041:
; Line 131
	inc	BYTE PTR _sgbDeltaChunks
$L85039:
; Line 133
	call	_multi_process_network_packets
; Line 134
	xor	edx, edx
	xor	ecx, ecx
	call	@nthread_send_and_recv_turn@8
; Line 135
	xor	ecx, ecx
	call	@nthread_has_500ms_passed@4
	test	eax, eax
	je	SHORT $L85042
; Line 136
	lea	ecx, DWORD PTR _recieved$[ebp]
	call	@nthread_recv_turns@4
$L85042:
; Line 138
	cmp	BYTE PTR _gbGameDestroyed, 0
; Line 139
	jne	SHORT $L86701
; Line 140
	cmp	BYTE PTR _gbDeltaSender, 4
	jb	SHORT $L85044
; Line 143
	mov	al, BYTE PTR _myplr
	and	BYTE PTR _sgbDeltaChunks, 0
	mov	BYTE PTR _sgbRecvCmd, 76		; 0000004cH
	mov	BYTE PTR _gbDeltaSender, al
; Line 144
	call	_nthread_set_turn_upper_bit
$L85044:
; Line 146
	mov	al, BYTE PTR _sgbDeltaChunks
	cmp	al, 20					; 00000014H
	jne	SHORT $L85045
; Line 147
	mov	BYTE PTR _sgbDeltaChunks, 21		; 00000015H
; Line 148
	push	99					; 00000063H
$L86700:
	pop	eax
; Line 151
	leave
	ret	0
$L85045:
; Line 150
	movzx	eax, al
	imul	eax, 100				; 00000064H
	push	21					; 00000015H
	cdq
	pop	ecx
	idiv	ecx
; Line 151
	leave
	ret	0
_msg_wait_for_turns ENDP
_TEXT	ENDS
PUBLIC	_msg_process_net_packets
PUBLIC	_msg_pre_packet
EXTRN	_gbMaxPlayers:BYTE
; Function compile flags: /Ogsy
;	COMDAT _msg_process_net_packets
_TEXT	SEGMENT
_msg_process_net_packets PROC NEAR			; COMDAT
; Line 160
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85047
; Line 161
	mov	BYTE PTR _gbBufferMsgs, 2
; Line 162
	call	_msg_pre_packet
; Line 163
	and	BYTE PTR _gbBufferMsgs, 0
; Line 164
	jmp	_msg_free_packets
$L85047:
; Line 166
	ret	0
_msg_process_net_packets ENDP
_TEXT	ENDS
PUBLIC	@ParseCmd@8
EXTRN	@multi_player_left@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _msg_pre_packet
_TEXT	SEGMENT
_msg_pre_packet PROC NEAR				; COMDAT
; Line 171
	push	ebp
	push	edi
; Line 178
	mov	edi, DWORD PTR _sgpMegaPkt
; Line 179
	or	ebp, -1
	test	edi, edi
	je	SHORT $L85058
	push	ebx
	push	esi
$L85056:
; Line 180
	mov	ebx, 32000				; 00007d00H
; Line 181
	lea	esi, DWORD PTR [edi+8]
; Line 182
	cmp	DWORD PTR [edi+4], ebx
	je	SHORT $L85057
$L85061:
; Line 183
	mov	al, BYTE PTR [esi]
	cmp	al, 94					; 0000005eH
	jne	SHORT $L85063
; Line 184
	mov	eax, esi
; Line 185
	inc	esi
	inc	esi
; Line 187
	dec	ebx
	movzx	ebp, BYTE PTR [eax+1]
	dec	ebx
; Line 188
	jmp	SHORT $L85067
$L85063:
	cmp	al, 95					; 0000005fH
	jne	SHORT $L85065
; Line 189
	mov	eax, esi
; Line 190
	add	esi, 6
; Line 191
	sub	ebx, 6
; Line 192
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR [eax+2]
	call	@multi_player_left@8
; Line 193
	jmp	SHORT $L85067
$L85065:
; Line 194
	mov	edx, esi
	mov	ecx, ebp
	call	@ParseCmd@8
; Line 195
	add	esi, eax
; Line 196
	sub	ebx, eax
$L85067:
; Line 182
	cmp	ebx, DWORD PTR [edi+4]
	jne	SHORT $L85061
$L85057:
; Line 179
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L85056
	pop	esi
	pop	ebx
$L85058:
	pop	edi
	pop	ebp
; Line 200
	ret	0
_msg_pre_packet ENDP
_TEXT	ENDS
PUBLIC	@DeltaExportData@4
PUBLIC	@DeltaExportItem@8
PUBLIC	@DeltaExportObject@8
PUBLIC	@DeltaExportMonster@8
PUBLIC	@DeltaExportJunk@4
PUBLIC	@msg_comp_level@8
EXTRN	@dthread_send_delta@16:NEAR
_BSS	SEGMENT
	ALIGN	4

_sgLevels DB	013981H DUP (?)
	ALIGN	4

_sgbDeltaChanged DB 01H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT @DeltaExportData@4
_TEXT	SEGMENT
_pnum$ = -12
_i$ = -8
_src$ = -1
@DeltaExportData@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 208
	cmp	BYTE PTR _sgbDeltaChanged, 0
	mov	DWORD PTR _pnum$[ebp], ecx
	je	$L85079
	push	ebx
	push	esi
	push	edi
; Line 209
	mov	ecx, 4722				; 00001272H
	call	@DiabloAllocPtr@4
; Line 210
	and	DWORD PTR _i$[ebp], 0
	mov	edi, eax
	mov	esi, OFFSET FLAT:_sgLevels+2794
	lea	ebx, DWORD PTR [edi+1]
$L85081:
; Line 212
	lea	edx, DWORD PTR [esi-2794]
	mov	ecx, ebx
	call	@DeltaExportItem@8
; Line 213
	mov	edx, esi
	mov	ecx, eax
	call	@DeltaExportObject@8
; Line 214
	lea	edx, DWORD PTR [esi+127]
	mov	ecx, eax
	call	@DeltaExportMonster@8
; Line 215
	mov	edx, eax
	mov	ecx, edi
	call	@msg_comp_level@8
; Line 216
	mov	dl, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	eax
	push	edi
	add	dl, 58					; 0000003aH
	call	@dthread_send_delta@16
	inc	DWORD PTR _i$[ebp]
	add	esi, 4721				; 00001271H
	cmp	esi, OFFSET FLAT:_sgLevels+83051
	jl	SHORT $L85081
; Line 219
	mov	ecx, ebx
	call	@DeltaExportJunk@4
; Line 220
	mov	edx, eax
	mov	ecx, edi
	call	@msg_comp_level@8
; Line 221
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	dl, 75					; 0000004bH
	push	eax
	push	edi
	call	@dthread_send_delta@16
; Line 222
	mov	ecx, edi
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
	pop	ebx
$L85079:
; Line 225
	mov	ecx, DWORD PTR _pnum$[ebp]
	and	BYTE PTR _src$[ebp], 0
	lea	eax, DWORD PTR _src$[ebp]
	push	1
	push	eax
	mov	dl, 76					; 0000004cH
	call	@dthread_send_delta@16
; Line 226
	leave
	ret	0
@DeltaExportData@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DeltaExportItem@8
_TEXT	SEGMENT
@DeltaExportItem@8 PROC NEAR				; COMDAT
; _dst$ = ecx
; _src$ = edx
; Line 229
	push	ebx
	push	esi
	push	edi
; Line 232
	push	127					; 0000007fH
	mov	edi, edx
	mov	esi, ecx
	pop	ebx
$L85090:
; Line 233
	cmp	BYTE PTR [edi], 255			; 000000ffH
	jne	SHORT $L85093
; Line 234
	or	BYTE PTR [esi], 255			; 000000ffH
; Line 235
	inc	esi
; Line 236
	jmp	SHORT $L85094
$L85093:
; Line 237
	push	22					; 00000016H
	push	edi
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 238
	add	esi, 22					; 00000016H
$L85094:
; Line 240
	add	edi, 22					; 00000016H
	dec	ebx
	jne	SHORT $L85090
; Line 243
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 244
	ret	0
@DeltaExportItem@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DeltaExportObject@8
_TEXT	SEGMENT
@DeltaExportObject@8 PROC NEAR				; COMDAT
; _dst$ = ecx
; _src$ = edx
; Line 247
	push	esi
	mov	esi, ecx
; Line 248
	push	127					; 0000007fH
	push	edx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 249
	lea	eax, DWORD PTR [esi+127]
	pop	esi
; Line 250
	ret	0
@DeltaExportObject@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DeltaExportMonster@8
_TEXT	SEGMENT
@DeltaExportMonster@8 PROC NEAR				; COMDAT
; _dst$ = ecx
; _src$ = edx
; Line 253
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
; Line 256
	mov	ebx, 200				; 000000c8H
$L85110:
; Line 257
	cmp	BYTE PTR [edi], 255			; 000000ffH
	jne	SHORT $L85114
; Line 258
	or	BYTE PTR [esi], 255			; 000000ffH
; Line 259
	inc	esi
; Line 260
	jmp	SHORT $L85115
$L85114:
; Line 261
	push	9
	push	edi
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 262
	add	esi, 9
$L85115:
; Line 264
	add	edi, 9
	dec	ebx
	jne	SHORT $L85110
; Line 267
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 268
	ret	0
@DeltaExportMonster@8 ENDP
_TEXT	ENDS
EXTRN	_quests:BYTE
EXTRN	_questlist:BYTE
_BSS	SEGMENT
	ALIGN	4

_sgJunk	DB	020H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT @DeltaExportJunk@4
_TEXT	SEGMENT
@DeltaExportJunk@4 PROC NEAR				; COMDAT
; _dst$ = ecx
; Line 271
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebx, ecx
; Line 276
	mov	edi, OFFSET FLAT:_sgJunk
	mov	esi, OFFSET FLAT:_sgJunk+20
$L85124:
; Line 278
	cmp	BYTE PTR [edi], 255			; 000000ffH
	jne	SHORT $L85127
; Line 279
	or	BYTE PTR [ebx], 255			; 000000ffH
; Line 280
	inc	ebx
; Line 281
	jmp	SHORT $L85125
$L85127:
; Line 282
	push	5
	push	edi
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 283
	add	ebx, 5
$L85125:
	add	edi, 5
	cmp	edi, esi
	jl	SHORT $L85124
; Line 287
	mov	edi, OFFSET FLAT:_quests+2
	mov	ebp, OFFSET FLAT:_questlist+8
$L85129:
; Line 288
	test	BYTE PTR [ebp], 1
	je	SHORT $L85130
; Line 290
	mov	al, BYTE PTR [edi+18]
; Line 293
	push	3
	mov	BYTE PTR [esi+1], al
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR [esi], al
	mov	al, BYTE PTR [edi+13]
	push	esi
	push	ebx
	mov	BYTE PTR [esi+2], al
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 294
	add	ebx, 3
$L85130:
	add	ebp, 20					; 00000014H
	add	esi, 3
	add	edi, 24					; 00000018H
	cmp	ebp, OFFSET FLAT:_questlist+88
	jl	SHORT $L85129
	pop	edi
	pop	esi
; Line 298
	mov	eax, ebx
	pop	ebp
	pop	ebx
; Line 299
	ret	0
@DeltaExportJunk@4 ENDP
_TEXT	ENDS
EXTRN	@PkwareCompress@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @msg_comp_level@8
_TEXT	SEGMENT
@msg_comp_level@8 PROC NEAR				; COMDAT
; _buffer$ = ecx
; _end$ = edx
; Line 302
	push	esi
	mov	esi, ecx
; Line 305
	sub	edx, esi
	push	edi
	dec	edx
; Line 306
	lea	ecx, DWORD PTR [esi+1]
	mov	edi, edx
	call	@PkwareCompress@8
; Line 307
	cmp	edi, eax
	setne	cl
	mov	BYTE PTR [esi], cl
	pop	edi
; Line 309
	inc	eax
	pop	esi
; Line 310
	ret	0
@msg_comp_level@8 ENDP
_TEXT	ENDS
PUBLIC	_delta_init
EXTRN	_memset:NEAR
_BSS	SEGMENT
_sgLocals DB	06a40H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT _delta_init
_TEXT	SEGMENT
_delta_init PROC NEAR					; COMDAT
; Line 314
	and	BYTE PTR _sgbDeltaChanged, 0
	push	esi
; Line 315
	mov	esi, 255				; 000000ffH
	push	32					; 00000020H
	push	esi
	push	OFFSET FLAT:_sgJunk
	call	_memset
; Line 316
	push	80257					; 00013981H
	push	esi
	push	OFFSET FLAT:_sgLevels
	call	_memset
; Line 317
	push	27200					; 00006a40H
	push	0
	push	OFFSET FLAT:_sgLocals
	call	_memset
; Line 318
	and	DWORD PTR _deltaload, 0
	add	esp, 36					; 00000024H
	pop	esi
; Line 319
	ret	0
_delta_init ENDP
_TEXT	ENDS
PUBLIC	@delta_kill_monster@16
EXTRN	_monster:BYTE
; Function compile flags: /Ogsy
;	COMDAT @delta_kill_monster@16
_TEXT	SEGMENT
_y$ = 8
_bLevel$ = 12
@delta_kill_monster@16 PROC NEAR			; COMDAT
; _mi$ = ecx
; _x$ = dl
; Line 326
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85151
; Line 328
	movzx	eax, BYTE PTR _bLevel$[esp-4]
	imul	eax, 4721				; 00001271H
	push	esi
	lea	esi, DWORD PTR [ecx+ecx*8]
; Line 331
	imul	ecx, 228				; 000000e4H
	lea	eax, DWORD PTR _sgLevels[eax+esi+2921]
	mov	BYTE PTR _sgbDeltaChanged, 1
	mov	cl, BYTE PTR _monster[ecx+72]
	pop	esi
; Line 332
	and	DWORD PTR [eax+5], 0
	mov	BYTE PTR [eax], dl
	mov	dl, BYTE PTR _y$[esp-4]
	mov	BYTE PTR [eax+2], cl
	mov	BYTE PTR [eax+1], dl
$L85151:
; Line 334
	ret	8
@delta_kill_monster@16 ENDP
_TEXT	ENDS
PUBLIC	@delta_monster_hp@12
; Function compile flags: /Ogsy
;	COMDAT @delta_monster_hp@12
_TEXT	SEGMENT
_bLevel$ = 8
@delta_monster_hp@12 PROC NEAR				; COMDAT
; _mi$ = ecx
; _hp$ = edx
; Line 341
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85161
; Line 343
	movzx	eax, BYTE PTR _bLevel$[esp-4]
	imul	eax, 4721				; 00001271H
	lea	ecx, DWORD PTR [ecx+ecx*8]
	mov	BYTE PTR _sgbDeltaChanged, 1
	lea	eax, DWORD PTR _sgLevels[eax+ecx+2921]
; Line 344
	cmp	DWORD PTR [eax+5], edx
	jle	SHORT $L85161
; Line 345
	mov	DWORD PTR [eax+5], edx
$L85161:
; Line 347
	ret	4
@delta_monster_hp@12 ENDP
_TEXT	ENDS
PUBLIC	@delta_sync_monster@8
; Function compile flags: /Ogsy
;	COMDAT @delta_sync_monster@8
_TEXT	SEGMENT
@delta_sync_monster@8 PROC NEAR				; COMDAT
; _packet$ = ecx
; _level$ = dl
; Line 354
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85170
; Line 356
	movzx	edx, dl
	imul	edx, 4721				; 00001271H
	mov	BYTE PTR _sgbDeltaChanged, 1
	movzx	eax, BYTE PTR [ecx]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	eax, DWORD PTR _sgLevels[eax+edx+2921]
; Line 357
	cmp	DWORD PTR [eax+5], 0
	je	SHORT $L85170
; Line 358
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax], dl
; Line 359
	mov	dl, BYTE PTR [ecx+2]
; Line 360
	or	BYTE PTR [eax+4], -1
	mov	BYTE PTR [eax+1], dl
; Line 361
	mov	cl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+3], cl
$L85170:
; Line 364
	ret	0
@delta_sync_monster@8 ENDP
_TEXT	ENDS
PUBLIC	@delta_sync_golem@12
; Function compile flags: /Ogsy
;	COMDAT @delta_sync_golem@12
_TEXT	SEGMENT
_bLevel$ = 8
@delta_sync_golem@12 PROC NEAR				; COMDAT
; _pG$ = ecx
; _pnum$ = edx
; Line 371
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85179
; Line 373
	movzx	eax, BYTE PTR _bLevel$[esp-4]
	imul	eax, 4721				; 00001271H
	lea	edx, DWORD PTR [edx+edx*8]
	mov	BYTE PTR _sgbDeltaChanged, 1
	lea	eax, DWORD PTR _sgLevels[eax+edx+2921]
; Line 374
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax], dl
; Line 375
	mov	dl, BYTE PTR [ecx+2]
; Line 376
	or	BYTE PTR [eax+4], -1
	mov	BYTE PTR [eax+1], dl
; Line 377
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+3], dl
; Line 378
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+2], dl
; Line 379
	mov	ecx, DWORD PTR [ecx+5]
	mov	DWORD PTR [eax+5], ecx
$L85179:
; Line 381
	ret	4
@delta_sync_golem@12 ENDP
_TEXT	ENDS
PUBLIC	@delta_leave_sync@4
EXTRN	_glSeedTbl:BYTE
EXTRN	@encode_enemy@4:NEAR
EXTRN	_GetRndSeed:NEAR
EXTRN	_automapview:BYTE
EXTRN	_monstactive:BYTE
EXTRN	_nummonsters:DWORD
EXTRN	_currlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT @delta_leave_sync@4
_TEXT	SEGMENT
@delta_leave_sync@4 PROC NEAR				; COMDAT
; _bLevel$ = cl
; Line 389
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	ebx
	mov	bl, cl
	je	$L85188
; Line 390
	cmp	BYTE PTR _currlevel, 0
	jne	SHORT $L86759
; Line 391
	call	_GetRndSeed
; Line 393
	cmp	BYTE PTR _currlevel, 0
	mov	DWORD PTR _glSeedTbl, eax
$L86759:
	jbe	$L85188
	push	ebp
; Line 394
	xor	ebp, ebp
	cmp	DWORD PTR _nummonsters, ebp
	jle	SHORT $L85191
	push	esi
	push	edi
$L85189:
; Line 395
	mov	ecx, DWORD PTR _monstactive[ebp*4]
; Line 396
	mov	esi, ecx
	imul	esi, 228				; 000000e4H
	cmp	DWORD PTR _monster[esi+148], 0
	je	SHORT $L85190
; Line 398
	movzx	eax, bl
	imul	eax, 4721				; 00001271H
	lea	edx, DWORD PTR [ecx+ecx*8]
	mov	BYTE PTR _sgbDeltaChanged, 1
	lea	edi, DWORD PTR _sgLevels[eax+edx+2921]
; Line 399
	mov	al, BYTE PTR _monster[esi+32]
	mov	BYTE PTR [edi], al
; Line 400
	mov	al, BYTE PTR _monster[esi+36]
	mov	BYTE PTR [edi+1], al
; Line 401
	mov	al, BYTE PTR _monster[esi+72]
	mov	BYTE PTR [edi+2], al
; Line 402
	call	@encode_enemy@4
	mov	BYTE PTR [edi+3], al
; Line 403
	mov	eax, DWORD PTR _monster[esi+148]
	mov	DWORD PTR [edi+5], eax
; Line 404
	mov	al, BYTE PTR _monster[esi+160]
	mov	BYTE PTR [edi+4], al
$L85190:
	inc	ebp
	cmp	ebp, DWORD PTR _nummonsters
	jl	SHORT $L85189
	pop	edi
	pop	esi
$L85191:
; Line 407
	movzx	eax, bl
	imul	eax, 1600				; 00000640H
	push	1600					; 00000640H
	add	eax, OFFSET FLAT:_sgLocals
	push	OFFSET FLAT:_automapview
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	pop	ebp
$L85188:
	pop	ebx
; Line 410
	ret	0
@delta_leave_sync@4 ENDP
_TEXT	ENDS
PUBLIC	@delta_portal_inited@4
; Function compile flags: /Ogsy
;	COMDAT @delta_portal_inited@4
_TEXT	SEGMENT
@delta_portal_inited@4 PROC NEAR			; COMDAT
; _i$ = ecx
; Line 416
	xor	eax, eax
	cmp	BYTE PTR _sgJunk[ecx+ecx*4], 255	; 000000ffH
	sete	al
; Line 417
	ret	0
@delta_portal_inited@4 ENDP
_TEXT	ENDS
PUBLIC	@delta_quest_inited@4
; Function compile flags: /Ogsy
;	COMDAT @delta_quest_inited@4
_TEXT	SEGMENT
@delta_quest_inited@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 421
	movsx	eax, BYTE PTR _sgJunk[ecx+ecx*2+20]
	xor	ecx, ecx
	cmp	eax, 255				; 000000ffH
	setne	cl
	mov	eax, ecx
; Line 422
	ret	0
@delta_quest_inited@4 ENDP
_TEXT	ENDS
PUBLIC	@DeltaAddItem@4
EXTRN	_item:BYTE
; Function compile flags: /Ogsy
;	COMDAT @DeltaAddItem@4
_TEXT	SEGMENT
@DeltaAddItem@4 PROC NEAR				; COMDAT
; _ii$ = ecx
; Line 429
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	eax, ecx
	je	$L85212
; Line 433
	movzx	ecx, BYTE PTR _currlevel
	xor	ebp, ebp
	imul	ecx, 4721				; 00001271H
	lea	edx, DWORD PTR _sgLevels[ecx]
	mov	edi, edx
$L85205:
; Line 439
	mov	bl, BYTE PTR [edi]
	cmp	bl, 255					; 000000ffH
	je	SHORT $L85206
	mov	esi, eax
	imul	esi, 368				; 00000170H
	movzx	ecx, WORD PTR [edi+3]
	cmp	ecx, DWORD PTR _item[esi+360]
	jne	SHORT $L85206
	mov	cx, WORD PTR [edi+5]
	cmp	cx, WORD PTR _item[esi+4]
	jne	SHORT $L85206
	mov	ecx, DWORD PTR [edi+7]
	cmp	ecx, DWORD PTR _item[esi]
	jne	SHORT $L85206
	cmp	bl, 1
	je	$L85212
	test	bl, bl
	je	$L85212
$L85206:
; Line 433
	inc	ebp
	add	edi, 22					; 00000016H
	cmp	ebp, 127				; 0000007fH
	jl	SHORT $L85205
; Line 444
	xor	esi, esi
$L85210:
; Line 446
	cmp	BYTE PTR [edx], 255			; 000000ffH
	je	SHORT $L86771
	inc	esi
	add	edx, 22					; 00000016H
	cmp	esi, 127				; 0000007fH
	jl	SHORT $L85210
	jmp	SHORT $L85212
$L86771:
; Line 447
	and	BYTE PTR [edx], 0
; Line 449
	imul	eax, 368				; 00000170H
	mov	cl, BYTE PTR _item[eax+12]
	mov	BYTE PTR _sgbDeltaChanged, 1
	mov	BYTE PTR [edx+1], cl
; Line 450
	mov	cl, BYTE PTR _item[eax+16]
	mov	BYTE PTR [edx+2], cl
; Line 451
	mov	cx, WORD PTR _item[eax+360]
	mov	WORD PTR [edx+3], cx
; Line 452
	mov	cx, WORD PTR _item[eax+4]
	mov	WORD PTR [edx+5], cx
; Line 453
	mov	ecx, DWORD PTR _item[eax]
	mov	DWORD PTR [edx+7], ecx
; Line 454
	mov	cl, BYTE PTR _item[eax+56]
	mov	BYTE PTR [edx+11], cl
; Line 455
	mov	cl, BYTE PTR _item[eax+236]
	mov	BYTE PTR [edx+12], cl
; Line 456
	mov	cl, BYTE PTR _item[eax+240]
	mov	BYTE PTR [edx+13], cl
; Line 457
	mov	cl, BYTE PTR _item[eax+228]
	mov	BYTE PTR [edx+14], cl
; Line 458
	mov	cl, BYTE PTR _item[eax+232]
; Line 459
	mov	ax, WORD PTR _item[eax+196]
	mov	BYTE PTR [edx+15], cl
	mov	WORD PTR [edx+16], ax
$L85212:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 463
	ret	0
@DeltaAddItem@4 ENDP
_TEXT	ENDS
PUBLIC	_DeltaSaveLevel
EXTRN	_plr:BYTE
; Function compile flags: /Ogsy
;	COMDAT _DeltaSaveLevel
_TEXT	SEGMENT
_DeltaSaveLevel PROC NEAR				; COMDAT
; Line 470
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85216
; Line 471
	mov	eax, DWORD PTR _myplr
	xor	edx, edx
	mov	ecx, OFFSET FLAT:_plr+536
$L85217:
; Line 472
	cmp	edx, eax
	je	SHORT $L85218
; Line 473
	and	DWORD PTR [ecx], 0
$L85218:
; Line 471
	add	ecx, 21720				; 000054d8H
	inc	edx
	cmp	ecx, OFFSET FLAT:_plr+87416
	jl	SHORT $L85217
; Line 475
	mov	cl, BYTE PTR _currlevel
	imul	eax, 21720				; 000054d8H
	movzx	edx, cl
	mov	BYTE PTR _plr[eax+edx+500], 1
; Line 476
	jmp	@delta_leave_sync@4
$L85216:
; Line 478
	ret	0
_DeltaSaveLevel ENDP
_TEXT	ENDS
PUBLIC	_DeltaLoadLevel
EXTRN	_dItem:BYTE
EXTRN	@M_StartStand@8:NEAR
EXTRN	@M_ClearSquares@4:NEAR
EXTRN	@AddDead@16:NEAR
EXTRN	@M_UpdateLeader@4:NEAR
EXTRN	@SyncOpObject@12:NEAR
EXTRN	@SyncBreakObj@8:NEAR
EXTRN	@MAI_Golum@4:NEAR
EXTRN	@FindGetItem@12:NEAR
EXTRN	@CanPut@8:NEAR
EXTRN	_itemactive:BYTE
EXTRN	_itemavail:BYTE
EXTRN	_numitems:DWORD
EXTRN	@decode_enemy@8:NEAR
EXTRN	_objectactive:BYTE
EXTRN	_nobjects:DWORD
EXTRN	_object:BYTE
EXTRN	@RecreateItem@20:NEAR
EXTRN	@RecreateEar@40:NEAR
EXTRN	@RespawnItem@8:NEAR
EXTRN	@DeleteItem@8:NEAR
EXTRN	_dMonster:BYTE
EXTRN	@Obj_Trap@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DeltaLoadLevel
_TEXT	SEGMENT
_ii$ = -32
_i$ = -24
_j$ = -16
_k$ = -4
_l$ = -12
_yy$ = -28
_done$ = -8
_DeltaLoadLevel PROC NEAR				; COMDAT
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 488
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	$L85221
; Line 493
	cmp	BYTE PTR _currlevel, 0
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _deltaload, 1
	je	$L85234
; Line 494
	xor	ebx, ebx
	cmp	DWORD PTR _nummonsters, ebx
	jle	$L85237
	mov	DWORD PTR -4+[ebp], ebx
	mov	esi, OFFSET FLAT:_monster+44
$L85235:
; Line 495
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 4721				; 00001271H
	mov	ecx, DWORD PTR -4+[ebp]
	cmp	BYTE PTR _sgLevels[eax+ecx+2921], 255	; 000000ffH
	je	$L85236
; Line 496
	mov	ecx, ebx
	call	@M_ClearSquares@4
; Line 497
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 4721				; 00001271H
	mov	ecx, DWORD PTR -4+[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _sgLevels[eax+2921]
; Line 498
	movzx	edx, BYTE PTR _sgLevels[eax+2922]
; Line 505
	mov	edi, DWORD PTR _sgLevels[eax+2926]
	mov	DWORD PTR [esi-12], ecx
	cmp	edi, -1
	mov	DWORD PTR [esi-8], edx
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [esi-4], ecx
	mov	DWORD PTR [esi], edx
	je	SHORT $L85239
; Line 506
	mov	DWORD PTR [esi+104], edi
$L85239:
; Line 507
	test	edi, edi
	jne	SHORT $L85240
; Line 508
	mov	DWORD PTR [esi+4], ecx
; Line 510
	mov	ecx, ebx
	mov	DWORD PTR [esi+8], edx
	call	@M_ClearSquares@4
; Line 511
	cmp	BYTE PTR [esi+108], 27			; 0000001bH
	je	SHORT $L85244
; Line 512
	cmp	BYTE PTR [esi+144], 0
; Line 514
	mov	ecx, DWORD PTR [esi-12]
	mov	edx, DWORD PTR [esi-8]
	push	DWORD PTR [esi+28]
	jne	SHORT $L85242
	mov	eax, DWORD PTR [esi+176]
	mov	al, BYTE PTR [eax+317]
; Line 515
	jmp	SHORT $L86809
$L85242:
; Line 516
	mov	al, BYTE PTR [esi+146]
$L86809:
	push	eax
	call	@AddDead@16
$L85244:
; Line 519
	mov	ecx, ebx
	mov	DWORD PTR [esi+64], 1
	call	@M_UpdateLeader@4
; Line 520
	jmp	SHORT $L85236
$L85240:
; Line 521
	movzx	edx, BYTE PTR _sgLevels[eax+2924]
	mov	ecx, ebx
	call	@decode_enemy@8
; Line 522
	mov	eax, DWORD PTR [esi-12]
	test	eax, eax
	je	SHORT $L85249
	cmp	eax, 1
	jne	SHORT $L85248
$L85249:
	cmp	DWORD PTR [esi-8], 0
	je	SHORT $L85247
$L85248:
; Line 523
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR [esi-8]
	lea	ecx, DWORD PTR [ebx+1]
	mov	DWORD PTR _dMonster[eax*4], ecx
$L85247:
; Line 524
	cmp	esi, OFFSET FLAT:_monster+956
; Line 525
	mov	ecx, ebx
	jge	SHORT $L85250
	call	@MAI_Golum@4
; Line 526
	or	DWORD PTR [esi+112], 48			; 00000030H
; Line 527
	jmp	SHORT $L85251
$L85250:
; Line 528
	mov	edx, DWORD PTR [esi+28]
	call	@M_StartStand@8
$L85251:
; Line 530
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 4721				; 00001271H
	mov	ecx, DWORD PTR -4+[ebp]
	mov	al, BYTE PTR _sgLevels[eax+ecx+2925]
	mov	BYTE PTR [esi+116], al
$L85236:
	add	DWORD PTR -4+[ebp], 9
	inc	ebx
	add	esi, 228				; 000000e4H
	cmp	ebx, DWORD PTR _nummonsters
	jl	$L85235
$L85237:
; Line 534
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 1600				; 00000640H
	add	eax, OFFSET FLAT:_sgLocals
	push	1600					; 00000640H
	push	eax
	push	OFFSET FLAT:_automapview
	call	_memcpy
	add	esp, 12					; 0000000cH
$L85234:
; Line 537
	xor	esi, esi
	mov	DWORD PTR _i$[ebp], esi
	mov	DWORD PTR -36+[ebp], esi
$L85252:
; Line 538
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 4721				; 00001271H
	add	eax, esi
	mov	cl, BYTE PTR _sgLevels[eax]
	cmp	cl, 255					; 000000ffH
	je	$L85253
; Line 539
	cmp	cl, 1
	jne	SHORT $L85257
; Line 543
	movzx	ecx, WORD PTR _sgLevels[eax+3]
	push	DWORD PTR _sgLevels[eax+7]
	mov	dx, WORD PTR _sgLevels[eax+5]
	call	@FindGetItem@12
; Line 544
	cmp	eax, -1
	je	SHORT $L85257
; Line 545
	mov	edx, eax
	imul	edx, 368				; 00000170H
	mov	ecx, DWORD PTR _item[edx+12]
	mov	edx, DWORD PTR _item[edx+16]
	imul	ecx, 112				; 00000070H
	lea	edx, DWORD PTR _dItem[ecx+edx]
	lea	ecx, DWORD PTR [eax+1]
	movsx	edi, BYTE PTR [edx]
	cmp	edi, ecx
	jne	SHORT $L85258
; Line 546
	and	BYTE PTR [edx], 0
$L85258:
; Line 547
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, eax
	call	@DeleteItem@8
$L85257:
; Line 550
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 4721				; 00001271H
	add	eax, esi
	cmp	BYTE PTR _sgLevels[eax], 2
	jne	$L85253
; Line 552
	mov	ecx, DWORD PTR _numitems
	mov	ebx, DWORD PTR _itemavail
	shl	ecx, 2
	mov	edx, OFFSET FLAT:_itemavail+504
	mov	DWORD PTR _ii$[ebp], ebx
	sub	edx, ecx
; Line 553
	mov	DWORD PTR _itemactive[ecx], ebx
; Line 554
	mov	cx, WORD PTR _sgLevels[eax+3]
	mov	edx, DWORD PTR [edx]
	cmp	cx, 23					; 00000017H
	mov	DWORD PTR _itemavail, edx
	jne	SHORT $L85260
; Line 565
	movzx	ecx, WORD PTR _sgLevels[eax+16]
	push	DWORD PTR _sgLevels[eax+18]
	mov	dx, WORD PTR _sgLevels[eax+5]
	push	ecx
	movzx	ecx, BYTE PTR _sgLevels[eax+15]
	push	ecx
	movzx	ecx, BYTE PTR _sgLevels[eax+14]
	push	ecx
	movzx	ecx, BYTE PTR _sgLevels[eax+13]
	push	ecx
	movzx	ecx, BYTE PTR _sgLevels[eax+12]
	push	ecx
	movzx	ecx, BYTE PTR _sgLevels[eax+11]
	push	ecx
	mov	ecx, ebx
	push	DWORD PTR _sgLevels[eax+7]
	call	@RecreateEar@40
; Line 566
	jmp	$L85261
$L85260:
; Line 572
	movzx	edx, WORD PTR _sgLevels[eax+16]
	push	edx
	push	DWORD PTR _sgLevels[eax+7]
	mov	ax, WORD PTR _sgLevels[eax+5]
	movzx	edx, cx
	push	eax
	mov	ecx, ebx
	call	@RecreateItem@20
; Line 573
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 4721				; 00001271H
	add	eax, esi
	cmp	BYTE PTR _sgLevels[eax+11], 0
	je	SHORT $L85262
; Line 574
	mov	ecx, ebx
	imul	ecx, 368				; 00000170H
	mov	DWORD PTR _item[ecx+56], 1
$L85262:
; Line 575
	mov	ecx, ebx
	imul	ecx, 368				; 00000170H
	movzx	edx, BYTE PTR _sgLevels[eax+12]
	mov	DWORD PTR _item[ecx+236], edx
; Line 576
	movzx	edx, BYTE PTR _sgLevels[eax+13]
	mov	DWORD PTR _item[ecx+240], edx
; Line 577
	movzx	edx, BYTE PTR _sgLevels[eax+14]
; Line 578
	movzx	eax, BYTE PTR _sgLevels[eax+15]
	mov	DWORD PTR _item[ecx+228], edx
	mov	DWORD PTR _item[ecx+232], eax
$L85261:
; Line 580
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 4721				; 00001271H
	add	eax, esi
	movzx	esi, BYTE PTR _sgLevels[eax+1]
; Line 581
	movzx	edi, BYTE PTR _sgLevels[eax+2]
; Line 582
	mov	edx, edi
	mov	ecx, esi
	call	@CanPut@8
	test	eax, eax
	jne	SHORT $L85266
; Line 583
	and	DWORD PTR _done$[ebp], eax
	or	eax, -1
; Line 584
	mov	DWORD PTR _k$[ebp], 1
	mov	DWORD PTR -20+[ebp], eax
$L85264:
	cmp	DWORD PTR _done$[ebp], 0
	jne	SHORT $L85266
; Line 585
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L86810
$L85267:
	cmp	DWORD PTR _done$[ebp], 0
	jne	SHORT $L85265
; Line 586
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, edi
	mov	DWORD PTR _yy$[ebp], eax
; Line 587
	mov	eax, DWORD PTR -20+[ebp]
	mov	DWORD PTR _l$[ebp], eax
$L85270:
	cmp	DWORD PTR _done$[ebp], 0
	jne	SHORT $L85268
; Line 588
	mov	eax, DWORD PTR _l$[ebp]
; Line 589
	mov	edx, DWORD PTR _yy$[ebp]
	lea	ebx, DWORD PTR [eax+esi]
	mov	ecx, ebx
	call	@CanPut@8
	test	eax, eax
	je	SHORT $L85271
; Line 592
	mov	edi, DWORD PTR _yy$[ebp]
	mov	DWORD PTR _done$[ebp], 1
	mov	esi, ebx
$L85271:
	inc	DWORD PTR _l$[ebp]
	mov	ebx, DWORD PTR _ii$[ebp]
	mov	eax, DWORD PTR _l$[ebp]
	cmp	eax, DWORD PTR _k$[ebp]
	jle	SHORT $L85270
$L85268:
; Line 585
	inc	DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
$L86810:
	cmp	eax, DWORD PTR _k$[ebp]
	jle	SHORT $L85267
$L85265:
; Line 584
	mov	eax, DWORD PTR -20+[ebp]
	inc	DWORD PTR _k$[ebp]
	dec	eax
	cmp	eax, -50				; ffffffceH
	mov	DWORD PTR -20+[ebp], eax
	jg	SHORT $L85264
$L85266:
; Line 598
	mov	eax, ebx
; Line 601
	xor	edx, edx
	imul	eax, 368				; 00000170H
	mov	ecx, ebx
	mov	DWORD PTR _item[eax+12], esi
	imul	esi, 112				; 00000070H
	mov	DWORD PTR _item[eax+16], edi
	mov	al, bl
	inc	al
	mov	BYTE PTR _dItem[esi+edi], al
	call	@RespawnItem@8
; Line 602
	inc	DWORD PTR _numitems
	mov	esi, DWORD PTR -36+[ebp]
$L85253:
	inc	DWORD PTR _i$[ebp]
	add	esi, 22					; 00000016H
	cmp	esi, 2794				; 00000aeaH
	mov	DWORD PTR -36+[ebp], esi
	jl	$L85252
; Line 607
	cmp	BYTE PTR _currlevel, 0
	je	SHORT $L85286
; Line 608
	xor	esi, esi
$L85275:
; Line 609
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 4721				; 00001271H
	mov	al, BYTE PTR _sgLevels[eax+esi+2794]
	cmp	al, 43					; 0000002bH
	jb	SHORT $L85276
	cmp	al, 46					; 0000002eH
	jbe	SHORT $L85282
	cmp	al, 47					; 0000002fH
	jne	SHORT $L85276
; Line 617
	mov	edx, esi
	or	ecx, -1
	call	@SyncBreakObj@8
; Line 618
	jmp	SHORT $L85276
$L85282:
; Line 614
	movzx	edx, al
	push	esi
	or	ecx, -1
	call	@SyncOpObject@12
$L85276:
	inc	esi
	cmp	esi, 127				; 0000007fH
	jl	SHORT $L85275
; Line 622
	xor	esi, esi
	cmp	DWORD PTR _nobjects, esi
	jle	SHORT $L85286
$L85284:
; Line 623
	mov	ecx, DWORD PTR _objectactive[esi*4]
	mov	eax, ecx
	imul	eax, 120				; 00000078H
	mov	eax, DWORD PTR _object[eax]
; Line 624
	cmp	eax, 53					; 00000035H
	je	SHORT $L85288
	cmp	eax, 54					; 00000036H
	jne	SHORT $L85285
$L85288:
; Line 625
	call	@Obj_Trap@4
$L85285:
; Line 622
	inc	esi
	cmp	esi, DWORD PTR _nobjects
	jl	SHORT $L85284
$L85286:
; Line 628
	and	DWORD PTR _deltaload, 0
	pop	edi
	pop	esi
	pop	ebx
$L85221:
; Line 629
	leave
	ret	0
_DeltaLoadLevel ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmd@8
EXTRN	@NetSendLoPri@8:NEAR
EXTRN	@NetSendHiPri@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmd@8
_TEXT	SEGMENT
_cmd$ = -1
@NetSendCmd@8 PROC NEAR					; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 633
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 636
	mov	BYTE PTR _cmd$[ebp], dl
; Line 638
	mov	dl, 1
	test	ecx, ecx
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85295
	call	@NetSendHiPri@8
; Line 641
	leave
	ret	0
$L85295:
; Line 640
	call	@NetSendLoPri@8
; Line 641
	leave
	ret	0
@NetSendCmd@8 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdGolem@24
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdGolem@24
_TEXT	SEGMENT
_dir$ = 8
_menemy$ = 12
_hp$ = 16
_cl$ = 20
_cmd$ = -12
@NetSendCmdGolem@24 PROC NEAR				; COMDAT
; _mx$ = cl
; _my$ = dl
; Line 644
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 650
	mov	al, BYTE PTR _dir$[ebp]
	mov	BYTE PTR _cmd$[ebp+1], cl
	mov	BYTE PTR _cmd$[ebp+3], al
; Line 651
	mov	al, BYTE PTR _menemy$[ebp]
	mov	BYTE PTR _cmd$[ebp+4], al
; Line 652
	mov	eax, DWORD PTR _hp$[ebp]
	mov	DWORD PTR _cmd$[ebp+5], eax
; Line 653
	mov	al, BYTE PTR _cl$[ebp]
	mov	BYTE PTR _cmd$[ebp+2], dl
; Line 654
	mov	dl, 10					; 0000000aH
	lea	ecx, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR _cmd$[ebp], 90			; 0000005aH
	mov	BYTE PTR _cmd$[ebp+9], al
	call	@NetSendLoPri@8
; Line 655
	leave
	ret	16					; 00000010H
@NetSendCmdGolem@24 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdLoc@16
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdLoc@16
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_cmd$ = -4
@NetSendCmdLoc@16 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 658
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 662
	mov	al, BYTE PTR _x$[ebp]
	mov	BYTE PTR _cmd$[ebp], dl
	mov	BYTE PTR _cmd$[ebp+1], al
; Line 663
	mov	al, BYTE PTR _y$[ebp]
; Line 664
	test	ecx, ecx
	mov	BYTE PTR _cmd$[ebp+2], al
; Line 665
	mov	dl, 3
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85324
	call	@NetSendHiPri@8
; Line 666
	jmp	SHORT $L85326
$L85324:
; Line 667
	call	@NetSendLoPri@8
$L85326:
; Line 668
	leave
	ret	8
@NetSendCmdLoc@16 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdLocParam1@20
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdLocParam1@20
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_wParam1$ = 16
_cmd$ = -8
@NetSendCmdLocParam1@20 PROC NEAR			; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 671
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 675
	mov	al, BYTE PTR _x$[ebp]
	mov	BYTE PTR _cmd$[ebp], dl
	mov	BYTE PTR _cmd$[ebp+1], al
; Line 676
	mov	al, BYTE PTR _y$[ebp]
	mov	BYTE PTR _cmd$[ebp+2], al
; Line 677
	mov	ax, WORD PTR _wParam1$[ebp]
; Line 678
	test	ecx, ecx
	mov	WORD PTR _cmd$[ebp+3], ax
; Line 679
	mov	dl, 5
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85340
	call	@NetSendHiPri@8
; Line 680
	jmp	SHORT $L85342
$L85340:
; Line 681
	call	@NetSendLoPri@8
$L85342:
; Line 682
	leave
	ret	12					; 0000000cH
@NetSendCmdLocParam1@20 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdLocParam2@24
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdLocParam2@24
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_wParam1$ = 16
_wParam2$ = 20
_cmd$ = -8
@NetSendCmdLocParam2@24 PROC NEAR			; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 685
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 689
	mov	al, BYTE PTR _x$[ebp]
	mov	BYTE PTR _cmd$[ebp], dl
	mov	BYTE PTR _cmd$[ebp+1], al
; Line 690
	mov	al, BYTE PTR _y$[ebp]
	mov	BYTE PTR _cmd$[ebp+2], al
; Line 691
	mov	ax, WORD PTR _wParam1$[ebp]
	mov	WORD PTR _cmd$[ebp+3], ax
; Line 692
	mov	ax, WORD PTR _wParam2$[ebp]
; Line 693
	test	ecx, ecx
	mov	WORD PTR _cmd$[ebp+5], ax
; Line 694
	mov	dl, 7
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85358
	call	@NetSendHiPri@8
; Line 695
	jmp	SHORT $L85360
$L85358:
; Line 696
	call	@NetSendLoPri@8
$L85360:
; Line 697
	leave
	ret	16					; 00000010H
@NetSendCmdLocParam2@24 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdLocParam3@28
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdLocParam3@28
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_wParam1$ = 16
_wParam2$ = 20
_wParam3$ = 24
_cmd$ = -12
@NetSendCmdLocParam3@28 PROC NEAR			; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 700
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 704
	mov	al, BYTE PTR _x$[ebp]
	mov	BYTE PTR _cmd$[ebp], dl
	mov	BYTE PTR _cmd$[ebp+1], al
; Line 705
	mov	al, BYTE PTR _y$[ebp]
	mov	BYTE PTR _cmd$[ebp+2], al
; Line 706
	mov	ax, WORD PTR _wParam1$[ebp]
	mov	WORD PTR _cmd$[ebp+3], ax
; Line 707
	mov	ax, WORD PTR _wParam2$[ebp]
	mov	WORD PTR _cmd$[ebp+5], ax
; Line 708
	mov	ax, WORD PTR _wParam3$[ebp]
; Line 709
	test	ecx, ecx
	mov	WORD PTR _cmd$[ebp+7], ax
; Line 710
	mov	dl, 9
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85378
	call	@NetSendHiPri@8
; Line 711
	jmp	SHORT $L85380
$L85378:
; Line 712
	call	@NetSendLoPri@8
$L85380:
; Line 713
	leave
	ret	20					; 00000014H
@NetSendCmdLocParam3@28 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdParam1@12
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdParam1@12
_TEXT	SEGMENT
_wParam1$ = 8
_cmd$ = -4
@NetSendCmdParam1@12 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 716
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 720
	mov	ax, WORD PTR _wParam1$[ebp]
	mov	BYTE PTR _cmd$[ebp], dl
; Line 721
	test	ecx, ecx
	mov	WORD PTR _cmd$[ebp+1], ax
; Line 722
	mov	dl, 3
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85390
	call	@NetSendHiPri@8
; Line 723
	jmp	SHORT $L85392
$L85390:
; Line 724
	call	@NetSendLoPri@8
$L85392:
; Line 725
	leave
	ret	4
@NetSendCmdParam1@12 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdParam2@16
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdParam2@16
_TEXT	SEGMENT
_wParam1$ = 8
_wParam2$ = 12
_cmd$ = -8
@NetSendCmdParam2@16 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 728
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 732
	mov	ax, WORD PTR _wParam1$[ebp]
	mov	BYTE PTR _cmd$[ebp], dl
	mov	WORD PTR _cmd$[ebp+1], ax
; Line 733
	mov	ax, WORD PTR _wParam2$[ebp]
; Line 734
	test	ecx, ecx
	mov	WORD PTR _cmd$[ebp+3], ax
; Line 735
	mov	dl, 5
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85404
	call	@NetSendHiPri@8
; Line 736
	jmp	SHORT $L85406
$L85404:
; Line 737
	call	@NetSendLoPri@8
$L85406:
; Line 738
	leave
	ret	8
@NetSendCmdParam2@16 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdParam3@20
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdParam3@20
_TEXT	SEGMENT
_wParam1$ = 8
_wParam2$ = 12
_wParam3$ = 16
_cmd$ = -8
@NetSendCmdParam3@20 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 741
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 745
	mov	ax, WORD PTR _wParam1$[ebp]
	mov	BYTE PTR _cmd$[ebp], dl
	mov	WORD PTR _cmd$[ebp+1], ax
; Line 746
	mov	ax, WORD PTR _wParam2$[ebp]
	mov	WORD PTR _cmd$[ebp+3], ax
; Line 747
	mov	ax, WORD PTR _wParam3$[ebp]
; Line 748
	test	ecx, ecx
	mov	WORD PTR _cmd$[ebp+5], ax
; Line 749
	mov	dl, 7
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85420
	call	@NetSendHiPri@8
; Line 750
	jmp	SHORT $L85422
$L85420:
; Line 751
	call	@NetSendLoPri@8
$L85422:
; Line 752
	leave
	ret	12					; 0000000cH
@NetSendCmdParam3@20 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdQuest@8
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdQuest@8
_TEXT	SEGMENT
_cmd$ = -8
@NetSendCmdQuest@8 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _q$ = dl
; Line 755
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 760
	movzx	eax, dl
	mov	BYTE PTR _cmd$[ebp+1], dl
	mov	BYTE PTR _cmd$[ebp], 88			; 00000058H
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 3
; Line 763
	test	ecx, ecx
	mov	dl, BYTE PTR _quests[eax+2]
; Line 764
	lea	ecx, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR _cmd$[ebp+2], dl
	mov	dl, BYTE PTR _quests[eax+20]
	mov	al, BYTE PTR _quests[eax+15]
	mov	BYTE PTR _cmd$[ebp+3], dl
	mov	BYTE PTR _cmd$[ebp+4], al
	mov	dl, 5
	je	SHORT $L85430
	call	@NetSendHiPri@8
; Line 767
	leave
	ret	0
$L85430:
; Line 766
	call	@NetSendLoPri@8
; Line 767
	leave
	ret	0
@NetSendCmdQuest@8 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdGItem@20
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdGItem@20
_TEXT	SEGMENT
_mast$ = 8
_pnum$ = 12
_ii$ = 16
_cmd$ = -32
@NetSendCmdGItem@20 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 770
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 774
	mov	al, BYTE PTR _pnum$[ebp]
	mov	BYTE PTR _cmd$[ebp], dl
	mov	BYTE PTR _cmd$[ebp+2], al
; Line 775
	mov	al, BYTE PTR _mast$[ebp]
	mov	BYTE PTR _cmd$[ebp+1], al
; Line 776
	mov	al, BYTE PTR _currlevel
	mov	BYTE PTR _cmd$[ebp+4], al
; Line 777
	mov	al, BYTE PTR _ii$[ebp]
	mov	BYTE PTR _cmd$[ebp+3], al
; Line 778
	and	DWORD PTR _cmd$[ebp+26], 0
; Line 779
	movzx	eax, al
	imul	eax, 368				; 00000170H
	push	esi
	mov	dl, BYTE PTR _item[eax+12]
	mov	BYTE PTR _cmd$[ebp+5], dl
; Line 780
	mov	dl, BYTE PTR _item[eax+16]
	mov	BYTE PTR _cmd$[ebp+6], dl
; Line 781
	lea	edx, DWORD PTR _item[eax+360]
	mov	si, WORD PTR [edx]
; Line 783
	cmp	DWORD PTR [edx], 23			; 00000017H
	mov	WORD PTR _cmd$[ebp+7], si
	jne	$L85446
; Line 784
	movsx	si, BYTE PTR _item[eax+69]
	xor	edx, edx
	push	ebx
	mov	dh, BYTE PTR _item[eax+68]
; Line 791
	xor	ebx, ebx
	or	edx, esi
	mov	bh, BYTE PTR _item[eax+79]
	movsx	esi, BYTE PTR _item[eax+71]
	mov	WORD PTR _cmd$[ebp+9], dx
	movsx	edx, BYTE PTR _item[eax+70]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _item[eax+72]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _item[eax+73]
	shl	edx, 8
	or	edx, esi
	mov	DWORD PTR _cmd$[ebp+11], edx
	mov	dl, BYTE PTR _item[eax+74]
	mov	BYTE PTR _cmd$[ebp+15], dl
	mov	dl, BYTE PTR _item[eax+75]
	mov	BYTE PTR _cmd$[ebp+16], dl
	mov	dl, BYTE PTR _item[eax+76]
	mov	BYTE PTR _cmd$[ebp+17], dl
	mov	dl, BYTE PTR _item[eax+77]
	mov	BYTE PTR _cmd$[ebp+18], dl
	mov	dl, BYTE PTR _item[eax+78]
	mov	BYTE PTR _cmd$[ebp+19], dl
	mov	dx, WORD PTR _item[eax+192]
	sub	dx, 19					; 00000013H
	shl	edx, 6
	or	edx, ebx
	pop	ebx
	or	dx, WORD PTR _item[eax+196]
; Line 792
	movsx	esi, BYTE PTR _item[eax+81]
	mov	WORD PTR _cmd$[ebp+20], dx
	movsx	edx, BYTE PTR _item[eax+80]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _item[eax+82]
	movsx	eax, BYTE PTR _item[eax+83]
	shl	edx, 8
	or	edx, esi
	shl	edx, 8
	or	edx, eax
	mov	DWORD PTR _cmd$[ebp+22], edx
; Line 793
	jmp	SHORT $L85447
$L85446:
; Line 794
	mov	dx, WORD PTR _item[eax+4]
	mov	WORD PTR _cmd$[ebp+9], dx
; Line 795
	mov	edx, DWORD PTR _item[eax]
	mov	DWORD PTR _cmd$[ebp+11], edx
; Line 796
	mov	dl, BYTE PTR _item[eax+56]
	mov	BYTE PTR _cmd$[ebp+15], dl
; Line 797
	mov	dl, BYTE PTR _item[eax+236]
	mov	BYTE PTR _cmd$[ebp+16], dl
; Line 798
	mov	dl, BYTE PTR _item[eax+240]
	mov	BYTE PTR _cmd$[ebp+17], dl
; Line 799
	mov	dl, BYTE PTR _item[eax+228]
	mov	BYTE PTR _cmd$[ebp+18], dl
; Line 800
	mov	dl, BYTE PTR _item[eax+232]
; Line 801
	mov	ax, WORD PTR _item[eax+196]
	mov	BYTE PTR _cmd$[ebp+19], dl
	mov	WORD PTR _cmd$[ebp+20], ax
$L85447:
; Line 804
	test	ecx, ecx
	pop	esi
; Line 805
	mov	dl, 30					; 0000001eH
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85448
	call	@NetSendHiPri@8
; Line 806
	jmp	SHORT $L85450
$L85448:
; Line 807
	call	@NetSendLoPri@8
$L85450:
; Line 808
	leave
	ret	12					; 0000000cH
@NetSendCmdGItem@20 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdGItem2@20
EXTRN	@multi_msg_add@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdGItem2@20
_TEXT	SEGMENT
_mast$ = 8
_pnum$ = 12
_p$ = 16
_cmd$ = -32
@NetSendCmdGItem2@20 PROC NEAR				; COMDAT
; _usonly$ = ecx
; _bCmd$ = dl
; Line 811
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
; Line 815
	push	30					; 0000001eH
	lea	eax, DWORD PTR _cmd$[ebp]
	push	DWORD PTR _p$[ebp]
	mov	bl, dl
	mov	esi, ecx
	push	eax
	call	_memcpy
; Line 816
	mov	al, BYTE PTR _pnum$[ebp]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _cmd$[ebp+2], al
; Line 818
	mov	al, BYTE PTR _mast$[ebp]
; Line 820
	test	esi, esi
	mov	BYTE PTR _cmd$[ebp], bl
	pop	esi
	mov	BYTE PTR _cmd$[ebp+1], al
	pop	ebx
	jne	SHORT $L85465
; Line 821
	and	DWORD PTR _cmd$[ebp+26], 0
; Line 822
	mov	dl, 30					; 0000001eH
	lea	ecx, DWORD PTR _cmd$[ebp]
	call	@NetSendHiPri@8
; Line 823
	jmp	SHORT $L85462
$L85465:
; Line 826
	call	DWORD PTR __imp__GetTickCount@0
; Line 827
	cmp	DWORD PTR _cmd$[ebp+26], 0
	jne	SHORT $L85467
; Line 828
	mov	DWORD PTR _cmd$[ebp+26], eax
; Line 829
	jmp	SHORT $L85469
$L85467:
	sub	eax, DWORD PTR _cmd$[ebp+26]
	cmp	eax, 5000				; 00001388H
	jg	SHORT $L85462
$L85469:
; Line 833
	mov	dl, 30					; 0000001eH
	lea	ecx, DWORD PTR _cmd$[ebp]
	call	@multi_msg_add@8
$L85462:
; Line 834
	leave
	ret	12					; 0000000cH
@NetSendCmdGItem2@20 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdReq2@16
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdReq2@16
_TEXT	SEGMENT
_bCmd$ = -4
_pnum$ = 8
_p$ = 12
_cmd$ = -36
@NetSendCmdReq2@16 PROC NEAR				; COMDAT
; _bCmd$ = cl
; _mast$ = dl
; Line 837
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
; Line 841
	push	30					; 0000001eH
	push	DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR _cmd$[ebp]
	mov	bl, dl
	mov	BYTE PTR _bCmd$[ebp], cl
	push	eax
	call	_memcpy
; Line 842
	mov	al, BYTE PTR _bCmd$[ebp]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _cmd$[ebp], al
; Line 843
	mov	al, BYTE PTR _pnum$[ebp]
	mov	BYTE PTR _cmd$[ebp+2], al
; Line 844
	mov	BYTE PTR _cmd$[ebp+1], bl
; Line 846
	call	DWORD PTR __imp__GetTickCount@0
; Line 847
	cmp	DWORD PTR _cmd$[ebp+26], 0
	pop	ebx
	jne	SHORT $L85482
; Line 848
	mov	DWORD PTR _cmd$[ebp+26], eax
$L85484:
; Line 853
	mov	dl, 30					; 0000001eH
	lea	ecx, DWORD PTR _cmd$[ebp]
	call	@multi_msg_add@8
; Line 855
	xor	eax, eax
	inc	eax
$L85479:
; Line 856
	leave
	ret	8
$L85482:
; Line 849
	sub	eax, DWORD PTR _cmd$[ebp+26]
	cmp	eax, 5000				; 00001388H
	jle	SHORT $L85484
; Line 850
	xor	eax, eax
	jmp	SHORT $L85479
@NetSendCmdReq2@16 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdExtra@4
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdExtra@4
_TEXT	SEGMENT
_cmd$ = -32
@NetSendCmdExtra@4 PROC NEAR				; COMDAT
; _p$ = ecx
; Line 859
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 862
	push	30					; 0000001eH
	lea	eax, DWORD PTR _cmd$[ebp]
	push	ecx
	push	eax
	call	_memcpy
; Line 863
	and	DWORD PTR _cmd$[ebp+26], 0
	add	esp, 12					; 0000000cH
; Line 865
	mov	dl, 30					; 0000001eH
	lea	ecx, DWORD PTR _cmd$[ebp]
	mov	BYTE PTR _cmd$[ebp], 85			; 00000055H
	call	@NetSendHiPri@8
; Line 866
	leave
	ret	0
@NetSendCmdExtra@4 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdPItem@16
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdPItem@16
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_cmd$ = -24
@NetSendCmdPItem@16 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _bCmd$ = dl
; Line 869
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 873
	mov	al, BYTE PTR _x$[ebp]
	mov	BYTE PTR _cmd$[ebp], dl
	mov	BYTE PTR _cmd$[ebp+1], al
; Line 874
	mov	al, BYTE PTR _y$[ebp]
	mov	BYTE PTR _cmd$[ebp+2], al
; Line 875
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	push	esi
	lea	edx, DWORD PTR _plr[eax+21536]
	mov	si, WORD PTR [edx]
; Line 877
	cmp	DWORD PTR [edx], 23			; 00000017H
	mov	WORD PTR _cmd$[ebp+3], si
	jne	$L85501
; Line 878
	movsx	si, BYTE PTR _plr[eax+21245]
	xor	edx, edx
	push	ebx
	mov	dh, BYTE PTR _plr[eax+21244]
; Line 885
	xor	ebx, ebx
	or	edx, esi
	mov	bh, BYTE PTR _plr[eax+21255]
	movsx	esi, BYTE PTR _plr[eax+21247]
	mov	WORD PTR _cmd$[ebp+5], dx
	movsx	edx, BYTE PTR _plr[eax+21246]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _plr[eax+21248]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _plr[eax+21249]
	shl	edx, 8
	or	edx, esi
	mov	DWORD PTR _cmd$[ebp+7], edx
	mov	dl, BYTE PTR _plr[eax+21250]
	mov	BYTE PTR _cmd$[ebp+11], dl
	mov	dl, BYTE PTR _plr[eax+21251]
	mov	BYTE PTR _cmd$[ebp+12], dl
	mov	dl, BYTE PTR _plr[eax+21252]
	mov	BYTE PTR _cmd$[ebp+13], dl
	mov	dl, BYTE PTR _plr[eax+21253]
	mov	BYTE PTR _cmd$[ebp+14], dl
	mov	dl, BYTE PTR _plr[eax+21254]
	mov	BYTE PTR _cmd$[ebp+15], dl
	mov	dx, WORD PTR _plr[eax+21368]
	sub	dx, 19					; 00000013H
	shl	edx, 6
	or	edx, ebx
	pop	ebx
	or	dx, WORD PTR _plr[eax+21372]
; Line 886
	movsx	esi, BYTE PTR _plr[eax+21257]
	mov	WORD PTR _cmd$[ebp+16], dx
	movsx	edx, BYTE PTR _plr[eax+21256]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _plr[eax+21258]
	movsx	eax, BYTE PTR _plr[eax+21259]
	shl	edx, 8
	or	edx, esi
	shl	edx, 8
	or	edx, eax
	mov	DWORD PTR _cmd$[ebp+18], edx
; Line 887
	jmp	SHORT $L85502
$L85501:
; Line 888
	mov	dx, WORD PTR _plr[eax+21180]
	mov	WORD PTR _cmd$[ebp+5], dx
; Line 889
	mov	edx, DWORD PTR _plr[eax+21176]
	mov	DWORD PTR _cmd$[ebp+7], edx
; Line 890
	mov	dl, BYTE PTR _plr[eax+21232]
	mov	BYTE PTR _cmd$[ebp+11], dl
; Line 891
	mov	dl, BYTE PTR _plr[eax+21412]
	mov	BYTE PTR _cmd$[ebp+12], dl
; Line 892
	mov	dl, BYTE PTR _plr[eax+21416]
	mov	BYTE PTR _cmd$[ebp+13], dl
; Line 893
	mov	dl, BYTE PTR _plr[eax+21404]
	mov	BYTE PTR _cmd$[ebp+14], dl
; Line 894
	mov	dl, BYTE PTR _plr[eax+21408]
; Line 895
	mov	ax, WORD PTR _plr[eax+21372]
	mov	BYTE PTR _cmd$[ebp+15], dl
	mov	WORD PTR _cmd$[ebp+16], ax
$L85502:
; Line 898
	test	ecx, ecx
	pop	esi
; Line 899
	mov	dl, 22					; 00000016H
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85503
	call	@NetSendHiPri@8
; Line 900
	jmp	SHORT $L85505
$L85503:
; Line 901
	call	@NetSendLoPri@8
$L85505:
; Line 902
	leave
	ret	8
@NetSendCmdPItem@16 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdChItem@8
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdChItem@8
_TEXT	SEGMENT
_cmd$ = -12
@NetSendCmdChItem@8 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _bLoc$ = dl
; Line 905
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 910
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _cmd$[ebp+1], dl
	imul	eax, 21720				; 000054d8H
; Line 915
	test	ecx, ecx
	mov	dx, WORD PTR _plr[eax+21536]
	mov	BYTE PTR _cmd$[ebp], 48			; 00000030H
	mov	WORD PTR _cmd$[ebp+2], dx
	mov	dx, WORD PTR _plr[eax+21180]
	mov	WORD PTR _cmd$[ebp+4], dx
	mov	edx, DWORD PTR _plr[eax+21176]
	mov	al, BYTE PTR _plr[eax+21232]
	mov	DWORD PTR _cmd$[ebp+6], edx
	mov	BYTE PTR _cmd$[ebp+10], al
; Line 916
	mov	dl, 11					; 0000000bH
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85513
	call	@NetSendHiPri@8
; Line 919
	leave
	ret	0
$L85513:
; Line 918
	call	@NetSendLoPri@8
; Line 919
	leave
	ret	0
@NetSendCmdChItem@8 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdDelItem@8
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdDelItem@8
_TEXT	SEGMENT
_cmd$ = -2
@NetSendCmdDelItem@8 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _bLoc$ = dl
; Line 922
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 925
	mov	BYTE PTR _cmd$[ebp+1], dl
; Line 926
	mov	BYTE PTR _cmd$[ebp], 49			; 00000031H
; Line 927
	test	ecx, ecx
; Line 928
	mov	dl, 2
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85523
	call	@NetSendHiPri@8
; Line 931
	leave
	ret	0
$L85523:
; Line 930
	call	@NetSendLoPri@8
; Line 931
	leave
	ret	0
@NetSendCmdDelItem@8 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdDItem@8
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdDItem@8
_TEXT	SEGMENT
_cmd$ = -24
@NetSendCmdDItem@8 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _ii$ = edx
; Line 934
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, edx
	push	esi
; Line 938
	imul	eax, 368				; 00000170H
	mov	BYTE PTR _cmd$[ebp], 52			; 00000034H
	mov	dl, BYTE PTR _item[eax+12]
	mov	BYTE PTR _cmd$[ebp+1], dl
; Line 939
	mov	dl, BYTE PTR _item[eax+16]
	mov	BYTE PTR _cmd$[ebp+2], dl
; Line 940
	lea	edx, DWORD PTR _item[eax+360]
	mov	si, WORD PTR [edx]
; Line 942
	cmp	DWORD PTR [edx], 23			; 00000017H
	mov	WORD PTR _cmd$[ebp+3], si
	jne	$L85533
; Line 943
	movsx	si, BYTE PTR _item[eax+69]
	xor	edx, edx
	push	ebx
	mov	dh, BYTE PTR _item[eax+68]
; Line 950
	xor	ebx, ebx
	or	edx, esi
	mov	bh, BYTE PTR _item[eax+79]
	movsx	esi, BYTE PTR _item[eax+71]
	mov	WORD PTR _cmd$[ebp+5], dx
	movsx	edx, BYTE PTR _item[eax+70]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _item[eax+72]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _item[eax+73]
	shl	edx, 8
	or	edx, esi
	mov	DWORD PTR _cmd$[ebp+7], edx
	mov	dl, BYTE PTR _item[eax+74]
	mov	BYTE PTR _cmd$[ebp+11], dl
	mov	dl, BYTE PTR _item[eax+75]
	mov	BYTE PTR _cmd$[ebp+12], dl
	mov	dl, BYTE PTR _item[eax+76]
	mov	BYTE PTR _cmd$[ebp+13], dl
	mov	dl, BYTE PTR _item[eax+77]
	mov	BYTE PTR _cmd$[ebp+14], dl
	mov	dl, BYTE PTR _item[eax+78]
	mov	BYTE PTR _cmd$[ebp+15], dl
	mov	dx, WORD PTR _item[eax+192]
	sub	dx, 19					; 00000013H
	shl	edx, 6
	or	edx, ebx
	pop	ebx
	or	dx, WORD PTR _item[eax+196]
; Line 951
	movsx	esi, BYTE PTR _item[eax+81]
	mov	WORD PTR _cmd$[ebp+16], dx
	movsx	edx, BYTE PTR _item[eax+80]
	shl	edx, 8
	or	edx, esi
	movsx	esi, BYTE PTR _item[eax+82]
	movsx	eax, BYTE PTR _item[eax+83]
	shl	edx, 8
	or	edx, esi
	shl	edx, 8
	or	edx, eax
	mov	DWORD PTR _cmd$[ebp+18], edx
; Line 952
	jmp	SHORT $L85534
$L85533:
; Line 953
	mov	dx, WORD PTR _item[eax+4]
	mov	WORD PTR _cmd$[ebp+5], dx
; Line 954
	mov	edx, DWORD PTR _item[eax]
	mov	DWORD PTR _cmd$[ebp+7], edx
; Line 955
	mov	dl, BYTE PTR _item[eax+56]
	mov	BYTE PTR _cmd$[ebp+11], dl
; Line 956
	mov	dl, BYTE PTR _item[eax+236]
	mov	BYTE PTR _cmd$[ebp+12], dl
; Line 957
	mov	dl, BYTE PTR _item[eax+240]
	mov	BYTE PTR _cmd$[ebp+13], dl
; Line 958
	mov	dl, BYTE PTR _item[eax+228]
	mov	BYTE PTR _cmd$[ebp+14], dl
; Line 959
	mov	dl, BYTE PTR _item[eax+232]
; Line 960
	mov	ax, WORD PTR _item[eax+196]
	mov	BYTE PTR _cmd$[ebp+15], dl
	mov	WORD PTR _cmd$[ebp+16], ax
$L85534:
; Line 963
	test	ecx, ecx
	pop	esi
; Line 964
	mov	dl, 22					; 00000016H
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85535
	call	@NetSendHiPri@8
; Line 967
	leave
	ret	0
$L85535:
; Line 966
	call	@NetSendLoPri@8
; Line 967
	leave
	ret	0
@NetSendCmdDItem@8 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdDamage@12
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdDamage@12
_TEXT	SEGMENT
_dwDam$ = 8
_cmd$ = -8
@NetSendCmdDamage@12 PROC NEAR				; COMDAT
; _bHiPri$ = ecx
; _bPlr$ = dl
; Line 970
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 975
	mov	eax, DWORD PTR _dwDam$[ebp]
	mov	BYTE PTR _cmd$[ebp+1], dl
; Line 976
	test	ecx, ecx
	mov	BYTE PTR _cmd$[ebp], 50			; 00000032H
	mov	DWORD PTR _cmd$[ebp+2], eax
; Line 977
	mov	dl, 6
	lea	ecx, DWORD PTR _cmd$[ebp]
	je	SHORT $L85547
	call	@NetSendHiPri@8
; Line 978
	jmp	SHORT $L85549
$L85547:
; Line 979
	call	@NetSendLoPri@8
$L85549:
; Line 980
	leave
	ret	4
@NetSendCmdDamage@12 ENDP
_TEXT	ENDS
PUBLIC	@NetSendCmdString@8
EXTRN	@multi_send_msg_packet@12:NEAR
EXTRN	_strcpy:NEAR
EXTRN	_strlen:NEAR
; Function compile flags: /Ogsy
;	COMDAT @NetSendCmdString@8
_TEXT	SEGMENT
_cmd$ = -84
@NetSendCmdString@8 PROC NEAR				; COMDAT
; _pmask$ = ecx
; _pszStr$ = edx
; Line 983
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	mov	esi, edx
	push	edi
; Line 988
	push	esi
	mov	edi, ecx
	mov	BYTE PTR _cmd$[ebp], 78			; 0000004eH
	call	_strlen
	mov	ebx, eax
; Line 989
	lea	eax, DWORD PTR _cmd$[ebp+1]
	push	esi
	push	eax
	call	_strcpy
	add	esp, 12					; 0000000cH
; Line 990
	add	bl, 2
	lea	edx, DWORD PTR _cmd$[ebp]
	mov	ecx, edi
	push	ebx
	call	@multi_send_msg_packet@12
	pop	edi
	pop	esi
	pop	ebx
; Line 991
	leave
	ret	0
@NetSendCmdString@8 ENDP
_TEXT	ENDS
PUBLIC	@RemovePlrPortal@4
; Function compile flags: /Ogsy
;	COMDAT @RemovePlrPortal@4
_TEXT	SEGMENT
@RemovePlrPortal@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 995
	push	5
	lea	eax, DWORD PTR _sgJunk[ecx+ecx*4]
	push	255					; 000000ffH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 996
	mov	BYTE PTR _sgbDeltaChanged, 1
; Line 997
	ret	0
@RemovePlrPortal@4 ENDP
_TEXT	ENDS
PUBLIC	@On_SYNCDATA@8
PUBLIC	@On_WALKXY@8
PUBLIC	@On_ADDSTR@8
PUBLIC	@On_ADDMAG@8
PUBLIC	@On_ADDDEX@8
PUBLIC	@On_ADDVIT@8
PUBLIC	@On_SBSPELL@8
PUBLIC	@On_GOTOGETITEM@8
PUBLIC	@On_REQUESTGITEM@8
PUBLIC	@On_GETITEM@8
PUBLIC	@On_GOTOAGETITEM@8
PUBLIC	@On_REQUESTAGITEM@8
PUBLIC	@On_AGETITEM@8
PUBLIC	@On_ITEMEXTRA@8
PUBLIC	@On_PUTITEM@8
PUBLIC	@On_SYNCPUTITEM@8
PUBLIC	@On_RESPAWNITEM@8
PUBLIC	@On_ATTACKXY@8
PUBLIC	@On_SATTACKXY@8
PUBLIC	@On_RATTACKXY@8
PUBLIC	@On_SPELLXYD@8
PUBLIC	@On_SPELLXY@8
PUBLIC	@On_TSPELLXY@8
PUBLIC	@On_OPOBJXY@8
PUBLIC	@On_DISARMXY@8
PUBLIC	@On_OPOBJT@8
PUBLIC	@On_ATTACKID@8
PUBLIC	@On_ATTACKPID@8
PUBLIC	@On_RATTACKID@8
PUBLIC	@On_RATTACKPID@8
PUBLIC	@On_SPELLID@8
PUBLIC	@On_SPELLPID@8
PUBLIC	@On_TSPELLID@8
PUBLIC	@On_TSPELLPID@8
PUBLIC	@On_KNOCKBACK@8
PUBLIC	@On_RESURRECT@8
PUBLIC	@On_HEALOTHER@8
PUBLIC	@On_TALKXY@8
PUBLIC	@On_NEWLVL@8
PUBLIC	@On_WARP@8
PUBLIC	@On_MONSTDEATH@8
PUBLIC	@On_KILLGOLEM@8
PUBLIC	@On_AWAKEGOLEM@8
PUBLIC	@On_MONSTDAMAGE@8
PUBLIC	@On_PLRDEAD@8
PUBLIC	@On_PLRDAMAGE@8
PUBLIC	@On_OPENDOOR@8
PUBLIC	@On_CLOSEDOOR@8
PUBLIC	@On_OPERATEOBJ@8
PUBLIC	@On_PLROPOBJ@8
PUBLIC	@On_BREAKOBJ@8
PUBLIC	@On_CHANGEPLRITEMS@8
PUBLIC	@On_DELPLRITEMS@8
PUBLIC	@On_PLRLEVEL@8
PUBLIC	@On_DROPITEM@8
PUBLIC	@On_SEND_PLRINFO@8
PUBLIC	@On_ACK_PLRINFO@8
PUBLIC	@On_PLAYER_JOINLEVEL@8
PUBLIC	@On_ACTIVATEPORTAL@8
PUBLIC	@On_DEACTIVATEPORTAL@8
PUBLIC	@On_RETOWN@8
PUBLIC	@On_SETSTR@8
PUBLIC	@On_SETDEX@8
PUBLIC	@On_SETMAG@8
PUBLIC	@On_SETVIT@8
PUBLIC	@On_STRING@8
PUBLIC	@On_SYNCQUEST@8
PUBLIC	@On_ENDSHIELD@8
PUBLIC	@On_CHEAT_EXPERIENCE@8
PUBLIC	@On_CHEAT_SPELL_LEVEL@8
PUBLIC	@On_DEBUG@8
PUBLIC	@On_NOVA@8
PUBLIC	@On_SETSHIELD@8
PUBLIC	@On_REMSHIELD@8
PUBLIC	@On_DLEVEL@8
EXTRN	_SNetDropPlayer@8:NEAR
EXTRN	_sgwPackPlrOffsetTbl:QWORD
_BSS	SEGMENT
_sbLastCmd DB	01H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT @ParseCmd@8
_TEXT	SEGMENT
@ParseCmd@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _pCmd$ = edx
; Line 1002
	cmp	WORD PTR _sgwPackPlrOffsetTbl[ecx*2], 0
	mov	eax, edx
	push	ebx
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR _sbLastCmd, dl
	je	SHORT $L85567
	cmp	dl, 2
	je	SHORT $L85567
	cmp	dl, 54					; 00000036H
; Line 1003
	jne	$L86857
$L85567:
; Line 1005
	mov	bl, BYTE PTR [eax]
	movzx	edx, bl
	dec	edx
	cmp	edx, 92					; 0000005cH
	ja	$L85569
	jmp	DWORD PTR $L86858[edx*4]
$L85572:
; Line 1007
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SYNCDATA@8
$L85573:
; Line 1009
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_WALKXY@8
$L85575:
; Line 1011
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ADDSTR@8
$L85577:
; Line 1013
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ADDDEX@8
$L85579:
; Line 1015
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ADDMAG@8
$L85581:
; Line 1017
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ADDVIT@8
$L85583:
; Line 1019
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SBSPELL@8
$L85585:
; Line 1021
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_GOTOGETITEM@8
$L85587:
; Line 1023
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_REQUESTGITEM@8
$L85589:
; Line 1025
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_GETITEM@8
$L85591:
; Line 1027
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_GOTOAGETITEM@8
$L85593:
; Line 1029
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_REQUESTAGITEM@8
$L85595:
; Line 1031
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_AGETITEM@8
$L85597:
; Line 1033
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ITEMEXTRA@8
$L85599:
; Line 1035
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_PUTITEM@8
$L85601:
; Line 1037
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SYNCPUTITEM@8
$L85603:
; Line 1039
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_RESPAWNITEM@8
$L85605:
; Line 1041
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ATTACKXY@8
$L85607:
; Line 1043
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SATTACKXY@8
$L85609:
; Line 1045
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_RATTACKXY@8
$L85611:
; Line 1047
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SPELLXYD@8
$L85613:
; Line 1049
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SPELLXY@8
$L85615:
; Line 1051
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_TSPELLXY@8
$L85617:
; Line 1053
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_OPOBJXY@8
$L85619:
; Line 1055
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_DISARMXY@8
$L85621:
; Line 1057
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_OPOBJT@8
$L85623:
; Line 1059
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ATTACKID@8
$L85625:
; Line 1061
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ATTACKPID@8
$L85627:
; Line 1063
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_RATTACKID@8
$L85629:
; Line 1065
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_RATTACKPID@8
$L85631:
; Line 1067
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SPELLID@8
$L85633:
; Line 1069
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SPELLPID@8
$L85635:
; Line 1071
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_TSPELLID@8
$L85637:
; Line 1073
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_TSPELLPID@8
$L85639:
; Line 1075
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_KNOCKBACK@8
$L85641:
; Line 1077
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_RESURRECT@8
$L85643:
; Line 1079
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_HEALOTHER@8
$L85645:
; Line 1081
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_TALKXY@8
$L85647:
; Line 1083
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_DEBUG@8
$L85648:
; Line 1085
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_NEWLVL@8
$L85650:
; Line 1087
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_WARP@8
$L85652:
; Line 1089
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_MONSTDEATH@8
$L85654:
; Line 1091
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_KILLGOLEM@8
$L85656:
; Line 1093
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_AWAKEGOLEM@8
$L85658:
; Line 1095
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_MONSTDAMAGE@8
$L85660:
; Line 1097
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_PLRDEAD@8
$L85662:
; Line 1099
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_PLRDAMAGE@8
$L85664:
; Line 1101
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_OPENDOOR@8
$L85666:
; Line 1103
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_CLOSEDOOR@8
$L85668:
; Line 1105
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_OPERATEOBJ@8
$L85670:
; Line 1107
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_PLROPOBJ@8
$L85672:
; Line 1109
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_BREAKOBJ@8
$L85674:
; Line 1111
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_CHANGEPLRITEMS@8
$L85676:
; Line 1113
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_DELPLRITEMS@8
$L85678:
; Line 1115
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_PLRLEVEL@8
$L85680:
; Line 1117
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_DROPITEM@8
$L85682:
; Line 1119
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ACK_PLRINFO@8
$L85684:
; Line 1121
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SEND_PLRINFO@8
$L85686:
; Line 1123
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_PLAYER_JOINLEVEL@8
$L85688:
; Line 1125
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ACTIVATEPORTAL@8
$L85690:
; Line 1127
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_DEACTIVATEPORTAL@8
$L85691:
; Line 1129
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_RETOWN@8
$L85692:
; Line 1131
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SETSTR@8
$L85694:
; Line 1133
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SETMAG@8
$L85696:
; Line 1135
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SETDEX@8
$L85698:
; Line 1137
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SETVIT@8
$L85700:
; Line 1139
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_STRING@8
$L85702:
; Line 1141
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SYNCQUEST@8
$L85704:
; Line 1143
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_ENDSHIELD@8
$L85705:
; Line 1145
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_CHEAT_EXPERIENCE@8
$L85706:
; Line 1147
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_CHEAT_SPELL_LEVEL@8
$L85707:
; Line 1149
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_NOVA@8
$L85709:
; Line 1151
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_SETSHIELD@8
$L85710:
; Line 1153
	mov	edx, ecx
	mov	ecx, eax
	pop	ebx
	jmp	@On_REMSHIELD@8
$L85569:
; Line 1156
	cmp	bl, 58					; 0000003aH
	jb	SHORT $L85712
	cmp	bl, 76					; 0000004cH
	ja	SHORT $L85712
; Line 1161
	mov	edx, eax
	pop	ebx
	jmp	@On_DLEVEL@8
$L85712:
; Line 1157
	push	1073741830				; 40000006H
	push	ecx
	call	_SNetDropPlayer@8
$L86857:
; Line 1158
	xor	eax, eax
	pop	ebx
; Line 1162
	ret	0
$L86858:
	DD	$L85573
	DD	$L85682
	DD	$L85575
	DD	$L85579
	DD	$L85577
	DD	$L85581
	DD	$L85583
	DD	$L85589
	DD	$L85595
	DD	$L85599
	DD	$L85603
	DD	$L85605
	DD	$L85609
	DD	$L85613
	DD	$L85615
	DD	$L85617
	DD	$L85619
	DD	$L85623
	DD	$L85625
	DD	$L85627
	DD	$L85629
	DD	$L85631
	DD	$L85633
	DD	$L85635
	DD	$L85637
	DD	$L85641
	DD	$L85621
	DD	$L85639
	DD	$L85645
	DD	$L85648
	DD	$L85650
	DD	$L85705
	DD	$L85706
	DD	$L85647
	DD	$L85572
	DD	$L85652
	DD	$L85658
	DD	$L85660
	DD	$L85587
	DD	$L85593
	DD	$L85585
	DD	$L85591
	DD	$L85664
	DD	$L85666
	DD	$L85668
	DD	$L85670
	DD	$L85672
	DD	$L85674
	DD	$L85676
	DD	$L85662
	DD	$L85678
	DD	$L85680
	DD	$L85686
	DD	$L85684
	DD	$L85607
	DD	$L85688
	DD	$L85690
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85569
	DD	$L85643
	DD	$L85700
	DD	$L85692
	DD	$L85694
	DD	$L85696
	DD	$L85698
	DD	$L85691
	DD	$L85611
	DD	$L85597
	DD	$L85601
	DD	$L85654
	DD	$L85702
	DD	$L85704
	DD	$L85656
	DD	$L85707
	DD	$L85709
	DD	$L85710
@ParseCmd@8 ENDP
_TEXT	ENDS
PUBLIC	@DeltaImportData@8
_BSS	SEGMENT
	ALIGN	4

_sgdwRecvOffset DD 01H DUP (?)
_sgRecvBuf DB	01272H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT @On_DLEVEL@8
_TEXT	SEGMENT
@On_DLEVEL@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _pCmd$ = edx
; Line 1169
	movzx	eax, BYTE PTR _gbDeltaSender
	push	esi
	mov	esi, edx
	xor	edx, edx
	cmp	eax, ecx
	jne	SHORT $L85720
; Line 1170
	mov	cl, BYTE PTR _sgbRecvCmd
	cmp	cl, 76					; 0000004cH
	je	SHORT $L85726
; Line 1171
	cmp	cl, BYTE PTR [esi]
	je	SHORT $LABEL_17$85723
; Line 1177
	mov	edx, DWORD PTR _sgdwRecvOffset
	call	@DeltaImportData@8
; Line 1178
	cmp	BYTE PTR [esi], 76			; 0000004cH
	jne	SHORT $L85724
; Line 1179
	mov	BYTE PTR _sgbDeltaChunks, 20		; 00000014H
; Line 1180
	mov	BYTE PTR _sgbRecvCmd, 76		; 0000004cH
; Line 1181
	jmp	SHORT $L85730
$L85724:
; Line 1183
	and	DWORD PTR _sgdwRecvOffset, 0
	jmp	SHORT $LABEL_16$85725
$L85720:
; Line 1189
	mov	al, BYTE PTR [esi]
	cmp	al, 76					; 0000004cH
	je	SHORT $L85727
	cmp	al, 58					; 0000003aH
	jne	SHORT $L85730
	cmp	WORD PTR [esi+1], dx
; Line 1190
	jne	SHORT $L85730
$L85727:
; Line 1191
	mov	BYTE PTR _gbDeltaSender, cl
; Line 1192
	mov	BYTE PTR _sgbRecvCmd, 76		; 0000004cH
$L85726:
; Line 1194
	mov	al, BYTE PTR [esi]
	cmp	al, 76					; 0000004cH
	jne	SHORT $L85729
; Line 1195
	mov	BYTE PTR _sgbDeltaChunks, 20		; 00000014H
; Line 1196
	jmp	SHORT $L85730
$L85729:
; Line 1198
	cmp	al, 58					; 0000003aH
	jne	SHORT $L85730
	cmp	WORD PTR [esi+1], dx
	jne	SHORT $L85730
; Line 1199
	mov	DWORD PTR _sgdwRecvOffset, edx
$LABEL_16$85725:
; Line 1185
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR _sgbRecvCmd, al
$LABEL_17$85723:
	movzx	eax, WORD PTR [esi+3]
	push	eax
	lea	eax, DWORD PTR [esi+5]
	push	eax
	movzx	eax, WORD PTR [esi+1]
	add	eax, OFFSET FLAT:_sgRecvBuf
	push	eax
	call	_memcpy
	movzx	eax, WORD PTR [esi+3]
	add	esp, 12					; 0000000cH
	add	DWORD PTR _sgdwRecvOffset, eax
$L85730:
; Line 1202
	movzx	eax, WORD PTR [esi+3]
	add	eax, 5
	pop	esi
; Line 1203
	ret	0
@On_DLEVEL@8 ENDP
_TEXT	ENDS
PUBLIC	@DeltaImportMonster@8
PUBLIC	@DeltaImportJunk@4
PUBLIC	??_C@_05OHJH@msg?31?$AA@			; `string'
PUBLIC	@DeltaImportItem@8
PUBLIC	@DeltaImportObject@8
EXTRN	@PkwareDecompress@12:NEAR
EXTRN	_TermMsg:NEAR
;	COMDAT ??_C@_05OHJH@msg?31?$AA@
_DATA	SEGMENT
??_C@_05OHJH@msg?31?$AA@ DB 'msg:1', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DeltaImportData@8
_TEXT	SEGMENT
@DeltaImportData@8 PROC NEAR				; COMDAT
; _cmd$ = cl
; _recv_offset$ = edx
; Line 1210
	cmp	BYTE PTR _sgRecvBuf, 0
	push	ebx
	push	edi
	mov	bl, cl
	mov	edi, OFFSET FLAT:_sgRecvBuf+1
	je	SHORT $L85738
; Line 1211
	push	4721					; 00001271H
	mov	ecx, edi
	call	@PkwareDecompress@12
$L85738:
; Line 1214
	cmp	bl, 75					; 0000004bH
	jne	SHORT $L85739
; Line 1215
	mov	ecx, edi
	call	@DeltaImportJunk@4
; Line 1216
	jmp	SHORT $L85742
$L85739:
	cmp	bl, 58					; 0000003aH
	jb	SHORT $L85741
	cmp	bl, 74					; 0000004aH
	ja	SHORT $L85741
; Line 1217
	sub	bl, 58					; 0000003aH
	push	esi
; Line 1218
	movzx	esi, bl
	imul	esi, 4721				; 00001271H
	mov	ecx, edi
	lea	edx, DWORD PTR _sgLevels[esi]
	call	@DeltaImportItem@8
; Line 1219
	lea	edx, DWORD PTR _sgLevels[esi+2794]
	mov	ecx, eax
	call	@DeltaImportObject@8
; Line 1220
	lea	edx, DWORD PTR _sgLevels[esi+2921]
	mov	ecx, eax
	call	@DeltaImportMonster@8
	pop	esi
; Line 1221
	jmp	SHORT $L85742
$L85741:
; Line 1222
	push	OFFSET FLAT:??_C@_05OHJH@msg?31?$AA@	; `string'
	call	_TermMsg
	pop	ecx
$L85742:
; Line 1225
	inc	BYTE PTR _sgbDeltaChunks
	pop	edi
; Line 1226
	mov	BYTE PTR _sgbDeltaChanged, 1
	pop	ebx
; Line 1227
	ret	0
@DeltaImportData@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DeltaImportItem@8
_TEXT	SEGMENT
@DeltaImportItem@8 PROC NEAR				; COMDAT
; _src$ = ecx
; _dst$ = edx
; Line 1231
	push	ebx
	push	esi
	push	edi
; Line 1234
	push	127					; 0000007fH
	mov	edi, edx
	mov	esi, ecx
	pop	ebx
$L85750:
; Line 1235
	cmp	BYTE PTR [esi], 255			; 000000ffH
; Line 1236
	push	22					; 00000016H
	jne	SHORT $L85753
	push	255					; 000000ffH
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1237
	inc	esi
; Line 1238
	jmp	SHORT $L85755
$L85753:
; Line 1239
	push	esi
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1240
	add	esi, 22					; 00000016H
$L85755:
; Line 1242
	add	edi, 22					; 00000016H
	dec	ebx
	jne	SHORT $L85750
; Line 1245
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 1246
	ret	0
@DeltaImportItem@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DeltaImportObject@8
_TEXT	SEGMENT
@DeltaImportObject@8 PROC NEAR				; COMDAT
; _src$ = ecx
; _dst$ = edx
; Line 1249
	push	esi
	mov	esi, ecx
; Line 1250
	push	127					; 0000007fH
	push	esi
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1251
	lea	eax, DWORD PTR [esi+127]
	pop	esi
; Line 1252
	ret	0
@DeltaImportObject@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DeltaImportMonster@8
_TEXT	SEGMENT
@DeltaImportMonster@8 PROC NEAR				; COMDAT
; _src$ = ecx
; _dst$ = edx
; Line 1255
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
; Line 1258
	mov	ebx, 200				; 000000c8H
$L85771:
; Line 1259
	cmp	BYTE PTR [esi], 255			; 000000ffH
; Line 1260
	push	9
	jne	SHORT $L85774
	push	255					; 000000ffH
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1261
	inc	esi
; Line 1262
	jmp	SHORT $L85776
$L85774:
; Line 1263
	push	esi
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1264
	add	esi, 9
$L85776:
; Line 1266
	add	edi, 9
	dec	ebx
	jne	SHORT $L85771
; Line 1269
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; Line 1270
	ret	0
@DeltaImportMonster@8 ENDP
_TEXT	ENDS
EXTRN	@SetPortalStats@24:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DeltaImportJunk@4
_TEXT	SEGMENT
@DeltaImportJunk@4 PROC NEAR				; COMDAT
; _src$ = ecx
; Line 1273
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebx, ecx
; Line 1276
	xor	edi, edi
	mov	esi, OFFSET FLAT:_sgJunk
	mov	ebp, OFFSET FLAT:_sgJunk+20
$L85783:
; Line 1277
	cmp	BYTE PTR [ebx], 255			; 000000ffH
; Line 1278
	push	5
	jne	SHORT $L85786
	push	255					; 000000ffH
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1280
	xor	eax, eax
	inc	ebx
	xor	edx, edx
	push	eax
	push	eax
	push	eax
; Line 1281
	jmp	SHORT $L86886
$L85786:
; Line 1282
	push	ebx
	push	esi
	call	_memcpy
; Line 1290
	movzx	eax, BYTE PTR [esi+3]
	add	esp, 12					; 0000000cH
	xor	edx, edx
	add	ebx, 5
	inc	edx
	push	eax
	movzx	eax, BYTE PTR [esi+2]
	push	eax
	movzx	eax, BYTE PTR [esi+1]
	push	eax
	movzx	eax, BYTE PTR [esi]
$L86886:
	mov	ecx, edi
	push	eax
	call	@SetPortalStats@24
	add	esi, 5
	inc	edi
	cmp	esi, ebp
	jl	SHORT $L85783
; Line 1294
	mov	esi, ebp
	mov	edi, OFFSET FLAT:_quests+2
	mov	ebp, OFFSET FLAT:_questlist+8
$L85791:
; Line 1295
	test	BYTE PTR [ebp], 1
	je	SHORT $L85792
; Line 1296
	push	3
	push	ebx
	push	esi
	call	_memcpy
; Line 1298
	movzx	eax, BYTE PTR [esi+1]
	mov	DWORD PTR [edi+18], eax
; Line 1299
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR [edi], al
; Line 1300
	mov	al, BYTE PTR [esi+2]
	add	esp, 12					; 0000000cH
	add	ebx, 3
	mov	BYTE PTR [edi+13], al
$L85792:
	add	ebp, 20					; 00000014H
	add	esi, 3
	add	edi, 24					; 00000018H
	cmp	ebp, OFFSET FLAT:_questlist+88
	jl	SHORT $L85791
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1303
	ret	0
@DeltaImportJunk@4 ENDP
_TEXT	ENDS
EXTRN	@SyncData@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_SYNCDATA@8
_TEXT	SEGMENT
@On_SYNCDATA@8 PROC NEAR				; COMDAT
; _packet$ = ecx
; _pnum$ = edx
; Line 1306
	mov	eax, edx
; Line 1307
	mov	edx, ecx
	mov	ecx, eax
	jmp	@SyncData@8
@On_SYNCDATA@8 ENDP
_TEXT	ENDS
EXTRN	@ClrPlrPath@4:NEAR
EXTRN	@MakePlrPath@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_WALKXY@8
_TEXT	SEGMENT
@On_WALKXY@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1312
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	push	edi
	mov	ebx, edx
	mov	edi, ecx
	je	SHORT $L85808
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[esi+52]
	jne	SHORT $L85808
; Line 1313
	mov	ecx, ebx
	call	@ClrPlrPath@4
; Line 1314
	movzx	eax, BYTE PTR [edi+2]
	movzx	edx, BYTE PTR [edi+1]
	push	1
	push	eax
	mov	ecx, ebx
	call	@MakePlrPath@16
; Line 1315
	or	DWORD PTR _plr[esi+32], -1
$L85808:
; Line 1318
	push	3
	pop	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 1319
	ret	0
@On_WALKXY@8 ENDP
_TEXT	ENDS
EXTRN	@ModifyPlrStr@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_ADDSTR@8
_TEXT	SEGMENT
@On_ADDSTR@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1323
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L85814
; Line 1324
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 1325
	jmp	SHORT $L85816
$L85814:
	mov	cx, WORD PTR [ecx+1]
	cmp	cx, 256					; 00000100H
	ja	SHORT $L85816
; Line 1326
	movzx	edx, cx
	mov	ecx, eax
	call	@ModifyPlrStr@8
$L85816:
; Line 1328
	push	3
	pop	eax
; Line 1329
	ret	0
@On_ADDSTR@8 ENDP
_TEXT	ENDS
EXTRN	@ModifyPlrMag@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_ADDMAG@8
_TEXT	SEGMENT
@On_ADDMAG@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1333
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L85822
; Line 1334
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 1335
	jmp	SHORT $L85824
$L85822:
	mov	cx, WORD PTR [ecx+1]
	cmp	cx, 256					; 00000100H
	ja	SHORT $L85824
; Line 1336
	movzx	edx, cx
	mov	ecx, eax
	call	@ModifyPlrMag@8
$L85824:
; Line 1338
	push	3
	pop	eax
; Line 1339
	ret	0
@On_ADDMAG@8 ENDP
_TEXT	ENDS
EXTRN	@ModifyPlrDex@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_ADDDEX@8
_TEXT	SEGMENT
@On_ADDDEX@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1343
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L85830
; Line 1344
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 1345
	jmp	SHORT $L85832
$L85830:
	mov	cx, WORD PTR [ecx+1]
	cmp	cx, 256					; 00000100H
	ja	SHORT $L85832
; Line 1346
	movzx	edx, cx
	mov	ecx, eax
	call	@ModifyPlrDex@8
$L85832:
; Line 1348
	push	3
	pop	eax
; Line 1349
	ret	0
@On_ADDDEX@8 ENDP
_TEXT	ENDS
EXTRN	@ModifyPlrVit@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_ADDVIT@8
_TEXT	SEGMENT
@On_ADDVIT@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1353
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L85838
; Line 1354
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 1355
	jmp	SHORT $L85840
$L85838:
	mov	cx, WORD PTR [ecx+1]
	cmp	cx, 256					; 00000100H
	ja	SHORT $L85840
; Line 1356
	movzx	edx, cx
	mov	ecx, eax
	call	@ModifyPlrVit@8
$L85840:
; Line 1358
	push	3
	pop	eax
; Line 1359
	ret	0
@On_ADDVIT@8 ENDP
_TEXT	ENDS
PUBLIC	_msg_errorf
PUBLIC	??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ ; `string'
EXTRN	_spelldata:BYTE
;	COMDAT ??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@
_DATA	SEGMENT
??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ DB '%s has cas'
	DB	't an illegal spell.', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @On_SBSPELL@8
_TEXT	SEGMENT
@On_SBSPELL@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1363
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	je	SHORT $L85849
; Line 1364
	cmp	BYTE PTR _currlevel, 0
	jne	SHORT $L85848
	movzx	edx, WORD PTR [ecx+1]
	imul	edx, 56					; 00000038H
	cmp	DWORD PTR _spelldata[edx+24], 0
	jne	SHORT $L85848
; Line 1370
	imul	eax, 21720				; 000054d8H
	add	eax, OFFSET FLAT:_plr+320
	push	eax
	push	OFFSET FLAT:??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ ; `string'
	call	_msg_errorf
	pop	ecx
	pop	ecx
	jmp	SHORT $L85849
$L85848:
; Line 1365
	imul	eax, 21720				; 000054d8H
	movzx	ecx, WORD PTR [ecx+1]
	mov	DWORD PTR _plr[eax+164], ecx
; Line 1366
	mov	cl, BYTE PTR _plr[eax+192]
	mov	BYTE PTR _plr[eax+168], cl
; Line 1367
	mov	BYTE PTR _plr[eax+169], 1
; Line 1368
	mov	DWORD PTR _plr[eax+32], 12		; 0000000cH
$L85849:
; Line 1373
	push	3
	pop	eax
; Line 1374
	ret	0
@On_SBSPELL@8 ENDP
_TEXT	ENDS
EXTRN	@ErrorPlrMsg@4:NEAR
EXTRN	_vsprintf:NEAR
_BSS	SEGMENT
	ALIGN	4

?msg_err_timer@?1??msg_errorf@@9@9 DD 01H DUP (?)	; `msg_errorf'::`2'::msg_err_timer
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT _msg_errorf
_TEXT	SEGMENT
_pszFmt$ = 8
_msg$ = -256
_msg_errorf PROC NEAR					; COMDAT
; Line 1377
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
; Line 1384
	call	DWORD PTR __imp__GetTickCount@0
; Line 1385
	mov	ecx, eax
	sub	ecx, DWORD PTR ?msg_err_timer@?1??msg_errorf@@9@9
	cmp	ecx, 5000				; 00001388H
	jb	SHORT $L85862
; Line 1386
	mov	DWORD PTR ?msg_err_timer@?1??msg_errorf@@9@9, eax
; Line 1387
	lea	eax, DWORD PTR _pszFmt$[ebp+4]
	push	eax
	lea	eax, DWORD PTR _msg$[ebp]
	push	DWORD PTR _pszFmt$[ebp]
	push	eax
	call	_vsprintf
	add	esp, 12					; 0000000cH
; Line 1388
	lea	ecx, DWORD PTR _msg$[ebp]
	call	@ErrorPlrMsg@4
$L85862:
; Line 1391
	leave
	ret	0
_msg_errorf ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_GOTOGETITEM@8
_TEXT	SEGMENT
@On_GOTOGETITEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1395
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	eax, edx
	mov	edi, ecx
	je	SHORT $L85869
	mov	esi, eax
	imul	esi, 21720				; 000054d8H
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L85869
; Line 1396
	movzx	ecx, BYTE PTR [edi+2]
	movzx	edx, BYTE PTR [edi+1]
	push	0
	push	ecx
	mov	ecx, eax
	call	@MakePlrPath@16
; Line 1397
	mov	DWORD PTR _plr[esi+32], 15		; 0000000fH
; Line 1398
	movzx	eax, WORD PTR [edi+3]
	mov	DWORD PTR _plr[esi+36], eax
$L85869:
; Line 1401
	push	5
	pop	eax
	pop	edi
	pop	esi
; Line 1402
	ret	0
@On_GOTOGETITEM@8 ENDP
_TEXT	ENDS
PUBLIC	@i_own_level@4
EXTRN	@GetItemRecord@12:NEAR
EXTRN	@SetItemRecord@12:NEAR
EXTRN	@InvGetItem@8:NEAR
EXTRN	@SyncGetItem@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_REQUESTGITEM@8
_TEXT	SEGMENT
@On_REQUESTGITEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1406
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	esi, ecx
	je	$L85882
	imul	edx, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[edx+52]
	call	@i_own_level@4
	test	eax, eax
	je	$L85882
; Line 1407
	movzx	eax, WORD PTR [esi+7]
	mov	dx, WORD PTR [esi+9]
	mov	ecx, DWORD PTR [esi+11]
	push	eax
	call	@GetItemRecord@12
	test	eax, eax
	je	$L85882
; Line 1408
	movzx	ecx, WORD PTR [esi+7]
	push	DWORD PTR [esi+11]
	mov	dx, WORD PTR [esi+9]
	call	@FindGetItem@12
	mov	edi, eax
; Line 1410
	mov	al, BYTE PTR [esi+2]
	push	esi
	cmp	edi, -1
	push	eax
	je	SHORT $L85878
	mov	al, BYTE PTR _myplr
	mov	dl, 8
	push	eax
	xor	ecx, ecx
	call	@NetSendCmdGItem2@20
; Line 1411
	movzx	eax, BYTE PTR [esi+2]
	mov	ecx, DWORD PTR _myplr
	cmp	eax, ecx
	je	SHORT $L85879
; Line 1412
	push	DWORD PTR [esi+11]
	mov	ax, WORD PTR [esi+9]
	movzx	edx, BYTE PTR [esi+6]
	movzx	ecx, BYTE PTR [esi+5]
	push	eax
	movzx	eax, WORD PTR [esi+7]
	push	eax
	call	@SyncGetItem@20
; Line 1413
	jmp	SHORT $L85880
$L85879:
; Line 1414
	mov	edx, edi
	call	@InvGetItem@8
$L85880:
; Line 1415
	movzx	eax, WORD PTR [esi+7]
	mov	dx, WORD PTR [esi+9]
	mov	ecx, DWORD PTR [esi+11]
	push	eax
	call	@SetItemRecord@12
; Line 1416
	jmp	SHORT $L85882
$L85878:
	mov	dl, BYTE PTR _myplr
	mov	cl, 39					; 00000027H
	call	@NetSendCmdReq2@16
	test	eax, eax
	jne	SHORT $L85882
; Line 1417
	mov	ecx, esi
	call	@NetSendCmdExtra@4
$L85882:
; Line 1421
	push	30					; 0000001eH
	pop	eax
	pop	edi
	pop	esi
; Line 1422
	ret	0
@On_REQUESTGITEM@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @i_own_level@4
_TEXT	SEGMENT
@i_own_level@4 PROC NEAR				; COMDAT
; _nReqLevel$ = ecx
; Line 1425
	push	esi
; Line 1428
	mov	esi, DWORD PTR _myplr
	xor	edx, edx
	mov	eax, OFFSET FLAT:_plr+319
$L85887:
; Line 1432
	cmp	BYTE PTR [eax-290], 0
	je	SHORT $L85888
	cmp	BYTE PTR [eax], 0
	jne	SHORT $L85888
	cmp	DWORD PTR [eax-267], ecx
	jne	SHORT $L85888
	cmp	edx, esi
	jne	SHORT $L85891
	cmp	BYTE PTR _gbBufferMsgs, 0
	je	SHORT $L85891
$L85888:
; Line 1428
	add	eax, 21720				; 000054d8H
	inc	edx
	cmp	eax, OFFSET FLAT:_plr+87199
	jl	SHORT $L85887
$L85891:
; Line 1436
	xor	eax, eax
	cmp	edx, esi
	sete	al
	pop	esi
; Line 1437
	ret	0
@i_own_level@4 ENDP
_TEXT	ENDS
PUBLIC	@delta_get_item@8
EXTRN	@SyncPutItem@52:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_GETITEM@8
_TEXT	SEGMENT
@On_GETITEM@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1442
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	push	edi
	mov	eax, edx
	mov	esi, ecx
	jne	SHORT $L85897
; Line 1443
	push	30					; 0000001eH
	mov	edx, esi
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 1444
	jmp	$L85908
$L85897:
; Line 1445
	movzx	ecx, WORD PTR [esi+7]
	push	DWORD PTR [esi+11]
	mov	dx, WORD PTR [esi+9]
	call	@FindGetItem@12
; Line 1446
	mov	dl, BYTE PTR [esi+4]
	mov	ecx, esi
	mov	edi, eax
	call	@delta_get_item@8
	test	eax, eax
	je	$L85900
; Line 1447
	mov	al, BYTE PTR [esi+4]
	mov	dl, BYTE PTR _currlevel
	mov	ecx, DWORD PTR _myplr
	cmp	dl, al
	je	SHORT $L85902
	movzx	ebx, BYTE PTR [esi+2]
	cmp	ebx, ecx
	jne	$L85908
$L85902:
	movzx	ebx, BYTE PTR [esi+1]
	cmp	ebx, ecx
	je	$L85908
; Line 1448
	movzx	ebx, BYTE PTR [esi+2]
	cmp	ebx, ecx
	jne	SHORT $L85903
; Line 1449
	cmp	dl, al
	je	SHORT $L85904
; Line 1450
	movzx	edx, WORD PTR [esi+20]
	push	DWORD PTR [esi+22]
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	push	edx
	movzx	edx, BYTE PTR [esi+19]
	push	edx
	movzx	edx, BYTE PTR [esi+18]
	push	edx
	movzx	edx, BYTE PTR [esi+17]
	push	edx
	movzx	edx, BYTE PTR [esi+16]
	push	edx
	movzx	edx, BYTE PTR [esi+15]
	push	edx
	mov	dx, WORD PTR [esi+9]
	push	DWORD PTR [esi+11]
	push	edx
	movzx	edx, WORD PTR [esi+7]
	push	edx
	mov	edx, DWORD PTR _plr[eax+56]
	push	DWORD PTR _plr[eax+60]
	call	@SyncPutItem@52
; Line 1451
	cmp	eax, -1
	je	SHORT $L85908
; Line 1452
	mov	ecx, DWORD PTR _myplr
	mov	edx, eax
; Line 1453
	jmp	SHORT $L86925
$L85904:
; Line 1454
	mov	edx, edi
$L86925:
	call	@InvGetItem@8
; Line 1455
	jmp	SHORT $L85908
$L85903:
; Line 1456
	push	DWORD PTR [esi+11]
	mov	ax, WORD PTR [esi+9]
	movzx	edx, BYTE PTR [esi+6]
	movzx	ecx, BYTE PTR [esi+5]
	push	eax
	movzx	eax, WORD PTR [esi+7]
	push	eax
	call	@SyncGetItem@20
; Line 1458
	jmp	SHORT $L85908
$L85900:
; Line 1459
	mov	al, BYTE PTR [esi+2]
	push	esi
	push	eax
	mov	al, BYTE PTR [esi+1]
	xor	ecx, ecx
	push	eax
	mov	dl, 8
	inc	ecx
	call	@NetSendCmdGItem2@20
$L85908:
; Line 1462
	push	30					; 0000001eH
	pop	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 1463
	ret	0
@On_GETITEM@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_07IDNM@delta?31?$AA@			; `string'
;	COMDAT ??_C@_07IDNM@delta?31?$AA@
_DATA	SEGMENT
??_C@_07IDNM@delta?31?$AA@ DB 'delta:1', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @delta_get_item@8
_TEXT	SEGMENT
_result$ = -4
@delta_get_item@8 PROC NEAR				; COMDAT
; _pI$ = ecx
; _bLevel$ = dl
; Line 1466
	push	ecx
; Line 1471
	xor	eax, eax
	push	ebx
	inc	eax
	push	esi
	cmp	BYTE PTR _gbMaxPlayers, al
	push	edi
	je	$L85913
; Line 1472
	movzx	esi, dl
	xor	edi, edi
	imul	esi, 4721				; 00001271H
	lea	edx, DWORD PTR _sgLevels[esi+5]
$L85918:
; Line 1477
	cmp	BYTE PTR [edx-5], 255			; 000000ffH
	je	SHORT $L85919
	mov	bx, WORD PTR [edx-2]
	cmp	bx, WORD PTR [ecx+7]
	jne	SHORT $L85919
	mov	bx, WORD PTR [edx]
	cmp	bx, WORD PTR [ecx+9]
	jne	SHORT $L85919
	mov	ebx, DWORD PTR [edx+2]
	cmp	ebx, DWORD PTR [ecx+11]
	je	SHORT $L86931
$L85919:
; Line 1472
	inc	edi
	add	edx, 22					; 00000016H
	cmp	edi, 127				; 0000007fH
	jl	SHORT $L85918
; Line 1495
	test	BYTE PTR [ecx+10], 128			; 00000080H
	jne	SHORT $L85931
; Line 1496
	xor	eax, eax
	jmp	$L85913
$L86931:
; Line 1478
	mov	cl, BYTE PTR [edx-5]
	test	cl, cl
	jne	SHORT $L85923
; Line 1479
	mov	BYTE PTR _sgbDeltaChanged, al
; Line 1480
	mov	BYTE PTR [edx-5], al
; Line 1481
	jmp	$L85913
$L85923:
; Line 1482
	cmp	cl, al
; Line 1483
	je	$L85913
; Line 1484
	cmp	cl, 2
	jne	SHORT $L85927
; Line 1485
	or	BYTE PTR [edx-5], 255			; 000000ffH
; Line 1486
	mov	BYTE PTR _sgbDeltaChanged, al
; Line 1487
	jmp	SHORT $L85913
$L85927:
; Line 1489
	push	OFFSET FLAT:??_C@_07IDNM@delta?31?$AA@	; `string'
	call	_TermMsg
; Line 1491
	mov	eax, DWORD PTR _result$[esp+20]
	pop	ecx
	jmp	SHORT $L85913
$L85931:
; Line 1498
	xor	edi, edi
	lea	edx, DWORD PTR _sgLevels[esi]
$L85932:
; Line 1500
	cmp	BYTE PTR [edx], 255			; 000000ffH
	je	SHORT $L86932
	inc	edi
	add	edx, 22					; 00000016H
	cmp	edi, 127				; 0000007fH
	jl	SHORT $L85932
	jmp	SHORT $L85913
$L86932:
; Line 1501
	mov	BYTE PTR _sgbDeltaChanged, al
; Line 1502
	mov	BYTE PTR [edx], al
; Line 1503
	mov	bl, BYTE PTR [ecx+5]
	mov	BYTE PTR [edx+1], bl
; Line 1504
	mov	bl, BYTE PTR [ecx+6]
	mov	BYTE PTR [edx+2], bl
; Line 1505
	mov	si, WORD PTR [ecx+7]
	mov	WORD PTR [edx+3], si
; Line 1506
	mov	si, WORD PTR [ecx+9]
	mov	WORD PTR [edx+5], si
; Line 1507
	mov	esi, DWORD PTR [ecx+11]
	mov	DWORD PTR [edx+7], esi
; Line 1508
	mov	bl, BYTE PTR [ecx+15]
	mov	BYTE PTR [edx+11], bl
; Line 1509
	mov	bl, BYTE PTR [ecx+16]
	mov	BYTE PTR [edx+12], bl
; Line 1510
	mov	bl, BYTE PTR [ecx+17]
	mov	BYTE PTR [edx+13], bl
; Line 1511
	mov	bl, BYTE PTR [ecx+18]
	mov	BYTE PTR [edx+14], bl
; Line 1512
	mov	bl, BYTE PTR [ecx+19]
	mov	BYTE PTR [edx+15], bl
; Line 1513
	mov	si, WORD PTR [ecx+20]
	mov	WORD PTR [edx+16], si
; Line 1514
	mov	ecx, DWORD PTR [ecx+22]
	mov	DWORD PTR [edx+18], ecx
$L85913:
	pop	edi
	pop	esi
	pop	ebx
; Line 1520
	pop	ecx
	ret	0
@delta_get_item@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_GOTOAGETITEM@8
_TEXT	SEGMENT
@On_GOTOAGETITEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1525
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	eax, edx
	mov	edi, ecx
	je	SHORT $L85942
	mov	esi, eax
	imul	esi, 21720				; 000054d8H
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L85942
; Line 1526
	movzx	ecx, BYTE PTR [edi+2]
	movzx	edx, BYTE PTR [edi+1]
	push	0
	push	ecx
	mov	ecx, eax
	call	@MakePlrPath@16
; Line 1527
	mov	DWORD PTR _plr[esi+32], 16		; 00000010H
; Line 1528
	movzx	eax, WORD PTR [edi+3]
	mov	DWORD PTR _plr[esi+36], eax
$L85942:
; Line 1531
	push	5
	pop	eax
	pop	edi
	pop	esi
; Line 1532
	ret	0
@On_GOTOAGETITEM@8 ENDP
_TEXT	ENDS
EXTRN	@AutoGetItem@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_REQUESTAGITEM@8
_TEXT	SEGMENT
@On_REQUESTAGITEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1536
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	esi, ecx
	je	$L85955
	imul	edx, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[edx+52]
	call	@i_own_level@4
	test	eax, eax
	je	$L85955
; Line 1537
	movzx	eax, WORD PTR [esi+7]
	mov	dx, WORD PTR [esi+9]
	mov	ecx, DWORD PTR [esi+11]
	push	eax
	call	@GetItemRecord@12
	test	eax, eax
	je	$L85955
; Line 1539
	movzx	ecx, WORD PTR [esi+7]
	push	DWORD PTR [esi+11]
	mov	dx, WORD PTR [esi+9]
	call	@FindGetItem@12
	cmp	eax, -1
; Line 1540
	mov	al, BYTE PTR [esi+2]
	push	esi
	push	eax
	je	SHORT $L85951
	mov	al, BYTE PTR _myplr
	mov	dl, 9
	push	eax
	xor	ecx, ecx
	call	@NetSendCmdGItem2@20
; Line 1541
	movzx	eax, BYTE PTR [esi+2]
	mov	ecx, DWORD PTR _myplr
	cmp	eax, ecx
	je	SHORT $L85952
; Line 1542
	push	DWORD PTR [esi+11]
	mov	ax, WORD PTR [esi+9]
	movzx	edx, BYTE PTR [esi+6]
	movzx	ecx, BYTE PTR [esi+5]
	push	eax
	movzx	eax, WORD PTR [esi+7]
	push	eax
	call	@SyncGetItem@20
; Line 1543
	jmp	SHORT $L85953
$L85952:
; Line 1544
	movzx	edx, BYTE PTR [esi+3]
	call	@AutoGetItem@8
$L85953:
; Line 1545
	movzx	eax, WORD PTR [esi+7]
	mov	dx, WORD PTR [esi+9]
	mov	ecx, DWORD PTR [esi+11]
	push	eax
	call	@SetItemRecord@12
; Line 1546
	jmp	SHORT $L85955
$L85951:
	mov	dl, BYTE PTR _myplr
	mov	cl, 40					; 00000028H
	call	@NetSendCmdReq2@16
	test	eax, eax
	jne	SHORT $L85955
; Line 1547
	mov	ecx, esi
	call	@NetSendCmdExtra@4
$L85955:
; Line 1551
	push	30					; 0000001eH
	pop	eax
	pop	esi
; Line 1552
	ret	0
@On_REQUESTAGITEM@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_AGETITEM@8
_TEXT	SEGMENT
@On_AGETITEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1556
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	eax, edx
	mov	esi, ecx
	jne	SHORT $L85961
; Line 1557
	push	30					; 0000001eH
	mov	edx, esi
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 1558
	jmp	$L85972
$L85961:
; Line 1559
	movzx	ecx, WORD PTR [esi+7]
	push	DWORD PTR [esi+11]
	mov	dx, WORD PTR [esi+9]
	call	@FindGetItem@12
; Line 1560
	mov	dl, BYTE PTR [esi+4]
	mov	ecx, esi
	call	@delta_get_item@8
	test	eax, eax
	je	$L85963
; Line 1561
	mov	al, BYTE PTR [esi+4]
	mov	dl, BYTE PTR _currlevel
	mov	ecx, DWORD PTR _myplr
	cmp	dl, al
	je	SHORT $L85965
	movzx	edi, BYTE PTR [esi+2]
	cmp	edi, ecx
	jne	$L85972
$L85965:
	movzx	edi, BYTE PTR [esi+1]
	cmp	edi, ecx
	je	$L85972
; Line 1562
	movzx	edi, BYTE PTR [esi+2]
	cmp	edi, ecx
	jne	SHORT $L85966
; Line 1563
	cmp	dl, al
	je	SHORT $L85967
; Line 1564
	movzx	edx, WORD PTR [esi+20]
	push	DWORD PTR [esi+22]
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	push	edx
	movzx	edx, BYTE PTR [esi+19]
	push	edx
	movzx	edx, BYTE PTR [esi+18]
	push	edx
	movzx	edx, BYTE PTR [esi+17]
	push	edx
	movzx	edx, BYTE PTR [esi+16]
	push	edx
	movzx	edx, BYTE PTR [esi+15]
	push	edx
	mov	dx, WORD PTR [esi+9]
	push	DWORD PTR [esi+11]
	push	edx
	movzx	edx, WORD PTR [esi+7]
	push	edx
	mov	edx, DWORD PTR _plr[eax+56]
	push	DWORD PTR _plr[eax+60]
	call	@SyncPutItem@52
; Line 1565
	cmp	eax, -1
	je	SHORT $L85972
; Line 1566
	mov	ecx, DWORD PTR _myplr
	mov	edx, eax
; Line 1567
	jmp	SHORT $L86944
$L85967:
; Line 1568
	movzx	edx, BYTE PTR [esi+3]
$L86944:
	call	@AutoGetItem@8
; Line 1569
	jmp	SHORT $L85972
$L85966:
; Line 1570
	push	DWORD PTR [esi+11]
	mov	ax, WORD PTR [esi+9]
	movzx	edx, BYTE PTR [esi+6]
	movzx	ecx, BYTE PTR [esi+5]
	push	eax
	movzx	eax, WORD PTR [esi+7]
	push	eax
	call	@SyncGetItem@20
; Line 1572
	jmp	SHORT $L85972
$L85963:
; Line 1573
	mov	al, BYTE PTR [esi+2]
	push	esi
	push	eax
	mov	al, BYTE PTR [esi+1]
	xor	ecx, ecx
	push	eax
	mov	dl, 9
	inc	ecx
	call	@NetSendCmdGItem2@20
$L85972:
; Line 1576
	push	30					; 0000001eH
	pop	eax
	pop	edi
	pop	esi
; Line 1577
	ret	0
@On_AGETITEM@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_ITEMEXTRA@8
_TEXT	SEGMENT
@On_ITEMEXTRA@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1581
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
	jne	SHORT $L85978
; Line 1582
	push	30					; 0000001eH
	mov	edx, esi
	mov	ecx, edi
	call	@msg_send_packet@12
; Line 1583
	jmp	SHORT $L85980
$L85978:
; Line 1584
	mov	dl, BYTE PTR [esi+4]
	mov	ecx, esi
	call	@delta_get_item@8
; Line 1585
	imul	edi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[edi+52]
	jne	SHORT $L85980
; Line 1586
	push	DWORD PTR [esi+11]
	mov	ax, WORD PTR [esi+9]
	movzx	edx, BYTE PTR [esi+6]
	movzx	ecx, BYTE PTR [esi+5]
	push	eax
	movzx	eax, WORD PTR [esi+7]
	push	eax
	call	@SyncGetItem@20
$L85980:
; Line 1589
	push	30					; 0000001eH
	pop	eax
	pop	edi
	pop	esi
; Line 1590
	ret	0
@On_ITEMEXTRA@8 ENDP
_TEXT	ENDS
PUBLIC	@delta_put_item@16
PUBLIC	@check_update_plr@4
EXTRN	@PutItemRecord@12:NEAR
EXTRN	@InvPutItem@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_PUTITEM@8
_TEXT	SEGMENT
@On_PUTITEM@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1594
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
	jne	SHORT $L85986
; Line 1595
	push	22					; 00000016H
	mov	edx, esi
	mov	ecx, edi
	call	@msg_send_packet@12
; Line 1596
	jmp	$L85993
$L85986:
	mov	eax, edi
	imul	eax, 21720				; 000054d8H
	lea	ebx, DWORD PTR _plr[eax+52]
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [ebx]
	jne	$L85988
; Line 1598
	cmp	edi, DWORD PTR _myplr
	push	ebp
; Line 1599
	movzx	edx, BYTE PTR [esi+1]
	mov	ecx, edi
	jne	SHORT $L85990
	movzx	eax, BYTE PTR [esi+2]
	push	eax
	call	@InvPutItem@12
; Line 1600
	jmp	SHORT $L86951
$L85990:
; Line 1601
	movzx	eax, WORD PTR [esi+16]
	push	DWORD PTR [esi+18]
	push	eax
	movzx	eax, BYTE PTR [esi+15]
	push	eax
	movzx	eax, BYTE PTR [esi+14]
	push	eax
	movzx	eax, BYTE PTR [esi+13]
	push	eax
	movzx	eax, BYTE PTR [esi+12]
	push	eax
	movzx	eax, BYTE PTR [esi+11]
	push	eax
	mov	ax, WORD PTR [esi+5]
	push	DWORD PTR [esi+7]
	push	eax
	movzx	eax, WORD PTR [esi+3]
	push	eax
	movzx	eax, BYTE PTR [esi+2]
	push	eax
	call	@SyncPutItem@52
$L86951:
	mov	ebp, eax
; Line 1602
	cmp	ebp, -1
	je	SHORT $L85992
; Line 1603
	movzx	eax, WORD PTR [esi+3]
	mov	dx, WORD PTR [esi+5]
	mov	ecx, DWORD PTR [esi+7]
	push	eax
	call	@PutItemRecord@12
; Line 1604
	mov	eax, ebp
	mov	cl, BYTE PTR [ebx]
	imul	eax, 368				; 00000170H
	push	ecx
	mov	ecx, esi
	push	DWORD PTR _item[eax+16]
	mov	edx, DWORD PTR _item[eax+12]
	call	@delta_put_item@16
; Line 1605
	mov	ecx, edi
	call	@check_update_plr@4
$L85992:
; Line 1607
	push	22					; 00000016H
	pop	eax
	pop	ebp
	jmp	SHORT $L85985
$L85988:
; Line 1609
	movzx	eax, WORD PTR [esi+3]
	mov	dx, WORD PTR [esi+5]
	mov	ecx, DWORD PTR [esi+7]
	push	eax
	call	@PutItemRecord@12
; Line 1610
	mov	al, BYTE PTR [ebx]
	mov	ecx, esi
	movzx	edx, BYTE PTR [esi+1]
	push	eax
	movzx	eax, BYTE PTR [esi+2]
	push	eax
	call	@delta_put_item@16
; Line 1611
	mov	ecx, edi
	call	@check_update_plr@4
$L85993:
; Line 1614
	push	22					; 00000016H
	pop	eax
$L85985:
	pop	edi
	pop	esi
	pop	ebx
; Line 1615
	ret	0
@On_PUTITEM@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@KAHG@Trying?5to?5drop?5a?5floor?5item?$DP?$AA@ ; `string'
;	COMDAT ??_C@_0BN@KAHG@Trying?5to?5drop?5a?5floor?5item?$DP?$AA@
_DATA	SEGMENT
??_C@_0BN@KAHG@Trying?5to?5drop?5a?5floor?5item?$DP?$AA@ DB 'Trying to dr'
	DB	'op a floor item?', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @delta_put_item@16
_TEXT	SEGMENT
_x$ = -8
_y$ = 8
_bLevel$ = 12
_i$ = -4
@delta_put_item@16 PROC NEAR				; COMDAT
; _pI$ = ecx
; _x$ = edx
; Line 1618
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1622
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _x$[ebp], edx
	mov	ebx, ecx
	je	$L86014
; Line 1623
	movzx	eax, BYTE PTR _bLevel$[ebp]
	and	DWORD PTR _i$[ebp], 0
	imul	eax, 4721				; 00001271H
	lea	esi, DWORD PTR _sgLevels[eax]
	mov	edi, esi
$L86006:
; Line 1629
	mov	al, BYTE PTR [edi]
	cmp	al, 1
	je	SHORT $L86007
	cmp	al, 255					; 000000ffH
	je	SHORT $L86007
	mov	cx, WORD PTR [edi+3]
	cmp	cx, WORD PTR [ebx+3]
	jne	SHORT $L86007
	mov	cx, WORD PTR [edi+5]
	cmp	cx, WORD PTR [ebx+5]
	jne	SHORT $L86007
	mov	ecx, DWORD PTR [edi+7]
	cmp	ecx, DWORD PTR [ebx+7]
	jne	SHORT $L86007
; Line 1630
	cmp	al, 2
	je	SHORT $L86014
; Line 1632
	push	OFFSET FLAT:??_C@_0BN@KAHG@Trying?5to?5drop?5a?5floor?5item?$DP?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L86007:
	inc	DWORD PTR _i$[ebp]
	add	edi, 22					; 00000016H
	cmp	DWORD PTR _i$[ebp], 127			; 0000007fH
	jl	SHORT $L86006
; Line 1636
	xor	eax, eax
$L86012:
; Line 1638
	cmp	BYTE PTR [esi], 255			; 000000ffH
	je	SHORT $L86958
	inc	eax
	add	esi, 22					; 00000016H
	cmp	eax, 127				; 0000007fH
	jl	SHORT $L86012
	jmp	SHORT $L86014
$L86958:
; Line 1640
	push	22					; 00000016H
	push	ebx
	push	esi
	mov	BYTE PTR _sgbDeltaChanged, 1
	call	_memcpy
; Line 1642
	mov	al, BYTE PTR _x$[ebp]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi+1], al
; Line 1643
	mov	al, BYTE PTR _y$[ebp]
	mov	BYTE PTR [esi], 2
	mov	BYTE PTR [esi+2], al
$L86014:
	pop	edi
	pop	esi
	pop	ebx
; Line 1648
	leave
	ret	8
@delta_put_item@16 ENDP
_TEXT	ENDS
EXTRN	@pfile_update@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @check_update_plr@4
_TEXT	SEGMENT
@check_update_plr@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1653
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L86020
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86020
; Line 1654
	xor	ecx, ecx
	inc	ecx
	jmp	@pfile_update@4
$L86020:
; Line 1655
	ret	0
@check_update_plr@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_SYNCPUTITEM@8
_TEXT	SEGMENT
@On_SYNCPUTITEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1660
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	push	edi
	mov	ebx, edx
	mov	esi, ecx
	jne	SHORT $L86026
; Line 1661
	push	22					; 00000016H
	mov	edx, esi
	mov	ecx, ebx
	call	@msg_send_packet@12
; Line 1662
	jmp	$L86031
$L86026:
	mov	eax, ebx
	imul	eax, 21720				; 000054d8H
	lea	edi, DWORD PTR _plr[eax+52]
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [edi]
	jne	$L86028
; Line 1663
	movzx	eax, WORD PTR [esi+16]
	push	ebp
	mov	ecx, ebx
	push	DWORD PTR [esi+18]
	movzx	edx, BYTE PTR [esi+1]
	push	eax
	movzx	eax, BYTE PTR [esi+15]
	push	eax
	movzx	eax, BYTE PTR [esi+14]
	push	eax
	movzx	eax, BYTE PTR [esi+13]
	push	eax
	movzx	eax, BYTE PTR [esi+12]
	push	eax
	movzx	eax, BYTE PTR [esi+11]
	push	eax
	mov	ax, WORD PTR [esi+5]
	push	DWORD PTR [esi+7]
	push	eax
	movzx	eax, WORD PTR [esi+3]
	push	eax
	movzx	eax, BYTE PTR [esi+2]
	push	eax
	call	@SyncPutItem@52
	mov	ebp, eax
; Line 1664
	cmp	ebp, -1
	je	SHORT $L86030
; Line 1665
	movzx	eax, WORD PTR [esi+3]
	mov	dx, WORD PTR [esi+5]
	mov	ecx, DWORD PTR [esi+7]
	push	eax
	call	@PutItemRecord@12
; Line 1666
	mov	eax, ebp
	mov	cl, BYTE PTR [edi]
	imul	eax, 368				; 00000170H
	push	ecx
	mov	ecx, esi
	push	DWORD PTR _item[eax+16]
	mov	edx, DWORD PTR _item[eax+12]
	call	@delta_put_item@16
; Line 1667
	mov	ecx, ebx
	call	@check_update_plr@4
$L86030:
; Line 1669
	push	22					; 00000016H
	pop	eax
	pop	ebp
	jmp	SHORT $L86025
$L86028:
; Line 1671
	movzx	eax, WORD PTR [esi+3]
	mov	dx, WORD PTR [esi+5]
	mov	ecx, DWORD PTR [esi+7]
	push	eax
	call	@PutItemRecord@12
; Line 1672
	mov	al, BYTE PTR [edi]
	mov	ecx, esi
	movzx	edx, BYTE PTR [esi+1]
	push	eax
	movzx	eax, BYTE PTR [esi+2]
	push	eax
	call	@delta_put_item@16
; Line 1673
	mov	ecx, ebx
	call	@check_update_plr@4
$L86031:
; Line 1676
	push	22					; 00000016H
	pop	eax
$L86025:
	pop	edi
	pop	esi
	pop	ebx
; Line 1677
	ret	0
@On_SYNCPUTITEM@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_RESPAWNITEM@8
_TEXT	SEGMENT
@On_RESPAWNITEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1681
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	eax, edx
	mov	esi, ecx
; Line 1682
	mov	ecx, eax
	jne	SHORT $L86037
	push	22					; 00000016H
	mov	edx, esi
	call	@msg_send_packet@12
; Line 1683
	jmp	$L86038
$L86037:
; Line 1684
	imul	ecx, 21720				; 000054d8H
	push	edi
	lea	edi, DWORD PTR _plr[ecx+52]
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR [edi]
	jne	SHORT $L86039
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86039
; Line 1685
	movzx	ecx, WORD PTR [esi+16]
	push	DWORD PTR [esi+18]
	movzx	edx, BYTE PTR [esi+1]
	push	ecx
	movzx	ecx, BYTE PTR [esi+15]
	push	ecx
	movzx	ecx, BYTE PTR [esi+14]
	push	ecx
	movzx	ecx, BYTE PTR [esi+13]
	push	ecx
	movzx	ecx, BYTE PTR [esi+12]
	push	ecx
	movzx	ecx, BYTE PTR [esi+11]
	push	ecx
	mov	cx, WORD PTR [esi+5]
	push	DWORD PTR [esi+7]
	push	ecx
	movzx	ecx, WORD PTR [esi+3]
	push	ecx
	movzx	ecx, BYTE PTR [esi+2]
	push	ecx
	mov	ecx, eax
	call	@SyncPutItem@52
$L86039:
; Line 1686
	movzx	eax, WORD PTR [esi+3]
	mov	dx, WORD PTR [esi+5]
	mov	ecx, DWORD PTR [esi+7]
	push	eax
	call	@PutItemRecord@12
; Line 1687
	mov	al, BYTE PTR [edi]
	mov	ecx, esi
	movzx	edx, BYTE PTR [esi+1]
	push	eax
	movzx	eax, BYTE PTR [esi+2]
	push	eax
	call	@delta_put_item@16
	pop	edi
$L86038:
; Line 1690
	push	22					; 00000016H
	pop	eax
	pop	esi
; Line 1691
	ret	0
@On_RESPAWNITEM@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_ATTACKXY@8
_TEXT	SEGMENT
@On_ATTACKXY@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1695
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	eax, edx
	mov	edi, ecx
	je	SHORT $L86045
	mov	esi, eax
	imul	esi, 21720				; 000054d8H
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L86045
; Line 1696
	movzx	ecx, BYTE PTR [edi+2]
	movzx	edx, BYTE PTR [edi+1]
	push	0
	push	ecx
	mov	ecx, eax
	call	@MakePlrPath@16
; Line 1697
	mov	DWORD PTR _plr[esi+32], 9
; Line 1698
	movzx	eax, BYTE PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1699
	movzx	eax, BYTE PTR [edi+2]
	mov	DWORD PTR _plr[esi+40], eax
$L86045:
; Line 1702
	push	3
	pop	eax
	pop	edi
	pop	esi
; Line 1703
	ret	0
@On_ATTACKXY@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_SATTACKXY@8
_TEXT	SEGMENT
@On_SATTACKXY@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1707
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	SHORT $L86051
	mov	esi, edx
	imul	esi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[esi+52]
	jne	SHORT $L86051
; Line 1708
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1709
	mov	DWORD PTR _plr[esi+32], 9
; Line 1710
	movzx	eax, BYTE PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1711
	movzx	eax, BYTE PTR [edi+2]
	mov	DWORD PTR _plr[esi+40], eax
$L86051:
; Line 1714
	push	3
	pop	eax
	pop	edi
	pop	esi
; Line 1715
	ret	0
@On_SATTACKXY@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_RATTACKXY@8
_TEXT	SEGMENT
@On_RATTACKXY@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1719
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	SHORT $L86057
	mov	esi, edx
	imul	esi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[esi+52]
	jne	SHORT $L86057
; Line 1720
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1721
	mov	DWORD PTR _plr[esi+32], 10		; 0000000aH
; Line 1722
	movzx	eax, BYTE PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1723
	movzx	eax, BYTE PTR [edi+2]
	mov	DWORD PTR _plr[esi+40], eax
$L86057:
; Line 1726
	push	3
	pop	eax
	pop	edi
	pop	esi
; Line 1727
	ret	0
@On_RATTACKXY@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_SPELLXYD@8
_TEXT	SEGMENT
@On_SPELLXYD@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1731
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	$L86066
	mov	esi, edx
	mov	al, BYTE PTR _currlevel
	imul	esi, 21720				; 000054d8H
	movzx	ecx, al
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L86066
; Line 1732
	test	al, al
	jne	SHORT $L86065
	movzx	eax, WORD PTR [edi+3]
	imul	eax, 56					; 00000038H
	cmp	DWORD PTR _spelldata[eax+24], 0
	jne	SHORT $L86065
; Line 1743
	lea	eax, DWORD PTR _plr[esi+320]
	push	eax
	push	OFFSET FLAT:??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ ; `string'
	call	_msg_errorf
	pop	ecx
	pop	ecx
	jmp	SHORT $L86066
$L86065:
; Line 1733
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1734
	mov	DWORD PTR _plr[esi+32], 26		; 0000001aH
; Line 1735
	movzx	eax, BYTE PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1736
	movzx	eax, BYTE PTR [edi+2]
	mov	DWORD PTR _plr[esi+40], eax
; Line 1737
	movzx	eax, WORD PTR [edi+5]
	mov	DWORD PTR _plr[esi+44], eax
; Line 1738
	movzx	eax, WORD PTR [edi+7]
	mov	DWORD PTR _plr[esi+48], eax
; Line 1739
	movzx	eax, WORD PTR [edi+3]
; Line 1741
	and	BYTE PTR _plr[esi+169], 0
	mov	DWORD PTR _plr[esi+164], eax
	mov	al, BYTE PTR _plr[esi+184]
	mov	BYTE PTR _plr[esi+168], al
$L86066:
; Line 1746
	push	9
	pop	eax
	pop	edi
	pop	esi
; Line 1747
	ret	0
@On_SPELLXYD@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_SPELLXY@8
_TEXT	SEGMENT
@On_SPELLXY@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1751
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	$L86075
	mov	esi, edx
	mov	al, BYTE PTR _currlevel
	imul	esi, 21720				; 000054d8H
	movzx	ecx, al
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L86075
; Line 1752
	test	al, al
	jne	SHORT $L86074
	movzx	eax, WORD PTR [edi+3]
	imul	eax, 56					; 00000038H
	cmp	DWORD PTR _spelldata[eax+24], 0
	jne	SHORT $L86074
; Line 1762
	lea	eax, DWORD PTR _plr[esi+320]
	push	eax
	push	OFFSET FLAT:??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ ; `string'
	call	_msg_errorf
	pop	ecx
	pop	ecx
	jmp	SHORT $L86075
$L86074:
; Line 1753
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1754
	mov	DWORD PTR _plr[esi+32], 12		; 0000000cH
; Line 1755
	movzx	eax, BYTE PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1756
	movzx	eax, BYTE PTR [edi+2]
	mov	DWORD PTR _plr[esi+40], eax
; Line 1757
	movzx	eax, WORD PTR [edi+5]
	mov	DWORD PTR _plr[esi+44], eax
; Line 1758
	movzx	eax, WORD PTR [edi+3]
; Line 1760
	and	BYTE PTR _plr[esi+169], 0
	mov	DWORD PTR _plr[esi+164], eax
	mov	al, BYTE PTR _plr[esi+184]
	mov	BYTE PTR _plr[esi+168], al
$L86075:
; Line 1765
	push	7
	pop	eax
	pop	edi
	pop	esi
; Line 1766
	ret	0
@On_SPELLXY@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_TSPELLXY@8
_TEXT	SEGMENT
@On_TSPELLXY@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1770
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	$L86084
	mov	esi, edx
	mov	al, BYTE PTR _currlevel
	imul	esi, 21720				; 000054d8H
	movzx	ecx, al
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L86084
; Line 1771
	test	al, al
	jne	SHORT $L86083
	movzx	eax, WORD PTR [edi+3]
	imul	eax, 56					; 00000038H
	cmp	DWORD PTR _spelldata[eax+24], 0
	jne	SHORT $L86083
; Line 1781
	lea	eax, DWORD PTR _plr[esi+320]
	push	eax
	push	OFFSET FLAT:??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ ; `string'
	call	_msg_errorf
	pop	ecx
	pop	ecx
	jmp	SHORT $L86084
$L86083:
; Line 1772
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1773
	mov	DWORD PTR _plr[esi+32], 12		; 0000000cH
; Line 1774
	movzx	eax, BYTE PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1775
	movzx	eax, BYTE PTR [edi+2]
	mov	DWORD PTR _plr[esi+40], eax
; Line 1776
	movzx	eax, WORD PTR [edi+5]
	mov	DWORD PTR _plr[esi+44], eax
; Line 1777
	movzx	eax, WORD PTR [edi+3]
	mov	DWORD PTR _plr[esi+164], eax
; Line 1778
	mov	al, BYTE PTR _plr[esi+176]
	mov	BYTE PTR _plr[esi+168], al
; Line 1779
	mov	BYTE PTR _plr[esi+169], 2
$L86084:
; Line 1784
	push	7
	pop	eax
	pop	edi
	pop	esi
; Line 1785
	ret	0
@On_TSPELLXY@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_OPOBJXY@8
_TEXT	SEGMENT
@On_OPOBJXY@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1789
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	push	edi
	mov	ebx, edx
	mov	esi, ecx
	je	SHORT $L86090
	mov	edi, ebx
	imul	edi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[edi+52]
	jne	SHORT $L86090
; Line 1790
	movzx	eax, WORD PTR [esi+3]
	imul	eax, 120				; 00000078H
	xor	ecx, ecx
	cmp	DWORD PTR _object[eax+56], ecx
	jne	SHORT $L86092
	cmp	DWORD PTR _object[eax+76], ecx
	jne	SHORT $L86092
; Line 1793
	push	1
	jmp	SHORT $L86990
$L86092:
; Line 1791
	push	ecx
$L86990:
	movzx	eax, BYTE PTR [esi+2]
	movzx	edx, BYTE PTR [esi+1]
	mov	ecx, ebx
	push	eax
	call	@MakePlrPath@16
; Line 1794
	mov	DWORD PTR _plr[edi+32], 13		; 0000000dH
; Line 1795
	movzx	eax, WORD PTR [esi+3]
	mov	DWORD PTR _plr[edi+36], eax
$L86090:
; Line 1798
	push	5
	pop	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 1799
	ret	0
@On_OPOBJXY@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_DISARMXY@8
_TEXT	SEGMENT
@On_DISARMXY@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1803
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	push	edi
	mov	ebx, edx
	mov	esi, ecx
	je	SHORT $L86099
	mov	edi, ebx
	imul	edi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[edi+52]
	jne	SHORT $L86099
; Line 1804
	movzx	eax, WORD PTR [esi+3]
	imul	eax, 120				; 00000078H
	xor	ecx, ecx
	cmp	DWORD PTR _object[eax+56], ecx
	jne	SHORT $L86101
	cmp	DWORD PTR _object[eax+76], ecx
	jne	SHORT $L86101
; Line 1807
	push	1
	jmp	SHORT $L86994
$L86101:
; Line 1805
	push	ecx
$L86994:
	movzx	eax, BYTE PTR [esi+2]
	movzx	edx, BYTE PTR [esi+1]
	mov	ecx, ebx
	push	eax
	call	@MakePlrPath@16
; Line 1808
	mov	DWORD PTR _plr[edi+32], 14		; 0000000eH
; Line 1809
	movzx	eax, WORD PTR [esi+3]
	mov	DWORD PTR _plr[edi+36], eax
$L86099:
; Line 1812
	push	5
	pop	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 1813
	ret	0
@On_DISARMXY@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_OPOBJT@8
_TEXT	SEGMENT
@On_OPOBJT@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1817
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	je	SHORT $L86108
	imul	eax, 21720				; 000054d8H
	movzx	edx, BYTE PTR _currlevel
	cmp	edx, DWORD PTR _plr[eax+52]
	jne	SHORT $L86108
; Line 1818
	mov	DWORD PTR _plr[eax+32], 18		; 00000012H
; Line 1819
	movzx	ecx, WORD PTR [ecx+1]
	mov	DWORD PTR _plr[eax+36], ecx
$L86108:
; Line 1822
	push	3
	pop	eax
; Line 1823
	ret	0
@On_OPOBJT@8 ENDP
_TEXT	ENDS
EXTRN	_abs:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_ATTACKID@8
_TEXT	SEGMENT
@On_ATTACKID@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1827
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebp
	push	esi
	push	edi
	mov	ebp, edx
	mov	edi, ecx
	je	$L86114
	mov	esi, ebp
	imul	esi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[esi+52]
	jne	SHORT $L86114
; Line 1828
	movzx	eax, WORD PTR [edi+1]
	imul	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR _plr[esi+56]
	push	ebx
	sub	ecx, DWORD PTR _monster[eax+40]
	push	ecx
	call	_abs
	mov	ebx, eax
; Line 1829
	mov	ecx, DWORD PTR _plr[esi+60]
	movzx	eax, WORD PTR [edi+1]
	imul	eax, 228				; 000000e4H
	sub	ecx, DWORD PTR _monster[eax+44]
	push	ecx
	call	_abs
	pop	ecx
; Line 1830
	cmp	ebx, 1
	pop	ecx
	pop	ebx
	jg	SHORT $L86118
	cmp	eax, 1
	jle	SHORT $L86117
$L86118:
; Line 1831
	movzx	eax, WORD PTR [edi+1]
	imul	eax, 228				; 000000e4H
	push	0
	mov	ecx, ebp
	push	DWORD PTR _monster[eax+44]
	mov	edx, DWORD PTR _monster[eax+40]
	call	@MakePlrPath@16
$L86117:
; Line 1832
	mov	DWORD PTR _plr[esi+32], 20		; 00000014H
; Line 1833
	movzx	eax, WORD PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
$L86114:
; Line 1836
	push	3
	pop	eax
	pop	edi
	pop	esi
	pop	ebp
; Line 1837
	ret	0
@On_ATTACKID@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_ATTACKPID@8
_TEXT	SEGMENT
@On_ATTACKPID@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1841
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	push	edi
	mov	ebx, edx
	mov	edi, ecx
	je	SHORT $L86124
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[esi+52]
	jne	SHORT $L86124
; Line 1842
	movzx	eax, WORD PTR [edi+1]
	imul	eax, 21720				; 000054d8H
	push	0
	mov	ecx, ebx
	push	DWORD PTR _plr[eax+68]
	mov	edx, DWORD PTR _plr[eax+64]
	call	@MakePlrPath@16
; Line 1843
	mov	DWORD PTR _plr[esi+32], 21		; 00000015H
; Line 1844
	movzx	eax, WORD PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
$L86124:
; Line 1847
	push	3
	pop	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 1848
	ret	0
@On_ATTACKPID@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_RATTACKID@8
_TEXT	SEGMENT
@On_RATTACKID@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1852
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	SHORT $L86130
	mov	esi, edx
	imul	esi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[esi+52]
	jne	SHORT $L86130
; Line 1853
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1854
	mov	DWORD PTR _plr[esi+32], 22		; 00000016H
; Line 1855
	movzx	eax, WORD PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
$L86130:
; Line 1858
	push	3
	pop	eax
	pop	edi
	pop	esi
; Line 1859
	ret	0
@On_RATTACKID@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_RATTACKPID@8
_TEXT	SEGMENT
@On_RATTACKPID@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1863
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	SHORT $L86136
	mov	esi, edx
	imul	esi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[esi+52]
	jne	SHORT $L86136
; Line 1864
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1865
	mov	DWORD PTR _plr[esi+32], 23		; 00000017H
; Line 1866
	movzx	eax, WORD PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
$L86136:
; Line 1869
	push	3
	pop	eax
	pop	edi
	pop	esi
; Line 1870
	ret	0
@On_RATTACKPID@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_SPELLID@8
_TEXT	SEGMENT
@On_SPELLID@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1874
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	$L86145
	mov	esi, edx
	mov	al, BYTE PTR _currlevel
	imul	esi, 21720				; 000054d8H
	movzx	ecx, al
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L86145
; Line 1875
	test	al, al
	jne	SHORT $L86144
	movzx	eax, WORD PTR [edi+3]
	imul	eax, 56					; 00000038H
	cmp	DWORD PTR _spelldata[eax+24], 0
	jne	SHORT $L86144
; Line 1884
	lea	eax, DWORD PTR _plr[esi+320]
	push	eax
	push	OFFSET FLAT:??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ ; `string'
	call	_msg_errorf
	pop	ecx
	pop	ecx
	jmp	SHORT $L86145
$L86144:
; Line 1876
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1877
	mov	DWORD PTR _plr[esi+32], 24		; 00000018H
; Line 1878
	movzx	eax, WORD PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1879
	movzx	eax, WORD PTR [edi+5]
	mov	DWORD PTR _plr[esi+40], eax
; Line 1880
	movzx	eax, WORD PTR [edi+3]
; Line 1882
	and	BYTE PTR _plr[esi+169], 0
	mov	DWORD PTR _plr[esi+164], eax
	mov	al, BYTE PTR _plr[esi+184]
	mov	BYTE PTR _plr[esi+168], al
$L86145:
; Line 1887
	push	7
	pop	eax
	pop	edi
	pop	esi
; Line 1888
	ret	0
@On_SPELLID@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_SPELLPID@8
_TEXT	SEGMENT
@On_SPELLPID@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1892
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	$L86154
	mov	esi, edx
	mov	al, BYTE PTR _currlevel
	imul	esi, 21720				; 000054d8H
	movzx	ecx, al
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L86154
; Line 1893
	test	al, al
	jne	SHORT $L86153
	movzx	eax, WORD PTR [edi+3]
	imul	eax, 56					; 00000038H
	cmp	DWORD PTR _spelldata[eax+24], 0
	jne	SHORT $L86153
; Line 1902
	lea	eax, DWORD PTR _plr[esi+320]
	push	eax
	push	OFFSET FLAT:??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ ; `string'
	call	_msg_errorf
	pop	ecx
	pop	ecx
	jmp	SHORT $L86154
$L86153:
; Line 1894
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1895
	mov	DWORD PTR _plr[esi+32], 25		; 00000019H
; Line 1896
	movzx	eax, WORD PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1897
	movzx	eax, WORD PTR [edi+5]
	mov	DWORD PTR _plr[esi+40], eax
; Line 1898
	movzx	eax, WORD PTR [edi+3]
; Line 1900
	and	BYTE PTR _plr[esi+169], 0
	mov	DWORD PTR _plr[esi+164], eax
	mov	al, BYTE PTR _plr[esi+184]
	mov	BYTE PTR _plr[esi+168], al
$L86154:
; Line 1905
	push	7
	pop	eax
	pop	edi
	pop	esi
; Line 1906
	ret	0
@On_SPELLPID@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_TSPELLID@8
_TEXT	SEGMENT
@On_TSPELLID@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1910
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	$L86163
	mov	esi, edx
	mov	al, BYTE PTR _currlevel
	imul	esi, 21720				; 000054d8H
	movzx	ecx, al
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L86163
; Line 1911
	test	al, al
	jne	SHORT $L86162
	movzx	eax, WORD PTR [edi+3]
	imul	eax, 56					; 00000038H
	cmp	DWORD PTR _spelldata[eax+24], 0
	jne	SHORT $L86162
; Line 1920
	lea	eax, DWORD PTR _plr[esi+320]
	push	eax
	push	OFFSET FLAT:??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ ; `string'
	call	_msg_errorf
	pop	ecx
	pop	ecx
	jmp	SHORT $L86163
$L86162:
; Line 1912
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1913
	mov	DWORD PTR _plr[esi+32], 24		; 00000018H
; Line 1914
	movzx	eax, WORD PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1915
	movzx	eax, WORD PTR [edi+5]
	mov	DWORD PTR _plr[esi+40], eax
; Line 1916
	movzx	eax, WORD PTR [edi+3]
	mov	DWORD PTR _plr[esi+164], eax
; Line 1917
	mov	al, BYTE PTR _plr[esi+176]
	mov	BYTE PTR _plr[esi+168], al
; Line 1918
	mov	BYTE PTR _plr[esi+169], 2
$L86163:
; Line 1923
	push	7
	pop	eax
	pop	edi
	pop	esi
; Line 1924
	ret	0
@On_TSPELLID@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_TSPELLPID@8
_TEXT	SEGMENT
@On_TSPELLPID@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1928
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	$L86172
	mov	esi, edx
	mov	al, BYTE PTR _currlevel
	imul	esi, 21720				; 000054d8H
	movzx	ecx, al
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L86172
; Line 1929
	test	al, al
	jne	SHORT $L86171
	movzx	eax, WORD PTR [edi+3]
	imul	eax, 56					; 00000038H
	cmp	DWORD PTR _spelldata[eax+24], 0
	jne	SHORT $L86171
; Line 1938
	lea	eax, DWORD PTR _plr[esi+320]
	push	eax
	push	OFFSET FLAT:??_C@_0BO@OEJO@?$CFs?5has?5cast?5an?5illegal?5spell?4?$AA@ ; `string'
	call	_msg_errorf
	pop	ecx
	pop	ecx
	jmp	SHORT $L86172
$L86171:
; Line 1930
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 1931
	mov	DWORD PTR _plr[esi+32], 25		; 00000019H
; Line 1932
	movzx	eax, WORD PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 1933
	movzx	eax, WORD PTR [edi+5]
	mov	DWORD PTR _plr[esi+40], eax
; Line 1934
	movzx	eax, WORD PTR [edi+3]
	mov	DWORD PTR _plr[esi+164], eax
; Line 1935
	mov	al, BYTE PTR _plr[esi+176]
	mov	BYTE PTR _plr[esi+168], al
; Line 1936
	mov	BYTE PTR _plr[esi+169], 2
$L86172:
; Line 1941
	push	7
	pop	eax
	pop	edi
	pop	esi
; Line 1942
	ret	0
@On_TSPELLPID@8 ENDP
_TEXT	ENDS
EXTRN	@M_GetKnockback@4:NEAR
EXTRN	@M_StartHit@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_KNOCKBACK@8
_TEXT	SEGMENT
@On_KNOCKBACK@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1946
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
	je	SHORT $L86178
	mov	eax, edi
	imul	eax, 21720				; 000054d8H
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR _plr[eax+52]
	jne	SHORT $L86178
; Line 1947
	movzx	ecx, WORD PTR [esi+1]
	call	@M_GetKnockback@4
; Line 1948
	movzx	ecx, WORD PTR [esi+1]
	push	0
	mov	edx, edi
	call	@M_StartHit@12
$L86178:
; Line 1951
	push	3
	pop	eax
	pop	edi
	pop	esi
; Line 1952
	ret	0
@On_KNOCKBACK@8 ENDP
_TEXT	ENDS
EXTRN	@DoResurrect@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_RESURRECT@8
_TEXT	SEGMENT
@On_RESURRECT@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1956
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	esi, edx
	jne	SHORT $L86184
; Line 1957
	mov	edx, ecx
	push	3
	mov	ecx, esi
	call	@msg_send_packet@12
; Line 1958
	jmp	SHORT $L86185
$L86184:
; Line 1959
	movzx	edx, WORD PTR [ecx+1]
	mov	ecx, esi
	call	@DoResurrect@8
; Line 1960
	mov	ecx, esi
	call	@check_update_plr@4
$L86185:
; Line 1963
	push	3
	pop	eax
	pop	esi
; Line 1964
	ret	0
@On_RESURRECT@8 ENDP
_TEXT	ENDS
EXTRN	@DoHealOther@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_HEALOTHER@8
_TEXT	SEGMENT
@On_HEALOTHER@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1968
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	je	SHORT $L86191
	imul	edx, 21720				; 000054d8H
	push	esi
	movzx	esi, BYTE PTR _currlevel
	cmp	esi, DWORD PTR _plr[edx+52]
	pop	esi
	jne	SHORT $L86191
; Line 1969
	movzx	edx, WORD PTR [ecx+1]
	mov	ecx, eax
	call	@DoHealOther@8
$L86191:
; Line 1971
	push	3
	pop	eax
; Line 1972
	ret	0
@On_HEALOTHER@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_TALKXY@8
_TEXT	SEGMENT
@On_TALKXY@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1976
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	eax, edx
	mov	edi, ecx
	je	SHORT $L86197
	mov	esi, eax
	imul	esi, 21720				; 000054d8H
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR _plr[esi+52]
	jne	SHORT $L86197
; Line 1977
	movzx	ecx, BYTE PTR [edi+2]
	movzx	edx, BYTE PTR [edi+1]
	push	0
	push	ecx
	mov	ecx, eax
	call	@MakePlrPath@16
; Line 1978
	mov	DWORD PTR _plr[esi+32], 17		; 00000011H
; Line 1979
	movzx	eax, WORD PTR [edi+3]
	mov	DWORD PTR _plr[esi+36], eax
$L86197:
; Line 1982
	push	5
	pop	eax
	pop	edi
	pop	esi
; Line 1983
	ret	0
@On_TALKXY@8 ENDP
_TEXT	ENDS
EXTRN	@StartNewLvl@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_NEWLVL@8
_TEXT	SEGMENT
@On_NEWLVL@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1987
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86203
; Line 1988
	mov	edx, ecx
	push	5
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 1989
	jmp	SHORT $L86205
$L86203:
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86205
; Line 1990
	movzx	edx, WORD PTR [ecx+3]
	push	edx
	movzx	edx, WORD PTR [ecx+1]
	mov	ecx, eax
	call	@StartNewLvl@12
$L86205:
; Line 1992
	push	5
	pop	eax
; Line 1993
	ret	0
@On_NEWLVL@8 ENDP
_TEXT	ENDS
EXTRN	_pcurs:DWORD
EXTRN	@StartWarpLvl@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_WARP@8
_TEXT	SEGMENT
@On_WARP@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 1997
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	esi, edx
	jne	SHORT $L86211
; Line 1998
	mov	edx, ecx
	push	3
	mov	ecx, esi
	call	@msg_send_packet@12
; Line 1999
	jmp	SHORT $L86213
$L86211:
; Line 2000
	movzx	edx, WORD PTR [ecx+1]
	mov	ecx, esi
	call	@StartWarpLvl@8
; Line 2001
	mov	eax, DWORD PTR _myplr
	cmp	esi, eax
	jne	SHORT $L86213
	cmp	DWORD PTR _pcurs, 12			; 0000000cH
	jl	SHORT $L86213
; Line 2002
	mov	esi, eax
	push	edi
	imul	esi, 21720				; 000054d8H
	push	92					; 0000005cH
	add	esi, OFFSET FLAT:_plr+21176
	pop	ecx
	mov	edi, OFFSET FLAT:_item+46736
	rep movsd
; Line 2003
	push	127					; 0000007fH
	mov	ecx, eax
	pop	edx
	call	@AutoGetItem@8
	pop	edi
$L86213:
; Line 2007
	push	3
	pop	eax
	pop	esi
; Line 2008
	ret	0
@On_WARP@8 ENDP
_TEXT	ENDS
EXTRN	@M_SyncStartKill@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_MONSTDEATH@8
_TEXT	SEGMENT
@On_MONSTDEATH@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2012
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	eax, edx
	mov	esi, ecx
	jne	SHORT $L86219
; Line 2013
	push	5
	mov	edx, esi
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2014
	jmp	SHORT $L86221
$L86219:
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86221
; Line 2015
	mov	ecx, eax
	push	edi
	imul	ecx, 21720				; 000054d8H
	lea	edi, DWORD PTR _plr[ecx+52]
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR [edi]
	jne	SHORT $L86222
; Line 2016
	movzx	edx, BYTE PTR [esi+1]
	movzx	ecx, WORD PTR [esi+3]
	push	eax
	movzx	eax, BYTE PTR [esi+2]
	push	eax
	call	@M_SyncStartKill@16
$L86222:
; Line 2017
	mov	al, BYTE PTR [edi]
	mov	dl, BYTE PTR [esi+1]
	movzx	ecx, WORD PTR [esi+3]
	push	eax
	mov	al, BYTE PTR [esi+2]
	push	eax
	call	@delta_kill_monster@16
	pop	edi
$L86221:
; Line 2020
	push	5
	pop	eax
	pop	esi
; Line 2021
	ret	0
@On_MONSTDEATH@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_KILLGOLEM@8
_TEXT	SEGMENT
@On_KILLGOLEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2025
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
	jne	SHORT $L86228
; Line 2026
	push	5
	mov	edx, esi
	mov	ecx, edi
	call	@msg_send_packet@12
; Line 2027
	jmp	SHORT $L86230
$L86228:
	cmp	edi, DWORD PTR _myplr
	je	SHORT $L86230
; Line 2028
	movzx	ax, BYTE PTR _currlevel
	cmp	ax, WORD PTR [esi+3]
	jne	SHORT $L86231
; Line 2029
	movzx	eax, BYTE PTR [esi+2]
	movzx	edx, BYTE PTR [esi+1]
	push	edi
	push	eax
	mov	ecx, edi
	call	@M_SyncStartKill@16
$L86231:
; Line 2030
	mov	eax, edi
	mov	dl, BYTE PTR [esi+1]
	imul	eax, 21720				; 000054d8H
	mov	ecx, edi
	mov	al, BYTE PTR _plr[eax+52]
	push	eax
	mov	al, BYTE PTR [esi+2]
	push	eax
	call	@delta_kill_monster@16
$L86230:
; Line 2033
	push	5
	pop	eax
	pop	edi
	pop	esi
; Line 2034
	ret	0
@On_KILLGOLEM@8 ENDP
_TEXT	ENDS
EXTRN	_missileactive:BYTE
EXTRN	_missile:BYTE
EXTRN	_nummissiles:DWORD
EXTRN	@AddMissile@40:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_AWAKEGOLEM@8
_TEXT	SEGMENT
@On_AWAKEGOLEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2038
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	esi, edx
	jne	SHORT $L86237
; Line 2039
	mov	edx, ecx
	push	10					; 0000000aH
	mov	ecx, esi
	call	@msg_send_packet@12
; Line 2040
	jmp	$L86249
$L86237:
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	movzx	edx, BYTE PTR _currlevel
	cmp	edx, DWORD PTR _plr[eax+52]
	je	SHORT $L86239
; Line 2041
	mov	al, BYTE PTR [ecx+9]
	mov	edx, esi
	push	eax
	call	@delta_sync_golem@12
; Line 2042
	jmp	SHORT $L86249
$L86239:
	cmp	esi, DWORD PTR _myplr
	je	SHORT $L86249
; Line 2046
	mov	ebx, DWORD PTR _nummissiles
	xor	ebp, ebp
	inc	ebp
	xor	edi, edi
	test	ebx, ebx
	jle	SHORT $L87051
$L86244:
; Line 2047
	mov	edx, DWORD PTR _missileactive[edi*4]
; Line 2048
	imul	edx, 176				; 000000b0H
	cmp	DWORD PTR _missile[edx], 33		; 00000021H
	jne	SHORT $L86245
	cmp	DWORD PTR _missile[edx+116], esi
	jne	SHORT $L86245
; Line 2049
	xor	ebp, ebp
$L86245:
; Line 2046
	inc	edi
	cmp	edi, ebx
	jl	SHORT $L86244
; Line 2053
	test	ebp, ebp
	je	SHORT $L86249
$L87051:
; Line 2054
	movzx	edx, BYTE PTR [ecx+3]
	push	1
	push	0
	push	esi
	push	0
	push	33					; 00000021H
	push	edx
	movzx	edx, BYTE PTR [ecx+2]
	movzx	ecx, BYTE PTR [ecx+1]
	push	edx
	mov	edx, DWORD PTR _plr[eax+60]
	push	ecx
	mov	ecx, DWORD PTR _plr[eax+56]
	call	@AddMissile@40
$L86249:
; Line 2057
	push	10					; 0000000aH
	pop	eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2058
	ret	0
@On_AWAKEGOLEM@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_MONSTDAMAGE@8
_TEXT	SEGMENT
@On_MONSTDAMAGE@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2062
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	edx, ecx
	jne	SHORT $L86255
; Line 2063
	push	5
	mov	ecx, edi
	call	@msg_send_packet@12
; Line 2064
	jmp	$L86259
$L86255:
	cmp	edi, DWORD PTR _myplr
	je	$L86259
; Line 2065
	mov	eax, edi
	imul	eax, 21720				; 000054d8H
	lea	ebx, DWORD PTR _plr[eax+52]
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [ebx]
	jne	SHORT $L86259
; Line 2066
	movzx	eax, WORD PTR [edx+1]
	imul	eax, 228				; 000000e4H
	mov	ecx, edi
	lea	esi, DWORD PTR _monster[eax+191]
	mov	al, 1
	shl	al, cl
	or	BYTE PTR [esi], al
; Line 2068
	movzx	eax, WORD PTR [edx+1]
	imul	eax, 228				; 000000e4H
	lea	ecx, DWORD PTR _monster[eax+148]
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $L86259
; Line 2069
	movzx	esi, WORD PTR [edx+3]
	sub	eax, esi
; Line 2070
	push	64					; 00000040H
	mov	DWORD PTR [ecx], eax
	pop	ecx
	movzx	eax, WORD PTR [edx+1]
	imul	eax, 228				; 000000e4H
	lea	eax, DWORD PTR _monster[eax+148]
	mov	esi, DWORD PTR [eax]
	and	esi, -64				; ffffffc0H
	cmp	esi, ecx
	jge	SHORT $L86260
; Line 2071
	mov	DWORD PTR [eax], ecx
$L86260:
; Line 2072
	movzx	ecx, WORD PTR [edx+1]
	mov	al, BYTE PTR [ebx]
	push	eax
	mov	eax, ecx
	imul	eax, 228				; 000000e4H
	mov	edx, DWORD PTR _monster[eax+148]
	call	@delta_monster_hp@12
$L86259:
; Line 2077
	push	5
	pop	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 2078
	ret	0
@On_MONSTDAMAGE@8 ENDP
_TEXT	ENDS
EXTRN	@StartPlayerKill@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_PLRDEAD@8
_TEXT	SEGMENT
@On_PLRDEAD@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2082
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86266
; Line 2083
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2084
	jmp	SHORT $L86269
$L86266:
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86268
; Line 2085
	movzx	edx, WORD PTR [ecx+1]
	mov	ecx, eax
	call	@StartPlayerKill@8
; Line 2086
	jmp	SHORT $L86269
$L86268:
; Line 2087
	mov	ecx, eax
	call	@check_update_plr@4
$L86269:
; Line 2089
	push	3
	pop	eax
; Line 2090
	ret	0
@On_PLRDEAD@8 ENDP
_TEXT	ENDS
EXTRN	_drawhpflag:DWORD
EXTRN	@SyncPlrKill@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_PLRDAMAGE@8
_TEXT	SEGMENT
@On_PLRDAMAGE@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2093
	push	ebx
	mov	eax, edx
; Line 2094
	movzx	edx, BYTE PTR [ecx+1]
	push	esi
	push	edi
	mov	edi, DWORD PTR _myplr
	cmp	edx, edi
	jne	$L86279
	mov	bl, BYTE PTR _currlevel
	test	bl, bl
	je	$L86279
; Line 2095
	xor	edx, edx
	inc	edx
	cmp	BYTE PTR _gbBufferMsgs, dl
	je	SHORT $L86279
	imul	eax, 21720				; 000054d8H
	movzx	esi, bl
	cmp	esi, DWORD PTR _plr[eax+52]
	jne	SHORT $L86279
	cmp	DWORD PTR [ecx+2], 192000		; 0002ee00H
	ja	SHORT $L86279
; Line 2096
	mov	eax, edi
	imul	eax, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[eax+408]
	test	esi, -64				; ffffffc0H
	jle	SHORT $L86279
; Line 2097
	mov	DWORD PTR _drawhpflag, edx
; Line 2098
	sub	esi, DWORD PTR [ecx+2]
	mov	DWORD PTR _plr[eax+408], esi
; Line 2099
	mov	ecx, DWORD PTR [ecx+2]
	lea	esi, DWORD PTR _plr[eax+400]
	sub	DWORD PTR [esi], ecx
; Line 2100
	mov	ecx, DWORD PTR _plr[eax+412]
	cmp	DWORD PTR _plr[eax+408], ecx
	jle	SHORT $L86278
; Line 2101
	mov	DWORD PTR _plr[eax+408], ecx
; Line 2102
	mov	ecx, DWORD PTR _plr[eax+404]
	mov	DWORD PTR [esi], ecx
$L86278:
; Line 2104
	test	DWORD PTR _plr[eax+408], -64		; ffffffc0H
	jg	SHORT $L86279
; Line 2105
	mov	ecx, edi
	call	@SyncPlrKill@8
$L86279:
; Line 2110
	push	6
	pop	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 2111
	ret	0
@On_PLRDAMAGE@8 ENDP
_TEXT	ENDS
PUBLIC	@delta_sync_object@12
; Function compile flags: /Ogsy
;	COMDAT @On_OPENDOOR@8
_TEXT	SEGMENT
@On_OPENDOOR@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2115
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	edi
	mov	eax, edx
	mov	edi, ecx
; Line 2116
	mov	ecx, eax
	jne	SHORT $L86285
	push	3
	mov	edx, edi
	call	@msg_send_packet@12
; Line 2117
	jmp	SHORT $L86286
$L86285:
; Line 2118
	imul	ecx, 21720				; 000054d8H
	push	esi
	lea	esi, DWORD PTR _plr[ecx+52]
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR [esi]
	jne	SHORT $L86287
; Line 2119
	movzx	ecx, WORD PTR [edi+1]
	push	ecx
	push	43					; 0000002bH
	pop	edx
	mov	ecx, eax
	call	@SyncOpObject@12
$L86287:
; Line 2120
	mov	al, BYTE PTR [esi]
	mov	dl, 43					; 0000002bH
	movzx	ecx, WORD PTR [edi+1]
	push	eax
	call	@delta_sync_object@12
	pop	esi
$L86286:
; Line 2123
	push	3
	pop	eax
	pop	edi
; Line 2124
	ret	0
@On_OPENDOOR@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @delta_sync_object@12
_TEXT	SEGMENT
_bLevel$ = 8
@delta_sync_object@12 PROC NEAR				; COMDAT
; _oi$ = ecx
; _bCmd$ = dl
; Line 2128
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L86295
; Line 2130
	movzx	eax, BYTE PTR _bLevel$[esp-4]
	imul	eax, 4721				; 00001271H
	mov	BYTE PTR _sgbDeltaChanged, 1
	mov	BYTE PTR _sgLevels[eax+ecx+2794], dl
$L86295:
; Line 2132
	ret	4
@delta_sync_object@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_CLOSEDOOR@8
_TEXT	SEGMENT
@On_CLOSEDOOR@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2137
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	edi
	mov	eax, edx
	mov	edi, ecx
; Line 2138
	mov	ecx, eax
	jne	SHORT $L86301
	push	3
	mov	edx, edi
	call	@msg_send_packet@12
; Line 2139
	jmp	SHORT $L86302
$L86301:
; Line 2140
	imul	ecx, 21720				; 000054d8H
	push	esi
	lea	esi, DWORD PTR _plr[ecx+52]
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR [esi]
	jne	SHORT $L86303
; Line 2141
	movzx	ecx, WORD PTR [edi+1]
	push	ecx
	push	44					; 0000002cH
	pop	edx
	mov	ecx, eax
	call	@SyncOpObject@12
$L86303:
; Line 2142
	mov	al, BYTE PTR [esi]
	mov	dl, 44					; 0000002cH
	movzx	ecx, WORD PTR [edi+1]
	push	eax
	call	@delta_sync_object@12
	pop	esi
$L86302:
; Line 2145
	push	3
	pop	eax
	pop	edi
; Line 2146
	ret	0
@On_CLOSEDOOR@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_OPERATEOBJ@8
_TEXT	SEGMENT
@On_OPERATEOBJ@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2150
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	edi
	mov	eax, edx
	mov	edi, ecx
; Line 2151
	mov	ecx, eax
	jne	SHORT $L86309
	push	3
	mov	edx, edi
	call	@msg_send_packet@12
; Line 2152
	jmp	SHORT $L86310
$L86309:
; Line 2153
	imul	ecx, 21720				; 000054d8H
	push	esi
	lea	esi, DWORD PTR _plr[ecx+52]
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR [esi]
	jne	SHORT $L86311
; Line 2154
	movzx	ecx, WORD PTR [edi+1]
	push	ecx
	push	45					; 0000002dH
	pop	edx
	mov	ecx, eax
	call	@SyncOpObject@12
$L86311:
; Line 2155
	mov	al, BYTE PTR [esi]
	mov	dl, 45					; 0000002dH
	movzx	ecx, WORD PTR [edi+1]
	push	eax
	call	@delta_sync_object@12
	pop	esi
$L86310:
; Line 2158
	push	3
	pop	eax
	pop	edi
; Line 2159
	ret	0
@On_OPERATEOBJ@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_PLROPOBJ@8
_TEXT	SEGMENT
@On_PLROPOBJ@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2163
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	eax, edx
	mov	esi, ecx
	jne	SHORT $L86317
; Line 2164
	push	5
	mov	edx, esi
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2165
	jmp	SHORT $L86318
$L86317:
; Line 2166
	imul	eax, 21720				; 000054d8H
	push	edi
	lea	edi, DWORD PTR _plr[eax+52]
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [edi]
	jne	SHORT $L86319
; Line 2167
	movzx	eax, WORD PTR [esi+3]
	movzx	ecx, WORD PTR [esi+1]
	push	eax
	push	46					; 0000002eH
	pop	edx
	call	@SyncOpObject@12
$L86319:
; Line 2168
	mov	al, BYTE PTR [edi]
	mov	dl, 46					; 0000002eH
	movzx	ecx, WORD PTR [esi+3]
	push	eax
	call	@delta_sync_object@12
	pop	edi
$L86318:
; Line 2171
	push	5
	pop	eax
	pop	esi
; Line 2172
	ret	0
@On_PLROPOBJ@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_BREAKOBJ@8
_TEXT	SEGMENT
@On_BREAKOBJ@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2176
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	eax, edx
	mov	esi, ecx
	jne	SHORT $L86325
; Line 2177
	push	5
	mov	edx, esi
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2178
	jmp	SHORT $L86326
$L86325:
; Line 2179
	imul	eax, 21720				; 000054d8H
	push	edi
	lea	edi, DWORD PTR _plr[eax+52]
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [edi]
	jne	SHORT $L86327
; Line 2180
	movzx	edx, WORD PTR [esi+3]
	movzx	ecx, WORD PTR [esi+1]
	call	@SyncBreakObj@8
$L86327:
; Line 2181
	mov	al, BYTE PTR [edi]
	mov	dl, 47					; 0000002fH
	movzx	ecx, WORD PTR [esi+3]
	push	eax
	call	@delta_sync_object@12
	pop	edi
$L86326:
; Line 2184
	push	5
	pop	eax
	pop	esi
; Line 2185
	ret	0
@On_BREAKOBJ@8 ENDP
_TEXT	ENDS
EXTRN	@CheckInvSwap@24:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_CHANGEPLRITEMS@8
_TEXT	SEGMENT
@On_CHANGEPLRITEMS@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2189
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86333
; Line 2190
	mov	edx, ecx
	push	11					; 0000000bH
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2191
	jmp	SHORT $L86335
$L86333:
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86335
; Line 2192
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	dx, WORD PTR [ecx+4]
	push	DWORD PTR [ecx+6]
	push	edx
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	mov	dl, BYTE PTR [ecx+1]
	mov	ecx, eax
	call	@CheckInvSwap@24
$L86335:
; Line 2194
	push	11					; 0000000bH
	pop	eax
; Line 2195
	ret	0
@On_CHANGEPLRITEMS@8 ENDP
_TEXT	ENDS
EXTRN	@inv_update_rem_item@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_DELPLRITEMS@8
_TEXT	SEGMENT
@On_DELPLRITEMS@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2199
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86341
; Line 2200
	mov	edx, ecx
	push	2
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2201
	jmp	SHORT $L86343
$L86341:
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86343
; Line 2202
	mov	dl, BYTE PTR [ecx+1]
	mov	ecx, eax
	call	@inv_update_rem_item@8
$L86343:
; Line 2204
	push	2
	pop	eax
; Line 2205
	ret	0
@On_DELPLRITEMS@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_PLRLEVEL@8
_TEXT	SEGMENT
@On_PLRLEVEL@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2209
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86349
; Line 2210
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2211
	jmp	SHORT $L86351
$L86349:
	cmp	WORD PTR [ecx+1], 51			; 00000033H
	ja	SHORT $L86351
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86351
; Line 2212
	imul	eax, 21720				; 000054d8H
	mov	cl, BYTE PTR [ecx+1]
	mov	BYTE PTR _plr[eax+440], cl
$L86351:
; Line 2214
	push	3
	pop	eax
; Line 2215
	ret	0
@On_PLRLEVEL@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_DROPITEM@8
_TEXT	SEGMENT
@On_DROPITEM@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2219
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86357
; Line 2220
	mov	edx, ecx
	push	22					; 00000016H
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2221
	jmp	SHORT $L86358
$L86357:
; Line 2222
	imul	eax, 21720				; 000054d8H
	movzx	edx, BYTE PTR [ecx+1]
	mov	al, BYTE PTR _plr[eax+52]
	push	eax
	movzx	eax, BYTE PTR [ecx+2]
	push	eax
	call	@delta_put_item@16
$L86358:
; Line 2224
	push	22					; 00000016H
	pop	eax
; Line 2225
	ret	0
@On_DROPITEM@8 ENDP
_TEXT	ENDS
EXTRN	@multi_player_joins@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_SEND_PLRINFO@8
_TEXT	SEGMENT
@On_SEND_PLRINFO@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2229
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	esi, ecx
	mov	eax, edx
; Line 2230
	mov	edx, esi
	jne	SHORT $L86364
	movzx	ecx, WORD PTR [esi+3]
	add	ecx, 5
	push	ecx
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2231
	jmp	SHORT $L86365
$L86364:
; Line 2232
	xor	ecx, ecx
	cmp	BYTE PTR [esi], 2
	sete	cl
	push	ecx
	mov	ecx, eax
	call	@multi_player_joins@12
$L86365:
; Line 2234
	movzx	eax, WORD PTR [esi+3]
	add	eax, 5
	pop	esi
; Line 2235
	ret	0
@On_SEND_PLRINFO@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_ACK_PLRINFO@8
_TEXT	SEGMENT
@On_ACK_PLRINFO@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2239
	jmp	@On_SEND_PLRINFO@8
@On_ACK_PLRINFO@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@ ; `string'
EXTRN	_dFlags:BYTE
EXTRN	@SyncInitPlr@4:NEAR
EXTRN	_EventPlrMsg:NEAR
EXTRN	@AddVision@16:NEAR
EXTRN	_gbActivePlayers:BYTE
EXTRN	@LoadPlrGFX@8:NEAR
EXTRN	@NewPlrAnim@20:NEAR
EXTRN	@StartStand@8:NEAR
;	COMDAT ??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@
_DATA	SEGMENT
??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@ DB 'P'
	DB	'layer ''%s'' (level %d) just joined the game', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @On_PLAYER_JOINLEVEL@8
_TEXT	SEGMENT
@On_PLAYER_JOINLEVEL@8 PROC NEAR			; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2244
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	push	edi
	mov	ebx, edx
	mov	edi, ecx
	jne	SHORT $L86376
; Line 2245
	push	5
	mov	edx, edi
	mov	ecx, ebx
	call	@msg_send_packet@12
; Line 2246
	jmp	$L86381
$L86376:
; Line 2247
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	and	BYTE PTR _plr[esi+319], 0
; Line 2248
	lea	ecx, DWORD PTR _plr[esi+320]
	cmp	BYTE PTR [ecx], 0
	je	SHORT $L86378
	lea	eax, DWORD PTR _plr[esi+29]
	cmp	BYTE PTR [eax], 0
	jne	SHORT $L86378
; Line 2249
	mov	BYTE PTR [eax], 1
; Line 2250
	inc	BYTE PTR _gbActivePlayers
; Line 2251
	movsx	eax, BYTE PTR _plr[esi+440]
	push	eax
	push	ecx
	push	OFFSET FLAT:??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@ ; `string'
	call	_EventPlrMsg
	add	esp, 12					; 0000000cH
$L86378:
; Line 2254
	cmp	BYTE PTR _plr[esi+29], 0
	je	$L86381
	cmp	DWORD PTR _myplr, ebx
	je	$L86381
; Line 2255
	movzx	eax, BYTE PTR [edi+1]
	mov	DWORD PTR _plr[esi+56], eax
; Line 2256
	movzx	eax, BYTE PTR [edi+2]
	mov	DWORD PTR _plr[esi+60], eax
; Line 2257
	lea	eax, DWORD PTR _plr[esi+52]
	movzx	ecx, WORD PTR [edi+3]
; Line 2258
	and	DWORD PTR _plr[esi+536], 0
	mov	DWORD PTR [eax], ecx
; Line 2259
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR [eax]
	jne	$L86381
; Line 2260
	xor	edx, edx
	mov	ecx, ebx
	inc	edx
	call	@LoadPlrGFX@8
; Line 2261
	mov	ecx, ebx
	call	@SyncInitPlr@4
; Line 2262
	test	DWORD PTR _plr[esi+408], -64		; ffffffc0H
; Line 2263
	mov	ecx, ebx
	jle	SHORT $L86382
	xor	edx, edx
	call	@StartStand@8
; Line 2264
	jmp	SHORT $L86383
$L86382:
; Line 2265
	and	DWORD PTR _plr[esi+120], 0
; Line 2266
	mov	edx, 128				; 00000080H
	call	@LoadPlrGFX@8
; Line 2268
	push	DWORD PTR _plr[esi+848]
	mov	edx, DWORD PTR _plr[esi+812]
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi], 8
	push	1
	push	DWORD PTR _plr[esi+844]
	call	@NewPlrAnim@20
; Line 2269
	mov	eax, DWORD PTR _plr[esi+136]
	lea	ecx, DWORD PTR [eax-1]
; Line 2270
	add	eax, eax
	mov	DWORD PTR _plr[esi+496], eax
; Line 2271
	mov	eax, DWORD PTR _plr[esi+56]
	imul	eax, 112				; 00000070H
	mov	DWORD PTR _plr[esi+140], ecx
	mov	ecx, DWORD PTR _plr[esi+60]
	lea	eax, DWORD PTR _dFlags[eax+ecx]
	or	BYTE PTR [eax], 4
$L86383:
; Line 2274
	xor	eax, eax
	cmp	ebx, DWORD PTR _myplr
	mov	edx, DWORD PTR _plr[esi+60]
	mov	ecx, DWORD PTR _plr[esi+56]
	sete	al
	push	eax
	movsx	eax, BYTE PTR _plr[esi+318]
	push	eax
	call	@AddVision@16
; Line 2275
	or	DWORD PTR _plr[esi+156], -1
	mov	DWORD PTR _plr[esi+160], eax
$L86381:
; Line 2280
	push	5
	pop	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 2281
	ret	0
@On_PLAYER_JOINLEVEL@8 ENDP
_TEXT	ENDS
PUBLIC	@delta_open_portal@24
EXTRN	@AddWarpMissile@12:NEAR
EXTRN	@AddInTownPortal@4:NEAR
EXTRN	@ActivatePortal@24:NEAR
EXTRN	@RemovePortalMissile@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_ACTIVATEPORTAL@8
_TEXT	SEGMENT
@On_ACTIVATEPORTAL@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2284
	push	ebx
; Line 2285
	xor	ebx, ebx
	push	esi
	push	edi
	inc	ebx
	mov	edi, edx
	cmp	BYTE PTR _gbBufferMsgs, bl
	mov	esi, ecx
; Line 2286
	mov	ecx, edi
	jne	SHORT $L86389
	push	9
	mov	edx, esi
	call	@msg_send_packet@12
; Line 2287
	jmp	$L86390
$L86389:
; Line 2288
	movzx	eax, WORD PTR [esi+7]
	push	eax
	movzx	eax, WORD PTR [esi+5]
	push	eax
	movzx	eax, WORD PTR [esi+3]
	movzx	edx, BYTE PTR [esi+1]
	push	eax
	movzx	eax, BYTE PTR [esi+2]
	push	eax
	call	@ActivatePortal@24
; Line 2289
	cmp	edi, DWORD PTR _myplr
	je	SHORT $L86403
; Line 2290
	mov	al, BYTE PTR _currlevel
; Line 2291
	mov	ecx, edi
	test	al, al
	jne	SHORT $L86392
	call	@AddInTownPortal@4
; Line 2292
	jmp	SHORT $L86403
$L86392:
	imul	ecx, 21720				; 000054d8H
	movzx	eax, al
	cmp	eax, DWORD PTR _plr[ecx+52]
	jne	SHORT $L86394
; Line 2295
	mov	edx, DWORD PTR _nummissiles
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $L87108
$L86397:
; Line 2296
	mov	eax, DWORD PTR _missileactive[ecx*4]
; Line 2297
	imul	eax, 176				; 000000b0H
	cmp	DWORD PTR _missile[eax], 10		; 0000000aH
	jne	SHORT $L86398
	cmp	DWORD PTR _missile[eax+116], edi
	jne	SHORT $L86398
; Line 2298
	xor	ebx, ebx
$L86398:
; Line 2295
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $L86397
; Line 2302
	test	ebx, ebx
	je	SHORT $L86403
$L87108:
; Line 2303
	movzx	eax, BYTE PTR [esi+2]
	movzx	edx, BYTE PTR [esi+1]
	push	eax
	mov	ecx, edi
	call	@AddWarpMissile@12
; Line 2304
	jmp	SHORT $L86403
$L86394:
; Line 2305
	mov	ecx, edi
	call	@RemovePortalMissile@4
$L86403:
; Line 2307
	mov	al, BYTE PTR [esi+7]
	mov	dl, BYTE PTR [esi+1]
	push	eax
	mov	al, BYTE PTR [esi+5]
	push	eax
	mov	al, BYTE PTR [esi+3]
	push	eax
	mov	al, BYTE PTR [esi+2]
	push	eax
	mov	ecx, edi
	call	@delta_open_portal@24
$L86390:
; Line 2310
	push	9
	pop	eax
	pop	edi
	pop	esi
	pop	ebx
; Line 2311
	ret	0
@On_ACTIVATEPORTAL@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @delta_open_portal@24
_TEXT	SEGMENT
_y$ = 8
_bLevel$ = 12
_bLType$ = 16
_bSetLvl$ = 20
@delta_open_portal@24 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _x$ = dl
; Line 2316
	lea	eax, DWORD PTR [ecx+ecx*4]
; Line 2317
	mov	cl, BYTE PTR _y$[esp-4]
	mov	BYTE PTR _sgbDeltaChanged, 1
	mov	BYTE PTR _sgJunk[eax+1], cl
; Line 2318
	mov	cl, BYTE PTR _bLevel$[esp-4]
	mov	BYTE PTR _sgJunk[eax+2], cl
; Line 2319
	mov	cl, BYTE PTR _bLType$[esp-4]
	mov	BYTE PTR _sgJunk[eax+3], cl
; Line 2320
	mov	cl, BYTE PTR _bSetLvl$[esp-4]
	mov	BYTE PTR _sgJunk[eax], dl
	mov	BYTE PTR _sgJunk[eax+4], cl
; Line 2321
	ret	16					; 00000010H
@delta_open_portal@24 ENDP
_TEXT	ENDS
EXTRN	@DeactivatePortal@4:NEAR
EXTRN	@PortalOnLevel@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_DEACTIVATEPORTAL@8
_TEXT	SEGMENT
@On_DEACTIVATEPORTAL@8 PROC NEAR			; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2325
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	esi, edx
	jne	SHORT $L86422
; Line 2326
	mov	edx, ecx
	push	1
	mov	ecx, esi
	call	@msg_send_packet@12
; Line 2327
	jmp	SHORT $L86423
$L86422:
; Line 2328
	mov	ecx, esi
	call	@PortalOnLevel@4
	test	eax, eax
	je	SHORT $L86424
; Line 2329
	mov	ecx, esi
	call	@RemovePortalMissile@4
$L86424:
; Line 2330
	mov	ecx, esi
	call	@DeactivatePortal@4
; Line 2331
	mov	ecx, esi
	call	@RemovePlrPortal@4
$L86423:
; Line 2334
	xor	eax, eax
	pop	esi
	inc	eax
; Line 2335
	ret	0
@On_DEACTIVATEPORTAL@8 ENDP
_TEXT	ENDS
EXTRN	_deathflag:DWORD
EXTRN	_gamemenu_off:NEAR
EXTRN	@RestartTownLvl@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_RETOWN@8
_TEXT	SEGMENT
@On_RETOWN@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2339
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	mov	esi, edx
	jne	SHORT $L86430
; Line 2340
	mov	edx, ecx
	push	1
	mov	ecx, esi
	call	@msg_send_packet@12
; Line 2341
	jmp	SHORT $L86431
$L86430:
; Line 2342
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L86432
; Line 2343
	and	DWORD PTR _deathflag, 0
; Line 2344
	call	_gamemenu_off
$L86432:
; Line 2346
	mov	ecx, esi
	call	@RestartTownLvl@4
$L86431:
; Line 2349
	xor	eax, eax
	pop	esi
	inc	eax
; Line 2350
	ret	0
@On_RETOWN@8 ENDP
_TEXT	ENDS
EXTRN	@SetPlrStr@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_SETSTR@8
_TEXT	SEGMENT
@On_SETSTR@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2354
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86438
; Line 2355
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2356
	jmp	SHORT $L86440
$L86438:
	mov	cx, WORD PTR [ecx+1]
	cmp	cx, 750					; 000002eeH
	ja	SHORT $L86440
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86440
; Line 2357
	movzx	edx, cx
	mov	ecx, eax
	call	@SetPlrStr@8
$L86440:
; Line 2359
	push	3
	pop	eax
; Line 2360
	ret	0
@On_SETSTR@8 ENDP
_TEXT	ENDS
EXTRN	@SetPlrDex@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_SETDEX@8
_TEXT	SEGMENT
@On_SETDEX@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2364
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86446
; Line 2365
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2366
	jmp	SHORT $L86448
$L86446:
	mov	cx, WORD PTR [ecx+1]
	cmp	cx, 750					; 000002eeH
	ja	SHORT $L86448
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86448
; Line 2367
	movzx	edx, cx
	mov	ecx, eax
	call	@SetPlrDex@8
$L86448:
; Line 2369
	push	3
	pop	eax
; Line 2370
	ret	0
@On_SETDEX@8 ENDP
_TEXT	ENDS
EXTRN	@SetPlrMag@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_SETMAG@8
_TEXT	SEGMENT
@On_SETMAG@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2374
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86454
; Line 2375
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2376
	jmp	SHORT $L86456
$L86454:
	mov	cx, WORD PTR [ecx+1]
	cmp	cx, 750					; 000002eeH
	ja	SHORT $L86456
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86456
; Line 2377
	movzx	edx, cx
	mov	ecx, eax
	call	@SetPlrMag@8
$L86456:
; Line 2379
	push	3
	pop	eax
; Line 2380
	ret	0
@On_SETMAG@8 ENDP
_TEXT	ENDS
EXTRN	@SetPlrVit@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_SETVIT@8
_TEXT	SEGMENT
@On_SETVIT@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2384
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86462
; Line 2385
	mov	edx, ecx
	push	3
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2386
	jmp	SHORT $L86464
$L86462:
	mov	cx, WORD PTR [ecx+1]
	cmp	cx, 750					; 000002eeH
	ja	SHORT $L86464
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86464
; Line 2387
	movzx	edx, cx
	mov	ecx, eax
	call	@SetPlrVit@8
$L86464:
; Line 2389
	push	3
	pop	eax
; Line 2390
	ret	0
@On_SETVIT@8 ENDP
_TEXT	ENDS
PUBLIC	@On_STRING2@8
; Function compile flags: /Ogsy
;	COMDAT @On_STRING@8
_TEXT	SEGMENT
@On_STRING@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2393
	mov	eax, edx
; Line 2394
	mov	edx, ecx
	mov	ecx, eax
	jmp	@On_STRING2@8
@On_STRING@8 ENDP
_TEXT	ENDS
EXTRN	@SendPlrMsg@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_STRING2@8
_TEXT	SEGMENT
@On_STRING2@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _pCmd$ = edx
; Line 2398
	push	ebx
	push	esi
; Line 2399
	lea	esi, DWORD PTR [edx+1]
	push	edi
	push	esi
	mov	edi, ecx
	call	_strlen
; Line 2400
	cmp	BYTE PTR _gbBufferMsgs, 0
	pop	ecx
	mov	ebx, eax
	jne	SHORT $L86476
; Line 2401
	mov	edx, esi
	mov	ecx, edi
	call	@SendPlrMsg@8
$L86476:
	pop	edi
; Line 2403
	lea	eax, DWORD PTR [ebx+2]
	pop	esi
	pop	ebx
; Line 2404
	ret	0
@On_STRING2@8 ENDP
_TEXT	ENDS
EXTRN	@SetMultiQuest@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_SYNCQUEST@8
_TEXT	SEGMENT
@On_SYNCQUEST@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2408
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	eax, edx
	jne	SHORT $L86482
; Line 2409
	mov	edx, ecx
	push	5
	mov	ecx, eax
	call	@msg_send_packet@12
; Line 2410
	jmp	SHORT $L86483
$L86482:
; Line 2411
	cmp	eax, DWORD PTR _myplr
	je	SHORT $L86484
; Line 2412
	movzx	eax, BYTE PTR [ecx+4]
	movzx	edx, BYTE PTR [ecx+2]
	push	eax
	movzx	eax, BYTE PTR [ecx+3]
	movzx	ecx, BYTE PTR [ecx+1]
	push	eax
	call	@SetMultiQuest@16
$L86484:
; Line 2413
	mov	BYTE PTR _sgbDeltaChanged, 1
$L86483:
; Line 2416
	push	5
	pop	eax
; Line 2417
	ret	0
@On_SYNCQUEST@8 ENDP
_TEXT	ENDS
EXTRN	@DeleteMissile@8:NEAR
EXTRN	@ClearMissileSpot@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @On_ENDSHIELD@8
_TEXT	SEGMENT
@On_ENDSHIELD@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2423
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	ebx
	push	esi
	mov	ebx, edx
	je	SHORT $L86494
	cmp	ebx, DWORD PTR _myplr
	je	SHORT $L86494
	mov	eax, ebx
	imul	eax, 21720				; 000054d8H
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR _plr[eax+52]
	jne	SHORT $L86494
; Line 2424
	xor	esi, esi
	cmp	DWORD PTR _nummissiles, esi
	jle	SHORT $L86494
	push	edi
$L86492:
; Line 2425
	mov	edi, DWORD PTR _missileactive[esi*4]
; Line 2426
	mov	eax, edi
	imul	eax, 176				; 000000b0H
	cmp	DWORD PTR _missile[eax], 13		; 0000000dH
	jne	SHORT $L86493
	cmp	DWORD PTR _missile[eax+116], ebx
	jne	SHORT $L86493
; Line 2427
	mov	ecx, edi
	call	@ClearMissileSpot@4
; Line 2428
	mov	edx, esi
	mov	ecx, edi
	call	@DeleteMissile@8
$L86493:
	inc	esi
	cmp	esi, DWORD PTR _nummissiles
	jl	SHORT $L86492
	pop	edi
$L86494:
; Line 2433
	xor	eax, eax
	pop	esi
	inc	eax
	pop	ebx
; Line 2434
	ret	0
@On_ENDSHIELD@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_CHEAT_EXPERIENCE@8
_TEXT	SEGMENT
@On_CHEAT_EXPERIENCE@8 PROC NEAR			; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2446
	xor	eax, eax
	inc	eax
; Line 2447
	ret	0
@On_CHEAT_EXPERIENCE@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_CHEAT_SPELL_LEVEL@8
_TEXT	SEGMENT
@On_CHEAT_SPELL_LEVEL@8 PROC NEAR			; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2457
	xor	eax, eax
	inc	eax
; Line 2458
	ret	0
@On_CHEAT_SPELL_LEVEL@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_DEBUG@8
_TEXT	SEGMENT
@On_DEBUG@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2462
	xor	eax, eax
	inc	eax
; Line 2463
	ret	0
@On_DEBUG@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_NOVA@8
_TEXT	SEGMENT
@On_NOVA@8 PROC NEAR					; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2467
	cmp	BYTE PTR _gbBufferMsgs, 1
	push	esi
	push	edi
	mov	edi, ecx
	je	SHORT $L86517
	mov	esi, edx
	imul	esi, 21720				; 000054d8H
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR _plr[esi+52]
	jne	SHORT $L86517
	cmp	edx, DWORD PTR _myplr
	je	SHORT $L86517
; Line 2468
	mov	ecx, edx
	call	@ClrPlrPath@4
; Line 2469
	mov	DWORD PTR _plr[esi+164], 18		; 00000012H
; Line 2470
	mov	BYTE PTR _plr[esi+168], 4
; Line 2471
	mov	BYTE PTR _plr[esi+169], 3
; Line 2472
	mov	DWORD PTR _plr[esi+32], 12		; 0000000cH
; Line 2473
	movzx	eax, BYTE PTR [edi+1]
	mov	DWORD PTR _plr[esi+36], eax
; Line 2474
	movzx	eax, BYTE PTR [edi+2]
	mov	DWORD PTR _plr[esi+40], eax
$L86517:
; Line 2477
	push	3
	pop	eax
	pop	edi
	pop	esi
; Line 2478
	ret	0
@On_NOVA@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_SETSHIELD@8
_TEXT	SEGMENT
@On_SETSHIELD@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2482
	xor	eax, eax
	inc	eax
	cmp	BYTE PTR _gbBufferMsgs, al
	je	SHORT $L86523
; Line 2483
	imul	edx, 21720				; 000054d8H
	mov	BYTE PTR _plr[edx+21628], al
$L86523:
; Line 2486
	ret	0
@On_SETSHIELD@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @On_REMSHIELD@8
_TEXT	SEGMENT
@On_REMSHIELD@8 PROC NEAR				; COMDAT
; _pCmd$ = ecx
; _pnum$ = edx
; Line 2490
	xor	eax, eax
	inc	eax
	cmp	BYTE PTR _gbBufferMsgs, al
	je	SHORT $L86529
; Line 2491
	imul	edx, 21720				; 000054d8H
	and	BYTE PTR _plr[edx+21628], 0
$L86529:
; Line 2494
	ret	0
@On_REMSHIELD@8 ENDP
_TEXT	ENDS
END
