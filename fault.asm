; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/fault.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BK@LEGK@Exception?5code?3?5?$CF08X?5?$CFs?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@LNDJ@Fault?5address?3?7?$CF08X?5?$CF02X?3?$CF08X?5?$CFs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@CANK@?$AN?6Registers?3?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DN@EBI@EAX?3?$CF08X?$AN?6EBX?3?$CF08X?$AN?6ECX?3?$CF08X?$AN?6ED@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@PDNB@CS?3EIP?3?$CF04X?3?$CF08X?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@KBGC@SS?3ESP?3?$CF04X?3?$CF08X?5EBP?3?$CF08X?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@HGPK@DS?3?$CF04X?5ES?3?$CF04X?5FS?3?$CF04X?5GS?3?$CF04X?$AN@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CHGA@Flags?3?$CF08X?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@NALK@Stack?5bytes?3?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@GEHN@Code?5bytes?3?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02PIMC@?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08MKIC@0x?$CF08x?3?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05OOAB@?$CF02x?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03MFGH@?5?5?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FCOA@?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02JBML@?$CFc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09EEIC@?$CKunknown?$CK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DG@FNKK@Call?5stack?3?$AN?6Address?5?5Frame?5?5?5?5L@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KMHD@?$CF08X?5?$CF08X?5?$CF04X?3?$CF08X?5?$CFs?$AN?6?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@IPJK@STACK_OVERFLOW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@BKD@FLT_DIVIDE_BY_ZERO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@MHJO@FLT_INEXACT_RESULT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@OFKA@FLT_INVALID_OPERATION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLAK@FLT_OVERFLOW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LEGN@FLT_STACK_CHECK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@OLMF@FLT_UNDERFLOW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CPIN@INT_DIVIDE_BY_ZERO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CANE@INT_OVERFLOW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@PNLJ@PRIV_INSTRUCTION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@HIGK@FLT_DENORMAL_OPERAND?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@MJDA@INVALID_HANDLE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPNJ@ILLEGAL_INSTRUCTION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BKEI@NONCONTINUABLE_EXCEPTION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DNMD@INVALID_DISPOSITION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@MPHG@ARRAY_BOUNDS_EXCEEDED?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@JOEG@IN_PAGE_ERROR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JMBF@GUARD_PAGE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FLNF@DATATYPE_MISALIGNMENT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@EIGK@BREAKPOINT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JPO@SINGLE_STEP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@EGIM@ACCESS_VIOLATION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CMOA@NTDLL?4DLL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _exception_c_init
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _exception_install_filter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _j_exception_init_filter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _exception_init_filter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TopLevelExceptionFilter@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @exception_hex_format@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @exception_unknown_module@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @exception_call_stack@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @exception_get_error_type@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @exception_set_filter@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _exception_set_filter_ptr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _exception_get_filter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_exception_c_init_funcs
_DATA	SEGMENT
COMM	_lpTopLevelExceptionFilter:DWORD
_DATA	ENDS
CRT$XCU	SEGMENT
_exception_c_init_funcs DD FLAT:_exception_c_init
CRT$XCU	ENDS
PUBLIC	_exception_install_filter
PUBLIC	_j_exception_init_filter
; Function compile flags: /Ogsy
;	COMDAT _exception_c_init
_TEXT	SEGMENT
_exception_c_init PROC NEAR				; COMDAT
; File Source/fault.cpp
; Line 13
	call	_exception_install_filter
; Line 14
	jmp	_j_exception_init_filter
_exception_c_init ENDP
_TEXT	ENDS
PUBLIC	@exception_set_filter@0
; Function compile flags: /Ogsy
;	COMDAT _exception_install_filter
_TEXT	SEGMENT
_exception_install_filter PROC NEAR			; COMDAT
; Line 22
	jmp	@exception_set_filter@0
_exception_install_filter ENDP
_TEXT	ENDS
PUBLIC	_exception_init_filter
EXTRN	_atexit:NEAR
; Function compile flags: /Ogsy
;	COMDAT _j_exception_init_filter
_TEXT	SEGMENT
_j_exception_init_filter PROC NEAR			; COMDAT
; Line 27
	push	OFFSET FLAT:_exception_init_filter
	call	_atexit
	pop	ecx
; Line 28
	ret	0
_j_exception_init_filter ENDP
_TEXT	ENDS
PUBLIC	_exception_set_filter_ptr
; Function compile flags: /Ogsy
;	COMDAT _exception_init_filter
_TEXT	SEGMENT
_exception_init_filter PROC NEAR			; COMDAT
; Line 32
	jmp	_exception_set_filter_ptr
_exception_init_filter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@LEGK@Exception?5code?3?5?$CF08X?5?$CFs?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0CD@LNDJ@Fault?5address?3?7?$CF08X?5?$CF02X?3?$CF08X?5?$CFs@ ; `string'
PUBLIC	??_C@_0P@CANK@?$AN?6Registers?3?$AN?6?$AA@	; `string'
PUBLIC	??_C@_0DN@EBI@EAX?3?$CF08X?$AN?6EBX?3?$CF08X?$AN?6ECX?3?$CF08X?$AN?6ED@ ; `string'
PUBLIC	??_C@_0BD@PDNB@CS?3EIP?3?$CF04X?3?$CF08X?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@KBGC@SS?3ESP?3?$CF04X?3?$CF08X?5EBP?3?$CF08X?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0CC@HGPK@DS?3?$CF04X?5ES?3?$CF04X?5FS?3?$CF04X?5GS?3?$CF04X?$AN@ ; `string'
PUBLIC	??_C@_0N@CHGA@Flags?3?$CF08X?$AN?6?$AA@		; `string'
PUBLIC	??_C@_0P@NALK@Stack?5bytes?3?$AN?6?$AA@		; `string'
PUBLIC	??_C@_0O@GEHN@Code?5bytes?3?$AN?6?$AA@		; `string'
PUBLIC	??_C@_02PIMC@?$AN?6?$AA@			; `string'
PUBLIC	_TopLevelExceptionFilter@4
PUBLIC	@exception_hex_format@8
PUBLIC	@exception_unknown_module@20
PUBLIC	@exception_call_stack@8
PUBLIC	@exception_get_error_type@12
EXTRN	_log_flush:NEAR
EXTRN	_log_printf:NEAR
EXTRN	_log_dump_computer_info:NEAR
;	COMDAT ??_C@_0BK@LEGK@Exception?5code?3?5?$CF08X?5?$CFs?$AN?6?$AA@
_DATA	SEGMENT
??_C@_0BK@LEGK@Exception?5code?3?5?$CF08X?5?$CFs?$AN?6?$AA@ DB 'Exception'
	DB	' code: %08X %s', 0dH, 0aH, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CD@LNDJ@Fault?5address?3?7?$CF08X?5?$CF02X?3?$CF08X?5?$CFs@
_DATA	SEGMENT
??_C@_0CD@LNDJ@Fault?5address?3?7?$CF08X?5?$CF02X?3?$CF08X?5?$CFs@ DB 'Fa'
	DB	'ult address:', 09H, '%08X %02X:%08X %s', 0dH, 0aH, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@CANK@?$AN?6Registers?3?$AN?6?$AA@
_DATA	SEGMENT
??_C@_0P@CANK@?$AN?6Registers?3?$AN?6?$AA@ DB 0dH, 0aH, 'Registers:', 0dH
	DB	0aH, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DN@EBI@EAX?3?$CF08X?$AN?6EBX?3?$CF08X?$AN?6ECX?3?$CF08X?$AN?6ED@
_DATA	SEGMENT
??_C@_0DN@EBI@EAX?3?$CF08X?$AN?6EBX?3?$CF08X?$AN?6ECX?3?$CF08X?$AN?6ED@ DB 'E'
	DB	'AX:%08X', 0dH, 0aH, 'EBX:%08X', 0dH, 0aH, 'ECX:%08X', 0dH, 0aH
	DB	'EDX:%08X', 0dH, 0aH, 'ESI:%08X', 0dH, 0aH, 'EDI:%08X', 0dH, 0aH
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@PDNB@CS?3EIP?3?$CF04X?3?$CF08X?$AN?6?$AA@
_DATA	SEGMENT
??_C@_0BD@PDNB@CS?3EIP?3?$CF04X?3?$CF08X?$AN?6?$AA@ DB 'CS:EIP:%04X:%08X', 0dH
	DB	0aH, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@KBGC@SS?3ESP?3?$CF04X?3?$CF08X?5EBP?3?$CF08X?$AN?6?$AA@
_DATA	SEGMENT
??_C@_0BM@KBGC@SS?3ESP?3?$CF04X?3?$CF08X?5EBP?3?$CF08X?$AN?6?$AA@ DB 'SS:'
	DB	'ESP:%04X:%08X EBP:%08X', 0dH, 0aH, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CC@HGPK@DS?3?$CF04X?5ES?3?$CF04X?5FS?3?$CF04X?5GS?3?$CF04X?$AN@
_DATA	SEGMENT
??_C@_0CC@HGPK@DS?3?$CF04X?5ES?3?$CF04X?5FS?3?$CF04X?5GS?3?$CF04X?$AN@ DB 'D'
	DB	'S:%04X ES:%04X FS:%04X GS:%04X', 0dH, 0aH, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CHGA@Flags?3?$CF08X?$AN?6?$AA@
_DATA	SEGMENT
??_C@_0N@CHGA@Flags?3?$CF08X?$AN?6?$AA@ DB 'Flags:%08X', 0dH, 0aH, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@NALK@Stack?5bytes?3?$AN?6?$AA@
_DATA	SEGMENT
??_C@_0P@NALK@Stack?5bytes?3?$AN?6?$AA@ DB 'Stack bytes:', 0dH, 0aH, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@GEHN@Code?5bytes?3?$AN?6?$AA@
_DATA	SEGMENT
??_C@_0O@GEHN@Code?5bytes?3?$AN?6?$AA@ DB 'Code bytes:', 0dH, 0aH, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_02PIMC@?$AN?6?$AA@
_DATA	SEGMENT
??_C@_02PIMC@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _TopLevelExceptionFilter@4
_TEXT	SEGMENT
_ExceptionInfo$ = 8
_szExceptionNameBuf$ = -528
_szModuleName$ = -268
_sectionNumber$ = -4
_sectionOffset$ = -8
_TopLevelExceptionFilter@4 PROC NEAR			; COMDAT
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
; Line 44
	call	_log_dump_computer_info
; Line 45
	mov	ebx, DWORD PTR _ExceptionInfo$[ebp]
; Line 46
	mov	edi, 260				; 00000104H
	push	edi
	lea	edx, DWORD PTR _szExceptionNameBuf$[ebp]
	mov	esi, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi]
	call	@exception_get_error_type@12
; Line 47
	push	eax
	push	DWORD PTR [esi]
	push	OFFSET FLAT:??_C@_0BK@LEGK@Exception?5code?3?5?$CF08X?5?$CFs?$AN?6?$AA@ ; `string'
	call	_log_printf
; Line 49
	mov	ecx, DWORD PTR [esi+12]
	add	esp, 12					; 0000000cH
	lea	eax, DWORD PTR _sectionOffset$[ebp]
	lea	edx, DWORD PTR _szModuleName$[ebp]
	push	eax
	lea	eax, DWORD PTR _sectionNumber$[ebp]
	push	eax
	push	edi
	call	@exception_unknown_module@20
; Line 50
	lea	eax, DWORD PTR _szModuleName$[ebp]
	push	eax
	push	DWORD PTR _sectionOffset$[ebp]
	push	DWORD PTR _sectionNumber$[ebp]
	push	DWORD PTR [esi+12]
	push	OFFSET FLAT:??_C@_0CD@LNDJ@Fault?5address?3?7?$CF08X?5?$CF02X?3?$CF08X?5?$CFs@ ; `string'
	call	_log_printf
; Line 52
	mov	esi, DWORD PTR [ebx+4]
; Line 54
	push	OFFSET FLAT:??_C@_0P@CANK@?$AN?6Registers?3?$AN?6?$AA@ ; `string'
	call	_log_printf
; Line 62
	push	DWORD PTR [esi+156]
	push	DWORD PTR [esi+160]
	push	DWORD PTR [esi+168]
	push	DWORD PTR [esi+172]
	push	DWORD PTR [esi+164]
	push	DWORD PTR [esi+176]
	push	OFFSET FLAT:??_C@_0DN@EBI@EAX?3?$CF08X?$AN?6EBX?3?$CF08X?$AN?6ECX?3?$CF08X?$AN?6ED@ ; `string'
	call	_log_printf
; Line 63
	push	DWORD PTR [esi+184]
	push	DWORD PTR [esi+188]
	push	OFFSET FLAT:??_C@_0BD@PDNB@CS?3EIP?3?$CF04X?3?$CF08X?$AN?6?$AA@ ; `string'
	call	_log_printf
	add	esp, 64					; 00000040H
; Line 64
	push	DWORD PTR [esi+180]
	push	DWORD PTR [esi+196]
	push	DWORD PTR [esi+200]
	push	OFFSET FLAT:??_C@_0BM@KBGC@SS?3ESP?3?$CF04X?3?$CF08X?5EBP?3?$CF08X?$AN?6?$AA@ ; `string'
	call	_log_printf
; Line 65
	push	DWORD PTR [esi+140]
	push	DWORD PTR [esi+144]
	push	DWORD PTR [esi+148]
	push	DWORD PTR [esi+152]
	push	OFFSET FLAT:??_C@_0CC@HGPK@DS?3?$CF04X?5ES?3?$CF04X?5FS?3?$CF04X?5GS?3?$CF04X?$AN@ ; `string'
	call	_log_printf
; Line 67
	push	DWORD PTR [esi+192]
	push	OFFSET FLAT:??_C@_0N@CHGA@Flags?3?$CF08X?$AN?6?$AA@ ; `string'
	call	_log_printf
; Line 68
	mov	edx, DWORD PTR [esi+180]
	mov	ecx, DWORD PTR [esi+184]
	add	esp, 44					; 0000002cH
	call	@exception_call_stack@8
; Line 70
	push	OFFSET FLAT:??_C@_0P@NALK@Stack?5bytes?3?$AN?6?$AA@ ; `string'
	call	_log_printf
	pop	ecx
; Line 71
	mov	edx, 768				; 00000300H
	mov	ecx, DWORD PTR [esi+196]
	call	@exception_hex_format@8
; Line 73
	push	OFFSET FLAT:??_C@_0O@GEHN@Code?5bytes?3?$AN?6?$AA@ ; `string'
	call	_log_printf
	pop	ecx
; Line 74
	mov	ecx, DWORD PTR [esi+184]
	push	16					; 00000010H
	pop	edx
	call	@exception_hex_format@8
; Line 76
	push	OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@	; `string'
	call	_log_printf
; Line 77
	push	1
	call	_log_flush
; Line 79
	mov	eax, DWORD PTR _lpTopLevelExceptionFilter
	pop	ecx
	test	eax, eax
	pop	ecx
	je	SHORT $L85015
; Line 80
	push	ebx
	call	eax
	jmp	SHORT $L84992
$L85015:
; Line 81
	xor	eax, eax
$L84992:
	pop	edi
	pop	esi
	pop	ebx
; Line 82
	leave
	ret	4
_TopLevelExceptionFilter@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_08MKIC@0x?$CF08x?3?5?$AA@			; `string'
PUBLIC	??_C@_05OOAB@?$CF02x?5?$AA@			; `string'
PUBLIC	??_C@_03MFGH@?5?5?5?$AA@			; `string'
PUBLIC	??_C@_01FCOA@?5?$AA@				; `string'
PUBLIC	??_C@_02JBML@?$CFc?$AA@				; `string'
EXTRN	__pctype:DWORD
EXTRN	__isctype:NEAR
EXTRN	__imp__IsBadReadPtr@8:NEAR
EXTRN	___mb_cur_max:DWORD
;	COMDAT ??_C@_08MKIC@0x?$CF08x?3?5?$AA@
_DATA	SEGMENT
??_C@_08MKIC@0x?$CF08x?3?5?$AA@ DB '0x%08x: ', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05OOAB@?$CF02x?5?$AA@
_DATA	SEGMENT
??_C@_05OOAB@?$CF02x?5?$AA@ DB '%02x ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03MFGH@?5?5?5?$AA@
_DATA	SEGMENT
??_C@_03MFGH@?5?5?5?$AA@ DB '   ', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FCOA@?5?$AA@
_DATA	SEGMENT
??_C@_01FCOA@?5?$AA@ DB ' ', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02JBML@?$CFc?$AA@
_DATA	SEGMENT
??_C@_02JBML@?$CFc?$AA@ DB '%c', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @exception_hex_format@8
_TEXT	SEGMENT
_numBytes$ = -4
@exception_hex_format@8 PROC NEAR			; COMDAT
; _ptr$ = ecx
; _numBytes$ = edx
; Line 85
	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 90
	test	edx, edx
	mov	DWORD PTR _numBytes$[esp+20], edx
	mov	esi, ecx
	jbe	$L85284
	mov	ebp, 343				; 00000157H
$L85026:
; Line 91
	push	16					; 00000010H
	pop	ebx
	cmp	DWORD PTR _numBytes$[esp+20], ebx
	jae	SHORT $L85029
; Line 92
	mov	ebx, DWORD PTR _numBytes$[esp+20]
$L85029:
; Line 96
	push	ebx
	push	esi
	call	DWORD PTR __imp__IsBadReadPtr@8
	test	eax, eax
	jne	$L85284
; Line 99
	push	esi
	push	OFFSET FLAT:??_C@_08MKIC@0x?$CF08x?3?5?$AA@ ; `string'
	call	_log_printf
	pop	ecx
; Line 101
	xor	edi, edi
	pop	ecx
$L85032:
; Line 103
	cmp	edi, ebx
	mov	eax, OFFSET FLAT:??_C@_05OOAB@?$CF02x?5?$AA@ ; `string'
	jb	SHORT $L85036
; Line 104
	mov	eax, OFFSET FLAT:??_C@_03MFGH@?5?5?5?$AA@ ; `string'
$L85036:
; Line 105
	movzx	ecx, BYTE PTR [edi+esi]
	push	ecx
	push	eax
	call	_log_printf
; Line 106
	mov	eax, edi
	pop	ecx
	and	eax, 3
	pop	ecx
	cmp	al, 3
	jne	SHORT $L85033
; Line 107
	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	call	_log_printf
	pop	ecx
$L85033:
	inc	edi
	cmp	edi, 16					; 00000010H
	jb	SHORT $L85032
; Line 110
	xor	edi, edi
	test	ebx, ebx
	jbe	SHORT $L85042
$L85040:
; Line 111
	cmp	DWORD PTR ___mb_cur_max, 1
	movzx	eax, BYTE PTR [edi+esi]
	jle	SHORT $L85279
	push	ebp
	push	eax
	call	__isctype
	pop	ecx
	pop	ecx
	jmp	SHORT $L85280
$L85279:
	mov	ecx, DWORD PTR __pctype
	mov	ax, WORD PTR [ecx+eax*2]
	and	eax, ebp
$L85280:
	test	eax, eax
	je	SHORT $L85043
; Line 112
	mov	al, BYTE PTR [edi+esi]
; Line 113
	jmp	SHORT $L85044
$L85043:
; Line 114
	mov	al, 46					; 0000002eH
$L85044:
; Line 115
	movzx	eax, al
	push	eax
	push	OFFSET FLAT:??_C@_02JBML@?$CFc?$AA@	; `string'
	call	_log_printf
	inc	edi
	pop	ecx
	cmp	edi, ebx
	pop	ecx
	jb	SHORT $L85040
$L85042:
; Line 118
	push	OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@	; `string'
	call	_log_printf
; Line 119
	add	esi, ebx
; Line 120
	sub	DWORD PTR _numBytes$[esp+24], ebx
	pop	ecx
	jne	$L85026
$L85284:
; Line 122
	push	OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@	; `string'
	call	_log_printf
	pop	ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 123
	pop	ecx
	ret	0
@exception_hex_format@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_09EEIC@?$CKunknown?$CK?$AA@		; `string'
EXTRN	__imp__lstrcpynA@12:NEAR
EXTRN	__imp__GetModuleFileNameA@12:NEAR
EXTRN	__imp__GetModuleHandleA@4:NEAR
EXTRN	__imp__VirtualQuery@12:NEAR
;	COMDAT ??_C@_09EEIC@?$CKunknown?$CK?$AA@
_DATA	SEGMENT
??_C@_09EEIC@?$CKunknown?$CK?$AA@ DB '*unknown*', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @exception_unknown_module@20
_TEXT	SEGMENT
_lpModuleName$ = -8
_iMaxLength$ = 8
_sectionNum$ = 12
_sectionOffset$ = 16
_memInfo$ = -36
_dosHeader$ = -4
_i$ = 8
@exception_unknown_module@20 PROC NEAR			; COMDAT
; _lpAddress$ = ecx
; _lpModuleName$ = edx
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
; Line 135
	mov	edi, DWORD PTR __imp__lstrcpynA@12
	push	DWORD PTR _iMaxLength$[ebp]
	mov	ebx, OFFSET FLAT:??_C@_09EEIC@?$CKunknown?$CK?$AA@ ; `string'
	mov	DWORD PTR _lpModuleName$[ebp], edx
	mov	esi, ecx
	push	ebx
	push	edx
	call	edi
; Line 136
	mov	eax, DWORD PTR _sectionNum$[ebp]
; Line 139
	push	28					; 0000001cH
	and	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _sectionOffset$[ebp]
	and	DWORD PTR [eax], 0
	lea	eax, DWORD PTR _memInfo$[ebp]
	push	eax
	push	esi
	call	DWORD PTR __imp__VirtualQuery@12
	test	eax, eax
	je	$L85089
; Line 142
	mov	eax, DWORD PTR _memInfo$[ebp+4]
; Line 143
	test	eax, eax
	mov	DWORD PTR _dosHeader$[ebp], eax
	jne	SHORT $L85070
; Line 144
	push	eax
	call	DWORD PTR __imp__GetModuleHandleA@4
	mov	DWORD PTR _dosHeader$[ebp], eax
$L85070:
; Line 146
	push	DWORD PTR _iMaxLength$[ebp]
	push	DWORD PTR _lpModuleName$[ebp]
	push	DWORD PTR _dosHeader$[ebp]
	call	DWORD PTR __imp__GetModuleFileNameA@12
	test	eax, eax
	jne	SHORT $L85073
; Line 147
	push	DWORD PTR _iMaxLength$[ebp]
	push	ebx
	push	DWORD PTR _lpModuleName$[ebp]
	call	edi
; Line 148
	jmp	SHORT $L85089
$L85073:
; Line 151
	mov	ecx, DWORD PTR _dosHeader$[ebp]
	test	ecx, ecx
	je	SHORT $L85089
	cmp	WORD PTR [ecx], 23117			; 00005a4dH
	jne	SHORT $L85089
; Line 152
	mov	eax, DWORD PTR [ecx+60]
; Line 153
	test	eax, eax
	je	SHORT $L85089
; Line 154
	add	eax, ecx
; Line 155
	cmp	DWORD PTR [eax], 17744			; 00004550H
	jne	SHORT $L85089
; Line 156
	movzx	edx, WORD PTR [eax+20]
; Line 157
	movzx	edi, WORD PTR [eax+6]
; Line 159
	and	DWORD PTR _i$[ebp], 0
	sub	esi, ecx
	test	edi, edi
	lea	edx, DWORD PTR [edx+eax+24]
	jbe	SHORT $L85089
; Line 156
	lea	eax, DWORD PTR [edx+16]
$L85087:
; Line 160
	mov	edx, DWORD PTR [eax]
; Line 162
	mov	ebx, DWORD PTR [eax-8]
	mov	ecx, DWORD PTR [eax-4]
	cmp	edx, ebx
	ja	SHORT $L85090
; Line 163
	mov	edx, ebx
$L85090:
; Line 165
	cmp	esi, ecx
	jb	SHORT $L85088
	add	edx, ecx
	cmp	esi, edx
	jbe	SHORT $L85294
$L85088:
; Line 159
	inc	DWORD PTR _i$[ebp]
	add	eax, 40					; 00000028H
	cmp	DWORD PTR _i$[ebp], edi
	jb	SHORT $L85087
; Line 165
	jmp	SHORT $L85089
$L85294:
; Line 166
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _sectionNum$[ebp]
	inc	eax
; Line 167
	sub	esi, ecx
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _sectionOffset$[ebp]
	mov	DWORD PTR [eax], esi
$L85089:
	pop	edi
	pop	esi
	pop	ebx
; Line 174
	leave
	ret	12					; 0000000cH
@exception_unknown_module@20 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@FNKK@Call?5stack?3?$AN?6Address?5?5Frame?5?5?5?5L@ ; `string'
PUBLIC	??_C@_0BJ@KMHD@?$CF08X?5?$CF08X?5?$CF04X?3?$CF08X?5?$CFs?$AN?6?$AA@ ; `string'
EXTRN	__imp__IsBadWritePtr@8:NEAR
;	COMDAT ??_C@_0DG@FNKK@Call?5stack?3?$AN?6Address?5?5Frame?5?5?5?5L@
_DATA	SEGMENT
??_C@_0DG@FNKK@Call?5stack?3?$AN?6Address?5?5Frame?5?5?5?5L@ DB 'Call sta'
	DB	'ck:', 0dH, 0aH, 'Address  Frame    Logical addr  Module', 0dH
	DB	0aH, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KMHD@?$CF08X?5?$CF08X?5?$CF04X?3?$CF08X?5?$CFs?$AN?6?$AA@
_DATA	SEGMENT
??_C@_0BJ@KMHD@?$CF08X?5?$CF08X?5?$CF04X?3?$CF08X?5?$CFs?$AN?6?$AA@ DB '%'
	DB	'08X %08X %04X:%08X %s', 0dH, 0aH, 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @exception_call_stack@8
_TEXT	SEGMENT
_szModuleName$ = -268
_sectionNumber$ = -4
_sectionOffset$ = -8
@exception_call_stack@8 PROC NEAR			; COMDAT
; _instr$ = ecx
; _stackFrame$ = edx
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
; Line 182
	push	OFFSET FLAT:??_C@_0DG@FNKK@Call?5stack?3?$AN?6Address?5?5Frame?5?5?5?5L@ ; `string'
	mov	ebx, edx
	mov	edi, ecx
	call	_log_printf
	mov	esi, DWORD PTR __imp__IsBadWritePtr@8
	pop	ecx
$L85102:
; Line 184
	lea	eax, DWORD PTR _sectionOffset$[ebp]
	lea	edx, DWORD PTR _szModuleName$[ebp]
	push	eax
	lea	eax, DWORD PTR _sectionNumber$[ebp]
	push	eax
	push	260					; 00000104H
	mov	ecx, edi
	call	@exception_unknown_module@20
; Line 185
	lea	eax, DWORD PTR _szModuleName$[ebp]
	push	eax
	push	DWORD PTR _sectionOffset$[ebp]
	push	DWORD PTR _sectionNumber$[ebp]
	push	ebx
	push	edi
	push	OFFSET FLAT:??_C@_0BJ@KMHD@?$CF08X?5?$CF08X?5?$CF04X?3?$CF08X?5?$CFs?$AN?6?$AA@ ; `string'
	call	_log_printf
	add	esp, 24					; 00000018H
; Line 187
	push	8
	push	ebx
	call	esi
	test	eax, eax
	jne	SHORT $L85104
; Line 190
	mov	edi, DWORD PTR [ebx+4]
; Line 191
	mov	eax, ebx
; Line 192
	mov	ebx, DWORD PTR [ebx]
; Line 194
	test	bl, 3
	jne	SHORT $L85104
; Line 196
	cmp	ebx, eax
	jbe	SHORT $L85104
	push	8
	push	ebx
	call	esi
	test	eax, eax
	je	SHORT $L85102
$L85104:
; Line 198
	push	OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@	; `string'
	call	_log_printf
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
; Line 199
	leave
	ret	0
@exception_call_stack@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@IPJK@STACK_OVERFLOW?$AA@		; `string'
PUBLIC	??_C@_0BD@BKD@FLT_DIVIDE_BY_ZERO?$AA@		; `string'
PUBLIC	??_C@_0BD@MHJO@FLT_INEXACT_RESULT?$AA@		; `string'
PUBLIC	??_C@_0BG@OFKA@FLT_INVALID_OPERATION?$AA@	; `string'
PUBLIC	??_C@_0N@JLAK@FLT_OVERFLOW?$AA@			; `string'
PUBLIC	??_C@_0BA@LEGN@FLT_STACK_CHECK?$AA@		; `string'
PUBLIC	??_C@_0O@OLMF@FLT_UNDERFLOW?$AA@		; `string'
PUBLIC	??_C@_0BD@CPIN@INT_DIVIDE_BY_ZERO?$AA@		; `string'
PUBLIC	??_C@_0N@CANE@INT_OVERFLOW?$AA@			; `string'
PUBLIC	??_C@_0BB@PNLJ@PRIV_INSTRUCTION?$AA@		; `string'
PUBLIC	??_C@_0BF@HIGK@FLT_DENORMAL_OPERAND?$AA@	; `string'
PUBLIC	??_C@_0P@MJDA@INVALID_HANDLE?$AA@		; `string'
PUBLIC	??_C@_0BE@OPNJ@ILLEGAL_INSTRUCTION?$AA@		; `string'
PUBLIC	??_C@_0BJ@BKEI@NONCONTINUABLE_EXCEPTION?$AA@	; `string'
PUBLIC	??_C@_0BE@DNMD@INVALID_DISPOSITION?$AA@		; `string'
PUBLIC	??_C@_0BG@MPHG@ARRAY_BOUNDS_EXCEEDED?$AA@	; `string'
PUBLIC	??_C@_0O@JOEG@IN_PAGE_ERROR?$AA@		; `string'
PUBLIC	??_C@_0L@JMBF@GUARD_PAGE?$AA@			; `string'
PUBLIC	??_C@_0BG@FLNF@DATATYPE_MISALIGNMENT?$AA@	; `string'
PUBLIC	??_C@_0L@EIGK@BREAKPOINT?$AA@			; `string'
PUBLIC	??_C@_0M@JPO@SINGLE_STEP?$AA@			; `string'
PUBLIC	??_C@_0BB@EGIM@ACCESS_VIOLATION?$AA@		; `string'
PUBLIC	??_C@_09CMOA@NTDLL?4DLL?$AA@			; `string'
EXTRN	__imp__FormatMessageA@28:NEAR
;	COMDAT ??_C@_0BB@EGIM@ACCESS_VIOLATION?$AA@
_DATA	SEGMENT
??_C@_0BB@EGIM@ACCESS_VIOLATION?$AA@ DB 'ACCESS_VIOLATION', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@JPO@SINGLE_STEP?$AA@
_DATA	SEGMENT
??_C@_0M@JPO@SINGLE_STEP?$AA@ DB 'SINGLE_STEP', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@EIGK@BREAKPOINT?$AA@
_DATA	SEGMENT
??_C@_0L@EIGK@BREAKPOINT?$AA@ DB 'BREAKPOINT', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FLNF@DATATYPE_MISALIGNMENT?$AA@
_DATA	SEGMENT
??_C@_0BG@FLNF@DATATYPE_MISALIGNMENT?$AA@ DB 'DATATYPE_MISALIGNMENT', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@JMBF@GUARD_PAGE?$AA@
_DATA	SEGMENT
??_C@_0L@JMBF@GUARD_PAGE?$AA@ DB 'GUARD_PAGE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@JOEG@IN_PAGE_ERROR?$AA@
_DATA	SEGMENT
??_C@_0O@JOEG@IN_PAGE_ERROR?$AA@ DB 'IN_PAGE_ERROR', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@MPHG@ARRAY_BOUNDS_EXCEEDED?$AA@
_DATA	SEGMENT
??_C@_0BG@MPHG@ARRAY_BOUNDS_EXCEEDED?$AA@ DB 'ARRAY_BOUNDS_EXCEEDED', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DNMD@INVALID_DISPOSITION?$AA@
_DATA	SEGMENT
??_C@_0BE@DNMD@INVALID_DISPOSITION?$AA@ DB 'INVALID_DISPOSITION', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BKEI@NONCONTINUABLE_EXCEPTION?$AA@
_DATA	SEGMENT
??_C@_0BJ@BKEI@NONCONTINUABLE_EXCEPTION?$AA@ DB 'NONCONTINUABLE_EXCEPTION'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OPNJ@ILLEGAL_INSTRUCTION?$AA@
_DATA	SEGMENT
??_C@_0BE@OPNJ@ILLEGAL_INSTRUCTION?$AA@ DB 'ILLEGAL_INSTRUCTION', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@MJDA@INVALID_HANDLE?$AA@
_DATA	SEGMENT
??_C@_0P@MJDA@INVALID_HANDLE?$AA@ DB 'INVALID_HANDLE', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@HIGK@FLT_DENORMAL_OPERAND?$AA@
_DATA	SEGMENT
??_C@_0BF@HIGK@FLT_DENORMAL_OPERAND?$AA@ DB 'FLT_DENORMAL_OPERAND', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@BKD@FLT_DIVIDE_BY_ZERO?$AA@
_DATA	SEGMENT
??_C@_0BD@BKD@FLT_DIVIDE_BY_ZERO?$AA@ DB 'FLT_DIVIDE_BY_ZERO', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@MHJO@FLT_INEXACT_RESULT?$AA@
_DATA	SEGMENT
??_C@_0BD@MHJO@FLT_INEXACT_RESULT?$AA@ DB 'FLT_INEXACT_RESULT', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@OFKA@FLT_INVALID_OPERATION?$AA@
_DATA	SEGMENT
??_C@_0BG@OFKA@FLT_INVALID_OPERATION?$AA@ DB 'FLT_INVALID_OPERATION', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@JLAK@FLT_OVERFLOW?$AA@
_DATA	SEGMENT
??_C@_0N@JLAK@FLT_OVERFLOW?$AA@ DB 'FLT_OVERFLOW', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LEGN@FLT_STACK_CHECK?$AA@
_DATA	SEGMENT
??_C@_0BA@LEGN@FLT_STACK_CHECK?$AA@ DB 'FLT_STACK_CHECK', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@OLMF@FLT_UNDERFLOW?$AA@
_DATA	SEGMENT
??_C@_0O@OLMF@FLT_UNDERFLOW?$AA@ DB 'FLT_UNDERFLOW', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@CPIN@INT_DIVIDE_BY_ZERO?$AA@
_DATA	SEGMENT
??_C@_0BD@CPIN@INT_DIVIDE_BY_ZERO?$AA@ DB 'INT_DIVIDE_BY_ZERO', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CANE@INT_OVERFLOW?$AA@
_DATA	SEGMENT
??_C@_0N@CANE@INT_OVERFLOW?$AA@ DB 'INT_OVERFLOW', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@PNLJ@PRIV_INSTRUCTION?$AA@
_DATA	SEGMENT
??_C@_0BB@PNLJ@PRIV_INSTRUCTION?$AA@ DB 'PRIV_INSTRUCTION', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@IPJK@STACK_OVERFLOW?$AA@
_DATA	SEGMENT
??_C@_0P@IPJK@STACK_OVERFLOW?$AA@ DB 'STACK_OVERFLOW', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CMOA@NTDLL?4DLL?$AA@
_DATA	SEGMENT
??_C@_09CMOA@NTDLL?4DLL?$AA@ DB 'NTDLL.DLL', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @exception_get_error_type@12
_TEXT	SEGMENT
_nSize$ = 8
_v4$ = 8
@exception_get_error_type@12 PROC NEAR			; COMDAT
; _dwMessageId$ = ecx
; _lpString1$ = edx
; Line 206
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 210
	mov	eax, -1073741683			; c000008dH
	push	edi
	cmp	esi, eax
	mov	edi, edx
	ja	$L85303
	je	$L85154
	mov	eax, -1073741818			; c0000006H
	cmp	esi, eax
	ja	SHORT $L85304
	je	SHORT $L85172
	cmp	esi, -2147483647			; 80000001H
	je	SHORT $L85175
	cmp	esi, -2147483646			; 80000002H
	je	SHORT $L85178
	cmp	esi, -2147483645			; 80000003H
	je	SHORT $L85181
	cmp	esi, -2147483644			; 80000004H
	je	SHORT $L85184
	cmp	esi, -1073741819			; c0000005H
	jne	$L85305
; Line 232
	mov	eax, OFFSET FLAT:??_C@_0BB@EGIM@ACCESS_VIOLATION?$AA@ ; `string'
	jmp	$L85193
$L85184:
; Line 231
	mov	eax, OFFSET FLAT:??_C@_0M@JPO@SINGLE_STEP?$AA@ ; `string'
	jmp	$L85193
$L85181:
; Line 230
	mov	eax, OFFSET FLAT:??_C@_0L@EIGK@BREAKPOINT?$AA@ ; `string'
	jmp	$L85193
$L85178:
; Line 229
	mov	eax, OFFSET FLAT:??_C@_0BG@FLNF@DATATYPE_MISALIGNMENT?$AA@ ; `string'
	jmp	$L85193
$L85175:
; Line 228
	mov	eax, OFFSET FLAT:??_C@_0L@JMBF@GUARD_PAGE?$AA@ ; `string'
	jmp	$L85193
$L85172:
; Line 227
	mov	eax, OFFSET FLAT:??_C@_0O@JOEG@IN_PAGE_ERROR?$AA@ ; `string'
	jmp	$L85193
$L85304:
; Line 210
	cmp	esi, -1073741816			; c0000008H
	je	SHORT $L85157
	cmp	esi, -1073741795			; c000001dH
	je	SHORT $L85160
	cmp	esi, -1073741787			; c0000025H
	je	SHORT $L85163
	cmp	esi, -1073741786			; c0000026H
	je	SHORT $L85166
	cmp	esi, -1073741684			; c000008cH
	jne	$L85305
; Line 226
	mov	eax, OFFSET FLAT:??_C@_0BG@MPHG@ARRAY_BOUNDS_EXCEEDED?$AA@ ; `string'
	jmp	$L85193
$L85166:
; Line 225
	mov	eax, OFFSET FLAT:??_C@_0BE@DNMD@INVALID_DISPOSITION?$AA@ ; `string'
	jmp	$L85193
$L85163:
; Line 224
	mov	eax, OFFSET FLAT:??_C@_0BJ@BKEI@NONCONTINUABLE_EXCEPTION?$AA@ ; `string'
	jmp	$L85193
$L85160:
; Line 223
	mov	eax, OFFSET FLAT:??_C@_0BE@OPNJ@ILLEGAL_INSTRUCTION?$AA@ ; `string'
	jmp	$L85193
$L85157:
; Line 222
	mov	eax, OFFSET FLAT:??_C@_0P@MJDA@INVALID_HANDLE?$AA@ ; `string'
	jmp	$L85193
$L85154:
; Line 221
	mov	eax, OFFSET FLAT:??_C@_0BF@HIGK@FLT_DENORMAL_OPERAND?$AA@ ; `string'
	jmp	$L85193
$L85303:
; Line 210
	mov	eax, -1073741571			; c00000fdH
	cmp	esi, eax
	ja	SHORT $L85305
	je	SHORT $L85124
	lea	eax, DWORD PTR [esi+1073741682]
	cmp	eax, 8
	ja	SHORT $L85305
	jmp	DWORD PTR $L85307[eax*4]
$L85127:
; Line 212
	mov	eax, OFFSET FLAT:??_C@_0BD@BKD@FLT_DIVIDE_BY_ZERO?$AA@ ; `string'
	jmp	SHORT $L85193
$L85130:
; Line 213
	mov	eax, OFFSET FLAT:??_C@_0BD@MHJO@FLT_INEXACT_RESULT?$AA@ ; `string'
	jmp	SHORT $L85193
$L85133:
; Line 214
	mov	eax, OFFSET FLAT:??_C@_0BG@OFKA@FLT_INVALID_OPERATION?$AA@ ; `string'
	jmp	SHORT $L85193
$L85136:
; Line 215
	mov	eax, OFFSET FLAT:??_C@_0N@JLAK@FLT_OVERFLOW?$AA@ ; `string'
	jmp	SHORT $L85193
$L85139:
; Line 216
	mov	eax, OFFSET FLAT:??_C@_0BA@LEGN@FLT_STACK_CHECK?$AA@ ; `string'
	jmp	SHORT $L85193
$L85142:
; Line 217
	mov	eax, OFFSET FLAT:??_C@_0O@OLMF@FLT_UNDERFLOW?$AA@ ; `string'
	jmp	SHORT $L85193
$L85145:
; Line 218
	mov	eax, OFFSET FLAT:??_C@_0BD@CPIN@INT_DIVIDE_BY_ZERO?$AA@ ; `string'
	jmp	SHORT $L85193
$L85148:
; Line 219
	mov	eax, OFFSET FLAT:??_C@_0N@CANE@INT_OVERFLOW?$AA@ ; `string'
	jmp	SHORT $L85193
$L85151:
; Line 220
	mov	eax, OFFSET FLAT:??_C@_0BB@PNLJ@PRIV_INSTRUCTION?$AA@ ; `string'
	jmp	SHORT $L85193
$L85124:
; Line 211
	mov	eax, OFFSET FLAT:??_C@_0P@IPJK@STACK_OVERFLOW?$AA@ ; `string'
	jmp	SHORT $L85193
$L85305:
; Line 234
	push	OFFSET FLAT:??_C@_09CMOA@NTDLL?4DLL?$AA@ ; `string'
	call	DWORD PTR __imp__GetModuleHandleA@4
; Line 235
	push	0
	push	DWORD PTR _nSize$[ebp]
	push	edi
	push	0
	push	esi
	push	eax
	push	2560					; 00000a00H
	call	DWORD PTR __imp__FormatMessageA@28
	test	eax, eax
; Line 236
	mov	eax, OFFSET FLAT:??_C@_09EEIC@?$CKunknown?$CK?$AA@ ; `string'
	je	SHORT $L85193
	mov	eax, DWORD PTR _v4$[ebp]
$L85193:
; Line 239
	push	DWORD PTR _nSize$[ebp]
	push	eax
	push	edi
	call	DWORD PTR __imp__lstrcpynA@12
; Line 240
	mov	eax, edi
	pop	edi
	pop	esi
; Line 241
	pop	ebp
	ret	4
$L85307:
	DD	$L85127
	DD	$L85130
	DD	$L85133
	DD	$L85136
	DD	$L85139
	DD	$L85142
	DD	$L85145
	DD	$L85148
	DD	$L85151
@exception_get_error_type@12 ENDP
_TEXT	ENDS
EXTRN	__imp__SetUnhandledExceptionFilter@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @exception_set_filter@0
_TEXT	SEGMENT
@exception_set_filter@0 PROC NEAR			; COMDAT
; Line 245
	push	OFFSET FLAT:_TopLevelExceptionFilter@4
	call	DWORD PTR __imp__SetUnhandledExceptionFilter@4
	mov	DWORD PTR _lpTopLevelExceptionFilter, eax
; Line 246
	ret	0
@exception_set_filter@0 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _exception_set_filter_ptr
_TEXT	SEGMENT
_exception_set_filter_ptr PROC NEAR			; COMDAT
; Line 250
	push	DWORD PTR _lpTopLevelExceptionFilter
	call	DWORD PTR __imp__SetUnhandledExceptionFilter@4
; Line 251
	ret	0
_exception_set_filter_ptr ENDP
_TEXT	ENDS
PUBLIC	_exception_get_filter
; Function compile flags: /Ogsy
;	COMDAT _exception_get_filter
_TEXT	SEGMENT
_exception_get_filter PROC NEAR				; COMDAT
; Line 255
	mov	eax, DWORD PTR _lpTopLevelExceptionFilter
; Line 256
	ret	0
_exception_get_filter ENDP
_TEXT	ENDS
END
