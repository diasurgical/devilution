; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/drlg_l1.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BH@HLNC@Levels?2L1Data?2rnd6?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GFDN@Levels?2L1Data?2SKngDO?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@IIPI@Levels?2L1Data?2Banner2?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _DRLG_Init_Globals
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadL1Dungeon@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L1Floor
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L1Pass3
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_InitL1Vals
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadPreL1Dungeon@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CreateL5Dungeon@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_LoadL1SP
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_FreeL1SP
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L5@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_PlaceDoor@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L1Shadows
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_PlaceMiniSet@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitL5Dungeon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L5ClearFlags
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L5firstRoom
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L5drawRoom@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L5roomGen@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L5checkRoom@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L5GetArea
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L5makeDungeon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L5makeDmt
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L5AddWall
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L5HWallOk@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L5VWallOk@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L5HorizWall@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L5VertWall@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L5tileFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L5Subs
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L5FillChambers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L5GChamber@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L5GHall@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L5SetRoom@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L5FloodTVal
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L5FTVR@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L5TransFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L5DirtFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L5CornerFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_SPATS
PUBLIC	_BSTYPES
PUBLIC	_L5BTYPES
PUBLIC	_STAIRSUP
PUBLIC	_L5STAIRSUP
PUBLIC	_STAIRSDOWN
PUBLIC	_LAMPS
PUBLIC	_PWATERIN
PUBLIC	_L5ConvTbl
_DATA	SEGMENT
COMM	_L5dungeon:BYTE:01900H
COMM	_mydflags:BYTE:0640H
COMM	_setloadflag:DWORD
COMM	_HR1:DWORD
COMM	_HR2:DWORD
COMM	_HR3:DWORD
COMM	_VR1:DWORD
COMM	_VR2:DWORD
COMM	_VR3:DWORD
COMM	_pSetPiece:DWORD
_DATA	ENDS
CONST	SEGMENT
_SPATS	DB	07H
	DB	0dH
	DB	00H
	DB	0dH
	DB	090H
	DB	00H
	DB	08eH
	DB	010H
	DB	0dH
	DB	00H
	DB	0dH
	DB	090H
	DB	00H
	DB	08eH
	DB	0fH
	DB	0dH
	DB	00H
	DB	0dH
	DB	091H
	DB	00H
	DB	08eH
	DB	05H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	098H
	DB	08cH
	DB	08bH
	DB	05H
	DB	0dH
	DB	01H
	DB	0dH
	DB	08fH
	DB	092H
	DB	08bH
	DB	05H
	DB	0dH
	DB	0dH
	DB	02H
	DB	08fH
	DB	08cH
	DB	094H
	DB	05H
	DB	00H
	DB	01H
	DB	02H
	DB	00H
	DB	092H
	DB	094H
	DB	05H
	DB	0dH
	DB	0bH
	DB	0dH
	DB	08fH
	DB	093H
	DB	08bH
	DB	05H
	DB	0dH
	DB	0dH
	DB	0cH
	DB	08fH
	DB	08cH
	DB	095H
	DB	05H
	DB	0dH
	DB	0bH
	DB	0cH
	DB	096H
	DB	093H
	DB	095H
	DB	05H
	DB	0dH
	DB	01H
	DB	0cH
	DB	08fH
	DB	092H
	DB	095H
	DB	05H
	DB	0dH
	DB	0bH
	DB	02H
	DB	08fH
	DB	093H
	DB	094H
	DB	09H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	090H
	DB	08cH
	DB	08eH
	DB	09H
	DB	0dH
	DB	01H
	DB	0dH
	DB	090H
	DB	092H
	DB	08eH
	DB	09H
	DB	0dH
	DB	0bH
	DB	0dH
	DB	097H
	DB	093H
	DB	08eH
	DB	08H
	DB	0dH
	DB	00H
	DB	0dH
	DB	090H
	DB	00H
	DB	08bH
	DB	08H
	DB	0dH
	DB	00H
	DB	0cH
	DB	08fH
	DB	00H
	DB	095H
	DB	08H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	094H
	DB	0bH
	DB	00H
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	08bH
	DB	0bH
	DB	0dH
	DB	00H
	DB	0dH
	DB	08bH
	DB	00H
	DB	08bH
	DB	0bH
	DB	02H
	DB	00H
	DB	0dH
	DB	094H
	DB	00H
	DB	08bH
	DB	0bH
	DB	0cH
	DB	00H
	DB	0dH
	DB	095H
	DB	00H
	DB	08bH
	DB	0bH
	DB	0dH
	DB	0bH
	DB	0cH
	DB	08bH
	DB	00H
	DB	095H
	DB	0eH
	DB	00H
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	08bH
	DB	0eH
	DB	0dH
	DB	00H
	DB	0dH
	DB	08bH
	DB	00H
	DB	08bH
	DB	0eH
	DB	02H
	DB	00H
	DB	0dH
	DB	094H
	DB	00H
	DB	08bH
	DB	0eH
	DB	0cH
	DB	00H
	DB	0dH
	DB	095H
	DB	00H
	DB	08bH
	DB	0eH
	DB	0dH
	DB	0bH
	DB	0cH
	DB	08bH
	DB	00H
	DB	095H
	DB	0aH
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	08cH
	DB	00H
	DB	0aH
	DB	0dH
	DB	0dH
	DB	00H
	DB	08cH
	DB	08cH
	DB	00H
	DB	0aH
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	092H
	DB	00H
	DB	0aH
	DB	0dH
	DB	0bH
	DB	00H
	DB	08cH
	DB	093H
	DB	00H
	DB	0cH
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	08cH
	DB	00H
	DB	0cH
	DB	0dH
	DB	0dH
	DB	00H
	DB	08cH
	DB	08cH
	DB	00H
	DB	0cH
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	092H
	DB	00H
	DB	0cH
	DB	0dH
	DB	0bH
	DB	00H
	DB	08cH
	DB	093H
	DB	00H
	DB	03H
	DB	0dH
	DB	0bH
	DB	0cH
	DB	096H
	DB	00H
	DB	00H
	ORG $+5
_BSTYPES DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	0aH
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0eH
	DB	05H
	DB	0eH
	DB	0aH
	DB	04H
	DB	0eH
	DB	04H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	01H
	DB	06H
	DB	07H
	DB	010H
	DB	011H
	DB	02H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	0bH
	DB	01H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	0cH
	DB	00H
	DB	00H
	DB	0bH
	DB	01H
	DB	0bH
	DB	01H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	01H
	DB	0bH
	DB	02H
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0cH
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	04H
	DB	0eH
	DB	04H
	DB	0aH
	DB	0dH
	DB	0dH
	DB	04H
	DB	04H
	DB	01H
	DB	01H
	DB	04H
	DB	02H
	DB	02H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	019H
	DB	01aH
	DB	01cH
	DB	01eH
	DB	01fH
	DB	029H
	DB	02bH
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	019H
	DB	029H
	DB	02bH
	DB	01cH
	DB	01cH
	DB	01H
	DB	02H
	DB	019H
	DB	01aH
	DB	016H
	DB	016H
	DB	019H
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_L5BTYPES DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	019H
	DB	01aH
	DB	00H
	DB	01cH
	DB	00H
	DB	01eH
	DB	01fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04fH
	DB	050H
	DB	00H
	DB	052H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04fH
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	04fH
	DB	050H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	0bH
	DB	019H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	0cH
	DB	00H
	DB	00H
	DB	0bH
	DB	01H
	DB	0bH
	DB	01H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_STAIRSUP DB	04H
	DB	04H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	00H
	DB	042H
	DB	06H
	DB	00H
	DB	03fH
	DB	040H
	DB	041H
	DB	00H
	DB	00H
	DB	043H
	DB	044H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_L5STAIRSUP DB	04H
	DB	04H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	00H
	DB	042H
	DB	017H
	DB	00H
	DB	03fH
	DB	040H
	DB	041H
	DB	00H
	DB	00H
	DB	043H
	DB	044H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_STAIRSDOWN DB	04H
	DB	03H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	03eH
	DB	039H
	DB	03aH
	DB	00H
	DB	03dH
	DB	03bH
	DB	03cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_LAMPS	DB	02H
	DB	02H
	DB	0dH
	DB	00H
	DB	0dH
	DB	0dH
	DB	081H
	DB	00H
	DB	082H
	DB	080H
	ORG $+2
_PWATERIN DB	06H
	DB	06H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0caH
	DB	0c8H
	DB	0c8H
	DB	054H
	DB	00H
	DB	00H
	DB	0c7H
	DB	0cbH
	DB	0cbH
	DB	053H
	DB	00H
	DB	00H
	DB	055H
	DB	0ceH
	DB	050H
	DB	051H
	DB	00H
	DB	00H
	DB	00H
	DB	086H
	DB	087H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
_DATA	SEGMENT
_L5ConvTbl DB	016H
	DB	0dH
	DB	01H
	DB	0dH
	DB	02H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	04H
	DB	0dH
	DB	01H
	DB	0dH
	DB	02H
	DB	0dH
	DB	010H
	DB	0dH
_DATA	ENDS
PUBLIC	_DRLG_Init_Globals
EXTRN	_dArch:BYTE
EXTRN	_dFlags:BYTE
EXTRN	_dItem:BYTE
EXTRN	_dMissile:BYTE
EXTRN	_lightflag:DWORD
EXTRN	_light4flag:DWORD
EXTRN	_memset:NEAR
EXTRN	_dMonster:BYTE
EXTRN	_dObject:BYTE
EXTRN	_dDead:BYTE
EXTRN	_dTransVal:BYTE
EXTRN	_dPlayer:BYTE
; Function compile flags: /Ogsy
;	COMDAT _DRLG_Init_Globals
_TEXT	SEGMENT
_DRLG_Init_Globals PROC NEAR				; COMDAT
; File Source/drlg_l1.cpp
; Line 114
	push	ebx
	push	esi
; Line 117
	mov	esi, 12544				; 00003100H
	xor	ebx, ebx
	push	esi
	push	ebx
	push	OFFSET FLAT:_dFlags
	call	_memset
; Line 118
	push	esi
	push	ebx
	push	OFFSET FLAT:_dPlayer
	call	_memset
; Line 119
	push	50176					; 0000c400H
	push	ebx
	push	OFFSET FLAT:_dMonster
	call	_memset
; Line 120
	push	esi
	push	ebx
	push	OFFSET FLAT:_dDead
	call	_memset
; Line 121
	push	esi
	push	ebx
	push	OFFSET FLAT:_dObject
	call	_memset
; Line 122
	push	esi
	push	ebx
	push	OFFSET FLAT:_dItem
	call	_memset
	add	esp, 72					; 00000048H
; Line 123
	push	esi
	push	ebx
	push	OFFSET FLAT:_dMissile
	call	_memset
; Line 124
	push	esi
	push	ebx
	push	OFFSET FLAT:_dArch
	call	_memset
	add	esp, 24					; 00000018H
; Line 125
	cmp	DWORD PTR _lightflag, ebx
	jne	SHORT $L84984
; Line 126
	cmp	DWORD PTR _light4flag, ebx
	sete	al
	dec	al
	and	al, -12					; fffffff4H
	add	al, 15					; 0000000fH
; Line 127
	jmp	SHORT $L84985
$L84984:
; Line 128
	xor	al, al
$L84985:
; Line 129
	movsx	eax, al
	push	esi
	push	eax
	push	OFFSET FLAT:_dTransVal
	call	_memset
	add	esp, 12					; 0000000cH
	pop	esi
	pop	ebx
; Line 130
	ret	0
_DRLG_Init_Globals ENDP
_TEXT	ENDS
PUBLIC	@LoadL1Dungeon@12
PUBLIC	_DRLG_L1Floor
PUBLIC	_DRLG_L1Pass3
PUBLIC	_DRLG_InitL1Vals
EXTRN	_dmaxx:DWORD
EXTRN	_dmaxy:DWORD
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
EXTRN	_dminx:DWORD
EXTRN	_dminy:DWORD
EXTRN	_DRLG_InitTrans:NEAR
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	@LoadFileInMem@8:NEAR
EXTRN	@SetMapObjects@12:NEAR
EXTRN	@SetMapMonsters@12:NEAR
EXTRN	_dungeon:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadL1Dungeon@12
_TEXT	SEGMENT
_vx$ = -12
_vy$ = 8
_j$ = -4
@LoadL1Dungeon@12 PROC NEAR				; COMDAT
; _sFileName$ = ecx
; _vx$ = edx
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 140
	push	16					; 00000010H
	pop	eax
	mov	DWORD PTR _vx$[ebp], edx
; Line 142
	push	96					; 00000060H
	mov	DWORD PTR _dminx, eax
	mov	DWORD PTR _dminy, eax
	pop	eax
	mov	esi, ecx
	mov	DWORD PTR _dmaxx, eax
; Line 143
	mov	DWORD PTR _dmaxy, eax
; Line 144
	call	_DRLG_InitTrans
; Line 145
	xor	edx, edx
	mov	ecx, esi
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 146
	xor	ecx, ecx
$L84999:
; Line 147
	push	40					; 00000028H
; Line 148
	mov	eax, ecx
	pop	edx
$L85002:
; Line 149
	and	BYTE PTR _mydflags[eax], 0
	mov	BYTE PTR _dungeon[eax], 22		; 00000016H
	add	eax, 40					; 00000028H
	dec	edx
	jne	SHORT $L85002
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L84999
; Line 156
	and	DWORD PTR _j$[ebp], 0
	lea	eax, DWORD PTR [esi+2]
	movzx	edi, BYTE PTR [esi]
	movzx	ebx, BYTE PTR [eax]
	inc	eax
	inc	eax
	test	ebx, ebx
	jle	SHORT $L85007
$L85005:
; Line 157
	test	edi, edi
	jle	SHORT $L85006
; Line 162
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR -8+[ebp], edi
$L85008:
	mov	dl, BYTE PTR [eax]
	test	dl, dl
	je	SHORT $L85011
	or	BYTE PTR _mydflags[ecx], -128		; ffffff80H
	mov	BYTE PTR _dungeon[ecx], dl
	jmp	SHORT $L85012
$L85011:
	mov	BYTE PTR _dungeon[ecx], 13		; 0000000dH
$L85012:
; Line 164
	inc	eax
	add	ecx, 40					; 00000028H
	inc	eax
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85008
$L85006:
; Line 156
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], ebx
	jl	SHORT $L85005
$L85007:
; Line 167
	call	_DRLG_L1Floor
; Line 168
	mov	eax, DWORD PTR _vx$[ebp]
	mov	DWORD PTR _ViewX, eax
; Line 169
	mov	eax, DWORD PTR _vy$[ebp]
	mov	DWORD PTR _ViewY, eax
; Line 170
	call	_DRLG_L1Pass3
; Line 171
	call	_DRLG_Init_Globals
; Line 172
	call	_DRLG_InitL1Vals
; Line 173
	push	0
	xor	edx, edx
	mov	ecx, esi
	call	@SetMapMonsters@12
; Line 174
	xor	edx, edx
	mov	ecx, esi
	push	0
	call	@SetMapObjects@12
; Line 175
	mov	ecx, esi
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
	pop	ebx
; Line 176
	leave
	ret	4
@LoadL1Dungeon@12 ENDP
_TEXT	ENDS
EXTRN	@random@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L1Floor
_TEXT	SEGMENT
_DRLG_L1Floor PROC NEAR					; COMDAT
; Line 183
	push	ebx
	push	esi
	push	edi
; Line 187
	xor	edi, edi
$L85017:
; Line 188
	push	40					; 00000028H
; Line 193
	mov	esi, edi
	pop	ebx
$L85020:
; Line 189
	cmp	BYTE PTR _mydflags[esi], 0
	jne	SHORT $L85021
	cmp	BYTE PTR _dungeon[esi], 13		; 0000000dH
	jne	SHORT $L85021
; Line 190
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 192
	cmp	eax, 1
	jne	SHORT $L85024
; Line 193
	mov	BYTE PTR _dungeon[esi], -94		; ffffffa2H
$L85024:
; Line 194
	cmp	eax, 2
	jne	SHORT $L85021
; Line 195
	mov	BYTE PTR _dungeon[esi], -93		; ffffffa3H
$L85021:
; Line 193
	add	esi, 40					; 00000028H
	dec	ebx
	jne	SHORT $L85020
	inc	edi
	cmp	edi, 40					; 00000028H
	jl	SHORT $L85017
	pop	edi
	pop	esi
	pop	ebx
; Line 199
	ret	0
_DRLG_L1Floor ENDP
_TEXT	ENDS
EXTRN	_dPiece:BYTE
EXTRN	_pMegaTiles:DWORD
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L1Pass3
_TEXT	SEGMENT
_v0$ = -4
_v1$ = -4
_v4$ = -8
_v9$ = -4
_v10$ = -20
_v11$ = -24
_v16$ = -8
_v17$ = -16
_DRLG_L1Pass3 PROC NEAR					; COMDAT
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 223
	mov	eax, DWORD PTR _pMegaTiles
	push	ebx
	push	esi
	push	edi
	movzx	ecx, WORD PTR [eax+168]
; Line 231
	mov	ebx, 896				; 00000380H
	lea	edx, DWORD PTR [ecx+1]
	mov	cx, WORD PTR [eax+170]
	mov	DWORD PTR _v0$[ebp], edx
	mov	WORD PTR _v0$[ebp], cx
	inc	DWORD PTR _v0$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _v17$[ebp], ecx
	mov	cx, WORD PTR [eax+172]
	mov	WORD PTR _v0$[ebp], cx
	inc	DWORD PTR _v0$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _v16$[ebp], ecx
	mov	cx, WORD PTR [eax+174]
	mov	WORD PTR _v0$[ebp], cx
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _v1$[ebp], OFFSET FLAT:_dPiece+448
	lea	esi, DWORD PTR [ecx+1]
$L85054:
; Line 233
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR -12+[ebp], 56			; 00000038H
	add	ecx, -444				; fffffe44H
$L85057:
; Line 237
	mov	edi, DWORD PTR _v17$[ebp]
	mov	DWORD PTR [ecx-4], edx
	mov	DWORD PTR [ecx+444], edi
; Line 238
	mov	edi, DWORD PTR _v16$[ebp]
	mov	DWORD PTR [ecx], edi
; Line 239
	mov	DWORD PTR [ecx+448], esi
; Line 240
	add	ecx, ebx
; Line 242
	dec	DWORD PTR -12+[ebp]
	jne	SHORT $L85057
; Line 243
	add	DWORD PTR _v1$[ebp], 8
; Line 244
	cmp	DWORD PTR _v1$[ebp], OFFSET FLAT:_dPiece+896
	jl	SHORT $L85054
; Line 245
	and	DWORD PTR _v4$[ebp], 0
	mov	DWORD PTR -12+[ebp], OFFSET FLAT:_dPiece+7236
$L85062:
; Line 249
	mov	ecx, DWORD PTR _v4$[ebp]
	mov	edx, DWORD PTR -12+[ebp]
	mov	DWORD PTR -16+[ebp], 40			; 00000028H
	lea	edi, DWORD PTR _dungeon[ecx]
$L85066:
; Line 252
	movzx	ecx, BYTE PTR [edi]
; Line 263
	add	edi, 40					; 00000028H
	lea	ecx, DWORD PTR [eax+ecx*8-8]
	mov	si, WORD PTR [ecx]
	inc	ecx
	movzx	esi, si
	inc	ecx
	inc	esi
	mov	DWORD PTR _v9$[ebp], esi
	mov	DWORD PTR _v10$[ebp], esi
	mov	si, WORD PTR [ecx]
	inc	ecx
	mov	WORD PTR _v9$[ebp], si
	inc	ecx
	inc	DWORD PTR _v9$[ebp]
	mov	esi, DWORD PTR _v9$[ebp]
	mov	DWORD PTR _v11$[ebp], esi
	mov	si, WORD PTR [ecx]
	mov	cx, WORD PTR [ecx+2]
	mov	WORD PTR _v9$[ebp], si
	inc	DWORD PTR _v9$[ebp]
	mov	esi, DWORD PTR _v9$[ebp]
	mov	WORD PTR _v9$[ebp], cx
; Line 264
	mov	ecx, DWORD PTR _v10$[ebp]
; Line 266
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx-4], ecx
	mov	ecx, DWORD PTR _v11$[ebp]
	mov	DWORD PTR [edx+444], ecx
; Line 267
	mov	ecx, DWORD PTR _v9$[ebp]
	inc	ecx
	mov	DWORD PTR [edx+448], ecx
; Line 268
	add	edx, ebx
; Line 270
	dec	DWORD PTR -16+[ebp]
	jne	SHORT $L85066
; Line 271
	add	DWORD PTR -12+[ebp], 8
; Line 272
	inc	DWORD PTR _v4$[ebp]
; Line 273
	cmp	DWORD PTR _v4$[ebp], 40			; 00000028H
	jl	$L85062
	pop	edi
	pop	esi
	pop	ebx
; Line 274
	leave
	ret	0
_DRLG_L1Pass3 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_InitL1Vals
_TEXT	SEGMENT
_DRLG_InitL1Vals PROC NEAR				; COMDAT
; Line 277
	push	ebx
	push	esi
	push	edi
; Line 288
	mov	edi, OFFSET FLAT:_dPiece
	mov	ebx, OFFSET FLAT:_dArch
$L85083:
; Line 290
	push	112					; 00000070H
	mov	ecx, edi
; Line 291
	mov	edx, ebx
	pop	esi
$L85087:
; Line 294
	mov	eax, DWORD PTR [ecx]
; Line 295
	cmp	eax, 12					; 0000000cH
	je	SHORT $L85105
; Line 296
	cmp	eax, 11					; 0000000bH
	je	SHORT $LABEL_21$85092
; Line 298
	cmp	eax, 71					; 00000047H
	je	SHORT $L85105
; Line 299
	cmp	eax, 259				; 00000103H
	jne	SHORT $L85094
; Line 300
	mov	al, 5
	jmp	SHORT $LABEL_22$85096
$L85094:
; Line 305
	cmp	eax, 249				; 000000f9H
	je	SHORT $LABEL_21$85092
	cmp	eax, 325				; 00000145H
	je	SHORT $LABEL_21$85092
; Line 307
	cmp	eax, 321				; 00000141H
	je	SHORT $L85105
; Line 308
	cmp	eax, 255				; 000000ffH
	jne	SHORT $L85100
; Line 309
	mov	al, 4
$LABEL_9$85095:
; Line 303
	jmp	SHORT $LABEL_22$85096
$L85100:
; Line 312
	cmp	eax, 211				; 000000d3H
	je	SHORT $L85105
; Line 313
	cmp	eax, 344				; 00000158H
	je	SHORT $LABEL_21$85092
; Line 315
	cmp	eax, 341				; 00000155H
	je	SHORT $L85105
; Line 316
	cmp	eax, 331				; 0000014bH
	je	SHORT $LABEL_21$85092
; Line 318
	cmp	eax, 418				; 000001a2H
	je	SHORT $L85105
; Line 319
	cmp	eax, 421				; 000001a5H
; Line 320
	jne	SHORT $LABEL_23$85107
$LABEL_21$85092:
; Line 322
	mov	al, 2
; Line 323
	jmp	SHORT $LABEL_22$85096
$L85105:
; Line 330
	mov	al, 1
$LABEL_22$85096:
; Line 332
	mov	BYTE PTR [edx], al
$LABEL_23$85107:
; Line 334
	add	ecx, 448				; 000001c0H
; Line 335
	add	edx, 112				; 00000070H
; Line 337
	dec	esi
	jne	SHORT $L85087
; Line 338
	add	edi, 4
; Line 339
	inc	ebx
; Line 340
	cmp	edi, OFFSET FLAT:_dPiece+448
	jl	$L85083
	pop	edi
	pop	esi
	pop	ebx
; Line 341
	ret	0
_DRLG_InitL1Vals ENDP
_TEXT	ENDS
PUBLIC	@LoadPreL1Dungeon@12
EXTRN	_pdungeon:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadPreL1Dungeon@12
_TEXT	SEGMENT
_v15$ = -8
_v16$ = -4
@LoadPreL1Dungeon@12 PROC NEAR				; COMDAT
; _sFileName$ = ecx
; _vx$ = edx
; Line 344
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	push	edi
; Line 360
	push	16					; 00000010H
; Line 364
	xor	edx, edx
	pop	eax
	push	96					; 00000060H
	mov	DWORD PTR _dminx, eax
	mov	DWORD PTR _dminy, eax
	pop	eax
	mov	DWORD PTR _dmaxx, eax
	mov	DWORD PTR _dmaxy, eax
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 365
	xor	ecx, ecx
$L85133:
; Line 367
	push	40					; 00000028H
; Line 370
	mov	eax, ecx
	pop	edx
$L85136:
	and	BYTE PTR _mydflags[eax], 0
; Line 371
	mov	BYTE PTR _dungeon[eax], 22		; 00000016H
	add	eax, 40					; 00000028H
; Line 374
	dec	edx
	jne	SHORT $L85136
; Line 375
	inc	ecx
; Line 376
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85133
; Line 377
	and	DWORD PTR _v16$[ebp], 0
	push	ebx
; Line 379
	movzx	ebx, BYTE PTR [esi+2]
	movzx	edi, BYTE PTR [esi]
; Line 381
	test	ebx, ebx
	lea	ecx, DWORD PTR [esi+4]
	jle	SHORT $L85143
$L85141:
; Line 383
	test	edi, edi
	jle	SHORT $L85147
; Line 397
	mov	eax, DWORD PTR _v16$[ebp]
	mov	DWORD PTR _v15$[ebp], edi
$L85145:
	mov	dl, BYTE PTR [ecx]
	test	dl, dl
	je	SHORT $L85148
	or	BYTE PTR _mydflags[eax], -128		; ffffff80H
	mov	BYTE PTR _dungeon[eax], dl
	jmp	SHORT $L85149
$L85148:
; Line 392
	mov	BYTE PTR _dungeon[eax], 13		; 0000000dH
$L85149:
; Line 397
	add	eax, 40					; 00000028H
	inc	ecx
	inc	ecx
	dec	DWORD PTR _v15$[ebp]
	jne	SHORT $L85145
$L85147:
; Line 399
	inc	DWORD PTR _v16$[ebp]
; Line 400
	cmp	DWORD PTR _v16$[ebp], ebx
	jl	SHORT $L85141
$L85143:
; Line 402
	call	_DRLG_L1Floor
; Line 403
	xor	ecx, ecx
	pop	ebx
$L85150:
; Line 405
	push	40					; 00000028H
; Line 408
	mov	eax, ecx
	pop	edi
$L85153:
	mov	dl, BYTE PTR _dungeon[eax]
	mov	BYTE PTR _pdungeon[eax], dl
	add	eax, 40					; 00000028H
; Line 411
	dec	edi
	jne	SHORT $L85153
; Line 412
	inc	ecx
; Line 413
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85150
; Line 414
	mov	ecx, esi
	call	@mem_free_dbg@4
	pop	edi
	pop	esi
; Line 415
	leave
	ret	4
@LoadPreL1Dungeon@12 ENDP
_TEXT	ENDS
PUBLIC	@CreateL5Dungeon@8
PUBLIC	_DRLG_LoadL1SP
PUBLIC	_DRLG_FreeL1SP
PUBLIC	@DRLG_L5@4
EXTRN	_DRLG_InitSetPC:NEAR
EXTRN	_DRLG_SetPC:NEAR
EXTRN	@SetRndSeed@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @CreateL5Dungeon@8
_TEXT	SEGMENT
@CreateL5Dungeon@8 PROC NEAR				; COMDAT
; _rseed$ = ecx
; _entry$ = edx
; Line 422
	push	esi
	mov	esi, edx
; Line 423
	call	@SetRndSeed@4
; Line 425
	push	16					; 00000010H
	pop	eax
; Line 427
	push	96					; 00000060H
	mov	DWORD PTR _dminx, eax
	mov	DWORD PTR _dminy, eax
	pop	eax
	mov	DWORD PTR _dmaxx, eax
; Line 428
	mov	DWORD PTR _dmaxy, eax
; Line 430
	call	_DRLG_InitTrans
; Line 431
	call	_DRLG_InitSetPC
; Line 432
	call	_DRLG_LoadL1SP
; Line 433
	mov	ecx, esi
	call	@DRLG_L5@4
; Line 434
	call	_DRLG_L1Pass3
; Line 435
	call	_DRLG_FreeL1SP
; Line 436
	call	_DRLG_InitL1Vals
	pop	esi
; Line 437
	jmp	_DRLG_SetPC
@CreateL5Dungeon@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@HLNC@Levels?2L1Data?2rnd6?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@GFDN@Levels?2L1Data?2SKngDO?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BK@IIPI@Levels?2L1Data?2Banner2?4DUN?$AA@ ; `string'
EXTRN	@QuestStatus@4:NEAR
EXTRN	_gbMaxPlayers:BYTE
;	COMDAT ??_C@_0BH@HLNC@Levels?2L1Data?2rnd6?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BH@HLNC@Levels?2L1Data?2rnd6?4DUN?$AA@ DB 'Levels\L1Data\rnd6.DUN', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GFDN@Levels?2L1Data?2SKngDO?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@GFDN@Levels?2L1Data?2SKngDO?4DUN?$AA@ DB 'Levels\L1Data\SKngDO.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@IIPI@Levels?2L1Data?2Banner2?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BK@IIPI@Levels?2L1Data?2Banner2?4DUN?$AA@ DB 'Levels\L1Data\Banner'
	DB	'2.DUN', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DRLG_LoadL1SP
_TEXT	SEGMENT
_DRLG_LoadL1SP PROC NEAR				; COMDAT
; Line 446
	and	DWORD PTR _setloadflag, 0
	push	ebx
; Line 447
	push	6
	pop	ecx
	call	@QuestStatus@4
	xor	ebx, ebx
	inc	ebx
	test	eax, eax
	je	SHORT $L85162
; Line 448
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BH@HLNC@Levels?2L1Data?2rnd6?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	DWORD PTR _pSetPiece, eax
; Line 449
	mov	DWORD PTR _setloadflag, ebx
$L85162:
; Line 451
	push	12					; 0000000cH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85164
	cmp	BYTE PTR _gbMaxPlayers, bl
	jne	SHORT $L85164
; Line 452
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@GFDN@Levels?2L1Data?2SKngDO?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	DWORD PTR _pSetPiece, eax
; Line 453
	mov	DWORD PTR _setloadflag, ebx
$L85164:
; Line 455
	push	7
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85166
; Line 456
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BK@IIPI@Levels?2L1Data?2Banner2?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	DWORD PTR _pSetPiece, eax
; Line 457
	mov	DWORD PTR _setloadflag, ebx
$L85166:
	pop	ebx
; Line 459
	ret	0
_DRLG_LoadL1SP ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_FreeL1SP
_TEXT	SEGMENT
_DRLG_FreeL1SP PROC NEAR				; COMDAT
; Line 467
	mov	ecx, DWORD PTR _pSetPiece
; Line 468
	and	DWORD PTR _pSetPiece, 0
; Line 469
	jmp	@mem_free_dbg@4
_DRLG_FreeL1SP ENDP
_TEXT	ENDS
PUBLIC	@DRLG_PlaceDoor@8
PUBLIC	_DRLG_L1Shadows
PUBLIC	@DRLG_PlaceMiniSet@32
PUBLIC	_InitL5Dungeon
PUBLIC	_L5ClearFlags
PUBLIC	_L5firstRoom
PUBLIC	_L5GetArea
PUBLIC	_L5makeDungeon
PUBLIC	_L5makeDmt
PUBLIC	_L5AddWall
PUBLIC	_L5tileFix
PUBLIC	_DRLG_L5Subs
PUBLIC	_L5FillChambers
PUBLIC	_DRLG_L5FloodTVal
PUBLIC	_DRLG_L5TransFix
PUBLIC	_DRLG_L5DirtFix
PUBLIC	_DRLG_L5CornerFix
EXTRN	_setpc_x:DWORD
EXTRN	_setpc_y:DWORD
EXTRN	@DRLG_CopyTrans@16:NEAR
EXTRN	@DRLG_CheckQuests@8:NEAR
EXTRN	_currlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L5@4
_TEXT	SEGMENT
_entry$ = -8
_j$ = -8
_minarea$ = -4
@DRLG_L5@4 PROC NEAR					; COMDAT
; _entry$ = ecx
; Line 473
	push	ecx
	push	ecx
; Line 478
	mov	al, BYTE PTR _currlevel
	push	ebx
	xor	ebx, ebx
	push	ebp
	inc	ebx
	push	esi
	cmp	al, bl
	push	edi
	mov	DWORD PTR _entry$[esp+24], ecx
	je	SHORT $L85181
	cmp	al, 2
	je	SHORT $L85182
	jbe	SHORT $L86146
	cmp	al, 4
	ja	SHORT $L86146
; Line 487
	mov	DWORD PTR _minarea$[esp+24], 761	; 000002f9H
; Line 488
	jmp	SHORT $L86146
$L85182:
; Line 483
	mov	DWORD PTR _minarea$[esp+24], 693	; 000002b5H
; Line 484
	jmp	SHORT $L86146
$L85181:
; Line 480
	mov	DWORD PTR _minarea$[esp+24], 533	; 00000215H
$L86146:
	xor	esi, esi
	mov	ebp, OFFSET FLAT:_STAIRSDOWN
$L85185:
; Line 494
	call	_DRLG_InitTrans
$L85188:
; Line 497
	call	_InitL5Dungeon
; Line 498
	call	_L5firstRoom
; Line 499
	call	_L5GetArea
	cmp	eax, DWORD PTR _minarea$[esp+24]
	jl	SHORT $L85188
; Line 501
	call	_L5makeDungeon
; Line 502
	call	_L5makeDmt
; Line 503
	call	_L5FillChambers
; Line 504
	call	_L5tileFix
; Line 505
	call	_L5AddWall
; Line 506
	call	_L5ClearFlags
; Line 507
	call	_DRLG_L5FloodTVal
; Line 511
	push	13					; 0000000dH
	mov	edi, ebx
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85194
; Line 512
	cmp	DWORD PTR _entry$[esp+24], esi
; Line 513
	push	esi
	mov	ecx, OFFSET FLAT:_PWATERIN
	mov	edx, ebx
	push	-1
	jne	SHORT $L85192
	push	ebx
	push	esi
	push	esi
	push	ebx
	call	@DRLG_PlaceMiniSet@32
	test	eax, eax
	jge	SHORT $L85194
; Line 514
	xor	edi, edi
; Line 515
	jmp	SHORT $L85194
$L85192:
; Line 516
	push	esi
	push	esi
	push	esi
	push	ebx
	call	@DRLG_PlaceMiniSet@32
	test	eax, eax
	jge	SHORT $L85195
; Line 517
	xor	edi, edi
$L85195:
; Line 518
	dec	DWORD PTR _ViewY
$L85194:
; Line 521
	push	7
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
; Line 523
	push	esi
	mov	edx, ebx
	push	-1
	je	SHORT $L85196
	cmp	DWORD PTR _entry$[esp+32], esi
	mov	ecx, OFFSET FLAT:_STAIRSUP
	jne	SHORT $L85197
	push	ebx
$L86161:
	push	esi
	push	esi
	push	ebx
	call	@DRLG_PlaceMiniSet@32
	test	eax, eax
	jge	$L85186
; Line 524
	xor	edi, edi
; Line 525
	jmp	$L85186
$L85197:
; Line 526
	push	esi
	push	esi
	push	esi
	push	ebx
	call	@DRLG_PlaceMiniSet@32
	test	eax, eax
	jge	SHORT $L85200
; Line 527
	xor	edi, edi
$L85200:
; Line 528
	cmp	DWORD PTR _entry$[esp+24], ebx
	jne	SHORT $L85211
; Line 529
	mov	eax, DWORD PTR _setpc_x
	lea	eax, DWORD PTR [eax+eax+20]
	mov	DWORD PTR _ViewX, eax
; Line 530
	mov	eax, DWORD PTR _setpc_y
	lea	eax, DWORD PTR [eax+eax+28]
	mov	DWORD PTR _ViewY, eax
; Line 531
	jmp	SHORT $L85186
$L85196:
; Line 535
	cmp	DWORD PTR _entry$[esp+32], esi
; Line 536
	mov	ecx, OFFSET FLAT:_L5STAIRSUP
	jne	SHORT $L85204
	push	ebx
	push	esi
	push	esi
	push	ebx
	call	@DRLG_PlaceMiniSet@32
	test	eax, eax
	jl	$L85185
; Line 538
	push	ebx
	push	-1
	push	esi
	mov	edx, ebx
	mov	ecx, ebp
; Line 540
	jmp	SHORT $L86161
$L85204:
; Line 541
	push	esi
	push	esi
	push	esi
	push	ebx
	call	@DRLG_PlaceMiniSet@32
	test	eax, eax
; Line 543
	jl	SHORT $L86159
	push	ebx
	push	-1
	push	ebx
	push	esi
	push	esi
	push	ebx
	mov	edx, ebx
	mov	ecx, ebp
	call	@DRLG_PlaceMiniSet@32
	test	eax, eax
	jge	SHORT $L85211
$L86159:
; Line 544
	xor	edi, edi
$L85211:
; Line 545
	dec	DWORD PTR _ViewY
$L85186:
; Line 547
	cmp	edi, esi
	je	$L85185
; Line 549
	push	16					; 00000010H
	mov	DWORD PTR _j$[esp+28], esi
	pop	ebx
$L85212:
; Line 550
	mov	eax, DWORD PTR _j$[esp+24]
	push	16					; 00000010H
	pop	edi
	lea	eax, DWORD PTR _dungeon[eax]
	mov	DWORD PTR -4+[esp+24], eax
$L85215:
; Line 551
	mov	eax, DWORD PTR -4+[esp+24]
	cmp	BYTE PTR [eax], 64			; 00000040H
	jne	SHORT $L85216
; Line 554
	lea	ebp, DWORD PTR [ebx+1]
	push	ebx
	push	edi
	mov	edx, ebp
	mov	ecx, edi
	call	@DRLG_CopyTrans@16
; Line 555
	lea	ecx, DWORD PTR [edi+1]
	mov	edx, ebp
	push	ebx
	push	ecx
	call	@DRLG_CopyTrans@16
$L85216:
	add	DWORD PTR -4+[esp+24], 40		; 00000028H
	inc	edi
	inc	edi
	cmp	edi, 96					; 00000060H
	jl	SHORT $L85215
	inc	DWORD PTR _j$[esp+24]
	inc	ebx
	inc	ebx
	cmp	ebx, 96					; 00000060H
	jl	SHORT $L85212
; Line 560
	call	_DRLG_L5TransFix
; Line 561
	call	_DRLG_L5DirtFix
; Line 562
	call	_DRLG_L5CornerFix
; Line 564
	xor	edi, edi
$L85221:
; Line 565
	xor	ebp, ebp
	lea	ebx, DWORD PTR _mydflags[edi]
$L85224:
; Line 566
	test	BYTE PTR [ebx], 127			; 0000007fH
	je	SHORT $L85225
; Line 567
	mov	edx, edi
	mov	ecx, ebp
	call	@DRLG_PlaceDoor@8
$L85225:
	inc	ebp
	add	ebx, 40					; 00000028H
	cmp	ebp, 40					; 00000028H
	jl	SHORT $L85224
	inc	edi
	cmp	edi, 40					; 00000028H
	jl	SHORT $L85221
; Line 571
	call	_DRLG_L5Subs
; Line 572
	call	_DRLG_L1Shadows
; Line 573
	push	4
	push	-1
	push	esi
	push	esi
	push	esi
	push	10					; 0000000aH
	push	5
	mov	ecx, OFFSET FLAT:_LAMPS
	pop	edx
	call	@DRLG_PlaceMiniSet@32
; Line 574
	call	_DRLG_L1Floor
$L85228:
; Line 577
	push	40					; 00000028H
; Line 578
	mov	eax, esi
	pop	ecx
$L85231:
	mov	dl, BYTE PTR _dungeon[eax]
	mov	BYTE PTR _pdungeon[eax], dl
	add	eax, 40					; 00000028H
	dec	ecx
	jne	SHORT $L85231
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85228
; Line 582
	call	_DRLG_Init_Globals
; Line 583
	mov	edx, DWORD PTR _setpc_y
	mov	ecx, DWORD PTR _setpc_x
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 584
	add	esp, 8
	jmp	@DRLG_CheckQuests@8
@DRLG_L5@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_PlaceDoor@8
_TEXT	SEGMENT
_x$ = -4
@DRLG_PlaceDoor@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 587
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
; Line 588
	lea	esi, DWORD PTR [ecx+ecx*4]
	push	edi
	mov	edi, edx
	mov	DWORD PTR _x$[ebp], ecx
	shl	esi, 3
	lea	eax, DWORD PTR _mydflags[esi+edi]
	mov	DWORD PTR -8+[ebp], eax
	mov	al, BYTE PTR [eax]
	test	al, al
	js	$L85265
; Line 589
	and	al, 127					; 0000007fH
; Line 592
	xor	ecx, ecx
	mov	dl, al
	lea	eax, DWORD PTR _dungeon[esi+edi]
	inc	ecx
	mov	bl, BYTE PTR [eax]
	cmp	dl, cl
	jne	SHORT $L85249
; Line 593
	cmp	edi, ecx
	je	SHORT $L85246
	cmp	bl, 2
	jne	SHORT $L85243
; Line 594
	mov	BYTE PTR [eax], 26			; 0000001aH
$L85243:
; Line 595
	cmp	bl, 7
	jne	SHORT $L85244
; Line 596
	mov	BYTE PTR [eax], 31			; 0000001fH
$L85244:
; Line 597
	cmp	bl, 14					; 0000000eH
	jne	SHORT $L85245
; Line 598
	mov	BYTE PTR [eax], 42			; 0000002aH
$L85245:
; Line 599
	cmp	bl, 4
	jne	SHORT $L85246
; Line 600
	mov	BYTE PTR [eax], 43			; 0000002bH
$L85246:
; Line 601
	cmp	DWORD PTR _x$[ebp], ecx
	je	$L85265
	cmp	bl, cl
	jne	SHORT $L85247
; Line 602
	mov	BYTE PTR [eax], 25			; 00000019H
$L85247:
; Line 603
	cmp	bl, 10					; 0000000aH
	jne	SHORT $L85248
; Line 604
	mov	BYTE PTR [eax], 40			; 00000028H
$L85248:
; Line 605
	cmp	bl, 6
	jne	$L85265
; Line 606
	mov	BYTE PTR [eax], 30			; 0000001eH
$L85249:
; Line 608
	cmp	dl, 2
	jne	SHORT $L85257
; Line 609
	cmp	DWORD PTR _x$[ebp], ecx
	je	SHORT $L85254
	cmp	bl, cl
	jne	SHORT $L85251
; Line 610
	mov	BYTE PTR [eax], 25			; 00000019H
$L85251:
; Line 611
	cmp	bl, 6
	jne	SHORT $L85252
; Line 612
	mov	BYTE PTR [eax], 30			; 0000001eH
$L85252:
; Line 613
	cmp	bl, 10					; 0000000aH
	jne	SHORT $L85253
; Line 614
	mov	BYTE PTR [eax], 40			; 00000028H
$L85253:
; Line 615
	cmp	bl, 4
	jne	SHORT $L85254
; Line 616
	mov	BYTE PTR [eax], 41			; 00000029H
$L85254:
; Line 617
	cmp	edi, ecx
	je	SHORT $L85265
	cmp	bl, 2
	jne	SHORT $L85255
; Line 618
	mov	BYTE PTR [eax], 26			; 0000001aH
$L85255:
; Line 619
	cmp	bl, 14					; 0000000eH
	jne	SHORT $L85256
; Line 620
	mov	BYTE PTR [eax], 42			; 0000002aH
$L85256:
; Line 621
	cmp	bl, 7
	jne	SHORT $L85265
; Line 622
	mov	BYTE PTR [eax], 31			; 0000001fH
$L85257:
; Line 624
	cmp	dl, 3
	jne	SHORT $L85265
; Line 625
	cmp	DWORD PTR _x$[ebp], ecx
	je	SHORT $L85260
	cmp	edi, ecx
	je	SHORT $L85259
	cmp	bl, 4
	jne	SHORT $L85259
; Line 626
	mov	BYTE PTR [eax], 28			; 0000001cH
$L85259:
; Line 627
	cmp	bl, 10					; 0000000aH
	jne	SHORT $L85260
; Line 628
	mov	BYTE PTR [eax], 40			; 00000028H
$L85260:
; Line 629
	cmp	edi, ecx
	je	SHORT $L85262
	cmp	bl, 14					; 0000000eH
	jne	SHORT $L85261
; Line 630
	mov	BYTE PTR [eax], 42			; 0000002aH
$L85261:
; Line 631
	cmp	bl, 2
	jne	SHORT $L85262
; Line 632
	mov	BYTE PTR [eax], 26			; 0000001aH
$L85262:
; Line 633
	cmp	DWORD PTR _x$[ebp], ecx
	je	SHORT $L85263
	cmp	bl, cl
	jne	SHORT $L85263
; Line 634
	mov	BYTE PTR [eax], 25			; 00000019H
$L85263:
; Line 635
	cmp	edi, ecx
	je	SHORT $L85264
	cmp	bl, 7
	jne	SHORT $L85264
; Line 636
	mov	BYTE PTR [eax], 31			; 0000001fH
$L85264:
; Line 637
	cmp	DWORD PTR _x$[ebp], ecx
	je	SHORT $L85265
	cmp	bl, 6
	jne	SHORT $L85265
; Line 638
	mov	BYTE PTR [eax], 30			; 0000001eH
$L85265:
; Line 642
	mov	eax, DWORD PTR -8+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	BYTE PTR [eax], -128			; ffffff80H
; Line 643
	leave
	ret	0
@DRLG_PlaceDoor@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L1Shadows
_TEXT	SEGMENT
_sd$ = -4
_DRLG_L1Shadows PROC NEAR				; COMDAT
; Line 646
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 652
	xor	ebx, ebx
	push	esi
	push	edi
	inc	ebx
$L85273:
; Line 653
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[ebx+39]
	pop	edx
$L85276:
; Line 654
	movzx	ecx, BYTE PTR [eax+1]
	mov	esi, OFFSET FLAT:_SPATS+1
	mov	cl, BYTE PTR _BSTYPES[ecx]
	mov	BYTE PTR _sd$[ebp], cl
; Line 655
	movzx	ecx, BYTE PTR [eax-39]
	mov	cl, BYTE PTR _BSTYPES[ecx]
	mov	BYTE PTR _sd$[ebp+2], cl
; Line 656
	movzx	ecx, BYTE PTR [eax]
	mov	cl, BYTE PTR _BSTYPES[ecx]
	mov	BYTE PTR _sd$[ebp+1], cl
; Line 657
	movzx	ecx, BYTE PTR [eax-40]
	mov	cl, BYTE PTR _BSTYPES[ecx]
	mov	BYTE PTR _sd$[ebp+3], cl
$L85283:
; Line 660
	mov	cl, BYTE PTR _sd$[ebp]
	cmp	BYTE PTR [esi-1], cl
	jne	SHORT $L85284
; Line 662
	mov	cl, BYTE PTR [esi]
	xor	edi, edi
	inc	edi
	test	cl, cl
	je	SHORT $L85287
	cmp	cl, BYTE PTR _sd$[ebp+3]
	je	SHORT $L85287
; Line 663
	xor	edi, edi
$L85287:
; Line 664
	mov	cl, BYTE PTR [esi+1]
	test	cl, cl
	je	SHORT $L85288
	cmp	cl, BYTE PTR _sd$[ebp+1]
	je	SHORT $L85288
; Line 665
	xor	edi, edi
$L85288:
; Line 666
	mov	cl, BYTE PTR [esi+2]
	test	cl, cl
	je	SHORT $L85289
	cmp	cl, BYTE PTR _sd$[ebp+2]
	je	SHORT $L85289
; Line 667
	xor	edi, edi
$L85289:
; Line 668
	cmp	edi, 1
	jne	SHORT $L85284
; Line 669
	mov	cl, BYTE PTR [esi+3]
	test	cl, cl
	je	SHORT $L85291
	cmp	BYTE PTR _mydflags[edx+ebx-41], 0
	jne	SHORT $L85291
; Line 670
	mov	BYTE PTR [eax-40], cl
$L85291:
; Line 671
	mov	cl, BYTE PTR [esi+4]
	test	cl, cl
	je	SHORT $L85292
	cmp	BYTE PTR _mydflags[edx+ebx-1], 0
	jne	SHORT $L85292
; Line 672
	mov	BYTE PTR [eax], cl
$L85292:
; Line 673
	mov	cl, BYTE PTR [esi+5]
	test	cl, cl
	je	SHORT $L85284
; Line 674
	cmp	BYTE PTR _mydflags[edx+ebx-40], 0
	jne	SHORT $L85284
; Line 675
	mov	BYTE PTR [eax-39], cl
$L85284:
; Line 659
	add	esi, 7
	cmp	esi, OFFSET FLAT:_SPATS+260
	jl	SHORT $L85283
	add	edx, 40					; 00000028H
	add	eax, 40					; 00000028H
	cmp	edx, 1600				; 00000640H
	jl	$L85276
	inc	ebx
	cmp	ebx, 40					; 00000028H
	jl	$L85273
; Line 683
	xor	edi, edi
	inc	edi
$L85295:
; Line 684
	push	39					; 00000027H
	mov	eax, edi
	pop	esi
$L85298:
; Line 685
	cmp	BYTE PTR _dungeon[eax], 139		; 0000008bH
	jne	SHORT $L85302
	cmp	BYTE PTR _mydflags[eax], 0
	jne	SHORT $L85302
; Line 687
	mov	cl, BYTE PTR _dungeon[eax+40]
	mov	dl, 139					; 0000008bH
	cmp	cl, 29					; 0000001dH
	jne	SHORT $L85303
; Line 688
	add	dl, 2
$L85303:
; Line 689
	cmp	cl, 32					; 00000020H
	jne	SHORT $L85304
; Line 690
	mov	dl, 141					; 0000008dH
$L85304:
; Line 691
	cmp	cl, 35					; 00000023H
	jne	SHORT $L85305
; Line 692
	mov	dl, 141					; 0000008dH
$L85305:
; Line 693
	cmp	cl, 37					; 00000025H
	jne	SHORT $L85306
; Line 694
	mov	dl, 141					; 0000008dH
$L85306:
; Line 695
	cmp	cl, 38					; 00000026H
	jne	SHORT $L85307
; Line 696
	mov	dl, 141					; 0000008dH
$L85307:
; Line 697
	cmp	cl, 39					; 00000027H
	jne	SHORT $L85308
; Line 698
	mov	dl, 141					; 0000008dH
$L85308:
; Line 699
	mov	BYTE PTR _dungeon[eax], dl
$L85302:
; Line 701
	cmp	BYTE PTR _dungeon[eax], 149		; 00000095H
	jne	SHORT $L85310
	cmp	BYTE PTR _mydflags[eax], 0
	jne	SHORT $L85310
; Line 703
	mov	cl, BYTE PTR _dungeon[eax+40]
	mov	dl, 149					; 00000095H
	cmp	cl, 29					; 0000001dH
	jne	SHORT $L85311
; Line 704
	add	dl, 4
$L85311:
; Line 705
	cmp	cl, 32					; 00000020H
	jne	SHORT $L85312
; Line 706
	mov	dl, 153					; 00000099H
$L85312:
; Line 707
	cmp	cl, 35					; 00000023H
	jne	SHORT $L85313
; Line 708
	mov	dl, 153					; 00000099H
$L85313:
; Line 709
	cmp	cl, 37					; 00000025H
	jne	SHORT $L85314
; Line 710
	mov	dl, 153					; 00000099H
$L85314:
; Line 711
	cmp	cl, 38					; 00000026H
	jne	SHORT $L85315
; Line 712
	mov	dl, 153					; 00000099H
$L85315:
; Line 713
	cmp	cl, 39					; 00000027H
	jne	SHORT $L85316
; Line 714
	mov	dl, 153					; 00000099H
$L85316:
; Line 715
	mov	BYTE PTR _dungeon[eax], dl
$L85310:
; Line 717
	cmp	BYTE PTR _dungeon[eax], 148		; 00000094H
	jne	SHORT $L85299
	cmp	BYTE PTR _mydflags[eax], 0
	jne	SHORT $L85299
; Line 719
	mov	cl, BYTE PTR _dungeon[eax+40]
	mov	dl, 148					; 00000094H
	cmp	cl, 29					; 0000001dH
	jne	SHORT $L85319
; Line 720
	add	dl, 6
$L85319:
; Line 721
	cmp	cl, 32					; 00000020H
	jne	SHORT $L85320
; Line 722
	mov	dl, 154					; 0000009aH
$L85320:
; Line 723
	cmp	cl, 35					; 00000023H
	jne	SHORT $L85321
; Line 724
	mov	dl, 154					; 0000009aH
$L85321:
; Line 725
	cmp	cl, 37					; 00000025H
	jne	SHORT $L85322
; Line 726
	mov	dl, 154					; 0000009aH
$L85322:
; Line 727
	cmp	cl, 38					; 00000026H
	jne	SHORT $L85323
; Line 728
	mov	dl, 154					; 0000009aH
$L85323:
; Line 729
	cmp	cl, 39					; 00000027H
	jne	SHORT $L85324
; Line 730
	mov	dl, 154					; 0000009aH
$L85324:
; Line 731
	mov	BYTE PTR _dungeon[eax], dl
$L85299:
; Line 684
	add	eax, 40					; 00000028H
	dec	esi
	jne	$L85298
	inc	edi
	cmp	edi, 40					; 00000028H
	jl	$L85295
	pop	edi
	pop	esi
	pop	ebx
; Line 735
	leave
	ret	0
_DRLG_L1Shadows ENDP
_TEXT	ENDS
EXTRN	_LvlViewY:DWORD
EXTRN	_LvlViewX:DWORD
EXTRN	@DRLG_MRectTrans@16:NEAR
EXTRN	_quests:BYTE
EXTRN	_TransVal:BYTE
; Function compile flags: /Ogsy
;	COMDAT @DRLG_PlaceMiniSet@32
_TEXT	SEGMENT
_sx$ = 12
_sy$ = 12
_i$ = -24
_found$ = -20
_numt$ = -28
_abort$ = 8
_sw$ = -8
_sh$ = -4
_miniset$ = -32
_tmax$ = 8
_cx$ = 12
_cy$ = 16
_setview$ = 20
_noquad$ = 24
_ldir$ = 28
_xx$ = -16
@DRLG_PlaceMiniSet@32 PROC NEAR				; COMDAT
; _miniset$ = ecx
; _tmin$ = edx
; Line 738
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
; Line 744
	movzx	edi, BYTE PTR [ebx]
; Line 745
	movzx	eax, BYTE PTR [ebx+1]
	mov	esi, edx
; Line 747
	mov	edx, DWORD PTR _tmax$[ebp]
	sub	edx, esi
	mov	DWORD PTR _miniset$[ebp], ebx
	mov	DWORD PTR _sw$[ebp], edi
	mov	DWORD PTR _sh$[ebp], eax
	jne	SHORT $L85354
; Line 748
	mov	DWORD PTR _numt$[ebp], 1
; Line 749
	jmp	SHORT $L85355
$L85354:
; Line 750
	xor	cl, cl
	call	@random@8
	add	eax, esi
	mov	DWORD PTR _numt$[ebp], eax
$L85355:
; Line 752
	and	DWORD PTR _i$[ebp], 0
	cmp	DWORD PTR _numt$[ebp], 0
	jle	$L86199
	push	40					; 00000028H
	pop	eax
	mov	DWORD PTR -12+[ebp], eax
	sub	DWORD PTR -12+[ebp], edi
	sub	eax, DWORD PTR _sh$[ebp]
	mov	DWORD PTR -36+[ebp], eax
$L85356:
; Line 753
	mov	edx, DWORD PTR -12+[ebp]
	xor	cl, cl
	call	@random@8
; Line 754
	mov	edx, DWORD PTR -36+[ebp]
	xor	cl, cl
	mov	esi, eax
	call	@random@8
; Line 756
	and	DWORD PTR _found$[ebp], 0
	mov	edi, eax
$L85360:
; Line 760
	mov	edx, DWORD PTR _cx$[ebp]
	mov	DWORD PTR _abort$[ebp], 1
	cmp	edx, -1
	je	SHORT $L85362
	mov	eax, edx
	sub	eax, DWORD PTR _sw$[ebp]
	cmp	esi, eax
	jl	SHORT $L85362
	lea	eax, DWORD PTR [edx+12]
	cmp	esi, eax
	jg	SHORT $L85362
; Line 761
	inc	esi
; Line 762
	and	DWORD PTR _abort$[ebp], 0
$L85362:
; Line 764
	mov	ecx, DWORD PTR _cy$[ebp]
	cmp	ecx, -1
	je	SHORT $L85363
	mov	eax, ecx
	sub	eax, DWORD PTR _sh$[ebp]
	cmp	edi, eax
	jl	SHORT $L85363
	lea	eax, DWORD PTR [ecx+12]
	cmp	edi, eax
	jg	SHORT $L85363
; Line 765
	inc	edi
; Line 766
	and	DWORD PTR _abort$[ebp], 0
$L85363:
; Line 769
	mov	eax, DWORD PTR _noquad$[ebp]
	xor	ebx, ebx
	sub	eax, ebx
	je	SHORT $L85368
	dec	eax
	je	SHORT $L85370
	dec	eax
	je	SHORT $L85372
	dec	eax
	jne	SHORT $L85369
; Line 783
	cmp	esi, edx
	jle	SHORT $L85369
; Line 785
	jmp	SHORT $L86212
$L85372:
; Line 779
	cmp	esi, edx
	jge	SHORT $L85369
$L86212:
	cmp	edi, ecx
	jle	SHORT $L85369
; Line 781
	jmp	SHORT $L86210
$L85370:
; Line 775
	cmp	esi, edx
	jle	SHORT $L85369
; Line 777
	jmp	SHORT $L86211
$L85368:
; Line 771
	cmp	esi, edx
	jge	SHORT $L85369
$L86211:
	cmp	edi, ecx
	jge	SHORT $L85369
$L86210:
; Line 772
	mov	DWORD PTR _abort$[ebp], ebx
$L85369:
; Line 790
	cmp	DWORD PTR _sh$[ebp], 0
	push	2
	pop	edx
	jle	SHORT $L85378
$L85376:
	cmp	DWORD PTR _abort$[ebp], 1
	jne	SHORT $L85378
; Line 791
	and	DWORD PTR _xx$[ebp], 0
	cmp	DWORD PTR _sw$[ebp], 0
	jle	SHORT $L85377
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ebx+eax*8]
	add	eax, edi
$L85379:
	cmp	DWORD PTR _abort$[ebp], 1
	jne	SHORT $L85377
; Line 792
	mov	ecx, DWORD PTR _miniset$[ebp]
	mov	cl, BYTE PTR [edx+ecx]
	test	cl, cl
	je	SHORT $L85383
	cmp	BYTE PTR _dungeon[eax], cl
	je	SHORT $L85383
; Line 793
	and	DWORD PTR _abort$[ebp], 0
$L85383:
; Line 794
	cmp	BYTE PTR _mydflags[eax], 0
	je	SHORT $L85384
; Line 795
	and	DWORD PTR _abort$[ebp], 0
$L85384:
; Line 791
	mov	ecx, DWORD PTR _sw$[ebp]
; Line 796
	inc	edx
	inc	DWORD PTR _xx$[ebp]
	add	eax, 40					; 00000028H
	cmp	DWORD PTR _xx$[ebp], ecx
	jl	SHORT $L85379
$L85377:
; Line 790
	inc	ebx
	cmp	ebx, DWORD PTR _sh$[ebp]
	jl	SHORT $L85376
$L85378:
; Line 800
	xor	ebx, ebx
	cmp	DWORD PTR _abort$[ebp], ebx
	jne	SHORT $L85361
; Line 801
	inc	esi
	cmp	esi, DWORD PTR -12+[ebp]
	jne	SHORT $L85387
; Line 802
	xor	esi, esi
; Line 803
	inc	edi
	cmp	edi, DWORD PTR -36+[ebp]
	jne	SHORT $L85387
; Line 804
	xor	edi, edi
$L85387:
; Line 806
	inc	DWORD PTR _found$[ebp]
	cmp	DWORD PTR _found$[ebp], 4000		; 00000fa0H
	jle	$L85360
; Line 807
	or	eax, -1
	jmp	$L85402
$L85361:
; Line 811
	mov	eax, DWORD PTR _sh$[ebp]
	imul	eax, DWORD PTR _sw$[ebp]
	inc	eax
	inc	eax
; Line 813
	cmp	DWORD PTR _sh$[ebp], 0
	jle	SHORT $L85357
$L85389:
; Line 814
	mov	edx, DWORD PTR _sw$[ebp]
	test	edx, edx
	jle	SHORT $L85390
	lea	ecx, DWORD PTR [esi+esi*4]
	mov	DWORD PTR 8+[ebp], edx
	lea	ecx, DWORD PTR [ebx+ecx*8]
	lea	ecx, DWORD PTR _dungeon[ecx+edi]
$L85392:
; Line 815
	mov	edx, DWORD PTR _miniset$[ebp]
	mov	dl, BYTE PTR [eax+edx]
	test	dl, dl
	je	SHORT $L85395
; Line 816
	mov	BYTE PTR [ecx], dl
$L85395:
; Line 817
	inc	eax
	add	ecx, 40					; 00000028H
	dec	DWORD PTR 8+[ebp]
	jne	SHORT $L85392
$L85390:
; Line 813
	inc	ebx
	cmp	ebx, DWORD PTR _sh$[ebp]
	jl	SHORT $L85389
$L85357:
; Line 752
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numt$[ebp]
	jl	$L85356
; Line 806
	mov	ebx, DWORD PTR _miniset$[ebp]
	jmp	SHORT $L85358
$L86199:
; Line 807
	mov	esi, DWORD PTR _sx$[ebp]
	mov	edi, DWORD PTR _sy$[ebp]
$L85358:
; Line 822
	cmp	ebx, OFFSET FLAT:_PWATERIN
	jne	SHORT $L85396
; Line 823
	movsx	ebx, BYTE PTR _TransVal
; Line 824
	and	BYTE PTR _TransVal, 0
; Line 825
	lea	eax, DWORD PTR [edi+4]
	push	eax
	lea	eax, DWORD PTR [esi+5]
	push	eax
	lea	edx, DWORD PTR [edi+2]
	mov	ecx, esi
	call	@DRLG_MRectTrans@16
; Line 828
	lea	eax, DWORD PTR [esi+esi+21]
	mov	BYTE PTR _TransVal, bl
	mov	DWORD PTR _quests+316, eax
; Line 829
	lea	eax, DWORD PTR [edi+edi+22]
	mov	DWORD PTR _quests+320, eax
$L85396:
; Line 832
	xor	eax, eax
	inc	eax
	cmp	DWORD PTR _setview$[ebp], eax
	jne	SHORT $L85397
; Line 833
	lea	ecx, DWORD PTR [esi+esi+19]
	mov	DWORD PTR _ViewX, ecx
; Line 834
	lea	ecx, DWORD PTR [edi+edi+20]
	mov	DWORD PTR _ViewY, ecx
$L85397:
; Line 837
	cmp	DWORD PTR _ldir$[ebp], 0
	jne	SHORT $L85398
; Line 838
	lea	ecx, DWORD PTR [esi+esi+19]
	mov	DWORD PTR _LvlViewX, ecx
; Line 839
	lea	ecx, DWORD PTR [edi+edi+20]
	mov	DWORD PTR _LvlViewY, ecx
$L85398:
; Line 842
	cmp	esi, DWORD PTR _cx$[ebp]
	jge	SHORT $L86213
	cmp	edi, DWORD PTR _cy$[ebp]
	jge	SHORT $L85399
; Line 843
	xor	eax, eax
	jmp	SHORT $L85402
$L85399:
; Line 844
	cmp	esi, DWORD PTR _cx$[ebp]
$L86213:
	jle	SHORT $L85400
	cmp	edi, DWORD PTR _cy$[ebp]
; Line 845
	jl	SHORT $L85402
$L85400:
; Line 846
	cmp	esi, DWORD PTR _cx$[ebp]
	jge	SHORT $L85401
	cmp	edi, DWORD PTR _cy$[ebp]
	jle	SHORT $L85401
; Line 847
	push	2
	jmp	SHORT $L86214
$L85401:
; Line 849
	push	3
$L86214:
	pop	eax
$L85402:
	pop	edi
	pop	esi
	pop	ebx
; Line 850
	leave
	ret	24					; 00000018H
@DRLG_PlaceMiniSet@32 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _InitL5Dungeon
_TEXT	SEGMENT
_InitL5Dungeon PROC NEAR				; COMDAT
; Line 859
	xor	edx, edx
$L85406:
; Line 860
	push	40					; 00000028H
; Line 861
	mov	eax, edx
	pop	ecx
$L85409:
	and	BYTE PTR _dungeon[eax], 0
; Line 862
	and	BYTE PTR _mydflags[eax], 0
	add	eax, 40					; 00000028H
	dec	ecx
	jne	SHORT $L85409
	inc	edx
	cmp	edx, 40					; 00000028H
	jl	SHORT $L85406
; Line 865
	ret	0
_InitL5Dungeon ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L5ClearFlags
_TEXT	SEGMENT
_L5ClearFlags PROC NEAR					; COMDAT
; Line 871
	xor	ecx, ecx
$L85415:
; Line 872
	push	40					; 00000028H
	lea	eax, DWORD PTR _mydflags[ecx]
	pop	edx
$L85418:
; Line 873
	and	BYTE PTR [eax], -65			; ffffffbfH
	add	eax, 40					; 00000028H
	dec	edx
	jne	SHORT $L85418
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85415
; Line 876
	ret	0
_L5ClearFlags ENDP
_TEXT	ENDS
PUBLIC	@L5drawRoom@16
PUBLIC	@L5roomGen@20
; Function compile flags: /Ogsy
;	COMDAT _L5firstRoom
_TEXT	SEGMENT
_L5firstRoom PROC NEAR					; COMDAT
; Line 879
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 883
	push	2
	xor	cl, cl
	pop	esi
	mov	edx, esi
	call	@random@8
; Line 887
	xor	cl, cl
	mov	edx, esi
	test	eax, eax
	push	39					; 00000027H
	jne	$L85428
	xor	ebp, ebp
	pop	ebx
	inc	ebp
	call	@random@8
; Line 888
	mov	edx, esi
	xor	cl, cl
	mov	DWORD PTR _VR1, eax
	call	@random@8
; Line 889
	mov	edx, esi
	xor	cl, cl
	mov	DWORD PTR _VR2, eax
	call	@random@8
; Line 891
	mov	ecx, DWORD PTR _VR1
	mov	DWORD PTR _VR3, eax
	add	eax, ecx
	cmp	eax, ebp
	jg	SHORT $L85429
; Line 892
	mov	DWORD PTR _VR2, ebp
$L85429:
; Line 893
	push	10					; 0000000aH
	pop	esi
	push	15					; 0000000fH
	test	ecx, ecx
	pop	edi
	je	SHORT $L85430
; Line 894
	xor	edx, edx
	push	esi
	push	esi
	inc	edx
	mov	ecx, edi
	call	@L5drawRoom@16
; Line 895
	jmp	SHORT $L85431
$L85430:
; Line 896
	push	18					; 00000012H
	pop	ebp
$L85431:
; Line 898
	cmp	DWORD PTR _VR2, 0
	je	SHORT $L85432
; Line 899
	push	esi
	push	esi
	mov	edx, edi
	mov	ecx, edi
	call	@L5drawRoom@16
$L85432:
; Line 900
	cmp	DWORD PTR _VR3, 0
	je	SHORT $L85433
; Line 901
	push	esi
	push	esi
	push	29					; 0000001dH
	mov	ecx, edi
	pop	edx
	call	@L5drawRoom@16
; Line 902
	jmp	SHORT $L85434
$L85433:
; Line 903
	push	22					; 00000016H
	pop	ebx
$L85434:
; Line 905
	cmp	ebp, ebx
	mov	ecx, ebp
	jge	SHORT $L85437
$L85435:
; Line 906
	lea	eax, DWORD PTR _dungeon[ecx+720]
	inc	ecx
	cmp	ecx, ebx
	mov	BYTE PTR [eax-40], 1
; Line 907
	mov	BYTE PTR [eax], 1
; Line 908
	mov	BYTE PTR [eax+40], 1
; Line 909
	mov	BYTE PTR [eax+80], 1
; Line 910
	mov	BYTE PTR [eax+120], 1
; Line 911
	mov	BYTE PTR [eax+160], 1
	jl	SHORT $L85435
$L85437:
; Line 914
	cmp	DWORD PTR _VR1, 0
	je	SHORT $L85438
; Line 915
	push	0
	xor	edx, edx
	push	esi
	push	esi
	inc	edx
	mov	ecx, edi
	call	@L5roomGen@20
$L85438:
; Line 916
	cmp	DWORD PTR _VR2, 0
	je	SHORT $L85439
; Line 917
	push	0
	push	esi
	push	esi
	mov	edx, edi
	mov	ecx, edi
	call	@L5roomGen@20
$L85439:
; Line 918
	cmp	DWORD PTR _VR3, 0
	je	SHORT $L85440
; Line 919
	push	0
	push	esi
	push	esi
	push	29					; 0000001dH
	pop	edx
	mov	ecx, edi
	call	@L5roomGen@20
$L85440:
; Line 921
	xor	eax, eax
	mov	DWORD PTR _HR3, eax
; Line 922
	mov	DWORD PTR _HR2, eax
; Line 923
	mov	DWORD PTR _HR1, eax
; Line 924
	jmp	$L85441
$L85428:
; Line 925
	xor	ebx, ebx
; Line 926
	pop	ebp
	inc	ebx
; Line 928
	call	@random@8
; Line 929
	mov	edx, esi
	xor	cl, cl
	mov	DWORD PTR _HR1, eax
	call	@random@8
; Line 930
	mov	edx, esi
	xor	cl, cl
	mov	DWORD PTR _HR2, eax
	call	@random@8
; Line 932
	mov	ecx, DWORD PTR _HR1
	mov	DWORD PTR _HR3, eax
	add	eax, ecx
	cmp	eax, ebx
	jg	SHORT $L85442
; Line 933
	mov	DWORD PTR _HR2, ebx
$L85442:
; Line 934
	push	10					; 0000000aH
	pop	esi
	push	15					; 0000000fH
	test	ecx, ecx
	pop	edi
	je	SHORT $L85443
; Line 935
	xor	ecx, ecx
	push	esi
	push	esi
	mov	edx, edi
	inc	ecx
	call	@L5drawRoom@16
; Line 936
	jmp	SHORT $L85444
$L85443:
; Line 937
	push	18					; 00000012H
	pop	ebx
$L85444:
; Line 939
	cmp	DWORD PTR _HR2, 0
	je	SHORT $L85445
; Line 940
	push	esi
	push	esi
	mov	edx, edi
	mov	ecx, edi
	call	@L5drawRoom@16
$L85445:
; Line 941
	cmp	DWORD PTR _HR3, 0
	je	SHORT $L85446
; Line 942
	push	esi
	push	esi
	push	29					; 0000001dH
	mov	edx, edi
	pop	ecx
	call	@L5drawRoom@16
; Line 943
	jmp	SHORT $L85447
$L85446:
; Line 944
	push	22					; 00000016H
	pop	ebp
$L85447:
; Line 946
	cmp	ebx, ebp
	jge	SHORT $L85450
	lea	eax, DWORD PTR [ebx+ebx*4]
	sub	ebp, ebx
	lea	eax, DWORD PTR _dungeon[eax*8+18]
$L85448:
; Line 947
	mov	BYTE PTR [eax-1], 1
; Line 948
	mov	BYTE PTR [eax], 1
; Line 949
	mov	BYTE PTR [eax+1], 1
; Line 950
	mov	BYTE PTR [eax+2], 1
; Line 951
	mov	BYTE PTR [eax+3], 1
; Line 952
	mov	BYTE PTR [eax+4], 1
	add	eax, 40					; 00000028H
	dec	ebp
	jne	SHORT $L85448
$L85450:
; Line 955
	cmp	DWORD PTR _HR1, 0
	je	SHORT $L85451
; Line 956
	xor	ecx, ecx
	mov	edx, edi
	inc	ecx
	push	ecx
	push	esi
	push	esi
	call	@L5roomGen@20
$L85451:
; Line 957
	cmp	DWORD PTR _HR2, 0
	je	SHORT $L85452
; Line 958
	push	1
	push	esi
	push	esi
	mov	edx, edi
	mov	ecx, edi
	call	@L5roomGen@20
$L85452:
; Line 959
	cmp	DWORD PTR _HR3, 0
	je	SHORT $L85453
; Line 960
	push	1
	push	esi
	push	esi
	push	29					; 0000001dH
	mov	edx, edi
	pop	ecx
	call	@L5roomGen@20
$L85453:
; Line 962
	xor	eax, eax
	mov	DWORD PTR _VR3, eax
; Line 963
	mov	DWORD PTR _VR2, eax
; Line 964
	mov	DWORD PTR _VR1, eax
$L85441:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 966
	ret	0
_L5firstRoom ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L5drawRoom@16
_TEXT	SEGMENT
_w$ = 8
_h$ = 12
@L5drawRoom@16 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 969
	push	esi
; Line 972
	xor	esi, esi
	cmp	DWORD PTR _h$[esp], esi
	jle	SHORT $L85467
	push	edi
$L85465:
; Line 973
	cmp	DWORD PTR _w$[esp+4], 0
	jle	SHORT $L85466
	mov	edi, DWORD PTR _w$[esp+4]
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [esi+eax*8]
	lea	eax, DWORD PTR _dungeon[eax+edx]
$L85468:
; Line 974
	mov	BYTE PTR [eax], 1
	add	eax, 40					; 00000028H
	dec	edi
	jne	SHORT $L85468
$L85466:
; Line 972
	inc	esi
	cmp	esi, DWORD PTR _h$[esp+4]
	jl	SHORT $L85465
	pop	edi
$L85467:
	pop	esi
; Line 977
	ret	8
@L5drawRoom@16 ENDP
_TEXT	ENDS
PUBLIC	@L5checkRoom@16
; Function compile flags: /Ogsy
;	COMDAT @L5roomGen@20
_TEXT	SEGMENT
_x$ = -8
_y$ = -4
_w$ = 8
_h$ = 12
_dir$ = 16
_num$ = 16
_ran$ = -12
_ran2$ = 12
_ry$ = -16
_ry2$ = -8
_cx1$ = -16
_cx2$ = -8
@L5roomGen@20 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 980
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _y$[ebp], edx
	mov	DWORD PTR _x$[ebp], ecx
$L86251:
; Line 986
	push	4
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 988
	xor	ecx, ecx
	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $L86249
	test	eax, eax
	setne	cl
	jmp	SHORT $L86258
$L86249:
	test	eax, eax
	sete	cl
$L86258:
	mov	eax, ecx
	xor	ecx, ecx
	sub	eax, ecx
	je	$L85500
	dec	eax
	jne	$L86255
; Line 1012
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _num$[ebp], ecx
	cdq
	sub	eax, edx
	mov	DWORD PTR 8+[ebp], eax
	sar	DWORD PTR 8+[ebp], 1
$L85510:
; Line 1014
	push	5
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	esi, eax
; Line 1015
	xor	cl, cl
	inc	esi
	push	5
	inc	esi
	pop	edx
	and	esi, -2					; fffffffeH
	call	@random@8
	mov	edi, eax
; Line 1016
	mov	ebx, DWORD PTR 8+[ebp]
	mov	eax, esi
	inc	edi
	cdq
	inc	edi
	sub	eax, edx
	and	edi, -2					; fffffffeH
	sar	eax, 1
	sub	ebx, eax
; Line 1017
	mov	eax, DWORD PTR _y$[ebp]
	add	ebx, DWORD PTR _x$[ebp]
; Line 1018
	lea	ecx, DWORD PTR [edi+1]
	push	ecx
	sub	eax, edi
	lea	ecx, DWORD PTR [esi+2]
	mov	DWORD PTR _ry$[ebp], eax
	push	ecx
	lea	edx, DWORD PTR [eax-1]
	lea	ecx, DWORD PTR [ebx-1]
	call	@L5checkRoom@16
; Line 1019
	inc	DWORD PTR _num$[ebp]
	mov	DWORD PTR _ran$[ebp], eax
; Line 1020
	test	eax, eax
	jne	SHORT $L85513
	cmp	DWORD PTR _num$[ebp], 20		; 00000014H
	jl	SHORT $L85510
$L85513:
; Line 1022
	cmp	eax, 1
	jne	SHORT $L85514
; Line 1023
	mov	edx, DWORD PTR _ry$[ebp]
	push	edi
	push	esi
	mov	ecx, ebx
	call	@L5drawRoom@16
$L85514:
; Line 1024
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax]
; Line 1025
	lea	eax, DWORD PTR [edi+1]
	push	eax
	lea	eax, DWORD PTR [esi+2]
	push	eax
	lea	ecx, DWORD PTR [ebx-1]
	mov	DWORD PTR _ry2$[ebp], edx
	call	@L5checkRoom@16
; Line 1026
	cmp	eax, 1
	mov	DWORD PTR _ran2$[ebp], eax
	jne	SHORT $L85515
; Line 1027
	mov	edx, DWORD PTR _ry2$[ebp]
	push	edi
	push	esi
	mov	ecx, ebx
	call	@L5drawRoom@16
$L85515:
; Line 1028
	cmp	DWORD PTR _ran$[ebp], 1
	jne	SHORT $L85516
; Line 1029
	mov	edx, DWORD PTR _ry$[ebp]
	push	0
	push	edi
	push	esi
	mov	ecx, ebx
	call	@L5roomGen@20
$L85516:
; Line 1030
	cmp	DWORD PTR _ran2$[ebp], 1
	jne	$L86255
; Line 1031
	mov	eax, DWORD PTR _ry2$[ebp]
	and	DWORD PTR _dir$[ebp], 0
	mov	DWORD PTR _h$[ebp], edi
	mov	DWORD PTR _w$[ebp], esi
	mov	DWORD PTR _y$[ebp], eax
	mov	DWORD PTR _x$[ebp], ebx
	jmp	$L86251
$L85500:
; Line 990
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _num$[ebp], ecx
	cdq
	sub	eax, edx
	mov	DWORD PTR 12+[ebp], eax
	sar	DWORD PTR 12+[ebp], 1
$L85501:
; Line 992
	push	5
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	esi, eax
; Line 993
	xor	cl, cl
	inc	esi
	push	5
	inc	esi
	pop	edx
	and	esi, -2					; fffffffeH
	call	@random@8
	mov	edi, eax
; Line 994
	mov	ebx, DWORD PTR 12+[ebp]
	inc	edi
; Line 996
	lea	ecx, DWORD PTR [esi+1]
	inc	edi
	push	ecx
	and	edi, -2					; fffffffeH
	mov	eax, edi
	cdq
	sub	eax, edx
	lea	ecx, DWORD PTR [edi+2]
	sar	eax, 1
	sub	ebx, eax
	mov	eax, DWORD PTR _x$[ebp]
	add	ebx, DWORD PTR _y$[ebp]
	sub	eax, esi
	push	ecx
	mov	DWORD PTR _cx1$[ebp], eax
	lea	ecx, DWORD PTR [eax-1]
	lea	edx, DWORD PTR [ebx-1]
	call	@L5checkRoom@16
; Line 997
	inc	DWORD PTR _num$[ebp]
	mov	DWORD PTR _ran$[ebp], eax
; Line 998
	test	eax, eax
	jne	SHORT $L85504
	cmp	DWORD PTR _num$[ebp], 20		; 00000014H
	jl	SHORT $L85501
$L85504:
; Line 1000
	cmp	eax, 1
	jne	SHORT $L85505
; Line 1001
	mov	ecx, DWORD PTR _cx1$[ebp]
	push	edi
	push	esi
	mov	edx, ebx
	call	@L5drawRoom@16
$L85505:
; Line 1002
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, eax
; Line 1003
	lea	eax, DWORD PTR [edi+2]
	push	eax
	lea	eax, DWORD PTR [esi+1]
	push	eax
	lea	edx, DWORD PTR [ebx-1]
	mov	DWORD PTR _cx2$[ebp], ecx
	call	@L5checkRoom@16
; Line 1004
	cmp	eax, 1
	mov	DWORD PTR _ran2$[ebp], eax
	jne	SHORT $L85506
; Line 1005
	mov	ecx, DWORD PTR _cx2$[ebp]
	push	edi
	push	esi
	mov	edx, ebx
	call	@L5drawRoom@16
$L85506:
; Line 1006
	cmp	DWORD PTR _ran$[ebp], 1
	jne	SHORT $L85507
; Line 1007
	mov	ecx, DWORD PTR _cx1$[ebp]
	push	1
	push	edi
	push	esi
	mov	edx, ebx
	call	@L5roomGen@20
$L85507:
; Line 1008
	xor	eax, eax
	inc	eax
	cmp	DWORD PTR _ran2$[ebp], eax
	jne	SHORT $L86255
; Line 1009
	mov	DWORD PTR _dir$[ebp], eax
	mov	eax, DWORD PTR _cx2$[ebp]
	mov	DWORD PTR _h$[ebp], edi
	mov	DWORD PTR _w$[ebp], esi
	mov	DWORD PTR _y$[ebp], ebx
	mov	DWORD PTR _x$[ebp], eax
	jmp	$L86251
$L86255:
	pop	edi
	pop	esi
	pop	ebx
; Line 1034
	leave
	ret	12					; 0000000cH
@L5roomGen@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L5checkRoom@16
_TEXT	SEGMENT
_width$ = 8
_height$ = 12
_i$ = -4
@L5checkRoom@16 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1037
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1040
	xor	eax, eax
	push	ebx
	cmp	DWORD PTR _height$[ebp], eax
	push	esi
	push	edi
	jle	SHORT $L85531
$L85529:
; Line 1041
	and	DWORD PTR _i$[ebp], 0
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $L85530
	lea	esi, DWORD PTR [ecx+ecx*4]
	mov	ebx, ecx
	lea	esi, DWORD PTR [eax+esi*8]
	lea	edi, DWORD PTR _dungeon[esi+edx]
$L85532:
; Line 1042
	test	ebx, ebx
	jl	SHORT $L86264
	cmp	ebx, 40					; 00000028H
	jge	SHORT $L86264
	lea	esi, DWORD PTR [eax+edx]
	test	esi, esi
	jl	SHORT $L86264
	cmp	esi, 40					; 00000028H
	jge	SHORT $L86264
; Line 1044
	cmp	BYTE PTR [edi], 0
	jne	SHORT $L86264
	inc	DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _width$[ebp]
	add	edi, 40					; 00000028H
	inc	ebx
	cmp	DWORD PTR _i$[ebp], esi
	jl	SHORT $L85532
$L85530:
; Line 1040
	inc	eax
	cmp	eax, DWORD PTR _height$[ebp]
	jl	SHORT $L85529
$L85531:
; Line 1049
	xor	eax, eax
	inc	eax
$L85526:
	pop	edi
	pop	esi
	pop	ebx
; Line 1050
	leave
	ret	8
$L86264:
; Line 1045
	xor	eax, eax
	jmp	SHORT $L85526
@L5checkRoom@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L5GetArea
_TEXT	SEGMENT
_L5GetArea PROC NEAR					; COMDAT
; Line 1057
	xor	eax, eax
; Line 1059
	xor	edx, edx
	push	esi
$L85542:
; Line 1060
	push	40					; 00000028H
	lea	ecx, DWORD PTR _dungeon[edx]
	pop	esi
$L85545:
; Line 1061
	cmp	BYTE PTR [ecx], 1
	jne	SHORT $L85546
; Line 1062
	inc	eax
$L85546:
; Line 1060
	add	ecx, 40					; 00000028H
	dec	esi
	jne	SHORT $L85545
	inc	edx
	cmp	edx, 40					; 00000028H
	jl	SHORT $L85542
	pop	esi
; Line 1067
	ret	0
_L5GetArea ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L5makeDungeon
_TEXT	SEGMENT
_L5makeDungeon PROC NEAR				; COMDAT
; Line 1070
	push	esi
	push	edi
; Line 1078
	xor	esi, esi
$L85556:
; Line 1081
	lea	edx, DWORD PTR _dungeon[esi]
	xor	edi, edi
$L85560:
; Line 1083
	mov	al, BYTE PTR [edx]
; Line 1085
	mov	ecx, edi
	add	edi, 160				; 000000a0H
	add	edx, 40					; 00000028H
; Line 1086
	lea	ecx, DWORD PTR [ecx+esi*2]
; Line 1091
	cmp	edi, 6400				; 00001900H
	mov	BYTE PTR _L5dungeon[ecx], al
	mov	BYTE PTR _L5dungeon[ecx+1], al
	mov	BYTE PTR _L5dungeon[ecx+80], al
	mov	BYTE PTR _L5dungeon[ecx+81], al
	jl	SHORT $L85560
; Line 1092
	inc	esi
; Line 1093
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85556
	pop	edi
	pop	esi
; Line 1094
	ret	0
_L5makeDungeon ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L5makeDmt
_TEXT	SEGMENT
_L5makeDmt PROC NEAR					; COMDAT
; Line 1097
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1100
	xor	ecx, ecx
$L85568:
; Line 1101
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[ecx]
	pop	edx
$L85571:
; Line 1102
	mov	BYTE PTR [eax], 22			; 00000016H
	add	eax, 40					; 00000028H
	dec	edx
	jne	SHORT $L85571
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85568
	push	ebx
	push	esi
; Line 1106
	xor	esi, esi
	push	edi
	inc	esi
	mov	DWORD PTR -4+[ebp], OFFSET FLAT:_dungeon
$L85574:
; Line 1107
	mov	ecx, DWORD PTR -4+[ebp]
	push	39					; 00000027H
	lea	eax, DWORD PTR _L5dungeon[esi+81]
	pop	edi
$L85577:
; Line 1112
	movzx	edx, BYTE PTR [eax+80]
	movzx	ebx, BYTE PTR [eax]
	add	eax, 160				; 000000a0H
	lea	edx, DWORD PTR [ebx+edx*2]
	movzx	ebx, BYTE PTR [eax-81]
	lea	edx, DWORD PTR [ebx+edx*2]
	movzx	ebx, BYTE PTR [eax-161]
	mov	dl, BYTE PTR _L5ConvTbl[ebx+edx*2]
	mov	BYTE PTR [ecx], dl
	add	ecx, 40					; 00000028H
	dec	edi
	jne	SHORT $L85577
	inc	DWORD PTR -4+[ebp]
	inc	esi
	inc	esi
	cmp	esi, 77					; 0000004dH
	jle	SHORT $L85574
	pop	edi
	pop	esi
	pop	ebx
; Line 1115
	leave
	ret	0
_L5makeDmt ENDP
_TEXT	ENDS
PUBLIC	@L5HWallOk@8
PUBLIC	@L5VWallOk@8
PUBLIC	@L5HorizWall@16
PUBLIC	@L5VertWall@16
; Function compile flags: /Ogsy
;	COMDAT _L5AddWall
_TEXT	SEGMENT
_L5AddWall PROC NEAR					; COMDAT
; Line 1118
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1121
	xor	edi, edi
	or	ebp, -1
$L85590:
; Line 1122
	xor	esi, esi
	mov	ebx, edi
$L85593:
; Line 1123
	cmp	BYTE PTR _mydflags[ebx], 0
	jne	$L85594
; Line 1124
	cmp	BYTE PTR _dungeon[ebx], 3
	jne	SHORT $L85600
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85598
; Line 1125
	mov	edx, edi
	mov	ecx, esi
	call	@L5HWallOk@8
; Line 1126
	cmp	eax, ebp
	je	SHORT $L85598
; Line 1127
	push	eax
	push	2
	mov	edx, edi
	mov	ecx, esi
	call	@L5HorizWall@16
$L85598:
; Line 1129
	cmp	BYTE PTR _dungeon[ebx], 3
	jne	SHORT $L85600
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85600
; Line 1130
	mov	edx, edi
	mov	ecx, esi
	call	@L5VWallOk@8
; Line 1131
	cmp	eax, ebp
	je	SHORT $L85600
; Line 1132
	push	eax
	push	1
	mov	edx, edi
	mov	ecx, esi
	call	@L5VertWall@16
$L85600:
; Line 1134
	cmp	BYTE PTR _dungeon[ebx], 6
	jne	SHORT $L85602
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85602
; Line 1135
	mov	edx, edi
	mov	ecx, esi
	call	@L5HWallOk@8
; Line 1136
	cmp	eax, ebp
	je	SHORT $L85602
; Line 1137
	push	eax
	push	4
	mov	edx, edi
	mov	ecx, esi
	call	@L5HorizWall@16
$L85602:
; Line 1139
	cmp	BYTE PTR _dungeon[ebx], 7
	jne	SHORT $L85604
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85604
; Line 1140
	mov	edx, edi
	mov	ecx, esi
	call	@L5VWallOk@8
; Line 1141
	cmp	eax, ebp
	je	SHORT $L85604
; Line 1142
	push	eax
	push	4
	mov	edx, edi
	mov	ecx, esi
	call	@L5VertWall@16
$L85604:
; Line 1144
	cmp	BYTE PTR _dungeon[ebx], 2
	jne	SHORT $L85606
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85606
; Line 1145
	mov	edx, edi
	mov	ecx, esi
	call	@L5HWallOk@8
; Line 1146
	cmp	eax, ebp
	je	SHORT $L85606
; Line 1147
	push	eax
	push	2
	mov	edx, edi
	mov	ecx, esi
	call	@L5HorizWall@16
$L85606:
; Line 1149
	cmp	BYTE PTR _dungeon[ebx], 1
	jne	SHORT $L85594
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85594
; Line 1150
	mov	edx, edi
	mov	ecx, esi
	call	@L5VWallOk@8
; Line 1151
	cmp	eax, ebp
	je	SHORT $L85594
; Line 1152
	push	eax
	push	1
	mov	edx, edi
	mov	ecx, esi
	call	@L5VertWall@16
$L85594:
	inc	esi
	add	ebx, 40					; 00000028H
	cmp	esi, 40					; 00000028H
	jl	$L85593
	inc	edi
	cmp	edi, 40					; 00000028H
	jl	$L85590
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1157
	ret	0
_L5AddWall ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L5HWallOk@8
_TEXT	SEGMENT
_x$ = -4
@L5HWallOk@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 1160
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 1164
	lea	esi, DWORD PTR [ecx+ecx*4+5]
	shl	esi, 3
	push	edi
	mov	DWORD PTR _x$[ebp], 1
	lea	edi, DWORD PTR _dungeon[esi+edx]
	cmp	BYTE PTR [edi], 13			; 0000000dH
	jne	SHORT $L86313
	push	ebx
	lea	ebx, DWORD PTR [ecx+ecx*4]
	mov	eax, esi
	lea	ebx, DWORD PTR _dungeon[edx+ebx*8+40]
$L85616:
; Line 1165
	cmp	BYTE PTR [edi-1], 13			; 0000000dH
	jne	SHORT $L86315
	cmp	BYTE PTR _dungeon[esi+edx+1], 13	; 0000000dH
	jne	SHORT $L86315
	cmp	BYTE PTR _mydflags[esi+edx], 0
	jne	SHORT $L86315
	inc	DWORD PTR _x$[ebp]
	add	ebx, 40					; 00000028H
	add	eax, 40					; 00000028H
	mov	edi, ebx
	cmp	BYTE PTR [ebx], 13			; 0000000dH
	mov	esi, eax
	je	SHORT $L85616
$L86315:
	pop	ebx
$L86313:
; Line 1170
	mov	esi, DWORD PTR _x$[ebp]
	xor	eax, eax
	add	ecx, esi
	lea	ecx, DWORD PTR [ecx+ecx*4]
	mov	dl, BYTE PTR _dungeon[edx+ecx*8]
	cmp	dl, 3
	jb	SHORT $L85623
	cmp	dl, 7
	ja	SHORT $L85623
; Line 1171
	inc	eax
$L85623:
; Line 1172
	cmp	dl, 16					; 00000010H
	jb	SHORT $L85626
	cmp	dl, 24					; 00000018H
	ja	SHORT $L85626
; Line 1173
	xor	eax, eax
	inc	eax
$L85626:
; Line 1174
	cmp	dl, 22					; 00000016H
	jne	SHORT $L85627
; Line 1175
	xor	eax, eax
$L85627:
; Line 1176
	cmp	esi, 1
	jne	SHORT $L85628
; Line 1177
	xor	eax, eax
$L85628:
; Line 1179
	test	eax, eax
	je	SHORT $L85629
; Line 1180
	mov	eax, esi
	jmp	SHORT $L85630
$L85629:
; Line 1182
	or	eax, -1
$L85630:
	pop	edi
	pop	esi
; Line 1183
	leave
	ret	0
@L5HWallOk@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L5VWallOk@8
_TEXT	SEGMENT
@L5VWallOk@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 1190
	lea	ecx, DWORD PTR [ecx+ecx*4]
	xor	eax, eax
	shl	ecx, 3
	inc	eax
	push	esi
	cmp	BYTE PTR _dungeon[ecx+edx+1], 13	; 0000000dH
	push	edi
	jne	SHORT $L86321
	lea	esi, DWORD PTR _dungeon[ecx+edx]
$L85638:
; Line 1191
	cmp	BYTE PTR [esi+eax-40], 13		; 0000000dH
	jne	SHORT $L86321
	lea	edi, DWORD PTR [ecx+eax]
	cmp	BYTE PTR _dungeon[edi+edx+40], 13	; 0000000dH
	jne	SHORT $L86321
	lea	edi, DWORD PTR [ecx+eax]
	cmp	BYTE PTR _mydflags[edi+edx], 0
	jne	SHORT $L86321
	inc	eax
	cmp	BYTE PTR [esi+eax], 13			; 0000000dH
	je	SHORT $L85638
$L86321:
; Line 1196
	add	ecx, eax
	xor	esi, esi
	mov	dl, BYTE PTR _dungeon[ecx+edx]
	cmp	dl, 3
	jb	SHORT $L85645
	cmp	dl, 7
	ja	SHORT $L85645
; Line 1197
	inc	esi
$L85645:
; Line 1198
	cmp	dl, 16					; 00000010H
	jb	SHORT $L85648
	cmp	dl, 24					; 00000018H
	ja	SHORT $L85648
; Line 1199
	xor	esi, esi
	inc	esi
$L85648:
; Line 1200
	cmp	dl, 22					; 00000016H
	jne	SHORT $L85649
; Line 1201
	xor	esi, esi
$L85649:
; Line 1202
	cmp	eax, 1
	jne	SHORT $L85650
; Line 1203
	xor	esi, esi
$L85650:
; Line 1205
	test	esi, esi
	pop	edi
	pop	esi
; Line 1206
	jne	SHORT $L85652
; Line 1208
	or	eax, -1
$L85652:
; Line 1209
	ret	0
@L5VWallOk@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L5HorizWall@16
_TEXT	SEGMENT
_j$ = -8
_p$ = 8
_dx$ = 12
_dt$ = -1
@L5HorizWall@16 PROC NEAR				; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 1212
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	push	edi
; Line 1216
	push	4
	mov	edi, edx
	mov	esi, ecx
	pop	edx
	xor	cl, cl
	mov	DWORD PTR _j$[ebp], edi
	call	@random@8
	test	eax, eax
	jl	SHORT $L85676
	cmp	eax, 1
	jle	SHORT $L85669
	cmp	eax, 2
	je	SHORT $L85670
	cmp	eax, 3
	jne	SHORT $L85676
; Line 1230
	cmp	BYTE PTR _p$[ebp], 2
	mov	BYTE PTR _dt$[ebp], 36			; 00000024H
	jne	SHORT $L85674
; Line 1231
	mov	BYTE PTR _p$[ebp], 36			; 00000024H
$L85674:
; Line 1232
	cmp	BYTE PTR _p$[ebp], 4
	jne	SHORT $L85676
; Line 1233
	mov	BYTE PTR _p$[ebp], 27			; 0000001bH
; Line 1234
	jmp	SHORT $L85676
$L85670:
; Line 1223
	cmp	BYTE PTR _p$[ebp], 2
	mov	BYTE PTR _dt$[ebp], 12			; 0000000cH
	jne	SHORT $L85671
; Line 1224
	mov	BYTE PTR _p$[ebp], 12			; 0000000cH
$L85671:
; Line 1225
	cmp	BYTE PTR _p$[ebp], 4
	jne	SHORT $L85676
; Line 1226
	mov	BYTE PTR _p$[ebp], 10			; 0000000aH
; Line 1227
	jmp	SHORT $L85676
$L85669:
; Line 1219
	mov	BYTE PTR _dt$[ebp], 2
$L85676:
	push	ebx
; Line 1239
	push	6
	pop	edx
	xor	cl, cl
	call	@random@8
	mov	ebx, eax
; Line 1243
	mov	dl, BYTE PTR _dt$[ebp]
	sub	ebx, 5
	neg	ebx
	sbb	bl, bl
	and	bl, 14					; 0000000eH
	add	bl, 12					; 0000000cH
	cmp	dl, 12					; 0000000cH
	jne	SHORT $L85679
; Line 1244
	mov	bl, dl
$L85679:
; Line 1246
	mov	cl, BYTE PTR _p$[ebp]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edi+eax*8]
	mov	BYTE PTR _dungeon[eax], cl
; Line 1248
	mov	ecx, DWORD PTR _dx$[ebp]
	cmp	ecx, 1
	jle	SHORT $L85682
	lea	edi, DWORD PTR _dungeon[eax+40]
	lea	eax, DWORD PTR [ecx-1]
$L85680:
; Line 1249
	mov	BYTE PTR [edi], dl
	add	edi, 40					; 00000028H
	dec	eax
	jne	SHORT $L85680
; Line 1248
	mov	edi, DWORD PTR _j$[ebp]
$L85682:
; Line 1252
	lea	edx, DWORD PTR [ecx-1]
	xor	cl, cl
	call	@random@8
	inc	eax
; Line 1254
	cmp	bl, 12					; 0000000cH
	pop	ebx
	jne	SHORT $L85683
; Line 1255
	add	eax, esi
	lea	eax, DWORD PTR [eax+eax*4]
	mov	BYTE PTR _dungeon[edi+eax*8], 12	; 0000000cH
; Line 1256
	jmp	SHORT $L85684
$L85683:
; Line 1257
	add	eax, esi
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [edi+eax*8]
; Line 1258
	or	BYTE PTR _mydflags[eax], 1
	mov	BYTE PTR _dungeon[eax], 2
$L85684:
	pop	edi
	pop	esi
; Line 1260
	leave
	ret	8
@L5HorizWall@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L5VertWall@16
_TEXT	SEGMENT
_j$ = -8
_p$ = 8
_dy$ = 12
_wt$ = -2
_dt$ = -1
@L5VertWall@16 PROC NEAR				; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 1263
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	push	edi
; Line 1267
	push	4
	mov	edi, edx
	mov	esi, ecx
	pop	edx
	xor	cl, cl
	mov	DWORD PTR _j$[ebp], edi
	call	@random@8
	test	eax, eax
	jl	SHORT $L85708
	cmp	eax, 1
	jle	SHORT $L85701
	cmp	eax, 2
	je	SHORT $L85702
	cmp	eax, 3
	jne	SHORT $L85708
; Line 1281
	cmp	BYTE PTR _p$[ebp], 1
	mov	BYTE PTR _dt$[ebp], 35			; 00000023H
	jne	SHORT $L85706
; Line 1282
	mov	BYTE PTR _p$[ebp], 35			; 00000023H
$L85706:
; Line 1283
	cmp	BYTE PTR _p$[ebp], 4
	jne	SHORT $L85708
; Line 1284
	mov	BYTE PTR _p$[ebp], 37			; 00000025H
; Line 1285
	jmp	SHORT $L85708
$L85702:
; Line 1274
	cmp	BYTE PTR _p$[ebp], 1
	mov	BYTE PTR _dt$[ebp], 11			; 0000000bH
	jne	SHORT $L85703
; Line 1275
	mov	BYTE PTR _p$[ebp], 11			; 0000000bH
$L85703:
; Line 1276
	cmp	BYTE PTR _p$[ebp], 4
	jne	SHORT $L85708
; Line 1277
	mov	BYTE PTR _p$[ebp], 14			; 0000000eH
; Line 1278
	jmp	SHORT $L85708
$L85701:
; Line 1270
	mov	BYTE PTR _dt$[ebp], 1
$L85708:
	push	ebx
; Line 1290
	push	6
	pop	edx
	xor	cl, cl
	call	@random@8
	mov	ebx, eax
	sub	ebx, 5
	neg	ebx
	sbb	bl, bl
	and	bl, 14					; 0000000eH
	add	bl, 11					; 0000000bH
; Line 1294
	cmp	BYTE PTR _dt$[ebp], 11			; 0000000bH
	mov	BYTE PTR _wt$[ebp], bl
	jne	SHORT $L85711
; Line 1295
	mov	bl, 11					; 0000000bH
	mov	BYTE PTR _wt$[ebp], bl
$L85711:
; Line 1297
	mov	cl, BYTE PTR _p$[ebp]
	lea	esi, DWORD PTR [esi+esi*4]
	shl	esi, 3
	lea	eax, DWORD PTR [esi+edi]
	mov	BYTE PTR _dungeon[eax], cl
; Line 1299
	mov	ecx, DWORD PTR _dy$[ebp]
	cmp	ecx, 1
	jle	SHORT $L85712
	lea	edi, DWORD PTR _dungeon[eax+1]
	mov	al, BYTE PTR _dt$[ebp]
	mov	bl, al
	dec	ecx
	mov	bh, bl
	mov	edx, ecx
	mov	eax, ebx
	shl	eax, 16					; 00000010H
	mov	ax, bx
	mov	bl, BYTE PTR _wt$[ebp]
	shr	ecx, 2
	rep stosd
	mov	ecx, edx
	and	ecx, 3
	rep stosb
	mov	ecx, DWORD PTR _dy$[ebp]
	mov	edi, DWORD PTR _j$[ebp]
$L85712:
; Line 1303
	lea	edx, DWORD PTR [ecx-1]
	xor	cl, cl
	call	@random@8
	inc	eax
; Line 1305
	cmp	bl, 11					; 0000000bH
	pop	ebx
	jne	SHORT $L85715
; Line 1306
	add	esi, eax
	mov	BYTE PTR _dungeon[esi+edi], 11		; 0000000bH
; Line 1307
	jmp	SHORT $L85716
$L85715:
; Line 1308
	add	esi, eax
	lea	eax, DWORD PTR [esi+edi]
; Line 1309
	or	BYTE PTR _mydflags[eax], 2
	mov	BYTE PTR _dungeon[eax], 1
$L85716:
	pop	edi
	pop	esi
; Line 1311
	leave
	ret	8
@L5VertWall@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L5tileFix
_TEXT	SEGMENT
_L5tileFix PROC NEAR					; COMDAT
; Line 1314
	push	esi
; Line 1317
	xor	esi, esi
$L85720:
; Line 1318
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[esi+40]
	pop	edx
$L85723:
; Line 1319
	mov	cl, BYTE PTR [eax-40]
	cmp	cl, 2
	jne	SHORT $L85726
	cmp	BYTE PTR [eax], 22			; 00000016H
	jne	SHORT $L85726
; Line 1320
	mov	BYTE PTR [eax], 23			; 00000017H
$L85726:
; Line 1321
	cmp	cl, 13					; 0000000dH
	jne	SHORT $L85728
	cmp	BYTE PTR [eax], 22			; 00000016H
	jne	SHORT $L85727
; Line 1322
	mov	BYTE PTR [eax], 18			; 00000012H
$L85727:
; Line 1323
	cmp	cl, 13					; 0000000dH
	jne	SHORT $L85728
	cmp	BYTE PTR [eax], 2
	jne	SHORT $L85728
; Line 1324
	mov	BYTE PTR [eax], 7
$L85728:
; Line 1325
	cmp	cl, 6
	jne	SHORT $L85729
	cmp	BYTE PTR [eax], 22			; 00000016H
	jne	SHORT $L85729
; Line 1326
	mov	BYTE PTR [eax], 24			; 00000018H
$L85729:
; Line 1327
	cmp	cl, 1
	jne	SHORT $L85730
	cmp	BYTE PTR [eax-39], 22			; 00000016H
	jne	SHORT $L85730
; Line 1328
	mov	BYTE PTR [eax-39], 24			; 00000018H
$L85730:
; Line 1329
	cmp	cl, 13					; 0000000dH
	jne	SHORT $L85724
	cmp	BYTE PTR [eax-39], 1
	jne	SHORT $L85731
; Line 1330
	mov	BYTE PTR [eax-39], 6
$L85731:
; Line 1331
	cmp	cl, 13					; 0000000dH
	jne	SHORT $L85724
	cmp	BYTE PTR [eax-39], 22			; 00000016H
	jne	SHORT $L85724
; Line 1332
	mov	BYTE PTR [eax-39], 19			; 00000013H
$L85724:
; Line 1318
	add	eax, 40					; 00000028H
	dec	edx
	jne	SHORT $L85723
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85720
	push	ebx
	push	edi
; Line 1336
	xor	ecx, ecx
$L85733:
; Line 1337
	xor	edi, edi
$L85736:
; Line 1338
	lea	eax, DWORD PTR [edi+edi*4]
	shl	eax, 3
	lea	esi, DWORD PTR _dungeon[eax+ecx]
	mov	bl, BYTE PTR [esi]
	cmp	bl, 13					; 0000000dH
	jne	SHORT $L85740
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 19			; 00000013H
	jne	SHORT $L85739
; Line 1339
	mov	BYTE PTR [edx], 21			; 00000015H
$L85739:
; Line 1340
	cmp	bl, 13					; 0000000dH
	jne	SHORT $L85740
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 22			; 00000016H
	jne	SHORT $L85740
; Line 1341
	mov	BYTE PTR [edx], 20			; 00000014H
$L85740:
; Line 1342
	cmp	bl, 7
	jne	SHORT $L85741
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 22			; 00000016H
	jne	SHORT $L85741
; Line 1343
	mov	BYTE PTR [edx], 23			; 00000017H
$L85741:
; Line 1344
	cmp	bl, 13					; 0000000dH
	jne	SHORT $L85742
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 24			; 00000018H
	jne	SHORT $L85742
; Line 1345
	mov	BYTE PTR [edx], 21			; 00000015H
$L85742:
; Line 1346
	cmp	bl, 19					; 00000013H
	jne	SHORT $L85743
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 22			; 00000016H
	jne	SHORT $L85743
; Line 1347
	mov	BYTE PTR [edx], 20			; 00000014H
$L85743:
; Line 1348
	cmp	bl, 2
	jne	SHORT $L85744
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 19			; 00000013H
	jne	SHORT $L85744
; Line 1349
	mov	BYTE PTR [edx], 21			; 00000015H
$L85744:
; Line 1350
	cmp	bl, 19					; 00000013H
	jne	SHORT $L85745
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 1
	jne	SHORT $L85745
; Line 1351
	mov	BYTE PTR [edx], 6
$L85745:
; Line 1352
	cmp	bl, 7
	jne	SHORT $L85746
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 19			; 00000013H
	jne	SHORT $L85746
; Line 1353
	mov	BYTE PTR [edx], 21			; 00000015H
$L85746:
; Line 1354
	cmp	bl, 2
	jne	SHORT $L85747
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 1
	jne	SHORT $L85747
; Line 1355
	mov	BYTE PTR [edx], 6
$L85747:
; Line 1356
	cmp	bl, 3
	jne	SHORT $L85748
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 22			; 00000016H
	jne	SHORT $L85748
; Line 1357
	mov	BYTE PTR [edx], 24			; 00000018H
$L85748:
; Line 1358
	cmp	bl, 21					; 00000015H
	jne	SHORT $L85749
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 1
	jne	SHORT $L85749
; Line 1359
	mov	BYTE PTR [edx], 6
$L85749:
; Line 1360
	cmp	bl, 7
	jne	SHORT $L85751
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 1
	jne	SHORT $L85750
; Line 1361
	mov	BYTE PTR [edx], 6
$L85750:
; Line 1362
	cmp	bl, 7
	jne	SHORT $L85751
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 24			; 00000018H
	jne	SHORT $L85751
; Line 1363
	mov	BYTE PTR [edx], 21			; 00000015H
$L85751:
; Line 1364
	cmp	bl, 4
	jne	SHORT $L85752
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 16			; 00000010H
	jne	SHORT $L85752
; Line 1365
	mov	BYTE PTR [edx], 17			; 00000011H
$L85752:
; Line 1366
	cmp	bl, 7
	jne	SHORT $L85753
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 13			; 0000000dH
	jne	SHORT $L85753
; Line 1367
	mov	BYTE PTR [edx], 17			; 00000011H
$L85753:
; Line 1368
	cmp	bl, 2
	jne	SHORT $L85755
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 24			; 00000018H
	jne	SHORT $L85754
; Line 1369
	mov	BYTE PTR [edx], 21			; 00000015H
$L85754:
; Line 1370
	cmp	bl, 2
	jne	SHORT $L85755
	lea	edx, DWORD PTR _dungeon[eax+ecx+40]
	cmp	BYTE PTR [edx], 13			; 0000000dH
	jne	SHORT $L85755
; Line 1371
	mov	BYTE PTR [edx], 17			; 00000011H
$L85755:
; Line 1372
	cmp	bl, 23					; 00000017H
	jne	SHORT $L85756
	cmp	BYTE PTR [esi-40], 22			; 00000016H
	jne	SHORT $L85756
; Line 1373
	mov	BYTE PTR [esi-40], 19			; 00000013H
$L85756:
; Line 1374
	cmp	bl, 19					; 00000013H
	jne	SHORT $L85757
	cmp	BYTE PTR [esi-40], 23			; 00000017H
	jne	SHORT $L85757
; Line 1375
	mov	BYTE PTR [esi-40], 21			; 00000015H
$L85757:
; Line 1376
	cmp	bl, 6
	jne	SHORT $L85759
	cmp	BYTE PTR [esi-40], 22			; 00000016H
	jne	SHORT $L85758
; Line 1377
	mov	BYTE PTR [esi-40], 24			; 00000018H
$L85758:
; Line 1378
	cmp	bl, 6
	jne	SHORT $L85759
	cmp	BYTE PTR [esi-40], 23			; 00000017H
	jne	SHORT $L85759
; Line 1379
	mov	BYTE PTR [esi-40], 21			; 00000015H
$L85759:
; Line 1380
	cmp	bl, 1
	jne	SHORT $L85760
	lea	edx, DWORD PTR _dungeon[eax+ecx+1]
	cmp	BYTE PTR [edx], 2
	jne	SHORT $L85760
; Line 1381
	mov	BYTE PTR [edx], 7
$L85760:
; Line 1382
	cmp	bl, 6
	jne	SHORT $L85761
	lea	edx, DWORD PTR _dungeon[eax+ecx+1]
	cmp	BYTE PTR [edx], 18			; 00000012H
	jne	SHORT $L85761
; Line 1383
	mov	BYTE PTR [edx], 21			; 00000015H
$L85761:
; Line 1384
	cmp	bl, 18					; 00000012H
	jne	SHORT $L85762
	lea	edx, DWORD PTR _dungeon[eax+ecx+1]
	cmp	BYTE PTR [edx], 2
	jne	SHORT $L85762
; Line 1385
	mov	BYTE PTR [edx], 7
$L85762:
; Line 1386
	cmp	bl, 6
	jne	SHORT $L85763
	lea	edx, DWORD PTR _dungeon[eax+ecx+1]
	cmp	BYTE PTR [edx], 2
	jne	SHORT $L85763
; Line 1387
	mov	BYTE PTR [edx], 7
$L85763:
; Line 1388
	cmp	bl, 21					; 00000015H
	jne	SHORT $L85764
	lea	edx, DWORD PTR _dungeon[eax+ecx+1]
	cmp	BYTE PTR [edx], 2
	jne	SHORT $L85764
; Line 1389
	mov	BYTE PTR [edx], 7
$L85764:
; Line 1390
	cmp	bl, 6
	jne	SHORT $L85766
	lea	edx, DWORD PTR _dungeon[eax+ecx+1]
	cmp	BYTE PTR [edx], 22			; 00000016H
	jne	SHORT $L85765
; Line 1391
	mov	BYTE PTR [edx], 24			; 00000018H
$L85765:
; Line 1392
	cmp	bl, 6
	jne	SHORT $L85766
	lea	edx, DWORD PTR _dungeon[eax+ecx+1]
	cmp	BYTE PTR [edx], 13			; 0000000dH
	jne	SHORT $L85766
; Line 1393
	mov	BYTE PTR [edx], 16			; 00000010H
$L85766:
; Line 1394
	cmp	bl, 1
	jne	SHORT $L85767
	lea	edx, DWORD PTR _dungeon[eax+ecx+1]
	cmp	BYTE PTR [edx], 13			; 0000000dH
	jne	SHORT $L85767
; Line 1395
	mov	BYTE PTR [edx], 16			; 00000010H
$L85767:
; Line 1396
	cmp	bl, 13					; 0000000dH
	jne	SHORT $L85768
	lea	eax, DWORD PTR _dungeon[eax+ecx+1]
	cmp	BYTE PTR [eax], 16			; 00000010H
	jne	SHORT $L85768
; Line 1397
	mov	BYTE PTR [eax], 17			; 00000011H
$L85768:
; Line 1398
	cmp	bl, 6
	jne	SHORT $L85770
	cmp	BYTE PTR [esi-1], 22			; 00000016H
	jne	SHORT $L85769
; Line 1399
	mov	BYTE PTR [esi-1], 7
$L85769:
; Line 1400
	cmp	bl, 6
	jne	SHORT $L85770
	cmp	BYTE PTR [esi-1], 22			; 00000016H
	jne	SHORT $L85770
; Line 1401
	mov	BYTE PTR [esi-1], 24			; 00000018H
$L85770:
; Line 1402
	cmp	bl, 7
	jne	SHORT $L85771
	cmp	BYTE PTR [esi-1], 24			; 00000018H
	jne	SHORT $L85771
; Line 1403
	mov	BYTE PTR [esi-1], 21			; 00000015H
$L85771:
; Line 1404
	cmp	bl, 18					; 00000012H
	jne	SHORT $L85737
	cmp	BYTE PTR [esi-1], 24			; 00000018H
	jne	SHORT $L85737
; Line 1405
	mov	BYTE PTR [esi-1], 21			; 00000015H
$L85737:
; Line 1337
	inc	edi
	cmp	edi, 40					; 00000028H
	jl	$L85736
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	$L85733
	pop	edi
; Line 1409
	xor	edx, edx
	pop	ebx
$L85773:
; Line 1410
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[edx]
	pop	esi
$L85776:
; Line 1411
	mov	cl, BYTE PTR [eax]
	cmp	cl, 4
	jne	SHORT $L85779
	cmp	BYTE PTR [eax+1], 2
	jne	SHORT $L85779
; Line 1412
	mov	BYTE PTR [eax+1], 7
$L85779:
; Line 1413
	cmp	cl, 2
	jne	SHORT $L85780
	cmp	BYTE PTR [eax+40], 19			; 00000013H
	jne	SHORT $L85780
; Line 1414
	mov	BYTE PTR [eax+40], 21			; 00000015H
$L85780:
; Line 1415
	cmp	cl, 18					; 00000012H
	jne	SHORT $L85777
	cmp	BYTE PTR [eax+1], 22			; 00000016H
	jne	SHORT $L85777
; Line 1416
	mov	BYTE PTR [eax+1], 20			; 00000014H
$L85777:
; Line 1410
	add	eax, 40					; 00000028H
	dec	esi
	jne	SHORT $L85776
	inc	edx
	cmp	edx, 40					; 00000028H
	jl	SHORT $L85773
	pop	esi
; Line 1419
	ret	0
_L5tileFix ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L5Subs
_TEXT	SEGMENT
_DRLG_L5Subs PROC NEAR					; COMDAT
; Line 1422
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 1425
	xor	edi, edi
$L85787:
; Line 1445
	lea	esi, DWORD PTR [edi-1]
	mov	DWORD PTR -4+[ebp], 40			; 00000028H
$L85790:
	push	4
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	jne	$L85791
	movzx	eax, BYTE PTR _dungeon[esi+1]
	mov	bl, BYTE PTR _L5BTYPES[eax]
	test	bl, bl
	je	$L85791
; Line 1430
	cmp	BYTE PTR _mydflags[esi+1], 0
	jne	SHORT $L85791
; Line 1431
	push	16					; 00000010H
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 1432
	or	ecx, -1
; Line 1434
	test	eax, eax
	jl	SHORT $L85811
$L85798:
; Line 1435
	inc	ecx
	cmp	ecx, 206				; 000000ceH
	jne	SHORT $L85800
; Line 1436
	xor	ecx, ecx
$L85800:
; Line 1437
	cmp	bl, BYTE PTR _L5BTYPES[ecx]
	jne	SHORT $L85801
; Line 1438
	dec	eax
$L85801:
; Line 1434
	test	eax, eax
	jge	SHORT $L85798
; Line 1441
	cmp	ecx, 89					; 00000059H
	jne	SHORT $L85806
; Line 1442
	lea	eax, DWORD PTR _dungeon[esi]
	movzx	edx, BYTE PTR [eax]
	cmp	BYTE PTR _L5BTYPES[edx], 79		; 0000004fH
	jne	SHORT $L85805
	cmp	BYTE PTR _mydflags[esi], 0
	jne	SHORT $L85805
; Line 1445
	mov	BYTE PTR [eax], 90			; 0000005aH
	jmp	SHORT $L85811
$L85805:
; Line 1443
	push	79					; 0000004fH
	pop	ecx
$L85806:
; Line 1447
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $L85811
; Line 1448
	lea	eax, DWORD PTR _dungeon[esi+41]
	movzx	edx, BYTE PTR [eax]
	cmp	BYTE PTR _L5BTYPES[edx], 80		; 00000050H
	jne	SHORT $L85810
	cmp	BYTE PTR _mydflags[esi+41], 0
	jne	SHORT $L85810
; Line 1451
	mov	BYTE PTR [eax], 92			; 0000005cH
	jmp	SHORT $L85811
$L85810:
; Line 1449
	push	80					; 00000050H
	pop	ecx
$L85811:
; Line 1453
	mov	BYTE PTR _dungeon[esi+1], cl
$L85791:
; Line 1445
	add	esi, 40					; 00000028H
	dec	DWORD PTR -4+[ebp]
	jne	$L85790
	inc	edi
	cmp	edi, 40					; 00000028H
	jl	$L85787
	pop	edi
	pop	esi
	pop	ebx
; Line 1458
	leave
	ret	0
_DRLG_L5Subs ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L5GChamber@24
PUBLIC	@DRLG_L5GHall@16
PUBLIC	@DRLG_L5SetRoom@8
; Function compile flags: /Ogsy
;	COMDAT _L5FillChambers
_TEXT	SEGMENT
_L5FillChambers PROC NEAR				; COMDAT
; Line 1461
	push	ebx
	push	esi
	push	edi
; Line 1464
	xor	edi, edi
	xor	esi, esi
	inc	edi
	cmp	DWORD PTR _HR1, esi
	push	14					; 0000000eH
	pop	ebx
	je	SHORT $L85814
; Line 1465
	push	edi
	push	esi
	push	esi
	push	esi
	mov	edx, ebx
	xor	ecx, ecx
	call	@DRLG_L5GChamber@24
$L85814:
; Line 1467
	cmp	DWORD PTR _HR2, esi
	je	SHORT $L85819
; Line 1468
	cmp	DWORD PTR _HR1, esi
	je	SHORT $L86383
	cmp	DWORD PTR _HR3, esi
	jne	SHORT $L85816
; Line 1469
	push	esi
	push	edi
	push	esi
	push	esi
	mov	edx, ebx
	mov	ecx, ebx
	call	@DRLG_L5GChamber@24
$L85816:
; Line 1470
	cmp	DWORD PTR _HR1, esi
	jne	SHORT $L86382
$L86383:
	cmp	DWORD PTR _HR3, esi
	je	SHORT $L85817
; Line 1471
	push	edi
	push	esi
	push	esi
	push	esi
	mov	edx, ebx
	mov	ecx, ebx
	call	@DRLG_L5GChamber@24
$L85817:
; Line 1472
	cmp	DWORD PTR _HR1, esi
	je	SHORT $L86381
$L86382:
	cmp	DWORD PTR _HR3, esi
	je	SHORT $L85818
; Line 1473
	push	edi
	push	edi
	push	esi
	push	esi
	mov	edx, ebx
	mov	ecx, ebx
	call	@DRLG_L5GChamber@24
$L85818:
; Line 1474
	cmp	DWORD PTR _HR1, esi
	jne	SHORT $L85819
$L86381:
	cmp	DWORD PTR _HR3, esi
	jne	SHORT $L86380
; Line 1475
	push	esi
	push	esi
	push	esi
	push	esi
	mov	edx, ebx
	mov	ecx, ebx
	call	@DRLG_L5GChamber@24
$L85819:
; Line 1478
	cmp	DWORD PTR _HR3, esi
	je	SHORT $L85820
$L86380:
; Line 1479
	push	esi
	push	edi
	push	esi
	push	esi
	push	28					; 0000001cH
	mov	edx, ebx
	pop	ecx
	call	@DRLG_L5GChamber@24
$L85820:
; Line 1480
	cmp	DWORD PTR _HR1, esi
	push	ebp
	push	18					; 00000012H
	pop	ebp
	je	SHORT $L85821
	cmp	DWORD PTR _HR2, esi
	je	SHORT $L85822
; Line 1481
	push	ebp
	push	ebx
	push	12					; 0000000cH
	mov	edx, ebp
	pop	ecx
	call	@DRLG_L5GHall@16
$L85821:
; Line 1482
	cmp	DWORD PTR _HR2, esi
	je	SHORT $L85822
	cmp	DWORD PTR _HR3, esi
	je	SHORT $L85822
; Line 1483
	push	ebp
	push	28					; 0000001cH
	push	26					; 0000001aH
	mov	edx, ebp
	pop	ecx
	call	@DRLG_L5GHall@16
$L85822:
; Line 1484
	cmp	DWORD PTR _HR1, esi
	je	SHORT $L85823
	cmp	DWORD PTR _HR2, esi
	jne	SHORT $L85823
	cmp	DWORD PTR _HR3, esi
	je	SHORT $L85823
; Line 1485
	push	ebp
	push	28					; 0000001cH
	push	12					; 0000000cH
	mov	edx, ebp
	pop	ecx
	call	@DRLG_L5GHall@16
$L85823:
; Line 1486
	cmp	DWORD PTR _VR1, esi
	je	SHORT $L85824
; Line 1487
	push	esi
	push	esi
	push	edi
	push	esi
	xor	edx, edx
	mov	ecx, ebx
	call	@DRLG_L5GChamber@24
$L85824:
; Line 1489
	cmp	DWORD PTR _VR2, esi
	je	SHORT $L85829
; Line 1490
	cmp	DWORD PTR _VR1, esi
	je	SHORT $L86379
	cmp	DWORD PTR _VR3, esi
	jne	SHORT $L85826
; Line 1491
	push	esi
	push	esi
	push	esi
	push	edi
	mov	edx, ebx
	mov	ecx, ebx
	call	@DRLG_L5GChamber@24
$L85826:
; Line 1492
	cmp	DWORD PTR _VR1, esi
	jne	SHORT $L86378
$L86379:
	cmp	DWORD PTR _VR3, esi
	je	SHORT $L85827
; Line 1493
	push	esi
	push	esi
	push	edi
	push	esi
	mov	edx, ebx
	mov	ecx, ebx
	call	@DRLG_L5GChamber@24
$L85827:
; Line 1494
	cmp	DWORD PTR _VR1, esi
	je	SHORT $L86377
$L86378:
	cmp	DWORD PTR _VR3, esi
	je	SHORT $L85828
; Line 1495
	push	esi
	push	esi
	push	edi
	push	edi
	mov	edx, ebx
	mov	ecx, ebx
	call	@DRLG_L5GChamber@24
$L85828:
; Line 1496
	cmp	DWORD PTR _VR1, esi
	jne	SHORT $L85829
$L86377:
	cmp	DWORD PTR _VR3, esi
	jne	SHORT $L86376
; Line 1497
	push	esi
	push	esi
	push	esi
	push	esi
	mov	edx, ebx
	mov	ecx, ebx
	call	@DRLG_L5GChamber@24
$L85829:
; Line 1500
	cmp	DWORD PTR _VR3, esi
	je	SHORT $L85830
$L86376:
; Line 1501
	push	esi
	push	esi
	push	esi
	push	edi
	push	28					; 0000001cH
	mov	ecx, ebx
	pop	edx
	call	@DRLG_L5GChamber@24
$L85830:
; Line 1502
	cmp	DWORD PTR _VR1, esi
	je	SHORT $L85831
	cmp	DWORD PTR _VR2, esi
	je	SHORT $L85832
; Line 1503
	push	ebx
	push	ebp
	push	12					; 0000000cH
	mov	ecx, ebp
	pop	edx
	call	@DRLG_L5GHall@16
$L85831:
; Line 1504
	cmp	DWORD PTR _VR2, esi
	je	SHORT $L85832
	cmp	DWORD PTR _VR3, esi
	je	SHORT $L85832
; Line 1505
	push	28					; 0000001cH
	push	ebp
	push	26					; 0000001aH
	mov	ecx, ebp
	pop	edx
	call	@DRLG_L5GHall@16
$L85832:
; Line 1506
	cmp	DWORD PTR _VR1, esi
	je	SHORT $L85833
	cmp	DWORD PTR _VR2, esi
	jne	SHORT $L85833
	cmp	DWORD PTR _VR3, esi
	je	SHORT $L85833
; Line 1507
	push	28					; 0000001cH
	push	ebp
	push	12					; 0000000cH
	mov	ecx, ebp
	pop	edx
	call	@DRLG_L5GHall@16
$L85833:
; Line 1509
	cmp	DWORD PTR _setloadflag, esi
	pop	ebp
	je	$L85844
; Line 1510
	mov	eax, DWORD PTR _VR1
	cmp	eax, esi
	jne	$L85836
	cmp	DWORD PTR _VR2, esi
	jne	$L85836
	cmp	DWORD PTR _VR3, esi
	jne	$L85836
; Line 1540
	cmp	DWORD PTR _HR1, esi
	push	2
	pop	ebx
	jne	SHORT $L86375
	cmp	DWORD PTR _HR2, esi
	je	$L85856
	cmp	DWORD PTR _HR3, esi
	je	$L85856
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	test	eax, eax
	je	SHORT $L85851
; Line 1541
	mov	edi, ebx
$L85851:
; Line 1542
	cmp	DWORD PTR _HR1, esi
	je	SHORT $L85856
$L86375:
	cmp	DWORD PTR _HR2, esi
	je	SHORT $L85852
	cmp	DWORD PTR _HR3, esi
	jne	SHORT $L85852
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	test	eax, eax
	je	SHORT $L85852
; Line 1543
	xor	edi, edi
$L85852:
; Line 1545
	cmp	DWORD PTR _HR1, esi
	je	SHORT $L85856
	cmp	DWORD PTR _HR2, esi
	jne	SHORT $L85854
	cmp	DWORD PTR _HR3, esi
	je	SHORT $L85854
; Line 1546
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	mov	edi, eax
	neg	edi
	sbb	edi, edi
	and	edi, -2					; fffffffeH
	add	edi, ebx
$L85854:
; Line 1552
	cmp	DWORD PTR _HR1, esi
	je	SHORT $L85856
	cmp	DWORD PTR _HR2, esi
	je	SHORT $L85856
	cmp	DWORD PTR _HR3, esi
	je	SHORT $L85856
; Line 1553
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	edi, eax
$L85856:
; Line 1555
	sub	edi, esi
	je	SHORT $L85861
	dec	edi
	je	SHORT $L85862
	dec	edi
	jne	$L85844
; Line 1563
	push	16					; 00000010H
	pop	edx
	push	30					; 0000001eH
	jmp	$L86395
$L85862:
; Line 1560
	push	16					; 00000010H
	pop	ecx
	mov	edx, ecx
	jmp	$L86393
$L85861:
; Line 1557
	push	16					; 00000010H
	mov	ecx, ebx
	pop	edx
	jmp	$L86393
$L85836:
; Line 1512
	push	2
	cmp	eax, esi
	pop	ebx
	jne	SHORT $L86374
	cmp	DWORD PTR _VR2, esi
	je	$L85842
	cmp	DWORD PTR _VR3, esi
	je	$L85842
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	test	eax, eax
	je	SHORT $L85837
; Line 1513
	mov	edi, ebx
$L85837:
; Line 1514
	cmp	DWORD PTR _VR1, esi
	je	SHORT $L85842
$L86374:
	cmp	DWORD PTR _VR2, esi
	je	SHORT $L85838
	cmp	DWORD PTR _VR3, esi
	jne	SHORT $L85838
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	test	eax, eax
	je	SHORT $L85838
; Line 1515
	xor	edi, edi
$L85838:
; Line 1517
	cmp	DWORD PTR _VR1, esi
	je	SHORT $L85842
	cmp	DWORD PTR _VR2, esi
	jne	SHORT $L85840
	cmp	DWORD PTR _VR3, esi
	je	SHORT $L85840
; Line 1518
	mov	edx, ebx
	xor	cl, cl
	call	@random@8
	mov	edi, eax
	neg	edi
	sbb	edi, edi
	and	edi, -2					; fffffffeH
	add	edi, ebx
$L85840:
; Line 1524
	cmp	DWORD PTR _VR1, esi
	je	SHORT $L85842
	cmp	DWORD PTR _VR2, esi
	je	SHORT $L85842
	cmp	DWORD PTR _VR3, esi
	je	SHORT $L85842
; Line 1525
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	edi, eax
$L85842:
; Line 1527
	sub	edi, esi
	je	SHORT $L85847
	dec	edi
	je	$L85862
	dec	edi
	jne	SHORT $L85844
; Line 1535
	push	30					; 0000001eH
	pop	edx
	jmp	SHORT $L86394
$L85847:
; Line 1529
	mov	edx, ebx
$L86394:
	push	16					; 00000010H
$L86395:
	pop	ecx
$L86393:
	pop	edi
	pop	esi
	pop	ebx
	jmp	@DRLG_L5SetRoom@8
$L85844:
	pop	edi
	pop	esi
	pop	ebx
; Line 1568
	ret	0
_L5FillChambers ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L5GChamber@24
_TEXT	SEGMENT
_topflag$ = 8
_bottomflag$ = 12
_leftflag$ = 16
_rightflag$ = 20
@DRLG_L5GChamber@24 PROC NEAR				; COMDAT
; _sx$ = ecx
; _sy$ = edx
; Line 1587
	cmp	BYTE PTR _topflag$[esp-4], 1
	jne	SHORT $L85890
; Line 1588
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [edx+eax*8]
; Line 1589
	mov	BYTE PTR _dungeon[eax+80], 12		; 0000000cH
; Line 1590
	mov	BYTE PTR _dungeon[eax+120], 12		; 0000000cH
; Line 1591
	mov	BYTE PTR _dungeon[eax+160], 3
; Line 1592
	mov	BYTE PTR _dungeon[eax+280], 9
; Line 1593
	mov	BYTE PTR _dungeon[eax+320], 12		; 0000000cH
; Line 1594
	mov	BYTE PTR _dungeon[eax+360], 2
$L85890:
; Line 1596
	cmp	BYTE PTR _bottomflag$[esp-4], 1
	jne	SHORT $L85891
; Line 1598
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [edx+eax*8+11]
; Line 1599
	mov	BYTE PTR _dungeon[eax+80], 10		; 0000000aH
; Line 1600
	mov	BYTE PTR _dungeon[eax+120], 12		; 0000000cH
; Line 1601
	mov	BYTE PTR _dungeon[eax+160], 8
; Line 1602
	mov	BYTE PTR _dungeon[eax+280], 5
; Line 1603
	mov	BYTE PTR _dungeon[eax+320], 12		; 0000000cH
; Line 1604
	lea	eax, DWORD PTR _dungeon[eax+360]
; Line 1605
	cmp	BYTE PTR [eax], 4
	je	SHORT $L85891
; Line 1606
	mov	BYTE PTR [eax], 21			; 00000015H
$L85891:
; Line 1609
	cmp	BYTE PTR _leftflag$[esp-4], 1
	jne	SHORT $L85893
; Line 1610
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [edx+eax*8]
; Line 1611
	mov	BYTE PTR _dungeon[eax+2], 11		; 0000000bH
; Line 1612
	mov	BYTE PTR _dungeon[eax+3], 11		; 0000000bH
; Line 1613
	mov	BYTE PTR _dungeon[eax+4], 3
; Line 1614
	mov	BYTE PTR _dungeon[eax+7], 8
; Line 1615
	mov	BYTE PTR _dungeon[eax+8], 11		; 0000000bH
; Line 1616
	mov	BYTE PTR _dungeon[eax+9], 1
$L85893:
; Line 1618
	cmp	BYTE PTR _rightflag$[esp-4], 1
	jne	SHORT $L85894
; Line 1620
	lea	eax, DWORD PTR [ecx+ecx*4+55]
	lea	eax, DWORD PTR [edx+eax*8]
; Line 1621
	mov	BYTE PTR _dungeon[eax+2], 14		; 0000000eH
; Line 1622
	mov	BYTE PTR _dungeon[eax+3], 11		; 0000000bH
; Line 1623
	mov	BYTE PTR _dungeon[eax+4], 9
; Line 1624
	mov	BYTE PTR _dungeon[eax+7], 5
; Line 1625
	mov	BYTE PTR _dungeon[eax+8], 11		; 0000000bH
; Line 1626
	lea	eax, DWORD PTR _dungeon[eax+9]
; Line 1627
	cmp	BYTE PTR [eax], 4
	je	SHORT $L85894
; Line 1628
	mov	BYTE PTR [eax], 21			; 00000015H
$L85894:
; Line 1632
	lea	eax, DWORD PTR [ecx+ecx*4]
	push	esi
	push	edi
	push	10					; 0000000aH
	lea	eax, DWORD PTR [edx+eax*8]
	pop	edi
; Line 1633
	lea	edx, DWORD PTR [eax+1]
$L85896:
; Line 1635
	push	10					; 0000000aH
; Line 1639
	mov	ecx, edx
	pop	esi
$L85899:
	or	BYTE PTR _mydflags[ecx+40], 64		; 00000040H
	mov	BYTE PTR _dungeon[ecx+40], 13		; 0000000dH
	add	ecx, 40					; 00000028H
; Line 1642
	dec	esi
	jne	SHORT $L85899
; Line 1643
	inc	edx
; Line 1645
	dec	edi
	jne	SHORT $L85896
	pop	edi
; Line 1646
	mov	BYTE PTR _dungeon[eax+164], 15		; 0000000fH
; Line 1647
	mov	BYTE PTR _dungeon[eax+284], 15		; 0000000fH
; Line 1648
	mov	BYTE PTR _dungeon[eax+167], 15		; 0000000fH
; Line 1649
	mov	BYTE PTR _dungeon[eax+287], 15		; 0000000fH
	pop	esi
; Line 1650
	ret	16					; 00000010H
@DRLG_L5GChamber@24 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L5GHall@16
_TEXT	SEGMENT
_x2$ = 8
_y2$ = 12
@DRLG_L5GHall@16 PROC NEAR				; COMDAT
; _x1$ = ecx
; _y1$ = edx
; Line 1656
	cmp	edx, DWORD PTR _y2$[esp-4]
	jne	SHORT $L85912
; Line 1657
	mov	eax, DWORD PTR _x2$[esp-4]
	cmp	ecx, eax
	jge	SHORT $L85919
	push	esi
	lea	esi, DWORD PTR [ecx+ecx*4]
	sub	eax, ecx
	lea	edx, DWORD PTR _dungeon[edx+esi*8+3]
	pop	esi
$L85913:
; Line 1658
	mov	BYTE PTR [edx-3], 12			; 0000000cH
; Line 1659
	mov	BYTE PTR [edx], 12			; 0000000cH
	add	edx, 40					; 00000028H
	dec	eax
	jne	SHORT $L85913
; Line 1661
	jmp	SHORT $L85919
$L85912:
; Line 1662
	cmp	edx, DWORD PTR _y2$[esp-4]
	mov	eax, edx
	jge	SHORT $L85919
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR _dungeon[ecx*8+120]
$L85917:
; Line 1663
	mov	BYTE PTR [ecx+eax-120], 11		; 0000000bH
; Line 1664
	mov	BYTE PTR [ecx+eax], 11			; 0000000bH
	inc	eax
	cmp	eax, DWORD PTR _y2$[esp-4]
	jl	SHORT $L85917
$L85919:
; Line 1667
	ret	8
@DRLG_L5GHall@16 ENDP
_TEXT	ENDS
EXTRN	_setpc_h:DWORD
EXTRN	_setpc_w:DWORD
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L5SetRoom@8
_TEXT	SEGMENT
_j$ = -4
_sp$ = -8
@DRLG_L5SetRoom@8 PROC NEAR				; COMDAT
; _rx1$ = ecx
; _ry1$ = edx
; Line 1670
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1674
	mov	eax, DWORD PTR _pSetPiece
; Line 1684
	and	DWORD PTR _j$[ebp], 0
	push	esi
	push	edi
	movzx	edi, BYTE PTR [eax+2]
	movzx	esi, BYTE PTR [eax]
	add	eax, 4
	mov	DWORD PTR _setpc_x, ecx
	test	edi, edi
	mov	DWORD PTR _setpc_y, edx
	mov	DWORD PTR _setpc_w, esi
	mov	DWORD PTR _setpc_h, edi
	mov	DWORD PTR _sp$[ebp], eax
	jle	SHORT $L85935
	push	ebx
$L85933:
; Line 1685
	test	esi, esi
	jle	SHORT $L85934
; Line 1690
	mov	ebx, DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR [ecx+ecx*4]
	mov	DWORD PTR -12+[ebp], esi
	lea	eax, DWORD PTR [ebx+eax*8]
	add	eax, edx
$L85936:
	mov	ebx, DWORD PTR _sp$[ebp]
	mov	bl, BYTE PTR [ebx]
	test	bl, bl
	je	SHORT $L85939
	or	BYTE PTR _mydflags[eax], -128		; ffffff80H
	mov	BYTE PTR _dungeon[eax], bl
	jmp	SHORT $L85940
$L85939:
	mov	BYTE PTR _dungeon[eax], 13		; 0000000dH
$L85940:
; Line 1692
	add	DWORD PTR _sp$[ebp], 2
	add	eax, 40					; 00000028H
	dec	DWORD PTR -12+[ebp]
	jne	SHORT $L85936
$L85934:
; Line 1684
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], edi
	jl	SHORT $L85933
	pop	ebx
$L85935:
	pop	edi
	pop	esi
; Line 1695
	leave
	ret	0
@DRLG_L5SetRoom@8 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L5FTVR@20
EXTRN	_dung_map:BYTE
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L5FloodTVal
_TEXT	SEGMENT
_xx$ = -8
_i$ = -4
_DRLG_L5FloodTVal PROC NEAR				; COMDAT
; Line 1700
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 1703
	push	16					; 00000010H
	pop	ebx
; Line 1705
	xor	esi, esi
$L85946:
; Line 1708
	and	DWORD PTR _i$[ebp], 0
	lea	eax, DWORD PTR _dungeon[esi]
	mov	DWORD PTR _xx$[ebp], 16			; 00000010H
	lea	edi, DWORD PTR _dung_map[ebx+1792]
	mov	DWORD PTR -12+[ebp], eax
$L85949:
; Line 1709
	mov	eax, DWORD PTR -12+[ebp]
	cmp	BYTE PTR [eax], 13			; 0000000dH
	jne	SHORT $L85952
	cmp	BYTE PTR [edi], 0
	jne	SHORT $L85952
; Line 1710
	mov	ecx, DWORD PTR _i$[ebp]
	push	0
	push	ebx
	mov	edx, esi
	push	DWORD PTR _xx$[ebp]
	call	@DRLG_L5FTVR@20
; Line 1711
	inc	BYTE PTR _TransVal
$L85952:
; Line 1713
	add	DWORD PTR _xx$[ebp], 2
	add	DWORD PTR -12+[ebp], 40			; 00000028H
	add	edi, 224				; 000000e0H
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 40			; 00000028H
	jl	SHORT $L85949
; Line 1715
	inc	ebx
	inc	ebx
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85946
	pop	edi
	pop	esi
	pop	ebx
; Line 1717
	leave
	ret	0
_DRLG_L5FloodTVal ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L5FTVR@20
_TEXT	SEGMENT
_i$ = -12
_j$ = -8
_x$ = 8
_y$ = 12
_d$ = 16
@DRLG_L5FTVR@20 PROC NEAR				; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 1721
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
; Line 1722
	mov	ebx, DWORD PTR _x$[ebp]
	mov	eax, ebx
	push	esi
	imul	eax, 112				; 00000070H
	mov	esi, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, edx
	mov	edx, ecx
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR _j$[ebp], edi
	mov	DWORD PTR _i$[ebp], edx
	cmp	BYTE PTR _dung_map[ecx], 0
	jne	$L86428
	mov	DWORD PTR -20+[ebp], eax
	lea	eax, DWORD PTR [edx-1]
	mov	DWORD PTR -4+[ebp], eax
	add	ebx, -2					; fffffffeH
	lea	eax, DWORD PTR [edx+edx*4]
	dec	edi
	shl	eax, 3
	mov	DWORD PTR 12+[ebp], edi
	lea	edi, DWORD PTR [esi-2]
	mov	DWORD PTR -16+[ebp], eax
	jmp	SHORT $L86426
$L86431:
	mov	eax, DWORD PTR -16+[ebp]
$L86426:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	BYTE PTR _dungeon[eax+edx], 13		; 0000000dH
	jne	$L86433
; Line 1748
	mov	al, BYTE PTR _TransVal
; Line 1752
	push	1
	mov	BYTE PTR _dung_map[ecx], al
	mov	BYTE PTR _dung_map[ecx+112], al
	mov	BYTE PTR _dung_map[ecx+1], al
	mov	BYTE PTR _dung_map[ecx+113], al
	mov	ecx, DWORD PTR -4+[ebp]
	lea	eax, DWORD PTR [ebx+4]
	push	esi
	add	ecx, 2
	push	eax
	call	@DRLG_L5FTVR@20
; Line 1753
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR -4+[ebp]
	push	2
	push	esi
	push	ebx
	call	@DRLG_L5FTVR@20
; Line 1754
	mov	ecx, DWORD PTR 12+[ebp]
	lea	eax, DWORD PTR [edi+4]
	push	3
	push	eax
	push	DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+2]
	mov	ecx, DWORD PTR _i$[ebp]
	call	@DRLG_L5FTVR@20
; Line 1755
	mov	edx, DWORD PTR 12+[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	push	4
	push	edi
	push	DWORD PTR _x$[ebp]
	call	@DRLG_L5FTVR@20
; Line 1756
	mov	edx, DWORD PTR 12+[ebp]
	mov	ecx, DWORD PTR -4+[ebp]
	push	5
	push	edi
	push	ebx
	call	@DRLG_L5FTVR@20
; Line 1757
	mov	edx, DWORD PTR 12+[ebp]
	lea	eax, DWORD PTR [ebx+4]
	push	6
	push	edi
	push	eax
	mov	eax, DWORD PTR -4+[ebp]
	lea	ecx, DWORD PTR [eax+2]
	call	@DRLG_L5FTVR@20
; Line 1758
	mov	ecx, DWORD PTR -4+[ebp]
	lea	eax, DWORD PTR [edi+4]
	push	7
	push	eax
	mov	eax, DWORD PTR 12+[ebp]
	push	ebx
	lea	edx, DWORD PTR [eax+2]
	call	@DRLG_L5FTVR@20
; Line 1759
	add	DWORD PTR -20+[ebp], 224		; 000000e0H
	add	DWORD PTR -16+[ebp], 40			; 00000028H
	push	2
	mov	DWORD PTR _d$[ebp], 8
	pop	eax
	add	DWORD PTR _x$[ebp], eax
	add	esi, eax
	add	edi, eax
	add	ebx, eax
	mov	eax, DWORD PTR -20+[ebp]
	inc	DWORD PTR _j$[ebp]
	inc	DWORD PTR 12+[ebp]
	inc	DWORD PTR _i$[ebp]
	inc	DWORD PTR -4+[ebp]
	lea	ecx, DWORD PTR [eax+esi]
	cmp	BYTE PTR _dung_map[ecx], 0
	je	$L86431
$L86433:
; Line 1722
	mov	ebx, DWORD PTR _x$[ebp]
$L86428:
; Line 1723
	mov	edx, DWORD PTR _d$[ebp]
	mov	al, BYTE PTR _TransVal
	cmp	edx, 1
	jne	SHORT $L85966
; Line 1724
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	add	ecx, esi
	mov	BYTE PTR _dung_map[ecx], al
; Line 1725
	mov	BYTE PTR _dung_map[ecx+1], al
$L85966:
; Line 1727
	cmp	edx, 2
	jne	SHORT $L85967
; Line 1728
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	add	ecx, esi
	mov	BYTE PTR _dung_map[ecx+112], al
; Line 1729
	mov	BYTE PTR _dung_map[ecx+113], al
$L85967:
; Line 1731
	cmp	edx, 3
	jne	SHORT $L85968
; Line 1732
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	add	ecx, esi
	mov	BYTE PTR _dung_map[ecx], al
; Line 1733
	mov	BYTE PTR _dung_map[ecx+112], al
$L85968:
; Line 1735
	cmp	edx, 4
	jne	SHORT $L85969
; Line 1736
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	add	ecx, esi
	mov	BYTE PTR _dung_map[ecx+1], al
; Line 1737
	mov	BYTE PTR _dung_map[ecx+113], al
$L85969:
; Line 1739
	cmp	edx, 5
	jne	SHORT $L85970
; Line 1740
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ecx+esi+113], al
$L85970:
; Line 1741
	cmp	edx, 6
	jne	SHORT $L85971
; Line 1742
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ecx+esi+1], al
$L85971:
; Line 1743
	cmp	edx, 7
	jne	SHORT $L85972
; Line 1744
	mov	ecx, ebx
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ecx+esi+112], al
$L85972:
; Line 1745
	cmp	edx, 8
	jne	SHORT $L85973
; Line 1746
	imul	ebx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ebx+esi], al
$L85973:
	pop	edi
	pop	esi
	pop	ebx
; Line 1761
	leave
	ret	12					; 0000000cH
@DRLG_L5FTVR@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L5TransFix
_TEXT	SEGMENT
_DRLG_L5TransFix PROC NEAR				; COMDAT
; Line 1765
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 1770
	xor	esi, esi
	mov	DWORD PTR -4+[ebp], OFFSET FLAT:_dung_map+1808
$L85980:
; Line 1771
	mov	eax, DWORD PTR -4+[ebp]
	push	40					; 00000028H
	lea	ecx, DWORD PTR _dungeon[esi]
	pop	edi
$L85983:
; Line 1774
	mov	bl, BYTE PTR [ecx]
	cmp	bl, 23					; 00000017H
	jne	SHORT $L85986
	cmp	BYTE PTR [ecx-1], 18			; 00000012H
	jne	SHORT $L85986
; Line 1775
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [eax+112], dl
; Line 1776
	mov	BYTE PTR [eax+113], dl
$L85986:
; Line 1778
	cmp	bl, 24					; 00000018H
	jne	SHORT $L85987
	cmp	BYTE PTR [ecx+40], 19			; 00000013H
	jne	SHORT $L85987
; Line 1779
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [eax+1], dl
; Line 1780
	mov	BYTE PTR [eax+113], dl
$L85987:
; Line 1782
	cmp	bl, 18					; 00000012H
	jne	SHORT $L85988
; Line 1783
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [eax+112], dl
; Line 1784
	mov	BYTE PTR [eax+113], dl
$L85988:
; Line 1786
	cmp	bl, 19					; 00000013H
	jne	SHORT $L85989
; Line 1787
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [eax+1], dl
; Line 1788
	mov	BYTE PTR [eax+113], dl
$L85989:
; Line 1790
	cmp	bl, 20					; 00000014H
	jne	SHORT $L85990
; Line 1791
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [eax+112], dl
; Line 1792
	mov	BYTE PTR [eax+1], dl
; Line 1793
	mov	BYTE PTR [eax+113], dl
$L85990:
; Line 1795
	add	eax, 224				; 000000e0H
	add	ecx, 40					; 00000028H
	dec	edi
	jne	SHORT $L85983
; Line 1797
	add	DWORD PTR -4+[ebp], 2
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85980
	pop	edi
	pop	esi
	pop	ebx
; Line 1799
	leave
	ret	0
_DRLG_L5TransFix ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L5DirtFix
_TEXT	SEGMENT
_DRLG_L5DirtFix PROC NEAR				; COMDAT
; Line 1805
	xor	ecx, ecx
$L85994:
; Line 1806
	push	40					; 00000028H
	lea	eax, DWORD PTR _dungeon[ecx]
	pop	edx
$L85997:
; Line 1807
	cmp	BYTE PTR [eax], 21			; 00000015H
	jne	SHORT $L86000
	cmp	BYTE PTR [eax+40], 19			; 00000013H
	je	SHORT $L86000
; Line 1808
	mov	BYTE PTR [eax], -54			; ffffffcaH
$L86000:
; Line 1809
	cmp	BYTE PTR [eax], 19			; 00000013H
	jne	SHORT $L86001
	cmp	BYTE PTR [eax+40], 19			; 00000013H
	je	SHORT $L86001
; Line 1810
	mov	BYTE PTR [eax], -56			; ffffffc8H
$L86001:
; Line 1811
	cmp	BYTE PTR [eax], 24			; 00000018H
	jne	SHORT $L86002
	cmp	BYTE PTR [eax+40], 19			; 00000013H
	je	SHORT $L86002
; Line 1812
	mov	BYTE PTR [eax], -51			; ffffffcdH
$L86002:
; Line 1813
	cmp	BYTE PTR [eax], 18			; 00000012H
	jne	SHORT $L86003
	cmp	BYTE PTR [eax+1], 18			; 00000012H
	je	SHORT $L86003
; Line 1814
	mov	BYTE PTR [eax], -57			; ffffffc7H
$L86003:
; Line 1815
	cmp	BYTE PTR [eax], 21			; 00000015H
	jne	SHORT $L86004
	cmp	BYTE PTR [eax+1], 18			; 00000012H
	je	SHORT $L86004
; Line 1816
	mov	BYTE PTR [eax], -54			; ffffffcaH
$L86004:
; Line 1817
	cmp	BYTE PTR [eax], 23			; 00000017H
	jne	SHORT $L85998
	cmp	BYTE PTR [eax+1], 18			; 00000012H
	je	SHORT $L85998
; Line 1818
	mov	BYTE PTR [eax], -52			; ffffffccH
$L85998:
; Line 1806
	add	eax, 40					; 00000028H
	dec	edx
	jne	SHORT $L85997
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85994
; Line 1821
	ret	0
_DRLG_L5DirtFix ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L5CornerFix
_TEXT	SEGMENT
_DRLG_L5CornerFix PROC NEAR				; COMDAT
; Line 1829
	xor	edx, edx
	push	esi
	inc	edx
$L86010:
; Line 1831
	push	38					; 00000026H
; Line 1836
	mov	eax, edx
	pop	esi
$L86013:
; Line 1834
	cmp	BYTE PTR _mydflags[eax+40], 0
	jl	SHORT $L86016
	lea	ecx, DWORD PTR _dungeon[eax+40]
	cmp	BYTE PTR [ecx], 17			; 00000011H
	jne	SHORT $L86016
	cmp	BYTE PTR _dungeon[eax], 13		; 0000000dH
	jne	SHORT $L86016
	cmp	BYTE PTR _dungeon[eax+39], 1
	jne	SHORT $L86016
; Line 1835
	and	BYTE PTR _mydflags[eax+39], -128	; ffffff80H
; Line 1836
	mov	BYTE PTR [ecx], 16			; 00000010H
$L86016:
; Line 1838
	lea	ecx, DWORD PTR _dungeon[eax+40]
	cmp	BYTE PTR [ecx], -54			; ffffffcaH
	jne	SHORT $L86017
	cmp	BYTE PTR _dungeon[eax+80], 13		; 0000000dH
	jne	SHORT $L86017
	cmp	BYTE PTR _dungeon[eax+41], 1
	jne	SHORT $L86017
; Line 1839
	mov	BYTE PTR [ecx], 8
$L86017:
; Line 1836
	add	eax, 40					; 00000028H
; Line 1842
	dec	esi
	jne	SHORT $L86013
; Line 1843
	inc	edx
; Line 1844
	cmp	edx, 39					; 00000027H
	jl	SHORT $L86010
	pop	esi
; Line 1845
	ret	0
_DRLG_L5CornerFix ENDP
_TEXT	ENDS
END
