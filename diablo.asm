; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/diablo.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@GINB@I?5need?5help?$CB?5Come?5Here?$CB?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FLBC@Follow?5me?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CODN@Here?8s?5something?5for?5you?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@MOCK@Now?5you?5DIE?$CB?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02NIOF@F9?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03DLBM@F10?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03JBIL@F11?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03GODC@F12?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JOGO@DiabloEvent?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@EBLB@C?3?2Src?2Diablo?2Source?2DIABLO?4CPP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CHEE@DIABLO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@GPDH@gendata?2logo?4smk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MDNJ@Intro?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06EMML@Diablo?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CMOB@gendata?2diablo1?4smk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@MHEM@dd_emulate?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@NCDJ@dd_backbuf?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FCLA@ds_noduplicates?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09ECHC@Reload?9?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@MKGA@Can?8t?5get?5program?5name?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@PIGM@?2Diablo?4ini?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CIBP@NetMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GOPL@No?5help?5available?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@BBPG@while?5in?5stores?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GDKD@Levels?2TownData?2Town?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KFLB@Levels?2TownData?2Town?4MIN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@EGLC@Levels?2TownData?2TownS?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@KHKI@Levels?2L1Data?2L1?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NHFN@Levels?2L1Data?2L1?4TIL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@GBLK@Levels?2L1Data?2L1?4MIN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BCHG@Levels?2L1Data?2L1S?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@PBPI@Levels?2L2Data?2L2?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@IBAN@Levels?2L2Data?2L2?4TIL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DHOK@Levels?2L2Data?2L2?4MIN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FPCA@Levels?2L2Data?2L2S?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DMDH@Levels?2L3Data?2L3?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@EMMC@Levels?2L3Data?2L3?4TIL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@PKCF@Levels?2L3Data?2L3?4MIN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@FNFI@Levels?2L4Data?2L4?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CNKN@Levels?2L4Data?2L4?4TIL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JLEK@Levels?2L4Data?2L4?4MIN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BPJH@LoadLvlGFX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@OMLO@CreateLevel?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@OPHH@?9?9?5Network?5timeout?5?9?9?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@LBKJ@?9?9?5Waiting?5for?5players?5?9?9?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _FreeGameMem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartGame@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @run_game_loop@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @start_game@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _free_game
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _diablo_get_not_running
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _WinMain@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @diablo_parse_flags@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _diablo_init_screen
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @diablo_find_window@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @diablo_reload_process@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _PressEscKey
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DisableInputWndProc@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GM_Game@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LeftMouseDown@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LeftMouseCmd@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TryIconCurs
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _LeftMouseUp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RightMouseDown
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PressSysKey@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @diablo_hotkey_msg@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ReleaseKey@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PressKey@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _diablo_pause_game
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PressChar@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _LoadLvlGFX
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _LoadAllGFX
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CreateLevel@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadGameLevel@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @game_loop@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _game_logic
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @timeout_cursor@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _diablo_color_cyc_logic
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_fullscreen
PUBLIC	_FriendlyMode
PUBLIC	_spszMsgTbl
PUBLIC	_spszMsgKeyTbl
PUBLIC	??_C@_0BI@GINB@I?5need?5help?$CB?5Come?5Here?$CB?$AA@ ; `string'
PUBLIC	??_C@_0L@FLBC@Follow?5me?4?$AA@			; `string'
PUBLIC	??_C@_0BK@CODN@Here?8s?5something?5for?5you?4?$AA@ ; `string'
PUBLIC	??_C@_0N@MOCK@Now?5you?5DIE?$CB?$AA@		; `string'
PUBLIC	??_C@_02NIOF@F9?$AA@				; `string'
PUBLIC	??_C@_03DLBM@F10?$AA@				; `string'
PUBLIC	??_C@_03JBIL@F11?$AA@				; `string'
PUBLIC	??_C@_03GODC@F12?$AA@				; `string'
_DATA	SEGMENT
COMM	_ghMainWnd:DWORD
COMM	_glMid1Seed:DWORD:011H
COMM	_glMid2Seed:DWORD:011H
COMM	_gnLevelTypeTbl:DWORD:011H
COMM	_MouseY:DWORD
COMM	_MouseX:DWORD
COMM	_gbGameLoopStartup:DWORD
COMM	_glSeedTbl:DWORD:011H
COMM	_gbRunGame:DWORD
COMM	_glMid3Seed:DWORD:011H
COMM	_gbRunGameResult:DWORD
COMM	_zoomflag:DWORD
COMM	_gbProcessPlayers:DWORD
COMM	_glEndSeed:DWORD:011H
COMM	_gbLoadGame:DWORD
COMM	_ghInst:DWORD
COMM	_DebugMonsters:DWORD:0aH
COMM	_cineflag:BYTE
COMM	_drawpanflag:DWORD
COMM	_visiondebug:DWORD
COMM	_scrollflag:DWORD
COMM	_light4flag:DWORD
COMM	_leveldebug:DWORD
COMM	_monstdebug:DWORD
COMM	_trigdebug:DWORD
COMM	_setseed:DWORD
COMM	_debugmonsttypes:DWORD
COMM	_PauseMode:DWORD
COMM	_sgbMouseDown:BYTE
COMM	_color_cycle_timer:DWORD
COMM	_sgnTimeoutCurs:DWORD
_fullscreen DD	01H
_FriendlyMode DD 01H
_DATA	ENDS
;	COMDAT ??_C@_0BI@GINB@I?5need?5help?$CB?5Come?5Here?$CB?$AA@
_DATA	SEGMENT
??_C@_0BI@GINB@I?5need?5help?$CB?5Come?5Here?$CB?$AA@ DB 'I need help! Co'
	DB	'me Here!', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FLBC@Follow?5me?4?$AA@
_DATA	SEGMENT
??_C@_0L@FLBC@Follow?5me?4?$AA@ DB 'Follow me.', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@CODN@Here?8s?5something?5for?5you?4?$AA@
_DATA	SEGMENT
??_C@_0BK@CODN@Here?8s?5something?5for?5you?4?$AA@ DB 'Here''s something '
	DB	'for you.', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@MOCK@Now?5you?5DIE?$CB?$AA@
_DATA	SEGMENT
??_C@_0N@MOCK@Now?5you?5DIE?$CB?$AA@ DB 'Now you DIE!', 00H ; `string'
_DATA	ENDS
_DATA	SEGMENT
_spszMsgTbl DD	FLAT:??_C@_0BI@GINB@I?5need?5help?$CB?5Come?5Here?$CB?$AA@
	DD	FLAT:??_C@_0L@FLBC@Follow?5me?4?$AA@
	DD	FLAT:??_C@_0BK@CODN@Here?8s?5something?5for?5you?4?$AA@
	DD	FLAT:??_C@_0N@MOCK@Now?5you?5DIE?$CB?$AA@
_DATA	ENDS
;	COMDAT ??_C@_02NIOF@F9?$AA@
_DATA	SEGMENT
??_C@_02NIOF@F9?$AA@ DB 'F9', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03DLBM@F10?$AA@
_DATA	SEGMENT
??_C@_03DLBM@F10?$AA@ DB 'F10', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03JBIL@F11?$AA@
_DATA	SEGMENT
??_C@_03JBIL@F11?$AA@ DB 'F11', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03GODC@F12?$AA@
_DATA	SEGMENT
??_C@_03GODC@F12?$AA@ DB 'F12', 00H			; `string'
_DATA	ENDS
_DATA	SEGMENT
_spszMsgKeyTbl DD FLAT:??_C@_02NIOF@F9?$AA@
	DD	FLAT:??_C@_03DLBM@F10?$AA@
	DD	FLAT:??_C@_03JBIL@F11?$AA@
	DD	FLAT:??_C@_03GODC@F12?$AA@
_DATA	ENDS
PUBLIC	_FreeGameMem
EXTRN	_level_special_cel:DWORD
EXTRN	_FreeEffects:NEAR
EXTRN	_FreeMonsters:NEAR
EXTRN	_FreeTownerGFX:NEAR
EXTRN	_FreeMissiles:NEAR
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	_FreeObjectGFX:NEAR
EXTRN	_music_stop:NEAR
EXTRN	_pSpeedCels:DWORD
EXTRN	_pMegaTiles:DWORD
EXTRN	_pLevelPieces:DWORD
EXTRN	_pDungeonCels:DWORD
; Function compile flags: /Ogsy
;	COMDAT _FreeGameMem
_TEXT	SEGMENT
_FreeGameMem PROC NEAR					; COMDAT
; File Source/diablo.cpp
; Line 68
	push	esi
; Line 71
	call	_music_stop
; Line 73
	mov	ecx, DWORD PTR _pDungeonCels
; Line 74
	xor	esi, esi
	mov	DWORD PTR _pDungeonCels, esi
; Line 75
	call	@mem_free_dbg@4
; Line 76
	mov	ecx, DWORD PTR _pMegaTiles
; Line 77
	mov	DWORD PTR _pMegaTiles, esi
; Line 78
	call	@mem_free_dbg@4
; Line 79
	mov	ecx, DWORD PTR _pLevelPieces
; Line 80
	mov	DWORD PTR _pLevelPieces, esi
; Line 81
	call	@mem_free_dbg@4
; Line 82
	mov	ecx, DWORD PTR _level_special_cel
; Line 83
	mov	DWORD PTR _level_special_cel, esi
; Line 84
	call	@mem_free_dbg@4
; Line 85
	mov	ecx, DWORD PTR _pSpeedCels
; Line 86
	mov	DWORD PTR _pSpeedCels, esi
; Line 87
	call	@mem_free_dbg@4
; Line 89
	call	_FreeMissiles
; Line 90
	call	_FreeMonsters
; Line 91
	call	_FreeObjectGFX
; Line 92
	call	_FreeEffects
	pop	esi
; Line 93
	jmp	_FreeTownerGFX
_FreeGameMem ENDP
_TEXT	ENDS
PUBLIC	@StartGame@8
PUBLIC	@run_game_loop@4
EXTRN	@InitDungMsgs@4:NEAR
EXTRN	_InitLevels:NEAR
EXTRN	_InitPortals:NEAR
EXTRN	_SNetDestroy@0:NEAR
EXTRN	_InitQuests:NEAR
EXTRN	_byte_678640:BYTE
EXTRN	_gbValidSaveFile:DWORD
EXTRN	@pfile_create_player_description@8:NEAR
EXTRN	_NetClose:NEAR
EXTRN	@NetInit@8:NEAR
EXTRN	_myplr:DWORD
; Function compile flags: /Ogsy
;	COMDAT @StartGame@8
_TEXT	SEGMENT
_fExitProgram$ = -4
@StartGame@8 PROC NEAR					; COMDAT
; _bNewGame$ = ecx
; _bSinglePlayer$ = edx
; Line 97
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx
; Line 101
	mov	BYTE PTR _byte_678640, 1
	xor	ebx, ebx
$L85005:
; Line 107
	lea	edx, DWORD PTR _fExitProgram$[ebp]
	mov	ecx, esi
	mov	DWORD PTR _fExitProgram$[ebp], ebx
	mov	DWORD PTR _gbLoadGame, ebx
	call	@NetInit@8
	test	eax, eax
	je	SHORT $L85828
; Line 114
	cmp	edi, ebx
	mov	BYTE PTR _byte_678640, bl
	jne	SHORT $L85010
	cmp	DWORD PTR _gbValidSaveFile, ebx
	jne	SHORT $L85829
$L85010:
; Line 115
	call	_InitLevels
; Line 116
	call	_InitQuests
; Line 117
	call	_InitPortals
; Line 118
	mov	ecx, DWORD PTR _myplr
	call	@InitDungMsgs@4
; Line 120
	cmp	DWORD PTR _gbValidSaveFile, ebx
	je	SHORT $L85012
$L85829:
	cmp	DWORD PTR _gbLoadGame, ebx
; Line 123
	mov	ecx, 1035				; 0000040bH
	jne	SHORT $L85013
$L85012:
; Line 121
	mov	ecx, 1034				; 0000040aH
$L85013:
; Line 125
	call	@run_game_loop@4
; Line 126
	call	_NetClose
; Line 127
	xor	edx, edx
	xor	ecx, ecx
	call	@pfile_create_player_description@8
; Line 128
	cmp	DWORD PTR _gbRunGameResult, ebx
	jne	SHORT $L85005
	jmp	SHORT $L85007
$L85828:
; Line 108
	xor	eax, eax
	cmp	DWORD PTR _fExitProgram$[ebp], ebx
	sete	al
	mov	DWORD PTR _gbRunGameResult, eax
$L85007:
; Line 130
	call	_SNetDestroy@0
; Line 131
	mov	eax, DWORD PTR _gbRunGameResult
	pop	edi
	pop	esi
	pop	ebx
; Line 132
	leave
	ret	0
@StartGame@8 ENDP
_TEXT	ENDS
PUBLIC	@start_game@4
PUBLIC	_free_game
PUBLIC	_GM_Game@16
PUBLIC	@game_loop@4
PUBLIC	_diablo_color_cyc_logic
EXTRN	@SetCursor_@4:NEAR
EXTRN	__imp__GetCurrentThread@0:NEAR
EXTRN	__imp__SetThreadPriority@8:NEAR
EXTRN	_DoEnding:NEAR
EXTRN	@SetWindowProc@4:NEAR
EXTRN	__imp__Sleep@4:NEAR
EXTRN	@PaletteFadeIn@4:NEAR
EXTRN	@PaletteFadeOut@4:NEAR
EXTRN	_msgcmd_send_chat:NEAR
EXTRN	_gbMaxPlayers:BYTE
EXTRN	_pfile_write_hero:NEAR
EXTRN	_pfile_flush_W:NEAR
EXTRN	_multi_process_network_packets:NEAR
EXTRN	_ClearScreenBuffer:NEAR
EXTRN	@scrollrt_draw_game_screen@4:NEAR
EXTRN	_DrawAndBlit:NEAR
EXTRN	@nthread_ignore_mutex@4:NEAR
EXTRN	@nthread_has_500ms_passed@4:NEAR
EXTRN	_msg_process_net_packets:NEAR
EXTRN	__imp__TranslateMessage@4:NEAR
EXTRN	__imp__DispatchMessageA@4:NEAR
EXTRN	__imp__PeekMessageA@20:NEAR
EXTRN	_control_update_life_mana:NEAR
; Function compile flags: /Ogsy
;	COMDAT @run_game_loop@4
_TEXT	SEGMENT
_saveProc$ = -32
_msg$ = -28
@run_game_loop@4 PROC NEAR				; COMDAT
; _uMsg$ = ecx
; Line 136
	sub	esp, 32					; 00000020H
	push	ebx
; Line 144
	xor	ebx, ebx
	push	esi
	inc	ebx
	mov	esi, ecx
	mov	ecx, ebx
	call	@nthread_ignore_mutex@4
; Line 145
	mov	ecx, esi
	call	@start_game@4
; Line 146
	mov	ecx, OFFSET FLAT:_GM_Game@16
	call	@SetWindowProc@4
	mov	DWORD PTR _saveProc$[esp+40], eax
; Line 147
	call	_control_update_life_mana
; Line 148
	call	_msg_process_net_packets
; Line 152
	mov	esi, 255				; 000000ffH
	mov	DWORD PTR _gbRunGame, ebx
	mov	DWORD PTR _gbProcessPlayers, ebx
	mov	DWORD PTR _gbRunGameResult, ebx
	mov	DWORD PTR _drawpanflag, esi
; Line 153
	call	_DrawAndBlit
; Line 154
	push	8
	pop	ecx
	call	@PaletteFadeIn@4
; Line 157
	xor	ecx, ecx
	mov	DWORD PTR _drawpanflag, esi
	mov	DWORD PTR _gbGameLoopStartup, ebx
	call	@nthread_ignore_mutex@4
; Line 158
	xor	esi, esi
	cmp	DWORD PTR _gbRunGame, esi
	je	$L85023
	push	ebp
	push	edi
	mov	edi, DWORD PTR __imp__PeekMessageA@20
$L85022:
; Line 159
	call	_diablo_color_cyc_logic
; Line 160
	push	esi
	push	esi
	push	esi
	lea	eax, DWORD PTR _msg$[esp+60]
	push	esi
	push	eax
	call	edi
	test	eax, eax
	je	SHORT $L85025
; Line 161
	push	ebx
	call	DWORD PTR __imp__GetCurrentThread@0
	push	eax
	call	DWORD PTR __imp__SetThreadPriority@8
; Line 162
	jmp	SHORT $L85840
$L85028:
; Line 163
	cmp	DWORD PTR _msg$[esp+52], 18		; 00000012H
	je	SHORT $L85834
; Line 168
	lea	eax, DWORD PTR _msg$[esp+48]
	push	eax
	call	DWORD PTR __imp__TranslateMessage@4
; Line 169
	lea	eax, DWORD PTR _msg$[esp+48]
	push	eax
	call	DWORD PTR __imp__DispatchMessageA@4
$L85840:
	push	ebx
	push	esi
	push	esi
	lea	eax, DWORD PTR _msg$[esp+60]
	push	esi
	push	eax
	call	edi
	test	eax, eax
	jne	SHORT $L85028
; Line 163
	jmp	SHORT $L85029
$L85834:
; Line 164
	mov	DWORD PTR _gbRunGameResult, esi
; Line 165
	mov	DWORD PTR _gbRunGame, esi
$L85029:
; Line 171
	cmp	DWORD PTR _gbRunGame, esi
	je	SHORT $L85032
	xor	ecx, ecx
	mov	ebp, ebx
	call	@nthread_has_500ms_passed@4
	test	eax, eax
	jne	SHORT $L85031
$L85032:
; Line 172
	xor	ebp, ebp
$L85031:
; Line 173
	push	esi
	call	DWORD PTR __imp__GetCurrentThread@0
	push	eax
	call	DWORD PTR __imp__SetThreadPriority@8
; Line 174
	cmp	ebp, esi
	sete	al
; Line 175
	jmp	SHORT $L85033
$L85025:
; Line 177
	xor	ecx, ecx
	call	@nthread_has_500ms_passed@4
	neg	eax
	sbb	al, al
	inc	al
$L85033:
; Line 179
	test	al, al
	jne	SHORT $L85034
; Line 180
	call	_multi_process_network_packets
; Line 181
	mov	ecx, DWORD PTR _gbGameLoopStartup
	call	@game_loop@4
; Line 182
	call	_msgcmd_send_chat
; Line 183
	mov	DWORD PTR _gbGameLoopStartup, esi
; Line 184
	call	_DrawAndBlit
$L85034:
; Line 187
	push	ebx
	call	DWORD PTR __imp__Sleep@4
	cmp	DWORD PTR _gbRunGame, esi
	jne	$L85022
	pop	edi
	pop	ebp
$L85023:
; Line 190
	cmp	BYTE PTR _gbMaxPlayers, bl
	jbe	SHORT $L85036
; Line 191
	call	_pfile_write_hero
$L85036:
; Line 192
	call	_pfile_flush_W
; Line 193
	push	8
	pop	ecx
	call	@PaletteFadeOut@4
; Line 194
	xor	ecx, ecx
	call	@SetCursor_@4
; Line 195
	call	_ClearScreenBuffer
; Line 197
	mov	ecx, ebx
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	call	@scrollrt_draw_game_screen@4
; Line 198
	mov	ecx, DWORD PTR _saveProc$[esp+40]
	call	@SetWindowProc@4
; Line 199
	call	_free_game
; Line 200
	cmp	BYTE PTR _cineflag, 0
	pop	esi
	pop	ebx
	je	SHORT $L85037
; Line 201
	and	BYTE PTR _cineflag, 0
; Line 204
	add	esp, 32					; 00000020H
	jmp	_DoEnding
$L85037:
	add	esp, 32					; 00000020H
	ret	0
@run_game_loop@4 ENDP
_TEXT	ENDS
EXTRN	_gmenu_init_menu:NEAR
EXTRN	_InitCursor:NEAR
EXTRN	_InitLevelCursor:NEAR
EXTRN	_LoadDebugGFX:NEAR
EXTRN	_InitLightTable:NEAR
EXTRN	@ShowProgress@4:NEAR
EXTRN	@track_repeat_walk@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @start_game@4
_TEXT	SEGMENT
@start_game@4 PROC NEAR					; COMDAT
; _uMsg$ = ecx
; Line 211
	and	BYTE PTR _cineflag, 0
	push	esi
	mov	esi, ecx
; Line 212
	mov	DWORD PTR _zoomflag, 1
; Line 213
	call	_InitCursor
; Line 214
	call	_InitLightTable
; Line 215
	call	_LoadDebugGFX
; Line 216
	call	_music_stop
; Line 217
	mov	ecx, esi
	call	@ShowProgress@4
; Line 218
	call	_gmenu_init_menu
; Line 219
	call	_InitLevelCursor
; Line 220
	and	DWORD PTR _sgnTimeoutCurs, 0
; Line 221
	and	BYTE PTR _sgbMouseDown, 0
; Line 222
	xor	ecx, ecx
	pop	esi
	jmp	@track_repeat_walk@4
@start_game@4 ENDP
_TEXT	ENDS
EXTRN	_FreeControlPan:NEAR
EXTRN	_FreeGMenu:NEAR
EXTRN	_FreeCursor:NEAR
EXTRN	_FreeDebugGFX:NEAR
EXTRN	_FreeLightTable:NEAR
EXTRN	_FreeInvGFX:NEAR
EXTRN	_FreeQuestText:NEAR
EXTRN	@FreePlayerGFX@4:NEAR
EXTRN	_FreeStoreMem:NEAR
EXTRN	_FreeItemGFX:NEAR
; Function compile flags: /Ogsy
;	COMDAT _free_game
_TEXT	SEGMENT
_free_game PROC NEAR					; COMDAT
; Line 229
	push	esi
; Line 232
	call	_FreeControlPan
; Line 233
	call	_FreeInvGFX
; Line 234
	call	_FreeGMenu
; Line 235
	call	_FreeQuestText
; Line 236
	call	_FreeStoreMem
; Line 238
	xor	esi, esi
$L85043:
; Line 239
	mov	ecx, esi
	call	@FreePlayerGFX@4
	inc	esi
	cmp	esi, 4
	jl	SHORT $L85043
; Line 241
	call	_FreeItemGFX
; Line 242
	call	_FreeCursor
; Line 243
	call	_FreeLightTable
; Line 244
	call	_FreeDebugGFX
	pop	esi
; Line 245
	jmp	_FreeGameMem
_free_game ENDP
_TEXT	ENDS
PUBLIC	_diablo_get_not_running
PUBLIC	??_C@_0M@JOGO@DiabloEvent?$AA@			; `string'
EXTRN	__imp__GetLastError@0:NEAR
EXTRN	__imp__SetLastError@4:NEAR
EXTRN	__imp__CreateEventA@16:NEAR
;	COMDAT ??_C@_0M@JOGO@DiabloEvent?$AA@
_DATA	SEGMENT
??_C@_0M@JOGO@DiabloEvent?$AA@ DB 'DiabloEvent', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _diablo_get_not_running
_TEXT	SEGMENT
_diablo_get_not_running PROC NEAR			; COMDAT
; Line 250
	push	0
	call	DWORD PTR __imp__SetLastError@4
; Line 251
	push	OFFSET FLAT:??_C@_0M@JOGO@DiabloEvent?$AA@ ; `string'
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
; Line 252
	call	DWORD PTR __imp__GetLastError@0
	xor	ecx, ecx
	cmp	eax, 183				; 000000b7H
	setne	cl
	mov	eax, ecx
; Line 253
	ret	0
_diablo_get_not_running ENDP
_TEXT	ENDS
PUBLIC	@diablo_parse_flags@4
PUBLIC	_diablo_init_screen
PUBLIC	@diablo_find_window@4
PUBLIC	@diablo_reload_process@4
PUBLIC	??_C@_0CA@EBLB@C?3?2Src?2Diablo?2Source?2DIABLO?4CPP?$AA@ ; `string'
PUBLIC	??_C@_06CHEE@DIABLO?$AA@			; `string'
PUBLIC	??_C@_0BB@GPDH@gendata?2logo?4smk?$AA@		; `string'
PUBLIC	??_C@_05MDNJ@Intro?$AA@				; `string'
PUBLIC	??_C@_06EMML@Diablo?$AA@			; `string'
PUBLIC	??_C@_0BE@CMOB@gendata?2diablo1?4smk?$AA@	; `string'
PUBLIC	_WinMain@16
EXTRN	_SRegLoadValue@16:NEAR
EXTRN	_SRegSaveValue@16:NEAR
EXTRN	__imp__DestroyWindow@4:NEAR
EXTRN	_sound_init:NEAR
EXTRN	@init_create_window@4:NEAR
EXTRN	_InitHash:NEAR
EXTRN	_RestrictedTest:NEAR
EXTRN	_ReadOnlyTest:NEAR
EXTRN	_SaveGamma:NEAR
EXTRN	_BlackPalette:NEAR
EXTRN	_mainmenu_loop:NEAR
EXTRN	_UiDestroy:NEAR
EXTRN	_UiTitleDialog@4:NEAR
EXTRN	_UiInitialize:NEAR
EXTRN	_srand:NEAR
EXTRN	@play_movie@8:NEAR
EXTRN	__imp__GetModuleFileNameA@12:NEAR
EXTRN	@ErrOkDlg@16:NEAR
EXTRN	@DirErrorDlg@4:NEAR
EXTRN	__imp__GetTickCount@0:NEAR
EXTRN	__imp__ShowCursor@4:NEAR
EXTRN	_exception_get_filter:NEAR
;	COMDAT ??_C@_0CA@EBLB@C?3?2Src?2Diablo?2Source?2DIABLO?4CPP?$AA@
_DATA	SEGMENT
??_C@_0CA@EBLB@C?3?2Src?2Diablo?2Source?2DIABLO?4CPP?$AA@ DB 'C:\Src\Diab'
	DB	'lo\Source\DIABLO.CPP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CHEE@DIABLO?$AA@
_DATA	SEGMENT
??_C@_06CHEE@DIABLO?$AA@ DB 'DIABLO', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@GPDH@gendata?2logo?4smk?$AA@
_DATA	SEGMENT
??_C@_0BB@GPDH@gendata?2logo?4smk?$AA@ DB 'gendata\logo.smk', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MDNJ@Intro?$AA@
_DATA	SEGMENT
??_C@_05MDNJ@Intro?$AA@ DB 'Intro', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06EMML@Diablo?$AA@
_DATA	SEGMENT
??_C@_06EMML@Diablo?$AA@ DB 'Diablo', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CMOB@gendata?2diablo1?4smk?$AA@
_DATA	SEGMENT
??_C@_0BE@CMOB@gendata?2diablo1?4smk?$AA@ DB 'gendata\diablo1.smk', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_hInstance$ = 8
_lpCmdLine$ = 16
_nCmdShow$ = 20
_nData$ = 8
_szFileName$ = -268
_szValueName$85069 = -8
_WinMain@16 PROC NEAR					; COMDAT
; Line 256
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
; Line 264
	mov	esi, DWORD PTR _hInstance$[ebp]
	mov	ecx, esi
	call	@diablo_reload_process@4
; Line 266
	mov	DWORD PTR _ghInst, esi
; Line 268
	call	_RestrictedTest
	test	eax, eax
	je	SHORT $L85062
; Line 269
	push	877					; 0000036dH
	push	OFFSET FLAT:??_C@_0CA@EBLB@C?3?2Src?2Diablo?2Source?2DIABLO?4CPP?$AA@ ; `string'
	push	113					; 00000071H
	xor	edx, edx
	pop	ecx
	call	@ErrOkDlg@16
$L85062:
; Line 270
	call	_ReadOnlyTest
	xor	ebx, ebx
	test	eax, eax
	je	SHORT $L85064
; Line 271
	lea	eax, DWORD PTR _szFileName$[ebp]
	push	260					; 00000104H
	push	eax
	push	DWORD PTR _ghInst
	call	DWORD PTR __imp__GetModuleFileNameA@12
	test	eax, eax
	jne	SHORT $L85065
; Line 272
	mov	BYTE PTR _szFileName$[ebp], bl
$L85065:
; Line 273
	lea	ecx, DWORD PTR _szFileName$[ebp]
	call	@DirErrorDlg@4
$L85064:
; Line 276
	push	ebx
	call	DWORD PTR __imp__ShowCursor@4
; Line 277
	call	DWORD PTR __imp__GetTickCount@0
	push	eax
	call	_srand
	pop	ecx
; Line 278
	call	_InitHash
; Line 279
	call	_exception_get_filter
; Line 281
	call	_diablo_get_not_running
; Line 282
	mov	ecx, OFFSET FLAT:??_C@_06CHEE@DIABLO?$AA@ ; `string'
	mov	esi, eax
	call	@diablo_find_window@4
	test	eax, eax
	jne	$L85075
	cmp	esi, ebx
	je	$L85075
	push	edi
; Line 286
	call	_diablo_init_screen
; Line 287
	mov	ecx, DWORD PTR _lpCmdLine$[ebp]
	call	@diablo_parse_flags@4
; Line 288
	mov	ecx, DWORD PTR _nCmdShow$[ebp]
	call	@init_create_window@4
; Line 289
	call	_sound_init
; Line 290
	call	_UiInitialize
; Line 295
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BB@GPDH@gendata?2logo?4smk?$AA@ ; `string'
	inc	edx
	call	@play_movie@8
; Line 298
	mov	esi, OFFSET FLAT:??_C@_05MDNJ@Intro?$AA@ ; `string'
	lea	edi, DWORD PTR _szValueName$85069[ebp]
	movsd
; Line 299
	lea	eax, DWORD PTR _nData$[ebp]
	movsw
	push	eax
	lea	eax, DWORD PTR _szValueName$85069[ebp]
	push	ebx
	mov	esi, OFFSET FLAT:??_C@_06EMML@Diablo?$AA@ ; `string'
	push	eax
	push	esi
	call	_SRegLoadValue@16
	test	eax, eax
	pop	edi
	jne	SHORT $L85071
; Line 300
	mov	DWORD PTR _nData$[ebp], 1
$L85071:
; Line 301
	cmp	DWORD PTR _nData$[ebp], ebx
	je	SHORT $L85073
; Line 302
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BE@CMOB@gendata?2diablo1?4smk?$AA@ ; `string'
	inc	edx
	call	@play_movie@8
$L85073:
; Line 303
	push	ebx
	lea	eax, DWORD PTR _szValueName$85069[ebp]
	push	ebx
	push	eax
	push	esi
	call	_SRegSaveValue@16
; Line 309
	push	7
	call	_UiTitleDialog@4
; Line 310
	call	_BlackPalette
; Line 315
	call	_mainmenu_loop
; Line 316
	call	_UiDestroy
; Line 317
	call	_SaveGamma
; Line 319
	cmp	DWORD PTR _ghMainWnd, ebx
	je	SHORT $L85075
; Line 320
	push	300					; 0000012cH
	call	DWORD PTR __imp__Sleep@4
; Line 321
	push	DWORD PTR _ghMainWnd
	call	DWORD PTR __imp__DestroyWindow@4
$L85075:
	pop	esi
; Line 325
	xor	eax, eax
	pop	ebx
; Line 326
	leave
	ret	16					; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@MHEM@dd_emulate?$AA@			; `string'
PUBLIC	??_C@_0L@NCDJ@dd_backbuf?$AA@			; `string'
PUBLIC	??_C@_0BA@FCLA@ds_noduplicates?$AA@		; `string'
EXTRN	_gbBackBuf:BYTE
EXTRN	_gbEmulate:BYTE
EXTRN	__pctype:DWORD
EXTRN	__isctype:NEAR
EXTRN	_tolower:NEAR
EXTRN	___mb_cur_max:DWORD
EXTRN	_gbDupSounds:BYTE
EXTRN	_strlen:NEAR
EXTRN	__strcmpi:NEAR
;	COMDAT ??_C@_0L@MHEM@dd_emulate?$AA@
_DATA	SEGMENT
??_C@_0L@MHEM@dd_emulate?$AA@ DB 'dd_emulate', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@NCDJ@dd_backbuf?$AA@
_DATA	SEGMENT
??_C@_0L@NCDJ@dd_backbuf?$AA@ DB 'dd_backbuf', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FCLA@ds_noduplicates?$AA@
_DATA	SEGMENT
??_C@_0BA@FCLA@ds_noduplicates?$AA@ DB 'ds_noduplicates', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @diablo_parse_flags@4
_TEXT	SEGMENT
@diablo_parse_flags@4 PROC NEAR				; COMDAT
; _args$ = ecx
; Line 329
	push	esi
	mov	esi, ecx
; Line 334
	cmp	BYTE PTR [esi], 0
	je	$L85081
	push	ebx
	push	ebp
	push	edi
	mov	ebx, OFFSET FLAT:??_C@_0L@MHEM@dd_emulate?$AA@ ; `string'
	mov	ebp, OFFSET FLAT:??_C@_0L@NCDJ@dd_backbuf?$AA@ ; `string'
	mov	edi, OFFSET FLAT:??_C@_0BA@FCLA@ds_noduplicates?$AA@ ; `string'
$L85080:
; Line 335
	cmp	DWORD PTR ___mb_cur_max, 1
	movsx	eax, BYTE PTR [esi]
	jle	SHORT $L85860
	push	8
	push	eax
	call	__isctype
	pop	ecx
	pop	ecx
	jmp	SHORT $L85861
$L85860:
	mov	ecx, DWORD PTR __pctype
	mov	al, BYTE PTR [ecx+eax*2]
	and	eax, 8
$L85861:
	test	eax, eax
	je	SHORT $L85084
	inc	esi
	jmp	SHORT $L85080
$L85084:
; Line 337
	push	esi
	push	ebx
	call	__strcmpi
	pop	ecx
	test	eax, eax
	pop	ecx
	jne	SHORT $L85085
; Line 338
	mov	BYTE PTR _gbEmulate, 1
; Line 339
	push	ebx
; Line 340
	jmp	SHORT $L85867
$L85085:
	push	esi
	push	ebp
	call	__strcmpi
	pop	ecx
	test	eax, eax
	pop	ecx
	jne	SHORT $L85088
; Line 341
	mov	BYTE PTR _gbBackBuf, 1
; Line 342
	push	ebp
; Line 343
	jmp	SHORT $L85867
$L85088:
	push	esi
	push	edi
	call	__strcmpi
	pop	ecx
	test	eax, eax
	pop	ecx
	jne	SHORT $L85091
; Line 344
	and	BYTE PTR _gbDupSounds, al
; Line 345
	push	edi
$L85867:
	call	_strlen
	add	esi, eax
; Line 346
	jmp	SHORT $L85866
$L85091:
; Line 436
	movsx	eax, BYTE PTR [esi]
	push	eax
	inc	esi
	call	_tolower
$L85866:
	cmp	BYTE PTR [esi], 0
	pop	ecx
	jne	$L85080
	pop	edi
	pop	ebp
	pop	ebx
$L85081:
	pop	esi
; Line 440
	ret	0
@diablo_parse_flags@4 ENDP
_TEXT	ENDS
EXTRN	_screen_y_times_768:BYTE
EXTRN	_ClrDiabloMsg:NEAR
EXTRN	_ScrollInfo:BYTE
; Function compile flags: /Ogsy
;	COMDAT _diablo_init_screen
_TEXT	SEGMENT
_diablo_init_screen PROC NEAR				; COMDAT
; Line 450
	xor	ecx, ecx
	mov	DWORD PTR _MouseX, 320			; 00000140H
	mov	DWORD PTR _MouseY, 240			; 000000f0H
	mov	DWORD PTR _ScrollInfo+8, ecx
; Line 451
	mov	DWORD PTR _ScrollInfo+12, ecx
; Line 452
	mov	DWORD PTR _ScrollInfo, ecx
; Line 453
	mov	DWORD PTR _ScrollInfo+4, ecx
; Line 454
	mov	DWORD PTR _ScrollInfo+16, ecx
	mov	eax, OFFSET FLAT:_screen_y_times_768
$L85096:
; Line 457
	mov	DWORD PTR [eax], ecx
	add	eax, 4
	add	ecx, 768				; 00000300H
	cmp	eax, OFFSET FLAT:_screen_y_times_768+4096
	jl	SHORT $L85096
; Line 459
	jmp	_ClrDiabloMsg
_diablo_init_screen ENDP
_TEXT	ENDS
EXTRN	__imp__FindWindowA@8:NEAR
EXTRN	__imp__GetTopWindow@4:NEAR
EXTRN	__imp__GetLastActivePopup@4:NEAR
EXTRN	__imp__SetForegroundWindow@4:NEAR
EXTRN	__imp__SetFocus@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @diablo_find_window@4
_TEXT	SEGMENT
@diablo_find_window@4 PROC NEAR				; COMDAT
; _lpClassName$ = ecx
; Line 463
	push	esi
; Line 469
	push	0
	push	ecx
	call	DWORD PTR __imp__FindWindowA@8
	mov	esi, eax
; Line 471
	test	esi, esi
	jne	SHORT $L85106
	pop	esi
; Line 483
	ret	0
$L85106:
; Line 474
	push	esi
	call	DWORD PTR __imp__GetLastActivePopup@4
; Line 475
	test	eax, eax
	je	SHORT $L85107
; Line 476
	mov	esi, eax
$L85107:
	push	edi
; Line 477
	push	esi
	call	DWORD PTR __imp__GetTopWindow@4
	mov	edi, eax
; Line 478
	test	edi, edi
	jne	SHORT $L85108
; Line 479
	mov	edi, esi
$L85108:
; Line 480
	push	esi
	call	DWORD PTR __imp__SetForegroundWindow@4
; Line 481
	push	edi
	call	DWORD PTR __imp__SetFocus@4
; Line 482
	xor	eax, eax
	pop	edi
	inc	eax
	pop	esi
; Line 483
	ret	0
@diablo_find_window@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_09ECHC@Reload?9?$CFs?$AA@			; `string'
EXTRN	__imp__MapViewOfFile@20:NEAR
EXTRN	__imp__UnmapViewOfFile@4:NEAR
EXTRN	__imp__GetCurrentProcessId@0:NEAR
EXTRN	__imp__ExitProcess@4:NEAR
EXTRN	__imp__wsprintfA:NEAR
EXTRN	__imp__GetWindowThreadProcessId@8:NEAR
EXTRN	__imp__GetWindow@8:NEAR
EXTRN	__imp__GetForegroundWindow@0:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
EXTRN	__imp__CreateFileMappingA@24:NEAR
EXTRN	__imp__CreateProcessA@40:NEAR
EXTRN	__imp__InterlockedIncrement@4:NEAR
EXTRN	__imp__GetSystemInfo@4:NEAR
EXTRN	_memset:NEAR
EXTRN	__imp__WaitForInputIdle@8:NEAR
;	COMDAT ??_C@_09ECHC@Reload?9?$CFs?$AA@
_DATA	SEGMENT
??_C@_09ECHC@Reload?9?$CFs?$AA@ DB 'Reload-%s', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @diablo_reload_process@4
_TEXT	SEGMENT
_Name$ = -668
_Filename$ = -392
_si$ = -132
_sinf$ = -64
_pi$ = -28
_dwProcessId$ = -12
_hMap$ = -4
_hWnd$ = -8
@diablo_reload_process@4 PROC NEAR			; COMDAT
; _hModule$ = ecx
; Line 486
	push	ebp
	mov	ebp, esp
	sub	esp, 668				; 0000029cH
	push	ebx
	push	esi
; Line 503
	mov	esi, 260				; 00000104H
	push	edi
	xor	ebx, ebx
	push	esi
	lea	eax, DWORD PTR _Filename$[ebp]
	push	ebx
	push	eax
	mov	edi, ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 506
	lea	eax, DWORD PTR _Filename$[ebp]
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__GetModuleFileNameA@12
; Line 507
	lea	eax, DWORD PTR _Filename$[ebp]
	push	eax
	lea	eax, DWORD PTR _Name$[ebp]
	push	OFFSET FLAT:??_C@_09ECHC@Reload?9?$CFs?$AA@ ; `string'
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH
; Line 508
	cmp	BYTE PTR _Name$[ebp], bl
	lea	eax, DWORD PTR _Name$[ebp]
	je	SHORT $L85129
$L85127:
; Line 509
	cmp	BYTE PTR [eax], 92			; 0000005cH
	jne	SHORT $L85128
; Line 510
	mov	BYTE PTR [eax], 47			; 0000002fH
$L85128:
; Line 508
	inc	eax
	cmp	BYTE PTR [eax], bl
	jne	SHORT $L85127
$L85129:
; Line 512
	lea	eax, DWORD PTR _sinf$[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemInfo@4
; Line 513
	mov	edi, DWORD PTR _sinf$[ebp+4]
; Line 514
	mov	eax, 4096				; 00001000H
	cmp	edi, eax
	jae	SHORT $L85131
; Line 515
	mov	edi, eax
$L85131:
; Line 516
	lea	eax, DWORD PTR _Name$[ebp]
	push	eax
	push	edi
	push	ebx
	push	134217732				; 08000004H
	push	ebx
	push	-1
	call	DWORD PTR __imp__CreateFileMappingA@24
	mov	DWORD PTR _hMap$[ebp], eax
; Line 517
	call	DWORD PTR __imp__GetLastError@0
	xor	ecx, ecx
	cmp	eax, 183				; 000000b7H
	setne	cl
; Line 518
	cmp	DWORD PTR _hMap$[ebp], ebx
	mov	esi, ecx
	je	$L85136
; Line 519
	push	edi
	push	ebx
	push	ebx
	push	983071					; 000f001fH
	push	DWORD PTR _hMap$[ebp]
	call	DWORD PTR __imp__MapViewOfFile@20
	mov	edi, eax
; Line 521
	cmp	edi, ebx
	je	$L85136
; Line 522
	cmp	esi, ebx
	mov	esi, DWORD PTR __imp__CloseHandle@4
	je	SHORT $L85137
; Line 523
	or	DWORD PTR [edi], -1
; Line 525
	push	68					; 00000044H
	lea	eax, DWORD PTR _si$[ebp]
	push	ebx
	push	eax
	mov	DWORD PTR [edi+4], ebx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 527
	lea	eax, DWORD PTR _pi$[ebp]
	mov	DWORD PTR _si$[ebp], 68			; 00000044H
	push	eax
	lea	eax, DWORD PTR _si$[ebp]
	push	eax
	push	ebx
	push	ebx
	push	512					; 00000200H
	push	ebx
	push	ebx
	push	ebx
	lea	eax, DWORD PTR _Filename$[ebp]
	push	ebx
	push	eax
	call	DWORD PTR __imp__CreateProcessA@40
; Line 528
	push	-1
	push	DWORD PTR _pi$[ebp]
	call	DWORD PTR __imp__WaitForInputIdle@8
; Line 529
	push	DWORD PTR _pi$[ebp+4]
	call	esi
; Line 530
	push	DWORD PTR _pi$[ebp]
	call	esi
; Line 533
	push	edi
	call	DWORD PTR __imp__UnmapViewOfFile@4
; Line 534
	push	DWORD PTR _hMap$[ebp]
	call	esi
; Line 535
	push	ebx
	call	DWORD PTR __imp__ExitProcess@4
$L85137:
; Line 537
	push	edi
	call	DWORD PTR __imp__InterlockedIncrement@4
	test	eax, eax
	je	SHORT $L85147
; Line 538
	call	DWORD PTR __imp__GetForegroundWindow@0
$L85148:
; Line 541
	push	3
	push	eax
	mov	DWORD PTR _hWnd$[ebp], eax
	call	DWORD PTR __imp__GetWindow@8
; Line 542
	cmp	eax, ebx
	jne	SHORT $L85148
$L85152:
; Line 544
	lea	eax, DWORD PTR _dwProcessId$[ebp]
	push	eax
	push	DWORD PTR _hWnd$[ebp]
	call	DWORD PTR __imp__GetWindowThreadProcessId@8
; Line 545
	mov	eax, DWORD PTR _dwProcessId$[ebp]
	cmp	eax, DWORD PTR [edi+4]
	je	SHORT $L85153
; Line 547
	push	2
	push	DWORD PTR _hWnd$[ebp]
	call	DWORD PTR __imp__GetWindow@8
; Line 548
	cmp	eax, ebx
	mov	DWORD PTR _hWnd$[ebp], eax
	jne	SHORT $L85152
; Line 543
	jmp	SHORT $LABEL_23$85156
$L85153:
; Line 551
	push	DWORD PTR _hWnd$[ebp]
	call	DWORD PTR __imp__SetForegroundWindow@4
$LABEL_23$85156:
; Line 553
	push	edi
	call	DWORD PTR __imp__UnmapViewOfFile@4
; Line 554
	push	DWORD PTR _hMap$[ebp]
	call	esi
; Line 555
	push	ebx
	call	DWORD PTR __imp__ExitProcess@4
$L85147:
; Line 557
	call	DWORD PTR __imp__GetCurrentProcessId@0
	mov	DWORD PTR [edi+4], eax
$L85136:
	pop	edi
	pop	esi
	pop	ebx
; Line 560
	leave
	ret	0
@diablo_reload_process@4 ENDP
_TEXT	ENDS
PUBLIC	_PressEscKey
EXTRN	@control_drop_gold@4:NEAR
EXTRN	_control_reset_talk:NEAR
EXTRN	_sfx_stop:NEAR
EXTRN	_helpflag:DWORD
EXTRN	_doomflag:DWORD
EXTRN	_doom_close:NEAR
EXTRN	_qtextflag:BYTE
EXTRN	_stextflag:BYTE
EXTRN	_dropGoldFlag:DWORD
EXTRN	_msgdelay:BYTE
EXTRN	_msgflag:BYTE
EXTRN	_talkflag:DWORD
EXTRN	_spselflag:DWORD
EXTRN	_STextESC:NEAR
; Function compile flags: /Ogsy
;	COMDAT _PressEscKey
_TEXT	SEGMENT
_PressEscKey PROC NEAR					; COMDAT
; Line 563
	push	ebx
	push	esi
; Line 566
	xor	esi, esi
	xor	ebx, ebx
	xor	eax, eax
	inc	esi
	cmp	DWORD PTR _doomflag, ebx
	je	SHORT $L85159
; Line 567
	call	_doom_close
; Line 568
	mov	eax, esi
$L85159:
; Line 570
	cmp	DWORD PTR _helpflag, ebx
	je	SHORT $L85160
; Line 571
	mov	DWORD PTR _helpflag, ebx
; Line 572
	mov	eax, esi
$L85160:
; Line 575
	cmp	BYTE PTR _qtextflag, bl
	je	SHORT $L85161
; Line 576
	mov	BYTE PTR _qtextflag, bl
; Line 577
	call	_sfx_stop
; Line 579
	jmp	SHORT $L85891
$L85161:
	cmp	BYTE PTR _stextflag, bl
	je	SHORT $L85163
; Line 580
	call	_STextESC
$L85891:
; Line 581
	mov	eax, esi
$L85163:
; Line 584
	cmp	BYTE PTR _msgflag, bl
	je	SHORT $L85164
; Line 585
	mov	BYTE PTR _msgdelay, bl
; Line 586
	mov	eax, esi
$L85164:
; Line 588
	cmp	DWORD PTR _talkflag, ebx
	je	SHORT $L85165
; Line 589
	call	_control_reset_talk
; Line 590
	mov	eax, esi
$L85165:
; Line 592
	cmp	DWORD PTR _dropGoldFlag, ebx
	je	SHORT $L85166
; Line 593
	mov	cl, 27					; 0000001bH
	call	@control_drop_gold@4
; Line 594
	mov	eax, esi
$L85166:
; Line 596
	cmp	DWORD PTR _spselflag, ebx
	je	SHORT $L85167
; Line 597
	mov	DWORD PTR _spselflag, ebx
; Line 598
	mov	eax, esi
$L85167:
	pop	esi
	pop	ebx
; Line 602
	ret	0
_PressEscKey ENDP
_TEXT	ENDS
PUBLIC	_DisableInputWndProc@16
EXTRN	_MainWndProc@16:NEAR
EXTRN	__imp__SetCapture@4:NEAR
EXTRN	__imp__ReleaseCapture@0:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DisableInputWndProc@16
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_DisableInputWndProc@16 PROC NEAR			; COMDAT
; Line 613
	push	ebp
	mov	ebp, esp
; Line 614
	mov	ecx, DWORD PTR _uMsg$[ebp]
	mov	eax, 513				; 00000201H
	cmp	ecx, eax
	ja	SHORT $L85895
	je	SHORT $L85182
	cmp	ecx, 256				; 00000100H
	jb	SHORT $L85178
	cmp	ecx, 258				; 00000102H
	jbe	$L85185
	cmp	ecx, 260				; 00000104H
	je	$L85185
	cmp	ecx, 274				; 00000112H
	je	$L85185
	cmp	ecx, 512				; 00000200H
	jne	SHORT $L85178
; Line 621
	jmp	$L85185
$L85182:
; Line 623
	cmp	BYTE PTR _sgbMouseDown, 0
	jne	SHORT $L85185
; Line 624
	mov	BYTE PTR _sgbMouseDown, 1
; Line 627
	jmp	SHORT $L85898
$L85895:
; Line 614
	mov	eax, ecx
	sub	eax, 514				; 00000202H
	je	SHORT $L85184
	dec	eax
	dec	eax
	je	SHORT $L85186
	dec	eax
	je	SHORT $L85188
	sub	eax, 16					; 00000010H
	je	SHORT $L85190
$L85178:
; Line 652
	push	DWORD PTR _lParam$[ebp]
	push	DWORD PTR _wParam$[ebp]
	push	ecx
	push	DWORD PTR _hWnd$[ebp]
	call	_MainWndProc@16
	jmp	SHORT $L85176
$L85190:
; Line 647
	mov	eax, DWORD PTR _hWnd$[ebp]
	cmp	eax, DWORD PTR _lParam$[ebp]
	je	SHORT $L85185
; Line 648
	and	BYTE PTR _sgbMouseDown, 0
; Line 649
	jmp	SHORT $L85185
$L85188:
; Line 641
	cmp	BYTE PTR _sgbMouseDown, 2
; Line 645
	jmp	SHORT $L85897
$L85186:
; Line 635
	cmp	BYTE PTR _sgbMouseDown, 0
	jne	SHORT $L85185
; Line 636
	mov	BYTE PTR _sgbMouseDown, 2
$L85898:
; Line 637
	push	DWORD PTR _hWnd$[ebp]
	call	DWORD PTR __imp__SetCapture@4
; Line 639
	jmp	SHORT $L85185
$L85184:
; Line 629
	cmp	BYTE PTR _sgbMouseDown, 1
$L85897:
	jne	SHORT $L85185
; Line 630
	and	BYTE PTR _sgbMouseDown, 0
; Line 631
	call	DWORD PTR __imp__ReleaseCapture@0
$L85185:
; Line 633
	xor	eax, eax
$L85176:
; Line 653
	pop	ebp
	ret	16					; 00000010H
_DisableInputWndProc@16 ENDP
_TEXT	ENDS
PUBLIC	@LeftMouseDown@4
PUBLIC	_LeftMouseUp
PUBLIC	_RightMouseDown
PUBLIC	@PressSysKey@4
PUBLIC	@ReleaseKey@4
PUBLIC	@PressKey@4
PUBLIC	@PressChar@4
EXTRN	@gmenu_on_mouse_move@4:NEAR
EXTRN	_FreeMonsterSnd:NEAR
; Function compile flags: /Ogsy
;	COMDAT _GM_Game@16
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_GM_Game@16 PROC NEAR					; COMDAT
; Line 657
	push	ebp
	mov	ebp, esp
	push	esi
; Line 658
	mov	esi, DWORD PTR _uMsg$[ebp]
	mov	eax, 513				; 00000201H
	push	edi
	mov	edi, DWORD PTR _lParam$[ebp]
	cmp	esi, eax
	ja	$L85901
	je	$L85218
	mov	eax, esi
	sub	eax, 256				; 00000100H
	je	$L85206
	dec	eax
	je	SHORT $L85207
	dec	eax
	je	SHORT $L85208
	dec	eax
	dec	eax
	je	SHORT $L85209
	sub	eax, 14					; 0000000eH
	je	SHORT $L85211
	sub	eax, 238				; 000000eeH
	jne	$L85240
; Line 680
	mov	eax, edi
	movzx	ecx, ax
; Line 681
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _MouseX, ecx
	mov	DWORD PTR _MouseY, eax
; Line 682
	call	@gmenu_on_mouse_move@4
; Line 683
	jmp	$L85227
$L85211:
; Line 673
	cmp	DWORD PTR _wParam$[ebp], 61536		; 0000f060H
	jne	$L85240
; Line 674
	and	DWORD PTR _gbRunGame, 0
; Line 675
	and	DWORD PTR _gbRunGameResult, 0
; Line 676
	jmp	$L85227
$L85209:
; Line 669
	mov	ecx, DWORD PTR _wParam$[ebp]
	call	@PressSysKey@4
	test	eax, eax
	je	$L85240
; Line 670
	jmp	$L85227
$L85208:
; Line 666
	mov	ecx, DWORD PTR _wParam$[ebp]
	call	@PressChar@4
; Line 667
	jmp	$L85227
$L85207:
; Line 663
	mov	ecx, DWORD PTR _wParam$[ebp]
	call	@ReleaseKey@4
; Line 664
	jmp	$L85227
$L85206:
; Line 660
	mov	ecx, DWORD PTR _wParam$[ebp]
	call	@PressKey@4
; Line 661
	jmp	$L85227
$L85218:
; Line 685
	mov	eax, DWORD PTR _lParam$[ebp]
	movzx	ecx, ax
; Line 686
	shr	eax, 16					; 00000010H
; Line 687
	cmp	BYTE PTR _sgbMouseDown, 0
	mov	DWORD PTR _MouseX, ecx
	mov	DWORD PTR _MouseY, eax
	jne	$L85227
; Line 689
	push	DWORD PTR _hWnd$[ebp]
	mov	BYTE PTR _sgbMouseDown, 1
	call	DWORD PTR __imp__SetCapture@4
; Line 690
	mov	ecx, DWORD PTR _wParam$[ebp]
	call	@LeftMouseDown@4
	mov	ecx, eax
	call	@track_repeat_walk@4
; Line 692
	jmp	$L85227
$L85901:
; Line 658
	cmp	esi, 514				; 00000202H
	je	$L85223
	cmp	esi, 516				; 00000204H
	je	$L85228
	cmp	esi, 517				; 00000205H
	je	$L85233
	cmp	esi, 533				; 00000215H
	je	$L85238
	cmp	esi, 1025				; 00000401H
	jbe	$L85240
	cmp	esi, 1033				; 00000409H
	ja	$L85240
; Line 734
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L85242
; Line 735
	call	_pfile_write_hero
$L85242:
; Line 736
	xor	ecx, ecx
	inc	ecx
	call	@nthread_ignore_mutex@4
; Line 737
	push	8
	pop	ecx
	call	@PaletteFadeOut@4
; Line 738
	call	_FreeMonsterSnd
; Line 739
	call	_music_stop
; Line 740
	xor	ecx, ecx
	call	@track_repeat_walk@4
; Line 741
	and	BYTE PTR _sgbMouseDown, 0
; Line 742
	call	DWORD PTR __imp__ReleaseCapture@0
; Line 743
	mov	ecx, esi
	call	@ShowProgress@4
; Line 744
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
; Line 745
	call	_DrawAndBlit
; Line 746
	cmp	DWORD PTR _gbRunGame, 0
	je	SHORT $L85243
; Line 747
	push	8
	pop	ecx
	call	@PaletteFadeIn@4
$L85243:
; Line 748
	xor	ecx, ecx
	call	@nthread_ignore_mutex@4
; Line 749
	mov	DWORD PTR _gbGameLoopStartup, 1
; Line 750
	jmp	$L85227
$L85238:
; Line 721
	cmp	DWORD PTR _hWnd$[ebp], edi
	je	SHORT $L85240
; Line 722
	and	BYTE PTR _sgbMouseDown, 0
; Line 723
	xor	ecx, ecx
	call	@track_repeat_walk@4
$L85240:
; Line 753
	push	edi
	push	DWORD PTR _wParam$[ebp]
	push	esi
	push	DWORD PTR _hWnd$[ebp]
	call	_MainWndProc@16
	jmp	$L85201
$L85233:
; Line 713
	mov	eax, DWORD PTR _lParam$[ebp]
	movzx	ecx, ax
; Line 714
	shr	eax, 16					; 00000010H
; Line 715
	cmp	BYTE PTR _sgbMouseDown, 2
	mov	DWORD PTR _MouseX, ecx
	mov	DWORD PTR _MouseY, eax
	jne	SHORT $L85227
; Line 716
	and	BYTE PTR _sgbMouseDown, 0
; Line 719
	jmp	SHORT $L85902
$L85228:
; Line 704
	mov	eax, DWORD PTR _lParam$[ebp]
	movzx	ecx, ax
; Line 705
	shr	eax, 16					; 00000010H
; Line 706
	cmp	BYTE PTR _sgbMouseDown, 0
	mov	DWORD PTR _MouseX, ecx
	mov	DWORD PTR _MouseY, eax
	jne	SHORT $L85227
; Line 708
	push	DWORD PTR _hWnd$[ebp]
	mov	BYTE PTR _sgbMouseDown, 2
	call	DWORD PTR __imp__SetCapture@4
; Line 709
	call	_RightMouseDown
; Line 711
	jmp	SHORT $L85227
$L85223:
; Line 694
	mov	eax, DWORD PTR _lParam$[ebp]
	movzx	ecx, ax
; Line 695
	shr	eax, 16					; 00000010H
; Line 696
	cmp	BYTE PTR _sgbMouseDown, 1
	mov	DWORD PTR _MouseX, ecx
	mov	DWORD PTR _MouseY, eax
	jne	SHORT $L85227
; Line 697
	and	BYTE PTR _sgbMouseDown, 0
; Line 698
	call	_LeftMouseUp
; Line 699
	xor	ecx, ecx
	call	@track_repeat_walk@4
$L85902:
; Line 700
	call	DWORD PTR __imp__ReleaseCapture@0
$L85227:
; Line 702
	xor	eax, eax
$L85201:
	pop	edi
	pop	esi
; Line 754
	pop	ebp
	ret	16					; 00000010H
_GM_Game@16 ENDP
_TEXT	ENDS
PUBLIC	@LeftMouseCmd@4
PUBLIC	_TryIconCurs
EXTRN	_CheckStoreBtn:NEAR
EXTRN	_CheckLvlBtn:NEAR
EXTRN	_CheckChrBtns:NEAR
EXTRN	_CheckSBook:NEAR
EXTRN	_control_check_talk_btn:NEAR
EXTRN	_gmenu_exception:NEAR
EXTRN	_cursmx:DWORD
EXTRN	_cursmy:DWORD
EXTRN	_pcurs:DWORD
EXTRN	@gmenu_left_mouse@4:NEAR
EXTRN	_questlog:DWORD
EXTRN	_QuestlogESC:NEAR
EXTRN	_invflag:DWORD
EXTRN	_CheckInvItem:NEAR
EXTRN	_CheckInvScrn:NEAR
EXTRN	_TryInvPut:NEAR
EXTRN	_plr:BYTE
EXTRN	_deathflag:DWORD
EXTRN	_lvlbtndown:DWORD
EXTRN	_sbookflag:DWORD
EXTRN	_chrflag:DWORD
EXTRN	_SetSpell:NEAR
EXTRN	@NetSendCmdPItem@16:NEAR
EXTRN	_DoPanBtn:NEAR
EXTRN	_control_check_btn_press:NEAR
; Function compile flags: /Ogsy
;	COMDAT @LeftMouseDown@4
_TEXT	SEGMENT
@LeftMouseDown@4 PROC NEAR				; COMDAT
; _wParam$ = ecx
; Line 760
	push	ebx
	push	esi
	mov	esi, ecx
; Line 761
	xor	ecx, ecx
	inc	ecx
	call	@gmenu_left_mouse@4
	test	eax, eax
	jne	SHORT $L85248
	call	_control_check_talk_btn
	test	eax, eax
	jne	SHORT $L85248
	xor	ebx, ebx
	cmp	DWORD PTR _sgnTimeoutCurs, ebx
	jne	SHORT $L85248
; Line 763
	cmp	DWORD PTR _deathflag, ebx
	je	SHORT $L85249
; Line 764
	call	_control_check_btn_press
$L85248:
	pop	esi
; Line 762
	xor	eax, eax
	pop	ebx
; Line 828
	ret	0
$L85249:
; Line 767
	cmp	DWORD PTR _PauseMode, 2
; Line 768
	je	SHORT $L85248
; Line 769
	cmp	DWORD PTR _doomflag, ebx
	je	SHORT $L85251
; Line 770
	call	_doom_close
; Line 771
	jmp	SHORT $L85248
$L85251:
; Line 773
	cmp	DWORD PTR _spselflag, ebx
	je	SHORT $L85252
; Line 774
	call	_SetSpell
; Line 775
	jmp	SHORT $L85248
$L85252:
; Line 777
	cmp	BYTE PTR _stextflag, bl
	je	SHORT $L85253
; Line 778
	call	_CheckStoreBtn
; Line 779
	jmp	SHORT $L85248
$L85253:
; Line 781
	cmp	DWORD PTR _MouseY, 352			; 00000160H
	jl	SHORT $L85254
; Line 782
	cmp	DWORD PTR _talkflag, ebx
	jne	SHORT $L85256
	cmp	DWORD PTR _dropGoldFlag, ebx
	jne	SHORT $L85256
; Line 783
	call	_gmenu_exception
	test	eax, eax
	jne	SHORT $L85256
; Line 784
	call	_CheckInvScrn
$L85256:
; Line 786
	call	_DoPanBtn
; Line 787
	mov	eax, DWORD PTR _pcurs
	cmp	eax, 1
	jle	SHORT $L85248
	cmp	eax, 12					; 0000000cH
	jl	$LABEL_48$85259
; Line 788
	jmp	SHORT $L85248
$L85254:
; Line 791
	call	_gmenu_exception
	test	eax, eax
	jne	$L85248
	call	_TryIconCurs
	test	al, al
	jne	$L85248
; Line 793
	cmp	DWORD PTR _questlog, ebx
	mov	eax, DWORD PTR _MouseX
	je	SHORT $L85262
	cmp	eax, 32					; 00000020H
	jle	SHORT $L85262
	cmp	eax, 288				; 00000120H
	jge	SHORT $L85262
	mov	ecx, DWORD PTR _MouseY
	cmp	ecx, 32					; 00000020H
	jle	SHORT $L85262
	cmp	ecx, 308				; 00000134H
	jge	SHORT $L85262
; Line 794
	call	_QuestlogESC
; Line 795
	jmp	$L85248
$L85262:
; Line 797
	cmp	BYTE PTR _qtextflag, bl
	je	SHORT $L85263
; Line 798
	mov	BYTE PTR _qtextflag, bl
; Line 799
	call	_sfx_stop
; Line 800
	jmp	$L85248
$L85263:
; Line 802
	cmp	DWORD PTR _chrflag, ebx
	mov	ecx, 320				; 00000140H
	je	SHORT $L85264
	cmp	eax, ecx
	jge	SHORT $L85264
; Line 803
	call	_CheckChrBtns
; Line 804
	jmp	$L85248
$L85264:
; Line 806
	cmp	DWORD PTR _invflag, ebx
	je	SHORT $L85265
	cmp	eax, ecx
	jle	SHORT $L85265
; Line 807
	cmp	DWORD PTR _dropGoldFlag, ebx
	jne	$L85248
; Line 808
	call	_CheckInvItem
; Line 809
	jmp	$L85248
$L85265:
; Line 811
	cmp	DWORD PTR _sbookflag, ebx
	je	SHORT $L85267
	cmp	eax, ecx
	jle	SHORT $L85267
; Line 812
	call	_CheckSBook
; Line 813
	jmp	$L85248
$L85267:
; Line 815
	cmp	DWORD PTR _pcurs, 12			; 0000000cH
	jl	SHORT $L85268
; Line 816
	call	_TryInvPut
	test	eax, eax
; Line 817
	je	$L85248
; Line 818
	mov	al, BYTE PTR _cursmy
	xor	ecx, ecx
	push	eax
	mov	al, BYTE PTR _cursmx
	push	eax
	mov	dl, 10					; 0000000aH
	inc	ecx
	call	@NetSendCmdPItem@16
$LABEL_48$85259:
; Line 820
	xor	ecx, ecx
	inc	ecx
	call	@SetCursor_@4
; Line 821
	jmp	$L85248
$L85268:
; Line 823
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+388], ebx
	je	SHORT $L85270
	cmp	DWORD PTR _spselflag, ebx
	jne	SHORT $L85270
; Line 824
	call	_CheckLvlBtn
$L85270:
; Line 825
	cmp	DWORD PTR _lvlbtndown, ebx
	jne	$L85248
; Line 826
	xor	ecx, ecx
	cmp	esi, 5
	pop	esi
	pop	ebx
	sete	cl
	jmp	@LeftMouseCmd@4
@LeftMouseDown@4 ENDP
_TEXT	ENDS
EXTRN	_pcursmonst:DWORD
EXTRN	_pcursitem:BYTE
EXTRN	_pcursobj:BYTE
EXTRN	_pcursplr:BYTE
EXTRN	_abs:NEAR
EXTRN	@CanTalkToMonst@4:NEAR
EXTRN	_object:BYTE
EXTRN	@NetSendCmdLoc@16:NEAR
EXTRN	@NetSendCmdLocParam1@20:NEAR
EXTRN	@NetSendCmdParam1@12:NEAR
EXTRN	_leveltype:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LeftMouseCmd@4
_TEXT	SEGMENT
@LeftMouseCmd@4 PROC NEAR				; COMDAT
; _bShift$ = ecx
; Line 848
	cmp	BYTE PTR _leveltype, 0
	push	ebx
	push	esi
	mov	esi, ecx
	jne	SHORT $L85276
; Line 849
	mov	al, BYTE PTR _pcursitem
	xor	ebx, ebx
	inc	ebx
	cmp	al, -1
	je	SHORT $L85277
	cmp	DWORD PTR _pcurs, ebx
	jne	SHORT $L85277
; Line 850
	cmp	DWORD PTR _invflag, 0
	mov	ecx, ebx
	movsx	ax, al
	push	eax
	mov	al, BYTE PTR _cursmy
	push	eax
	mov	al, BYTE PTR _cursmx
	sete	dl
	push	eax
	add	dl, 41					; 00000029H
	call	@NetSendCmdLocParam1@20
$L85277:
; Line 851
	mov	eax, DWORD PTR _pcursmonst
	cmp	eax, -1
	je	SHORT $L85278
; Line 852
	push	eax
	mov	al, BYTE PTR _cursmy
	push	eax
	mov	al, BYTE PTR _cursmx
	push	eax
	mov	dl, 29					; 0000001dH
	mov	ecx, ebx
	call	@NetSendCmdLocParam1@20
$L85278:
; Line 853
	cmp	BYTE PTR _pcursitem, -1
; Line 854
	jmp	$L85919
$L85276:
; Line 856
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+56]
	sub	eax, DWORD PTR _cursmx
	push	eax
	call	_abs
	xor	ebx, ebx
	pop	ecx
	inc	ebx
	cmp	eax, 2
	jge	SHORT $L85909
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+60]
	sub	eax, DWORD PTR _cursmy
	push	eax
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L85909
	mov	ecx, ebx
	jmp	SHORT $L85910
$L85909:
	xor	ecx, ecx
$L85910:
; Line 857
	mov	dl, BYTE PTR _pcursitem
	mov	eax, DWORD PTR _pcurs
	cmp	dl, -1
	je	SHORT $L85281
	cmp	eax, ebx
	jne	SHORT $L85281
	test	esi, esi
	jne	SHORT $L85281
; Line 858
	cmp	DWORD PTR _invflag, esi
	mov	ecx, ebx
	movsx	ax, dl
	push	eax
	mov	al, BYTE PTR _cursmy
	push	eax
	mov	al, BYTE PTR _cursmx
	sete	dl
	push	eax
	add	dl, 41					; 00000029H
	call	@NetSendCmdLocParam1@20
; Line 859
	jmp	$L85911
$L85281:
	mov	dl, BYTE PTR _pcursobj
	cmp	dl, -1
	je	SHORT $L85283
	test	esi, esi
	je	SHORT $L85284
	test	ecx, ecx
	je	SHORT $L85283
	movsx	ecx, dl
	imul	ecx, 120				; 00000078H
	cmp	BYTE PTR _object[ecx+52], bl
	jne	SHORT $L85283
$L85284:
; Line 860
	movsx	cx, dl
	push	ecx
	mov	cl, BYTE PTR _cursmy
	push	ecx
	mov	cl, BYTE PTR _cursmx
	cmp	eax, 5
	push	ecx
	sete	dl
	add	dl, 16					; 00000010H
	mov	ecx, ebx
	call	@NetSendCmdLocParam1@20
; Line 861
	jmp	$L85303
$L85283:
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+312], ebx
	jne	SHORT $L85286
; Line 862
	test	esi, esi
	je	SHORT $L85287
; Line 863
	mov	dl, 13					; 0000000dH
	mov	ecx, ebx
; Line 864
	jmp	SHORT $L85920
$L85287:
	mov	ecx, DWORD PTR _pcursmonst
	cmp	ecx, -1
	je	SHORT $L85289
; Line 865
	call	@CanTalkToMonst@4
	test	eax, eax
; Line 866
	mov	ax, WORD PTR _pcursmonst
	mov	ecx, ebx
	push	eax
; Line 867
	jne	SHORT $L85921
; Line 868
	mov	dl, 20					; 00000014H
; Line 870
	jmp	SHORT $L85918
$L85289:
	mov	al, BYTE PTR _pcursplr
	cmp	al, -1
	je	$L85911
	cmp	DWORD PTR _FriendlyMode, 0
	jne	SHORT $L85911
; Line 871
	mov	dl, 21					; 00000015H
; Line 873
	jmp	SHORT $L85915
$L85286:
; Line 874
	test	esi, esi
	je	SHORT $L85295
; Line 875
	mov	ecx, DWORD PTR _pcursmonst
	cmp	ecx, -1
	je	SHORT $L85296
; Line 876
	call	@CanTalkToMonst@4
	test	eax, eax
; Line 877
	mov	ecx, ebx
	je	SHORT $L85297
	mov	ax, WORD PTR _pcursmonst
	mov	dl, 18					; 00000012H
; Line 878
	jmp	SHORT $L85916
$L85297:
; Line 879
	mov	dl, 55					; 00000037H
$L85920:
	mov	al, BYTE PTR _cursmy
	push	eax
	mov	al, BYTE PTR _cursmx
	push	eax
	call	@NetSendCmdLoc@16
; Line 881
	jmp	SHORT $L85303
$L85296:
; Line 882
	mov	ecx, ebx
; Line 884
	jmp	SHORT $L85297
$L85295:
	mov	eax, DWORD PTR _pcursmonst
	cmp	eax, -1
	je	SHORT $L85301
; Line 885
	push	eax
	mov	ecx, ebx
$L85921:
	mov	dl, 18					; 00000012H
$L85918:
	call	@NetSendCmdParam1@12
; Line 886
	jmp	SHORT $L85911
$L85301:
	mov	al, BYTE PTR _pcursplr
	cmp	al, -1
	je	SHORT $L85911
	cmp	DWORD PTR _FriendlyMode, 0
	jne	SHORT $L85911
; Line 887
	mov	dl, 19					; 00000013H
$L85915:
	movsx	ax, al
	mov	ecx, ebx
$L85916:
	push	eax
	call	@NetSendCmdParam1@12
$L85303:
; Line 890
	test	esi, esi
	jne	SHORT $L85304
$L85911:
	cmp	BYTE PTR _pcursitem, -1
	jne	SHORT $L85304
	cmp	BYTE PTR _pcursobj, -1
$L85919:
	jne	SHORT $L85304
	cmp	DWORD PTR _pcursmonst, -1
	jne	SHORT $L85304
	cmp	BYTE PTR _pcursplr, -1
	jne	SHORT $L85304
; Line 891
	mov	eax, ebx
	jmp	SHORT $L85274
$L85304:
; Line 894
	xor	eax, eax
$L85274:
	pop	esi
	pop	ebx
; Line 895
	ret	0
@LeftMouseCmd@4 ENDP
_TEXT	ENDS
EXTRN	_pcursinvitem:BYTE
EXTRN	@GetSpellLevel@8:NEAR
EXTRN	_DoTelekinesis:NEAR
EXTRN	@NetSendCmdLocParam2@24:NEAR
EXTRN	@CheckIdentify@8:NEAR
EXTRN	@DoRepair@8:NEAR
EXTRN	@NetSendCmdParam3@20:NEAR
EXTRN	@DoRecharge@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _TryIconCurs
_TEXT	SEGMENT
_TryIconCurs PROC NEAR					; COMDAT
; Line 906
	mov	ecx, DWORD PTR _pcurs
	mov	eax, ecx
	dec	eax
	dec	eax
	je	$L85320
	dec	eax
	je	$L85323
	dec	eax
	je	$L85325
	sub	eax, 3
	je	$L85319
	dec	eax
	je	$L85316
	dec	eax
	je	SHORT $L85327
	dec	eax
	je	SHORT $L85318
; Line 956
	cmp	ecx, 5
	jne	SHORT $L85333
	cmp	BYTE PTR _pcursobj, -1
	je	SHORT $LABEL_26$85322
$L85333:
; Line 958
	xor	al, al
; Line 959
	ret	0
$L85318:
; Line 913
	mov	dl, 77					; 0000004dH
; Line 914
	jmp	$LABEL_3$85317
$L85327:
; Line 939
	mov	ecx, DWORD PTR _myplr
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
; Line 940
	cmp	DWORD PTR _pcursmonst, -1
	mov	edx, DWORD PTR _plr[eax+172]
	jne	SHORT $L85328
; Line 941
	cmp	BYTE PTR _pcursplr, -1
	jne	SHORT $L85329
; Line 942
	call	@GetSpellLevel@8
; Line 945
	push	eax
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	xor	ecx, ecx
	mov	dl, 15					; 0000000fH
	mov	ax, WORD PTR _plr[eax+172]
	inc	ecx
	push	eax
	mov	al, BYTE PTR _cursmy
	push	eax
	mov	al, BYTE PTR _cursmx
	push	eax
	call	@NetSendCmdLocParam2@24
$LABEL_26$85322:
	xor	ecx, ecx
	inc	ecx
	call	@SetCursor_@4
$L85925:
	mov	al, 1
; Line 959
	ret	0
$L85329:
	call	@GetSpellLevel@8
	push	eax
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	dl, 25					; 00000019H
	mov	ax, WORD PTR _plr[eax+172]
	push	eax
	movsx	ax, BYTE PTR _pcursplr
$L85927:
	xor	ecx, ecx
	push	eax
	inc	ecx
	call	@NetSendCmdParam3@20
	jmp	SHORT $LABEL_26$85322
$L85328:
; Line 951
	call	@GetSpellLevel@8
; Line 952
	push	eax
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	dl, 24					; 00000018H
	mov	ax, WORD PTR _plr[eax+172]
	push	eax
	mov	ax, WORD PTR _pcursmonst
; Line 954
	jmp	SHORT $L85927
$L85316:
; Line 908
	mov	dl, 26					; 0000001aH
$LABEL_3$85317:
; Line 910
	movsx	ax, BYTE PTR _pcursplr
	xor	ecx, ecx
	push	eax
	inc	ecx
	call	@NetSendCmdParam1@12
; Line 911
	jmp	SHORT $L85925
$L85319:
; Line 916
	call	_DoTelekinesis
; Line 917
	jmp	SHORT $L85925
$L85325:
; Line 933
	mov	al, BYTE PTR _pcursinvitem
	cmp	al, -1
	je	$LABEL_26$85322
; Line 934
	mov	ecx, DWORD PTR _myplr
	movsx	edx, al
	call	@DoRecharge@8
; Line 935
	jmp	$L85925
$L85323:
; Line 927
	mov	al, BYTE PTR _pcursinvitem
	cmp	al, -1
	je	$LABEL_26$85322
; Line 928
	mov	ecx, DWORD PTR _myplr
	movsx	edx, al
	call	@DoRepair@8
; Line 929
	jmp	$L85925
$L85320:
; Line 919
	mov	al, BYTE PTR _pcursinvitem
	cmp	al, -1
	je	$LABEL_26$85322
; Line 920
	mov	ecx, DWORD PTR _myplr
	movsx	edx, al
	call	@CheckIdentify@8
; Line 921
	jmp	$L85925
_TryIconCurs ENDP
_TEXT	ENDS
EXTRN	_CheckBtnUp:NEAR
EXTRN	_ReleaseStoreBtn:NEAR
EXTRN	_ReleaseLvlBtn:NEAR
EXTRN	_ReleaseChrBtns:NEAR
EXTRN	_control_release_talk_btn:NEAR
EXTRN	_chrbtnactive:DWORD
EXTRN	_panbtndown:DWORD
; Function compile flags: /Ogsy
;	COMDAT _LeftMouseUp
_TEXT	SEGMENT
_LeftMouseUp PROC NEAR					; COMDAT
; Line 966
	xor	ecx, ecx
	call	@gmenu_left_mouse@4
; Line 967
	call	_control_release_talk_btn
; Line 968
	cmp	DWORD PTR _panbtndown, 0
	je	SHORT $L85335
; Line 969
	call	_CheckBtnUp
$L85335:
; Line 970
	cmp	DWORD PTR _chrbtnactive, 0
	je	SHORT $L85336
; Line 971
	call	_ReleaseChrBtns
$L85336:
; Line 972
	cmp	DWORD PTR _lvlbtndown, 0
	je	SHORT $L85337
; Line 973
	call	_ReleaseLvlBtn
$L85337:
; Line 974
	cmp	BYTE PTR _stextflag, 0
	je	SHORT $L85338
; Line 975
	jmp	_ReleaseStoreBtn
$L85338:
; Line 976
	ret	0
_LeftMouseUp ENDP
_TEXT	ENDS
EXTRN	@CheckPlrSpell@0:NEAR
EXTRN	@UseInvItem@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _RightMouseDown
_TEXT	SEGMENT
_RightMouseDown PROC NEAR				; COMDAT
; Line 983
	call	_gmenu_exception
	test	eax, eax
	jne	$L85354
	cmp	DWORD PTR _sgnTimeoutCurs, eax
	jne	$L85354
	cmp	DWORD PTR _PauseMode, 2
	je	$L85354
	mov	ecx, DWORD PTR _myplr
	imul	ecx, 21720				; 000054d8H
	cmp	BYTE PTR _plr[ecx+317], al
	jne	$L85354
; Line 984
	cmp	DWORD PTR _doomflag, eax
	je	SHORT $L85341
; Line 985
	jmp	_doom_close
$L85341:
; Line 986
	cmp	BYTE PTR _stextflag, al
	jne	$L85354
; Line 987
	cmp	DWORD PTR _spselflag, eax
	je	SHORT $L85344
; Line 988
	jmp	_SetSpell
$L85344:
; Line 992
	cmp	DWORD PTR _MouseY, 352			; 00000160H
	jge	SHORT $L85349
	cmp	DWORD PTR _sbookflag, eax
	je	SHORT $L85348
	cmp	DWORD PTR _MouseX, 320			; 00000140H
	jg	SHORT $L85354
$L85348:
	call	_TryIconCurs
	test	al, al
	jne	SHORT $L85354
	mov	al, BYTE PTR _pcursinvitem
	cmp	al, -1
	je	SHORT $L85349
	mov	ecx, DWORD PTR _myplr
	movsx	edx, al
	call	@UseInvItem@8
	test	eax, eax
	jne	SHORT $L85354
$L85349:
; Line 993
	mov	eax, DWORD PTR _pcurs
	xor	ecx, ecx
	inc	ecx
	cmp	eax, ecx
	jne	SHORT $L85937
; Line 994
	mov	al, BYTE PTR _pcursinvitem
	cmp	al, -1
	je	SHORT $L85352
	mov	ecx, DWORD PTR _myplr
	movsx	edx, al
	call	@UseInvItem@8
	test	eax, eax
	jne	SHORT $L85354
$L85352:
; Line 995
	jmp	@CheckPlrSpell@0
$L85937:
; Line 996
	jle	SHORT $L85354
	cmp	eax, 12					; 0000000cH
	jge	SHORT $L85354
; Line 997
	jmp	@SetCursor_@4
$L85354:
; Line 1002
	ret	0
_RightMouseDown ENDP
_TEXT	ENDS
PUBLIC	@diablo_hotkey_msg@4
; Function compile flags: /Ogsy
;	COMDAT @PressSysKey@4
_TEXT	SEGMENT
@PressSysKey@4 PROC NEAR				; COMDAT
; _wParam$ = ecx
; Line 1011
	push	esi
	mov	esi, ecx
; Line 1012
	call	_gmenu_exception
	test	eax, eax
	jne	SHORT $L85359
	cmp	esi, 121				; 00000079H
	jne	SHORT $L85359
; Line 1014
	xor	ecx, ecx
	inc	ecx
	call	@diablo_hotkey_msg@4
; Line 1015
	xor	eax, eax
	inc	eax
	pop	esi
; Line 1016
	ret	0
$L85359:
; Line 1013
	xor	eax, eax
	pop	esi
; Line 1016
	ret	0
@PressSysKey@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@MKGA@Can?8t?5get?5program?5name?$AA@	; `string'
PUBLIC	??_C@_0M@PIGM@?2Diablo?4ini?$AA@		; `string'
PUBLIC	??_C@_06CIBP@NetMsg?$AA@			; `string'
EXTRN	_strrchr:NEAR
EXTRN	__imp__GetPrivateProfileStringA@24:NEAR
EXTRN	_TermMsg:NEAR
EXTRN	_strcat:NEAR
EXTRN	@NetSendCmdString@8:NEAR
;	COMDAT ??_C@_0BH@MKGA@Can?8t?5get?5program?5name?$AA@
_DATA	SEGMENT
??_C@_0BH@MKGA@Can?8t?5get?5program?5name?$AA@ DB 'Can''t get program nam'
	DB	'e', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@PIGM@?2Diablo?4ini?$AA@
_DATA	SEGMENT
??_C@_0M@PIGM@?2Diablo?4ini?$AA@ DB '\Diablo.ini', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CIBP@NetMsg?$AA@
_DATA	SEGMENT
??_C@_06CIBP@NetMsg?$AA@ DB 'NetMsg', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @diablo_hotkey_msg@4
_TEXT	SEGMENT
_Filename$ = -340
_ReturnedString$ = -80
@diablo_hotkey_msg@4 PROC NEAR				; COMDAT
; _dwMsg$ = ecx
; Line 1019
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
; Line 1026
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	esi
	mov	esi, ecx
	je	$L85367
; Line 1027
	lea	eax, DWORD PTR _Filename$[ebp]
	push	260					; 00000104H
	push	eax
	push	DWORD PTR _ghInst
	call	DWORD PTR __imp__GetModuleFileNameA@12
	test	eax, eax
	jne	SHORT $L85368
; Line 1028
	push	OFFSET FLAT:??_C@_0BH@MKGA@Can?8t?5get?5program?5name?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L85368:
; Line 1029
	lea	eax, DWORD PTR _Filename$[ebp]
	push	92					; 0000005cH
	push	eax
	call	_strrchr
	pop	ecx
; Line 1030
	test	eax, eax
	pop	ecx
	je	SHORT $L85370
; Line 1031
	and	BYTE PTR [eax], 0
$L85370:
; Line 1032
	lea	eax, DWORD PTR _Filename$[ebp]
	push	OFFSET FLAT:??_C@_0M@PIGM@?2Diablo?4ini?$AA@ ; `string'
	push	eax
	call	_strcat
	pop	ecx
; Line 1033
	mov	eax, esi
	pop	ecx
	lea	ecx, DWORD PTR _Filename$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ReturnedString$[ebp]
	shl	eax, 2
	push	80					; 00000050H
	push	ecx
	push	DWORD PTR _spszMsgTbl[eax]
	push	DWORD PTR _spszMsgKeyTbl[eax]
	push	OFFSET FLAT:??_C@_06CIBP@NetMsg?$AA@	; `string'
	call	DWORD PTR __imp__GetPrivateProfileStringA@24
; Line 1034
	lea	edx, DWORD PTR _ReturnedString$[ebp]
	or	ecx, -1
	call	@NetSendCmdString@8
$L85367:
	pop	esi
; Line 1036
	leave
	ret	0
@diablo_hotkey_msg@4 ENDP
_TEXT	ENDS
EXTRN	_CaptureScreen:NEAR
; Function compile flags: /Ogsy
;	COMDAT @ReleaseKey@4
_TEXT	SEGMENT
@ReleaseKey@4 PROC NEAR					; COMDAT
; _vkey$ = ecx
; Line 1043
	cmp	ecx, 44					; 0000002cH
	jne	SHORT $L85376
; Line 1044
	jmp	_CaptureScreen
$L85376:
; Line 1045
	ret	0
@ReleaseKey@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@GOPL@No?5help?5available?$AA@		; `string'
PUBLIC	??_C@_0BA@BBPG@while?5in?5stores?$AA@		; `string'
PUBLIC	_diablo_pause_game
EXTRN	_DoAutoMap:NEAR
EXTRN	_STextEnter:NEAR
EXTRN	_control_type_message:NEAR
EXTRN	@control_presskeys@4:NEAR
EXTRN	@gmenu_presskeys@4:NEAR
EXTRN	_DisplayHelp:NEAR
EXTRN	_HelpScrollUp:NEAR
EXTRN	_HelpScrollDown:NEAR
EXTRN	_QuestlogUp:NEAR
EXTRN	_QuestlogDown:NEAR
EXTRN	_QuestlogEnter:NEAR
EXTRN	_automapflag:DWORD
EXTRN	_AutomapUp:NEAR
EXTRN	_AutomapDown:NEAR
EXTRN	_AutomapLeft:NEAR
EXTRN	_AutomapRight:NEAR
EXTRN	__imp__SetCursorPos@8:NEAR
EXTRN	_gamemenu_previous:NEAR
EXTRN	_gamemenu_off:NEAR
EXTRN	@SetSpeedSpell@4:NEAR
EXTRN	@ToggleSpell@4:NEAR
EXTRN	@AddPanelString@8:NEAR
EXTRN	_ClearPanel:NEAR
EXTRN	_STextUp:NEAR
EXTRN	_STextDown:NEAR
EXTRN	_STextPrior:NEAR
EXTRN	_STextNext:NEAR
;	COMDAT ??_C@_0BC@GOPL@No?5help?5available?$AA@
_DATA	SEGMENT
??_C@_0BC@GOPL@No?5help?5available?$AA@ DB 'No help available', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@BBPG@while?5in?5stores?$AA@
_DATA	SEGMENT
??_C@_0BA@BBPG@while?5in?5stores?$AA@ DB 'while in stores', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PressKey@4
_TEXT	SEGMENT
@PressKey@4 PROC NEAR					; COMDAT
; _vkey$ = ecx
; Line 1048
	push	ebx
	push	esi
	push	edi
	mov	esi, ecx
; Line 1055
	call	@gmenu_presskeys@4
	test	eax, eax
	jne	$L85400
	mov	ecx, esi
	call	@control_presskeys@4
	test	eax, eax
	jne	$L85400
; Line 1056
	xor	ebx, ebx
	push	2
	cmp	DWORD PTR _deathflag, ebx
	pop	edi
	je	SHORT $LABEL_113$85386
; Line 1058
	cmp	DWORD PTR _sgnTimeoutCurs, ebx
	jne	$L85400
; Line 1059
	cmp	esi, 120				; 00000078H
	jne	SHORT $L85388
; Line 1060
	xor	ecx, ecx
	call	@diablo_hotkey_msg@4
$L85388:
; Line 1061
	cmp	esi, 121				; 00000079H
	jne	SHORT $L85389
; Line 1062
	xor	ecx, ecx
	inc	ecx
	call	@diablo_hotkey_msg@4
$L85389:
; Line 1063
	cmp	esi, 122				; 0000007aH
	jne	SHORT $L85390
; Line 1064
	mov	ecx, edi
	call	@diablo_hotkey_msg@4
$L85390:
; Line 1065
	cmp	esi, 123				; 0000007bH
	jne	SHORT $L85391
; Line 1066
	push	3
	pop	ecx
	call	@diablo_hotkey_msg@4
$L85391:
; Line 1067
	cmp	esi, 13					; 0000000dH
	jne	SHORT $L85392
; Line 1068
	call	_control_type_message
$L85392:
; Line 1069
	cmp	esi, 27					; 0000001bH
	jne	$L85400
$LABEL_113$85386:
; Line 1071
	cmp	esi, 27					; 0000001bH
	jne	SHORT $L85394
; Line 1072
	call	_PressEscKey
	test	eax, eax
	jne	$L85400
; Line 1073
	xor	ecx, ecx
	call	@track_repeat_walk@4
	pop	edi
	pop	esi
	pop	ebx
; Line 1074
	jmp	_gamemenu_previous
$L85394:
; Line 1078
	cmp	DWORD PTR _sgnTimeoutCurs, ebx
	jne	$L85400
	cmp	DWORD PTR _dropGoldFlag, ebx
	jne	$L85400
; Line 1079
	cmp	esi, 19					; 00000013H
	jne	SHORT $L85397
	pop	edi
	pop	esi
	pop	ebx
; Line 1080
	jmp	_diablo_pause_game
$L85397:
; Line 1083
	cmp	DWORD PTR _PauseMode, edi
	je	$L85400
; Line 1084
	cmp	esi, 112				; 00000070H
	jg	$L85949
	je	$L85408
	cmp	esi, 34					; 00000022H
	jg	$L85950
	je	$L85445
	sub	esi, 9
	je	$L85451
	sub	esi, 4
	je	$L85403
	sub	esi, 19					; 00000013H
	je	SHORT $L85452
	dec	esi
	jne	$L85400
; Line 1189
	cmp	BYTE PTR _stextflag, bl
	je	$L85400
	pop	edi
	pop	esi
	pop	ebx
; Line 1190
	jmp	_STextPrior
$L85452:
; Line 1208
	cmp	DWORD PTR _chrflag, ebx
	mov	esi, DWORD PTR __imp__SetCursorPos@8
	mov	edi, 352				; 00000160H
	jne	SHORT $L85453
; Line 1209
	cmp	DWORD PTR _invflag, ebx
	je	SHORT $LABEL_106$85455
; Line 1226
	mov	eax, DWORD PTR _MouseX
; Line 1227
	cmp	eax, 480				; 000001e0H
	jge	SHORT $LABEL_101$85459
	mov	ecx, DWORD PTR _MouseY
	cmp	ecx, edi
	jge	SHORT $LABEL_101$85459
; Line 1233
	add	eax, 160				; 000000a0H
	push	ecx
	push	eax
	call	esi
$L85453:
; Line 1235
	mov	eax, DWORD PTR _MouseX
$LABEL_101$85459:
; Line 1229
	cmp	DWORD PTR _invflag, ebx
	jne	SHORT $LABEL_106$85455
	cmp	DWORD PTR _chrflag, ebx
	je	SHORT $LABEL_106$85455
	cmp	eax, 160				; 000000a0H
	jle	SHORT $LABEL_106$85455
	mov	ecx, DWORD PTR _MouseY
	cmp	ecx, edi
	jge	SHORT $LABEL_106$85455
; Line 1230
	add	eax, -160				; ffffff60H
	push	ecx
	push	eax
	call	esi
$LABEL_106$85455:
	cmp	BYTE PTR _qtextflag, bl
	mov	DWORD PTR _helpflag, ebx
	mov	DWORD PTR _invflag, ebx
	mov	DWORD PTR _chrflag, ebx
	mov	DWORD PTR _sbookflag, ebx
	mov	DWORD PTR _spselflag, ebx
	je	SHORT $L85456
; Line 1216
	cmp	BYTE PTR _leveltype, bl
	jne	SHORT $L85456
; Line 1217
	mov	BYTE PTR _qtextflag, bl
; Line 1218
	call	_sfx_stop
$L85456:
; Line 1220
	mov	DWORD PTR _questlog, ebx
; Line 1221
	mov	DWORD PTR _automapflag, ebx
; Line 1222
	mov	BYTE PTR _msgdelay, bl
; Line 1223
	call	_gamemenu_off
; Line 1224
	jmp	$LABEL_110$85414
$L85403:
; Line 1086
	cmp	BYTE PTR _stextflag, bl
	pop	edi
	pop	esi
	je	SHORT $L85404
	pop	ebx
; Line 1087
	jmp	_STextEnter
$L85404:
; Line 1088
	cmp	DWORD PTR _questlog, ebx
	pop	ebx
	je	SHORT $L85406
; Line 1089
	jmp	_QuestlogEnter
$L85406:
; Line 1091
	jmp	_control_type_message
$L85451:
	pop	edi
	pop	esi
	pop	ebx
; Line 1205
	jmp	_DoAutoMap
$L85445:
; Line 1193
	cmp	BYTE PTR _stextflag, bl
	je	$L85400
	pop	edi
	pop	esi
	pop	ebx
; Line 1194
	jmp	_STextNext
$L85950:
; Line 1084
	sub	esi, 37					; 00000025H
	je	$L85447
	dec	esi
	je	SHORT $L85427
	dec	esi
	je	SHORT $L85449
	dec	esi
	jne	$L85400
; Line 1178
	cmp	BYTE PTR _stextflag, bl
	je	SHORT $L85436
	pop	edi
	pop	esi
	pop	ebx
; Line 1179
	jmp	_STextDown
$L85436:
; Line 1180
	cmp	DWORD PTR _questlog, ebx
	je	SHORT $L85438
	pop	edi
	pop	esi
	pop	ebx
; Line 1181
	jmp	_QuestlogDown
$L85438:
; Line 1182
	cmp	DWORD PTR _helpflag, ebx
	je	SHORT $L85440
	pop	edi
	pop	esi
	pop	ebx
; Line 1183
	jmp	_HelpScrollDown
$L85440:
; Line 1184
	cmp	DWORD PTR _automapflag, ebx
	je	$L85400
	pop	edi
	pop	esi
	pop	ebx
; Line 1185
	jmp	_AutomapDown
$L85449:
; Line 1201
	cmp	DWORD PTR _automapflag, ebx
	je	SHORT $L85400
	cmp	DWORD PTR _talkflag, ebx
	jne	SHORT $L85400
	pop	edi
	pop	esi
	pop	ebx
; Line 1202
	jmp	_AutomapRight
$L85427:
; Line 1167
	cmp	BYTE PTR _stextflag, bl
	je	SHORT $L85428
	pop	edi
	pop	esi
	pop	ebx
; Line 1168
	jmp	_STextUp
$L85428:
; Line 1169
	cmp	DWORD PTR _questlog, ebx
	je	SHORT $L85430
	pop	edi
	pop	esi
	pop	ebx
; Line 1170
	jmp	_QuestlogUp
$L85430:
; Line 1171
	cmp	DWORD PTR _helpflag, ebx
	je	SHORT $L85432
	pop	edi
	pop	esi
	pop	ebx
; Line 1172
	jmp	_HelpScrollUp
$L85432:
; Line 1173
	cmp	DWORD PTR _automapflag, ebx
	je	SHORT $L85400
	pop	edi
	pop	esi
	pop	ebx
; Line 1174
	jmp	_AutomapUp
$L85447:
; Line 1197
	cmp	DWORD PTR _automapflag, ebx
	je	SHORT $L85400
	cmp	DWORD PTR _talkflag, ebx
	jne	SHORT $L85400
	pop	edi
	pop	esi
	pop	ebx
; Line 1198
	jmp	_AutomapLeft
$L85408:
; Line 1095
	cmp	DWORD PTR _helpflag, ebx
	je	SHORT $L85409
; Line 1096
	mov	DWORD PTR _helpflag, ebx
$L85400:
	pop	edi
	pop	esi
	pop	ebx
; Line 1243
	ret	0
$L85409:
; Line 1099
	cmp	BYTE PTR _stextflag, bl
	je	SHORT $L85410
; Line 1100
	call	_ClearPanel
; Line 1101
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BC@GOPL@No?5help?5available?$AA@ ; `string'
	inc	edx
	call	@AddPanelString@8
; Line 1102
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BA@BBPG@while?5in?5stores?$AA@ ; `string'
	inc	edx
	call	@AddPanelString@8
; Line 1103
	xor	ecx, ecx
	pop	edi
	pop	esi
	pop	ebx
	jmp	@track_repeat_walk@4
$L85410:
; Line 1110
	cmp	BYTE PTR _qtextflag, bl
	mov	DWORD PTR _invflag, ebx
	mov	DWORD PTR _chrflag, ebx
	mov	DWORD PTR _sbookflag, ebx
	mov	DWORD PTR _spselflag, ebx
	je	SHORT $L85413
	cmp	BYTE PTR _leveltype, bl
	jne	SHORT $L85413
; Line 1111
	mov	BYTE PTR _qtextflag, bl
; Line 1112
	call	_sfx_stop
$L85413:
; Line 1114
	mov	DWORD PTR _questlog, ebx
; Line 1115
	mov	DWORD PTR _automapflag, ebx
; Line 1116
	mov	BYTE PTR _msgdelay, bl
; Line 1117
	call	_gamemenu_off
; Line 1118
	call	_DisplayHelp
$LABEL_110$85414:
	pop	edi
	pop	esi
	pop	ebx
; Line 1120
	jmp	_doom_close
$L85949:
; Line 1084
	lea	eax, DWORD PTR [esi-116]
	cmp	eax, 7
	ja	$L85400
	jmp	DWORD PTR $L85954[eax*4]
$L85415:
; Line 1136
	xor	ecx, ecx
; Line 1137
	jmp	SHORT $LABEL_48$85416
$L85417:
; Line 1139
	xor	ecx, ecx
	inc	ecx
; Line 1140
	jmp	SHORT $LABEL_48$85416
$L85418:
; Line 1142
	mov	ecx, edi
; Line 1143
	jmp	SHORT $LABEL_48$85416
$L85419:
; Line 1145
	push	3
	pop	ecx
$LABEL_48$85416:
; Line 1147
	cmp	DWORD PTR _spselflag, ebx
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $L85420
; Line 1148
	jmp	@SetSpeedSpell@4
$L85420:
; Line 1150
	jmp	@ToggleSpell@4
$L85422:
; Line 1153
	xor	ecx, ecx
	jmp	SHORT $LABEL_59$85423
$L85424:
; Line 1158
	xor	ecx, ecx
	inc	ecx
; Line 1159
	jmp	SHORT $LABEL_59$85423
$L85425:
; Line 1161
	mov	ecx, edi
; Line 1162
	jmp	SHORT $LABEL_59$85423
$L85426:
; Line 1164
	push	3
	pop	ecx
$LABEL_59$85423:
	pop	edi
	pop	esi
	pop	ebx
	jmp	@diablo_hotkey_msg@4
$L85954:
; Line 1243
	DD	$L85415
	DD	$L85417
	DD	$L85418
	DD	$L85419
	DD	$L85422
	DD	$L85424
	DD	$L85425
	DD	$L85426
@PressKey@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _diablo_pause_game
_TEXT	SEGMENT
_diablo_pause_game PROC NEAR				; COMDAT
; Line 1256
	cmp	BYTE PTR _gbMaxPlayers, 1
	ja	SHORT $L85463
; Line 1257
	cmp	DWORD PTR _PauseMode, 0
	je	SHORT $L85464
; Line 1258
	and	DWORD PTR _PauseMode, 0
; Line 1259
	jmp	SHORT $L85465
$L85464:
; Line 1260
	mov	DWORD PTR _PauseMode, 2
; Line 1261
	call	_FreeMonsterSnd
; Line 1262
	xor	ecx, ecx
	call	@track_repeat_walk@4
$L85465:
; Line 1264
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
$L85463:
; Line 1266
	ret	0
_diablo_pause_game ENDP
_TEXT	ENDS
EXTRN	@control_talk_last_key@4:NEAR
EXTRN	_StartQuestlog:NEAR
EXTRN	_gszVersionNumber:BYTE
EXTRN	_gszProductName:BYTE
EXTRN	_IncreaseGamma:NEAR
EXTRN	_DecreaseGamma:NEAR
EXTRN	_AutomapZoomIn:NEAR
EXTRN	_AutomapZoomOut:NEAR
EXTRN	_DoSpeedBook:NEAR
; Function compile flags: /Ogsy
;	COMDAT @PressChar@4
_TEXT	SEGMENT
@PressChar@4 PROC NEAR					; COMDAT
; _vkey$ = ecx
; Line 1272
	push	ebx
	mov	ebx, ecx
; Line 1289
	call	_gmenu_exception
	test	eax, eax
	jne	$L85493
	mov	ecx, ebx
	call	@control_talk_last_key@4
	test	eax, eax
	jne	$L85493
	cmp	DWORD PTR _sgnTimeoutCurs, eax
	jne	$L85493
	cmp	DWORD PTR _deathflag, eax
	jne	$L85493
; Line 1290
	cmp	bl, 112					; 00000070H
	je	$L85487
	cmp	bl, 80					; 00000050H
	je	$L85487
; Line 1292
	cmp	DWORD PTR _PauseMode, 2
	je	$L85493
; Line 1293
	cmp	DWORD PTR _doomflag, eax
	je	SHORT $L85490
	pop	ebx
; Line 1294
	jmp	_doom_close
$L85490:
; Line 1297
	cmp	DWORD PTR _dropGoldFlag, eax
	je	SHORT $L85491
; Line 1298
	mov	cl, bl
	pop	ebx
	jmp	@control_drop_gold@4
$L85491:
; Line 1301
	lea	ecx, DWORD PTR [ebx-33]
	cmp	ecx, 89					; 00000059H
	ja	$L85493
	movzx	ecx, BYTE PTR $L85961[ecx]
	jmp	DWORD PTR $L85966[ecx*4]
$L85496:
; Line 1304
	mov	eax, DWORD PTR _myplr
	mov	ecx, eax
; Line 1305
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+18240]
; Line 1306
	cmp	eax, -1
	je	$L85493
	cmp	eax, 11					; 0000000bH
	je	$L85493
; Line 1307
	push	47					; 0000002fH
; Line 1308
	jmp	$L85963
$L85499:
; Line 1313
	mov	eax, DWORD PTR _myplr
	mov	ecx, eax
; Line 1314
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+18976]
; Line 1315
	cmp	eax, -1
	je	$L85493
	cmp	eax, 11					; 0000000bH
	je	$L85493
; Line 1316
	push	49					; 00000031H
; Line 1317
	jmp	$L85963
$L85501:
; Line 1322
	mov	eax, DWORD PTR _myplr
	mov	ecx, eax
; Line 1323
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+19344]
; Line 1324
	cmp	eax, -1
	je	$L85493
	cmp	eax, 11					; 0000000bH
	je	$L85493
; Line 1325
	push	50					; 00000032H
; Line 1326
	jmp	$L85963
$L85503:
; Line 1331
	mov	eax, DWORD PTR _myplr
	mov	ecx, eax
; Line 1332
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+19712]
; Line 1333
	cmp	eax, -1
	je	$L85493
	cmp	eax, 11					; 0000000bH
	je	$L85493
; Line 1334
	push	51					; 00000033H
; Line 1335
	jmp	$L85963
$L85505:
; Line 1340
	mov	eax, DWORD PTR _myplr
	mov	ecx, eax
; Line 1341
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+20448]
; Line 1342
	cmp	eax, -1
	je	$L85493
	cmp	eax, 11					; 0000000bH
	je	$L85493
; Line 1343
	push	53					; 00000035H
; Line 1344
	jmp	$L85963
$L85507:
; Line 1355
	mov	eax, DWORD PTR _myplr
	mov	ecx, eax
; Line 1357
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+20816]
	cmp	eax, -1
	je	$L85493
	cmp	eax, 11					; 0000000bH
	je	$L85493
; Line 1358
	push	54					; 00000036H
; Line 1359
	jmp	SHORT $L85963
$L85509:
; Line 1364
	cmp	DWORD PTR _automapflag, eax
	je	SHORT $L85493
	pop	ebx
; Line 1365
	jmp	_AutomapZoomIn
$L85511:
; Line 1369
	cmp	DWORD PTR _automapflag, eax
	je	SHORT $L85493
	pop	ebx
; Line 1370
	jmp	_AutomapZoomOut
$L85513:
; Line 1374
	mov	eax, DWORD PTR _myplr
	mov	ecx, eax
; Line 1375
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+18608]
; Line 1376
	cmp	eax, -1
	je	SHORT $L85493
	cmp	eax, 11					; 0000000bH
	je	SHORT $L85493
; Line 1377
	push	48					; 00000030H
; Line 1378
	jmp	SHORT $L85963
$L85515:
; Line 1383
	mov	eax, DWORD PTR _myplr
	mov	ecx, eax
; Line 1384
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+20080]
; Line 1385
	cmp	eax, -1
	je	SHORT $L85493
	cmp	eax, 11					; 0000000bH
	je	SHORT $L85493
; Line 1386
	push	52					; 00000034H
$L85963:
	pop	edx
	pop	ebx
$LABEL_72$85498:
; Line 1388
	jmp	@UseInvItem@8
$L85517:
; Line 1393
	cmp	BYTE PTR _stextflag, al
	jne	SHORT $L85493
; Line 1395
	xor	ecx, ecx
	cmp	DWORD PTR _sbookflag, eax
	mov	DWORD PTR _invflag, eax
	sete	cl
	mov	DWORD PTR _sbookflag, ecx
$L85493:
	pop	ebx
; Line 1567
	ret	0
$L85519:
; Line 1400
	cmp	BYTE PTR _stextflag, al
	jne	SHORT $L85493
; Line 1402
	xor	ecx, ecx
	cmp	DWORD PTR _chrflag, eax
	mov	DWORD PTR _questlog, eax
	sete	cl
; Line 1404
	cmp	ecx, eax
	mov	DWORD PTR _chrflag, ecx
	je	SHORT $LABEL_18$85523
	cmp	DWORD PTR _invflag, eax
	jne	SHORT $LABEL_18$85523
$LABEL_24$85524:
; Line 1426
	mov	ecx, DWORD PTR _MouseX
	cmp	ecx, 480				; 000001e0H
	jge	SHORT $L85493
; Line 1427
	mov	eax, DWORD PTR _MouseY
; Line 1428
	cmp	eax, 352				; 00000160H
	mov	edx, eax
	jge	SHORT $L85493
; Line 1429
	lea	eax, DWORD PTR [ecx+160]
$LABEL_27$85533:
; Line 1440
	push	edx
	push	eax
	call	DWORD PTR __imp__SetCursorPos@8
	pop	ebx
; Line 1567
	ret	0
$L85525:
	pop	ebx
; Line 1411
	jmp	_IncreaseGamma
$L85526:
	pop	ebx
; Line 1415
	jmp	_DecreaseGamma
$L85527:
; Line 1419
	cmp	BYTE PTR _stextflag, al
	jne	SHORT $L85493
; Line 1422
	xor	ecx, ecx
	cmp	DWORD PTR _invflag, eax
	mov	DWORD PTR _sbookflag, eax
	sete	cl
; Line 1424
	cmp	ecx, eax
	mov	DWORD PTR _invflag, ecx
	je	SHORT $LABEL_24$85524
	cmp	DWORD PTR _chrflag, eax
	jne	SHORT $LABEL_24$85524
$LABEL_18$85523:
; Line 1435
	mov	ecx, DWORD PTR _MouseX
	cmp	ecx, 160				; 000000a0H
	jle	$L85493
; Line 1436
	mov	eax, DWORD PTR _MouseY
; Line 1437
	cmp	eax, 352				; 00000160H
	mov	edx, eax
	jge	$L85493
; Line 1438
	lea	eax, DWORD PTR [ecx-160]
	jmp	SHORT $LABEL_27$85533
$L85537:
; Line 1448
	cmp	BYTE PTR _stextflag, al
	jne	$L85493
; Line 1450
	cmp	DWORD PTR _questlog, eax
	mov	DWORD PTR _chrflag, eax
	je	SHORT $L85539
; Line 1451
	mov	DWORD PTR _questlog, eax
	pop	ebx
; Line 1567
	ret	0
$L85539:
	pop	ebx
; Line 1453
	jmp	_StartQuestlog
$L85541:
; Line 1458
	cmp	BYTE PTR _stextflag, al
	jne	$L85493
; Line 1460
	cmp	DWORD PTR _spselflag, eax
	mov	DWORD PTR _invflag, eax
	je	SHORT $L85543
; Line 1461
	mov	DWORD PTR _spselflag, eax
; Line 1462
	jmp	SHORT $L85544
$L85543:
; Line 1463
	call	_DoSpeedBook
$L85544:
; Line 1464
	xor	ecx, ecx
	pop	ebx
	jmp	@track_repeat_walk@4
$L85545:
; Line 1468
	mov	edx, OFFSET FLAT:_gszVersionNumber
	jmp	SHORT $L85965
$L85546:
; Line 1471
	mov	edx, OFFSET FLAT:_gszProductName
$L85965:
	mov	ecx, DWORD PTR _myplr
	xor	eax, eax
	inc	eax
	pop	ebx
	shl	eax, cl
	mov	ecx, eax
	jmp	@NetSendCmdString@8
$L85547:
; Line 1475
	xor	ecx, ecx
	cmp	DWORD PTR _zoomflag, eax
	pop	ebx
	sete	cl
	mov	DWORD PTR _zoomflag, ecx
; Line 1567
	ret	0
$L85487:
	pop	ebx
; Line 1291
	jmp	_diablo_pause_game
$L85966:
; Line 1567
	DD	$L85496
	DD	$L85499
	DD	$L85501
	DD	$L85503
	DD	$L85505
	DD	$L85507
	DD	$L85509
	DD	$L85511
	DD	$L85513
	DD	$L85515
	DD	$L85517
	DD	$L85519
	DD	$L85525
	DD	$L85526
	DD	$L85527
	DD	$L85537
	DD	$L85541
	DD	$L85545
	DD	$L85547
	DD	$L85546
	DD	$L85493
$L85961:
	DB	0
	DB	20					; 00000014H
	DB	1
	DB	2
	DB	3
	DB	4
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	5
	DB	6
	DB	20					; 00000014H
	DB	7
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	0
	DB	8
	DB	1
	DB	2
	DB	3
	DB	9
	DB	4
	DB	5
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	6
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	8
	DB	20					; 00000014H
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	20					; 00000014H
	DB	14					; 0000000eH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	15					; 0000000fH
	DB	20					; 00000014H
	DB	16					; 00000010H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	17					; 00000011H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	18					; 00000012H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	9
	DB	7
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	20					; 00000014H
	DB	14					; 0000000eH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	15					; 0000000fH
	DB	20					; 00000014H
	DB	16					; 00000010H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	18					; 00000012H
@PressChar@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GDKD@Levels?2TownData?2Town?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@	; `string'
PUBLIC	??_C@_0BJ@KFLB@Levels?2TownData?2Town?4MIN?$AA@	; `string'
PUBLIC	??_C@_0BK@EGLC@Levels?2TownData?2TownS?4CEL?$AA@ ; `string'
PUBLIC	??_C@_0BF@KHKI@Levels?2L1Data?2L1?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@NHFN@Levels?2L1Data?2L1?4TIL?$AA@	; `string'
PUBLIC	??_C@_0BF@GBLK@Levels?2L1Data?2L1?4MIN?$AA@	; `string'
PUBLIC	??_C@_0BG@BCHG@Levels?2L1Data?2L1S?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@PBPI@Levels?2L2Data?2L2?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@IBAN@Levels?2L2Data?2L2?4TIL?$AA@	; `string'
PUBLIC	??_C@_0BF@DHOK@Levels?2L2Data?2L2?4MIN?$AA@	; `string'
PUBLIC	??_C@_0BG@FPCA@Levels?2L2Data?2L2S?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@DMDH@Levels?2L3Data?2L3?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@EMMC@Levels?2L3Data?2L3?4TIL?$AA@	; `string'
PUBLIC	??_C@_0BF@PKCF@Levels?2L3Data?2L3?4MIN?$AA@	; `string'
PUBLIC	??_C@_0BF@FNFI@Levels?2L4Data?2L4?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@CNKN@Levels?2L4Data?2L4?4TIL?$AA@	; `string'
PUBLIC	??_C@_0BF@JLEK@Levels?2L4Data?2L4?4MIN?$AA@	; `string'
PUBLIC	??_C@_0L@BPJH@LoadLvlGFX?$AA@			; `string'
PUBLIC	_LoadLvlGFX
EXTRN	@LoadFileInMem@8:NEAR
;	COMDAT ??_C@_0L@BPJH@LoadLvlGFX?$AA@
_DATA	SEGMENT
??_C@_0L@BPJH@LoadLvlGFX?$AA@ DB 'LoadLvlGFX', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@FNFI@Levels?2L4Data?2L4?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@FNFI@Levels?2L4Data?2L4?4CEL?$AA@ DB 'Levels\L4Data\L4.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CNKN@Levels?2L4Data?2L4?4TIL?$AA@
_DATA	SEGMENT
??_C@_0BF@CNKN@Levels?2L4Data?2L4?4TIL?$AA@ DB 'Levels\L4Data\L4.TIL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JLEK@Levels?2L4Data?2L4?4MIN?$AA@
_DATA	SEGMENT
??_C@_0BF@JLEK@Levels?2L4Data?2L4?4MIN?$AA@ DB 'Levels\L4Data\L4.MIN', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DMDH@Levels?2L3Data?2L3?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@DMDH@Levels?2L3Data?2L3?4CEL?$AA@ DB 'Levels\L3Data\L3.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@EMMC@Levels?2L3Data?2L3?4TIL?$AA@
_DATA	SEGMENT
??_C@_0BF@EMMC@Levels?2L3Data?2L3?4TIL?$AA@ DB 'Levels\L3Data\L3.TIL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@PKCF@Levels?2L3Data?2L3?4MIN?$AA@
_DATA	SEGMENT
??_C@_0BF@PKCF@Levels?2L3Data?2L3?4MIN?$AA@ DB 'Levels\L3Data\L3.MIN', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@PBPI@Levels?2L2Data?2L2?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@PBPI@Levels?2L2Data?2L2?4CEL?$AA@ DB 'Levels\L2Data\L2.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@IBAN@Levels?2L2Data?2L2?4TIL?$AA@
_DATA	SEGMENT
??_C@_0BF@IBAN@Levels?2L2Data?2L2?4TIL?$AA@ DB 'Levels\L2Data\L2.TIL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DHOK@Levels?2L2Data?2L2?4MIN?$AA@
_DATA	SEGMENT
??_C@_0BF@DHOK@Levels?2L2Data?2L2?4MIN?$AA@ DB 'Levels\L2Data\L2.MIN', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@FPCA@Levels?2L2Data?2L2S?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BG@FPCA@Levels?2L2Data?2L2S?4CEL?$AA@ DB 'Levels\L2Data\L2S.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@KHKI@Levels?2L1Data?2L1?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@KHKI@Levels?2L1Data?2L1?4CEL?$AA@ DB 'Levels\L1Data\L1.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NHFN@Levels?2L1Data?2L1?4TIL?$AA@
_DATA	SEGMENT
??_C@_0BF@NHFN@Levels?2L1Data?2L1?4TIL?$AA@ DB 'Levels\L1Data\L1.TIL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@GBLK@Levels?2L1Data?2L1?4MIN?$AA@
_DATA	SEGMENT
??_C@_0BF@GBLK@Levels?2L1Data?2L1?4MIN?$AA@ DB 'Levels\L1Data\L1.MIN', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BCHG@Levels?2L1Data?2L1S?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BG@BCHG@Levels?2L1Data?2L1S?4CEL?$AA@ DB 'Levels\L1Data\L1S.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@GDKD@Levels?2TownData?2Town?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BJ@GDKD@Levels?2TownData?2Town?4CEL?$AA@ DB 'Levels\TownData\Town.'
	DB	'CEL', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@
_DATA	SEGMENT
??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@ DB 'Levels\TownData\Town.'
	DB	'TIL', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@KFLB@Levels?2TownData?2Town?4MIN?$AA@
_DATA	SEGMENT
??_C@_0BJ@KFLB@Levels?2TownData?2Town?4MIN?$AA@ DB 'Levels\TownData\Town.'
	DB	'MIN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@EGLC@Levels?2TownData?2TownS?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BK@EGLC@Levels?2TownData?2TownS?4CEL?$AA@ DB 'Levels\TownData\Town'
	DB	'S.CEL', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _LoadLvlGFX
_TEXT	SEGMENT
_LoadLvlGFX PROC NEAR					; COMDAT
; Line 1579
	movzx	eax, BYTE PTR _leveltype
	sub	eax, 0
	je	$L85554
	dec	eax
	je	$L85559
	dec	eax
	je	SHORT $L85564
	dec	eax
	je	SHORT $L85569
	dec	eax
	je	SHORT $L85573
; Line 1611
	push	OFFSET FLAT:??_C@_0L@BPJH@LoadLvlGFX?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
; Line 1614
	ret	0
$L85573:
; Line 1605
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@FNFI@Levels?2L4Data?2L4?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1606
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@CNKN@Levels?2L4Data?2L4?4TIL?$AA@ ; `string'
	mov	DWORD PTR _pDungeonCels, eax
	call	@LoadFileInMem@8
; Line 1607
	mov	ecx, OFFSET FLAT:??_C@_0BF@JLEK@Levels?2L4Data?2L4?4MIN?$AA@ ; `string'
; Line 1609
	jmp	SHORT $L85973
$L85569:
; Line 1599
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@DMDH@Levels?2L3Data?2L3?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1600
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@EMMC@Levels?2L3Data?2L3?4TIL?$AA@ ; `string'
	mov	DWORD PTR _pDungeonCels, eax
	call	@LoadFileInMem@8
; Line 1601
	mov	ecx, OFFSET FLAT:??_C@_0BF@PKCF@Levels?2L3Data?2L3?4MIN?$AA@ ; `string'
; Line 1603
	jmp	SHORT $L85974
$L85564:
; Line 1593
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@PBPI@Levels?2L2Data?2L2?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1594
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@IBAN@Levels?2L2Data?2L2?4TIL?$AA@ ; `string'
	mov	DWORD PTR _pDungeonCels, eax
	call	@LoadFileInMem@8
; Line 1595
	mov	ecx, OFFSET FLAT:??_C@_0BF@DHOK@Levels?2L2Data?2L2?4MIN?$AA@ ; `string'
$L85973:
	xor	edx, edx
	mov	DWORD PTR _pMegaTiles, eax
	call	@LoadFileInMem@8
; Line 1596
	mov	ecx, OFFSET FLAT:??_C@_0BG@FPCA@Levels?2L2Data?2L2S?4CEL?$AA@ ; `string'
; Line 1597
	jmp	SHORT $L85970
$L85559:
; Line 1587
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@KHKI@Levels?2L1Data?2L1?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1588
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@NHFN@Levels?2L1Data?2L1?4TIL?$AA@ ; `string'
	mov	DWORD PTR _pDungeonCels, eax
	call	@LoadFileInMem@8
; Line 1589
	mov	ecx, OFFSET FLAT:??_C@_0BF@GBLK@Levels?2L1Data?2L1?4MIN?$AA@ ; `string'
$L85974:
	xor	edx, edx
	mov	DWORD PTR _pMegaTiles, eax
	call	@LoadFileInMem@8
; Line 1590
	mov	ecx, OFFSET FLAT:??_C@_0BG@BCHG@Levels?2L1Data?2L1S?4CEL?$AA@ ; `string'
; Line 1591
	jmp	SHORT $L85970
$L85554:
; Line 1581
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@GDKD@Levels?2TownData?2Town?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1582
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@BDFG@Levels?2TownData?2Town?4TIL?$AA@ ; `string'
	mov	DWORD PTR _pDungeonCels, eax
	call	@LoadFileInMem@8
; Line 1583
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BJ@KFLB@Levels?2TownData?2Town?4MIN?$AA@ ; `string'
	mov	DWORD PTR _pMegaTiles, eax
	call	@LoadFileInMem@8
; Line 1584
	mov	ecx, OFFSET FLAT:??_C@_0BK@EGLC@Levels?2TownData?2TownS?4CEL?$AA@ ; `string'
$L85970:
	xor	edx, edx
	mov	DWORD PTR _pLevelPieces, eax
	call	@LoadFileInMem@8
	mov	DWORD PTR _level_special_cel, eax
; Line 1614
	ret	0
_LoadLvlGFX ENDP
_TEXT	ENDS
PUBLIC	_LoadAllGFX
EXTRN	_IncProgress:NEAR
EXTRN	_InitMissileGFX:NEAR
EXTRN	@DiabloAllocPtr@4:NEAR
EXTRN	_InitObjectGFX:NEAR
; Function compile flags: /Ogsy
;	COMDAT _LoadAllGFX
_TEXT	SEGMENT
_LoadAllGFX PROC NEAR					; COMDAT
; Line 1618
	mov	ecx, 1048576				; 00100000H
	call	@DiabloAllocPtr@4
	mov	DWORD PTR _pSpeedCels, eax
; Line 1619
	call	_IncProgress
; Line 1620
	call	_IncProgress
; Line 1621
	call	_InitObjectGFX
; Line 1622
	call	_IncProgress
; Line 1623
	call	_InitMissileGFX
; Line 1624
	jmp	_IncProgress
_LoadAllGFX ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@OMLO@CreateLevel?$AA@			; `string'
PUBLIC	@CreateLevel@4
EXTRN	@CreateL4Dungeon@8:NEAR
EXTRN	@CreateL5Dungeon@8:NEAR
EXTRN	@LoadRndLvlPal@4:NEAR
EXTRN	@CreateTown@4:NEAR
EXTRN	_InitTownTriggers:NEAR
EXTRN	_InitL1Triggers:NEAR
EXTRN	_InitL2Triggers:NEAR
EXTRN	_InitL3Triggers:NEAR
EXTRN	_InitL4Triggers:NEAR
EXTRN	_Freeupstairs:NEAR
EXTRN	@CreateL2Dungeon@8:NEAR
EXTRN	@CreateL3Dungeon@8:NEAR
EXTRN	_currlevel:BYTE
;	COMDAT ??_C@_0M@OMLO@CreateLevel?$AA@
_DATA	SEGMENT
??_C@_0M@OMLO@CreateLevel?$AA@ DB 'CreateLevel', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @CreateLevel@4
_TEXT	SEGMENT
@CreateLevel@4 PROC NEAR				; COMDAT
; _lvldir$ = ecx
; Line 1631
	movzx	eax, BYTE PTR _leveltype
	sub	eax, 0
	mov	edx, ecx
	je	$L85588
	dec	eax
	je	SHORT $L85589
	dec	eax
	je	SHORT $L85590
	dec	eax
	je	SHORT $L85591
	dec	eax
	je	SHORT $L85592
; Line 1662
	push	OFFSET FLAT:??_C@_0M@OMLO@CreateLevel?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
; Line 1667
	ret	0
$L85592:
	movzx	eax, BYTE PTR _currlevel
	mov	ecx, DWORD PTR _glSeedTbl[eax*4]
	call	@CreateL4Dungeon@8
	call	_InitL4Triggers
	call	_Freeupstairs
	push	4
$L85981:
; Line 1659
	pop	ecx
; Line 1660
	jmp	SHORT $L85585
$L85591:
; Line 1650
	movzx	eax, BYTE PTR _currlevel
	mov	ecx, DWORD PTR _glSeedTbl[eax*4]
	call	@CreateL3Dungeon@8
; Line 1651
	call	_InitL3Triggers
; Line 1652
	call	_Freeupstairs
; Line 1653
	push	3
; Line 1654
	jmp	SHORT $L85981
$L85590:
; Line 1644
	movzx	eax, BYTE PTR _currlevel
	mov	ecx, DWORD PTR _glSeedTbl[eax*4]
	call	@CreateL2Dungeon@8
; Line 1645
	call	_InitL2Triggers
; Line 1646
	call	_Freeupstairs
; Line 1647
	push	2
; Line 1648
	jmp	SHORT $L85981
$L85589:
; Line 1638
	movzx	eax, BYTE PTR _currlevel
	mov	ecx, DWORD PTR _glSeedTbl[eax*4]
	call	@CreateL5Dungeon@8
; Line 1639
	call	_InitL1Triggers
; Line 1640
	call	_Freeupstairs
; Line 1641
	xor	ecx, ecx
	inc	ecx
; Line 1642
	jmp	SHORT $L85585
$L85588:
; Line 1633
	mov	ecx, edx
	call	@CreateTown@4
; Line 1634
	call	_InitTownTriggers
; Line 1635
	xor	ecx, ecx
$L85585:
; Line 1666
	jmp	@LoadRndLvlPal@4
@CreateLevel@4 ENDP
_TEXT	ENDS
PUBLIC	@LoadGameLevel@8
EXTRN	_dFlags:BYTE
EXTRN	_setlvlnum:BYTE
EXTRN	_setlevel:BYTE
EXTRN	_FillSolidBlockTbls:NEAR
EXTRN	@SyncInitPlrPos@4:NEAR
EXTRN	_SetDungeonMicros:NEAR
EXTRN	_PlayDungMsgs:NEAR
EXTRN	_InitThemes:NEAR
EXTRN	_HoldThemeRooms:NEAR
EXTRN	_SyncPortals:NEAR
EXTRN	_InitDead:NEAR
EXTRN	_GetPortalLvlPos:NEAR
EXTRN	_CreateThemeRooms:NEAR
EXTRN	_quests:BYTE
EXTRN	_MakeLightTable:NEAR
EXTRN	_InitLightMax:NEAR
EXTRN	_InitLighting:NEAR
EXTRN	_InitHelp:NEAR
EXTRN	@PlaySFX@4:NEAR
EXTRN	_ProcessLightList:NEAR
EXTRN	_SavePreLighting:NEAR
EXTRN	_InitVision:NEAR
EXTRN	_GetReturnLvlPos:NEAR
EXTRN	_ResyncMPQuests:NEAR
EXTRN	_ResyncQuests:NEAR
EXTRN	_ProcessVisionList:NEAR
EXTRN	_InitInv:NEAR
EXTRN	_LoadLevel:NEAR
EXTRN	_InitQuestText:NEAR
EXTRN	_InitTowners:NEAR
EXTRN	_InitItemGFX:NEAR
EXTRN	_InitItems:NEAR
EXTRN	_InitMissiles:NEAR
EXTRN	@SetRndSeed@4:NEAR
EXTRN	_GetRndSeed:NEAR
EXTRN	_LoadSetMap:NEAR
EXTRN	@InitPlayerGFX@4:NEAR
EXTRN	@InitPlrGFXMem@4:NEAR
EXTRN	@InitPlayer@8:NEAR
EXTRN	_InitMultiView:NEAR
EXTRN	@music_start@4:NEAR
EXTRN	_InitAutomapOnce:NEAR
EXTRN	_InitAutomap:NEAR
EXTRN	_InitObjects:NEAR
EXTRN	_DeltaLoadLevel:NEAR
EXTRN	_InitStores:NEAR
EXTRN	_SetupTownStores:NEAR
EXTRN	_InitLevelMonsters:NEAR
EXTRN	_GetLevelMTypes:NEAR
EXTRN	_InitMonsters:NEAR
EXTRN	_InitControlPan:NEAR
EXTRN	_dPlayer:BYTE
; Function compile flags: /Ogsy
;	COMDAT @LoadGameLevel@8
_TEXT	SEGMENT
_firstflag$ = -8
_lvldir$ = -4
@LoadGameLevel@8 PROC NEAR				; COMDAT
; _firstflag$ = ecx
; _lvldir$ = edx
; Line 1670
	push	ecx
	push	ecx
; Line 1674
	mov	eax, DWORD PTR _setseed
	push	ebx
	push	ebp
	xor	ebp, ebp
	mov	ebx, edx
	cmp	eax, ebp
	push	esi
	mov	DWORD PTR _lvldir$[esp+20], ebx
	mov	DWORD PTR _firstflag$[esp+20], ecx
	je	SHORT $L85603
; Line 1675
	movzx	ecx, BYTE PTR _currlevel
	mov	DWORD PTR _glSeedTbl[ecx*4], eax
$L85603:
; Line 1677
	call	_music_stop
; Line 1678
	xor	ecx, ecx
	inc	ecx
	call	@SetCursor_@4
; Line 1679
	movzx	eax, BYTE PTR _currlevel
	mov	ecx, DWORD PTR _glSeedTbl[eax*4]
	call	@SetRndSeed@4
; Line 1680
	call	_IncProgress
; Line 1681
	call	_MakeLightTable
; Line 1682
	call	_LoadLvlGFX
; Line 1683
	call	_IncProgress
; Line 1685
	cmp	DWORD PTR _firstflag$[esp+20], ebp
	je	SHORT $L85604
; Line 1686
	call	_InitInv
; Line 1687
	call	_InitItemGFX
; Line 1688
	call	_InitQuestText
; Line 1690
	xor	esi, esi
	cmp	BYTE PTR _gbMaxPlayers, 0
	jbe	SHORT $L85607
$L85605:
; Line 1691
	mov	ecx, esi
	call	@InitPlrGFXMem@4
	movzx	eax, BYTE PTR _gbMaxPlayers
	inc	esi
	cmp	esi, eax
	jl	SHORT $L85605
$L85607:
; Line 1693
	call	_InitStores
; Line 1694
	call	_InitAutomapOnce
; Line 1695
	call	_InitHelp
$L85604:
; Line 1698
	movzx	eax, BYTE PTR _currlevel
	mov	ecx, DWORD PTR _glSeedTbl[eax*4]
	call	@SetRndSeed@4
; Line 1700
	cmp	BYTE PTR _leveltype, 0
	jne	SHORT $L85608
; Line 1701
	call	_SetupTownStores
$L85608:
; Line 1703
	call	_IncProgress
; Line 1704
	call	_InitAutomap
; Line 1706
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85609
	cmp	ebx, 4
	je	SHORT $L85609
; Line 1707
	call	_InitLighting
; Line 1708
	call	_InitVision
$L85609:
	push	edi
; Line 1711
	call	_InitLevelMonsters
; Line 1712
	call	_IncProgress
; Line 1714
	cmp	BYTE PTR _setlevel, 0
	jne	$L85610
; Line 1715
	mov	ecx, ebx
	call	@CreateLevel@4
; Line 1716
	call	_IncProgress
; Line 1717
	call	_FillSolidBlockTbls
; Line 1718
	movzx	eax, BYTE PTR _currlevel
	mov	ecx, DWORD PTR _glSeedTbl[eax*4]
	call	@SetRndSeed@4
; Line 1720
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85611
; Line 1721
	call	_GetLevelMTypes
; Line 1722
	call	_InitThemes
; Line 1723
	call	_LoadAllGFX
; Line 1724
	jmp	SHORT $L85612
$L85611:
; Line 1725
	call	_InitMissileGFX
$L85612:
; Line 1728
	call	_IncProgress
; Line 1730
	cmp	ebx, 3
	jne	SHORT $L85613
; Line 1731
	call	_GetReturnLvlPos
$L85613:
; Line 1732
	cmp	ebx, 5
	jne	SHORT $L85614
; Line 1733
	call	_GetPortalLvlPos
$L85614:
; Line 1735
	call	_IncProgress
	mov	edi, OFFSET FLAT:_plr+52
	mov	esi, 21720				; 000054d8H
$L85615:
; Line 1738
	cmp	BYTE PTR [edi-23], 0
	je	SHORT $L85616
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [edi]
	jne	SHORT $L85616
; Line 1739
	mov	ecx, ebp
	call	@InitPlayerGFX@4
; Line 1740
	cmp	ebx, 4
	je	SHORT $L85616
; Line 1741
	mov	edx, DWORD PTR _firstflag$[esp+24]
	mov	ecx, ebp
	call	@InitPlayer@8
$L85616:
	add	edi, esi
	inc	ebp
	cmp	edi, OFFSET FLAT:_plr+86932
	jl	SHORT $L85615
; Line 1745
	call	_PlayDungMsgs
; Line 1746
	call	_InitMultiView
; Line 1747
	call	_IncProgress
; Line 1750
	movzx	eax, BYTE PTR _gbMaxPlayers
	mov	bl, BYTE PTR _currlevel
	xor	edx, edx
	test	eax, eax
	jle	SHORT $L85622
; Line 1745
	xor	ecx, ecx
$L85620:
; Line 1751
	cmp	BYTE PTR _plr[ecx+29], 0
	je	SHORT $L85621
; Line 1752
	test	edx, edx
	jne	SHORT $L85985
	movzx	edx, bl
	cmp	BYTE PTR _plr[edx+ecx+500], 0
	jne	SHORT $L85985
	xor	edx, edx
	jmp	SHORT $L85621
$L85985:
	xor	edx, edx
	inc	edx
$L85621:
	add	ecx, esi
	dec	eax
	jne	SHORT $L85620
$L85622:
; Line 1755
	movzx	eax, bl
	mov	ecx, DWORD PTR _glSeedTbl[eax*4]
	call	@SetRndSeed@4
; Line 1757
	cmp	BYTE PTR _leveltype, 0
	je	$L85624
; Line 1758
	cmp	DWORD PTR _firstflag$[esp+24], 0
	jne	SHORT $L85626
	cmp	DWORD PTR _lvldir$[esp+24], 4
	je	SHORT $L85626
	mov	eax, DWORD PTR _myplr
	movzx	ecx, BYTE PTR _currlevel
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+ecx+500], 0
	je	SHORT $L85626
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85626
; Line 1777
	call	_InitMonsters
; Line 1778
	call	_InitMissiles
; Line 1779
	call	_InitDead
; Line 1780
	call	_IncProgress
; Line 1781
	call	_LoadLevel
; Line 1782
	jmp	$L85637
$L85626:
; Line 1759
	call	_HoldThemeRooms
; Line 1760
	call	_GetRndSeed
	movzx	ecx, BYTE PTR _currlevel
	mov	DWORD PTR _glMid1Seed[ecx*4], eax
; Line 1761
	call	_InitMonsters
; Line 1762
	call	_GetRndSeed
	movzx	ecx, BYTE PTR _currlevel
	mov	DWORD PTR _glMid2Seed[ecx*4], eax
; Line 1763
	call	_InitObjects
; Line 1764
	call	_InitItems
; Line 1765
	call	_CreateThemeRooms
; Line 1766
	call	_GetRndSeed
	movzx	ecx, BYTE PTR _currlevel
	mov	DWORD PTR _glMid3Seed[ecx*4], eax
; Line 1767
	call	_InitMissiles
; Line 1768
	call	_InitDead
; Line 1769
	call	_GetRndSeed
	movzx	ecx, BYTE PTR _currlevel
; Line 1771
	cmp	BYTE PTR _gbMaxPlayers, 1
	mov	DWORD PTR _glEndSeed[ecx*4], eax
	je	SHORT $L85627
; Line 1772
	call	_DeltaLoadLevel
$L85627:
; Line 1774
	call	_IncProgress
; Line 1775
	call	_SavePreLighting
; Line 1784
	jmp	SHORT $L85629
$L85624:
; Line 1785
	mov	ecx, OFFSET FLAT:_dFlags
$L85630:
; Line 1786
	xor	eax, eax
$L85633:
; Line 1787
	or	BYTE PTR [ecx+eax], 64			; 00000040H
	inc	eax
	cmp	eax, 112				; 00000070H
	jl	SHORT $L85633
	add	ecx, 112				; 00000070H
	cmp	ecx, OFFSET FLAT:_dFlags+12544
	jl	SHORT $L85630
; Line 1790
	call	_InitTowners
; Line 1791
	call	_InitItems
; Line 1792
	call	_InitMissiles
; Line 1793
	call	_IncProgress
; Line 1795
	cmp	DWORD PTR _firstflag$[esp+24], 0
	jne	SHORT $L85636
	cmp	DWORD PTR _lvldir$[esp+24], 4
	je	SHORT $L85636
	mov	eax, DWORD PTR _myplr
	movzx	ecx, BYTE PTR _currlevel
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+ecx+500], 0
	je	SHORT $L85636
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L86002
; Line 1796
	call	_LoadLevel
$L85636:
; Line 1797
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85637
$L86002:
; Line 1798
	call	_DeltaLoadLevel
$L85637:
; Line 1800
	call	_IncProgress
$L85629:
; Line 1802
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85638
; Line 1803
	call	_ResyncQuests
; Line 1804
	jmp	$L85640
$L85638:
; Line 1805
	call	_ResyncMPQuests
; Line 1806
	jmp	$L85640
$L85610:
; Line 1808
	mov	ecx, 1048576				; 00100000H
	call	@DiabloAllocPtr@4
	mov	DWORD PTR _pSpeedCels, eax
; Line 1809
	call	_LoadSetMap
; Line 1810
	call	_IncProgress
; Line 1811
	call	_GetLevelMTypes
; Line 1812
	call	_InitMonsters
; Line 1813
	call	_InitMissileGFX
; Line 1814
	call	_InitDead
; Line 1815
	call	_FillSolidBlockTbls
; Line 1816
	call	_IncProgress
; Line 1818
	cmp	ebx, 5
	jne	SHORT $L85641
; Line 1819
	call	_GetPortalLvlPos
$L85641:
; Line 1821
	mov	edi, OFFSET FLAT:_plr+52
$L85642:
; Line 1822
	cmp	BYTE PTR [edi-23], 0
	je	SHORT $L85643
	movzx	eax, BYTE PTR _currlevel
	cmp	eax, DWORD PTR [edi]
	jne	SHORT $L85643
; Line 1823
	mov	ecx, ebp
	call	@InitPlayerGFX@4
; Line 1824
	cmp	ebx, 4
	je	SHORT $L85643
; Line 1825
	mov	edx, DWORD PTR _firstflag$[esp+24]
	mov	ecx, ebp
	call	@InitPlayer@8
$L85643:
	add	edi, 21720				; 000054d8H
	inc	ebp
	cmp	edi, OFFSET FLAT:_plr+86932
	jl	SHORT $L85642
; Line 1829
	call	_InitMultiView
; Line 1830
	call	_IncProgress
; Line 1832
	cmp	DWORD PTR _firstflag$[esp+24], 0
	jne	SHORT $L85648
	cmp	ebx, 4
	je	SHORT $L85648
	mov	eax, DWORD PTR _myplr
	movzx	ecx, BYTE PTR _setlvlnum
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+ecx+517], 0
	je	SHORT $L85648
; Line 1836
	call	_LoadLevel
	jmp	SHORT $L85649
$L85648:
; Line 1833
	call	_InitItems
; Line 1834
	call	_SavePreLighting
$L85649:
; Line 1839
	call	_InitMissiles
; Line 1840
	call	_IncProgress
$L85640:
; Line 1843
	call	_SyncPortals
; Line 1845
	xor	ebx, ebx
	mov	esi, OFFSET FLAT:_plr+52
	pop	edi
$L85650:
; Line 1846
	cmp	BYTE PTR [esi-23], 0
	je	SHORT $L85651
	movzx	eax, BYTE PTR _currlevel
	cmp	DWORD PTR [esi], eax
	jne	SHORT $L85651
	cmp	BYTE PTR [esi+267], 0
	je	SHORT $L85654
	cmp	ebx, DWORD PTR _myplr
	jne	SHORT $L85651
$L85654:
; Line 1847
	cmp	DWORD PTR [esi+356], 0
	jle	SHORT $L85655
; Line 1848
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85656
; Line 1849
	mov	ecx, DWORD PTR [esi+4]
	mov	al, bl
	inc	al
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR _dPlayer[ecx+edx], al
; Line 1850
	jmp	SHORT $L85651
$L85656:
; Line 1851
	mov	ecx, ebx
	call	@SyncInitPlrPos@4
; Line 1852
	jmp	SHORT $L85651
$L85655:
; Line 1853
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	imul	eax, 112				; 00000070H
	lea	eax, DWORD PTR _dFlags[eax+ecx]
	or	BYTE PTR [eax], 4
$L85651:
	add	esi, 21720				; 000054d8H
	inc	ebx
	cmp	esi, OFFSET FLAT:_plr+86932
	jl	SHORT $L85650
; Line 1858
	cmp	BYTE PTR _leveltype, 0
	pop	esi
	pop	ebp
	pop	ebx
	je	SHORT $L85659
; Line 1859
	call	_SetDungeonMicros
$L85659:
; Line 1861
	call	_InitLightMax
; Line 1862
	call	_IncProgress
; Line 1863
	call	_IncProgress
; Line 1865
	cmp	DWORD PTR _firstflag$[esp+8], 0
	je	SHORT $L85660
; Line 1866
	call	_InitControlPan
; Line 1867
	call	_IncProgress
$L85660:
; Line 1869
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85661
; Line 1870
	call	_ProcessLightList
; Line 1871
	call	_ProcessVisionList
$L85661:
; Line 1874
	movzx	ecx, BYTE PTR _leveltype
	call	@music_start@4
$L85663:
; Line 1876
	call	_IncProgress
	test	eax, eax
	je	SHORT $L85663
; Line 1879
	cmp	BYTE PTR _setlevel, 0
	je	SHORT $L85665
	cmp	BYTE PTR _setlvlnum, 1
	jne	SHORT $L85665
	cmp	BYTE PTR _quests+290, 2
	jne	SHORT $L85665
; Line 1880
	mov	ecx, 849				; 00000351H
; Line 1881
	add	esp, 8
	jmp	@PlaySFX@4
$L85665:
	pop	ecx
	pop	ecx
	ret	0
@LoadGameLevel@8 ENDP
_TEXT	ENDS
PUBLIC	_game_logic
PUBLIC	@timeout_cursor@4
EXTRN	_multi_handle_delta:NEAR
; Function compile flags: /Ogsy
;	COMDAT @game_loop@4
_TEXT	SEGMENT
@game_loop@4 PROC NEAR					; COMDAT
; _bStartup$ = ecx
; Line 1890
	neg	ecx
	sbb	ecx, ecx
	push	esi
	and	ecx, 57					; 00000039H
	add	ecx, 3
	mov	esi, ecx
; Line 1892
	je	SHORT $L86013
$L85671:
	dec	esi
; Line 1893
	call	_multi_handle_delta
; Line 1897
	xor	ecx, ecx
	test	eax, eax
	je	SHORT $L86012
	call	@timeout_cursor@4
; Line 1898
	call	_game_logic
; Line 1900
	cmp	DWORD PTR _gbRunGame, 0
	je	SHORT $L86013
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L86013
	xor	ecx, ecx
	inc	ecx
	call	@nthread_has_500ms_passed@4
	test	eax, eax
	je	SHORT $L86013
; Line 1892
	test	esi, esi
	jne	SHORT $L85671
$L86013:
	pop	esi
; Line 1903
	ret	0
$L86012:
	inc	ecx
	pop	esi
	jmp	@timeout_cursor@4
@game_loop@4 ENDP
_TEXT	ENDS
EXTRN	_ProcessPlayers:NEAR
EXTRN	_ClearPlrMsg:NEAR
EXTRN	_CheckCursMove:NEAR
EXTRN	_CheckQuests:NEAR
EXTRN	_sound_update:NEAR
EXTRN	_ProcessMonsters:NEAR
EXTRN	_ProcessTowners:NEAR
EXTRN	_track_process:NEAR
EXTRN	_CheckTriggers:NEAR
EXTRN	@pfile_update@4:NEAR
EXTRN	_ProcessMissiles:NEAR
EXTRN	_ProcessItems:NEAR
EXTRN	_ProcessObjects:NEAR
; Function compile flags: /Ogsy
;	COMDAT _game_logic
_TEXT	SEGMENT
_game_logic PROC NEAR					; COMDAT
; Line 1908
	mov	eax, DWORD PTR _PauseMode
	push	2
	pop	ecx
	cmp	eax, ecx
	je	SHORT $L85681
; Line 1909
	cmp	eax, 1
	jne	SHORT $L85679
; Line 1910
	mov	DWORD PTR _PauseMode, ecx
$L85679:
; Line 1911
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85680
	call	_gmenu_exception
	test	eax, eax
	je	SHORT $L85680
; Line 1912
	or	DWORD PTR _drawpanflag, 1
$L85681:
; Line 1946
	ret	0
$L85680:
; Line 1914
	call	_gmenu_exception
	test	eax, eax
	jne	SHORT $L85682
	cmp	DWORD PTR _sgnTimeoutCurs, eax
	jne	SHORT $L85682
; Line 1915
	call	_CheckCursMove
; Line 1916
	call	_track_process
$L85682:
; Line 1918
	cmp	DWORD PTR _gbProcessPlayers, 0
	je	SHORT $L85683
; Line 1919
	call	_ProcessPlayers
$L85683:
; Line 1920
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85684
; Line 1921
	call	_ProcessMonsters
; Line 1922
	call	_ProcessObjects
; Line 1923
	call	_ProcessMissiles
; Line 1924
	call	_ProcessItems
; Line 1925
	call	_ProcessLightList
; Line 1926
	call	_ProcessVisionList
; Line 1927
	jmp	SHORT $L85685
$L85684:
; Line 1928
	call	_ProcessTowners
; Line 1929
	call	_ProcessItems
; Line 1930
	call	_ProcessMissiles
$L85685:
; Line 1938
	call	_sound_update
; Line 1939
	call	_ClearPlrMsg
; Line 1940
	call	_CheckTriggers
; Line 1941
	call	_CheckQuests
; Line 1942
	or	DWORD PTR _drawpanflag, 1
; Line 1943
	xor	ecx, ecx
	jmp	@pfile_update@4
_game_logic ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@OPHH@?9?9?5Network?5timeout?5?9?9?$AA@ ; `string'
PUBLIC	??_C@_0BK@LBKJ@?9?9?5Waiting?5for?5players?5?9?9?$AA@ ; `string'
EXTRN	_multi_net_ping:NEAR
;	COMDAT ??_C@_0BG@OPHH@?9?9?5Network?5timeout?5?9?9?$AA@
_DATA	SEGMENT
??_C@_0BG@OPHH@?9?9?5Network?5timeout?5?9?9?$AA@ DB '-- Network timeout -'
	DB	'-', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@LBKJ@?9?9?5Waiting?5for?5players?5?9?9?$AA@
_DATA	SEGMENT
??_C@_0BK@LBKJ@?9?9?5Waiting?5for?5players?5?9?9?$AA@ DB '-- Waiting for '
	DB	'players --', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @timeout_cursor@4
_TEXT	SEGMENT
@timeout_cursor@4 PROC NEAR				; COMDAT
; _bTimeout$ = ecx
; Line 1954
	test	ecx, ecx
	je	SHORT $L85689
; Line 1955
	cmp	DWORD PTR _sgnTimeoutCurs, 0
	jne	SHORT $L85690
	cmp	BYTE PTR _sgbMouseDown, 0
	jne	SHORT $L85690
; Line 1956
	mov	eax, DWORD PTR _pcurs
	mov	DWORD PTR _sgnTimeoutCurs, eax
; Line 1957
	call	_multi_net_ping
; Line 1958
	call	_ClearPanel
; Line 1959
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BG@OPHH@?9?9?5Network?5timeout?5?9?9?$AA@ ; `string'
	inc	edx
	call	@AddPanelString@8
; Line 1960
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BK@LBKJ@?9?9?5Waiting?5for?5players?5?9?9?$AA@ ; `string'
	inc	edx
	call	@AddPanelString@8
; Line 1961
	push	11					; 0000000bH
	pop	ecx
	call	@SetCursor_@4
; Line 1962
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
$L85690:
; Line 1964
	xor	ecx, ecx
	inc	ecx
	jmp	@scrollrt_draw_game_screen@4
$L85689:
; Line 1965
	mov	ecx, DWORD PTR _sgnTimeoutCurs
	test	ecx, ecx
	je	SHORT $L85694
; Line 1966
	call	@SetCursor_@4
; Line 1967
	and	DWORD PTR _sgnTimeoutCurs, 0
; Line 1968
	call	_ClearPanel
; Line 1969
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
$L85694:
; Line 1971
	ret	0
@timeout_cursor@4 ENDP
_TEXT	ENDS
EXTRN	_lighting_color_cycling:NEAR
EXTRN	_palette_update_caves:NEAR
EXTRN	_palette_get_colour_cycling:NEAR
; Function compile flags: /Ogsy
;	COMDAT _diablo_color_cyc_logic
_TEXT	SEGMENT
_diablo_color_cyc_logic PROC NEAR			; COMDAT
; Line 1979
	call	DWORD PTR __imp__GetTickCount@0
; Line 1980
	mov	ecx, eax
	sub	ecx, DWORD PTR _color_cycle_timer
	cmp	ecx, 50					; 00000032H
	jb	SHORT $L85702
; Line 1981
	mov	DWORD PTR _color_cycle_timer, eax
; Line 1982
	call	_palette_get_colour_cycling
	test	al, al
	je	SHORT $L85702
; Line 1983
	mov	al, BYTE PTR _leveltype
	cmp	al, 4
	jne	SHORT $L85699
; Line 1984
	jmp	_lighting_color_cycling
$L85699:
; Line 1985
	cmp	al, 3
	jne	SHORT $L85702
; Line 1986
	cmp	DWORD PTR _fullscreen, 0
	je	SHORT $L85702
; Line 1987
	jmp	_palette_update_caves
$L85702:
; Line 1991
	ret	0
_diablo_color_cyc_logic ENDP
_TEXT	ENDS
END
