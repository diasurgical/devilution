; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/inv.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@HEFL@Data?2Inv?2Inv?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OJAO@Data?2Inv?2Inv_rog?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DHMK@Data?2Inv?2Inv_Sor?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DI@PKJL@A?5duplicate?5item?5has?5been?5detect@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _qmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FreeInvGFX
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitInv
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InvDrawSlotBack@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawInv
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawInvBelt
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AutoPlace@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SpecialAutoPlace@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @GoldAutoPlace@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WeaponAutoPlace@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SwapItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckInvPaste@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckInvSwap@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckInvCut@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @inv_update_rem_item@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RemoveInvItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RemoveSpdBarItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckInvItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckInvScrn
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckItemStats@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckBookLevel@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckQuestItem@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InvGetItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AutoGetItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @FindGetItem@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncGetItem@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CanPut@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _TryInvPut
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawInvMsg@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InvPutItem@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncPutItem@52
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckInvHLight
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RemoveScroll@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _UseScroll
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @UseStaffCharge@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _UseStaff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _StartGoldDrop
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @UseInvItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DoTelekinesis
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CalculateGold@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DropItemBeforeTrig
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_AP2x2Tbl
PUBLIC	_InvRect
_DATA	SEGMENT
COMM	_invflag:DWORD
COMM	_drawsbarflag:DWORD
COMM	_pInvCels:DWORD
COMM	_sgdwLastTime:DWORD
_DATA	ENDS
CONST	SEGMENT
_InvRect DD	01c4H
	DD	01fH
	DD	01e0H
	DD	01fH
	DD	01c4H
	DD	03bH
	DD	01e0H
	DD	03bH
	DD	016dH
	DD	0cdH
	DD	0237H
	DD	0cdH
	DD	020cH
	DD	03bH
	DD	0151H
	DD	068H
	DD	016eH
	DD	068H
	DD	0151H
	DD	084H
	DD	016eH
	DD	084H
	DD	0151H
	DD	0a0H
	DD	016eH
	DD	0a0H
	DD	0237H
	DD	068H
	DD	0254H
	DD	068H
	DD	0237H
	DD	084H
	DD	0254H
	DD	084H
	DD	0237H
	DD	0a0H
	DD	0254H
	DD	0a0H
	DD	01c4H
	DD	068H
	DD	01e0H
	DD	068H
	DD	01c4H
	DD	084H
	DD	01e0H
	DD	084H
	DD	01c4H
	DD	0a0H
	DD	01e0H
	DD	0a0H
	DD	0151H
	DD	0faH
	DD	016eH
	DD	0faH
	DD	018aH
	DD	0faH
	DD	01a7H
	DD	0faH
	DD	01c3H
	DD	0faH
	DD	01e0H
	DD	0faH
	DD	01fdH
	DD	0faH
	DD	021aH
	DD	0faH
	DD	0237H
	DD	0faH
	DD	0254H
	DD	0faH
	DD	0151H
	DD	0117H
	DD	016eH
	DD	0117H
	DD	018aH
	DD	0117H
	DD	01a7H
	DD	0117H
	DD	01c3H
	DD	0117H
	DD	01e0H
	DD	0117H
	DD	01fdH
	DD	0117H
	DD	021aH
	DD	0117H
	DD	0237H
	DD	0117H
	DD	0254H
	DD	0117H
	DD	0151H
	DD	0134H
	DD	016eH
	DD	0134H
	DD	018aH
	DD	0134H
	DD	01a7H
	DD	0134H
	DD	01c3H
	DD	0134H
	DD	01e0H
	DD	0134H
	DD	01fdH
	DD	0134H
	DD	021aH
	DD	0134H
	DD	0237H
	DD	0134H
	DD	0254H
	DD	0134H
	DD	0151H
	DD	0150H
	DD	016eH
	DD	0150H
	DD	018aH
	DD	0150H
	DD	01a7H
	DD	0150H
	DD	01c3H
	DD	0150H
	DD	01e0H
	DD	0150H
	DD	01fdH
	DD	0150H
	DD	021aH
	DD	0150H
	DD	0237H
	DD	0150H
	DD	0254H
	DD	0150H
	DD	0cdH
	DD	0181H
	DD	0eaH
	DD	0181H
	DD	0107H
	DD	0181H
	DD	0124H
	DD	0181H
	DD	0141H
	DD	0181H
	DD	015eH
	DD	0181H
	DD	017bH
	DD	0181H
	DD	0198H
	DD	0181H
CONST	ENDS
_DATA	SEGMENT
_AP2x2Tbl DD	08H
	DD	01cH
	DD	06H
	DD	01aH
	DD	04H
	DD	018H
	DD	02H
	DD	016H
	DD	00H
	DD	014H
_DATA	ENDS
PUBLIC	_FreeInvGFX
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _FreeInvGFX
_TEXT	SEGMENT
_FreeInvGFX PROC NEAR					; COMDAT
; File Source/inv.cpp
; Line 95
	mov	ecx, DWORD PTR _pInvCels
; Line 97
	and	DWORD PTR _pInvCels, 0
; Line 98
	jmp	@mem_free_dbg@4
_FreeInvGFX ENDP
_TEXT	ENDS
PUBLIC	_InitInv
PUBLIC	??_C@_0BB@HEFL@Data?2Inv?2Inv?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BF@OJAO@Data?2Inv?2Inv_rog?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@DHMK@Data?2Inv?2Inv_Sor?4CEL?$AA@	; `string'
EXTRN	_myplr:DWORD
EXTRN	_plr:BYTE
EXTRN	@LoadFileInMem@8:NEAR
;	COMDAT ??_C@_0BB@HEFL@Data?2Inv?2Inv?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BB@HEFL@Data?2Inv?2Inv?4CEL?$AA@ DB 'Data\Inv\Inv.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OJAO@Data?2Inv?2Inv_rog?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@OJAO@Data?2Inv?2Inv_rog?4CEL?$AA@ DB 'Data\Inv\Inv_rog.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@DHMK@Data?2Inv?2Inv_Sor?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@DHMK@Data?2Inv?2Inv_Sor?4CEL?$AA@ DB 'Data\Inv\Inv_Sor.CEL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _InitInv
_TEXT	SEGMENT
_InitInv PROC NEAR					; COMDAT
; Line 103
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L84989
; Line 104
	mov	ecx, OFFSET FLAT:??_C@_0BB@HEFL@Data?2Inv?2Inv?4CEL?$AA@ ; `string'
; Line 105
	jmp	SHORT $L86481
$L84989:
	cmp	al, 1
	jne	SHORT $L84992
; Line 106
	mov	ecx, OFFSET FLAT:??_C@_0BF@OJAO@Data?2Inv?2Inv_rog?4CEL?$AA@ ; `string'
; Line 107
	jmp	SHORT $L86481
$L84992:
	cmp	al, 2
	jne	SHORT $L84995
; Line 108
	mov	ecx, OFFSET FLAT:??_C@_0BF@DHMK@Data?2Inv?2Inv_Sor?4CEL?$AA@ ; `string'
$L86481:
	xor	edx, edx
	call	@LoadFileInMem@8
	mov	DWORD PTR _pInvCels, eax
$L84995:
; Line 111
	and	DWORD PTR _invflag, 0
; Line 112
	and	DWORD PTR _drawsbarflag, 0
; Line 113
	ret	0
_InitInv ENDP
_TEXT	ENDS
PUBLIC	@InvDrawSlotBack@16
EXTRN	_gpBuffer:DWORD
EXTRN	_screen_y_times_768:BYTE
; Function compile flags: /Ogsy
;	COMDAT @InvDrawSlotBack@16
_TEXT	SEGMENT
_W$ = 8
_H$ = 12
@InvDrawSlotBack@16 PROC NEAR				; COMDAT
; _X$ = ecx
; _Y$ = edx
; Line 123
	mov	eax, DWORD PTR _screen_y_times_768[edx*4]
	push	esi
	add	eax, DWORD PTR _gpBuffer
	push	edi
; Line 124
	movzx	esi, WORD PTR _H$[esp+4]
; Line 145
	movzx	edx, WORD PTR _W$[esp+4]
	add	eax, ecx
$L85013:
; Line 126
	mov	edi, edx
$L85017:
; Line 128
	mov	cl, BYTE PTR [eax]
; Line 129
	cmp	cl, 176					; 000000b0H
	jb	SHORT $LABEL_9$85021
; Line 131
	cmp	cl, 191					; 000000bfH
	jbe	SHORT $L85022
; Line 132
	cmp	cl, 240					; 000000f0H
	jb	SHORT $LABEL_9$85021
; Line 134
	sub	cl, 80					; 00000050H
; Line 135
	jmp	SHORT $L85024
$L85022:
; Line 136
	sub	cl, 16					; 00000010H
$L85024:
; Line 138
	mov	BYTE PTR [eax], cl
$LABEL_9$85021:
; Line 140
	inc	eax
; Line 141
	dec	edi
; Line 142
	jne	SHORT $L85017
; Line 143
	mov	ecx, -768				; fffffd00H
	sub	ecx, edx
	add	eax, ecx
; Line 144
	dec	esi
; Line 145
	jne	SHORT $L85013
	pop	edi
	pop	esi
; Line 146
	ret	8
@InvDrawSlotBack@16 ENDP
_TEXT	ENDS
PUBLIC	_DrawInv
EXTRN	_pCursCels:DWORD
EXTRN	_pcursinvitem:BYTE
EXTRN	_InvItemWidth:BYTE
EXTRN	_InvItemHeight:BYTE
EXTRN	_light_table_index:DWORD
EXTRN	_cel_transparency_active:DWORD
EXTRN	@CelDecodeOnly@20:NEAR
EXTRN	@CelDrawHdrOnly@28:NEAR
EXTRN	@CelDecodeHdrLightTrans@24:NEAR
EXTRN	@CelDrawHdrLightRed@32:NEAR
EXTRN	@CelDecodeClr@32:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DrawInv
_TEXT	SEGMENT
_invtest$ = -160
_frame_width$ = -168
_screen_x$ = -164
_screen_y$ = -168
_DrawInv PROC NEAR					; COMDAT
; Line 149
	sub	esp, 168				; 000000a8H
; Line 153
	mov	edx, 511				; 000001ffH
	mov	ecx, 384				; 00000180H
	push	ebx
	push	ebp
	push	esi
	push	edi
	push	320					; 00000140H
	push	1
	push	DWORD PTR _pInvCels
	call	@CelDecodeOnly@20
; Line 155
	mov	eax, DWORD PTR _myplr
	xor	ebx, ebx
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+900], -1
	je	$L85043
; Line 156
	mov	edi, 219				; 000000dbH
	push	56					; 00000038H
	push	56					; 00000038H
	mov	edx, edi
	mov	ecx, 517				; 00000205H
	call	@InvDrawSlotBack@16
; Line 158
	mov	ecx, DWORD PTR _myplr
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[eax+1084]
	add	esi, 12					; 0000000cH
; Line 161
	cmp	BYTE PTR _pcursinvitem, bl
	mov	ebp, DWORD PTR _InvItemWidth[esi*4]
	jne	SHORT $L85037
; Line 163
	cmp	BYTE PTR _plr[eax+952], bl
	mov	ecx, 197				; 000000c5H
	je	SHORT $L85038
; Line 164
	add	ecx, -16				; fffffff0H
$L85038:
; Line 166
	cmp	DWORD PTR _plr[eax+1248], ebx
	jne	SHORT $L85039
; Line 167
	mov	ecx, 229				; 000000e5H
$L85039:
; Line 169
	push	8
	push	ebx
	push	ebp
	push	esi
	push	DWORD PTR _pCursCels
	mov	edx, 517				; 00000205H
	push	edi
	call	@CelDecodeClr@32
	mov	ecx, DWORD PTR _myplr
$L85037:
; Line 172
	imul	ecx, 21720				; 000054d8H
; Line 173
	mov	edx, edi
	cmp	DWORD PTR _plr[ecx+1248], ebx
	mov	ecx, 517				; 00000205H
	je	SHORT $L85041
	push	8
	push	ebx
	push	ebp
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrOnly@28
; Line 174
	jmp	SHORT $L85043
$L85041:
; Line 175
	push	1
	push	8
	push	ebx
	push	ebp
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrLightRed@32
$L85043:
; Line 179
	mov	eax, DWORD PTR _myplr
	mov	esi, 365				; 0000016dH
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+1268], -1
	je	$L85052
; Line 180
	mov	ebp, 432				; 000001b0H
	push	28					; 0000001cH
	push	28					; 0000001cH
	mov	edx, esi
	mov	ecx, ebp
	call	@InvDrawSlotBack@16
; Line 182
	mov	ecx, DWORD PTR _myplr
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	edi, DWORD PTR _plr[eax+1452]
	add	edi, 12					; 0000000cH
; Line 185
	cmp	BYTE PTR _pcursinvitem, 1
	mov	edx, DWORD PTR _InvItemWidth[edi*4]
	mov	DWORD PTR _frame_width$[esp+184], edx
	jne	SHORT $L85046
; Line 187
	cmp	BYTE PTR _plr[eax+1320], bl
	mov	ecx, 197				; 000000c5H
	je	SHORT $L85047
; Line 188
	add	ecx, -16				; fffffff0H
$L85047:
; Line 190
	cmp	DWORD PTR _plr[eax+1616], ebx
	jne	SHORT $L85048
; Line 191
	mov	ecx, 229				; 000000e5H
$L85048:
; Line 193
	push	8
	push	ebx
	push	edx
	push	edi
	push	DWORD PTR _pCursCels
	mov	edx, ebp
	push	esi
	call	@CelDecodeClr@32
	mov	ecx, DWORD PTR _myplr
	mov	edx, DWORD PTR _frame_width$[esp+184]
$L85046:
; Line 196
	imul	ecx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ecx+1616], ebx
; Line 197
	mov	ecx, ebp
	je	SHORT $L85050
	push	8
	push	ebx
	push	edx
	push	edi
	push	DWORD PTR _pCursCels
	mov	edx, esi
	call	@CelDrawHdrOnly@28
; Line 198
	jmp	SHORT $L85052
$L85050:
; Line 199
	push	1
	push	8
	push	ebx
	push	edx
	push	edi
	mov	edx, esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrLightRed@32
$L85052:
; Line 203
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+1636], -1
	je	$L85061
; Line 204
	mov	ebp, 633				; 00000279H
	push	28					; 0000001cH
	push	28					; 0000001cH
	mov	edx, esi
	mov	ecx, ebp
	call	@InvDrawSlotBack@16
; Line 206
	mov	ecx, DWORD PTR _myplr
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	edi, DWORD PTR _plr[eax+1820]
	add	edi, 12					; 0000000cH
; Line 209
	cmp	BYTE PTR _pcursinvitem, 2
	mov	edx, DWORD PTR _InvItemWidth[edi*4]
	mov	DWORD PTR _frame_width$[esp+184], edx
	jne	SHORT $L85055
; Line 211
	cmp	BYTE PTR _plr[eax+1688], bl
	mov	ecx, 197				; 000000c5H
	je	SHORT $L85056
; Line 212
	add	ecx, -16				; fffffff0H
$L85056:
; Line 214
	cmp	DWORD PTR _plr[eax+1984], ebx
	jne	SHORT $L85057
; Line 215
	mov	ecx, 229				; 000000e5H
$L85057:
; Line 217
	push	8
	push	ebx
	push	edx
	push	edi
	push	DWORD PTR _pCursCels
	mov	edx, ebp
	push	esi
	call	@CelDecodeClr@32
	mov	ecx, DWORD PTR _myplr
	mov	edx, DWORD PTR _frame_width$[esp+184]
$L85055:
; Line 220
	imul	ecx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ecx+1984], ebx
; Line 221
	mov	ecx, ebp
	je	SHORT $L85059
	push	8
	push	ebx
	push	edx
	push	edi
	push	DWORD PTR _pCursCels
	mov	edx, esi
	call	@CelDrawHdrOnly@28
; Line 222
	jmp	SHORT $L85061
$L85059:
; Line 223
	push	1
	push	8
	push	ebx
	push	edx
	push	edi
	mov	edx, esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrLightRed@32
$L85061:
; Line 227
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+2004], -1
	je	$L85070
; Line 228
	mov	edi, 220				; 000000dcH
	mov	ebp, 589				; 0000024dH
	push	28					; 0000001cH
	push	28					; 0000001cH
	mov	edx, edi
	mov	ecx, ebp
	call	@InvDrawSlotBack@16
; Line 230
	mov	ecx, DWORD PTR _myplr
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[eax+2188]
	add	esi, 12					; 0000000cH
; Line 233
	cmp	BYTE PTR _pcursinvitem, 3
	mov	edx, DWORD PTR _InvItemWidth[esi*4]
	mov	DWORD PTR _frame_width$[esp+184], edx
	jne	SHORT $L85064
; Line 235
	cmp	BYTE PTR _plr[eax+2056], bl
	mov	ecx, 197				; 000000c5H
	je	SHORT $L85065
; Line 236
	add	ecx, -16				; fffffff0H
$L85065:
; Line 238
	cmp	DWORD PTR _plr[eax+2352], ebx
	jne	SHORT $L85066
; Line 239
	mov	ecx, 229				; 000000e5H
$L85066:
; Line 241
	push	8
	push	ebx
	push	edx
	push	esi
	push	DWORD PTR _pCursCels
	mov	edx, ebp
	push	edi
	call	@CelDecodeClr@32
	mov	ecx, DWORD PTR _myplr
	mov	edx, DWORD PTR _frame_width$[esp+184]
$L85064:
; Line 244
	imul	ecx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ecx+2352], ebx
; Line 245
	mov	ecx, ebp
	je	SHORT $L85068
	push	8
	push	ebx
	push	edx
	push	esi
	push	DWORD PTR _pCursCels
	mov	edx, edi
	call	@CelDrawHdrOnly@28
; Line 246
	jmp	SHORT $L85070
$L85068:
; Line 247
	push	1
	push	8
	push	ebx
	push	edx
	push	esi
	mov	edx, edi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrLightRed@32
$L85070:
; Line 251
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+2372], -1
	je	$L85081
; Line 252
	mov	ebp, 401				; 00000191H
	push	84					; 00000054H
	push	56					; 00000038H
	mov	edx, 320				; 00000140H
	mov	ecx, ebp
	call	@InvDrawSlotBack@16
; Line 254
	mov	ecx, DWORD PTR _myplr
; Line 257
	xor	edx, edx
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[eax+2556]
	add	esi, 12					; 0000000cH
	mov	edi, DWORD PTR _InvItemWidth[esi*4]
	cmp	edi, 28					; 0000001cH
	setne	dl
	dec	edx
	and	edx, 14					; 0000000eH
	add	ebp, edx
; Line 258
	xor	edx, edx
	cmp	DWORD PTR _InvItemHeight[esi*4], 84	; 00000054H
	setne	dl
	dec	edx
	and	edx, 14					; 0000000eH
	add	edx, 306				; 00000132H
; Line 260
	cmp	BYTE PTR _pcursinvitem, 4
	mov	DWORD PTR _screen_y$[esp+184], edx
	jne	SHORT $L85073
; Line 262
	cmp	BYTE PTR _plr[eax+2424], bl
	mov	ecx, 197				; 000000c5H
	je	SHORT $L85074
; Line 263
	add	ecx, -16				; fffffff0H
$L85074:
; Line 265
	cmp	DWORD PTR _plr[eax+2720], ebx
	jne	SHORT $L85075
; Line 266
	mov	ecx, 229				; 000000e5H
$L85075:
; Line 268
	push	8
	push	ebx
	push	edi
	push	esi
	push	DWORD PTR _pCursCels
	mov	edx, ebp
	push	DWORD PTR _screen_y$[esp+204]
	call	@CelDecodeClr@32
	mov	ecx, DWORD PTR _myplr
$L85073:
; Line 271
	imul	ecx, 21720				; 000054d8H
; Line 272
	mov	edx, DWORD PTR _screen_y$[esp+184]
	cmp	DWORD PTR _plr[ecx+2720], ebx
	mov	ecx, ebp
	je	SHORT $L85077
	push	8
	push	ebx
	push	edi
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrOnly@28
; Line 273
	jmp	SHORT $L85079
$L85077:
; Line 274
	push	1
	push	8
	push	ebx
	push	edi
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrLightRed@32
$L85079:
; Line 277
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+2553], 2
	jne	SHORT $L85081
; Line 278
	push	84					; 00000054H
	push	56					; 00000038H
	mov	edx, 320				; 00000140H
	mov	ecx, 631				; 00000277H
	call	@InvDrawSlotBack@16
; Line 286
	mov	eax, DWORD PTR _gpBuffer
	cmp	edi, 28					; 0000001cH
	mov	DWORD PTR _light_table_index, ebx
	mov	DWORD PTR _cel_transparency_active, 1
	lea	ecx, DWORD PTR [eax+246405]
	je	SHORT $L86491
	lea	ecx, DWORD PTR [eax+246391]
$L86491:
	mov	edx, DWORD PTR _pCursCels
	push	8
	push	ebx
	push	edi
	push	esi
	call	@CelDecodeHdrLightTrans@24
; Line 288
	mov	DWORD PTR _cel_transparency_active, ebx
$L85081:
; Line 291
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+2740], -1
	je	$L85090
; Line 292
	push	84					; 00000054H
	push	56					; 00000038H
	mov	edx, 320				; 00000140H
	mov	ecx, 631				; 00000277H
	call	@InvDrawSlotBack@16
; Line 294
	mov	ebp, DWORD PTR _myplr
; Line 297
	xor	edx, edx
	mov	eax, ebp
	imul	eax, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[eax+2924]
	add	esi, 12					; 0000000cH
	mov	edi, DWORD PTR _InvItemWidth[esi*4]
	cmp	edi, 28					; 0000001cH
	setne	dl
	dec	edx
; Line 298
	xor	ecx, ecx
	and	edx, 12					; 0000000cH
	add	edx, 633				; 00000279H
	cmp	DWORD PTR _InvItemHeight[esi*4], 84	; 00000054H
	mov	DWORD PTR _screen_x$[esp+184], edx
	setne	cl
	dec	ecx
	and	ecx, 14					; 0000000eH
	add	ecx, 306				; 00000132H
; Line 300
	cmp	BYTE PTR _pcursinvitem, 5
	mov	DWORD PTR _screen_y$[esp+184], ecx
	jne	SHORT $L85084
; Line 302
	cmp	BYTE PTR _plr[eax+2792], bl
	mov	ecx, 197				; 000000c5H
	je	SHORT $L85085
; Line 303
	add	ecx, -16				; fffffff0H
$L85085:
; Line 305
	cmp	DWORD PTR _plr[eax+3088], ebx
	jne	SHORT $L85086
; Line 306
	mov	ecx, 229				; 000000e5H
$L85086:
; Line 308
	push	8
	push	ebx
	push	edi
	push	esi
	push	DWORD PTR _pCursCels
	push	DWORD PTR _screen_y$[esp+204]
	call	@CelDecodeClr@32
	mov	ebp, DWORD PTR _myplr
$L85084:
; Line 311
	imul	ebp, 21720				; 000054d8H
; Line 312
	mov	ecx, DWORD PTR _screen_x$[esp+184]
	mov	edx, DWORD PTR _screen_y$[esp+184]
	cmp	DWORD PTR _plr[ebp+3088], ebx
	je	SHORT $L85088
	push	8
	push	ebx
	push	edi
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrOnly@28
; Line 313
	jmp	SHORT $L85090
$L85088:
; Line 314
	push	1
	push	8
	push	ebx
	push	edi
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrLightRed@32
$L85090:
; Line 318
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+3108], -1
	je	$L85099
; Line 319
	mov	ebp, 320				; 00000140H
	push	84					; 00000054H
	push	56					; 00000038H
	mov	edx, ebp
	mov	ecx, 517				; 00000205H
	call	@InvDrawSlotBack@16
; Line 321
	mov	ecx, DWORD PTR _myplr
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[eax+3292]
	add	esi, 12					; 0000000cH
; Line 324
	cmp	BYTE PTR _pcursinvitem, 6
	mov	edi, DWORD PTR _InvItemWidth[esi*4]
	jne	SHORT $L85093
; Line 326
	cmp	BYTE PTR _plr[eax+3160], bl
	mov	ecx, 197				; 000000c5H
	je	SHORT $L85094
; Line 327
	add	ecx, -16				; fffffff0H
$L85094:
; Line 329
	cmp	DWORD PTR _plr[eax+3456], ebx
	jne	SHORT $L85095
; Line 330
	mov	ecx, 229				; 000000e5H
$L85095:
; Line 332
	push	8
	push	ebx
	push	edi
	push	esi
	push	DWORD PTR _pCursCels
	mov	edx, 517				; 00000205H
	push	ebp
	call	@CelDecodeClr@32
	mov	ecx, DWORD PTR _myplr
$L85093:
; Line 335
	imul	ecx, 21720				; 000054d8H
; Line 336
	mov	edx, ebp
	cmp	DWORD PTR _plr[ecx+3456], ebx
	mov	ecx, 517				; 00000205H
	je	SHORT $L85097
	push	8
	push	ebx
	push	edi
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrOnly@28
; Line 337
	jmp	SHORT $L85099
$L85097:
; Line 338
	push	1
	push	8
	push	ebx
	push	edi
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrLightRed@32
$L85099:
; Line 342
	xor	esi, esi
$L85101:
; Line 343
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+esi+18192], bl
	je	SHORT $L85102
; Line 348
	mov	edx, DWORD PTR _InvRect[esi*8+204]
	mov	ecx, DWORD PTR _InvRect[esi*8+200]
	push	28					; 0000001cH
	push	28					; 0000001cH
	add	edx, 159				; 0000009fH
	add	ecx, 64					; 00000040H
	call	@InvDrawSlotBack@16
$L85102:
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85101
; Line 352
	xor	edi, edi
$L85105:
; Line 353
	mov	ecx, DWORD PTR _myplr
	imul	ecx, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[ecx+edi+18192]
	cmp	al, bl
	jle	$L85106
; Line 355
	movsx	eax, al
	dec	eax
; Line 357
	mov	DWORD PTR _invtest$[esp+edi*4+184], 1
; Line 359
	mov	ebp, eax
; Line 361
	add	eax, 7
	imul	ebp, 368				; 00000170H
	add	ecx, ebp
	mov	esi, DWORD PTR _plr[ecx+3660]
	add	esi, 12					; 0000000cH
	mov	edx, DWORD PTR _InvItemWidth[esi*4]
	mov	DWORD PTR _frame_width$[esp+184], edx
	movsx	edx, BYTE PTR _pcursinvitem
	cmp	edx, eax
	jne	SHORT $L86505
; Line 363
	cmp	BYTE PTR _plr[ecx+3528], bl
	mov	eax, 197				; 000000c5H
	je	SHORT $L85110
; Line 364
	add	eax, -16				; fffffff0H
$L85110:
; Line 366
	cmp	DWORD PTR _plr[ecx+3824], ebx
	jne	SHORT $L85111
; Line 367
	mov	eax, 229				; 000000e5H
$L85111:
; Line 373
	mov	ecx, DWORD PTR _InvRect[edi*8+204]
	push	8
	push	ebx
	mov	edx, DWORD PTR _InvRect[edi*8+200]
	push	DWORD PTR _frame_width$[esp+192]
	add	ecx, 159				; 0000009fH
	add	edx, 64					; 00000040H
	push	esi
	push	DWORD PTR _pCursCels
	push	ecx
	mov	cl, al
	call	@CelDecodeClr@32
$L86505:
	mov	eax, DWORD PTR _myplr
; Line 380
	mov	ecx, DWORD PTR _InvRect[edi*8+200]
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _InvRect[edi*8+204]
	add	ecx, 64					; 00000040H
	add	edx, 159				; 0000009fH
	cmp	DWORD PTR _plr[eax+ebp+3824], ebx
	je	SHORT $L85113
	push	8
	push	ebx
	push	DWORD PTR _frame_width$[esp+192]
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrOnly@28
; Line 381
	jmp	SHORT $L85106
$L85113:
; Line 385
	push	1
	push	8
	push	ebx
	push	DWORD PTR _frame_width$[esp+196]
	push	esi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrLightRed@32
$L85106:
	inc	edi
	cmp	edi, 40					; 00000028H
	jl	$L85105
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 389
	add	esp, 168				; 000000a8H
	ret	0
_DrawInv ENDP
_TEXT	ENDS
PUBLIC	_DrawInvBelt
EXTRN	_fontframe:BYTE
EXTRN	_fontkern:BYTE
EXTRN	_fontidx:BYTE
EXTRN	_AllItemsList:BYTE
EXTRN	_talkflag:DWORD
EXTRN	@CPrintString@12:NEAR
EXTRN	@DrawPanelBox@24:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DrawInvBelt
_TEXT	SEGMENT
_i$ = -12
_frame_width$ = -8
_DrawInvBelt PROC NEAR					; COMDAT
; Line 396
	sub	esp, 12					; 0000000cH
	push	ebx
; Line 400
	xor	ebx, ebx
	cmp	DWORD PTR _talkflag, ebx
	jne	$L85127
	push	ebp
	push	esi
	push	edi
; Line 404
	push	517					; 00000205H
	push	269					; 0000010dH
	push	28					; 0000001cH
	push	232					; 000000e8H
	push	21					; 00000015H
	pop	edx
	mov	ecx, 205				; 000000cdH
	call	@DrawPanelBox@24
; Line 406
	mov	DWORD PTR _i$[esp+28], ebx
	mov	DWORD PTR -4+[esp+28], ebx
	mov	ebp, 159				; 0000009fH
$L85125:
; Line 407
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+ebx+18240], -1
	je	$L85126
	mov	eax, DWORD PTR _i$[esp+28]
; Line 411
	push	28					; 0000001cH
	mov	esi, eax
	push	28					; 0000001cH
	shl	esi, 3
	mov	edx, DWORD PTR _InvRect[esi+524]
	mov	ecx, DWORD PTR _InvRect[esi+520]
	add	edx, ebp
	add	ecx, 64					; 00000040H
	call	@InvDrawSlotBack@16
; Line 412
	mov	ecx, DWORD PTR _myplr
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	add	eax, ebx
; Line 415
	movsx	ebx, BYTE PTR _pcursinvitem
	mov	edi, DWORD PTR _plr[eax+18424]
	add	edi, 12					; 0000000cH
	mov	edx, DWORD PTR _InvItemWidth[edi*4]
	mov	DWORD PTR _frame_width$[esp+28], edx
	mov	edx, DWORD PTR _i$[esp+28]
	add	edx, 47					; 0000002fH
	cmp	ebx, edx
	jne	SHORT $L85129
; Line 417
	cmp	BYTE PTR _plr[eax+18292], 0
	mov	ecx, 197				; 000000c5H
	je	SHORT $L85130
; Line 418
	add	ecx, -16				; fffffff0H
$L85130:
; Line 419
	cmp	DWORD PTR _plr[eax+18588], 0
	jne	SHORT $L85131
; Line 420
	mov	ecx, 229				; 000000e5H
$L85131:
; Line 421
	mov	eax, DWORD PTR _InvRect[esi+524]
	push	8
	push	0
	mov	edx, DWORD PTR _InvRect[esi+520]
	push	DWORD PTR _frame_width$[esp+36]
	add	eax, ebp
	add	edx, 64					; 00000040H
	push	edi
	push	DWORD PTR _pCursCels
	push	eax
	call	@CelDecodeClr@32
	mov	ecx, DWORD PTR _myplr
$L85129:
; Line 424
	imul	ecx, 21720				; 000054d8H
	mov	ebx, DWORD PTR -4+[esp+28]
; Line 425
	mov	edx, DWORD PTR _InvRect[esi+524]
	xor	eax, eax
	add	edx, ebp
	cmp	DWORD PTR _plr[ecx+ebx+18588], eax
	mov	ecx, DWORD PTR _InvRect[esi+520]
	je	SHORT $L85133
	push	8
	push	eax
	push	DWORD PTR _frame_width$[esp+36]
	add	ecx, 64					; 00000040H
	push	edi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrOnly@28
; Line 426
	jmp	SHORT $L85135
$L85133:
; Line 427
	push	1
	push	8
	push	eax
	add	ecx, 64					; 00000040H
	push	DWORD PTR _frame_width$[esp+40]
	push	edi
	push	DWORD PTR _pCursCels
	call	@CelDrawHdrLightRed@32
$L85135:
; Line 431
	mov	eax, DWORD PTR _myplr
	xor	ecx, ecx
	imul	eax, 21720				; 000054d8H
	add	eax, ebx
	mov	edx, DWORD PTR _plr[eax+18592]
	imul	edx, 76					; 0000004cH
	cmp	DWORD PTR _AllItemsList[edx+64], ecx
	je	SHORT $L85126
	cmp	DWORD PTR _plr[eax+18588], ecx
	je	SHORT $L85126
	cmp	DWORD PTR _plr[eax+18240], 11		; 0000000bH
	je	SHORT $L85126
; Line 432
	mov	al, BYTE PTR _i$[esp+28]
; Line 434
	push	ecx
	add	al, 49					; 00000031H
	movzx	eax, al
	movzx	eax, BYTE PTR _fontidx[eax]
	movzx	edx, BYTE PTR _fontframe[eax]
	mov	eax, DWORD PTR _InvRect[esi+524]
	movzx	ecx, BYTE PTR _fontkern[edx]
	mov	eax, DWORD PTR _screen_y_times_768[eax*4+636]
	sub	eax, ecx
	mov	ecx, DWORD PTR _InvRect[esi+520]
	lea	ecx, DWORD PTR [eax+ecx+92]
	call	@CPrintString@12
$L85126:
	inc	DWORD PTR _i$[esp+28]
	add	ebx, 368				; 00000170H
	cmp	DWORD PTR _i$[esp+28], 8
	mov	DWORD PTR -4+[esp+28], ebx
	jl	$L85125
	pop	edi
	pop	esi
	pop	ebp
$L85127:
	pop	ebx
; Line 437
	add	esp, 12					; 0000000cH
	ret	0
_DrawInvBelt ENDP
_TEXT	ENDS
PUBLIC	@AutoPlace@20
EXTRN	__allrem:NEAR
EXTRN	__alldiv:NEAR
EXTRN	@CalcPlrScrolls@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @AutoPlace@20
_TEXT	SEGMENT
_pnum$ = -12
_sx$ = 8
_sy$ = 12
_saveflag$ = 16
_v6$ = -4
_j$ = -8
_v18$ = -16
_i$ = 16
@AutoPlace@20 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _ii$ = edx
; Line 442
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, edx
	push	ebx
; Line 461
	cdq
	push	esi
; Line 463
	xor	ebx, ebx
	push	edi
	mov	edi, edx
	push	ebx
	mov	esi, eax
	push	10					; 0000000aH
	push	edi
	push	esi
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	DWORD PTR _v6$[ebp], 1
	call	__allrem
	mov	DWORD PTR _v18$[ebp], eax
; Line 464
	push	ebx
	push	10					; 0000000aH
	push	edi
	push	esi
	call	__alldiv
	lea	ecx, DWORD PTR [eax+eax*4]
	add	ecx, ecx
; Line 465
	mov	esi, ecx
; Line 466
	jns	SHORT $L85166
; Line 467
	xor	esi, esi
$L85166:
; Line 468
	xor	edi, edi
; Line 469
	cmp	DWORD PTR _sy$[ebp], ebx
	jle	SHORT $LABEL_16$85168
$L85185:
; Line 503
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85187
; Line 504
	mov	DWORD PTR _v6$[ebp], ebx
$L85187:
; Line 505
	mov	eax, DWORD PTR _v18$[ebp]
; Line 506
	cmp	eax, ebx
	jge	SHORT $L85188
; Line 507
	xor	eax, eax
$L85188:
; Line 508
	cmp	DWORD PTR _sx$[ebp], ebx
	mov	DWORD PTR _j$[ebp], ebx
	jle	SHORT $L86535
$L85189:
; Line 509
	cmp	DWORD PTR _v6$[ebp], ebx
	je	SHORT $L86535
; Line 512
	cmp	eax, 10					; 0000000aH
	mov	DWORD PTR _v6$[ebp], ebx
	jge	SHORT $L85193
; Line 513
	mov	edx, DWORD PTR _pnum$[ebp]
	imul	edx, 21720				; 000054d8H
	add	edx, eax
	cmp	BYTE PTR _plr[edx+esi+18192], bl
	sete	dl
	mov	BYTE PTR _v6$[ebp], dl
$L85193:
	mov	edx, DWORD PTR _sx$[ebp]
; Line 514
	inc	eax
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], edx
	jl	SHORT $L85189
$L86535:
; Line 516
	add	esi, 10					; 0000000aH
; Line 517
	inc	edi
	cmp	edi, DWORD PTR _sy$[ebp]
	jge	SHORT $L86536
; Line 502
	cmp	DWORD PTR _v6$[ebp], ebx
	jne	SHORT $L85185
; Line 517
	jmp	$L85169
$L86536:
; Line 518
	cmp	DWORD PTR _v6$[ebp], ebx
	jne	SHORT $LABEL_16$85168
; Line 519
	xor	eax, eax
	jmp	$L85148
$LABEL_16$85168:
; Line 471
	cmp	DWORD PTR _saveflag$[ebp], ebx
	je	$L85169
; Line 476
	mov	eax, DWORD PTR _pnum$[ebp]
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[eax+18188]
	lea	edi, DWORD PTR _plr[eax+21176]
	imul	edx, 368				; 00000170H
	lea	esi, DWORD PTR _plr[edx+eax+3468]
	mov	edx, 368				; 00000170H
$L86526:
	mov	bl, BYTE PTR [edi]
	mov	BYTE PTR [esi], bl
	inc	esi
	inc	edi
	dec	edx
	jne	SHORT $L86526
; Line 477
	inc	DWORD PTR _plr[eax+18188]
; Line 478
	mov	edi, ecx
; Line 479
	test	ecx, ecx
	jge	SHORT $L85170
; Line 480
	xor	edi, edi
$L85170:
; Line 481
	mov	ebx, DWORD PTR _sy$[ebp]
	and	DWORD PTR _i$[ebp], 0
	test	ebx, ebx
	jle	SHORT $L85173
$L85171:
; Line 482
	mov	ecx, DWORD PTR _v18$[ebp]
; Line 483
	test	ecx, ecx
	jge	SHORT $L85174
; Line 484
	xor	ecx, ecx
$L85174:
; Line 485
	xor	esi, esi
; Line 486
	cmp	DWORD PTR _sx$[ebp], esi
	jle	SHORT $L85178
; Line 487
	add	ecx, eax
	lea	edx, DWORD PTR _plr[ecx+edi+18192]
$L85176:
; Line 489
	test	esi, esi
	jne	SHORT $L85180
	lea	ecx, DWORD PTR [ebx-1]
	cmp	DWORD PTR _i$[ebp], ecx
	jne	SHORT $L85180
; Line 492
	mov	cl, BYTE PTR _plr[eax+18188]
	jmp	SHORT $L85182
$L85180:
; Line 490
	mov	cl, BYTE PTR _plr[eax+18188]
	neg	cl
$L85182:
; Line 493
	mov	BYTE PTR [edx], cl
	inc	edx
; Line 494
	inc	esi
; Line 495
	cmp	esi, DWORD PTR _sx$[ebp]
	jl	SHORT $L85176
$L85178:
; Line 497
	add	edi, 10					; 0000000aH
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], ebx
	jl	SHORT $L85171
$L85173:
; Line 499
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@CalcPlrScrolls@4
$L85169:
; Line 524
	mov	eax, DWORD PTR _v6$[ebp]
$L85148:
	pop	edi
	pop	esi
	pop	ebx
; Line 525
	leave
	ret	12					; 0000000cH
@AutoPlace@20 ENDP
_TEXT	ENDS
PUBLIC	@SpecialAutoPlace@20
; Function compile flags: /Ogsy
;	COMDAT @SpecialAutoPlace@20
_TEXT	SEGMENT
_pnum$ = -8
_sx$ = 8
_sy$ = 12
_saveflag$ = 16
_v6$ = -4
_j$ = -12
_v20$ = -16
_i$ = 16
@SpecialAutoPlace@20 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _ii$ = edx
; Line 528
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, edx
	push	ebx
; Line 549
	cdq
	push	esi
; Line 551
	xor	ebx, ebx
	push	edi
	mov	edi, edx
	push	ebx
	mov	esi, eax
	push	10					; 0000000aH
	push	edi
	push	esi
	mov	DWORD PTR _pnum$[ebp], ecx
	mov	DWORD PTR _v6$[ebp], 1
	call	__allrem
	mov	DWORD PTR _v20$[ebp], eax
; Line 552
	push	ebx
	push	10					; 0000000aH
	push	edi
	push	esi
	call	__alldiv
	lea	ecx, DWORD PTR [eax+eax*4]
	add	ecx, ecx
; Line 553
	mov	esi, ecx
; Line 554
	jns	SHORT $L85227
; Line 555
	xor	esi, esi
$L85227:
; Line 556
	xor	edi, edi
; Line 557
	cmp	DWORD PTR _sy$[ebp], ebx
	jle	$LABEL_25$85229
$L85245:
; Line 589
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85247
; Line 590
	mov	DWORD PTR _v6$[ebp], ebx
$L85247:
; Line 591
	mov	eax, DWORD PTR _v20$[ebp]
; Line 592
	cmp	eax, ebx
	jge	SHORT $L85248
; Line 593
	xor	eax, eax
$L85248:
; Line 594
	cmp	DWORD PTR _sx$[ebp], ebx
	mov	DWORD PTR _j$[ebp], ebx
	jle	SHORT $L86565
$L85249:
; Line 595
	cmp	DWORD PTR _v6$[ebp], ebx
	je	SHORT $L86565
; Line 598
	cmp	eax, 10					; 0000000aH
	mov	DWORD PTR _v6$[ebp], ebx
	jge	SHORT $L85253
; Line 599
	mov	edx, DWORD PTR _pnum$[ebp]
	imul	edx, 21720				; 000054d8H
	add	edx, eax
	cmp	BYTE PTR _plr[edx+esi+18192], bl
	sete	dl
	mov	BYTE PTR _v6$[ebp], dl
$L85253:
	mov	edx, DWORD PTR _sx$[ebp]
; Line 600
	inc	eax
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], edx
	jl	SHORT $L85249
$L86565:
; Line 602
	add	esi, 10					; 0000000aH
; Line 603
	inc	edi
	cmp	edi, DWORD PTR _sy$[ebp]
	jge	SHORT $L86566
; Line 588
	cmp	DWORD PTR _v6$[ebp], ebx
	jne	SHORT $L85245
; Line 615
	jmp	SHORT $L85256
$L86566:
; Line 604
	cmp	DWORD PTR _v6$[ebp], ebx
	jne	SHORT $LABEL_25$85229
$L85256:
; Line 609
	xor	esi, esi
	inc	esi
	cmp	DWORD PTR _sx$[ebp], esi
	jg	SHORT $L85257
	cmp	DWORD PTR _sy$[ebp], esi
	jg	SHORT $L85257
; Line 611
	mov	eax, DWORD PTR _pnum$[ebp]
	xor	edx, edx
	imul	eax, 21720				; 000054d8H
	add	eax, OFFSET FLAT:_plr+18240
	jmp	SHORT $L86578
$L85259:
; Line 613
	inc	edx
; Line 614
	add	eax, 368				; 00000170H
; Line 615
	cmp	edx, 8
	jge	SHORT $LABEL_24$85262
$L86578:
; Line 612
	cmp	DWORD PTR [eax], -1
	jne	SHORT $L85259
; Line 618
	mov	DWORD PTR _v6$[ebp], esi
; Line 619
	jmp	SHORT $LABEL_25$85229
$L85257:
; Line 621
	mov	DWORD PTR _v6$[ebp], ebx
$LABEL_24$85262:
; Line 623
	cmp	DWORD PTR _v6$[ebp], ebx
	je	$L85263
$LABEL_25$85229:
; Line 559
	cmp	DWORD PTR _saveflag$[ebp], ebx
	je	$L85230
; Line 561
	mov	eax, DWORD PTR _pnum$[ebp]
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[eax+18188]
	lea	edi, DWORD PTR _plr[eax+21176]
	imul	edx, 368				; 00000170H
	lea	esi, DWORD PTR _plr[edx+eax+3468]
	mov	edx, 368				; 00000170H
$L86555:
	mov	bl, BYTE PTR [edi]
	mov	BYTE PTR [esi], bl
	inc	esi
	inc	edi
	dec	edx
	jne	SHORT $L86555
; Line 562
	inc	DWORD PTR _plr[eax+18188]
; Line 563
	mov	edi, ecx
; Line 564
	test	ecx, ecx
	jge	SHORT $L85231
; Line 565
	xor	edi, edi
$L85231:
; Line 566
	mov	ebx, DWORD PTR _sy$[ebp]
	and	DWORD PTR _i$[ebp], 0
	test	ebx, ebx
	jle	SHORT $L85234
$L85232:
; Line 567
	mov	ecx, DWORD PTR _v20$[ebp]
; Line 568
	test	ecx, ecx
	jge	SHORT $L85235
; Line 569
	xor	ecx, ecx
$L85235:
; Line 570
	xor	esi, esi
; Line 571
	cmp	DWORD PTR _sx$[ebp], esi
	jle	SHORT $L85239
; Line 572
	add	ecx, eax
	lea	edx, DWORD PTR _plr[ecx+edi+18192]
$L85237:
; Line 574
	test	esi, esi
	jne	SHORT $L85241
	lea	ecx, DWORD PTR [ebx-1]
	cmp	DWORD PTR _i$[ebp], ecx
	jne	SHORT $L85241
; Line 577
	mov	cl, BYTE PTR _plr[eax+18188]
	jmp	SHORT $L85243
$L85241:
; Line 575
	mov	cl, BYTE PTR _plr[eax+18188]
	neg	cl
$L85243:
; Line 578
	mov	BYTE PTR [edx], cl
	inc	edx
; Line 579
	inc	esi
; Line 580
	cmp	esi, DWORD PTR _sx$[ebp]
	jl	SHORT $L85237
$L85239:
; Line 582
	add	edi, 10					; 0000000aH
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], ebx
	jl	SHORT $L85232
$L85234:
; Line 584
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@CalcPlrScrolls@4
$L85230:
; Line 586
	mov	eax, DWORD PTR _v6$[ebp]
	jmp	SHORT $L85207
$L85263:
; Line 625
	xor	eax, eax
$L85207:
	pop	edi
	pop	esi
	pop	ebx
; Line 626
	leave
	ret	12					; 0000000cH
@SpecialAutoPlace@20 ENDP
_TEXT	ENDS
PUBLIC	@GoldAutoPlace@4
PUBLIC	@CalculateGold@4
; Function compile flags: /Ogsy
;	COMDAT @GoldAutoPlace@4
_TEXT	SEGMENT
_pnum$ = -8
_v9$ = -4
@GoldAutoPlace@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 629
	push	ecx
	push	ecx
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _pnum$[esp+20], esi
; Line 648
	imul	esi, 21720				; 000054d8H
	xor	ebp, ebp
	xor	ebx, ebx
	cmp	DWORD PTR _plr[esi+18188], ebp
	push	edi
	jle	SHORT $LABEL_14$85281
; Line 706
	lea	edi, DWORD PTR _plr[esi+3664]
$L85314:
; Line 708
	cmp	DWORD PTR [edi-188], 11			; 0000000bH
	jne	SHORT $L85317
; Line 709
	mov	eax, DWORD PTR _plr[esi+21372]
	add	eax, DWORD PTR [edi]
; Line 710
	cmp	eax, 5000				; 00001388H
	jg	SHORT $L85317
; Line 712
	cmp	eax, 2500				; 000009c4H
	mov	DWORD PTR [edi], eax
	jge	SHORT $L85318
; Line 713
	cmp	eax, 1000				; 000003e8H
	jle	SHORT $L85319
; Line 714
	mov	DWORD PTR [edi-4], 5
; Line 715
	jmp	SHORT $L85321
$L85319:
; Line 716
	mov	DWORD PTR [edi-4], 4
; Line 717
	jmp	SHORT $L85321
$L85318:
; Line 718
	mov	DWORD PTR [edi-4], 6
$L85321:
; Line 720
	mov	ecx, DWORD PTR _pnum$[esp+24]
	call	@CalculateGold@4
; Line 721
	xor	ebp, ebp
	mov	DWORD PTR _plr[esi+460], eax
	inc	ebp
$L85317:
; Line 724
	inc	ebx
; Line 725
	add	edi, 368				; 00000170H
; Line 726
	cmp	ebx, DWORD PTR _plr[esi+18188]
	jge	SHORT $L86594
; Line 707
	test	ebp, ebp
	je	SHORT $L85314
; Line 676
	jmp	$L85286
$L86594:
; Line 727
	test	ebp, ebp
; Line 728
	jne	$L85286
$LABEL_14$85281:
; Line 650
	xor	ebx, ebx
; Line 651
	cmp	DWORD PTR _plr[esi+18188], ebx
	jle	$LABEL_28$85283
; Line 678
	lea	edi, DWORD PTR _plr[esi+3664]
	jmp	SHORT $L86606
$L85302:
; Line 680
	cmp	DWORD PTR [edi-188], 11			; 0000000bH
	jne	SHORT $L85305
	mov	ecx, DWORD PTR [edi]
	mov	edx, 5000				; 00001388H
	cmp	ecx, edx
	jge	SHORT $L85305
; Line 681
	mov	eax, DWORD PTR _plr[esi+21372]
	add	eax, ecx
; Line 682
	cmp	eax, edx
	jg	SHORT $L85305
; Line 684
	cmp	eax, 2500				; 000009c4H
	mov	DWORD PTR [edi], eax
	jge	SHORT $L85306
; Line 685
	cmp	eax, 1000				; 000003e8H
	jle	SHORT $L85307
; Line 686
	mov	DWORD PTR [edi-4], 5
; Line 687
	jmp	SHORT $L85309
$L85307:
; Line 688
	mov	DWORD PTR [edi-4], 4
; Line 689
	jmp	SHORT $L85309
$L85306:
; Line 690
	mov	DWORD PTR [edi-4], 6
$L85309:
; Line 692
	mov	ecx, DWORD PTR _pnum$[esp+24]
	call	@CalculateGold@4
; Line 693
	xor	ebp, ebp
	mov	DWORD PTR _plr[esi+460], eax
	inc	ebp
$L85305:
; Line 696
	inc	ebx
; Line 697
	add	edi, 368				; 00000170H
; Line 698
	cmp	ebx, DWORD PTR _plr[esi+18188]
	jge	SHORT $L86595
$L86606:
; Line 679
	test	ebp, ebp
	je	SHORT $L85302
; Line 676
	jmp	$L85286
$L86595:
; Line 699
	test	ebp, ebp
; Line 700
	jne	$L85286
$LABEL_28$85283:
; Line 653
	mov	DWORD PTR _v9$[esp+24], 39		; 00000027H
$L85284:
; Line 655
	test	ebp, ebp
	jne	$L85286
; Line 657
	mov	eax, DWORD PTR _v9$[esp+24]
	push	10					; 0000000aH
	cdq
	pop	ecx
	idiv	ecx
	mov	ecx, DWORD PTR _pnum$[esp+24]
	imul	ecx, 2172				; 0000087cH
	add	ecx, eax
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	edi, DWORD PTR _plr[edx+eax*2+18192]
; Line 658
	cmp	BYTE PTR [edi], 0
	jne	$L85288
; Line 659
	mov	eax, DWORD PTR _plr[esi+18188]
; Line 660
	mov	edx, esi
	imul	eax, 368				; 00000170H
	add	eax, esi
	lea	ecx, DWORD PTR _plr[eax+3468]
	sub	edx, ecx
	lea	ebp, DWORD PTR _plr[edx+21176]
	mov	edx, 368				; 00000170H
$L86586:
	mov	bl, BYTE PTR [ecx+ebp]
	mov	BYTE PTR [ecx], bl
	inc	ecx
	dec	edx
	jne	SHORT $L86586
; Line 661
	inc	DWORD PTR _plr[esi+18188]
; Line 662
	mov	cl, BYTE PTR _plr[esi+18188]
	mov	BYTE PTR [edi], cl
; Line 663
	mov	ecx, DWORD PTR _plr[esi+21372]
; Line 664
	cmp	ecx, 2500				; 000009c4H
	jge	SHORT $L85290
; Line 665
	cmp	ecx, 1000				; 000003e8H
	jle	SHORT $L85291
; Line 666
	mov	DWORD PTR _plr[eax+3660], 5
; Line 667
	jmp	SHORT $L85297
$L85291:
; Line 668
	mov	DWORD PTR _plr[eax+3660], 4
; Line 669
	jmp	SHORT $L85297
$L85290:
; Line 670
	mov	DWORD PTR _plr[eax+3660], 6
$L85297:
; Line 672
	mov	ecx, DWORD PTR _pnum$[esp+24]
	call	@CalculateGold@4
; Line 673
	xor	ebp, ebp
	mov	DWORD PTR _plr[esi+460], eax
	inc	ebp
$L85288:
; Line 675
	dec	DWORD PTR _v9$[esp+24]
; Line 676
	jns	$L85284
$L85286:
	pop	edi
; Line 733
	mov	eax, ebp
	pop	esi
	pop	ebp
	pop	ebx
; Line 734
	pop	ecx
	pop	ecx
	ret	0
@GoldAutoPlace@4 ENDP
_TEXT	ENDS
PUBLIC	@WeaponAutoPlace@4
EXTRN	@NetSendCmdChItem@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @WeaponAutoPlace@4
_TEXT	SEGMENT
@WeaponAutoPlace@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 737
	push	esi
	mov	esi, ecx
; Line 746
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+21365], 2
	jne	SHORT $L85333
; Line 747
	cmp	DWORD PTR _plr[esi+2372], -1
	jne	SHORT $L85341
	cmp	DWORD PTR _plr[esi+2740], -1
	je	SHORT $LABEL_12$85336
$L85341:
; Line 772
	xor	eax, eax
	pop	esi
; Line 773
	ret	0
$L85333:
; Line 755
	mov	ecx, DWORD PTR _plr[esi+2372]
; Line 756
	cmp	ecx, -1
	je	SHORT $L85338
	cmp	BYTE PTR _plr[esi+2554], 1
; Line 757
	je	SHORT $L85341
$L85338:
; Line 758
	mov	eax, DWORD PTR _plr[esi+2740]
; Line 759
	cmp	eax, -1
	je	SHORT $L85339
	cmp	BYTE PTR _plr[esi+2922], 1
; Line 760
	je	SHORT $L85341
$L85339:
; Line 761
	cmp	ecx, -1
	jne	SHORT $L85340
$LABEL_12$85336:
; Line 750
	xor	ecx, ecx
	mov	dl, 4
	inc	ecx
	call	@NetSendCmdChItem@8
; Line 752
	lea	eax, DWORD PTR _plr[esi+2364]
; Line 753
	jmp	SHORT $L86620
$L85340:
; Line 763
	cmp	eax, -1
	jne	SHORT $L85341
	cmp	BYTE PTR _plr[esi+2553], 2
	je	SHORT $L85341
; Line 764
	xor	ecx, ecx
	mov	dl, 5
	inc	ecx
	call	@NetSendCmdChItem@8
; Line 766
	lea	eax, DWORD PTR _plr[esi+2732]
$L86620:
	lea	ecx, DWORD PTR _plr[esi+21176]
; Line 769
	mov	esi, 368				; 00000170H
$LABEL_13$85337:
	sub	ecx, eax
$L86615:
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
	inc	eax
	dec	esi
	jne	SHORT $L86615
; Line 770
	xor	eax, eax
	pop	esi
	inc	eax
; Line 773
	ret	0
@WeaponAutoPlace@4 ENDP
_TEXT	ENDS
PUBLIC	@SwapItem@8
; Function compile flags: /Ogsy
;	COMDAT @SwapItem@8
_TEXT	SEGMENT
_h$ = -368
@SwapItem@8 PROC NEAR					; COMDAT
; _a$ = ecx
; _b$ = edx
; Line 776
	push	ebp
	mov	ebp, esp
	sub	esp, 368				; 00000170H
	push	ebx
	push	esi
	push	edi
	mov	eax, ecx
; Line 780
	push	92					; 0000005cH
	mov	esi, eax
	pop	ecx
	lea	edi, DWORD PTR _h$[ebp]
	rep movsd
; Line 782
	mov	ecx, edx
	mov	esi, 368				; 00000170H
	sub	ecx, eax
$L86637:
	mov	bl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], bl
	inc	eax
	dec	esi
	jne	SHORT $L86637
; Line 784
	mov	eax, DWORD PTR _h$[ebp+192]
	push	92					; 0000005cH
	pop	ecx
	lea	esi, DWORD PTR _h$[ebp]
	mov	edi, edx
	add	eax, 12					; 0000000cH
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
; Line 785
	leave
	ret	0
@SwapItem@8 ENDP
_TEXT	ENDS
PUBLIC	@CheckInvPaste@12
EXTRN	_ItemCAnimTbl:BYTE
EXTRN	_cursH:DWORD
EXTRN	_icursH28:DWORD
EXTRN	_cursW:DWORD
EXTRN	_ItemInvSnds:BYTE
EXTRN	_icursW28:DWORD
EXTRN	_icursH:DWORD
EXTRN	_icursW:DWORD
EXTRN	@SetICursor@4:NEAR
EXTRN	@SetCursor_@4:NEAR
EXTRN	_MouseY:DWORD
EXTRN	_MouseX:DWORD
EXTRN	_drawpanflag:DWORD
EXTRN	@PlaySFX@4:NEAR
EXTRN	@CalcPlrInv@8:NEAR
EXTRN	__imp__SetCursorPos@8:NEAR
EXTRN	@NetSendCmdDelItem@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @CheckInvPaste@12
_TEXT	SEGMENT
_pnum$ = -28
_my$ = 8
_v7$ = 8
_v13$ = -32
_v17$ = -36
_v18$ = -32
_v39$ = 8
_v48$ = -32
_v55$ = 8
_tempitem$ = -408
_v64$ = -24
_v65$ = -16
_v66$ = -8
_v67$ = -12
_v68$ = -20
_v69$ = 8
_cursor_id$ = -4
_cursor_ida$ = -4
@CheckInvPaste@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _mx$ = edx
; Line 788
	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	ebx
	mov	ebx, ecx
	mov	DWORD PTR _pnum$[ebp], ebx
; Line 860
	imul	ebx, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[ebx+21368]
	push	esi
	push	edi
	add	ecx, 12					; 0000000cH
	mov	edi, edx
	call	@SetICursor@4
; Line 861
	mov	eax, DWORD PTR _icursH
; Line 862
	mov	esi, DWORD PTR _icursW
; Line 863
	mov	ecx, DWORD PTR _icursW28
	sar	eax, 1
	add	eax, DWORD PTR _my$[ebp]
; Line 864
	and	DWORD PTR _v7$[ebp], 0
	sar	esi, 1
	add	esi, edi
; Line 866
	and	DWORD PTR _v68$[ebp], 0
	mov	edi, DWORD PTR _v68$[ebp]
	mov	DWORD PTR _v64$[ebp], ecx
	mov	ecx, DWORD PTR _icursH28
	mov	DWORD PTR _v67$[ebp], ecx
$L85426:
; Line 868
	cmp	DWORD PTR _v7$[ebp], 0
	jne	SHORT $LABEL_18$85430
; Line 870
	mov	edx, DWORD PTR _InvRect[edi*8]
; Line 871
	cmp	esi, edx
	jl	SHORT $L85432
	add	edx, 28					; 0000001cH
	cmp	esi, edx
	jge	SHORT $L85432
; Line 872
	mov	edx, DWORD PTR _InvRect[edi*8+4]
; Line 873
	lea	ecx, DWORD PTR [edx-29]
	cmp	eax, ecx
	jl	SHORT $L85432
	cmp	eax, edx
	jge	SHORT $L85432
; Line 874
	mov	DWORD PTR _v7$[ebp], 1
; Line 875
	dec	edi
$L85432:
; Line 878
	cmp	edi, 24					; 00000018H
	jne	SHORT $LABEL_13$85434
; Line 880
	test	BYTE PTR _v64$[ebp], 1
	jne	SHORT $L85435
; Line 881
	sub	esi, 14					; 0000000eH
$L85435:
; Line 882
	test	BYTE PTR _v67$[ebp], 1
	jne	SHORT $L85437
; Line 883
	sub	eax, 14					; 0000000eH
$LABEL_13$85434:
; Line 885
	cmp	edi, 64					; 00000040H
	jne	SHORT $L85437
	test	BYTE PTR _v67$[ebp], 1
	jne	SHORT $L85437
; Line 886
	add	eax, 14					; 0000000eH
$L85437:
; Line 888
	inc	edi
; Line 889
	cmp	edi, 73					; 00000049H
	mov	DWORD PTR _v68$[ebp], edi
	jb	SHORT $L85426
; Line 890
	cmp	DWORD PTR _v7$[ebp], 0
	je	$L85631
$LABEL_18$85430:
; Line 894
	push	7
	pop	edx
; Line 895
	push	3
	mov	DWORD PTR _v69$[ebp], edx
	pop	esi
	push	4
	test	edi, edi
	pop	ecx
	jl	SHORT $L85440
	cmp	edi, esi
	jg	SHORT $L85440
; Line 896
	mov	DWORD PTR _v69$[ebp], ecx
$L85440:
; Line 897
	push	5
	cmp	edi, ecx
	pop	eax
	jl	SHORT $L85441
	cmp	edi, eax
	jg	SHORT $L85441
; Line 898
	mov	DWORD PTR _v69$[ebp], eax
$L85441:
; Line 899
	push	6
	pop	eax
	cmp	edi, eax
	jne	SHORT $L85442
; Line 900
	mov	DWORD PTR _v69$[ebp], eax
$L85442:
; Line 901
	cmp	edi, edx
	jl	SHORT $L85443
	cmp	edi, 18					; 00000012H
	jg	SHORT $L85443
; Line 902
	mov	DWORD PTR _v69$[ebp], 1
$L85443:
; Line 903
	cmp	edi, 19					; 00000013H
	jl	SHORT $L85444
	cmp	edi, 24					; 00000018H
	jg	SHORT $L85444
; Line 904
	mov	DWORD PTR _v69$[ebp], esi
$L85444:
; Line 905
	cmp	edi, 65					; 00000041H
	jl	SHORT $L85445
	cmp	edi, 72					; 00000048H
	jg	SHORT $L85445
; Line 906
	mov	DWORD PTR _v69$[ebp], 8
$L85445:
; Line 907
	mov	al, BYTE PTR _plr[ebx+21365]
; Line 908
	xor	edx, edx
; Line 909
	movsx	ecx, al
	cmp	ecx, DWORD PTR _v69$[ebp]
	jne	SHORT $L86779
; Line 910
	xor	ecx, ecx
	inc	ecx
	mov	edx, ecx
	jmp	SHORT $L85447
$L86779:
	xor	ecx, ecx
	inc	ecx
$L85447:
; Line 911
	cmp	DWORD PTR _v69$[ebp], ecx
	jne	SHORT $L85448
	cmp	al, 2
	jne	SHORT $L85448
; Line 912
	mov	DWORD PTR _v69$[ebp], 2
; Line 913
	mov	edx, ecx
$L85448:
; Line 915
	cmp	al, 7
	jne	SHORT $LABEL_50$85451
	cmp	DWORD PTR _v69$[ebp], 8
	je	$L85647
$LABEL_50$85451:
; Line 917
	cmp	DWORD PTR _v69$[ebp], 7
	jne	$LABEL_81$85453
; Line 921
	lea	eax, DWORD PTR [edi-25]
	push	10					; 0000000aH
	mov	DWORD PTR _cursor_id$[ebp], ecx
	pop	ecx
	cdq
	idiv	ecx
	and	DWORD PTR _v66$[ebp], 0
; Line 922
	cmp	DWORD PTR _plr[ebx+21184], 11		; 0000000bH
	mov	DWORD PTR -40+[ebp], edx
	je	$L86758
; Line 1265
	mov	ecx, DWORD PTR _v67$[ebp]
	lea	edx, DWORD PTR [ecx-1]
	sar	edx, 1
	sub	eax, edx
	lea	esi, DWORD PTR [eax+eax*4]
	add	esi, esi
; Line 1266
	jns	SHORT $L85634
; Line 1267
	xor	esi, esi
$L85634:
; Line 1268
	and	DWORD PTR _v65$[ebp], 0
; Line 1269
	test	ecx, ecx
	jle	$L86773
; Line 1271
	lea	edi, DWORD PTR _plr[esi+ebx+18192]
$L85637:
; Line 1273
	cmp	DWORD PTR _cursor_id$[ebp], 0
	je	$L85631
; Line 1275
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85640
; Line 1276
	and	DWORD PTR _cursor_id$[ebp], 0
$L85640:
; Line 1277
	mov	ecx, DWORD PTR _v64$[ebp]
	mov	eax, DWORD PTR -40+[ebp]
	lea	edx, DWORD PTR [ecx-1]
	sar	edx, 1
	sub	eax, edx
; Line 1278
	jns	SHORT $L85641
; Line 1279
	xor	eax, eax
$L85641:
; Line 1280
	and	DWORD PTR _v17$[ebp], 0
; Line 1281
	test	ecx, ecx
	jle	SHORT $LABEL_79$85643
$L85646:
; Line 1293
	cmp	DWORD PTR _cursor_id$[ebp], 0
	je	SHORT $LABEL_79$85643
; Line 1295
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LABEL_233$85650
; Line 1297
	mov	dl, BYTE PTR [eax+edi]
; Line 1298
	test	dl, dl
	je	SHORT $LABEL_78$85657
; Line 1299
	movsx	edx, dl
; Line 1300
	test	dl, 128					; 00000080H
	mov	DWORD PTR _v18$[ebp], edx
	je	SHORT $L85655
; Line 1301
	neg	edx
$L85655:
; Line 1302
	cmp	DWORD PTR _v66$[ebp], 0
	jne	SHORT $L85656
; Line 1303
	mov	DWORD PTR _v66$[ebp], edx
; Line 1304
	jmp	SHORT $LABEL_78$85657
$L85656:
; Line 1306
	cmp	DWORD PTR _v66$[ebp], edx
	je	SHORT $LABEL_78$85657
$LABEL_233$85650:
; Line 1308
	and	DWORD PTR _cursor_id$[ebp], 0
$LABEL_78$85657:
; Line 1311
	inc	eax
; Line 1312
	inc	DWORD PTR _v17$[ebp]
	cmp	DWORD PTR _v17$[ebp], ecx
	jl	SHORT $L85646
$LABEL_79$85643:
; Line 1284
	add	esi, 10					; 0000000aH
; Line 1285
	add	edi, 10					; 0000000aH
; Line 1286
	inc	DWORD PTR _v65$[ebp]
	mov	eax, DWORD PTR _v65$[ebp]
	cmp	eax, DWORD PTR _v67$[ebp]
	jl	SHORT $L85637
; Line 1287
	mov	edx, DWORD PTR _cursor_id$[ebp]
$LABEL_81$85453:
; Line 1328
	test	edx, edx
	je	$L85631
; Line 1330
	cmp	DWORD PTR _v69$[ebp], 7
	je	$L86773
	cmp	DWORD PTR _v69$[ebp], 8
	je	$L86773
	cmp	DWORD PTR _plr[ebx+21532], 0
	jne	$L86773
; Line 1333
	mov	bl, BYTE PTR _plr[ebx+352]
	test	bl, bl
	jne	$L85667
; Line 1334
	mov	ecx, 726				; 000002d6H
$L86792:
	call	@PlaySFX@4
; Line 1335
	jmp	$L85631
$L85647:
; Line 1316
	cmp	DWORD PTR _v64$[ebp], ecx
	jne	SHORT $LABEL_81$85453
	cmp	DWORD PTR _v67$[ebp], ecx
	jne	SHORT $LABEL_81$85453
; Line 1318
	mov	eax, DWORD PTR _plr[ebx+21536]
	mov	edx, ecx
	imul	eax, 76					; 0000004cH
	cmp	DWORD PTR _AllItemsList[eax+64], 0
	jne	SHORT $L85661
; Line 1319
	xor	edx, edx
$L85661:
; Line 1320
	cmp	DWORD PTR _plr[ebx+21532], 0
	jne	SHORT $L85662
; Line 1321
	xor	edx, edx
$L85662:
; Line 1322
	cmp	DWORD PTR _plr[ebx+21184], 11		; 0000000bH
	jne	SHORT $LABEL_81$85453
; Line 1323
	xor	edx, edx
; Line 1324
	jmp	$LABEL_50$85451
$L86758:
; Line 923
	mov	esi, DWORD PTR _pnum$[ebp]
	mov	ecx, esi
	imul	ecx, 2172				; 0000087cH
	add	ecx, eax
	lea	eax, DWORD PTR [ecx+ecx*4]
	mov	ecx, DWORD PTR -40+[ebp]
	mov	al, BYTE PTR _plr[ecx+eax*2+18192]
; Line 924
	test	al, al
	je	SHORT $LABEL_93$85458
; Line 926
	movsx	eax, al
; Line 927
	test	al, al
	mov	DWORD PTR _v13$[ebp], eax
	jg	SHORT $L85461
; Line 928
	neg	eax
; Line 929
	jmp	SHORT $L85465
$L85461:
	mov	ecx, eax
	imul	ecx, 368				; 00000170H
	cmp	DWORD PTR _plr[ecx+ebx+3108], 11	; 0000000bH
	je	SHORT $LABEL_93$85458
$L85465:
; Line 932
	mov	DWORD PTR _v66$[ebp], eax
	jmp	SHORT $LABEL_93$85458
$L85667:
; Line 1335
	cmp	bl, 1
	jne	SHORT $L85669
; Line 1336
	mov	ecx, 623				; 0000026fH
; Line 1337
	jmp	$L86792
$L85669:
	cmp	bl, 2
	jne	$L85631
; Line 1338
	mov	ecx, 520				; 00000208H
	jmp	$L86792
$L86773:
; Line 1330
	mov	esi, DWORD PTR _pnum$[ebp]
$LABEL_93$85458:
; Line 935
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L85466
; Line 936
	mov	eax, DWORD PTR _plr[ebx+21368]
	movzx	eax, BYTE PTR _ItemCAnimTbl[eax]
	mov	ecx, DWORD PTR _ItemInvSnds[eax*4]
	call	@PlaySFX@4
$L85466:
; Line 940
	mov	eax, DWORD PTR _v69$[ebp]
	mov	DWORD PTR _cursor_ida$[ebp], 1
	dec	eax
	cmp	eax, 7
	ja	$LABEL_226$85479
	jmp	DWORD PTR $L86793[eax*4]
$L85471:
; Line 942
	cmp	DWORD PTR _v68$[ebp], 12		; 0000000cH
	jle	$L85472
; Line 943
	cmp	DWORD PTR _plr[ebx+2740], -1
	jne	SHORT $L85473
; Line 945
	cmp	DWORD PTR _plr[ebx+2372], -1
	je	SHORT $LABEL_232$85475
; Line 947
	cmp	BYTE PTR _plr[ebx+2553], 2
	jne	SHORT $L85476
; Line 948
	mov	dl, 4
	xor	ecx, ecx
	call	@NetSendCmdDelItem@8
; Line 949
	mov	dl, 5
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 950
	lea	esi, DWORD PTR _plr[ebx+2732]
	lea	edx, DWORD PTR _plr[ebx+2364]
	mov	ecx, esi
	call	@SwapItem@8
; Line 951
	mov	ecx, esi
	jmp	$LABEL_99$85477
$L85476:
; Line 958
	mov	al, BYTE PTR _plr[ebx+2554]
	cmp	al, BYTE PTR _plr[ebx+21366]
	je	SHORT $L85491
$LABEL_232$85475:
; Line 960
	mov	dl, 5
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 961
	lea	eax, DWORD PTR _plr[ebx+2732]
	jmp	$LABEL_158$85482
$L85473:
; Line 967
	cmp	DWORD PTR _plr[ebx+2372], -1
	je	SHORT $LABEL_114$85487
	mov	al, BYTE PTR _plr[ebx+2554]
	cmp	al, BYTE PTR _plr[ebx+21366]
	jne	SHORT $LABEL_114$85487
$L85491:
; Line 988
	mov	dl, 4
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 989
	lea	ecx, DWORD PTR _plr[ebx+2364]
; Line 990
	jmp	$LABEL_99$85477
$L85472:
; Line 971
	cmp	DWORD PTR _plr[ebx+2372], -1
	jne	SHORT $L85489
; Line 973
	cmp	DWORD PTR _plr[ebx+2740], -1
	je	SHORT $L85490
	mov	al, BYTE PTR _plr[ebx+2922]
	cmp	al, BYTE PTR _plr[ebx+21366]
	je	SHORT $LABEL_114$85487
$L85490:
; Line 979
	mov	dl, 4
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 980
	lea	eax, DWORD PTR _plr[ebx+2364]
; Line 981
	jmp	$LABEL_158$85482
$L85489:
; Line 984
	cmp	DWORD PTR _plr[ebx+2740], -1
	je	SHORT $L85491
	mov	al, BYTE PTR _plr[ebx+2922]
	cmp	al, BYTE PTR _plr[ebx+21366]
	jne	SHORT $L85491
$LABEL_114$85487:
; Line 975
	mov	dl, 5
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 976
	lea	ecx, DWORD PTR _plr[ebx+2732]
; Line 977
	jmp	$LABEL_99$85477
$L85492:
; Line 992
	mov	dl, 5
	xor	ecx, ecx
	call	@NetSendCmdDelItem@8
; Line 993
	cmp	DWORD PTR _plr[ebx+2372], -1
	je	$LABEL_147$85494
; Line 996
	cmp	DWORD PTR _plr[ebx+2740], -1
	je	$LABEL_146$85496
; Line 1000
	cmp	DWORD PTR _plr[ebx+2740], 5
	lea	edx, DWORD PTR _plr[ebx+21176]
	push	92					; 0000005cH
	mov	esi, edx
	pop	ecx
	lea	edi, DWORD PTR _tempitem$[ebp]
	rep movsd
	lea	eax, DWORD PTR _plr[ebx+2732]
	je	SHORT $L85497
; Line 1001
	lea	eax, DWORD PTR _plr[ebx+2364]
$L85497:
; Line 1003
	mov	esi, eax
	mov	ecx, edx
	sub	esi, edx
	mov	edi, 368				; 00000170H
$L86677:
	mov	al, BYTE PTR [ecx+esi]
	mov	BYTE PTR [ecx], al
	inc	ecx
	dec	edi
	jne	SHORT $L86677
; Line 1004
	mov	ecx, DWORD PTR _plr[ebx+21368]
; Line 1005
	mov	eax, DWORD PTR _pnum$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L85498
; Line 1006
	call	@SetCursor_@4
; Line 1007
	jmp	SHORT $L85499
$L85498:
; Line 1008
	call	@SetICursor@4
$L85499:
; Line 1009
	and	DWORD PTR _v67$[ebp], 0
; Line 1010
	xor	esi, esi
$L85500:
; Line 1012
	cmp	DWORD PTR _v67$[ebp], 0
	jne	SHORT $L85502
; Line 1014
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	1
	push	DWORD PTR _icursH28
	mov	edx, esi
	inc	esi
	push	DWORD PTR _icursW28
	call	@AutoPlace@20
; Line 1016
	cmp	esi, 40					; 00000028H
	mov	DWORD PTR _v67$[ebp], eax
	jl	SHORT $L85500
$L85502:
; Line 1018
	lea	edi, DWORD PTR _plr[ebx+21176]
	push	92					; 0000005cH
	mov	eax, edi
	pop	ecx
	sub	eax, ebx
	sub	eax, OFFSET FLAT:_plr+21176
	lea	esi, DWORD PTR _tempitem$[ebp+eax]
; Line 1020
	mov	eax, DWORD PTR _pnum$[ebp]
	rep movsd
	mov	ecx, DWORD PTR _plr[ebx+21368]
	add	ecx, 12					; 0000000cH
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L85504
; Line 1021
	call	@SetCursor_@4
; Line 1022
	jmp	SHORT $L85505
$L85504:
; Line 1023
	call	@SetICursor@4
$L85505:
; Line 1024
	cmp	DWORD PTR _v67$[ebp], 0
	je	$L85631
; Line 1026
	cmp	DWORD PTR _plr[ebx+2740], 5
	jne	SHORT $L85507
; Line 1027
	or	DWORD PTR _plr[ebx+2740], -1
; Line 1028
	jmp	SHORT $LABEL_146$85496
$L85507:
; Line 1029
	or	DWORD PTR _plr[ebx+2372], -1
$LABEL_146$85496:
; Line 1031
	cmp	DWORD PTR _plr[ebx+2372], -1
	jne	SHORT $LABEL_149$85510
$LABEL_147$85494:
; Line 1034
	cmp	DWORD PTR _plr[ebx+2740], -1
	jne	SHORT $LABEL_149$85510
; Line 1035
	mov	dl, 4
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 1036
	lea	eax, DWORD PTR _plr[ebx+2364]
	mov	ecx, ebx
	sub	ecx, eax
	mov	edi, 368				; 00000170H
	lea	esi, DWORD PTR _plr[ecx+21176]
$L86695:
	mov	cl, BYTE PTR [eax+esi]
	mov	BYTE PTR [eax], cl
	inc	eax
	dec	edi
	jne	SHORT $L86695
; Line 1037
	jmp	SHORT $L85512
$LABEL_149$85510:
; Line 1039
	mov	dl, 4
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 1040
	cmp	DWORD PTR _plr[ebx+2372], -1
	jne	SHORT $L85513
; Line 1041
	lea	edx, DWORD PTR _plr[ebx+2732]
	lea	ecx, DWORD PTR _plr[ebx+2364]
	call	@SwapItem@8
$L85513:
; Line 1042
	lea	edx, DWORD PTR _plr[ebx+21176]
	lea	ecx, DWORD PTR _plr[ebx+2364]
	call	@SwapItem@8
	mov	DWORD PTR _cursor_ida$[ebp], eax
$L85512:
; Line 1044
	cmp	DWORD PTR _plr[ebx+2372], 10		; 0000000aH
	jne	$LABEL_226$85479
; Line 1045
	mov	eax, DWORD PTR _plr[ebx+2588]
; Line 1046
	test	eax, eax
	je	$LABEL_226$85479
; Line 1047
	cmp	DWORD PTR _plr[ebx+2592], 0
	jle	$LABEL_226$85479
; Line 1048
	mov	DWORD PTR _plr[ebx+180], eax
; Line 1049
	mov	BYTE PTR _plr[ebx+184], 3
; Line 1050
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
; Line 1054
	jmp	$LABEL_226$85479
$L85518:
; Line 1056
	mov	dl, 6
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 1057
	cmp	DWORD PTR _plr[ebx+3108], -1
	jne	SHORT $L85519
; Line 1058
	lea	eax, DWORD PTR _plr[ebx+3100]
; Line 1059
	jmp	$LABEL_158$85482
$L85519:
; Line 1061
	lea	ecx, DWORD PTR _plr[ebx+3100]
; Line 1062
	jmp	$LABEL_99$85477
$L85520:
; Line 1064
	xor	dl, dl
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 1065
	cmp	DWORD PTR _plr[ebx+900], -1
	jne	SHORT $L85521
; Line 1066
	lea	eax, DWORD PTR _plr[ebx+892]
; Line 1067
	jmp	SHORT $LABEL_158$85482
$L85521:
; Line 1069
	lea	ecx, DWORD PTR _plr[ebx+892]
; Line 1070
	jmp	$LABEL_99$85477
$L85522:
; Line 1073
	xor	ecx, ecx
	cmp	DWORD PTR _v68$[ebp], 4
	jne	SHORT $L85523
	mov	dl, 1
	call	@NetSendCmdChItem@8
; Line 1074
	cmp	DWORD PTR _plr[ebx+1268], -1
	jne	SHORT $L85524
; Line 1075
	lea	eax, DWORD PTR _plr[ebx+1260]
; Line 1076
	jmp	SHORT $LABEL_158$85482
$L85524:
; Line 1078
	lea	ecx, DWORD PTR _plr[ebx+1260]
; Line 1079
	jmp	SHORT $LABEL_99$85477
$L85523:
; Line 1080
	mov	dl, 2
	call	@NetSendCmdChItem@8
; Line 1081
	cmp	DWORD PTR _plr[ebx+1636], -1
	jne	SHORT $L85526
; Line 1082
	lea	eax, DWORD PTR _plr[ebx+1628]
; Line 1083
	jmp	SHORT $LABEL_158$85482
$L85526:
; Line 1085
	lea	ecx, DWORD PTR _plr[ebx+1628]
; Line 1087
	jmp	SHORT $LABEL_99$85477
$L85527:
; Line 1089
	mov	dl, 3
	xor	ecx, ecx
	call	@NetSendCmdChItem@8
; Line 1090
	cmp	DWORD PTR _plr[ebx+2004], -1
	jne	SHORT $L85528
; Line 1091
	lea	eax, DWORD PTR _plr[ebx+1996]
$LABEL_158$85482:
; Line 963
	sub	ebx, eax
	mov	esi, 368				; 00000170H
	lea	ebx, DWORD PTR _plr[ebx+21176]
$L86661:
	mov	cl, BYTE PTR [eax+ebx]
	mov	BYTE PTR [eax], cl
	inc	eax
	dec	esi
	jne	SHORT $L86661
; Line 964
	jmp	$LABEL_226$85479
$L85528:
; Line 1094
	lea	ecx, DWORD PTR _plr[ebx+1996]
$LABEL_99$85477:
; Line 953
	lea	edx, DWORD PTR _plr[ebx+21176]
	call	@SwapItem@8
	jmp	$LABEL_172$85478
$L85529:
; Line 1097
	mov	ecx, DWORD PTR _plr[ebx+21184]
; Line 1099
	mov	eax, DWORD PTR _v66$[ebp]
	cmp	ecx, 11					; 0000000bH
	jne	$L85530
	test	eax, eax
	jne	$L85566
; Line 1100
	mov	eax, DWORD PTR _v68$[ebp]
	push	10					; 0000000aH
	add	eax, -25				; ffffffe7H
	pop	ecx
	cdq
	idiv	ecx
	mov	ecx, esi
	imul	ecx, 2172				; 0000087cH
	add	ecx, eax
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	esi, DWORD PTR _plr[edx+eax*2+18192]
; Line 1101
	mov	al, BYTE PTR [esi]
	test	al, al
	jg	SHORT $L85532
; Line 1102
	mov	eax, DWORD PTR _plr[ebx+18188]
; Line 1103
	mov	ecx, ebx
	imul	eax, 368				; 00000170H
	add	eax, ebx
	mov	DWORD PTR 8+[ebp], 368			; 00000170H
	lea	edi, DWORD PTR _plr[eax+3468]
	sub	ecx, edi
	lea	ecx, DWORD PTR _plr[ecx+21176]
$L86704:
	mov	dl, BYTE PTR [edi+ecx]
	mov	BYTE PTR [edi], dl
	inc	edi
	dec	DWORD PTR 8+[ebp]
	jne	SHORT $L86704
; Line 1104
	inc	DWORD PTR _plr[ebx+18188]
; Line 1105
	mov	cl, BYTE PTR _plr[ebx+18188]
	mov	BYTE PTR [esi], cl
; Line 1106
	mov	ecx, DWORD PTR _plr[ebx+21372]
; Line 1107
	add	DWORD PTR _plr[ebx+460], ecx
; Line 1108
	cmp	ecx, 5000				; 00001388H
	jg	$LABEL_226$85479
; Line 1109
	cmp	ecx, 2500				; 000009c4H
	jge	SHORT $L85550
; Line 1110
	cmp	ecx, 1000				; 000003e8H
; Line 1114
	jmp	SHORT $L86791
$L85532:
; Line 1121
	movsx	eax, al
	imul	eax, 368				; 00000170H
	mov	ecx, DWORD PTR _plr[ebx+21372]
	lea	eax, DWORD PTR [eax+ebx-368]
; Line 1122
	mov	edx, DWORD PTR _plr[eax+3664]
	mov	DWORD PTR _v39$[ebp], edx
; Line 1123
	add	edx, ecx
; Line 1124
	mov	ecx, 5000				; 00001388H
	cmp	edx, ecx
	jg	SHORT $L85547
; Line 1125
	mov	DWORD PTR _plr[eax+3664], edx
; Line 1126
	mov	ecx, DWORD PTR _plr[ebx+21372]
	add	DWORD PTR _plr[ebx+460], ecx
; Line 1127
	cmp	edx, 2500				; 000009c4H
	jge	SHORT $L85550
; Line 1128
	cmp	edx, 1000				; 000003e8H
$L86791:
	jle	SHORT $L85551
; Line 1129
	mov	DWORD PTR _plr[eax+3660], 5
; Line 1130
	jmp	$LABEL_226$85479
$L85551:
; Line 1131
	mov	DWORD PTR _plr[eax+3660], 4
; Line 1132
	jmp	$LABEL_226$85479
$L85550:
; Line 1133
	mov	DWORD PTR _plr[eax+3660], 6
; Line 1135
	jmp	$LABEL_226$85479
$L85547:
; Line 1137
	mov	esi, ecx
; Line 1138
	add	edx, -5000				; ffffec78H
	sub	esi, DWORD PTR _v39$[ebp]
	mov	DWORD PTR _plr[ebx+21372], edx
	add	DWORD PTR _plr[ebx+460], esi
; Line 1139
	mov	DWORD PTR _plr[eax+3664], ecx
; Line 1140
	mov	DWORD PTR _plr[eax+3660], 6
; Line 1141
	mov	ebx, DWORD PTR _plr[ebx+21372]
; Line 1142
	cmp	ebx, 2500				; 000009c4H
	jl	SHORT $L85564
; Line 1143
	mov	DWORD PTR _cursor_ida$[ebp], 18		; 00000012H
; Line 1144
	jmp	$LABEL_226$85479
$L85564:
; Line 1146
	xor	eax, eax
	cmp	ebx, 1000				; 000003e8H
	setg	al
	add	eax, 16					; 00000010H
$LABEL_172$85478:
; Line 955
	mov	DWORD PTR _cursor_ida$[ebp], eax
; Line 956
	jmp	$LABEL_226$85479
$L85530:
; Line 1149
	test	eax, eax
	jne	SHORT $L85566
; Line 1150
	mov	eax, DWORD PTR _plr[ebx+18188]
	mov	edx, ebx
	mov	ecx, eax
	mov	edi, 368				; 00000170H
	imul	ecx, 368				; 00000170H
	inc	eax
	lea	ecx, DWORD PTR _plr[ecx+ebx+3468]
	mov	DWORD PTR _plr[ebx+18188], eax
	sub	edx, ecx
	mov	eax, ecx
	lea	esi, DWORD PTR _plr[edx+21176]
$L86713:
	mov	cl, BYTE PTR [eax+esi]
	mov	BYTE PTR [eax], cl
	inc	eax
	dec	edi
	jne	SHORT $L86713
; Line 1151
	mov	eax, DWORD PTR _plr[ebx+18188]
	mov	DWORD PTR _v66$[ebp], eax
	jmp	SHORT $LABEL_191$85568
$L85566:
; Line 1182
	dec	eax
; Line 1183
	cmp	ecx, 11					; 0000000bH
	jne	SHORT $L85583
; Line 1184
	mov	ecx, DWORD PTR _plr[ebx+21372]
	add	DWORD PTR _plr[ebx+460], ecx
$L85583:
; Line 1185
	imul	eax, 368				; 00000170H
	lea	edx, DWORD PTR _plr[ebx+21176]
	lea	ecx, DWORD PTR _plr[eax+ebx+3468]
	call	@SwapItem@8
; Line 1186
	cmp	DWORD PTR _plr[ebx+21184], 11		; 0000000bH
	mov	DWORD PTR _cursor_ida$[ebp], eax
	jne	SHORT $L85586
; Line 1187
	mov	ecx, esi
	call	@CalculateGold@4
	mov	DWORD PTR _plr[ebx+460], eax
$L85586:
; Line 1189
	mov	ecx, DWORD PTR _v66$[ebp]
	xor	edx, edx
	neg	ecx
$L85587:
; Line 1197
	lea	eax, DWORD PTR _plr[ebx+edx+18192]
	movsx	esi, BYTE PTR [eax]
	cmp	esi, DWORD PTR _v66$[ebp]
	jne	SHORT $L85590
; Line 1193
	and	BYTE PTR [eax], 0
$L85590:
; Line 1194
	movsx	esi, BYTE PTR [eax]
	cmp	esi, ecx
	jne	SHORT $L85591
; Line 1195
	and	BYTE PTR [eax], 0
$L85591:
; Line 1196
	inc	edx
; Line 1197
	cmp	edx, 40					; 00000028H
	jl	SHORT $L85587
$LABEL_191$85568:
; Line 1154
	mov	eax, DWORD PTR _v68$[ebp]
	push	10					; 0000000aH
	add	eax, -25				; ffffffe7H
	pop	esi
	cdq
	idiv	esi
	mov	ecx, DWORD PTR _v67$[ebp]
	mov	DWORD PTR _v48$[ebp], ecx
	lea	edi, DWORD PTR [ecx-1]
	mov	esi, edi
	sar	esi, 1
	sub	eax, esi
	lea	eax, DWORD PTR [eax+eax*4]
	add	eax, eax
; Line 1155
	jns	SHORT $L85569
; Line 1156
	xor	eax, eax
$L85569:
; Line 1157
	and	DWORD PTR _v65$[ebp], 0
; Line 1158
	test	ecx, ecx
	jle	$LABEL_226$85479
; Line 1159
	mov	ecx, DWORD PTR _v64$[ebp]
	dec	ecx
	sar	ecx, 1
	sub	edx, ecx
	mov	DWORD PTR _v69$[ebp], edx
$L85571:
; Line 1161
	mov	ecx, DWORD PTR _v69$[ebp]
; Line 1162
	test	ecx, ecx
	jge	SHORT $L85574
; Line 1163
	xor	ecx, ecx
$L85574:
; Line 1164
	xor	edx, edx
; Line 1165
	cmp	DWORD PTR _v64$[ebp], edx
	jle	SHORT $L85578
; Line 1166
	add	ecx, ebx
	lea	esi, DWORD PTR _plr[ecx+eax+18192]
$L85576:
; Line 1168
	test	edx, edx
	jne	SHORT $L85580
	cmp	DWORD PTR _v65$[ebp], edi
	jne	SHORT $L85580
; Line 1171
	mov	cl, BYTE PTR _v66$[ebp]
	jmp	SHORT $L85582
$L85580:
; Line 1169
	mov	cl, BYTE PTR _v66$[ebp]
	neg	cl
$L85582:
; Line 1172
	mov	BYTE PTR [esi], cl
	inc	esi
; Line 1173
	inc	edx
; Line 1174
	cmp	edx, DWORD PTR _v64$[ebp]
	jl	SHORT $L85576
$L85578:
; Line 1176
	add	eax, 10					; 0000000aH
; Line 1177
	inc	DWORD PTR _v65$[ebp]
; Line 1178
	mov	ecx, DWORD PTR _v65$[ebp]
	cmp	ecx, DWORD PTR _v48$[ebp]
	jl	SHORT $L85571
; Line 1180
	jmp	$LABEL_226$85479
$L85592:
; Line 1200
	mov	eax, DWORD PTR _v68$[ebp]
	add	eax, -65				; ffffffbfH
	imul	eax, 368				; 00000170H
	add	eax, ebx
; Line 1201
	cmp	DWORD PTR _plr[ebx+21184], 11		; 0000000bH
	je	SHORT $L85593
; Line 1202
	cmp	DWORD PTR _plr[eax+18240], -1
	jne	SHORT $L85596
; Line 1203
	lea	eax, DWORD PTR _plr[eax+18232]
	mov	esi, 368				; 00000170H
	sub	ebx, eax
	lea	ebx, DWORD PTR _plr[ebx+21176]
$L86722:
	mov	cl, BYTE PTR [eax+ebx]
	mov	BYTE PTR [eax], cl
	inc	eax
	dec	esi
	jne	SHORT $L86722
; Line 1204
	jmp	$LABEL_225$85602
$L85596:
; Line 1205
	lea	edx, DWORD PTR _plr[ebx+21176]
	lea	ecx, DWORD PTR _plr[eax+18232]
	call	@SwapItem@8
; Line 1206
	cmp	DWORD PTR _plr[ebx+21184], 11		; 0000000bH
	mov	DWORD PTR _cursor_ida$[ebp], eax
	jne	$LABEL_225$85602
; Line 1207
	mov	ecx, esi
	call	@CalculateGold@4
	mov	DWORD PTR _plr[ebx+460], eax
; Line 1209
	jmp	$LABEL_225$85602
$L85593:
; Line 1211
	mov	ecx, DWORD PTR _plr[eax+18240]
; Line 1212
	cmp	ecx, -1
	je	$L85605
; Line 1213
	cmp	ecx, 11					; 0000000bH
	jne	$L85606
; Line 1214
	mov	ecx, DWORD PTR _plr[eax+18428]
; Line 1215
	mov	edx, DWORD PTR _plr[ebx+21372]
	mov	DWORD PTR _v55$[ebp], ecx
; Line 1216
	add	edx, ecx
; Line 1217
	mov	ecx, 5000				; 00001388H
	cmp	edx, ecx
	jg	SHORT $L85609
; Line 1218
	mov	DWORD PTR _plr[eax+18428], edx
; Line 1219
	mov	ecx, DWORD PTR _plr[ebx+21372]
	add	DWORD PTR _plr[ebx+460], ecx
; Line 1220
	cmp	edx, 2500				; 000009c4H
	jge	SHORT $L85612
; Line 1221
	cmp	edx, 1000				; 000003e8H
	jle	SHORT $L85613
; Line 1222
	mov	DWORD PTR _plr[eax+18424], 5
; Line 1223
	jmp	$LABEL_225$85602
$L85613:
; Line 1224
	mov	DWORD PTR _plr[eax+18424], 4
; Line 1225
	jmp	$LABEL_225$85602
$L85612:
; Line 1226
	mov	DWORD PTR _plr[eax+18424], 6
; Line 1228
	jmp	$LABEL_225$85602
$L85609:
; Line 1230
	mov	esi, ecx
; Line 1231
	add	edx, -5000				; ffffec78H
	sub	esi, DWORD PTR _v55$[ebp]
	mov	DWORD PTR _plr[ebx+21372], edx
	add	DWORD PTR _plr[ebx+460], esi
; Line 1232
	mov	DWORD PTR _plr[eax+18428], ecx
; Line 1233
	mov	DWORD PTR _plr[eax+18424], 6
; Line 1234
	mov	ebx, DWORD PTR _plr[ebx+21372]
; Line 1235
	cmp	ebx, 2500				; 000009c4H
	jl	SHORT $L85626
; Line 1236
	mov	DWORD PTR _cursor_ida$[ebp], 18		; 00000012H
; Line 1237
	jmp	SHORT $LABEL_225$85602
$L85626:
; Line 1239
	xor	eax, eax
	cmp	ebx, 1000				; 000003e8H
	setg	al
	add	eax, 16					; 00000010H
; Line 1240
	jmp	SHORT $L85627
$L85606:
; Line 1241
	mov	ecx, DWORD PTR _plr[ebx+21372]
; Line 1242
	lea	edx, DWORD PTR _plr[ebx+21176]
	add	DWORD PTR _plr[ebx+460], ecx
	lea	ecx, DWORD PTR _plr[eax+18232]
	call	@SwapItem@8
$L85627:
; Line 1244
	mov	DWORD PTR _cursor_ida$[ebp], eax
; Line 1245
	jmp	SHORT $LABEL_225$85602
$L85605:
; Line 1247
	lea	eax, DWORD PTR _plr[eax+18232]
	mov	ecx, ebx
	sub	ecx, eax
	mov	edi, 368				; 00000170H
	lea	esi, DWORD PTR _plr[ecx+21176]
$L86731:
	mov	cl, BYTE PTR [eax+esi]
	mov	BYTE PTR [eax], cl
	inc	eax
	dec	edi
	jne	SHORT $L86731
; Line 1248
	mov	eax, DWORD PTR _plr[ebx+21372]
	add	DWORD PTR _plr[ebx+460], eax
$LABEL_225$85602:
; Line 1250
	mov	DWORD PTR _drawsbarflag, 1
$LABEL_226$85479:
; Line 1253
	mov	esi, DWORD PTR _pnum$[ebp]
	xor	edx, edx
	inc	edx
	mov	ecx, esi
	call	@CalcPlrInv@8
; Line 1254
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L85631
; Line 1255
	cmp	DWORD PTR _cursor_ida$[ebp], 1
	jne	SHORT $L85632
; Line 1256
	mov	eax, DWORD PTR _cursH
	sar	eax, 1
	add	eax, DWORD PTR _MouseY
	push	eax
	mov	eax, DWORD PTR _cursW
	sar	eax, 1
	add	eax, DWORD PTR _MouseX
	push	eax
	call	DWORD PTR __imp__SetCursorPos@8
$L85632:
; Line 1257
	mov	ecx, DWORD PTR _cursor_ida$[ebp]
	call	@SetCursor_@4
$L85631:
	pop	edi
	pop	esi
	pop	ebx
; Line 1340
	leave
	ret	4
$L86793:
	DD	$L85471
	DD	$L85492
	DD	$L85518
	DD	$L85520
	DD	$L85522
	DD	$L85527
	DD	$L85529
	DD	$L85592
@CheckInvPaste@12 ENDP
_TEXT	ENDS
PUBLIC	@CheckInvSwap@24
EXTRN	_item:BYTE
EXTRN	@RecreateItem@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT @CheckInvSwap@24
_TEXT	SEGMENT
_pnum$ = -4
_idx$ = 8
_wCI$ = 12
_seed$ = 16
_bId$ = 20
@CheckInvSwap@24 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _bLoc$ = dl
; Line 1347
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 1350
	push	0
	push	DWORD PTR _seed$[ebp]
	mov	bl, dl
	mov	edx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _pnum$[ebp], ecx
	push	DWORD PTR _wCI$[ebp]
	push	127					; 0000007fH
	pop	ecx
	call	@RecreateItem@20
; Line 1352
	mov	eax, DWORD PTR _pnum$[ebp]
; Line 1353
	mov	esi, OFFSET FLAT:_item+46736
	imul	eax, 21720				; 000054d8H
	add	eax, OFFSET FLAT:_plr
; Line 1355
	cmp	DWORD PTR _bId$[ebp], 0
	push	92					; 0000005cH
	lea	edx, DWORD PTR [eax+21176]
	pop	ecx
	mov	edi, edx
	rep movsd
	je	SHORT $L85686
; Line 1356
	mov	DWORD PTR [eax+21232], 1
$L85686:
; Line 1359
	cmp	bl, 7
	jae	SHORT $L85690
; Line 1360
	movzx	ecx, bl
	imul	ecx, 368				; 00000170H
	push	92					; 0000005cH
	mov	esi, edx
	lea	edi, DWORD PTR [ecx+eax+892]
	pop	ecx
; Line 1362
	cmp	bl, 4
	rep movsd
	jne	SHORT $L85688
	cmp	BYTE PTR [eax+21365], 2
	jne	SHORT $L85690
; Line 1363
	or	DWORD PTR [eax+2740], -1
; Line 1364
	jmp	SHORT $L85690
$L85688:
	cmp	bl, 5
	jne	SHORT $L85690
	cmp	BYTE PTR [eax+21365], 2
	jne	SHORT $L85690
; Line 1365
	or	DWORD PTR [eax+2372], -1
$L85690:
; Line 1369
	mov	ecx, DWORD PTR _pnum$[ebp]
	xor	edx, edx
	inc	edx
	call	@CalcPlrInv@8
	pop	edi
	pop	esi
	pop	ebx
; Line 1370
	leave
	ret	16					; 00000010H
@CheckInvSwap@24 ENDP
_TEXT	ENDS
PUBLIC	@CheckInvCut@12
PUBLIC	@CheckItemStats@4
EXTRN	_dropGoldFlag:DWORD
EXTRN	_dropGoldValue:DWORD
; Function compile flags: /Ogsy
;	COMDAT @CheckInvCut@12
_TEXT	SEGMENT
_pnum$ = -8
_mx$ = -4
_my$ = 8
_r$ = -12
@CheckInvCut@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _mx$ = edx
; Line 1373
	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	mov	ebp, ecx
	push	esi
	mov	DWORD PTR _pnum$[esp+24], ebp
; Line 1379
	imul	ebp, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ebp], 3
	mov	DWORD PTR _mx$[esp+24], edx
	jg	$L85738
; Line 1383
	xor	ecx, ecx
	cmp	DWORD PTR _dropGoldFlag, ecx
	je	SHORT $L85706
; Line 1384
	mov	DWORD PTR _dropGoldFlag, ecx
; Line 1385
	mov	DWORD PTR _dropGoldValue, ecx
$L85706:
; Line 1391
	xor	ebx, ebx
	mov	DWORD PTR _r$[esp+24], ebx
$L85708:
	test	ecx, ecx
	jne	SHORT $L86806
; Line 1396
	mov	eax, DWORD PTR _InvRect[ebx*8]
	cmp	edx, eax
	jl	SHORT $L85709
	add	eax, 29					; 0000001dH
	cmp	edx, eax
	jge	SHORT $L85709
	mov	eax, DWORD PTR _InvRect[ebx*8+4]
	lea	esi, DWORD PTR [eax-29]
	cmp	DWORD PTR _my$[esp+20], esi
	jl	SHORT $L85709
	cmp	DWORD PTR _my$[esp+20], eax
	jge	SHORT $L85709
; Line 1397
	inc	ecx
; Line 1398
	dec	ebx
$L85709:
	inc	ebx
	cmp	ebx, 73					; 00000049H
	mov	DWORD PTR _r$[esp+24], ebx
	jb	SHORT $L85708
; Line 1402
	test	ecx, ecx
	je	$L85738
$L86806:
; Line 1407
	or	DWORD PTR _plr[ebp+21184], -1
	push	edi
; Line 1412
	test	ebx, ebx
	jl	SHORT $L85713
	cmp	ebx, 3
	jg	SHORT $L85713
	cmp	DWORD PTR _plr[ebp+900], -1
	je	SHORT $L85713
; Line 1413
	xor	dl, dl
	xor	ecx, ecx
	call	@NetSendCmdDelItem@8
; Line 1414
	lea	esi, DWORD PTR _plr[ebp+892]
	lea	edi, DWORD PTR _plr[ebp+21176]
	push	92					; 0000005cH
	pop	ecx
	rep movsd
; Line 1415
	or	DWORD PTR _plr[ebp+900], -1
$L85713:
; Line 1420
	cmp	ebx, 4
	jne	SHORT $L85714
	cmp	DWORD PTR _plr[ebp+1268], -1
	je	$L85735
; Line 1421
	mov	dl, 1
	xor	ecx, ecx
	call	@NetSendCmdDelItem@8
; Line 1422
	lea	esi, DWORD PTR _plr[ebp+1260]
	lea	edi, DWORD PTR _plr[ebp+21176]
	push	92					; 0000005cH
	pop	ecx
	rep movsd
; Line 1423
	or	DWORD PTR _plr[ebp+1268], -1
$L85714:
; Line 1428
	cmp	ebx, 5
	jne	SHORT $L85715
	cmp	DWORD PTR _plr[ebp+1636], -1
	je	$L85735
; Line 1429
	mov	dl, 2
	xor	ecx, ecx
	call	@NetSendCmdDelItem@8
; Line 1430
	lea	esi, DWORD PTR _plr[ebp+1628]
	lea	edi, DWORD PTR _plr[ebp+21176]
	push	92					; 0000005cH
	pop	ecx
	rep movsd
; Line 1431
	or	DWORD PTR _plr[ebp+1636], -1
$L85715:
; Line 1436
	cmp	ebx, 6
	jne	SHORT $L85716
	cmp	DWORD PTR _plr[ebp+2004], -1
	je	$L85735
; Line 1437
	mov	dl, 3
	xor	ecx, ecx
	call	@NetSendCmdDelItem@8
; Line 1438
	lea	esi, DWORD PTR _plr[ebp+1996]
	lea	edi, DWORD PTR _plr[ebp+21176]
	push	92					; 0000005cH
	pop	ecx
	rep movsd
; Line 1439
	or	DWORD PTR _plr[ebp+2004], -1
$L85716:
; Line 1445
	cmp	ebx, 7
	jl	SHORT $L85717
	cmp	ebx, 12					; 0000000cH
	jg	SHORT $L85717
	cmp	DWORD PTR _plr[ebp+2372], -1
	je	SHORT $L85717
; Line 1446
	mov	dl, 4
	xor	ecx, ecx
	call	@NetSendCmdDelItem@8
; Line 1447
	lea	esi, DWORD PTR _plr[ebp+2364]
	lea	edi, DWORD PTR _plr[ebp+21176]
	push	92					; 0000005cH
	pop	ecx
	rep movsd
; Line 1448
	or	DWORD PTR _plr[ebp+2372], -1
$L85717:
; Line 1454
	cmp	ebx, 13					; 0000000dH
	jl	SHORT $L85718
	cmp	ebx, 18					; 00000012H
	jg	SHORT $L85718
	cmp	DWORD PTR _plr[ebp+2740], -1
	je	SHORT $L85718
; Line 1455
	mov	dl, 5
	xor	ecx, ecx
	call	@NetSendCmdDelItem@8
; Line 1456
	lea	esi, DWORD PTR _plr[ebp+2732]
	lea	edi, DWORD PTR _plr[ebp+21176]
	push	92					; 0000005cH
	pop	ecx
	rep movsd
; Line 1457
	or	DWORD PTR _plr[ebp+2740], -1
$L85718:
; Line 1463
	cmp	ebx, 19					; 00000013H
	jl	SHORT $L85719
	cmp	ebx, 24					; 00000018H
	jg	SHORT $L85719
	cmp	DWORD PTR _plr[ebp+3108], -1
	je	SHORT $L85719
; Line 1464
	mov	dl, 6
	xor	ecx, ecx
	call	@NetSendCmdDelItem@8
; Line 1465
	lea	esi, DWORD PTR _plr[ebp+3100]
	lea	edi, DWORD PTR _plr[ebp+21176]
	push	92					; 0000005cH
	pop	ecx
	rep movsd
; Line 1466
	or	DWORD PTR _plr[ebp+3108], -1
$L85719:
; Line 1469
	cmp	ebx, 25					; 00000019H
	jl	$L85731
	cmp	ebx, 64					; 00000040H
	jg	$L85731
; Line 1470
	mov	al, BYTE PTR _plr[ebx+ebp+18167]
; Line 1471
	test	al, al
	je	$L85731
; Line 1472
	movsx	edx, al
; Line 1473
	jg	SHORT $L85722
; Line 1474
	neg	edx
$L85722:
; Line 1477
	xor	esi, esi
$L85723:
	lea	eax, DWORD PTR _plr[esi+ebp+18192]
; Line 1478
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, edx
	je	SHORT $L85727
	mov	edi, edx
	neg	edi
	cmp	ecx, edi
	jne	SHORT $L85724
$L85727:
; Line 1479
	and	BYTE PTR [eax], 0
$L85724:
; Line 1477
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85723
; Line 1483
	dec	edx
; Line 1485
	push	92					; 0000005cH
	mov	eax, edx
	lea	edi, DWORD PTR _plr[ebp+21176]
	imul	eax, 368				; 00000170H
	pop	ecx
	lea	ebx, DWORD PTR _plr[eax+ebp+3468]
	mov	esi, ebx
	rep movsd
; Line 1486
	dec	DWORD PTR _plr[ebp+18188]
	mov	eax, DWORD PTR _plr[ebp+18188]
; Line 1488
	test	eax, eax
	jle	SHORT $L86809
	cmp	eax, edx
	je	SHORT $L86809
; Line 1489
	imul	eax, 368				; 00000170H
	push	92					; 0000005cH
	mov	edi, ebx
	lea	esi, DWORD PTR _plr[eax+ebp+3468]
	pop	ecx
	rep movsd
; Line 1491
	xor	esi, esi
$L85729:
; Line 1492
	mov	ecx, DWORD PTR _plr[ebp+18188]
	lea	eax, DWORD PTR _plr[esi+ebp+18192]
	inc	ecx
	movsx	edi, BYTE PTR [eax]
	cmp	edi, ecx
	jne	SHORT $L85732
; Line 1493
	mov	cl, dl
	inc	cl
	mov	BYTE PTR [eax], cl
$L85732:
; Line 1495
	movsx	edi, BYTE PTR [eax]
	or	ecx, -1
	sub	ecx, DWORD PTR _plr[ebp+18188]
	cmp	edi, ecx
	jne	SHORT $L85730
; Line 1496
	or	cl, -1
	sub	cl, dl
	mov	BYTE PTR [eax], cl
$L85730:
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85729
$L86809:
; Line 1491
	mov	ebx, DWORD PTR _r$[esp+28]
$L85731:
; Line 1503
	cmp	ebx, 65					; 00000041H
	jl	SHORT $L85735
; Line 1504
	lea	eax, DWORD PTR [ebx-65]
; Line 1505
	imul	eax, 368				; 00000170H
	add	eax, ebp
	lea	edx, DWORD PTR _plr[eax+18240]
	cmp	DWORD PTR [edx], -1
	je	SHORT $L85735
; Line 1506
	push	92					; 0000005cH
	lea	esi, DWORD PTR _plr[eax+18232]
	lea	edi, DWORD PTR _plr[ebp+21176]
	pop	ecx
	rep movsd
; Line 1507
	or	DWORD PTR [edx], -1
; Line 1508
	mov	DWORD PTR _drawsbarflag, 1
$L85735:
; Line 1512
	mov	eax, DWORD PTR _plr[ebp+21184]
	pop	edi
	cmp	eax, -1
	je	SHORT $L85738
; Line 1514
	mov	esi, DWORD PTR _pnum$[esp+24]
	cmp	eax, 11					; 0000000bH
	jne	SHORT $L85737
	mov	ecx, esi
	call	@CalculateGold@4
	mov	DWORD PTR _plr[ebp+460], eax
$L85737:
; Line 1517
	xor	edx, edx
	mov	ecx, esi
	inc	edx
	call	@CalcPlrInv@8
; Line 1518
	mov	ecx, esi
	call	@CheckItemStats@4
; Line 1520
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L85738
; Line 1521
	push	50					; 00000032H
	pop	ecx
	call	@PlaySFX@4
; Line 1522
	mov	ecx, DWORD PTR _plr[ebp+21368]
	add	ecx, 12					; 0000000cH
	call	@SetCursor_@4
; Line 1523
	mov	eax, DWORD PTR _cursH
	mov	ecx, DWORD PTR _MouseY
	sar	eax, 1
	sub	ecx, eax
	mov	eax, DWORD PTR _mx$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _cursW
	sar	ecx, 1
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__SetCursorPos@8
$L85738:
	pop	esi
	pop	ebp
	pop	ebx
; Line 1526
	add	esp, 12					; 0000000cH
	ret	4
@CheckInvCut@12 ENDP
_TEXT	ENDS
PUBLIC	@inv_update_rem_item@8
; Function compile flags: /Ogsy
;	COMDAT @inv_update_rem_item@8
_TEXT	SEGMENT
@inv_update_rem_item@8 PROC NEAR			; COMDAT
; _pnum$ = ecx
; _iv$ = dl
; Line 1532
	cmp	dl, 7
	jae	SHORT $L85745
; Line 1533
	movzx	eax, dl
	mov	edx, ecx
	imul	eax, 368				; 00000170H
	imul	edx, 21720				; 000054d8H
	or	DWORD PTR _plr[eax+edx+900], -1
$L85745:
; Line 1538
	mov	eax, ecx
	xor	edx, edx
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax], 8
	je	SHORT $L85746
; Line 1539
	inc	edx
$L85746:
; Line 1542
	jmp	@CalcPlrInv@8
@inv_update_rem_item@8 ENDP
_TEXT	ENDS
PUBLIC	@RemoveInvItem@8
; Function compile flags: /Ogsy
;	COMDAT @RemoveInvItem@8
_TEXT	SEGMENT
_pnum$ = -4
@RemoveInvItem@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _iv$ = edx
; Line 1546
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	ebx, ecx
	mov	DWORD PTR _pnum$[ebp], ebx
; Line 1549
	inc	edx
; Line 1551
	xor	ecx, ecx
	push	esi
	imul	ebx, 21720				; 000054d8H
	push	edi
$L85754:
	lea	eax, DWORD PTR _plr[ebx+ecx+18192]
; Line 1552
	movsx	esi, BYTE PTR [eax]
	cmp	esi, edx
	je	SHORT $L85758
	mov	edi, edx
	neg	edi
	cmp	esi, edi
	jne	SHORT $L85755
$L85758:
; Line 1553
	and	BYTE PTR [eax], 0
$L85755:
; Line 1551
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85754
; Line 1557
	dec	edx
; Line 1558
	dec	DWORD PTR _plr[ebx+18188]
	mov	eax, DWORD PTR _plr[ebx+18188]
; Line 1560
	test	eax, eax
	jle	SHORT $L85762
	cmp	eax, edx
	je	SHORT $L85762
; Line 1561
	imul	eax, 368				; 00000170H
	push	92					; 0000005cH
	lea	esi, DWORD PTR _plr[eax+ebx+3468]
	mov	eax, edx
	imul	eax, 368				; 00000170H
	pop	ecx
	lea	edi, DWORD PTR _plr[eax+ebx+3468]
	rep movsd
; Line 1563
	xor	edi, edi
$L85760:
; Line 1564
	mov	eax, DWORD PTR _plr[ebx+18188]
	lea	esi, DWORD PTR _plr[ebx+edi+18192]
	inc	eax
	movsx	ecx, BYTE PTR [esi]
	cmp	ecx, eax
	jne	SHORT $L85763
; Line 1565
	mov	al, dl
	inc	al
	mov	BYTE PTR [esi], al
$L85763:
; Line 1567
	movsx	ecx, BYTE PTR [esi]
	or	eax, -1
	sub	eax, DWORD PTR _plr[ebx+18188]
	cmp	ecx, eax
	jne	SHORT $L85761
; Line 1568
	or	al, -1
	sub	al, dl
	mov	BYTE PTR [esi], al
$L85761:
	inc	edi
	cmp	edi, 40					; 00000028H
	jl	SHORT $L85760
$L85762:
; Line 1573
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@CalcPlrScrolls@4
; Line 1575
	cmp	BYTE PTR _plr[ebx+184], 2
	pop	edi
	pop	esi
	jne	SHORT $L85766
; Line 1576
	mov	eax, DWORD PTR _plr[ebx+180]
	cmp	eax, -1
	je	SHORT $L85766
; Line 1581
	lea	ecx, DWORD PTR [eax-1]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	cdq
	and	eax, DWORD PTR _plr[ebx+280]
	and	edx, DWORD PTR _plr[ebx+284]
	or	eax, edx
	jne	SHORT $L85767
; Line 1582
	or	DWORD PTR _plr[ebx+180], -1
$L85767:
; Line 1585
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
$L85766:
	pop	ebx
; Line 1588
	leave
	ret	0
@RemoveInvItem@8 ENDP
_TEXT	ENDS
PUBLIC	@RemoveSpdBarItem@8
; Function compile flags: /Ogsy
;	COMDAT @RemoveSpdBarItem@8
_TEXT	SEGMENT
@RemoveSpdBarItem@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _iv$ = edx
; Line 1591
	push	esi
; Line 1592
	mov	esi, ecx
	imul	esi, 21720				; 000054d8H
	imul	edx, 368				; 00000170H
	or	DWORD PTR _plr[edx+esi+18240], -1
; Line 1594
	call	@CalcPlrScrolls@4
; Line 1596
	cmp	BYTE PTR _plr[esi+184], 2
	jne	SHORT $L85775
; Line 1597
	mov	eax, DWORD PTR _plr[esi+180]
	cmp	eax, -1
	je	SHORT $L85775
; Line 1602
	lea	ecx, DWORD PTR [eax-1]
	xor	eax, eax
	inc	eax
	shl	eax, cl
	cdq
	and	eax, DWORD PTR _plr[esi+280]
	and	edx, DWORD PTR _plr[esi+284]
	or	eax, edx
	jne	SHORT $L85775
; Line 1603
	or	DWORD PTR _plr[esi+180], -1
$L85775:
; Line 1607
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	pop	esi
; Line 1608
	ret	0
@RemoveSpdBarItem@8 ENDP
_TEXT	ENDS
PUBLIC	_CheckInvItem
EXTRN	_pcurs:DWORD
; Function compile flags: /Ogsy
;	COMDAT _CheckInvItem
_TEXT	SEGMENT
_CheckInvItem PROC NEAR					; COMDAT
; Line 1612
	cmp	DWORD PTR _pcurs, 12			; 0000000cH
; Line 1613
	mov	ecx, DWORD PTR _myplr
	mov	edx, DWORD PTR _MouseX
	push	DWORD PTR _MouseY
	jl	SHORT $L85777
	call	@CheckInvPaste@12
; Line 1617
	ret	0
$L85777:
; Line 1615
	call	@CheckInvCut@12
; Line 1617
	ret	0
_CheckInvItem ENDP
_TEXT	ENDS
PUBLIC	_CheckInvScrn
; Function compile flags: /Ogsy
;	COMDAT _CheckInvScrn
_TEXT	SEGMENT
_CheckInvScrn PROC NEAR					; COMDAT
; Line 1622
	mov	eax, DWORD PTR _MouseX
	cmp	eax, 190				; 000000beH
	jle	SHORT $L85780
	cmp	eax, 437				; 000001b5H
	jge	SHORT $L85780
	mov	eax, DWORD PTR _MouseY
	cmp	eax, 352				; 00000160H
	jle	SHORT $L85780
	cmp	eax, 385				; 00000181H
	jge	SHORT $L85780
; Line 1623
	jmp	_CheckInvItem
$L85780:
; Line 1625
	ret	0
_CheckInvScrn ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @CheckItemStats@4
_TEXT	SEGMENT
@CheckItemStats@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1628
	mov	eax, ecx
; Line 1629
	imul	eax, 21720				; 000054d8H
	add	eax, OFFSET FLAT:_plr
; Line 1635
	movsx	ecx, BYTE PTR [eax+21528]
	and	DWORD PTR [eax+21532], 0
	cmp	DWORD PTR [eax+356], ecx
	jl	SHORT $L85785
	movzx	ecx, BYTE PTR [eax+21529]
	cmp	DWORD PTR [eax+364], ecx
	jl	SHORT $L85785
	movsx	ecx, BYTE PTR [eax+21530]
	cmp	DWORD PTR [eax+372], ecx
	jl	SHORT $L85785
; Line 1636
	mov	DWORD PTR [eax+21532], 1
$L85785:
; Line 1638
	ret	0
@CheckItemStats@4 ENDP
_TEXT	ENDS
PUBLIC	@CheckBookLevel@4
EXTRN	_spelldata:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CheckBookLevel@4
_TEXT	SEGMENT
@CheckBookLevel@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1648
	imul	ecx, 21720				; 000054d8H
	push	ebx
	push	esi
	cmp	DWORD PTR _plr[ecx+21396], 24		; 00000018H
	push	edi
	jne	SHORT $L85794
; Line 1649
	mov	esi, DWORD PTR _plr[ecx+21400]
; Line 1650
	mov	eax, esi
	imul	eax, 56					; 00000038H
	mov	bl, BYTE PTR _spelldata[eax+28]
; Line 1651
	mov	BYTE PTR _plr[ecx+21529], bl
; Line 1652
	mov	al, BYTE PTR _plr[ecx+esi+193]
; Line 1653
	test	al, al
	movsx	edi, al
	je	SHORT $L85794
	push	ebp
$L85795:
; Line 1655
	movzx	eax, bl
	push	100					; 00000064H
	lea	eax, DWORD PTR [eax+eax*4]
	pop	esi
	shl	eax, 2
	cdq
	idiv	esi
; Line 1657
	push	100					; 00000064H
	pop	ebp
	add	bl, al
	dec	edi
	movzx	esi, bl
	lea	eax, DWORD PTR [esi+esi*4]
	shl	eax, 2
	cdq
	idiv	ebp
	add	eax, esi
	cmp	eax, 255				; 000000ffH
	jle	SHORT $L85796
; Line 1658
	or	bl, 255					; 000000ffH
; Line 1659
	xor	edi, edi
$L85796:
; Line 1661
	test	edi, edi
	jne	SHORT $L85795
; Line 1662
	mov	BYTE PTR _plr[ecx+21529], bl
	pop	ebp
$L85794:
	pop	edi
	pop	esi
	pop	ebx
; Line 1665
	ret	0
@CheckBookLevel@4 ENDP
_TEXT	ENDS
PUBLIC	@CheckQuestItem@4
EXTRN	_sfxdelay:DWORD
EXTRN	_sfxdnum:DWORD
EXTRN	_quests:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CheckQuestItem@4
_TEXT	SEGMENT
@CheckQuestItem@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1673
	imul	ecx, 21720				; 000054d8H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _plr[ecx+21536]
; Line 1674
	push	10					; 0000000aH
	pop	edx
	cmp	esi, edx
	jne	SHORT $L85804
; Line 1675
	mov	BYTE PTR _quests+194, 3
$L85804:
; Line 1676
	xor	ebx, ebx
	inc	ebx
	cmp	esi, 17					; 00000011H
	jne	SHORT $L85805
	cmp	BYTE PTR _quests+26, 2
	jne	SHORT $L85805
	cmp	BYTE PTR _quests+39, 3
	jne	SHORT $L85805
; Line 1678
	mov	al, BYTE PTR _plr[ecx+352]
	mov	DWORD PTR _sfxdelay, edx
	test	al, al
	jne	SHORT $L85806
; Line 1679
	mov	DWORD PTR _sfxdnum, 815			; 0000032fH
; Line 1680
	jmp	SHORT $L85810
$L85806:
	cmp	al, bl
	jne	SHORT $L85808
; Line 1681
	mov	DWORD PTR _sfxdnum, 706			; 000002c2H
; Line 1682
	jmp	SHORT $L85810
$L85808:
	cmp	al, 2
	jne	SHORT $L85810
; Line 1683
	mov	DWORD PTR _sfxdnum, 603			; 0000025bH
$L85810:
; Line 1685
	mov	BYTE PTR _quests+39, 4
$L85805:
; Line 1687
	cmp	esi, 16					; 00000010H
	jne	SHORT $L85818
; Line 1688
	cmp	BYTE PTR _quests+242, bl
	jne	SHORT $L85812
; Line 1689
	mov	BYTE PTR _quests+242, 2
; Line 1690
	mov	BYTE PTR _quests+255, bl
$L85812:
; Line 1692
	cmp	DWORD PTR _quests+260, ebx
	jne	SHORT $L85818
; Line 1694
	mov	al, BYTE PTR _plr[ecx+352]
	mov	DWORD PTR _sfxdelay, edx
	test	al, al
	jne	SHORT $L85814
; Line 1695
	mov	DWORD PTR _sfxdnum, 809			; 00000329H
; Line 1696
	jmp	SHORT $L85818
$L85814:
	cmp	al, bl
	jne	SHORT $L85816
; Line 1697
	mov	DWORD PTR _sfxdnum, 700			; 000002bcH
; Line 1698
	jmp	SHORT $L85818
$L85816:
	cmp	al, 2
	jne	SHORT $L85818
; Line 1699
	mov	DWORD PTR _sfxdnum, 597			; 00000255H
$L85818:
; Line 1703
	cmp	esi, 15					; 0000000fH
	jne	SHORT $L85824
; Line 1705
	mov	al, BYTE PTR _plr[ecx+352]
	mov	DWORD PTR _sfxdelay, 30			; 0000001eH
	test	al, al
	jne	SHORT $L85820
; Line 1706
	mov	DWORD PTR _sfxdnum, 808			; 00000328H
; Line 1707
	jmp	SHORT $L85824
$L85820:
	cmp	al, bl
	jne	SHORT $L85822
; Line 1708
	mov	DWORD PTR _sfxdnum, 699			; 000002bbH
; Line 1709
	jmp	SHORT $L85824
$L85822:
	cmp	al, 2
	jne	SHORT $L85824
; Line 1710
	mov	DWORD PTR _sfxdnum, 596			; 00000254H
$L85824:
; Line 1713
	cmp	esi, 9
	jne	SHORT $L85832
; Line 1714
	cmp	BYTE PTR _quests+2, bl
	jne	SHORT $L85826
; Line 1715
	mov	BYTE PTR _quests+2, 2
; Line 1716
	mov	BYTE PTR _quests+15, bl
$L85826:
; Line 1718
	cmp	DWORD PTR _quests+20, ebx
	jne	SHORT $L85832
; Line 1720
	mov	al, BYTE PTR _plr[ecx+352]
	mov	DWORD PTR _sfxdelay, edx
	test	al, al
	jne	SHORT $L85828
; Line 1721
	mov	DWORD PTR _sfxdnum, 807			; 00000327H
; Line 1722
	jmp	SHORT $L85832
$L85828:
	cmp	al, bl
	jne	SHORT $L85830
; Line 1723
	mov	DWORD PTR _sfxdnum, 698			; 000002baH
; Line 1724
	jmp	SHORT $L85832
$L85830:
	cmp	al, 2
	jne	SHORT $L85832
; Line 1725
	mov	DWORD PTR _sfxdnum, 595			; 00000253H
$L85832:
; Line 1729
	cmp	esi, 28					; 0000001cH
	jne	SHORT $L85838
; Line 1732
	mov	cl, BYTE PTR _plr[ecx+352]
	mov	BYTE PTR _quests+218, 3
	test	cl, cl
	mov	DWORD PTR _sfxdelay, 20			; 00000014H
	jne	SHORT $L85834
; Line 1733
	mov	DWORD PTR _sfxdnum, 811			; 0000032bH
; Line 1734
	jmp	SHORT $L85838
$L85834:
	cmp	cl, bl
	jne	SHORT $L85836
; Line 1735
	mov	DWORD PTR _sfxdnum, 702			; 000002beH
; Line 1736
	jmp	SHORT $L85838
$L85836:
	cmp	cl, 2
	jne	SHORT $L85838
; Line 1737
	mov	DWORD PTR _sfxdnum, 599			; 00000257H
$L85838:
	pop	esi
	pop	ebx
; Line 1740
	ret	0
@CheckQuestItem@4 ENDP
_TEXT	ENDS
PUBLIC	@InvGetItem@8
EXTRN	_dItem:BYTE
EXTRN	_pcursitem:BYTE
EXTRN	_itemactive:BYTE
EXTRN	_numitems:DWORD
EXTRN	@DeleteItem@8:NEAR
EXTRN	@NetSendCmdPItem@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @InvGetItem@8
_TEXT	SEGMENT
_pnum$ = -8
_ii$ = -4
@InvGetItem@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _ii$ = edx
; Line 1744
	push	ecx
	push	ecx
	push	ebp
; Line 1754
	xor	eax, eax
	cmp	DWORD PTR _dropGoldFlag, eax
	mov	ebp, edx
	mov	DWORD PTR _ii$[esp+12], ebp
	mov	DWORD PTR _pnum$[esp+12], ecx
	je	SHORT $L85850
; Line 1755
	mov	DWORD PTR _dropGoldFlag, eax
; Line 1756
	mov	DWORD PTR _dropGoldValue, eax
$L85850:
; Line 1759
	imul	ebp, 368				; 00000170H
	mov	eax, DWORD PTR _item[ebp+12]
	mov	edx, DWORD PTR _item[ebp+16]
	imul	eax, 112				; 00000070H
	cmp	BYTE PTR _dItem[eax+edx], 0
	je	$L85851
; Line 1760
	mov	eax, DWORD PTR _myplr
	cmp	eax, ecx
	jne	SHORT $L85852
	cmp	DWORD PTR _pcurs, 12			; 0000000cH
	jl	SHORT $L85852
; Line 1761
	imul	eax, 21720				; 000054d8H
	mov	dl, 86					; 00000056H
	mov	cl, BYTE PTR _plr[eax+60]
	mov	al, BYTE PTR _plr[eax+56]
	push	ecx
	xor	ecx, ecx
	push	eax
	inc	ecx
	call	@NetSendCmdPItem@16
$L85852:
	push	ebx
; Line 1763
	mov	ebx, DWORD PTR _pnum$[esp+16]
	imul	ebx, 21720				; 000054d8H
	and	BYTE PTR _item[ebp+5], 127		; 0000007fH
	mov	eax, ebp
	push	esi
	sub	eax, ebx
	push	edi
	lea	edi, DWORD PTR _plr[ebx+21176]
	sub	eax, OFFSET FLAT:_plr+21176
	push	92					; 0000005cH
	pop	ecx
	lea	esi, DWORD PTR _item[eax+edi]
	rep movsd
; Line 1764
	mov	ecx, DWORD PTR _pnum$[esp+24]
	call	@CheckQuestItem@4
; Line 1765
	mov	ecx, DWORD PTR _pnum$[esp+24]
	call	@CheckBookLevel@4
; Line 1766
	mov	ecx, DWORD PTR _pnum$[esp+24]
	call	@CheckItemStats@4
; Line 1768
	mov	eax, DWORD PTR _item[ebp+12]
	mov	ecx, DWORD PTR _item[ebp+16]
	imul	eax, 112				; 00000070H
	xor	edx, edx
	and	BYTE PTR _dItem[eax+ecx], dl
; Line 1769
	cmp	DWORD PTR _numitems, edx
	jle	SHORT $L85857
$L85856:
; Line 1770
	mov	ecx, DWORD PTR _itemactive[edx*4]
; Line 1771
	cmp	ecx, DWORD PTR _ii$[esp+24]
	jne	SHORT $L85858
; Line 1772
	call	@DeleteItem@8
; Line 1773
	xor	edx, edx
; Line 1774
	jmp	SHORT $L85859
$L85858:
; Line 1775
	inc	edx
$L85859:
; Line 1769
	cmp	edx, DWORD PTR _numitems
	jl	SHORT $L85856
$L85857:
; Line 1780
	mov	ecx, DWORD PTR _plr[ebx+21368]
	or	BYTE PTR _pcursitem, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	add	ecx, 12					; 0000000cH
; Line 1782
	add	esp, 8
	jmp	@SetCursor_@4
$L85851:
	pop	ebp
	pop	ecx
	pop	ecx
	ret	0
@InvGetItem@8 ENDP
_TEXT	ENDS
PUBLIC	@AutoGetItem@8
EXTRN	@random@8:NEAR
EXTRN	@RespawnItem@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @AutoGetItem@8
_TEXT	SEGMENT
_ii$ = -16
_iia$ = -20
_v24$ = -24
_v26$ = -28
_v29$ = -8
@AutoGetItem@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _ii$ = edx
; Line 1787
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, ecx
; Line 1818
	xor	ecx, ecx
	push	ebp
	cmp	DWORD PTR _dropGoldFlag, ecx
	mov	eax, edx
	push	esi
	push	edi
	mov	DWORD PTR _ii$[esp+44], eax
	je	SHORT $L85892
; Line 1819
	mov	DWORD PTR _dropGoldFlag, ecx
; Line 1820
	mov	DWORD PTR _dropGoldValue, ecx
$L85892:
; Line 1822
	cmp	eax, 127				; 0000007fH
	je	SHORT $L85894
	imul	eax, 368				; 00000170H
	mov	ecx, DWORD PTR _item[eax+12]
	mov	eax, DWORD PTR _item[eax+16]
	imul	ecx, 112				; 00000070H
	cmp	BYTE PTR _dItem[ecx+eax], 0
	je	$L85893
$L85894:
; Line 1824
	mov	eax, DWORD PTR _ii$[esp+44]
; Line 1826
	mov	ebp, ebx
	imul	eax, 368				; 00000170H
	imul	ebp, 21720				; 000054d8H
	and	BYTE PTR _item[eax+5], 127		; 0000007fH
	mov	DWORD PTR -12+[esp+44], eax
	sub	eax, ebp
	lea	edi, DWORD PTR _plr[ebp+21176]
	sub	eax, OFFSET FLAT:_plr+21176
	push	92					; 0000005cH
	pop	ecx
	mov	DWORD PTR -4+[esp+44], eax
	lea	esi, DWORD PTR _item[eax+edi]
	rep movsd
; Line 1827
	mov	ecx, ebx
	call	@CheckQuestItem@4
; Line 1828
	mov	ecx, ebx
	call	@CheckBookLevel@4
; Line 1829
	mov	ecx, ebx
	call	@CheckItemStats@4
; Line 1830
	mov	ecx, DWORD PTR _plr[ebp+21368]
	add	ecx, 12					; 0000000cH
	call	@SetICursor@4
; Line 1831
	cmp	DWORD PTR _plr[ebp+21184], 11		; 0000000bH
	jne	SHORT $L85897
; Line 1832
	mov	ecx, ebx
	call	@GoldAutoPlace@4
$LABEL_70$85982:
; Line 1978
	test	eax, eax
	je	$L85983
$LABEL_71$85904:
; Line 1981
	mov	eax, DWORD PTR -12+[esp+44]
	xor	edx, edx
	mov	ecx, DWORD PTR _item[eax+12]
	mov	eax, DWORD PTR _item[eax+16]
	imul	ecx, 112				; 00000070H
	and	BYTE PTR _dItem[ecx+eax], dl
; Line 1982
	cmp	DWORD PTR _numitems, edx
	jle	$L85893
$L85985:
; Line 1983
	mov	ecx, DWORD PTR _itemactive[edx*4]
; Line 1984
	cmp	ecx, DWORD PTR _ii$[esp+44]
	jne	$L85987
; Line 1985
	call	@DeleteItem@8
; Line 1986
	xor	edx, edx
; Line 1987
	jmp	$L85988
$L85897:
; Line 1835
	mov	ecx, DWORD PTR _plr[ebp+120]
	xor	esi, esi
	xor	eax, eax
	inc	esi
	and	ecx, 15					; 0000000fH
	je	SHORT $L85900
	cmp	ecx, esi
	jne	SHORT $L85903
$L85900:
	cmp	DWORD PTR _plr[ebp], 3
	jg	SHORT $L85903
; Line 1836
	cmp	DWORD PTR _plr[ebp+21532], 0
	je	SHORT $L85903
; Line 1837
	cmp	BYTE PTR _plr[ebp+21366], 1
	jne	SHORT $L85903
; Line 1838
	mov	ecx, ebx
	call	@WeaponAutoPlace@4
; Line 1839
	test	eax, eax
	je	SHORT $L85903
; Line 1840
	mov	edx, esi
	mov	ecx, ebx
	call	@CalcPlrInv@8
; Line 1841
	jmp	$LABEL_71$85904
$L85903:
; Line 1847
	mov	ecx, DWORD PTR _icursW28
; Line 1848
	mov	edx, DWORD PTR _icursH28
; Line 1849
	cmp	ecx, esi
	mov	DWORD PTR _v29$[esp+44], ecx
	mov	DWORD PTR _v26$[esp+44], edx
	jne	$LABEL_49$85950
; Line 1850
	cmp	edx, esi
	jne	$LABEL_35$85930
; Line 1851
	cmp	DWORD PTR _plr[ebp+21532], 0
	je	SHORT $L85910
	mov	ecx, DWORD PTR _plr[ebp+21536]
	imul	ecx, 76					; 0000004cH
	cmp	DWORD PTR _AllItemsList[ecx+64], 0
	je	SHORT $L85910
; Line 1852
	and	DWORD PTR _iia$[esp+44], 0
; Line 1853
	lea	ecx, DWORD PTR _plr[ebp+18232]
	lea	edi, DWORD PTR _plr[ebp+21176]
	mov	DWORD PTR _v24$[esp+44], ecx
	sub	edi, ecx
$L85908:
; Line 1855
	test	eax, eax
	jne	SHORT $L85910
; Line 1857
	mov	ecx, DWORD PTR _v24$[esp+44]
	cmp	DWORD PTR [ecx+8], -1
	jne	SHORT $L85912
; Line 1858
	mov	eax, ecx
	mov	ecx, 368				; 00000170H
$L86878:
	mov	dl, BYTE PTR [edi+eax]
	mov	BYTE PTR [eax], dl
	inc	eax
	dec	ecx
	jne	SHORT $L86878
; Line 1859
	mov	ecx, ebx
	call	@CalcPlrScrolls@4
; Line 1860
	mov	eax, esi
; Line 1861
	mov	DWORD PTR _drawsbarflag, esi
$L85912:
; Line 1863
	inc	DWORD PTR _iia$[esp+44]
; Line 1864
	mov	ecx, 368				; 00000170H
	add	DWORD PTR _v24$[esp+44], ecx
	sub	edi, ecx
; Line 1865
	cmp	DWORD PTR _iia$[esp+44], 8
	jl	SHORT $L85908
$L85910:
; Line 1867
	push	30					; 0000001eH
	pop	edi
$L85914:
; Line 1869
	test	eax, eax
	jne	SHORT $L85916
; Line 1871
	push	esi
	push	esi
	mov	edx, edi
	push	esi
	mov	ecx, ebx
	inc	edi
	call	@AutoPlace@20
; Line 1872
	cmp	edi, 39					; 00000027H
	jle	SHORT $L85914
$L85916:
; Line 1873
	push	20					; 00000014H
	pop	edi
$L85918:
; Line 1875
	test	eax, eax
	jne	SHORT $L85920
; Line 1877
	push	esi
	push	esi
	mov	edx, edi
	push	esi
	mov	ecx, ebx
	inc	edi
	call	@AutoPlace@20
; Line 1878
	cmp	edi, 29					; 0000001dH
	jle	SHORT $L85918
$L85920:
; Line 1879
	push	10					; 0000000aH
	pop	edi
$L85922:
; Line 1881
	test	eax, eax
	jne	SHORT $L85924
; Line 1883
	push	esi
	push	esi
	mov	edx, edi
	push	esi
	mov	ecx, ebx
	inc	edi
	call	@AutoPlace@20
; Line 1884
	cmp	edi, 19					; 00000013H
	jle	SHORT $L85922
$L85924:
; Line 1885
	xor	edi, edi
	jmp	SHORT $L86939
$L85927:
; Line 1887
	push	esi
	push	esi
	mov	edx, edi
	push	esi
	mov	ecx, ebx
	inc	edi
	call	@AutoPlace@20
; Line 1888
	cmp	edi, 9
	jg	SHORT $LABEL_35$85930
$L86939:
; Line 1886
	test	eax, eax
	je	SHORT $L85927
; Line 1969
	jmp	$LABEL_71$85904
$LABEL_35$85930:
; Line 1894
	cmp	DWORD PTR _v26$[esp+44], 2
	jne	SHORT $LABEL_45$85944
; Line 1895
	push	29					; 0000001dH
	pop	edi
$L85932:
; Line 1897
	test	eax, eax
	jne	SHORT $L85934
; Line 1899
	push	esi
	push	2
	mov	edx, edi
	push	esi
	mov	ecx, ebx
	dec	edi
	call	@AutoPlace@20
; Line 1900
	cmp	edi, 20					; 00000014H
	jge	SHORT $L85932
$L85934:
; Line 1901
	push	9
	pop	edi
$L85936:
; Line 1903
	test	eax, eax
	jne	SHORT $L85938
; Line 1905
	push	esi
	push	2
	mov	edx, edi
	push	esi
	mov	ecx, ebx
	dec	edi
	call	@AutoPlace@20
; Line 1906
	test	edi, edi
	jge	SHORT $L85936
$L85938:
; Line 1907
	push	19					; 00000013H
	pop	edi
	jmp	SHORT $L86940
$L85941:
; Line 1909
	push	esi
	push	2
	mov	edx, edi
	push	esi
	mov	ecx, ebx
	dec	edi
	call	@AutoPlace@20
; Line 1910
	cmp	edi, 10					; 0000000aH
	jl	$LABEL_70$85982
$L86940:
; Line 1908
	test	eax, eax
	je	SHORT $L85941
; Line 1913
	jmp	$LABEL_71$85904
$LABEL_45$85944:
; Line 1916
	cmp	DWORD PTR _v26$[esp+44], 3
	jne	$LABEL_70$85982
; Line 1917
	xor	edi, edi
	jmp	SHORT $L86941
$L85947:
; Line 1919
	push	esi
	push	3
	mov	edx, edi
	push	esi
	mov	ecx, ebx
	inc	edi
	call	@AutoPlace@20
; Line 1920
	cmp	edi, 20					; 00000014H
	jge	SHORT $LABEL_49$85950
$L86941:
; Line 1918
	test	eax, eax
	je	SHORT $L85947
; Line 1969
	jmp	$LABEL_71$85904
$LABEL_49$85950:
; Line 1927
	cmp	DWORD PTR _v29$[esp+44], 2
	jne	$LABEL_70$85982
; Line 1928
	cmp	DWORD PTR _v26$[esp+44], 2
	jne	SHORT $LABEL_63$85972
; Line 1929
	mov	edi, OFFSET FLAT:_AP2x2Tbl
$L85954:
; Line 1931
	test	eax, eax
	jne	SHORT $L85956
; Line 1933
	mov	edx, DWORD PTR [edi]
	push	esi
	push	2
	push	2
	mov	ecx, ebx
	call	@AutoPlace@20
; Line 1934
	add	edi, 4
; Line 1935
	cmp	edi, OFFSET FLAT:_AP2x2Tbl+40
	jl	SHORT $L85954
$L85956:
; Line 1936
	push	21					; 00000015H
	pop	edi
$L85960:
; Line 1938
	test	eax, eax
	jne	SHORT $L85962
; Line 1940
	push	esi
	push	2
	push	2
	mov	edx, edi
	mov	ecx, ebx
	call	@AutoPlace@20
; Line 1941
	inc	edi
	inc	edi
; Line 1942
	cmp	edi, 29					; 0000001dH
	jl	SHORT $L85960
$L85962:
; Line 1943
	mov	edi, esi
$L85964:
; Line 1945
	test	eax, eax
	jne	SHORT $L85966
; Line 1947
	push	esi
	push	2
	push	2
	mov	edx, edi
	mov	ecx, ebx
	call	@AutoPlace@20
; Line 1948
	inc	edi
	inc	edi
; Line 1949
	cmp	edi, 9
	jl	SHORT $L85964
$L85966:
; Line 1950
	push	10					; 0000000aH
	pop	edi
	jmp	SHORT $L86942
$L85969:
; Line 1952
	push	esi
	push	2
	mov	edx, edi
	push	2
	mov	ecx, ebx
	inc	edi
	call	@AutoPlace@20
; Line 1953
	cmp	edi, 19					; 00000013H
	jge	$LABEL_70$85982
$L86942:
; Line 1951
	test	eax, eax
	je	SHORT $L85969
; Line 1956
	jmp	$LABEL_71$85904
$LABEL_63$85972:
; Line 1959
	cmp	DWORD PTR _v26$[esp+44], 3
	jne	$LABEL_70$85982
; Line 1960
	xor	edi, edi
$L85974:
; Line 1962
	test	eax, eax
	jne	SHORT $L85976
; Line 1964
	push	esi
	push	3
	mov	edx, edi
	push	2
	mov	ecx, ebx
	inc	edi
	call	@AutoPlace@20
; Line 1965
	cmp	edi, 9
	jl	SHORT $L85974
$L85976:
; Line 1966
	push	10					; 0000000aH
	pop	edi
	jmp	SHORT $L86943
$L85979:
; Line 1968
	push	esi
	push	3
	mov	edx, edi
	push	2
	mov	ecx, ebx
	inc	edi
	call	@AutoPlace@20
; Line 1969
	cmp	edi, 19					; 00000013H
	jge	$LABEL_70$85982
$L86943:
; Line 1967
	test	eax, eax
	je	SHORT $L85979
; Line 1969
	jmp	$LABEL_71$85904
$L85987:
; Line 1988
	inc	edx
$L85988:
; Line 1982
	cmp	edx, DWORD PTR _numitems
	jl	$L85985
; Line 1991
	jmp	$L85893
$L85983:
; Line 1993
	cmp	ebx, DWORD PTR _myplr
	jne	SHORT $L85991
; Line 1994
	movsx	eax, BYTE PTR _plr[ebp+352]
	sub	eax, 0
	je	SHORT $L85994
	dec	eax
	je	SHORT $L85995
	dec	eax
	jne	SHORT $L85991
; Line 2004
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
	add	eax, 521				; 00000209H
; Line 2006
	jmp	SHORT $L86944
$L85995:
; Line 2000
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
	add	eax, 624				; 00000270H
; Line 2002
	jmp	SHORT $L86944
$L85994:
; Line 1996
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
	add	eax, 727				; 000002d7H
$L86944:
; Line 1997
	mov	ecx, eax
	call	@PlaySFX@4
$L85991:
; Line 2009
	mov	eax, DWORD PTR -4+[esp+44]
	lea	edi, DWORD PTR _plr[ebp+21176]
	push	92					; 0000005cH
; Line 2010
	xor	edx, edx
	lea	esi, DWORD PTR _item[eax+edi]
	pop	ecx
	rep movsd
	mov	ecx, DWORD PTR _ii$[esp+44]
	inc	edx
	call	@RespawnItem@8
; Line 2011
	mov	eax, DWORD PTR -12+[esp+44]
	mov	dl, 11					; 0000000bH
	mov	cl, BYTE PTR _item[eax+16]
	mov	al, BYTE PTR _item[eax+12]
	push	ecx
	xor	ecx, ecx
	push	eax
	inc	ecx
	call	@NetSendCmdPItem@16
; Line 2012
	or	DWORD PTR _plr[ebp+21184], -1
$L85893:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2014
	add	esp, 28					; 0000001cH
	ret	0
@AutoGetItem@8 ENDP
_TEXT	ENDS
PUBLIC	@FindGetItem@12
; Function compile flags: /Ogsy
;	COMDAT @FindGetItem@12
_TEXT	SEGMENT
_ci$ = -4
_iseed$ = 8
@FindGetItem@12 PROC NEAR				; COMDAT
; _indx$ = ecx
; _ci$ = dx
; Line 2019
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 2024
	mov	edi, DWORD PTR _numitems
	xor	ebx, ebx
	mov	WORD PTR _ci$[ebp], dx
	test	edi, edi
; Line 2025
	jle	SHORT $L86953
$L86008:
; Line 2027
	mov	eax, DWORD PTR _itemactive[ebx*4]
; Line 2028
	mov	esi, eax
	imul	esi, 368				; 00000170H
	cmp	DWORD PTR _item[esi+360], ecx
	jne	SHORT $L86010
	mov	edx, DWORD PTR _item[esi]
	cmp	edx, DWORD PTR _iseed$[ebp]
	jne	SHORT $L86010
	mov	dx, WORD PTR _ci$[ebp]
	cmp	WORD PTR _item[esi+4], dx
	je	SHORT $L86003
$L86010:
; Line 2030
	inc	ebx
	cmp	ebx, edi
	jl	SHORT $L86008
$L86953:
; Line 2031
	or	eax, -1
$L86003:
	pop	edi
	pop	esi
	pop	ebx
; Line 2034
	leave
	ret	4
@FindGetItem@12 ENDP
_TEXT	ENDS
PUBLIC	@SyncGetItem@20
; Function compile flags: /Ogsy
;	COMDAT @SyncGetItem@20
_TEXT	SEGMENT
_idx$ = 8
_ci$ = 12
_iseed$ = 16
@SyncGetItem@20 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2037
	push	ebp
	mov	ebp, esp
; Line 2045
	imul	ecx, 112				; 00000070H
	push	ebx
; Line 2049
	mov	ebx, DWORD PTR _iseed$[ebp]
	mov	cl, BYTE PTR _dItem[ecx+edx]
	push	esi
	push	edi
	mov	edi, DWORD PTR _idx$[ebp]
	test	cl, cl
	je	SHORT $L86028
	movsx	esi, cl
	dec	esi
	mov	eax, esi
	imul	eax, 368				; 00000170H
	cmp	DWORD PTR _item[eax+360], edi
	jne	SHORT $L86028
	cmp	DWORD PTR _item[eax], ebx
	jne	SHORT $L86028
	mov	edx, DWORD PTR _ci$[ebp]
	cmp	WORD PTR _item[eax+4], dx
	jne	SHORT $L86028
; Line 2050
	push	ebx
	mov	ecx, edi
	call	@FindGetItem@12
; Line 2051
	jmp	SHORT $L86029
$L86028:
; Line 2052
	mov	edx, DWORD PTR _ci$[ebp]
	push	ebx
	mov	ecx, edi
	call	@FindGetItem@12
	mov	esi, eax
$L86029:
; Line 2054
	cmp	esi, -1
	je	SHORT $L86030
; Line 2056
	mov	eax, esi
	xor	edx, edx
	imul	eax, 368				; 00000170H
	mov	ecx, DWORD PTR _item[eax+12]
	mov	eax, DWORD PTR _item[eax+16]
	imul	ecx, 112				; 00000070H
	and	BYTE PTR _dItem[ecx+eax], dl
; Line 2057
	cmp	DWORD PTR _numitems, edx
	jle	SHORT $L86033
$L86032:
; Line 2058
	mov	ecx, DWORD PTR _itemactive[edx*4]
; Line 2059
	cmp	ecx, esi
	jne	SHORT $L86034
; Line 2060
	call	@DeleteItem@8
; Line 2061
	mov	edx, DWORD PTR _ci$[ebp]
	mov	ecx, edi
	push	ebx
	call	@FindGetItem@12
; Line 2062
	mov	edx, DWORD PTR _ci$[ebp]
	push	ebx
	call	@FindGetItem@12
; Line 2063
	xor	edx, edx
; Line 2064
	jmp	SHORT $L86035
$L86034:
; Line 2065
	inc	edx
$L86035:
; Line 2057
	cmp	edx, DWORD PTR _numitems
	jl	SHORT $L86032
$L86033:
; Line 2068
	mov	edx, DWORD PTR _ci$[ebp]
	push	ebx
	mov	ecx, edi
	call	@FindGetItem@12
$L86030:
	pop	edi
	pop	esi
	pop	ebx
; Line 2070
	pop	ebp
	ret	12					; 0000000cH
@SyncGetItem@20 ENDP
_TEXT	ENDS
PUBLIC	@CanPut@8
EXTRN	_object:BYTE
EXTRN	_dMonster:BYTE
EXTRN	_dObject:BYTE
EXTRN	_dPiece:BYTE
EXTRN	_currlevel:BYTE
EXTRN	_nSolidTable:BYTE
; Function compile flags: /Ogsy
;	COMDAT @CanPut@8
_TEXT	SEGMENT
@CanPut@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 2084
	imul	ecx, 112				; 00000070H
	push	ebx
	xor	ebx, ebx
	cmp	BYTE PTR _dItem[ecx+edx], bl
	push	esi
	push	edi
; Line 2085
	jne	$L86059
; Line 2086
	lea	eax, DWORD PTR [ecx+edx]
; Line 2087
	mov	esi, eax
	shl	esi, 2
	mov	eax, DWORD PTR _dPiece[esi]
	cmp	BYTE PTR _nSolidTable[eax], bl
; Line 2088
	jne	$L86059
; Line 2089
	mov	al, BYTE PTR _dObject[ecx+edx]
; Line 2090
	cmp	al, bl
	je	SHORT $L86052
; Line 2091
	jg	SHORT $L86960
	movsx	edi, al
	or	eax, -1
	sub	eax, edi
	jmp	SHORT $L86961
$L86960:
	movsx	eax, al
	dec	eax
$L86961:
; Line 2092
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax+56], ebx
; Line 2093
	jne	$L86059
$L86052:
; Line 2095
	mov	al, BYTE PTR _dObject[ecx+edx+113]
; Line 2096
	cmp	al, bl
	setl	bl
; Line 2097
	test	al, al
	jle	SHORT $L86053
; Line 2098
	movsx	edi, al
	imul	edi, 120				; 00000078H
	cmp	BYTE PTR _object[edi-56], 0
; Line 2099
	jne	SHORT $L86059
$L86053:
; Line 2102
	test	bl, bl
	je	SHORT $L86962
	movsx	eax, al
	inc	eax
	mov	edi, OFFSET FLAT:_object+64
	imul	eax, 120				; 00000078H
	sub	edi, eax
	xor	ebx, ebx
	cmp	BYTE PTR [edi], bl
	je	SHORT $L86055
; Line 2103
	jmp	SHORT $L86059
$L86962:
; Line 2102
	xor	ebx, ebx
$L86055:
; Line 2104
	mov	al, BYTE PTR _dObject[ecx+edx+112]
; Line 2105
	cmp	al, bl
	jle	SHORT $L86057
; Line 2106
	mov	cl, BYTE PTR _dObject[ecx+edx+1]
; Line 2107
	cmp	cl, bl
	jle	SHORT $L86057
	movsx	eax, al
	imul	eax, 120				; 00000078H
	cmp	BYTE PTR _object[eax-56], bl
	je	SHORT $L86057
	movsx	eax, cl
	imul	eax, 120				; 00000078H
	cmp	BYTE PTR _object[eax-56], bl
; Line 2108
	jne	SHORT $L86059
$L86057:
; Line 2110
	cmp	BYTE PTR _currlevel, bl
	jne	SHORT $L86058
	cmp	DWORD PTR _dMonster[esi], ebx
	jne	SHORT $L86059
	cmp	DWORD PTR _dMonster[esi+452], ebx
	je	SHORT $L86058
$L86059:
; Line 2111
	xor	eax, eax
	jmp	SHORT $L86040
$L86058:
; Line 2112
	xor	eax, eax
	inc	eax
$L86040:
	pop	edi
	pop	esi
	pop	ebx
; Line 2113
	ret	0
@CanPut@8 ENDP
_TEXT	ENDS
PUBLIC	_TryInvPut
EXTRN	_cursmx:DWORD
EXTRN	_cursmy:DWORD
EXTRN	_offset_x:BYTE
EXTRN	_offset_y:BYTE
EXTRN	@GetDirection@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT _TryInvPut
_TEXT	SEGMENT
_TryInvPut PROC NEAR					; COMDAT
; Line 2124
	cmp	DWORD PTR _numitems, 127		; 0000007fH
	jl	SHORT $L86067
; Line 2125
	xor	eax, eax
; Line 2138
	ret	0
$L86067:
; Line 2126
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	esi
	push	edi
	push	DWORD PTR _cursmy
	mov	edx, DWORD PTR _plr[eax+60]
	mov	ecx, DWORD PTR _plr[eax+56]
	push	DWORD PTR _cursmx
	call	@GetDirection@16
	mov	ebx, eax
; Line 2128
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
; Line 2132
	mov	edx, DWORD PTR _offset_y[ebx*4]
	mov	ecx, DWORD PTR _offset_x[ebx*4]
	mov	esi, DWORD PTR _plr[eax+60]
	mov	edi, DWORD PTR _plr[eax+56]
	add	edx, esi
	add	ecx, edi
	call	@CanPut@8
	test	eax, eax
	jne	SHORT $L86071
	dec	ebx
	and	ebx, 7
	mov	edx, DWORD PTR _offset_y[ebx*4]
	mov	ecx, DWORD PTR _offset_x[ebx*4]
	add	edx, esi
	add	ecx, edi
	call	@CanPut@8
	test	eax, eax
	jne	SHORT $L86071
	inc	ebx
	inc	ebx
	and	ebx, 7
	shl	ebx, 2
	mov	edx, DWORD PTR _offset_y[ebx]
	mov	ecx, DWORD PTR _offset_x[ebx]
	add	edx, esi
	add	ecx, edi
	call	@CanPut@8
	test	eax, eax
	jne	SHORT $L86071
; Line 2135
	mov	ecx, edi
	mov	edx, esi
	pop	edi
	pop	esi
	pop	ebx
	jmp	@CanPut@8
$L86071:
; Line 2133
	xor	eax, eax
	pop	edi
	pop	esi
	inc	eax
	pop	ebx
; Line 2138
	ret	0
_TryInvPut ENDP
_TEXT	ENDS
PUBLIC	@DrawInvMsg@4
EXTRN	@ErrorPlrMsg@4:NEAR
EXTRN	__imp__GetTickCount@0:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DrawInvMsg@4
_TEXT	SEGMENT
@DrawInvMsg@4 PROC NEAR					; COMDAT
; _msg$ = ecx
; Line 2141
	push	esi
	mov	esi, ecx
; Line 2146
	call	DWORD PTR __imp__GetTickCount@0
; Line 2147
	mov	ecx, eax
	sub	ecx, DWORD PTR _sgdwLastTime
	cmp	ecx, 5000				; 00001388H
	jb	SHORT $L86079
; Line 2149
	mov	ecx, esi
	mov	DWORD PTR _sgdwLastTime, eax
	pop	esi
	jmp	@ErrorPlrMsg@4
$L86079:
	pop	esi
; Line 2151
	ret	0
@DrawInvMsg@4 ENDP
_TEXT	ENDS
PUBLIC	@InvPutItem@12
PUBLIC	??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@ ; `string'
EXTRN	_abs:NEAR
EXTRN	_itemavail:BYTE
;	COMDAT ??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@
; File Source/../defs.h
_DATA	SEGMENT
??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@ DB 'A duplicate ite'
	DB	'm has been detected.  Destroying duplicate...', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @InvPutItem@12
_TEXT	SEGMENT
_x$ = -16
_y$ = 8
_v5$ = 8
_v9$ = -24
_v13$ = -12
_v15$ = -24
_v20$ = -24
_v22$ = -16
_v23$ = -8
_ya$ = -24
_yb$ = -4
@InvPutItem@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _x$ = edx
; File Source/inv.cpp
; Line 2154
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 2181
	cmp	DWORD PTR _numitems, 127		; 0000007fH
	push	ebx
	mov	ebx, edx
	push	esi
	push	edi
	mov	DWORD PTR _x$[ebp], ebx
; Line 2182
	jge	$L86996
; Line 2186
	mov	esi, ecx
; Line 2187
	mov	edi, DWORD PTR _y$[ebp]
	imul	esi, 21720				; 000054d8H
	mov	DWORD PTR _v5$[ebp], edi
; Line 2188
	mov	dx, WORD PTR _plr[esi+21180]
	mov	ecx, DWORD PTR _plr[esi+21536]
	lea	eax, DWORD PTR _plr[esi+21176]
	mov	DWORD PTR -28+[ebp], eax
	push	DWORD PTR [eax]
	call	@FindGetItem@12
	cmp	eax, -1
	je	SHORT $L86113
; Line 2189
	mov	ecx, OFFSET FLAT:??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@ ; `string'
	call	@DrawInvMsg@4
; Line 2190
	mov	eax, DWORD PTR -28+[ebp]
	mov	edx, edi
	mov	ecx, ebx
	push	DWORD PTR [eax]
	mov	ax, WORD PTR _plr[esi+21180]
	push	eax
	push	DWORD PTR _plr[esi+21536]
	call	@SyncGetItem@20
$L86113:
; Line 2192
	mov	edx, DWORD PTR _plr[esi+60]
	mov	ecx, DWORD PTR _plr[esi+56]
	push	edi
	push	DWORD PTR _x$[ebp]
	call	@GetDirection@16
; Line 2193
	sub	edi, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _ya$[ebp], eax
; Line 2194
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _plr[esi+56]
	push	eax
	call	_abs
	cmp	eax, 1
	pop	ecx
	jg	SHORT $L86116
	push	edi
	call	_abs
	cmp	eax, 1
	pop	ecx
	jle	SHORT $L86115
$L86116:
; Line 2195
	mov	eax, DWORD PTR _ya$[ebp]
	mov	ecx, eax
	shl	ecx, 2
	mov	eax, DWORD PTR _offset_y[ecx]
; Line 2196
	mov	ebx, DWORD PTR _offset_x[ecx]
	add	eax, DWORD PTR _plr[esi+60]
	add	ebx, DWORD PTR _plr[esi+56]
	mov	DWORD PTR _v5$[ebp], eax
$L86115:
; Line 2198
	mov	edx, DWORD PTR _v5$[ebp]
	mov	ecx, ebx
	call	@CanPut@8
	test	eax, eax
	jne	$L86124
; Line 2201
	mov	eax, DWORD PTR _ya$[ebp]
	mov	edi, DWORD PTR _plr[esi+56]
	mov	esi, DWORD PTR _plr[esi+60]
	dec	eax
	and	eax, 7
	mov	DWORD PTR _v9$[ebp], eax
; Line 2203
	shl	eax, 2
	mov	ecx, DWORD PTR _offset_y[eax]
; Line 2204
	mov	ebx, DWORD PTR _offset_x[eax]
	add	ebx, edi
	lea	edx, DWORD PTR [ecx+esi]
; Line 2205
	mov	ecx, ebx
	mov	DWORD PTR _v5$[ebp], edx
	call	@CanPut@8
	test	eax, eax
	jne	$L86124
; Line 2206
	mov	eax, DWORD PTR _v9$[ebp]
	inc	eax
	inc	eax
	and	eax, 7
; Line 2207
	shl	eax, 2
	mov	ecx, DWORD PTR _offset_y[eax]
; Line 2208
	mov	ebx, DWORD PTR _offset_x[eax]
	add	ebx, edi
	lea	edx, DWORD PTR [ecx+esi]
; Line 2209
	mov	ecx, ebx
	mov	DWORD PTR _v5$[ebp], edx
	call	@CanPut@8
	test	eax, eax
	jne	SHORT $L86124
; Line 2210
	and	DWORD PTR _v23$[ebp], eax
; Line 2211
	or	eax, -1
; Line 2212
	mov	DWORD PTR _yb$[ebp], 1
; Line 2213
	mov	DWORD PTR _v20$[ebp], eax
$L86123:
; Line 2215
	mov	DWORD PTR _v22$[ebp], eax
	jmp	SHORT $L86995
$L86126:
; Line 2216
	cmp	DWORD PTR _v23$[ebp], 0
	jne	SHORT $L86127
; Line 2218
	mov	eax, DWORD PTR _v22$[ebp]
	lea	edx, DWORD PTR [eax+esi]
; Line 2219
	mov	eax, DWORD PTR _v20$[ebp]
	mov	DWORD PTR -20+[ebp], eax
	lea	ecx, DWORD PTR [eax+edi]
	mov	DWORD PTR _v13$[ebp], ecx
$L86128:
; Line 2221
	cmp	DWORD PTR _v23$[ebp], 0
	jne	SHORT $L86130
; Line 2223
	mov	ecx, DWORD PTR _v13$[ebp]
	call	@CanPut@8
	test	eax, eax
	je	SHORT $L86132
; Line 2225
	mov	ebx, DWORD PTR _v13$[ebp]
	mov	DWORD PTR _v23$[ebp], 1
; Line 2226
	mov	DWORD PTR _v5$[ebp], edx
$L86132:
; Line 2229
	inc	DWORD PTR _v13$[ebp]
	inc	DWORD PTR -20+[ebp]
; Line 2230
	mov	eax, DWORD PTR -20+[ebp]
	cmp	eax, DWORD PTR _yb$[ebp]
	jle	SHORT $L86128
$L86130:
; Line 2231
	inc	DWORD PTR _v22$[ebp]
	mov	eax, DWORD PTR _v22$[ebp]
$L86995:
; Line 2216
	cmp	eax, DWORD PTR _yb$[ebp]
	jle	SHORT $L86126
$L86127:
; Line 2234
	mov	eax, DWORD PTR _v20$[ebp]
	inc	DWORD PTR _yb$[ebp]
	dec	eax
; Line 2235
	cmp	eax, -50				; ffffffceH
	mov	DWORD PTR _v20$[ebp], eax
	jle	$L86987
; Line 2214
	cmp	DWORD PTR _v23$[ebp], 0
	je	SHORT $L86123
$L86124:
; Line 2244
	mov	edx, DWORD PTR _v5$[ebp]
	mov	ecx, ebx
	call	@CanPut@8
; Line 2246
	mov	esi, ebx
	mov	ecx, DWORD PTR _itemavail
	imul	esi, 112				; 00000070H
	mov	eax, ecx
	inc	cl
	mov	BYTE PTR _dItem[esi+edx], cl
; Line 2249
	mov	ecx, DWORD PTR _numitems
	shl	ecx, 2
	mov	edx, OFFSET FLAT:_itemavail+504
; Line 2252
	push	92					; 0000005cH
	sub	edx, ecx
	mov	DWORD PTR _itemactive[ecx], eax
	mov	DWORD PTR _v15$[ebp], eax
	mov	ecx, DWORD PTR [edx]
	mov	edx, eax
	imul	edx, 368				; 00000170H
	mov	DWORD PTR _itemavail, ecx
	pop	ecx
	lea	edi, DWORD PTR _item[edx]
	mov	esi, edi
	sub	esi, edx
	sub	esi, OFFSET FLAT:_item
	add	esi, DWORD PTR -28+[ebp]
	rep movsd
; Line 2253
	mov	ecx, DWORD PTR _v5$[ebp]
; Line 2254
	mov	DWORD PTR _item[edx+12], ebx
	mov	DWORD PTR _item[edx+16], ecx
; Line 2255
	xor	edx, edx
	inc	edx
	mov	ecx, eax
	call	@RespawnItem@8
; Line 2256
	inc	DWORD PTR _numitems
; Line 2257
	xor	ecx, ecx
	inc	ecx
	call	@SetCursor_@4
; Line 2258
	mov	eax, DWORD PTR _v15$[ebp]
$L86086:
	pop	edi
	pop	esi
	pop	ebx
; Line 2259
	leave
	ret	4
$L86987:
; Line 2236
	cmp	DWORD PTR _v23$[ebp], 0
	jne	$L86124
$L86996:
; Line 2238
	or	eax, -1
	jmp	SHORT $L86086
@InvPutItem@12 ENDP
_TEXT	ENDS
PUBLIC	@SyncPutItem@52
PUBLIC	??_C@_0DI@PKJL@A?5duplicate?5item?5has?5been?5detect@ ; `string'
EXTRN	@RecreateEar@40:NEAR
;	COMDAT ??_C@_0DI@PKJL@A?5duplicate?5item?5has?5been?5detect@
_DATA	SEGMENT
??_C@_0DI@PKJL@A?5duplicate?5item?5has?5been?5detect@ DB 'A duplicate ite'
	DB	'm has been detected from another player.', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SyncPutItem@52
_TEXT	SEGMENT
_x$ = -24
_y$ = 8
_idx$ = 12
_icreateinfo$ = 16
_iseed$ = 20
_Id$ = 24
_dur$ = 28
_mdur$ = 32
_ch$ = 36
_mch$ = 40
_ivalue$ = 44
_ibuff$ = 48
_v13$ = -4
_v18$ = -24
_v29$ = 8
_v31$ = -20
_v33$ = -12
_v35$ = -8
_ib$ = 8
@SyncPutItem@52 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _x$ = edx
; Line 2262
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 2291
	cmp	DWORD PTR _numitems, 127		; 0000007fH
	push	ebx
	mov	ebx, edx
	push	esi
	push	edi
	mov	DWORD PTR _x$[ebp], ebx
	mov	esi, ecx
	mov	DWORD PTR _v13$[ebp], ebx
; Line 2292
	jge	$L87015
; Line 2294
	push	DWORD PTR _iseed$[ebp]
	mov	edx, DWORD PTR _icreateinfo$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edi, DWORD PTR _y$[ebp]
	call	@FindGetItem@12
	cmp	eax, -1
	je	SHORT $L86190
; Line 2295
	mov	ecx, OFFSET FLAT:??_C@_0DI@PKJL@A?5duplicate?5item?5has?5been?5detect@ ; `string'
	call	@DrawInvMsg@4
; Line 2296
	mov	edx, edi
	mov	ecx, ebx
	push	DWORD PTR _iseed$[ebp]
	push	DWORD PTR _icreateinfo$[ebp]
	push	DWORD PTR _idx$[ebp]
	call	@SyncGetItem@20
$L86190:
; Line 2299
	imul	esi, 21720				; 000054d8H
	push	edi
	push	ebx
	mov	edx, DWORD PTR _plr[esi+60]
	mov	ecx, DWORD PTR _plr[esi+56]
	call	@GetDirection@16
	mov	ebx, eax
; Line 2300
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _v29$[ebp], eax
; Line 2301
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _plr[esi+56]
	push	eax
	call	_abs
	cmp	eax, 1
	pop	ecx
	jg	SHORT $L86193
	push	DWORD PTR _v29$[ebp]
	call	_abs
	cmp	eax, 1
	pop	ecx
	jle	SHORT $L87005
$L86193:
; Line 2302
	mov	ecx, DWORD PTR _offset_x[ebx*4]
; Line 2303
	mov	edi, DWORD PTR _offset_y[ebx*4]
	add	ecx, DWORD PTR _plr[esi+56]
	add	edi, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _v13$[ebp], ecx
	jmp	SHORT $L86192
$L87005:
	mov	ecx, DWORD PTR _v13$[ebp]
$L86192:
; Line 2305
	mov	edx, edi
	call	@CanPut@8
	test	eax, eax
	jne	$L86209
; Line 2308
	dec	ebx
	mov	ecx, DWORD PTR _plr[esi+56]
	mov	esi, DWORD PTR _plr[esi+60]
	and	ebx, 7
; Line 2311
	mov	eax, ebx
	mov	DWORD PTR _v18$[ebp], ecx
	shl	eax, 2
; Line 2312
	mov	edx, DWORD PTR _offset_x[eax]
; Line 2313
	mov	eax, DWORD PTR _offset_y[eax]
	add	ecx, edx
	lea	edi, DWORD PTR [eax+esi]
	mov	DWORD PTR _v13$[ebp], ecx
; Line 2314
	mov	edx, edi
	call	@CanPut@8
	test	eax, eax
	jne	$L86209
; Line 2315
	inc	ebx
; Line 2316
	mov	edx, DWORD PTR _v18$[ebp]
	inc	ebx
	and	ebx, 7
	mov	eax, ebx
	shl	eax, 2
	mov	ecx, DWORD PTR _offset_x[eax]
; Line 2317
	mov	eax, DWORD PTR _offset_y[eax]
	add	ecx, edx
	lea	edi, DWORD PTR [eax+esi]
	mov	DWORD PTR _v13$[ebp], ecx
; Line 2318
	mov	edx, edi
	call	@CanPut@8
	test	eax, eax
	jne	SHORT $L86209
; Line 2319
	and	DWORD PTR _v35$[ebp], eax
; Line 2320
	or	eax, -1
; Line 2321
	mov	DWORD PTR _ib$[ebp], 1
; Line 2322
	mov	DWORD PTR _v31$[ebp], eax
$L86208:
; Line 2324
	mov	DWORD PTR _v33$[ebp], eax
	jmp	SHORT $L87014
$L86211:
; Line 2325
	cmp	DWORD PTR _v35$[ebp], 0
	jne	SHORT $L86212
; Line 2326
	mov	eax, DWORD PTR _v33$[ebp]
; Line 2328
	mov	ecx, DWORD PTR _v18$[ebp]
	lea	edx, DWORD PTR [eax+esi]
	mov	eax, DWORD PTR _v31$[ebp]
	mov	DWORD PTR -16+[ebp], eax
	lea	ebx, DWORD PTR [eax+ecx]
$L86213:
; Line 2330
	cmp	DWORD PTR _v35$[ebp], 0
	jne	SHORT $L86215
; Line 2332
	mov	ecx, ebx
	call	@CanPut@8
	test	eax, eax
	je	SHORT $L86217
; Line 2333
	mov	DWORD PTR _v13$[ebp], ebx
; Line 2334
	mov	DWORD PTR _v35$[ebp], 1
; Line 2335
	mov	edi, edx
$L86217:
; Line 2338
	inc	ebx
	inc	DWORD PTR -16+[ebp]
; Line 2339
	mov	eax, DWORD PTR -16+[ebp]
	cmp	eax, DWORD PTR _ib$[ebp]
	jle	SHORT $L86213
$L86215:
; Line 2340
	inc	DWORD PTR _v33$[ebp]
	mov	eax, DWORD PTR _v33$[ebp]
$L87014:
; Line 2325
	cmp	eax, DWORD PTR _ib$[ebp]
	jle	SHORT $L86211
$L86212:
; Line 2343
	mov	eax, DWORD PTR _v31$[ebp]
	inc	DWORD PTR _ib$[ebp]
	dec	eax
; Line 2344
	cmp	eax, -50				; ffffffceH
	mov	DWORD PTR _v31$[ebp], eax
	jle	SHORT $L87003
; Line 2323
	cmp	DWORD PTR _v35$[ebp], 0
	je	SHORT $L86208
$L86209:
; Line 2353
	mov	esi, DWORD PTR _v13$[ebp]
	mov	edx, edi
	mov	ecx, esi
	call	@CanPut@8
; Line 2356
	mov	edx, esi
	mov	eax, DWORD PTR _itemavail
	imul	edx, 112				; 00000070H
	mov	ecx, eax
	mov	ebx, eax
	inc	al
	mov	BYTE PTR _dItem[edx+edi], al
; Line 2358
	mov	eax, DWORD PTR _numitems
	shl	eax, 2
	mov	edx, OFFSET FLAT:_itemavail+504
	sub	edx, eax
	mov	DWORD PTR _itemactive[eax], ecx
; Line 2359
	mov	eax, DWORD PTR [edx]
; Line 2360
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, 23					; 00000017H
	mov	DWORD PTR _itemavail, eax
	jne	SHORT $L86221
; Line 2361
	push	DWORD PTR _ibuff$[ebp]
	mov	edx, DWORD PTR _icreateinfo$[ebp]
	push	DWORD PTR _ivalue$[ebp]
	push	DWORD PTR _mch$[ebp]
	push	DWORD PTR _ch$[ebp]
	push	DWORD PTR _mdur$[ebp]
	push	DWORD PTR _dur$[ebp]
	push	DWORD PTR _Id$[ebp]
	push	DWORD PTR _iseed$[ebp]
	call	@RecreateEar@40
; Line 2362
	jmp	SHORT $L86222
$L87003:
; Line 2345
	cmp	DWORD PTR _v35$[ebp], 0
	jne	SHORT $L86209
$L87015:
; Line 2347
	or	eax, -1
	jmp	SHORT $L86163
$L86221:
; Line 2363
	push	DWORD PTR _ivalue$[ebp]
	push	DWORD PTR _iseed$[ebp]
	push	DWORD PTR _icreateinfo$[ebp]
	call	@RecreateItem@20
; Line 2364
	cmp	DWORD PTR _Id$[ebp], 0
	je	SHORT $L86223
; Line 2365
	mov	eax, ebx
	imul	eax, 368				; 00000170H
	mov	DWORD PTR _item[eax+56], 1
$L86223:
; Line 2367
	mov	eax, ebx
	mov	ecx, DWORD PTR _dur$[ebp]
	imul	eax, 368				; 00000170H
	mov	DWORD PTR _item[eax+236], ecx
; Line 2368
	mov	ecx, DWORD PTR _mdur$[ebp]
	mov	DWORD PTR _item[eax+240], ecx
; Line 2369
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _item[eax+228], ecx
; Line 2370
	mov	ecx, DWORD PTR _mch$[ebp]
	mov	DWORD PTR _item[eax+232], ecx
$L86222:
; Line 2373
	mov	eax, ebx
; Line 2375
	xor	edx, edx
	imul	eax, 368				; 00000170H
	inc	edx
	mov	ecx, ebx
	mov	DWORD PTR _item[eax+12], esi
	mov	DWORD PTR _item[eax+16], edi
	call	@RespawnItem@8
; Line 2376
	inc	DWORD PTR _numitems
; Line 2377
	mov	eax, ebx
$L86163:
	pop	edi
	pop	esi
	pop	ebx
; Line 2378
	leave
	ret	44					; 0000002cH
@SyncPutItem@52 ENDP
_TEXT	ENDS
PUBLIC	_CheckInvHLight
PUBLIC	??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@		; `string'
EXTRN	@get_pieces_str@4:NEAR
EXTRN	_sprintf:NEAR
EXTRN	_infoclr:DWORD
EXTRN	_infostr:BYTE
EXTRN	_strcpy:NEAR
EXTRN	@PrintItemDetails@4:NEAR
EXTRN	@PrintItemDur@4:NEAR
EXTRN	_ClearPanel:NEAR
;	COMDAT ??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@ DB '%i gold %s', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _CheckInvHLight
_TEXT	SEGMENT
_result$ = -8
_v9$ = -1
_CheckInvHLight PROC NEAR				; COMDAT
; Line 2381
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2392
	mov	ecx, DWORD PTR _MouseX
	mov	edx, DWORD PTR _MouseY
	push	ebx
	push	esi
	push	edi
	xor	edi, edi
	xor	ebx, ebx
$L86234:
; Line 2394
	mov	eax, DWORD PTR _InvRect[ebx*8]
; Line 2395
	cmp	ecx, eax
	mov	DWORD PTR _result$[ebp], eax
	jl	SHORT $L86239
; Line 2396
	add	DWORD PTR _result$[ebp], 29		; 0000001dH
; Line 2397
	cmp	ecx, DWORD PTR _result$[ebp]
	jge	SHORT $L86239
; Line 2398
	mov	eax, DWORD PTR _InvRect[ebx*8+4]
	mov	DWORD PTR _result$[ebp], eax
; Line 2399
	lea	esi, DWORD PTR [eax-29]
	cmp	edx, esi
	jl	SHORT $L86239
	cmp	edx, eax
	jl	SHORT $L86236
$L86239:
; Line 2403
	inc	ebx
; Line 2404
	cmp	ebx, 73					; 00000049H
	jb	SHORT $L86234
	jmp	$LABEL_37$86243
$L86236:
; Line 2405
	cmp	ebx, 73					; 00000049H
	jae	$LABEL_37$86243
; Line 2410
	mov	esi, DWORD PTR _myplr
	or	BYTE PTR _v9$[ebp], -1
	imul	esi, 21720				; 000054d8H
	mov	DWORD PTR _infoclr, edi
	add	esi, OFFSET FLAT:_plr
; Line 2411
	call	_ClearPanel
; Line 2412
	test	ebx, ebx
	jl	SHORT $L86244
	cmp	ebx, 3
	jg	SHORT $L86244
; Line 2413
	and	BYTE PTR _v9$[ebp], 0
; Line 2414
	lea	edi, DWORD PTR [esi+892]
; Line 2415
	jmp	$LABEL_36$86245
$L86244:
; Line 2417
	mov	eax, ebx
	sub	eax, 4
	je	$L86250
	dec	eax
	je	$L86251
	dec	eax
	je	$L86252
; Line 2431
	cmp	ebx, 7
	jl	SHORT $L86253
	cmp	ebx, 12					; 0000000cH
	jg	SHORT $L86253
; Line 2432
	mov	BYTE PTR _v9$[ebp], 4
; Line 2433
	lea	edi, DWORD PTR [esi+2364]
; Line 2434
	jmp	$LABEL_36$86245
$L86253:
; Line 2436
	cmp	ebx, 13					; 0000000dH
	jl	SHORT $L86255
	cmp	ebx, 18					; 00000012H
	jg	SHORT $L86255
; Line 2467
	cmp	DWORD PTR [esi+2372], -1
	lea	edi, DWORD PTR [esi+2364]
	je	SHORT $L86265
	cmp	BYTE PTR [esi+2553], 2
	jne	SHORT $L86265
; Line 2471
	mov	BYTE PTR _v9$[ebp], 4
	jmp	$LABEL_36$86245
$L86265:
; Line 2468
	mov	BYTE PTR _v9$[ebp], 5
; Line 2469
	lea	edi, DWORD PTR [esi+2732]
; Line 2470
	jmp	$LABEL_36$86245
$L86255:
; Line 2437
	cmp	ebx, 19					; 00000013H
	jl	SHORT $L86256
	cmp	ebx, 24					; 00000018H
	jg	SHORT $L86256
; Line 2438
	mov	BYTE PTR _v9$[ebp], 6
; Line 2439
	lea	edi, DWORD PTR [esi+3100]
; Line 2440
	jmp	$LABEL_36$86245
$L86256:
; Line 2442
	cmp	ebx, 25					; 00000019H
	jl	SHORT $L86258
	cmp	ebx, 64					; 00000040H
	jg	SHORT $L86258
; Line 2454
	movsx	eax, BYTE PTR [esi+ebx+18167]
	push	eax
	call	_abs
; Line 2455
	test	eax, eax
	pop	ecx
	mov	DWORD PTR _result$[ebp], eax
	je	SHORT $LABEL_37$86243
; Line 2456
	dec	eax
; Line 2457
	mov	cl, al
	add	cl, 7
; Line 2458
	imul	eax, 368				; 00000170H
	mov	BYTE PTR _v9$[ebp], cl
	lea	edi, DWORD PTR [eax+esi+3468]
; Line 2459
	jmp	SHORT $LABEL_36$86245
$L86258:
; Line 2443
	cmp	ebx, 65					; 00000041H
	jl	SHORT $LABEL_36$86245
; Line 2445
	add	ebx, -65				; ffffffbfH
; Line 2446
	mov	DWORD PTR _drawsbarflag, 1
; Line 2447
	mov	eax, ebx
	imul	eax, 368				; 00000170H
	mov	DWORD PTR _result$[ebp], eax
; Line 2448
	add	eax, esi
; Line 2449
	cmp	DWORD PTR [eax+18240], -1
	lea	edi, DWORD PTR [eax+18232]
	je	SHORT $LABEL_37$86243
; Line 2450
	add	bl, 47					; 0000002fH
	mov	BYTE PTR _v9$[ebp], bl
; Line 2451
	jmp	SHORT $LABEL_36$86245
$L86252:
; Line 2427
	mov	BYTE PTR _v9$[ebp], 3
; Line 2428
	lea	edi, DWORD PTR [esi+1996]
; Line 2429
	jmp	SHORT $LABEL_36$86245
$L86251:
; Line 2423
	mov	BYTE PTR _v9$[ebp], 2
; Line 2424
	lea	edi, DWORD PTR [esi+1628]
; Line 2425
	jmp	SHORT $LABEL_36$86245
$L86250:
; Line 2419
	mov	BYTE PTR _v9$[ebp], 1
; Line 2420
	lea	edi, DWORD PTR [esi+1260]
$LABEL_36$86245:
; Line 2474
	mov	eax, DWORD PTR [edi+8]
; Line 2475
	cmp	eax, -1
	mov	DWORD PTR _result$[ebp], eax
	jne	SHORT $L86267
$LABEL_37$86243:
; Line 2463
	or	BYTE PTR _result$[ebp], 255		; 000000ffH
; Line 2464
	jmp	$L87023
$L86267:
; Line 2477
	cmp	eax, 11					; 0000000bH
	jne	SHORT $L86268
; Line 2478
	mov	edi, DWORD PTR [edi+196]
; Line 2479
	mov	ecx, edi
	call	@get_pieces_str@4
; Line 2480
	push	eax
	push	edi
	push	OFFSET FLAT:??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
; Line 2481
	jmp	SHORT $L86275
$L86268:
; Line 2482
	mov	al, BYTE PTR [edi+60]
	cmp	al, 1
	jne	SHORT $L86271
; Line 2483
	mov	DWORD PTR _infoclr, 1
; Line 2484
	jmp	SHORT $L86273
$L86271:
	cmp	al, 2
	jne	SHORT $L86273
; Line 2485
	mov	DWORD PTR _infoclr, 3
$L86273:
; Line 2487
	lea	eax, DWORD PTR [edi+61]
	mov	esi, OFFSET FLAT:_infostr
	push	eax
	push	esi
	call	_strcpy
; Line 2488
	cmp	DWORD PTR [edi+56], 0
	pop	ecx
	pop	ecx
	je	SHORT $L86274
; Line 2489
	lea	eax, DWORD PTR [edi+125]
	push	eax
	push	esi
	call	_strcpy
	pop	ecx
	pop	ecx
; Line 2490
	mov	ecx, edi
	call	@PrintItemDetails@4
; Line 2491
	jmp	SHORT $L86275
$L86274:
; Line 2492
	mov	ecx, edi
	call	@PrintItemDur@4
$L86275:
; Line 2495
	mov	al, BYTE PTR _v9$[ebp]
	mov	BYTE PTR _result$[ebp], al
$L87023:
; Line 2496
	mov	eax, DWORD PTR _result$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 2497
	leave
	ret	0
_CheckInvHLight ENDP
_TEXT	ENDS
PUBLIC	@RemoveScroll@4
; Function compile flags: /Ogsy
;	COMDAT @RemoveScroll@4
_TEXT	SEGMENT
_pnum$ = -4
@RemoveScroll@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 2501
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	eax, ecx
	push	ebx
	mov	DWORD PTR _pnum$[ebp], eax
; Line 2512
	imul	eax, 21720				; 000054d8H
	push	esi
	mov	esi, DWORD PTR _plr[eax+18188]
; Line 2513
	xor	edx, edx
	push	edi
; Line 2514
	test	esi, esi
	mov	ebx, 368				; 00000170H
	jle	SHORT $LABEL_8$86288
; Line 2526
	lea	ecx, DWORD PTR _plr[eax+3688]
$L86297:
; Line 2527
	cmp	DWORD PTR [ecx-212], -1
	je	SHORT $L86299
	mov	edi, DWORD PTR [ecx]
	cmp	edi, 21					; 00000015H
	je	SHORT $L86300
	cmp	edi, 22					; 00000016H
	jne	SHORT $L86299
$L86300:
	mov	edi, DWORD PTR [ecx+4]
	cmp	edi, DWORD PTR _plr[eax+164]
	je	SHORT $L86298
$L86299:
; Line 2528
	inc	edx
; Line 2529
	add	ecx, ebx
; Line 2530
	cmp	edx, esi
	jl	SHORT $L86297
$LABEL_8$86288:
; Line 2516
	xor	edx, edx
; Line 2517
	lea	ecx, DWORD PTR _plr[eax+18452]
$L86290:
; Line 2518
	cmp	DWORD PTR [ecx-212], -1
	je	SHORT $L86292
	mov	esi, DWORD PTR [ecx]
	cmp	esi, 21					; 00000015H
	je	SHORT $L86293
	cmp	esi, 22					; 00000016H
	jne	SHORT $L86292
$L86293:
	mov	esi, DWORD PTR [ecx+4]
	cmp	esi, DWORD PTR _plr[eax+164]
	je	SHORT $L86291
$L86292:
; Line 2519
	inc	edx
; Line 2520
	add	ecx, ebx
; Line 2521
	cmp	edx, 8
	jl	SHORT $L86290
; Line 2523
	jmp	SHORT $L87030
$L86298:
; Line 2533
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@RemoveInvItem@8
	jmp	SHORT $L86295
$L86291:
; Line 2524
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@RemoveSpdBarItem@8
$L86295:
; Line 2535
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@CalcPlrScrolls@4
$L87030:
	pop	edi
	pop	esi
	pop	ebx
; Line 2536
	leave
	ret	0
@RemoveScroll@4 ENDP
_TEXT	ENDS
PUBLIC	_UseScroll
EXTRN	_leveltype:BYTE
; Function compile flags: /Ogsy
;	COMDAT _UseScroll
_TEXT	SEGMENT
_UseScroll PROC NEAR					; COMDAT
; Line 2547
	cmp	DWORD PTR _pcurs, 1
	push	ebx
	push	esi
	push	edi
	jne	$L86310
	cmp	BYTE PTR _leveltype, 0
	mov	eax, DWORD PTR _myplr
	jne	SHORT $L86309
	mov	ecx, eax
	imul	ecx, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[ecx+180]
	imul	ecx, 56					; 00000038H
	cmp	DWORD PTR _spelldata[ecx+24], 0
	je	SHORT $L86310
$L86309:
; Line 2551
	imul	eax, 21720				; 000054d8H
	xor	edi, edi
; Line 2552
	mov	ebx, 368				; 00000170H
	mov	edx, DWORD PTR _plr[eax+18188]
	test	edx, edx
	jle	SHORT $LABEL_11$86312
; Line 2563
	lea	ecx, DWORD PTR _plr[eax+3688]
$L86321:
; Line 2564
	cmp	DWORD PTR [ecx-212], -1
	je	SHORT $L86323
	mov	esi, DWORD PTR [ecx]
	cmp	esi, 21					; 00000015H
	je	SHORT $L86324
	cmp	esi, 22					; 00000016H
	jne	SHORT $L86323
$L86324:
	mov	esi, DWORD PTR [ecx+4]
	cmp	esi, DWORD PTR _plr[eax+180]
	je	SHORT $L86315
$L86323:
; Line 2565
	inc	edi
; Line 2566
	add	ecx, ebx
; Line 2567
	cmp	edi, edx
	jl	SHORT $L86321
$LABEL_11$86312:
; Line 2554
	xor	esi, esi
; Line 2555
	lea	ecx, DWORD PTR _plr[eax+18452]
$L86314:
; Line 2556
	cmp	DWORD PTR [ecx-212], -1
	je	SHORT $L86316
	mov	edx, DWORD PTR [ecx]
	cmp	edx, 21					; 00000015H
	je	SHORT $L86317
	cmp	edx, 22					; 00000016H
	jne	SHORT $L86316
$L86317:
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _plr[eax+180]
	je	SHORT $L86315
$L86316:
; Line 2557
	inc	esi
; Line 2558
	add	ecx, ebx
; Line 2559
	cmp	esi, 8
	jl	SHORT $L86314
$L86310:
; Line 2548
	xor	eax, eax
$L86302:
	pop	edi
	pop	esi
	pop	ebx
; Line 2572
	ret	0
$L86315:
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86302
_UseScroll ENDP
_TEXT	ENDS
PUBLIC	@UseStaffCharge@4
EXTRN	@CalcPlrStaff@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @UseStaffCharge@4
_TEXT	SEGMENT
@UseStaffCharge@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 2582
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+2372], -1
	je	SHORT $L86332
	cmp	DWORD PTR _plr[eax+2584], 23		; 00000017H
	jne	SHORT $L86332
	mov	edx, DWORD PTR _plr[eax+2588]
	cmp	edx, DWORD PTR _plr[eax+180]
	jne	SHORT $L86332
; Line 2583
	lea	eax, DWORD PTR _plr[eax+2592]
; Line 2584
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	jle	SHORT $L86332
; Line 2585
	dec	edx
	mov	DWORD PTR [eax], edx
; Line 2586
	jmp	@CalcPlrStaff@4
$L86332:
; Line 2589
	ret	0
@UseStaffCharge@4 ENDP
_TEXT	ENDS
PUBLIC	_UseStaff
; Function compile flags: /Ogsy
;	COMDAT _UseStaff
_TEXT	SEGMENT
_UseStaff PROC NEAR					; COMDAT
; Line 2596
	xor	eax, eax
; Line 2597
	cmp	DWORD PTR _pcurs, 1
	jne	SHORT $L86337
; Line 2602
	mov	ecx, DWORD PTR _myplr
	imul	ecx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ecx+2372], -1
	je	SHORT $L86337
	cmp	DWORD PTR _plr[ecx+2584], 23		; 00000017H
	jne	SHORT $L86337
	mov	edx, DWORD PTR _plr[ecx+2588]
	cmp	edx, DWORD PTR _plr[ecx+180]
	jne	SHORT $L86337
	cmp	DWORD PTR _plr[ecx+2592], eax
	jle	SHORT $L86337
; Line 2603
	inc	eax
$L86337:
; Line 2607
	ret	0
_UseStaff ENDP
_TEXT	ENDS
PUBLIC	_StartGoldDrop
EXTRN	_control_reset_talk:NEAR
EXTRN	_initialDropGoldIndex:DWORD
EXTRN	_initialDropGoldValue:DWORD
; Function compile flags: /Ogsy
;	COMDAT _StartGoldDrop
_TEXT	SEGMENT
_StartGoldDrop PROC NEAR				; COMDAT
; Line 2613
	mov	cl, BYTE PTR _pcursinvitem
	movsx	eax, cl
; Line 2614
	cmp	cl, 46					; 0000002eH
; Line 2615
	mov	ecx, DWORD PTR _myplr
	mov	DWORD PTR _initialDropGoldIndex, eax
	jle	SHORT $L86340
	imul	ecx, 21720				; 000054d8H
	imul	eax, 368				; 00000170H
	mov	eax, DWORD PTR _plr[ecx+eax+1132]
; Line 2616
	jmp	SHORT $L86341
$L86340:
; Line 2617
	imul	ecx, 21720				; 000054d8H
	imul	eax, 368				; 00000170H
	mov	eax, DWORD PTR _plr[ecx+eax+1088]
$L86341:
; Line 2618
	and	DWORD PTR _dropGoldValue, 0
; Line 2621
	cmp	DWORD PTR _talkflag, 0
	mov	DWORD PTR _initialDropGoldValue, eax
	mov	DWORD PTR _dropGoldFlag, 1
	je	SHORT $L86342
; Line 2622
	jmp	_control_reset_talk
$L86342:
; Line 2623
	ret	0
_StartGoldDrop ENDP
_TEXT	ENDS
PUBLIC	@UseInvItem@8
EXTRN	_stextflag:BYTE
EXTRN	@UseItem@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @UseInvItem@8
_TEXT	SEGMENT
_pnum$ = -8
_v14$ = -4
@UseInvItem@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _cii$ = edx
; Line 2629
	push	ecx
	push	ecx
	push	ebx
	push	ebp
	push	esi
	mov	eax, ecx
	push	edi
; Line 2642
	mov	edi, eax
	imul	edi, 21720				; 000054d8H
	xor	ecx, ecx
	mov	DWORD PTR _pnum$[esp+24], eax
	cmp	BYTE PTR _plr[edi+317], cl
	je	SHORT $L86357
	cmp	DWORD PTR _plr[edi+408], ecx
	jne	SHORT $L86357
	cmp	eax, DWORD PTR _myplr
; Line 2643
	je	$L86399
$L86357:
; Line 2645
	xor	eax, eax
	inc	eax
	cmp	DWORD PTR _pcurs, eax
	jne	$L86347
	cmp	BYTE PTR _stextflag, 0
	jne	$L86347
; Line 2646
	cmp	edx, 5
; Line 2647
	jle	$L87059
; Line 2648
	cmp	edx, 46					; 0000002eH
	jle	SHORT $L86360
; Line 2649
	cmp	DWORD PTR _talkflag, ecx
; Line 2650
	jne	$L86347
; Line 2651
	lea	ebx, DWORD PTR [edx-47]
; Line 2652
	mov	DWORD PTR _v14$[esp+24], eax
; Line 2653
	mov	esi, ebx
	imul	esi, 368				; 00000170H
	add	esi, edi
; Line 2654
	lea	ebp, DWORD PTR _plr[esi+18232]
; Line 2655
	jmp	SHORT $L86364
$L86360:
; Line 2656
	lea	ebx, DWORD PTR [edx-7]
; Line 2657
	mov	DWORD PTR _v14$[esp+24], ecx
; Line 2658
	mov	esi, ebx
	imul	esi, 368				; 00000170H
	add	esi, edi
; Line 2659
	lea	ebp, DWORD PTR _plr[esi+3468]
$L86364:
; Line 2661
	mov	eax, DWORD PTR [ebp+360]
	cmp	eax, 17					; 00000011H
	jne	SHORT $L86367
; Line 2663
	mov	al, BYTE PTR _plr[edi+352]
	mov	DWORD PTR _sfxdelay, 10			; 0000000aH
	test	al, al
	jne	SHORT $L86368
; Line 2664
	mov	DWORD PTR _sfxdnum, 815			; 0000032fH
; Line 2665
	jmp	$L86399
$L86368:
	cmp	al, 1
	jne	SHORT $L86370
; Line 2666
	mov	DWORD PTR _sfxdnum, 706			; 000002c2H
; Line 2667
	jmp	$L86399
$L86370:
	cmp	al, 2
	jne	$L86399
; Line 2668
	mov	DWORD PTR _sfxdnum, 603			; 0000025bH
; Line 2670
	jmp	$L86399
$L86367:
; Line 2672
	cmp	eax, 19					; 00000013H
	jne	SHORT $L86373
; Line 2673
	push	47					; 0000002fH
	pop	ecx
	call	@PlaySFX@4
; Line 2675
	mov	al, BYTE PTR _plr[edi+352]
	mov	DWORD PTR _sfxdelay, 10			; 0000000aH
	test	al, al
	jne	SHORT $L86374
; Line 2676
	mov	DWORD PTR _sfxdnum, 748			; 000002ecH
; Line 2677
	jmp	$L86399
$L86374:
	cmp	al, 1
	jne	SHORT $L86376
; Line 2678
	mov	DWORD PTR _sfxdnum, 639			; 0000027fH
; Line 2679
	jmp	$L86399
$L86376:
	cmp	al, 2
	jne	$L86399
; Line 2680
	mov	DWORD PTR _sfxdnum, 536			; 00000218H
; Line 2682
	jmp	$L86399
$L86373:
; Line 2684
	imul	eax, 76					; 0000004cH
	cmp	DWORD PTR _AllItemsList[eax+64], ecx
	jne	SHORT $L86379
$L87059:
; Line 2685
	xor	eax, eax
	jmp	$L86347
$L86379:
; Line 2686
	cmp	DWORD PTR [ebp+356], ecx
	jne	SHORT $L86380
; Line 2687
	mov	al, BYTE PTR _plr[edi+352]
	test	al, al
	jne	SHORT $L86381
; Line 2688
	mov	ecx, 726				; 000002d6H
; Line 2689
	jmp	SHORT $L87058
$L86381:
	cmp	al, 1
	jne	SHORT $L86383
; Line 2690
	mov	ecx, 623				; 0000026fH
; Line 2691
	jmp	SHORT $L87058
$L86383:
	cmp	al, 2
	jne	$L86399
; Line 2692
	mov	ecx, 520				; 00000208H
$L87058:
	call	@PlaySFX@4
; Line 2694
	jmp	$L86399
$L86380:
; Line 2696
	mov	eax, DWORD PTR [ebp+220]
; Line 2697
	cmp	eax, ecx
	jne	SHORT $L86386
	cmp	DWORD PTR [ebp+8], 11			; 0000000bH
	jne	SHORT $L86386
; Line 2698
	call	_StartGoldDrop
; Line 2699
	jmp	$L86399
$L86386:
; Line 2701
	cmp	DWORD PTR _dropGoldFlag, ecx
	je	SHORT $L86387
; Line 2702
	mov	DWORD PTR _dropGoldFlag, ecx
; Line 2703
	mov	DWORD PTR _dropGoldValue, ecx
$L86387:
; Line 2706
	mov	dl, BYTE PTR _currlevel
	cmp	eax, 21					; 00000015H
	jne	SHORT $L86390
	test	dl, dl
	jne	SHORT $L86391
	mov	edi, DWORD PTR [ebp+224]
	imul	edi, 56					; 00000038H
	cmp	DWORD PTR _spelldata[edi+24], ecx
	je	$L86399
$L86390:
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86388
	test	dl, dl
	jne	SHORT $L86391
	mov	eax, DWORD PTR [ebp+224]
	imul	eax, 56					; 00000038H
	cmp	DWORD PTR _spelldata[eax+24], ecx
	je	SHORT $L86399
$L86391:
; Line 2712
	mov	eax, DWORD PTR _pnum$[esp+24]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $LABEL_39$86394
; Line 2714
	mov	eax, DWORD PTR [ebp+192]
	movzx	eax, BYTE PTR _ItemCAnimTbl[eax]
	mov	ecx, DWORD PTR _ItemInvSnds[eax*4]
$L86392:
; Line 2716
	call	@PlaySFX@4
$LABEL_39$86394:
; Line 2718
	push	DWORD PTR [ebp+224]
	mov	edx, DWORD PTR [ebp+220]
	mov	ecx, DWORD PTR _pnum$[esp+28]
	call	@UseItem@12
; Line 2719
	cmp	DWORD PTR _v14$[esp+24], 0
	je	SHORT $L86395
; Line 2720
	mov	ecx, DWORD PTR _pnum$[esp+24]
	mov	edx, ebx
	call	@RemoveSpdBarItem@8
; Line 2721
	jmp	SHORT $L86399
$L86388:
; Line 2709
	cmp	eax, 24					; 00000018H
	jne	SHORT $L86391
; Line 2710
	push	65					; 00000041H
	pop	ecx
; Line 2711
	jmp	SHORT $L86392
$L86395:
; Line 2721
	cmp	DWORD PTR _plr[esi+3688], 42		; 0000002aH
	je	SHORT $L86399
; Line 2722
	mov	ecx, DWORD PTR _pnum$[esp+24]
	mov	edx, ebx
	call	@RemoveInvItem@8
$L86399:
; Line 2724
	xor	eax, eax
	inc	eax
$L86347:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2727
	pop	ecx
	pop	ecx
	ret	0
@UseInvItem@8 ENDP
_TEXT	ENDS
PUBLIC	_DoTelekinesis
EXTRN	_pcursmonst:DWORD
EXTRN	_pcursobj:BYTE
EXTRN	@NetSendCmdParam1@12:NEAR
EXTRN	_monster:BYTE
EXTRN	@NetSendCmdGItem@20:NEAR
EXTRN	@M_Talker@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DoTelekinesis
_TEXT	SEGMENT
_DoTelekinesis PROC NEAR				; COMDAT
; Line 2735
	mov	al, BYTE PTR _pcursobj
	cmp	al, -1
	je	SHORT $L86401
; Line 2736
	movsx	ax, al
	xor	ecx, ecx
	push	eax
	mov	dl, 27					; 0000001bH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86401:
; Line 2737
	mov	al, BYTE PTR _pcursitem
	cmp	al, -1
	je	SHORT $L86402
; Line 2738
	push	eax
	mov	al, BYTE PTR _myplr
	mov	cl, al
	mov	dl, 40					; 00000028H
	push	ecx
	xor	ecx, ecx
	push	eax
	inc	ecx
	call	@NetSendCmdGItem@20
$L86402:
; Line 2739
	mov	ecx, DWORD PTR _pcursmonst
	cmp	ecx, -1
	je	SHORT $L86403
	call	@M_Talker@4
	test	eax, eax
	jne	SHORT $L86403
	mov	eax, DWORD PTR _pcursmonst
	mov	ecx, eax
	imul	ecx, 228				; 000000e4H
	cmp	DWORD PTR _monster[ecx+208], 0
	jne	SHORT $L86403
; Line 2740
	xor	ecx, ecx
	push	eax
	mov	dl, 28					; 0000001cH
	inc	ecx
	call	@NetSendCmdParam1@12
$L86403:
; Line 2741
	xor	ecx, ecx
	inc	ecx
	jmp	@SetCursor_@4
_DoTelekinesis ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @CalculateGold@4
_TEXT	SEGMENT
@CalculateGold@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 2755
	xor	eax, eax
; Line 2757
	imul	ecx, 21720				; 000054d8H
	push	esi
	push	edi
	push	8
	lea	edx, DWORD PTR _plr[ecx+18428]
	pop	esi
	mov	edi, 368				; 00000170H
$L86413:
; Line 2760
	cmp	DWORD PTR [edx-188], 11			; 0000000bH
	jne	SHORT $L86416
; Line 2761
	add	eax, DWORD PTR [edx]
; Line 2762
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
$L86416:
; Line 2764
	add	edx, edi
; Line 2766
	dec	esi
	jne	SHORT $L86413
; Line 2767
	mov	edx, DWORD PTR _plr[ecx+18188]
; Line 2768
	test	edx, edx
	jle	SHORT $L86420
; Line 2769
	lea	ecx, DWORD PTR _plr[ecx+3664]
$L86418:
; Line 2771
	cmp	DWORD PTR [ecx-188], 11			; 0000000bH
	jne	SHORT $L86421
; Line 2772
	add	eax, DWORD PTR [ecx]
$L86421:
; Line 2773
	add	ecx, edi
; Line 2774
	dec	edx
; Line 2775
	jne	SHORT $L86418
$L86420:
	pop	edi
	pop	esi
; Line 2778
	ret	0
@CalculateGold@4 ENDP
_TEXT	ENDS
PUBLIC	_DropItemBeforeTrig
; Function compile flags: /Ogsy
;	COMDAT _DropItemBeforeTrig
_TEXT	SEGMENT
_DropItemBeforeTrig PROC NEAR				; COMDAT
; Line 2783
	call	_TryInvPut
	test	eax, eax
	jne	SHORT $L86423
; Line 2788
	ret	0
$L86423:
; Line 2785
	mov	al, BYTE PTR _cursmy
	xor	ecx, ecx
	push	eax
	mov	al, BYTE PTR _cursmx
	push	eax
	mov	dl, 10					; 0000000aH
	inc	ecx
	call	@NetSendCmdPItem@16
; Line 2786
	xor	ecx, ecx
	inc	ecx
	call	@SetCursor_@4
; Line 2787
	xor	eax, eax
	inc	eax
; Line 2788
	ret	0
_DropItemBeforeTrig ENDP
_TEXT	ENDS
END
