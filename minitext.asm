; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/minitext.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BC@IDHL@Data?2MedTextS?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KOCM@Data?2TextBox?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _qmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FreeQuestText
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitQuestText
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitQTextMsg@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawQTextBack
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PrintQTextChr@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawQText
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_mfontframe
PUBLIC	_mfontkern
PUBLIC	_qscroll_spd_tbl
_DATA	SEGMENT
COMM	_qtexty:DWORD
COMM	_qtextptr:DWORD
COMM	_qtextSpd:DWORD
COMM	_qtextflag:BYTE
COMM	_scrolltexty:DWORD
COMM	_pMedTextCels:DWORD
COMM	_pTextBoxCels:DWORD
COMM	_sgLastScroll:DWORD
_DATA	ENDS
CONST	SEGMENT
_mfontframe DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	025H
	DB	031H
	DB	026H
	DB	00H
	DB	027H
	DB	028H
	DB	02fH
	DB	02aH
	DB	02bH
	DB	029H
	DB	02dH
	DB	034H
	DB	02cH
	DB	035H
	DB	037H
	DB	024H
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	033H
	DB	032H
	DB	030H
	DB	02eH
	DB	031H
	DB	036H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	02aH
	DB	00H
	DB	02bH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	030H
	DB	00H
	DB	031H
	DB	00H
	ORG $+1
_mfontkern DB	05H
	DB	0fH
	DB	0aH
	DB	0dH
	DB	0eH
	DB	0aH
	DB	09H
	DB	0dH
	DB	0bH
	DB	05H
	DB	05H
	DB	0bH
	DB	0aH
	DB	010H
	DB	0dH
	DB	010H
	DB	0aH
	DB	0fH
	DB	0cH
	DB	0aH
	DB	0eH
	DB	011H
	DB	011H
	DB	016H
	DB	011H
	DB	010H
	DB	0bH
	DB	05H
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0fH
	DB	05H
	DB	0aH
	DB	012H
	DB	0fH
	DB	08H
	DB	06H
	DB	06H
	DB	07H
	DB	0aH
	DB	09H
	DB	06H
	DB	0aH
	DB	0aH
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	0bH
	DB	0cH
CONST	ENDS
_DATA	SEGMENT
_qscroll_spd_tbl DD 02H
	DD	04H
	DD	06H
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	0fffffffeH
	DD	0fffffffdH
	DD	0fffffffcH
_DATA	ENDS
PUBLIC	_FreeQuestText
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _FreeQuestText
_TEXT	SEGMENT
_FreeQuestText PROC NEAR				; COMDAT
; File Source/minitext.cpp
; Line 47
	mov	ecx, DWORD PTR _pMedTextCels
; Line 48
	and	DWORD PTR _pMedTextCels, 0
; Line 49
	call	@mem_free_dbg@4
; Line 50
	mov	ecx, DWORD PTR _pTextBoxCels
; Line 51
	and	DWORD PTR _pTextBoxCels, 0
; Line 52
	jmp	@mem_free_dbg@4
_FreeQuestText ENDP
_TEXT	ENDS
PUBLIC	_InitQuestText
PUBLIC	??_C@_0BC@IDHL@Data?2MedTextS?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BB@KOCM@Data?2TextBox?4CEL?$AA@		; `string'
EXTRN	@LoadFileInMem@8:NEAR
;	COMDAT ??_C@_0BC@IDHL@Data?2MedTextS?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BC@IDHL@Data?2MedTextS?4CEL?$AA@ DB 'Data\MedTextS.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KOCM@Data?2TextBox?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BB@KOCM@Data?2TextBox?4CEL?$AA@ DB 'Data\TextBox.CEL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _InitQuestText
_TEXT	SEGMENT
_InitQuestText PROC NEAR				; COMDAT
; Line 59
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BC@IDHL@Data?2MedTextS?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 60
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BB@KOCM@Data?2TextBox?4CEL?$AA@ ; `string'
	mov	DWORD PTR _pMedTextCels, eax
	call	@LoadFileInMem@8
; Line 61
	and	BYTE PTR _qtextflag, 0
; Line 62
	mov	DWORD PTR _pTextBoxCels, eax
; Line 63
	ret	0
_InitQuestText ENDP
_TEXT	ENDS
PUBLIC	@InitQTextMsg@4
EXTRN	_alltext:BYTE
EXTRN	_questlog:DWORD
EXTRN	@PlaySFX@4:NEAR
EXTRN	__imp__GetTickCount@0:NEAR
; Function compile flags: /Ogsy
;	COMDAT @InitQTextMsg@4
_TEXT	SEGMENT
@InitQTextMsg@4 PROC NEAR				; COMDAT
; _m$ = ecx
; Line 68
	shl	ecx, 4
	push	esi
	mov	esi, ecx
	cmp	DWORD PTR _alltext[esi+4], 0
	je	SHORT $L84993
; Line 70
	mov	eax, DWORD PTR _alltext[esi]
	and	DWORD PTR _questlog, 0
	mov	DWORD PTR _qtextptr, eax
; Line 73
	mov	eax, DWORD PTR _alltext[esi+8]
	mov	BYTE PTR _qtextflag, 1
	mov	DWORD PTR _qtexty, 500			; 000001f4H
	mov	eax, DWORD PTR _qscroll_spd_tbl[eax*4-4]
	mov	DWORD PTR _sgLastScroll, eax
; Line 74
	mov	DWORD PTR _scrolltexty, eax
; Line 75
	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR _qtextSpd, eax
$L84993:
; Line 77
	mov	ecx, DWORD PTR _alltext[esi+12]
	pop	esi
	jmp	@PlaySFX@4
@InitQTextMsg@4 ENDP
_TEXT	ENDS
PUBLIC	_DrawQTextBack
EXTRN	_gpBuffer:DWORD
EXTRN	@CelDecodeOnly@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DrawQTextBack
_TEXT	SEGMENT
_DrawQTextBack PROC NEAR				; COMDAT
; Line 87
	push	edi
; Line 88
	push	591					; 0000024fH
	push	1
	mov	edx, 487				; 000001e7H
	push	DWORD PTR _pTextBoxCels
	push	88					; 00000058H
	pop	ecx
	call	@CelDecodeOnly@20
; File Source/asm_trans_rect.inc
; Line 16
	mov	edi, DWORD PTR _gpBuffer
; Line 18
	add	edi, 371803				; 0005ac5bH
; Line 19
	xor	eax, eax
; Line 20
	mov	edx, 148				; 00000094H
$yloop$84996:
; Line 22
	mov	ecx, 292				; 00000124H
$x0loop$84997:
; Line 24
	stosb
; Line 25
	inc	edi
; Line 26
	loop	$x0loop$84997
; Line 28
	stosb
; Line 30
	sub	edi, 1353				; 00000549H
; Line 31
	mov	ecx, 292				; 00000124H
$x1loop$84998:
; Line 33
	inc	edi
; Line 34
	stosb
; Line 35
	loop	$x1loop$84998
; Line 36
	sub	edi, 1352				; 00000548H
; Line 37
	dec	edx
; Line 38
	jne	SHORT $yloop$84996
; Line 40
	mov	ecx, 292				; 00000124H
$x2loop$84999:
; Line 42
	stosb
; Line 43
	inc	edi
; Line 44
	loop	$x2loop$84999
; Line 46
	stosb
; Line 15
	pop	edi
; File Source/minitext.cpp
; Line 95
	ret	0
_DrawQTextBack ENDP
_TEXT	ENDS
PUBLIC	@PrintQTextChr@16
EXTRN	_screen_y_times_768:BYTE
; Function compile flags: /Ogsy
;	COMDAT @PrintQTextChr@16
_TEXT	SEGMENT
_cel_buf$ = 8
_frame$ = 12
_v8$ = 12
_v9$ = 8
_v13$ = -8
_v14$ = -12
@PrintQTextChr@16 PROC NEAR				; COMDAT
; _screen_x$ = ecx
; _screen_y$ = edx
; Line 98
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 111
	mov	eax, DWORD PTR _gpBuffer
	push	ebx
	push	esi
	mov	esi, DWORD PTR _screen_y_times_768+836
	add	esi, eax
; Line 113
	mov	ebx, DWORD PTR _cel_buf$[ebp]
	mov	DWORD PTR _v13$[ebp], esi
	mov	esi, DWORD PTR _screen_y_times_768+1876
	add	esi, eax
; Line 115
	mov	edx, DWORD PTR _screen_y_times_768[edx*4]
	mov	DWORD PTR _v14$[ebp], esi
	mov	esi, DWORD PTR _frame$[ebp]
	push	edi
	add	edx, eax
	lea	esi, DWORD PTR [ebx+esi*4]
	add	edx, ecx
	mov	edi, DWORD PTR [esi]
; Line 116
	mov	esi, DWORD PTR [esi+4]
	add	ebx, edi
	sub	esi, edi
	add	esi, ebx
$L85027:
; Line 118
	mov	DWORD PTR _v8$[ebp], 22			; 00000016H
$L85034:
; Line 121
	movzx	edi, BYTE PTR [ebx]
	mov	DWORD PTR _v9$[ebp], edi
	inc	ebx
; Line 122
	test	BYTE PTR _v9$[ebp], 128			; 00000080H
	je	SHORT $L85146
; Line 124
	neg	BYTE PTR _v9$[ebp]
; Line 125
	mov	eax, DWORD PTR _v9$[ebp]
	add	edx, eax
; Line 126
	sub	DWORD PTR _v8$[ebp], eax
	jmp	SHORT $L85153
$L85146:
; Line 130
	sub	DWORD PTR _v8$[ebp], edi
; Line 131
	cmp	edx, DWORD PTR _v13$[ebp]
	jb	SHORT $L85043
	cmp	edx, DWORD PTR _v14$[ebp]
	ja	SHORT $L85043
; Line 135
	mov	eax, edi
	shr	eax, 1
; Line 136
	test	BYTE PTR _v9$[ebp], 1
	je	SHORT $L85046
	mov	cl, BYTE PTR [ebx]
	inc	ebx
	mov	BYTE PTR [edx], cl
	inc	edx
	test	eax, eax
	je	SHORT $L85031
$L85046:
; Line 138
	shr	edi, 2
	test	al, 1
; Line 139
	je	SHORT $L85050
	mov	ax, WORD PTR [ebx]
	inc	ebx
	mov	WORD PTR [edx], ax
	inc	ebx
	inc	edx
	inc	edx
	test	edi, edi
	je	SHORT $L85031
$L85050:
; Line 140
	shl	edi, 2
	test	edi, edi
	mov	eax, edx
	jbe	SHORT $L85043
	mov	DWORD PTR 8+[ebp], ebx
	mov	DWORD PTR -4+[ebp], edi
	sub	DWORD PTR 8+[ebp], edx
$L85138:
	mov	ecx, DWORD PTR 8+[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], cl
	inc	eax
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L85138
$L85043:
; Line 132
	add	ebx, edi
; Line 133
	add	edx, edi
$L85031:
; Line 146
	cmp	DWORD PTR _v8$[ebp], 0
$L85153:
	jne	SHORT $L85034
; Line 148
	sub	edx, 790				; 00000316H
; Line 149
	cmp	esi, ebx
$LABEL_15$85041:
	jne	$L85027
	pop	edi
	pop	esi
	pop	ebx
; Line 150
	leave
	ret	8
@PrintQTextChr@16 ENDP
_TEXT	ENDS
PUBLIC	_DrawQText
EXTRN	_fontidx:BYTE
; Function compile flags: /Ogsy
;	COMDAT _DrawQText
_TEXT	SEGMENT
_qstr$ = -144
_v13$ = -16
_v14$ = -12
_screen_y$ = -8
_screen_x$ = -4
_DrawQText PROC NEAR					; COMDAT
; Line 153
	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	ebx
	push	edi
; Line 172
	call	_DrawQTextBack
; Line 176
	mov	eax, DWORD PTR _qtexty
	mov	edi, DWORD PTR _qtextptr
	xor	ebx, ebx
	mov	DWORD PTR _screen_x$[ebp], 112		; 00000070H
	mov	DWORD PTR _v13$[ebp], ebx
	mov	DWORD PTR _screen_y$[ebp], eax
; Line 177
	mov	DWORD PTR _v14$[ebp], ebx
	push	esi
$L85070:
; Line 179
	xor	esi, esi
; Line 180
	xor	ecx, ecx
; Line 181
	cmp	BYTE PTR [edi], 10			; 0000000aH
	mov	eax, edi
	je	SHORT $L85161
$L85073:
; Line 182
	mov	dl, BYTE PTR [eax]
	cmp	dl, 124					; 0000007cH
	je	SHORT $L85161
	cmp	esi, 543				; 0000021fH
	jge	SHORT $L85161
; Line 185
	movzx	edx, dl
	inc	eax
	mov	dl, BYTE PTR _fontidx[edx]
; Line 186
	test	dl, dl
	je	SHORT $L85078
; Line 187
	mov	BYTE PTR _qstr$[ebp+ecx], dl
; Line 188
	movzx	edx, dl
	movzx	edx, BYTE PTR _mfontframe[edx]
	movzx	edx, BYTE PTR _mfontkern[edx]
	lea	esi, DWORD PTR [esi+edx+2]
; Line 189
	jmp	SHORT $L85074
$L85078:
; Line 190
	dec	ecx
$L85074:
; Line 181
	inc	ecx
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $L85073
$L85161:
; Line 193
	mov	dl, BYTE PTR [eax]
; Line 194
	lea	eax, DWORD PTR _qstr$[ebp+ecx]
; Line 195
	and	BYTE PTR [eax], 0
; Line 196
	cmp	dl, 124					; 0000007cH
	jne	SHORT $L85080
; Line 197
	and	BYTE PTR [eax], 0
; Line 198
	mov	DWORD PTR _v14$[ebp], 1
; Line 199
	jmp	SHORT $L85085
$L85080:
	cmp	dl, 10					; 0000000aH
	je	SHORT $L85085
	jmp	SHORT $L85168
$L85084:
; Line 200
	cmp	ecx, ebx
	jle	SHORT $L85085
; Line 201
	and	BYTE PTR [eax], 0
; Line 202
	dec	ecx
	lea	eax, DWORD PTR _qstr$[ebp+ecx]
$L85168:
; Line 200
	cmp	BYTE PTR [eax], 32			; 00000020H
	jne	SHORT $L85084
$L85085:
; Line 205
	mov	al, BYTE PTR _qstr$[ebp]
; Line 206
	test	al, al
	je	SHORT $L85089
; Line 207
	lea	esi, DWORD PTR _qstr$[ebp]
$L85087:
; Line 210
	movzx	eax, al
	inc	edi
	movzx	eax, BYTE PTR _fontidx[eax]
; Line 211
	cmp	BYTE PTR [edi], 10			; 0000000aH
	mov	bl, BYTE PTR _mfontframe[eax]
	jne	SHORT $L85090
; Line 212
	inc	edi
$L85090:
; Line 213
	test	bl, bl
	je	SHORT $L85091
; Line 214
	mov	edx, DWORD PTR _screen_y$[ebp]
	mov	ecx, DWORD PTR _screen_x$[ebp]
	movzx	eax, bl
	push	eax
	push	DWORD PTR _pMedTextCels
	call	@PrintQTextChr@16
$L85091:
; Line 216
	mov	ecx, DWORD PTR _screen_x$[ebp]
	inc	esi
	movzx	eax, bl
	movzx	eax, BYTE PTR _mfontkern[eax]
	lea	eax, DWORD PTR [ecx+eax+2]
	mov	DWORD PTR _screen_x$[ebp], eax
; Line 217
	mov	al, BYTE PTR [esi]
; Line 218
	test	al, al
	jne	SHORT $L85087
	xor	ebx, ebx
$L85089:
; Line 220
	cmp	DWORD PTR _v13$[ebp], ebx
	jne	SHORT $L85093
; Line 221
	mov	DWORD PTR _v13$[ebp], edi
$L85093:
; Line 222
	add	DWORD PTR _screen_y$[ebp], 38		; 00000026H
; Line 223
	mov	DWORD PTR _screen_x$[ebp], 112		; 00000070H
; Line 224
	cmp	DWORD PTR _screen_y$[ebp], 501		; 000001f5H
	jle	SHORT $L85071
; Line 225
	mov	DWORD PTR _v14$[ebp], 1
$L85071:
; Line 226
	cmp	DWORD PTR _v14$[ebp], ebx
	je	$L85070
; Line 227
	call	DWORD PTR __imp__GetTickCount@0
	mov	ecx, DWORD PTR _sgLastScroll
	pop	esi
$L85096:
; Line 229
	cmp	ecx, ebx
	jg	SHORT $L85098
; Line 230
	mov	edx, DWORD PTR _qtexty
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _qtexty, edx
; Line 231
	jmp	SHORT $LABEL_33$85099
$L85098:
; Line 233
	dec	DWORD PTR _scrolltexty
	je	SHORT $L85101
; Line 234
	dec	DWORD PTR _qtexty
$LABEL_33$85099:
; Line 236
	cmp	DWORD PTR _scrolltexty, ebx
	jne	SHORT $LABEL_35$85102
$L85101:
; Line 239
	mov	DWORD PTR _scrolltexty, ecx
$LABEL_35$85102:
; Line 241
	cmp	DWORD PTR _qtexty, 209			; 000000d1H
	jle	SHORT $L85097
; Line 243
	add	DWORD PTR _qtextSpd, 50			; 00000032H
; Line 244
	mov	edx, eax
	sub	edx, DWORD PTR _qtextSpd
	cmp	edx, 2147483647				; 7fffffffH
	jb	SHORT $L85096
; Line 228
	jmp	SHORT $L85105
$L85097:
; Line 248
	mov	eax, DWORD PTR _v13$[ebp]
	add	DWORD PTR _qtexty, 38			; 00000026H
	mov	DWORD PTR _qtextptr, eax
; Line 249
	cmp	BYTE PTR [eax], 124			; 0000007cH
	jne	SHORT $L85105
; Line 250
	and	BYTE PTR _qtextflag, 0
$L85105:
	pop	edi
	pop	ebx
; Line 251
	leave
	ret	0
_DrawQText ENDP
_TEXT	ENDS
END
