; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/plrmsg.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BA@JOA@?$CFs?5?$CIlvl?5?$CFd?$CJ?3?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @plrmsg_delay@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ErrorPlrMsg@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _EventPlrMsg
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SendPlrMsg@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ClearPlrMsg
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitPlrMsg
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawPlrMsg
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PrintPlrMsg@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_text_color_from_player_num
_DATA	SEGMENT
COMM	_plr_msgs:BYTE:04c0H
_DATA	ENDS
CONST	SEGMENT
_text_color_from_player_num DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
CONST	ENDS
PUBLIC	@plrmsg_delay@4
EXTRN	__imp__GetTickCount@0:NEAR
_BSS	SEGMENT
?plrmsg_ticks@?1??plrmsg_delay@@9@9 DD 01H DUP (?)	; `plrmsg_delay'::`2'::plrmsg_ticks
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT @plrmsg_delay@4
_TEXT	SEGMENT
@plrmsg_delay@4 PROC NEAR				; COMDAT
; _delay$ = ecx
; File Source/plrmsg.cpp
; Line 16
	test	ecx, ecx
	je	SHORT $L84990
; Line 17
	call	DWORD PTR __imp__GetTickCount@0
	neg	eax
	mov	DWORD PTR ?plrmsg_ticks@?1??plrmsg_delay@@9@9, eax
; Line 25
	ret	0
$L84990:
; Line 21
	call	DWORD PTR __imp__GetTickCount@0
	add	DWORD PTR ?plrmsg_ticks@?1??plrmsg_delay@@9@9, eax
; Line 22
	mov	eax, OFFSET FLAT:_plr_msgs
	push	8
	pop	ecx
$L84991:
; Line 24
	mov	edx, DWORD PTR ?plrmsg_ticks@?1??plrmsg_delay@@9@9
	add	DWORD PTR [eax], edx
	add	eax, 152				; 00000098H
	dec	ecx
	jne	SHORT $L84991
; Line 25
	ret	0
@plrmsg_delay@4 ENDP
_TEXT	ENDS
PUBLIC	@ErrorPlrMsg@4
EXTRN	_strncpy:NEAR
_BSS	SEGMENT
_plr_msg_slot DB 01H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT @ErrorPlrMsg@4
_TEXT	SEGMENT
@ErrorPlrMsg@4 PROC NEAR				; COMDAT
; _pszMsg$ = ecx
; Line 30
	mov	al, BYTE PTR _plr_msg_slot
	push	esi
	movzx	esi, al
	imul	esi, 152				; 00000098H
	add	esi, OFFSET FLAT:_plr_msgs
; Line 31
	inc	al
	and	al, 7
	push	edi
	mov	edi, ecx
	mov	BYTE PTR _plr_msg_slot, al
; Line 32
	mov	BYTE PTR [esi+4], 4
; Line 33
	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR [esi], eax
; Line 34
	lea	eax, DWORD PTR [esi+5]
	push	144					; 00000090H
	push	edi
	push	eax
	call	_strncpy
; Line 35
	and	BYTE PTR [esi+148], 0
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 37
	ret	0
@ErrorPlrMsg@4 ENDP
_TEXT	ENDS
PUBLIC	_EventPlrMsg
EXTRN	_vsprintf:NEAR
EXTRN	_strlen:NEAR
; Function compile flags: /Ogsy
;	COMDAT _EventPlrMsg
_TEXT	SEGMENT
_pszFmt$ = 8
_EventPlrMsg PROC NEAR					; COMDAT
; Line 45
	mov	al, BYTE PTR _plr_msg_slot
	push	esi
	movzx	esi, al
	imul	esi, 152				; 00000098H
	add	esi, OFFSET FLAT:_plr_msgs
; Line 46
	inc	al
	and	al, 7
	mov	BYTE PTR _plr_msg_slot, al
; Line 47
	mov	BYTE PTR [esi+4], 4
; Line 48
	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR [esi], eax
; Line 49
	lea	eax, DWORD PTR _pszFmt$[esp+4]
	push	eax
	add	esi, 5
	push	DWORD PTR _pszFmt$[esp+4]
	push	esi
	call	_vsprintf
; Line 51
	push	esi
	call	_strlen
	add	esp, 16					; 00000010H
	pop	esi
; Line 52
	ret	0
_EventPlrMsg ENDP
_TEXT	ENDS
PUBLIC	@SendPlrMsg@8
PUBLIC	??_C@_0BA@JOA@?$CFs?5?$CIlvl?5?$CFd?$CJ?3?5?$CFs?$AA@ ; `string'
EXTRN	_sprintf:NEAR
EXTRN	_plr:BYTE
;	COMDAT ??_C@_0BA@JOA@?$CFs?5?$CIlvl?5?$CFd?$CJ?3?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BA@JOA@?$CFs?5?$CIlvl?5?$CFd?$CJ?3?5?$CFs?$AA@ DB '%s (lvl %d): %s'
	DB	00H						; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SendPlrMsg@8
_TEXT	SEGMENT
@SendPlrMsg@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _pszStr$ = edx
; Line 56
	mov	al, BYTE PTR _plr_msg_slot
	push	ebx
	push	ebp
	push	esi
	movzx	esi, al
	imul	esi, 152				; 00000098H
	add	esi, OFFSET FLAT:_plr_msgs
; Line 57
	inc	al
	mov	ebx, ecx
	and	al, 7
	push	edi
	mov	ebp, edx
	mov	BYTE PTR _plr_msg_slot, al
; Line 58
	mov	BYTE PTR [esi+4], bl
; Line 59
	call	DWORD PTR __imp__GetTickCount@0
; Line 60
	mov	edi, ebx
	mov	DWORD PTR [esi], eax
	imul	edi, 21720				; 000054d8H
	lea	ebx, DWORD PTR _plr[edi+320]
	push	ebx
	call	_strlen
; Line 61
	push	ebp
	call	_strlen
; Line 62
	movsx	eax, BYTE PTR _plr[edi+440]
	push	ebp
	push	eax
	push	ebx
	add	esi, 5
	push	OFFSET FLAT:??_C@_0BA@JOA@?$CFs?5?$CIlvl?5?$CFd?$CJ?3?5?$CFs?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 63
	ret	0
@SendPlrMsg@8 ENDP
_TEXT	ENDS
PUBLIC	_ClearPlrMsg
; Function compile flags: /Ogsy
;	COMDAT _ClearPlrMsg
_TEXT	SEGMENT
_ClearPlrMsg PROC NEAR					; COMDAT
; Line 66
	push	esi
; Line 68
	mov	esi, OFFSET FLAT:_plr_msgs
; Line 69
	call	DWORD PTR __imp__GetTickCount@0
	push	8
	pop	ecx
$L85019:
; Line 72
	mov	edx, eax
	sub	edx, DWORD PTR [esi]
	cmp	edx, 10000				; 00002710H
	jle	SHORT $L85020
; Line 73
	and	BYTE PTR [esi+5], 0
$L85020:
; Line 71
	add	esi, 152				; 00000098H
	dec	ecx
	jne	SHORT $L85019
	pop	esi
; Line 75
	ret	0
_ClearPlrMsg ENDP
_TEXT	ENDS
PUBLIC	_InitPlrMsg
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT _InitPlrMsg
_TEXT	SEGMENT
_InitPlrMsg PROC NEAR					; COMDAT
; Line 79
	push	1216					; 000004c0H
	push	0
	push	OFFSET FLAT:_plr_msgs
	call	_memset
; Line 80
	and	BYTE PTR _plr_msg_slot, 0
	add	esp, 12					; 0000000cH
; Line 81
	ret	0
_InitPlrMsg ENDP
_TEXT	ENDS
PUBLIC	_DrawPlrMsg
PUBLIC	@PrintPlrMsg@20
EXTRN	_questlog:DWORD
EXTRN	_invflag:DWORD
EXTRN	_sbookflag:DWORD
EXTRN	_chrflag:DWORD
; Function compile flags: /Ogsy
;	COMDAT _DrawPlrMsg
_TEXT	SEGMENT
_DrawPlrMsg PROC NEAR					; COMDAT
; Line 84
	push	ecx
	push	ebx
	push	ebp
	push	edi
; Line 91
	xor	eax, eax
	cmp	DWORD PTR _chrflag, eax
	push	74					; 0000004aH
	pop	ebx
	mov	ebp, 230				; 000000e6H
	mov	edi, 620				; 0000026cH
	jne	SHORT $L85032
	cmp	DWORD PTR _questlog, eax
	jne	SHORT $L85032
; Line 96
	cmp	DWORD PTR _invflag, eax
	jne	SHORT $L85037
	cmp	DWORD PTR _sbookflag, eax
	je	SHORT $L85036
; Line 97
	jmp	SHORT $L85037
$L85032:
; Line 92
	cmp	DWORD PTR _invflag, eax
	jne	SHORT $L85034
	cmp	DWORD PTR _sbookflag, eax
	jne	SHORT $L85034
; Line 94
	mov	ebx, 394				; 0000018aH
$L85037:
; Line 95
	mov	edi, 300				; 0000012cH
$L85036:
	push	esi
; Line 99
	mov	esi, OFFSET FLAT:_plr_msgs+5
	mov	DWORD PTR -4+[esp+20], 8
$L85038:
; Line 101
	cmp	BYTE PTR [esi], 0
	je	SHORT $L85041
; Line 102
	movzx	eax, BYTE PTR [esi-1]
	mov	edx, ebp
	mov	ecx, ebx
	mov	al, BYTE PTR _text_color_from_player_num[eax]
	push	eax
	push	esi
	push	edi
	call	@PrintPlrMsg@20
$L85041:
; Line 103
	add	esi, 152				; 00000098H
; Line 104
	add	ebp, 35					; 00000023H
	dec	DWORD PTR -4+[esp+20]
	jne	SHORT $L85038
	pop	esi
$L85034:
	pop	edi
	pop	ebp
	pop	ebx
; Line 106
	pop	ecx
	ret	0
_DrawPlrMsg ENDP
_TEXT	ENDS
EXTRN	_fontframe:BYTE
EXTRN	_fontkern:BYTE
EXTRN	_fontidx:BYTE
EXTRN	_screen_y_times_768:BYTE
EXTRN	@CPrintString@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @PrintPlrMsg@20
_TEXT	SEGMENT
_x$ = -12
_width$ = 8
_str$ = 12
_col$ = 16
_line$ = -4
_endstr$85061 = 12
@PrintPlrMsg@20 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 110
	and	DWORD PTR _line$[ebp], 0
	push	ebx
	push	esi
	push	edi
; Line 112
	mov	edi, DWORD PTR _str$[ebp]
	mov	DWORD PTR _x$[ebp], ecx
	cmp	BYTE PTR [edi], 0
	je	$L85123
	lea	edx, DWORD PTR _screen_y_times_768[edx*4]
	mov	DWORD PTR -8+[ebp], edx
$L85055:
; Line 114
	mov	esi, DWORD PTR [edx]
; Line 115
	mov	edx, edi
	add	esi, DWORD PTR _x$[ebp]
; Line 116
	xor	eax, eax
; Line 117
	mov	DWORD PTR _endstr$85061[ebp], edi
$L85063:
; Line 120
	mov	cl, BYTE PTR [edx]
	test	cl, cl
	je	SHORT $L85065
; Line 121
	movzx	ecx, cl
	inc	edx
	mov	cl, BYTE PTR _fontidx[ecx]
; Line 122
	movzx	ecx, cl
	mov	cl, BYTE PTR _fontframe[ecx]
; Line 123
	movzx	ebx, cl
; Line 124
	test	cl, cl
	movzx	ebx, BYTE PTR _fontkern[ebx]
	lea	eax, DWORD PTR [eax+ebx+1]
	jne	SHORT $L85067
; Line 125
	mov	DWORD PTR _endstr$85061[ebp], edx
; Line 126
	jmp	SHORT $L85063
$L85067:
	cmp	eax, DWORD PTR _width$[ebp]
	jb	SHORT $L85063
; Line 119
	jmp	SHORT $L85127
$L85065:
; Line 129
	mov	DWORD PTR _endstr$85061[ebp], edx
; Line 139
	jmp	SHORT $L85127
$L85072:
; Line 135
	movzx	eax, BYTE PTR [edi]
	inc	edi
	mov	al, BYTE PTR _fontidx[eax]
; Line 136
	movzx	eax, al
	mov	bl, BYTE PTR _fontframe[eax]
; Line 137
	test	bl, bl
	je	SHORT $L85075
; Line 138
	push	DWORD PTR _col$[ebp]
	mov	ecx, esi
	movzx	edx, bl
	call	@CPrintString@12
$L85075:
; Line 139
	movzx	eax, bl
	movzx	eax, BYTE PTR _fontkern[eax]
	lea	esi, DWORD PTR [esi+eax+1]
$L85127:
; Line 134
	cmp	edi, DWORD PTR _endstr$85061[ebp]
	jb	SHORT $L85072
; Line 142
	mov	edx, DWORD PTR -8+[ebp]
	add	edx, 40					; 00000028H
; Line 143
	inc	DWORD PTR _line$[ebp]
; Line 144
	cmp	DWORD PTR _line$[ebp], 3
	mov	DWORD PTR -8+[ebp], edx
	je	SHORT $L85123
; Line 112
	cmp	BYTE PTR [edi], 0
	jne	$L85055
$L85123:
	pop	edi
	pop	esi
	pop	ebx
; Line 147
	leave
	ret	12					; 0000000cH
@PrintPlrMsg@20 ENDP
_TEXT	ENDS
END
