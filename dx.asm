; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/dx.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09FAGE@ddraw?4dll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@DLNE@DirectDrawCreate?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@BKIN@lock_buf_priv?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@NDCE@draw?5main?5unlock?5error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@KIOP@draw?5consistency?5error?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _dx_c_init
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dx_init_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dx_cleanup_mutex_atexit
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dx_cleanup_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @dx_init@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dx_create_back_buffer
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dx_create_primary_surface
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @dx_DirectDrawCreate@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @j_lock_buf_priv@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _lock_buf_priv
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @j_unlock_buf_priv@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _unlock_buf_priv
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dx_cleanup
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _dx_reinit
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_dx_c_init_funcs
_DATA	SEGMENT
COMM	_lpDDInterface:DWORD
COMM	_lpDDPalette:DWORD
COMM	_gpBuffer:DWORD
COMM	_lpDDSBackBuf:DWORD
COMM	_lpDDSPrimary:DWORD
COMM	_gbBackBuf:BYTE
COMM	_gbEmulate:BYTE
COMM	_ghDiabMod:DWORD
COMM	_sgpBackBuf:DWORD
COMM	_sgdwLockCount:DWORD
_DATA	ENDS
CRT$XCU	SEGMENT
_dx_c_init_funcs DD FLAT:_dx_c_init
CRT$XCU	ENDS
PUBLIC	_dx_init_mutex
PUBLIC	_dx_cleanup_mutex_atexit
; Function compile flags: /Ogsy
;	COMDAT _dx_c_init
_TEXT	SEGMENT
_dx_c_init PROC NEAR					; COMDAT
; File Source/dx.cpp
; Line 26
	call	_dx_init_mutex
; Line 27
	jmp	_dx_cleanup_mutex_atexit
_dx_c_init ENDP
_TEXT	ENDS
EXTRN	__imp__InitializeCriticalSection@4:NEAR
_BSS	SEGMENT
_sgMemCrit DB	018H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT _dx_init_mutex
_TEXT	SEGMENT
_dx_init_mutex PROC NEAR				; COMDAT
; Line 35
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__InitializeCriticalSection@4
; Line 36
	ret	0
_dx_init_mutex ENDP
_TEXT	ENDS
PUBLIC	_dx_cleanup_mutex
EXTRN	_atexit:NEAR
; Function compile flags: /Ogsy
;	COMDAT _dx_cleanup_mutex_atexit
_TEXT	SEGMENT
_dx_cleanup_mutex_atexit PROC NEAR			; COMDAT
; Line 40
	push	OFFSET FLAT:_dx_cleanup_mutex
	call	_atexit
	pop	ecx
; Line 41
	ret	0
_dx_cleanup_mutex_atexit ENDP
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _dx_cleanup_mutex
_TEXT	SEGMENT
_dx_cleanup_mutex PROC NEAR				; COMDAT
; Line 45
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__DeleteCriticalSection@4
; Line 46
	ret	0
_dx_cleanup_mutex ENDP
_TEXT	ENDS
PUBLIC	@dx_init@4
PUBLIC	_dx_create_back_buffer
PUBLIC	_dx_create_primary_surface
PUBLIC	@dx_DirectDrawCreate@12
PUBLIC	??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@ ; `string'
EXTRN	__imp__ShowWindow@8:NEAR
EXTRN	__imp__GdiSetBatchLimit@4:NEAR
EXTRN	_fullscreen:DWORD
EXTRN	_palette_init:NEAR
EXTRN	__imp__SetFocus@4:NEAR
EXTRN	@ErrDlg@16:NEAR
EXTRN	@MI_Dummy@4:NEAR
EXTRN	_SDrawManualInitialize@32:NEAR
EXTRN	__imp__GetSystemMetrics@4:NEAR
;	COMDAT ??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@
_DATA	SEGMENT
??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@ DB 'C:\Src\Diablo\S'
	DB	'ource\dx.cpp', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @dx_init@4
_TEXT	SEGMENT
@dx_init@4 PROC NEAR					; COMDAT
; _hWnd$ = ecx
; Line 49
	push	ebx
	push	ebp
	mov	ebx, ecx
	push	esi
; Line 62
	push	ebx
	call	DWORD PTR __imp__SetFocus@4
; Line 63
	xor	esi, esi
	inc	esi
	push	esi
	push	ebx
	call	DWORD PTR __imp__ShowWindow@8
; Line 64
	xor	ecx, ecx
; Line 65
	cmp	BYTE PTR _gbEmulate, cl
	je	SHORT $L85005
; Line 66
	push	2
	pop	ecx
$L85005:
; Line 67
	push	0
	mov	edx, OFFSET FLAT:_lpDDInterface
	call	@dx_DirectDrawCreate@12
; Line 68
	test	eax, eax
	mov	ebp, OFFSET FLAT:??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@ ; `string'
	je	SHORT $L85008
; Line 69
	push	149					; 00000095H
	push	ebp
	push	104					; 00000068H
	mov	edx, eax
	pop	ecx
	call	@ErrDlg@16
$L85008:
; Line 74
	mov	eax, DWORD PTR _lpDDInterface
	mov	DWORD PTR _fullscreen, esi
	push	19					; 00000013H
	push	ebx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+80]
; Line 76
	cmp	eax, -2005532091			; 88760245H
	jne	SHORT $L85014
; Line 77
	xor	ecx, ecx
	call	@MI_Dummy@4
; Line 78
	jmp	SHORT $L85016
$L85014:
	test	eax, eax
	je	SHORT $L85016
; Line 79
	push	170					; 000000aaH
	push	ebp
	push	104					; 00000068H
	mov	edx, eax
	pop	ecx
	call	@ErrDlg@16
$L85016:
; Line 84
	mov	eax, DWORD PTR _lpDDInterface
	push	8
	push	480					; 000001e0H
	push	640					; 00000280H
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+84]
	test	eax, eax
	je	SHORT $L85018
; Line 86
	mov	esi, DWORD PTR __imp__GetSystemMetrics@4
	push	edi
	push	0
	call	esi
	mov	edi, eax
; Line 87
	push	1
	call	esi
; Line 91
	mov	ecx, DWORD PTR _lpDDInterface
	push	8
	push	eax
	mov	edx, DWORD PTR [ecx]
	push	edi
	push	ecx
	call	DWORD PTR [edx+84]
; Line 93
	test	eax, eax
	pop	edi
	je	SHORT $L85018
; Line 94
	push	183					; 000000b7H
	push	ebp
	push	104					; 00000068H
	mov	edx, eax
	pop	ecx
	call	@ErrDlg@16
$L85018:
; Line 96
	call	_dx_create_primary_surface
; Line 97
	call	_palette_init
; Line 98
	push	1
	call	DWORD PTR __imp__GdiSetBatchLimit@4
; Line 99
	call	_dx_create_back_buffer
; Line 100
	xor	eax, eax
	push	eax
	push	DWORD PTR _lpDDPalette
	push	DWORD PTR _lpDDSBackBuf
	push	eax
	push	eax
	push	DWORD PTR _lpDDSPrimary
	push	DWORD PTR _lpDDInterface
	push	ebx
	call	_SDrawManualInitialize@32
	pop	esi
	pop	ebp
	pop	ebx
; Line 101
	ret	0
@dx_init@4 ENDP
_TEXT	ENDS
EXTRN	@DiabloAllocPtr@4:NEAR
EXTRN	@DDErrMsg@12:NEAR
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT _dx_create_back_buffer
_TEXT	SEGMENT
_caps$ = -4
_ddsd$ = -112
_dx_create_back_buffer PROC NEAR			; COMDAT
; Line 105
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
; Line 113
	mov	eax, DWORD PTR _lpDDSPrimary
	push	ebx
	push	esi
	lea	edx, DWORD PTR _caps$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	edx
	push	eax
	call	DWORD PTR [ecx+56]
; Line 115
	xor	ebx, ebx
	mov	edi, OFFSET FLAT:??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@ ; `string'
	cmp	eax, ebx
	je	SHORT $L85023
; Line 116
	push	edi
	push	59					; 0000003bH
	pop	edx
	mov	ecx, eax
	call	@DDErrMsg@12
$L85023:
; Line 118
	cmp	BYTE PTR _gbBackBuf, bl
	push	108					; 0000006cH
	pop	esi
	jne	SHORT $L85035
; Line 123
	mov	eax, DWORD PTR _lpDDSPrimary
	push	ebx
	lea	edx, DWORD PTR _ddsd$[ebp]
	push	33					; 00000021H
	mov	DWORD PTR _ddsd$[ebp], esi
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	ebx
	push	eax
	call	DWORD PTR [ecx+100]
; Line 125
	cmp	eax, ebx
	jne	SHORT $L85027
; Line 129
	mov	eax, DWORD PTR _lpDDSPrimary
	push	ebx
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+128]
; Line 131
	mov	ecx, 503808				; 0007b000H
	call	@DiabloAllocPtr@4
	mov	DWORD PTR _sgpBackBuf, eax
; Line 132
	jmp	$L85038
$L85027:
; Line 134
	cmp	eax, -2005532237			; 887601b3H
	je	SHORT $L85035
; Line 135
	push	81					; 00000051H
	push	edi
	push	104					; 00000068H
	mov	edx, eax
	pop	ecx
	call	@ErrDlg@16
$L85035:
; Line 138
	push	esi
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	ebx
	push	eax
	call	_memset
; Line 139
	mov	eax, 768				; 00000300H
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsd$[ebp+12], eax
; Line 140
	mov	DWORD PTR _ddsd$[ebp+16], eax
; Line 149
	mov	eax, DWORD PTR _lpDDSPrimary
	lea	edx, DWORD PTR _ddsd$[ebp+72]
	mov	DWORD PTR _ddsd$[ebp], esi
	mov	DWORD PTR _ddsd$[ebp+4], 4111		; 0000100fH
	mov	DWORD PTR _ddsd$[ebp+104], 2112		; 00000840H
	mov	DWORD PTR _ddsd$[ebp+8], 656		; 00000290H
	mov	DWORD PTR _ddsd$[ebp+72], 32		; 00000020H
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	call	DWORD PTR [ecx+84]
; Line 151
	cmp	eax, ebx
	je	SHORT $L85036
; Line 152
	push	94					; 0000005eH
	push	edi
	push	104					; 00000068H
	mov	edx, eax
	pop	ecx
	call	@ErrDlg@16
$L85036:
; Line 156
	mov	eax, DWORD PTR _lpDDInterface
	push	ebx
	lea	edx, DWORD PTR _ddsd$[ebp]
	push	OFFSET FLAT:_lpDDSBackBuf
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	call	DWORD PTR [ecx+24]
; Line 158
	cmp	eax, ebx
	je	SHORT $L85038
; Line 159
	push	96					; 00000060H
	push	edi
	push	104					; 00000068H
	mov	edx, eax
	pop	ecx
	call	@ErrDlg@16
$L85038:
	pop	edi
	pop	esi
	pop	ebx
; Line 160
	leave
	ret	0
_dx_create_back_buffer ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _dx_create_primary_surface
_TEXT	SEGMENT
_ddsd$ = -108
_dx_create_primary_surface PROC NEAR			; COMDAT
; Line 164
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
; Line 168
	push	108					; 0000006cH
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	0
	push	eax
	call	_memset
; Line 175
	mov	eax, DWORD PTR _lpDDInterface
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR _ddsd$[ebp]
	mov	DWORD PTR _ddsd$[ebp], 108		; 0000006cH
	push	0
	mov	DWORD PTR _ddsd$[ebp+4], 1
	mov	DWORD PTR _ddsd$[ebp+104], 512		; 00000200H
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:_lpDDSPrimary
	push	edx
	push	eax
	call	DWORD PTR [ecx+24]
; Line 177
	test	eax, eax
	je	SHORT $L85043
; Line 178
	push	109					; 0000006dH
	push	OFFSET FLAT:??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@ ; `string'
	push	104					; 00000068H
	mov	edx, eax
	pop	ecx
	call	@ErrDlg@16
$L85043:
; Line 179
	leave
	ret	0
_dx_create_primary_surface ENDP
_TEXT	ENDS
PUBLIC	??_C@_09FAGE@ddraw?4dll?$AA@			; `string'
PUBLIC	??_C@_0BB@DLNE@DirectDrawCreate?$AA@		; `string'
EXTRN	__imp__GetLastError@0:NEAR
EXTRN	__imp__LoadLibraryA@4:NEAR
EXTRN	__imp__GetProcAddress@8:NEAR
;	COMDAT ??_C@_09FAGE@ddraw?4dll?$AA@
_DATA	SEGMENT
??_C@_09FAGE@ddraw?4dll?$AA@ DB 'ddraw.dll', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@DLNE@DirectDrawCreate?$AA@
_DATA	SEGMENT
??_C@_0BB@DLNE@DirectDrawCreate?$AA@ DB 'DirectDrawCreate', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @dx_DirectDrawCreate@12
_TEXT	SEGMENT
_guid$ = -4
_pUnkOuter$ = 8
@dx_DirectDrawCreate@12 PROC NEAR			; COMDAT
; _guid$ = ecx
; _lplpDD$ = edx
; Line 182
	push	ecx
; Line 186
	cmp	DWORD PTR _ghDiabMod, 0
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR __imp__GetLastError@0
	push	edi
	mov	ebp, edx
	mov	DWORD PTR _guid$[esp+20], ecx
	mov	edi, OFFSET FLAT:??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@ ; `string'
	jne	SHORT $L85062
; Line 187
	push	OFFSET FLAT:??_C@_09FAGE@ddraw?4dll?$AA@ ; `string'
	call	DWORD PTR __imp__LoadLibraryA@4
; Line 188
	test	eax, eax
	mov	DWORD PTR _ghDiabMod, eax
	jne	SHORT $L85062
; Line 189
	push	122					; 0000007aH
	push	edi
	call	esi
	mov	edx, eax
	push	107					; 0000006bH
	pop	ecx
	call	@ErrDlg@16
$L85062:
; Line 193
	push	OFFSET FLAT:??_C@_0BB@DLNE@DirectDrawCreate?$AA@ ; `string'
	push	DWORD PTR _ghDiabMod
	call	DWORD PTR __imp__GetProcAddress@8
	mov	ebx, eax
; Line 194
	test	ebx, ebx
	jne	SHORT $L85069
; Line 195
	push	127					; 0000007fH
	push	edi
	call	esi
	mov	edx, eax
	push	107					; 0000006bH
	pop	ecx
	call	@ErrDlg@16
$L85069:
; Line 197
	push	DWORD PTR _pUnkOuter$[esp+16]
	push	ebp
	push	DWORD PTR _guid$[esp+28]
	call	ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 198
	pop	ecx
	ret	4
@dx_DirectDrawCreate@12 ENDP
_TEXT	ENDS
PUBLIC	@j_lock_buf_priv@4
PUBLIC	_lock_buf_priv
; Function compile flags: /Ogsy
;	COMDAT @j_lock_buf_priv@4
_TEXT	SEGMENT
@j_lock_buf_priv@4 PROC NEAR				; COMDAT
; _idx$ = cl
; Line 205
	jmp	_lock_buf_priv
@j_lock_buf_priv@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@BKIN@lock_buf_priv?$AA@		; `string'
EXTRN	_gpBufEnd:DWORD
EXTRN	__imp__EnterCriticalSection@4:NEAR
EXTRN	__imp__Sleep@4:NEAR
EXTRN	_TermMsg:NEAR
;	COMDAT ??_C@_0O@BKIN@lock_buf_priv?$AA@
_DATA	SEGMENT
??_C@_0O@BKIN@lock_buf_priv?$AA@ DB 'lock_buf_priv', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _lock_buf_priv
_TEXT	SEGMENT
_ddsd$ = -108
_lock_buf_priv PROC NEAR				; COMDAT
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
; Line 213
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 214
	mov	eax, DWORD PTR _sgpBackBuf
	test	eax, eax
; Line 217
	jne	SHORT $L85191
; Line 220
	mov	eax, DWORD PTR _lpDDSBackBuf
	test	eax, eax
	jne	SHORT $L85079
; Line 221
	push	20000					; 00004e20H
	call	DWORD PTR __imp__Sleep@4
; Line 222
	push	OFFSET FLAT:??_C@_0O@BKIN@lock_buf_priv?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
; Line 224
	jmp	SHORT $L85192
$L85079:
; Line 227
	cmp	DWORD PTR _sgdwLockCount, 0
; Line 229
	jne	SHORT $L85192
; Line 235
	push	0
	lea	edx, DWORD PTR _ddsd$[ebp]
	push	1
	mov	DWORD PTR _ddsd$[ebp], 108		; 0000006cH
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+100]
; Line 237
	test	eax, eax
	je	SHORT $L85084
; Line 238
	push	OFFSET FLAT:??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@ ; `string'
	mov	edx, 235				; 000000ebH
	mov	ecx, eax
	call	@DDErrMsg@12
$L85084:
; Line 240
	mov	eax, DWORD PTR _ddsd$[ebp+36]
	add	DWORD PTR _gpBufEnd, eax
$L85191:
; Line 241
	mov	DWORD PTR _gpBuffer, eax
$L85192:
; Line 242
	inc	DWORD PTR _sgdwLockCount
; Line 243
	leave
	ret	0
_lock_buf_priv ENDP
_TEXT	ENDS
PUBLIC	@j_unlock_buf_priv@4
PUBLIC	_unlock_buf_priv
; Function compile flags: /Ogsy
;	COMDAT @j_unlock_buf_priv@4
_TEXT	SEGMENT
@j_unlock_buf_priv@4 PROC NEAR				; COMDAT
; _idx$ = cl
; Line 252
	jmp	_unlock_buf_priv
@j_unlock_buf_priv@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@NDCE@draw?5main?5unlock?5error?$AA@	; `string'
PUBLIC	??_C@_0BH@KIOP@draw?5consistency?5error?$AA@	; `string'
EXTRN	__imp__LeaveCriticalSection@4:NEAR
;	COMDAT ??_C@_0BH@NDCE@draw?5main?5unlock?5error?$AA@
_DATA	SEGMENT
??_C@_0BH@NDCE@draw?5main?5unlock?5error?$AA@ DB 'draw main unlock error', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@KIOP@draw?5consistency?5error?$AA@
_DATA	SEGMENT
??_C@_0BH@KIOP@draw?5consistency?5error?$AA@ DB 'draw consistency error', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _unlock_buf_priv
_TEXT	SEGMENT
_unlock_buf_priv PROC NEAR				; COMDAT
; Line 256
	push	esi
; Line 259
	xor	esi, esi
	cmp	DWORD PTR _sgdwLockCount, esi
	jne	SHORT $L85092
; Line 260
	push	OFFSET FLAT:??_C@_0BH@NDCE@draw?5main?5unlock?5error?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L85092:
; Line 261
	cmp	DWORD PTR _gpBuffer, esi
	jne	SHORT $L85094
; Line 262
	push	OFFSET FLAT:??_C@_0BH@KIOP@draw?5consistency?5error?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L85094:
; Line 264
	dec	DWORD PTR _sgdwLockCount
; Line 265
	jne	SHORT $L85102
; Line 266
	mov	eax, DWORD PTR _gpBuffer
; Line 267
	mov	DWORD PTR _gpBuffer, esi
	sub	DWORD PTR _gpBufEnd, eax
; Line 268
	cmp	DWORD PTR _sgpBackBuf, esi
	jne	SHORT $L85102
; Line 272
	mov	eax, DWORD PTR _lpDDSBackBuf
	push	esi
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+128]
; Line 274
	cmp	eax, esi
	je	SHORT $L85102
; Line 275
	push	OFFSET FLAT:??_C@_0BM@FPCF@C?3?2Src?2Diablo?2Source?2dx?4cpp?$AA@ ; `string'
	mov	edx, 273				; 00000111H
	mov	ecx, eax
	call	@DDErrMsg@12
$L85102:
; Line 278
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__LeaveCriticalSection@4
	pop	esi
; Line 279
	ret	0
_unlock_buf_priv ENDP
_TEXT	ENDS
PUBLIC	_dx_cleanup
EXTRN	_ghMainWnd:DWORD
EXTRN	_SDrawDestroy:NEAR
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _dx_cleanup
_TEXT	SEGMENT
_dx_cleanup PROC NEAR					; COMDAT
; Line 285
	mov	eax, DWORD PTR _ghMainWnd
	push	esi
	xor	esi, esi
	cmp	eax, esi
	je	SHORT $L85105
; Line 286
	push	esi
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
$L85105:
	push	edi
; Line 287
	call	_SDrawDestroy
; Line 288
	mov	edi, OFFSET FLAT:_sgMemCrit
	push	edi
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 289
	mov	eax, DWORD PTR _sgpBackBuf
	cmp	eax, esi
	je	SHORT $L85107
; Line 292
	mov	ecx, eax
	mov	DWORD PTR _sgpBackBuf, esi
	call	@mem_free_dbg@4
; Line 293
	jmp	SHORT $L85110
$L85107:
	mov	eax, DWORD PTR _lpDDSBackBuf
	cmp	eax, esi
	je	SHORT $L85110
; Line 297
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
; Line 299
	mov	DWORD PTR _lpDDSBackBuf, esi
$L85110:
; Line 303
	push	edi
	mov	DWORD PTR _sgdwLockCount, esi
	mov	DWORD PTR _gpBuffer, esi
	call	DWORD PTR __imp__LeaveCriticalSection@4
; Line 304
	mov	eax, DWORD PTR _lpDDSPrimary
	pop	edi
	cmp	eax, esi
	je	SHORT $L85112
; Line 308
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
; Line 310
	mov	DWORD PTR _lpDDSPrimary, esi
$L85112:
; Line 312
	mov	eax, DWORD PTR _lpDDPalette
	cmp	eax, esi
	je	SHORT $L85114
; Line 316
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
; Line 318
	mov	DWORD PTR _lpDDPalette, esi
$L85114:
; Line 320
	mov	eax, DWORD PTR _lpDDInterface
	cmp	eax, esi
	je	SHORT $L85116
; Line 324
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
; Line 326
	mov	DWORD PTR _lpDDInterface, esi
$L85116:
	pop	esi
; Line 328
	ret	0
_dx_cleanup ENDP
_TEXT	ENDS
PUBLIC	_dx_reinit
EXTRN	_drawpanflag:DWORD
EXTRN	_ClearCursor:NEAR
; Function compile flags: /Ogsy
;	COMDAT _dx_reinit
_TEXT	SEGMENT
_dx_reinit PROC NEAR					; COMDAT
; Line 331
	push	esi
	push	edi
; Line 334
	mov	edi, OFFSET FLAT:_sgMemCrit
	push	edi
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 335
	call	_ClearCursor
; Line 336
	mov	eax, DWORD PTR _sgdwLockCount
; Line 338
	test	eax, eax
	mov	esi, eax
	je	SHORT $L85122
$L85121:
; Line 339
	call	_unlock_buf_priv
	cmp	DWORD PTR _sgdwLockCount, 0
	jne	SHORT $L85121
$L85122:
; Line 341
	call	_dx_cleanup
; Line 345
	mov	ecx, DWORD PTR _ghMainWnd
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	call	@dx_init@4
; Line 347
	test	esi, esi
	je	SHORT $L85125
$L85124:
; Line 348
	call	_lock_buf_priv
	dec	esi
	jne	SHORT $L85124
$L85125:
; Line 352
	push	edi
	call	DWORD PTR __imp__LeaveCriticalSection@4
	pop	edi
	pop	esi
; Line 353
	ret	0
_dx_reinit ENDP
_TEXT	ENDS
END
