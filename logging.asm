; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/logging.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BF@BLML@?$CFs?$CFs?$CF02u?$CF02u?$CF02u?4ERR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03OEOK@c?3?2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PCFE@?2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0JN@FKJB@?$AN?6?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _log_c_init
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log_init_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _j_log_cleanup_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log_cleanup_mutex
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log_flush
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log_create
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @log_get_version@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log_printf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log_dump_computer_info
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_log_not_created
PUBLIC	_log_file
PUBLIC	_log_c_init_funcs
_DATA	SEGMENT
COMM	_FileName:BYTE:0104H
COMM	_log_buffer:BYTE:0184H
COMM	_lpAddress:DWORD
COMM	_nNumberOfBytesToWrite:DWORD
_log_not_created DD 01H
_log_file DD	0ffffffffH
_DATA	ENDS
CRT$XCU	SEGMENT
_log_c_init_funcs DD FLAT:_log_c_init
CRT$XCU	ENDS
PUBLIC	_log_init_mutex
PUBLIC	_j_log_cleanup_mutex
; Function compile flags: /Ogsy
;	COMDAT _log_c_init
_TEXT	SEGMENT
_log_c_init PROC NEAR					; COMDAT
; File Source/logging.cpp
; Line 22
	call	_log_init_mutex
; Line 23
	jmp	_j_log_cleanup_mutex
_log_c_init ENDP
_TEXT	ENDS
EXTRN	__imp__InitializeCriticalSection@4:NEAR
_BSS	SEGMENT
_sgMemCrit DB	018H DUP (?)
; Function compile flags: /Ogsy
_BSS	ENDS
;	COMDAT _log_init_mutex
_TEXT	SEGMENT
_log_init_mutex PROC NEAR				; COMDAT
; Line 31
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__InitializeCriticalSection@4
; Line 32
	ret	0
_log_init_mutex ENDP
_TEXT	ENDS
PUBLIC	_log_cleanup_mutex
EXTRN	_atexit:NEAR
; Function compile flags: /Ogsy
;	COMDAT _j_log_cleanup_mutex
_TEXT	SEGMENT
_j_log_cleanup_mutex PROC NEAR				; COMDAT
; Line 36
	push	OFFSET FLAT:_log_cleanup_mutex
	call	_atexit
	pop	ecx
; Line 37
	ret	0
_j_log_cleanup_mutex ENDP
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _log_cleanup_mutex
_TEXT	SEGMENT
_log_cleanup_mutex PROC NEAR				; COMDAT
; Line 41
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__DeleteCriticalSection@4
; Line 42
	ret	0
_log_cleanup_mutex ENDP
_TEXT	ENDS
PUBLIC	_log_flush
PUBLIC	_log_create
EXTRN	__imp__EnterCriticalSection@4:NEAR
EXTRN	__imp__LeaveCriticalSection@4:NEAR
EXTRN	__imp__WriteFile@20:NEAR
EXTRN	__imp__SetFilePointer@16:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _log_flush
_TEXT	SEGMENT
_force_close$ = 8
_NumberOfBytesWritten$ = -4
_log_flush PROC NEAR					; COMDAT
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 49
	mov	esi, OFFSET FLAT:_sgMemCrit
	push	esi
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 50
	xor	ebx, ebx
	cmp	DWORD PTR _nNumberOfBytesToWrite, ebx
	je	SHORT $L84997
; Line 51
	cmp	DWORD PTR _log_file, -1
	jne	SHORT $L84999
; Line 52
	call	_log_create
; Line 54
	cmp	eax, -1
	mov	DWORD PTR _log_file, eax
	jne	SHORT $L85001
; Line 55
	mov	DWORD PTR _nNumberOfBytesToWrite, ebx
; Line 56
	jmp	SHORT $L84994
$L85001:
; Line 58
	push	2
	push	ebx
	push	ebx
	push	eax
	call	DWORD PTR __imp__SetFilePointer@16
$L84999:
; Line 60
	lea	eax, DWORD PTR _NumberOfBytesWritten$[ebp]
	push	ebx
	push	eax
	push	DWORD PTR _nNumberOfBytesToWrite
	push	DWORD PTR _lpAddress
	push	DWORD PTR _log_file
	call	DWORD PTR __imp__WriteFile@20
; Line 61
	mov	DWORD PTR _nNumberOfBytesToWrite, ebx
$L84997:
; Line 63
	cmp	BYTE PTR _force_close$[ebp], bl
	je	SHORT $L85004
	mov	eax, DWORD PTR _log_file
	cmp	eax, -1
	je	SHORT $L85004
; Line 64
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
; Line 65
	or	DWORD PTR _log_file, -1
$L85004:
; Line 67
	push	esi
	call	DWORD PTR __imp__LeaveCriticalSection@4
$L84994:
	pop	esi
	pop	ebx
; Line 68
	leave
	ret	0
_log_flush ENDP
_TEXT	ENDS
PUBLIC	@log_get_version@4
PUBLIC	??_C@_0BF@BLML@?$CFs?$CFs?$CF02u?$CF02u?$CF02u?4ERR?$AA@ ; `string'
PUBLIC	??_C@_03OEOK@c?3?2?$AA@				; `string'
EXTRN	_strrchr:NEAR
EXTRN	__snprintf:NEAR
EXTRN	__imp__CreateFileA@28:NEAR
EXTRN	__imp__GetFileSize@8:NEAR
EXTRN	__imp__SetEndOfFile@4:NEAR
EXTRN	__imp__GetModuleFileNameA@12:NEAR
EXTRN	__imp__GetUserNameA@8:NEAR
EXTRN	_memset:NEAR
EXTRN	_strcpy:NEAR
EXTRN	_strcat:NEAR
;	COMDAT ??_C@_0BF@BLML@?$CFs?$CFs?$CF02u?$CF02u?$CF02u?4ERR?$AA@
_DATA	SEGMENT
??_C@_0BF@BLML@?$CFs?$CFs?$CF02u?$CF02u?$CF02u?4ERR?$AA@ DB '%s%s%02u%02u'
	DB	'%02u.ERR', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_03OEOK@c?3?2?$AA@
_DATA	SEGMENT
??_C@_03OEOK@c?3?2?$AA@ DB 'c:\', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _log_create
_TEXT	SEGMENT
_v1$ = -8
_Filename$ = -352
_file_info$ = -92
_Buffer$ = -40
_pcbBuffer$ = -4
_log_create PROC NEAR					; COMDAT
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
; Line 81
	xor	ebx, ebx
	cmp	DWORD PTR _log_not_created, ebx
	push	esi
	push	edi
	mov	esi, OFFSET FLAT:_FileName
	je	$L85015
; Line 82
	mov	edi, 260				; 00000104H
	lea	eax, DWORD PTR _Filename$[ebp]
	push	edi
	push	eax
	push	ebx
	call	DWORD PTR __imp__GetModuleFileNameA@12
	test	eax, eax
	je	SHORT $L85016
	lea	eax, DWORD PTR _Filename$[ebp]
	push	92					; 0000005cH
	push	eax
	call	_strrchr
	pop	ecx
	cmp	eax, ebx
	pop	ecx
	je	SHORT $L85016
; Line 83
	mov	BYTE PTR [eax+1], bl
; Line 84
	jmp	SHORT $L85017
$L85016:
; Line 85
	mov	BYTE PTR _Filename$[ebp], bl
$L85017:
; Line 87
	lea	eax, DWORD PTR _pcbBuffer$[ebp]
	mov	DWORD PTR _pcbBuffer$[ebp], 32		; 00000020H
	push	eax
	lea	eax, DWORD PTR _Buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__GetUserNameA@8
	test	eax, eax
	jne	SHORT $L85018
; Line 88
	mov	BYTE PTR _Buffer$[ebp], bl
$L85018:
; Line 89
	lea	ecx, DWORD PTR _file_info$[ebp]
	call	@log_get_version@4
; Line 98
	mov	eax, DWORD PTR _file_info$[ebp+20]
	movzx	ecx, ax
	shr	eax, 16					; 00000010H
	push	ecx
	push	eax
	movzx	eax, WORD PTR _file_info$[ebp+16]
	push	eax
	lea	eax, DWORD PTR _Buffer$[ebp]
	push	eax
	lea	eax, DWORD PTR _Filename$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BF@BLML@?$CFs?$CFs?$CF02u?$CF02u?$CF02u?4ERR?$AA@ ; `string'
	push	edi
	push	esi
	call	__snprintf
	add	esp, 32					; 00000020H
$L85015:
; Line 100
	or	DWORD PTR _v1$[ebp], -1
; Line 101
	xor	eax, eax
	cmp	DWORD PTR _log_not_created, ebx
	sete	al
	mov	DWORD PTR _pcbBuffer$[ebp], eax
	jmp	SHORT $L85129
$L85024:
; Line 102
	push	ebx
	push	128					; 00000080H
	push	4
	push	ebx
	push	1
	push	1073741824				; 40000000H
	push	esi
	call	DWORD PTR __imp__CreateFileA@28
; Line 104
	cmp	eax, -1
	mov	DWORD PTR _v1$[ebp], eax
	jne	SHORT $L85125
; Line 109
	push	92					; 0000005cH
	push	esi
	call	_strrchr
	mov	edi, eax
	pop	ecx
; Line 110
	cmp	edi, ebx
	pop	ecx
	jne	SHORT $L85032
; Line 111
	mov	edi, esi
$L85032:
; Line 112
	lea	eax, DWORD PTR _Filename$[ebp]
	push	OFFSET FLAT:??_C@_03OEOK@c?3?2?$AA@	; `string'
	push	eax
	call	_strcpy
; Line 113
	push	256					; 00000100H
	lea	eax, DWORD PTR _Filename$[ebp+4]
	push	ebx
	push	eax
	call	_memset
; Line 114
	lea	eax, DWORD PTR _Filename$[ebp]
	push	edi
	push	eax
	call	_strcat
; Line 115
	lea	eax, DWORD PTR _Filename$[ebp]
	push	eax
	push	esi
	call	_strcpy
	add	esp, 36					; 00000024H
	inc	DWORD PTR _pcbBuffer$[ebp]
$L85129:
; Line 101
	cmp	DWORD PTR _pcbBuffer$[ebp], 2
	jl	SHORT $L85024
; Line 104
	jmp	SHORT $L85031
$L85125:
; Line 105
	push	ebx
	push	eax
	call	DWORD PTR __imp__GetFileSize@8
	cmp	eax, 65536				; 00010000H
	jbe	SHORT $L85031
; Line 106
	push	DWORD PTR _v1$[ebp]
	call	DWORD PTR __imp__SetEndOfFile@4
$L85031:
; Line 118
	mov	eax, DWORD PTR _v1$[ebp]
	pop	edi
	mov	DWORD PTR _log_not_created, ebx
	pop	esi
	pop	ebx
; Line 119
	leave
	ret	0
_log_create ENDP
_TEXT	ENDS
PUBLIC	??_C@_01PCFE@?2?$AA@				; `string'
EXTRN	_GetFileVersionInfoSizeA@8:NEAR
EXTRN	_GetFileVersionInfoA@16:NEAR
EXTRN	_VerQueryValueA@16:NEAR
EXTRN	__imp__VirtualAlloc@16:NEAR
EXTRN	__imp__VirtualFree@12:NEAR
EXTRN	_memcpy:NEAR
;	COMDAT ??_C@_01PCFE@?2?$AA@
_DATA	SEGMENT
??_C@_01PCFE@?2?$AA@ DB '\', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @log_get_version@4
_TEXT	SEGMENT
_file_info$ = -4
_Filename$ = -276
_dwHandle$ = -16
_lpBuffer$ = -12
_puLen$ = -8
@log_get_version@4 PROC NEAR				; COMDAT
; _file_info$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	esi
	push	edi
; Line 135
	xor	edi, edi
	push	52					; 00000034H
	push	edi
	push	ecx
	mov	DWORD PTR _file_info$[ebp], ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 136
	lea	eax, DWORD PTR _Filename$[ebp]
	push	260					; 00000104H
	push	eax
	push	edi
	call	DWORD PTR __imp__GetModuleFileNameA@12
	test	eax, eax
	je	SHORT $L85047
; Line 137
	lea	eax, DWORD PTR _dwHandle$[ebp]
	push	eax
	lea	eax, DWORD PTR _Filename$[ebp]
	push	eax
	call	_GetFileVersionInfoSizeA@8
	mov	esi, eax
; Line 139
	cmp	esi, edi
	je	SHORT $L85047
	push	ebx
; Line 140
	push	4
	push	4096					; 00001000H
	push	esi
	push	edi
	call	DWORD PTR __imp__VirtualAlloc@16
	mov	ebx, eax
; Line 141
	lea	eax, DWORD PTR _Filename$[ebp]
	push	ebx
	push	esi
	push	edi
	push	eax
	call	_GetFileVersionInfoA@16
	test	eax, eax
	je	SHORT $L85048
	lea	eax, DWORD PTR _puLen$[ebp]
	push	eax
	lea	eax, DWORD PTR _lpBuffer$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_01PCFE@?2?$AA@	; `string'
	push	ebx
	call	_VerQueryValueA@16
	test	eax, eax
	je	SHORT $L85048
; Line 142
	mov	eax, DWORD PTR _puLen$[ebp]
; Line 143
	cmp	eax, 52					; 00000034H
	jb	SHORT $L85050
; Line 144
	push	52					; 00000034H
	pop	eax
$L85050:
; Line 145
	push	eax
	push	DWORD PTR _lpBuffer$[ebp]
	push	DWORD PTR _file_info$[ebp]
	call	_memcpy
	add	esp, 12					; 0000000cH
$L85048:
; Line 147
	push	32768					; 00008000H
	push	edi
	push	ebx
	call	DWORD PTR __imp__VirtualFree@12
	pop	ebx
$L85047:
	pop	edi
	pop	esi
; Line 150
	leave
	ret	0
@log_get_version@4 ENDP
_TEXT	ENDS
PUBLIC	_log_printf
EXTRN	__vsnprintf:NEAR
EXTRN	_strlen:NEAR
; Function compile flags: /Ogsy
;	COMDAT _log_printf
_TEXT	SEGMENT
_pszFmt$ = 8
_v3$ = -512
_log_printf PROC NEAR					; COMDAT
; Line 153
	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	esi
	push	edi
; Line 160
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__EnterCriticalSection@4
; Line 161
	lea	eax, DWORD PTR _pszFmt$[ebp+4]
	push	eax
	lea	eax, DWORD PTR _v3$[ebp]
	push	DWORD PTR _pszFmt$[ebp]
	push	512					; 00000200H
	push	eax
	call	__vsnprintf
; Line 163
	and	BYTE PTR _v3$[ebp+511], 0
; Line 164
	lea	eax, DWORD PTR _v3$[ebp]
	push	eax
	call	_strlen
	mov	edi, eax
; Line 165
	mov	eax, DWORD PTR _nNumberOfBytesToWrite
	add	eax, edi
	mov	esi, 4096				; 00001000H
	add	esp, 20					; 00000014H
	cmp	eax, esi
	jbe	SHORT $L85062
; Line 166
	push	0
	call	_log_flush
	pop	ecx
$L85062:
; Line 167
	mov	eax, DWORD PTR _lpAddress
; Line 171
	test	eax, eax
	jne	SHORT $L85067
	push	4
	push	esi
	push	esi
	push	eax
	call	DWORD PTR __imp__VirtualAlloc@16
	and	DWORD PTR _nNumberOfBytesToWrite, 0
	mov	DWORD PTR _lpAddress, eax
	test	eax, eax
	je	SHORT $L85066
$L85067:
; Line 172
	lea	ecx, DWORD PTR _v3$[ebp]
	push	edi
	push	ecx
	mov	ecx, DWORD PTR _nNumberOfBytesToWrite
	add	ecx, eax
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 173
	add	DWORD PTR _nNumberOfBytesToWrite, edi
$L85066:
; Line 175
	push	OFFSET FLAT:_sgMemCrit
	call	DWORD PTR __imp__LeaveCriticalSection@4
	pop	edi
	pop	esi
; Line 176
	leave
	ret	0
_log_printf ENDP
_TEXT	ENDS
PUBLIC	_log_dump_computer_info
PUBLIC	??_C@_0JN@FKJB@?$AN?6?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
EXTRN	__imp__GetLocalTime@4:NEAR
;	COMDAT ??_C@_0JN@FKJB@?$AN?6?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
_DATA	SEGMENT
??_C@_0JN@FKJB@?$AN?6?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB 0dH
	DB	0aH, '------------------------------------------------------', 0dH
	DB	0aH, 'PROGRAM VERSION: %d.%d.%d.%d', 0dH, 0aH, 'COMPUTER NAME:'
	DB	' %s', 0dH, 0aH, 'TIME: %02u/%02u/%02u %02u:%02u:%02u', 0dH, 0aH
	DB	'INFO: %s', 0dH, 0aH, 0dH, 0aH, 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _log_dump_computer_info
_TEXT	SEGMENT
_Buffer$ = -136
_file_info$ = -72
_SystemTime$ = -20
_pcbBuffer$ = -4
_log_dump_computer_info PROC NEAR			; COMDAT
; Line 179
	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
; Line 185
	lea	eax, DWORD PTR _SystemTime$[ebp]
	push	eax
	call	DWORD PTR __imp__GetLocalTime@4
; Line 187
	lea	eax, DWORD PTR _pcbBuffer$[ebp]
	mov	DWORD PTR _pcbBuffer$[ebp], 64		; 00000040H
	push	eax
	lea	eax, DWORD PTR _Buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__GetUserNameA@8
	test	eax, eax
	jne	SHORT $L85073
; Line 188
	and	BYTE PTR _Buffer$[ebp], al
$L85073:
; Line 189
	lea	ecx, DWORD PTR _file_info$[ebp]
	call	@log_get_version@4
; Line 209
	movzx	eax, WORD PTR _SystemTime$[ebp+12]
	push	OFFSET FLAT:_log_buffer
	push	eax
	movzx	eax, WORD PTR _SystemTime$[ebp+10]
	push	eax
	movzx	eax, WORD PTR _SystemTime$[ebp+8]
	push	eax
	push	100					; 00000064H
	movzx	eax, WORD PTR _SystemTime$[ebp]
	cdq
	pop	ecx
	idiv	ecx
	movzx	eax, WORD PTR _SystemTime$[ebp+6]
	push	edx
	push	eax
	movzx	eax, WORD PTR _SystemTime$[ebp+2]
	push	eax
	lea	eax, DWORD PTR _Buffer$[ebp]
	push	eax
	mov	eax, DWORD PTR _file_info$[ebp+20]
	movzx	ecx, ax
	shr	eax, 16					; 00000010H
	push	ecx
	push	eax
	mov	eax, DWORD PTR _file_info$[ebp+16]
	movzx	ecx, ax
	shr	eax, 16					; 00000010H
	push	ecx
	push	eax
	push	OFFSET FLAT:??_C@_0JN@FKJB@?$AN?6?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
	call	_log_printf
	add	esp, 52					; 00000034H
; Line 210
	leave
	ret	0
_log_dump_computer_info ENDP
_TEXT	ENDS
END
