; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/debug.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BA@GLBB@Data?2Square?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@LLKC@Monsters?5not?5cleared?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@BHJM@Players?5not?5cleared?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _LoadDebugGFX
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FreeDebugGFX
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckDungeonClear
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pSquareCel:DWORD
COMM	_dMonsDbg:BYTE:034100H
COMM	_dFlagDbg:BYTE:034100H
_DATA	ENDS
PUBLIC	_LoadDebugGFX
PUBLIC	??_C@_0BA@GLBB@Data?2Square?4CEL?$AA@		; `string'
EXTRN	_visiondebug:DWORD
EXTRN	@LoadFileInMem@8:NEAR
;	COMDAT ??_C@_0BA@GLBB@Data?2Square?4CEL?$AA@
; File Source/debug.cpp
_DATA	SEGMENT
??_C@_0BA@GLBB@Data?2Square?4CEL?$AA@ DB 'Data\Square.CEL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _LoadDebugGFX
_TEXT	SEGMENT
_LoadDebugGFX PROC NEAR					; COMDAT
; Line 11
	cmp	DWORD PTR _visiondebug, 0
	je	SHORT $L84983
; Line 12
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BA@GLBB@Data?2Square?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	DWORD PTR _pSquareCel, eax
$L84983:
; Line 13
	ret	0
_LoadDebugGFX ENDP
_TEXT	ENDS
PUBLIC	_FreeDebugGFX
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _FreeDebugGFX
_TEXT	SEGMENT
_FreeDebugGFX PROC NEAR					; COMDAT
; Line 18
	mov	ecx, DWORD PTR _pSquareCel
; Line 19
	and	DWORD PTR _pSquareCel, 0
; Line 20
	jmp	@mem_free_dbg@4
_FreeDebugGFX ENDP
_TEXT	ENDS
PUBLIC	_CheckDungeonClear
PUBLIC	??_C@_0BF@LLKC@Monsters?5not?5cleared?$AA@	; `string'
PUBLIC	??_C@_0BE@BHJM@Players?5not?5cleared?$AA@	; `string'
EXTRN	_dFlags:BYTE
EXTRN	_TermMsg:NEAR
EXTRN	_dMonster:BYTE
EXTRN	_currlevel:BYTE
EXTRN	_dPlayer:BYTE
;	COMDAT ??_C@_0BF@LLKC@Monsters?5not?5cleared?$AA@
_DATA	SEGMENT
??_C@_0BF@LLKC@Monsters?5not?5cleared?$AA@ DB 'Monsters not cleared', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@BHJM@Players?5not?5cleared?$AA@
_DATA	SEGMENT
??_C@_0BE@BHJM@Players?5not?5cleared?$AA@ DB 'Players not cleared', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _CheckDungeonClear
_TEXT	SEGMENT
_CheckDungeonClear PROC NEAR				; COMDAT
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 28
	xor	esi, esi
	mov	DWORD PTR -4+[ebp], OFFSET FLAT:_dMonster
$L84991:
; Line 29
	mov	eax, DWORD PTR -4+[ebp]
	xor	ebx, ebx
	mov	DWORD PTR -8+[ebp], eax
	mov	edi, esi
$L84994:
; Line 30
	mov	eax, DWORD PTR -8+[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L84997
; Line 31
	push	OFFSET FLAT:??_C@_0BF@LLKC@Monsters?5not?5cleared?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L84997:
; Line 32
	cmp	BYTE PTR _dPlayer[edi], 0
	je	SHORT $L84999
; Line 33
	push	OFFSET FLAT:??_C@_0BE@BHJM@Players?5not?5cleared?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L84999:
; Line 35
	movzx	eax, BYTE PTR _currlevel
	imul	eax, 112				; 00000070H
	mov	cl, BYTE PTR _dFlags[edi]
	add	eax, ebx
	imul	eax, 112				; 00000070H
	add	DWORD PTR -8+[ebp], 448			; 000001c0H
	mov	dl, cl
	and	dl, 2
; Line 36
	and	cl, 8
	inc	ebx
	add	edi, 112				; 00000070H
	cmp	ebx, 112				; 00000070H
	mov	BYTE PTR _dMonsDbg[eax+esi], dl
	mov	BYTE PTR _dFlagDbg[eax+esi], cl
	jl	SHORT $L84994
	add	DWORD PTR -4+[ebp], 4
	inc	esi
	cmp	DWORD PTR -4+[ebp], OFFSET FLAT:_dMonster+448
	jl	SHORT $L84991
	pop	edi
	pop	esi
	pop	ebx
; Line 39
	leave
	ret	0
_CheckDungeonClear ENDP
_TEXT	ENDS
END
