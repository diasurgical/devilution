; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/pack.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _qmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PackPlayer@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PackItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @VerifyGoldSeeds@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @UnPackPlayer@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @UnPackItem@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	@PackPlayer@12
PUBLIC	@PackItem@8
EXTRN	_gbMaxPlayers:BYTE
EXTRN	_plr:BYTE
EXTRN	_memset:NEAR
EXTRN	_strcpy:NEAR
; Function compile flags: /Ogsy
;	COMDAT @PackPlayer@12
_TEXT	SEGMENT
_manashield$ = 8
_pi$ = -8
_pki$ = -4
@PackPlayer@12 PROC NEAR				; COMDAT
; _pPack$ = ecx
; _pnum$ = edx
; File Source/pack.cpp
; Line 6
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	esi, ecx
; Line 12
	push	1266					; 000004f2H
	push	0
	push	esi
	mov	edi, edx
	call	_memset
; Line 13
	imul	edi, 21720				; 000054d8H
	add	edi, OFFSET FLAT:_plr
; Line 14
	mov	al, BYTE PTR [edi+32]
	mov	BYTE PTR [esi+8], al
; Line 15
	mov	al, BYTE PTR [edi+36]
	mov	BYTE PTR [esi+9], al
; Line 16
	mov	al, BYTE PTR [edi+40]
	mov	BYTE PTR [esi+10], al
; Line 17
	mov	al, BYTE PTR [edi+52]
	mov	BYTE PTR [esi+11], al
; Line 18
	mov	al, BYTE PTR [edi+56]
	mov	BYTE PTR [esi+12], al
; Line 19
	mov	al, BYTE PTR [edi+60]
	mov	BYTE PTR [esi+13], al
; Line 20
	mov	al, BYTE PTR [edi+72]
	mov	BYTE PTR [esi+14], al
; Line 21
	mov	al, BYTE PTR [edi+76]
	mov	BYTE PTR [esi+15], al
; Line 22
	lea	eax, DWORD PTR [edi+320]
	push	eax
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	_strcpy
; Line 23
	mov	al, BYTE PTR [edi+352]
	add	esp, 20					; 00000014H
	mov	BYTE PTR [esi+48], al
; Line 24
	mov	al, BYTE PTR [edi+360]
	mov	BYTE PTR [esi+49], al
; Line 25
	mov	al, BYTE PTR [edi+368]
	mov	BYTE PTR [esi+50], al
; Line 26
	mov	al, BYTE PTR [edi+376]
	mov	BYTE PTR [esi+51], al
; Line 27
	mov	al, BYTE PTR [edi+384]
	mov	BYTE PTR [esi+52], al
; Line 28
	mov	al, BYTE PTR [edi+440]
	mov	BYTE PTR [esi+53], al
; Line 29
	mov	al, BYTE PTR [edi+388]
	mov	BYTE PTR [esi+54], al
; Line 30
	mov	eax, DWORD PTR [edi+444]
	mov	DWORD PTR [esi+55], eax
; Line 31
	mov	eax, DWORD PTR [edi+460]
	mov	DWORD PTR [esi+59], eax
; Line 32
	mov	eax, DWORD PTR [edi+400]
	mov	DWORD PTR [esi+63], eax
; Line 33
	mov	eax, DWORD PTR [edi+404]
	mov	DWORD PTR [esi+67], eax
; Line 34
	mov	eax, DWORD PTR [edi+420]
	mov	DWORD PTR [esi+71], eax
; Line 35
	mov	eax, DWORD PTR [edi+424]
	mov	DWORD PTR [esi+75], eax
; Line 36
	mov	eax, DWORD PTR [edi+264]
	mov	DWORD PTR [esi+116], eax
	mov	eax, DWORD PTR [edi+268]
	mov	DWORD PTR [esi+120], eax
; Line 38
	xor	eax, eax
$L84993:
; Line 39
	mov	cl, BYTE PTR [edi+eax+193]
	mov	BYTE PTR [esi+eax+79], cl
	inc	eax
	cmp	eax, 37					; 00000025H
	jl	SHORT $L84993
; Line 41
	lea	eax, DWORD PTR [esi+124]
	push	ebx
	mov	DWORD PTR _pki$[ebp], eax
; Line 42
	lea	eax, DWORD PTR [edi+892]
	mov	DWORD PTR _pi$[ebp], eax
	mov	DWORD PTR -12+[ebp], 7
	mov	ebx, 368				; 00000170H
$L84996:
; Line 45
	mov	edx, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _pki$[ebp]
	add	DWORD PTR _pki$[ebp], 19		; 00000013H
	add	DWORD PTR _pi$[ebp], ebx
	call	@PackItem@8
	dec	DWORD PTR -12+[ebp]
	jne	SHORT $L84996
; Line 47
	lea	eax, DWORD PTR [esi+257]
	mov	DWORD PTR -12+[ebp], 40			; 00000028H
	mov	DWORD PTR _pki$[ebp], eax
; Line 48
	lea	eax, DWORD PTR [edi+3468]
	mov	DWORD PTR _pi$[ebp], eax
$L84999:
; Line 51
	mov	edx, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _pki$[ebp]
	add	DWORD PTR _pki$[ebp], 19		; 00000013H
	add	DWORD PTR _pi$[ebp], ebx
	call	@PackItem@8
	dec	DWORD PTR -12+[ebp]
	jne	SHORT $L84999
; Line 53
	xor	eax, eax
$L85002:
; Line 54
	mov	cl, BYTE PTR [edi+eax+18192]
	mov	BYTE PTR [esi+eax+1017], cl
	inc	eax
	cmp	eax, 40					; 00000028H
	jl	SHORT $L85002
; Line 56
	mov	al, BYTE PTR [edi+18188]
	mov	DWORD PTR -12+[ebp], 8
	mov	BYTE PTR [esi+1057], al
; Line 57
	lea	eax, DWORD PTR [esi+1058]
	mov	DWORD PTR _pki$[ebp], eax
; Line 58
	lea	eax, DWORD PTR [edi+18232]
	mov	DWORD PTR _pi$[ebp], eax
$L85005:
; Line 61
	mov	edx, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _pki$[ebp]
	add	DWORD PTR _pki$[ebp], 19		; 00000013H
	add	DWORD PTR _pi$[ebp], ebx
	call	@PackItem@8
	dec	DWORD PTR -12+[ebp]
	jne	SHORT $L85005
; Line 63
	mov	eax, DWORD PTR [edi+21648]
	pop	ebx
	mov	DWORD PTR [esi+1234], eax
; Line 65
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85009
	cmp	DWORD PTR _manashield$[ebp], 0
	jne	SHORT $L85009
; Line 68
	and	BYTE PTR [esi+1214], 0
	jmp	SHORT $L85010
$L85009:
; Line 66
	mov	al, BYTE PTR [edi+21628]
	mov	BYTE PTR [esi+1214], al
$L85010:
	pop	edi
	pop	esi
; Line 69
	leave
	ret	4
@PackPlayer@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @PackItem@8
_TEXT	SEGMENT
_v2$ = -4
_v3$ = -8
@PackItem@8 PROC NEAR					; COMDAT
; _id$ = ecx
; _is$ = edx
; Line 73
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 77
	cmp	DWORD PTR [edx+8], -1
	jne	SHORT $L85018
; Line 78
	or	WORD PTR [ecx+6], -1
; Line 107
	leave
	ret	0
$L85018:
; Line 80
	mov	ax, WORD PTR [edx+360]
	mov	WORD PTR [ecx+6], ax
; Line 81
	cmp	DWORD PTR [edx+360], 23			; 00000017H
	jne	$L85020
; Line 84
	mov	al, BYTE PTR [edx+68]
	and	BYTE PTR _v2$[ebp], 0
	mov	BYTE PTR _v2$[ebp+1], al
	push	esi
; Line 85
	movsx	ax, BYTE PTR [edx+69]
	or	eax, DWORD PTR _v2$[ebp]
	and	BYTE PTR _v3$[ebp], 0
	mov	WORD PTR [ecx+4], ax
; Line 86
	movsx	eax, BYTE PTR [edx+70]
	movsx	esi, BYTE PTR [edx+71]
	shl	eax, 8
	or	eax, esi
	movsx	esi, BYTE PTR [edx+72]
	shl	eax, 8
	or	eax, esi
	movsx	esi, BYTE PTR [edx+73]
	shl	eax, 8
	or	eax, esi
	mov	DWORD PTR [ecx], eax
; Line 87
	mov	al, BYTE PTR [edx+74]
	mov	BYTE PTR [ecx+8], al
; Line 88
	mov	al, BYTE PTR [edx+75]
	mov	BYTE PTR [ecx+9], al
; Line 89
	mov	al, BYTE PTR [edx+76]
	mov	BYTE PTR [ecx+10], al
; Line 90
	mov	al, BYTE PTR [edx+77]
	mov	BYTE PTR [ecx+11], al
; Line 91
	mov	al, BYTE PTR [edx+78]
	mov	BYTE PTR [ecx+12], al
; Line 92
	mov	al, BYTE PTR [edx+79]
	mov	BYTE PTR _v3$[ebp+1], al
; Line 93
	mov	ax, WORD PTR [edx+192]
	sub	ax, 19					; 00000013H
	shl	eax, 6
	or	ax, WORD PTR [edx+196]
	or	eax, DWORD PTR _v3$[ebp]
	mov	WORD PTR [ecx+13], ax
; Line 94
	movsx	eax, BYTE PTR [edx+80]
	movsx	esi, BYTE PTR [edx+81]
	shl	eax, 8
	or	eax, esi
	movsx	esi, BYTE PTR [edx+82]
	movsx	edx, BYTE PTR [edx+83]
	shl	eax, 8
	or	eax, esi
	pop	esi
	shl	eax, 8
	or	eax, edx
	mov	DWORD PTR [ecx+15], eax
; Line 107
	leave
	ret	0
$L85020:
; Line 96
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
; Line 97
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+4], ax
; Line 98
	mov	al, BYTE PTR [edx+60]
	add	al, al
	add	al, BYTE PTR [edx+56]
	mov	BYTE PTR [ecx+8], al
; Line 99
	mov	al, BYTE PTR [edx+236]
	mov	BYTE PTR [ecx+9], al
; Line 100
	mov	al, BYTE PTR [edx+240]
	mov	BYTE PTR [ecx+10], al
; Line 101
	mov	al, BYTE PTR [edx+228]
	mov	BYTE PTR [ecx+11], al
; Line 102
	mov	al, BYTE PTR [edx+232]
	mov	BYTE PTR [ecx+12], al
; Line 103
	cmp	DWORD PTR [edx+360], 0
	jne	SHORT $L85031
; Line 104
	mov	ax, WORD PTR [edx+196]
	mov	WORD PTR [ecx+13], ax
$L85031:
; Line 107
	leave
	ret	0
@PackItem@8 ENDP
_TEXT	ENDS
PUBLIC	@VerifyGoldSeeds@4
EXTRN	_GetRndSeed:NEAR
; Function compile flags: /Ogsy
;	COMDAT @VerifyGoldSeeds@4
_TEXT	SEGMENT
@VerifyGoldSeeds@4 PROC NEAR				; COMDAT
; _pPlayer$ = ecx
; Line 110
	push	ebp
	push	esi
	mov	esi, ecx
; Line 114
	xor	ebp, ebp
	mov	eax, DWORD PTR [esi+18188]
	test	eax, eax
	jle	SHORT $L85039
	push	ebx
	push	edi
	mov	ebx, esi
$L85037:
; Line 115
	xor	ecx, ecx
	cmp	DWORD PTR [ebx+3828], ecx
	jne	SHORT $L85038
	cmp	eax, ecx
	jle	SHORT $L85038
$L85041:
; Line 117
	cmp	ebp, ecx
	je	SHORT $L85042
; Line 118
	mov	eax, ecx
	imul	eax, 368				; 00000170H
	add	eax, esi
	cmp	DWORD PTR [eax+3828], 0
	jne	SHORT $L85042
	lea	edi, DWORD PTR [ebx+3468]
	mov	edx, DWORD PTR [edi]
	cmp	edx, DWORD PTR [eax+3468]
	jne	SHORT $L85042
; Line 119
	call	_GetRndSeed
	mov	DWORD PTR [edi], eax
; Line 120
	or	ecx, -1
$L85042:
	inc	ecx
	cmp	ecx, DWORD PTR [esi+18188]
	jl	SHORT $L85041
$L85038:
; Line 114
	mov	eax, DWORD PTR [esi+18188]
	inc	ebp
	add	ebx, 368				; 00000170H
	cmp	ebp, eax
	jl	SHORT $L85037
	pop	edi
	pop	ebx
$L85039:
	pop	esi
	pop	ebp
; Line 126
	ret	0
@VerifyGoldSeeds@4 ENDP
_TEXT	ENDS
PUBLIC	@UnPackPlayer@12
PUBLIC	@UnPackItem@8
EXTRN	@ClrPlrPath@4:NEAR
EXTRN	@CalcPlrInv@8:NEAR
EXTRN	_myplr:DWORD
EXTRN	@ClearPlrRVars@4:NEAR
EXTRN	@InitPlayer@8:NEAR
EXTRN	_witchitem:BYTE
; Function compile flags: /Ogsy
;	COMDAT @UnPackPlayer@12
_TEXT	SEGMENT
_pnum$ = -12
_killok$ = 8
_v6$ = -4
_pi$ = -4
_pki$ = 8
@UnPackPlayer@12 PROC NEAR				; COMDAT
; _pPack$ = ecx
; _pnum$ = edx
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	mov	ebx, edx
; Line 136
	mov	eax, ebx
	push	esi
	imul	eax, 21720				; 000054d8H
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR _plr[eax]
	mov	DWORD PTR _pnum$[ebp], ebx
; Line 137
	mov	ecx, esi
	call	@ClearPlrRVars@4
; Line 138
	movzx	eax, BYTE PTR [edi+12]
	mov	DWORD PTR [esi+56], eax
; Line 145
	mov	ecx, ebx
	movzx	eax, BYTE PTR [edi+13]
	mov	DWORD PTR [esi+60], eax
	movzx	eax, BYTE PTR [edi+12]
	mov	DWORD PTR [esi+64], eax
	movzx	eax, BYTE PTR [edi+13]
	mov	DWORD PTR [esi+68], eax
	movzx	eax, BYTE PTR [edi+14]
	mov	DWORD PTR [esi+72], eax
	movzx	eax, BYTE PTR [edi+15]
	mov	DWORD PTR [esi+76], eax
	movzx	eax, BYTE PTR [edi+11]
	mov	DWORD PTR [esi+52], eax
	call	@ClrPlrPath@4
; Line 146
	or	DWORD PTR [esi+32], -1
; Line 147
	lea	eax, DWORD PTR [edi+16]
	push	eax
	lea	eax, DWORD PTR [esi+320]
	push	eax
	call	_strcpy
; Line 148
	mov	al, BYTE PTR [edi+48]
	pop	ecx
	pop	ecx
; Line 149
	xor	edx, edx
	inc	edx
	mov	ecx, ebx
	mov	BYTE PTR [esi+352], al
	call	@InitPlayer@8
; Line 150
	movzx	eax, BYTE PTR [edi+49]
	mov	DWORD PTR [esi+360], eax
; Line 165
	cmp	BYTE PTR _killok$[ebp], 0
	movzx	eax, BYTE PTR [edi+49]
	mov	DWORD PTR [esi+356], eax
	movzx	eax, BYTE PTR [edi+50]
	mov	DWORD PTR [esi+368], eax
	movzx	eax, BYTE PTR [edi+50]
	mov	DWORD PTR [esi+364], eax
	movzx	eax, BYTE PTR [edi+51]
	mov	DWORD PTR [esi+376], eax
	movzx	eax, BYTE PTR [edi+51]
	mov	DWORD PTR [esi+372], eax
	movzx	eax, BYTE PTR [edi+52]
	mov	DWORD PTR [esi+384], eax
	movzx	eax, BYTE PTR [edi+52]
	mov	DWORD PTR [esi+380], eax
	mov	al, BYTE PTR [edi+53]
	mov	BYTE PTR [esi+440], al
	movzx	eax, BYTE PTR [edi+54]
	mov	DWORD PTR [esi+388], eax
	mov	eax, DWORD PTR [edi+55]
	mov	DWORD PTR [esi+444], eax
	mov	eax, DWORD PTR [edi+59]
	mov	DWORD PTR [esi+460], eax
	mov	eax, DWORD PTR [edi+67]
	mov	DWORD PTR [esi+404], eax
	mov	eax, DWORD PTR [edi+63]
	mov	DWORD PTR _v6$[ebp], eax
	mov	DWORD PTR [esi+400], eax
	jne	SHORT $L85076
; Line 166
	and	BYTE PTR _v6$[ebp], 192			; 000000c0H
; Line 167
	push	64					; 00000040H
	pop	eax
	cmp	DWORD PTR _v6$[ebp], eax
	jge	SHORT $L85076
; Line 168
	mov	DWORD PTR [esi+400], eax
$L85076:
; Line 170
	mov	eax, DWORD PTR [edi+75]
	mov	DWORD PTR [esi+424], eax
; Line 171
	mov	eax, DWORD PTR [edi+71]
	mov	DWORD PTR [esi+420], eax
; Line 172
	mov	eax, DWORD PTR [edi+116]
	mov	DWORD PTR [esi+264], eax
	mov	eax, DWORD PTR [edi+120]
	mov	DWORD PTR [esi+268], eax
; Line 174
	xor	eax, eax
$L85077:
; Line 175
	mov	cl, BYTE PTR [edi+eax+79]
	mov	BYTE PTR [esi+eax+193], cl
	inc	eax
	cmp	eax, 37					; 00000025H
	jl	SHORT $L85077
; Line 177
	lea	eax, DWORD PTR [edi+124]
	mov	DWORD PTR -8+[ebp], 7
	mov	DWORD PTR _pki$[ebp], eax
; Line 178
	lea	eax, DWORD PTR [esi+892]
	mov	DWORD PTR _pi$[ebp], eax
	mov	ebx, 368				; 00000170H
$L85080:
; Line 181
	mov	edx, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _pki$[ebp]
	add	DWORD PTR _pki$[ebp], 19		; 00000013H
	add	DWORD PTR _pi$[ebp], ebx
	call	@UnPackItem@8
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85080
; Line 183
	lea	eax, DWORD PTR [edi+257]
	mov	DWORD PTR -8+[ebp], 40			; 00000028H
	mov	DWORD PTR _pki$[ebp], eax
; Line 184
	lea	eax, DWORD PTR [esi+3468]
	mov	DWORD PTR _pi$[ebp], eax
$L85083:
; Line 187
	mov	edx, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _pki$[ebp]
	add	DWORD PTR _pki$[ebp], 19		; 00000013H
	add	DWORD PTR _pi$[ebp], ebx
	call	@UnPackItem@8
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85083
; Line 189
	xor	eax, eax
$L85086:
; Line 190
	mov	cl, BYTE PTR [edi+eax+1017]
	mov	BYTE PTR [esi+eax+18192], cl
	inc	eax
	cmp	eax, 40					; 00000028H
	jl	SHORT $L85086
; Line 192
	movzx	eax, BYTE PTR [edi+1057]
; Line 193
	mov	ecx, esi
	mov	DWORD PTR [esi+18188], eax
	call	@VerifyGoldSeeds@4
; Line 195
	lea	eax, DWORD PTR [edi+1058]
	mov	DWORD PTR -8+[ebp], 8
	mov	DWORD PTR _pki$[ebp], eax
; Line 196
	lea	eax, DWORD PTR [esi+18232]
	mov	DWORD PTR _pi$[ebp], eax
$L85090:
; Line 199
	mov	edx, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _pki$[ebp]
	add	DWORD PTR _pki$[ebp], 19		; 00000013H
	add	DWORD PTR _pi$[ebp], ebx
	call	@UnPackItem@8
	dec	DWORD PTR -8+[ebp]
	jne	SHORT $L85090
; Line 201
	mov	ecx, DWORD PTR _pnum$[ebp]
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L85096
; Line 202
	mov	eax, OFFSET FLAT:_witchitem+8
$L85094:
; Line 203
	or	DWORD PTR [eax], -1
	add	eax, ebx
	cmp	eax, OFFSET FLAT:_witchitem+7368
	jl	SHORT $L85094
$L85096:
; Line 206
	xor	edx, edx
	call	@CalcPlrInv@8
; Line 207
	and	BYTE PTR [esi+21624], 0
; Line 208
	and	BYTE PTR [esi+21625], 0
; Line 209
	and	BYTE PTR [esi+21626], 0
; Line 210
	mov	eax, DWORD PTR [edi+1234]
	mov	DWORD PTR [esi+21648], eax
; Line 211
	mov	al, BYTE PTR [edi+1213]
	mov	BYTE PTR [esi+21627], al
; Line 212
	mov	al, BYTE PTR [edi+1214]
	mov	BYTE PTR [esi+21628], al
	pop	edi
	pop	esi
	pop	ebx
; Line 213
	leave
	ret	4
@UnPackPlayer@12 ENDP
_TEXT	ENDS
EXTRN	_item:BYTE
EXTRN	@RecreateItem@20:NEAR
EXTRN	@RecreateEar@40:NEAR
; Function compile flags: /Ogsy
;	COMDAT @UnPackItem@8
_TEXT	SEGMENT
@UnPackItem@8 PROC NEAR					; COMDAT
; _is$ = ecx
; _id$ = edx
; Line 218
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, edx
; Line 226
	mov	ax, WORD PTR [esi+6]
	cmp	ax, -1
	jne	SHORT $L85105
; Line 227
	or	DWORD PTR [edi+8], -1
; Line 228
	jmp	$L85183
$L85105:
; Line 229
	cmp	ax, 23					; 00000017H
	jne	SHORT $L85107
; Line 240
	movzx	eax, WORD PTR [esi+13]
	push	DWORD PTR [esi+15]
	mov	dx, WORD PTR [esi+4]
	push	eax
	movzx	eax, BYTE PTR [esi+12]
	push	eax
	movzx	eax, BYTE PTR [esi+11]
	push	eax
	movzx	eax, BYTE PTR [esi+10]
	push	eax
	movzx	eax, BYTE PTR [esi+9]
	push	eax
	movsx	eax, BYTE PTR [esi+8]
	push	eax
	push	DWORD PTR [esi]
	push	127					; 0000007fH
	pop	ecx
	call	@RecreateEar@40
; Line 241
	jmp	SHORT $L85113
$L85107:
; Line 244
	movzx	ecx, WORD PTR [esi+13]
	push	ecx
	mov	cx, WORD PTR [esi+4]
	push	DWORD PTR [esi]
	movsx	edx, ax
	push	ecx
	push	127					; 0000007fH
	pop	ecx
	call	@RecreateItem@20
; Line 245
	mov	al, BYTE PTR [esi+8]
	shr	al, 1
	mov	BYTE PTR _item+46796, al
; Line 246
	mov	al, BYTE PTR [esi+8]
	and	eax, 1
	mov	DWORD PTR _item+46792, eax
; Line 247
	movzx	eax, BYTE PTR [esi+9]
	mov	DWORD PTR _item+46972, eax
; Line 248
	movzx	eax, BYTE PTR [esi+10]
	mov	DWORD PTR _item+46976, eax
; Line 249
	movzx	eax, BYTE PTR [esi+11]
	mov	DWORD PTR _item+46964, eax
; Line 250
	movzx	eax, BYTE PTR [esi+12]
	mov	DWORD PTR _item+46968, eax
$L85113:
; Line 252
	mov	ecx, OFFSET FLAT:_item+46736
	mov	eax, edi
	sub	ecx, edi
	mov	esi, 368				; 00000170H
$L85182:
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
	inc	eax
	dec	esi
	jne	SHORT $L85182
$L85183:
	pop	edi
	pop	esi
; Line 254
	ret	0
@UnPackItem@8 ENDP
_TEXT	ENDS
END
