; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/player.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_07MHIA@Warrior?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LCAJ@Rogue?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08HHBF@Sorceror?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@HJNO@LoadPlrGFX?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CAGC@?$CFc?$CFc?$CFc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02EPAG@AS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02FNBP@ST?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02OFFK@AW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02PKHN@WL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02BKOD@AT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02LJBN@HT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02LEOI@LM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02CMOJ@FM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02CHBF@QM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02FGOD@DT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02NMNE@BL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05GJPF@PLR?32?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@MGOD@PlrGFX?2?$CFs?2?$CFs?2?$CFs?$CFs?4CL2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@OKLD@InitPlayerGFX?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@GMGC@InitPlrGFXMem?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@DDBI@FreePlayerGFX?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@FKPI@NewPlrAnim?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@NAMN@ClearPlrPVars?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KMIG@SetPlrAnims?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@KEKO@CreatePlayer?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@FHMN@NextPlrLevel?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@PPMI@AddPlrExperience?3?5illegal?5player@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@NDKH@InitPlayer?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@JNBF@PlrDirOK?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@MCIA@SetPlayerOld?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@LNFC@FixPlayerLocation?3?5illegal?5playe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@HGPM@StartStand?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@OJNO@StartWalkStand?3?5illegal?5player?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CF@HOPO@PM_ChangeLightOff?3?5illegal?5playe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@BOJA@PM_ChangeOffset?3?5illegal?5player?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@FNGD@StartWalk?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@JBBF@StartWalk2?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@NCOL@StartWalk3?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KNPO@StartAttack?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@INBP@StartRangeAttack?3?5illegal?5player@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@FHGI@StartPlrBlock?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@KMKA@StartSpell?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@KLLP@FixPlrWalkTags?3?5illegal?5player?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@PONH@StartPlrHit?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@ICJP@StartPlayerKill?3?5illegal?5player?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09FPPI@Ear?5of?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@BNML@PlrDeadItem?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@PBJP@DropHalfPlayersGold?3?5illegal?5pla@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@HAPG@StartNewLvl?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@CMMB@StartNewLvl?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@CAAK@RestartTownLvl?3?5illegal?5player?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@MDFO@PM_DoWalk?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@HEIL@PM_DoWalk2?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@DHHF@PM_DoWalk3?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@DLID@WeaponDur?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@GGFI@PlrHitMonst?3?5illegal?5monster?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@HEFI@PlrHitMonst?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@KION@PlrHitPlr?3?5illegal?5target?5player@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@KPE@PlrHitPlr?3?5illegal?5attacking?5pla@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@LIBL@PM_DoAttack?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@HOIC@PM_DoRangeAttack?3?5illegal?5player@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LPGN@ShieldDur?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@IAHL@PM_DoBlock?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@EJDO@PM_DoSpell?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@GEBL@PM_DoGotHit?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@GNCJ@ArmorDur?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@CJCI@PM_DoDeath?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@IONG@CheckNewPath?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@FGNG@PlrDeathModeOK?3?5illegal?5player?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@IBLO@ValidatePlayer?3?5illegal?5player?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@OGBI@ProcessPlayers?3?5illegal?5player?5?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@IFEJ@ClrPlrPath?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@FKB@MakePlrPath?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@OGFJ@CheckPlrSpell?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@JMFM@SyncPlrAnim?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@DCCH@SyncPlrAnim?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@ENDO@SyncInitPlr?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@INDD@CheckStats?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@KHLG@ModifyPlrStr?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@KDMF@ModifyPlrMag?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@HDD@ModifyPlrDex?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@MIAP@ModifyPlrVit?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CG@PALE@SetPlayerHitPoints?3?5illegal?5play@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@IDJN@SetPlrStr?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@IHOO@SetPlrMag?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@CDBI@SetPlrDex?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@OMCE@SetPlrVit?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@BCNB@InitDungMsgs?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@LHAB@PlayDungMsgs?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @SetPlayerGPtrs@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadPlrGFX@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitPlayerGFX@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitPlrGFXMem@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @GetPlrGFXSize@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @FreePlayerGFX@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NewPlrAnim@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ClearPlrPVars@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetPlrAnims@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ClearPlrRVars@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CreatePlayer@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CalcStatDiff@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NextPlrLevel@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddPlrExperience@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddPlrMonstExper@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitPlayer@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitMultiView
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitPlayerLoc@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SolidLoc@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlrDirOK@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlrClrTrans@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlrDoTrans@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetPlayerOld@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @FixPlayerLocation@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartStand@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartWalkStand@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_ChangeLightOff@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_ChangeOffset@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartWalk@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartWalk2@36
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartWalk3@44
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartAttack@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartRangeAttack@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartPlrBlock@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartSpell@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @FixPlrWalkTags@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RemovePlrFromMap@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartPlrHit@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RespawnDeadItem@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartPlayerKill@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlrDeadItem@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DropHalfPlayersGold@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncPlrKill@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RemovePlrMissiles@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitLevelChange@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartNewLvl@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RestartTownLvl@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartWarpLvl@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoStand@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoWalk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoWalk2@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoWalk3@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WeaponDur@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlrHitMonst@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlrHitPlr@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlrHitObj@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoAttack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoRangeAttack@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ShieldDur@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoBlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoSpell@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoGotHit@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ArmorDur@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoDeath@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PM_DoNewLvl@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckNewPath@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlrDeathModeOK@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ValidatePlayer
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ProcessPlayers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckCheatStats@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ClrPlrPath@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PosOkPlayer@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MakePlrPath@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckPlrSpell@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncPlrAnim@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncInitPlrPos@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SyncInitPlr@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CheckStats@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ModifyPlrStr@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ModifyPlrMag@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ModifyPlrDex@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ModifyPlrVit@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetPlayerHitPoints@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetPlrStr@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetPlrMag@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetPlrDex@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetPlrVit@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitDungMsgs@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _PlayDungMsgs
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_ArmourChar
PUBLIC	_WepChar
PUBLIC	_CharChar
PUBLIC	_plrxoff
PUBLIC	_plryoff
PUBLIC	_plrxoff2
PUBLIC	_plryoff2
PUBLIC	_PlrGFXAnimLens
PUBLIC	_PWVel
PUBLIC	_StrengthTbl
PUBLIC	_MagicTbl
PUBLIC	_DexterityTbl
PUBLIC	_VitalityTbl
PUBLIC	_ToBlkTbl
PUBLIC	_ClassStrTblOld
PUBLIC	_MaxStats
PUBLIC	_ExpLvlsTbl
PUBLIC	_ClassStrTbl
PUBLIC	_fix
PUBLIC	??_C@_07MHIA@Warrior?$AA@			; `string'
PUBLIC	??_C@_05LCAJ@Rogue?$AA@				; `string'
PUBLIC	??_C@_08HHBF@Sorceror?$AA@			; `string'
PUBLIC	_plr_gfx_flag
PUBLIC	_plr_gfx_bflag
_DATA	SEGMENT
COMM	_plr_lframe_size:DWORD
COMM	_plr_wframe_size:DWORD
_DATA	ENDS
_BSS	SEGMENT
_plr_gfx_flag DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_plr_aframe_size:DWORD
COMM	_myplr:DWORD
COMM	_plr:BYTE:015360H
COMM	_plr_fframe_size:DWORD
COMM	_plr_qframe_size:DWORD
COMM	_deathflag:DWORD
COMM	_plr_hframe_size:DWORD
COMM	_plr_bframe_size:DWORD
_DATA	ENDS
_BSS	SEGMENT
	ALIGN	4

_plr_gfx_bflag DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_plr_sframe_size:DWORD
COMM	_deathdelay:DWORD
COMM	_plr_dframe_size:DWORD
_DATA	ENDS
CONST	SEGMENT
_ArmourChar DB	04cH
	DB	04dH
	DB	048H
	DB	00H
_WepChar DB	04eH
	DB	055H
	DB	053H
	DB	044H
	DB	042H
	DB	041H
	DB	04dH
	DB	048H
	DB	054H
	DB	00H
	ORG $+2
_CharChar DB	057H
	DB	052H
	DB	053H
	DB	00H
CONST	ENDS
_DATA	SEGMENT
_plrxoff DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
_plryoff DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	02H
_plrxoff2 DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	02H
	DD	00H
	DD	01H
	DD	02H
	DD	02H
_plryoff2 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
_PlrGFXAnimLens DB 0aH
	DB	010H
	DB	08H
	DB	02H
	DB	014H
	DB	014H
	DB	06H
	DB	014H
	DB	08H
	DB	09H
	DB	0eH
	DB	08H
	DB	012H
	DB	08H
	DB	04H
	DB	014H
	DB	010H
	DB	07H
	DB	014H
	DB	08H
	DB	0aH
	DB	0cH
	DB	08H
	DB	010H
	DB	08H
	DB	06H
	DB	014H
	DB	0cH
	DB	08H
	DB	014H
	DB	08H
	DB	0cH
	DB	08H
	ORG $+3
_PWVel	DD	0800H
	DD	0400H
	DD	0200H
	DD	0800H
	DD	0400H
	DD	0200H
	DD	0800H
	DD	0400H
	DD	0200H
	DD	08H
	DD	08H
	DD	08H
_StrengthTbl DD	01eH
	DD	014H
	DD	0fH
_MagicTbl DD	0aH
	DD	0fH
	DD	023H
_DexterityTbl DD 014H
	DD	01eH
	DD	0fH
_VitalityTbl DD	019H
	DD	014H
	DD	014H
_ToBlkTbl DD	01eH
	DD	014H
	DD	0aH
_DATA	ENDS
;	COMDAT ??_C@_07MHIA@Warrior?$AA@
_DATA	SEGMENT
??_C@_07MHIA@Warrior?$AA@ DB 'Warrior', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LCAJ@Rogue?$AA@
_DATA	SEGMENT
??_C@_05LCAJ@Rogue?$AA@ DB 'Rogue', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08HHBF@Sorceror?$AA@
_DATA	SEGMENT
??_C@_08HHBF@Sorceror?$AA@ DB 'Sorceror', 00H		; `string'
_DATA	ENDS
_DATA	SEGMENT
_ClassStrTblOld DD FLAT:??_C@_07MHIA@Warrior?$AA@
	DD	FLAT:??_C@_05LCAJ@Rogue?$AA@
	DD	FLAT:??_C@_08HHBF@Sorceror?$AA@
_MaxStats DD	0faH
	DD	032H
	DD	03cH
	DD	064H
	DD	037H
	DD	046H
	DD	0faH
	DD	050H
	DD	02dH
	DD	0faH
	DD	055H
	DD	050H
	ORG $+4
_ExpLvlsTbl DD	00H
	DD	07d0H
	DD	0120cH
	DD	01f68H
	DD	030c9H
	DD	04752H
	DD	06470H
	DD	089edH
	DD	0ba06H
	DD	0f784H
	DD	0145dbH
	DD	01a94fH
	DD	02271eH
	DD	02c5b3H
	DD	0386a3H
	DD	04c938H
	DD	067883H
	DD	08b736H
	DD	0bb269H
	DD	0fa482H
	DD	014d8d3H
	DD	01bb028H
	DD	024a667H
	DD	030598bH
	DD	03f9238H
	DD	0534e43H
	DD	06ccd80H
	DD	08da152H
	DD	0b7bf6cH
	DD	0ed9857H
	DD	01323254H
	DD	01894945H
	DD	01f7745fH
	DD	02825262H
	DD	0330bd33H
	DD	040b05b2H
	DD	051b38adH
	DD	066d6dc7H
	DD	0810212fH
	DD	0a1498d9H
	DD	0c8f55e7H
	DD	0f9892a5H
	DD	0134ccd64H
	DD	017cd6010H
	DD	01d41241dH
	DD	023d521eeH
	DD	02bbd4a51H
	DD	03535381eH
	DD	0408bdfc4H
	DD	04e1fcda5H
	DD	05e623a81H
_ClassStrTbl DD	FLAT:??_C@_07MHIA@Warrior?$AA@
	DD	FLAT:??_C@_05LCAJ@Rogue?$AA@
	DD	FLAT:??_C@_08HHBF@Sorceror?$AA@
_fix	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	06H
	DB	06H
	DB	06H
	DB	08H
_DATA	ENDS
PUBLIC	@SetPlayerGPtrs@8
; Function compile flags: /Ogsy
;	COMDAT @SetPlayerGPtrs@8
_TEXT	SEGMENT
@SetPlayerGPtrs@8 PROC NEAR				; COMDAT
; _pData$ = ecx
; _pAnim$ = edx
; File Source/player.cpp
; Line 110
	push	esi
	push	edi
	mov	eax, edx
; Line 113
	mov	esi, ecx
	push	8
	sub	esi, eax
	pop	edx
$L84991:
; Line 114
	mov	edi, DWORD PTR [esi+eax]
	add	edi, ecx
	mov	DWORD PTR [eax], edi
	add	eax, 4
	dec	edx
	jne	SHORT $L84991
	pop	edi
	pop	esi
; Line 116
	ret	0
@SetPlayerGPtrs@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@HJNO@LoadPlrGFX?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_06CAGC@?$CFc?$CFc?$CFc?$AA@		; `string'
PUBLIC	@LoadPlrGFX@8
PUBLIC	??_C@_02EPAG@AS?$AA@				; `string'
PUBLIC	??_C@_02FNBP@ST?$AA@				; `string'
PUBLIC	??_C@_02OFFK@AW?$AA@				; `string'
PUBLIC	??_C@_02PKHN@WL?$AA@				; `string'
PUBLIC	??_C@_02BKOD@AT?$AA@				; `string'
PUBLIC	??_C@_02LJBN@HT?$AA@				; `string'
PUBLIC	??_C@_02LEOI@LM?$AA@				; `string'
PUBLIC	??_C@_02CMOJ@FM?$AA@				; `string'
PUBLIC	??_C@_02CHBF@QM?$AA@				; `string'
PUBLIC	??_C@_02FGOD@DT?$AA@				; `string'
PUBLIC	??_C@_02NMNE@BL?$AA@				; `string'
PUBLIC	??_C@_05GJPF@PLR?32?$AA@			; `string'
PUBLIC	??_C@_0BG@MGOD@PlrGFX?2?$CFs?2?$CFs?2?$CFs?$CFs?4CL2?$AA@ ; `string'
EXTRN	_sprintf:NEAR
EXTRN	@LoadFileWithMem@8:NEAR
EXTRN	_TermMsg:NEAR
EXTRN	_leveltype:BYTE
;	COMDAT ??_C@_0BO@HJNO@LoadPlrGFX?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@HJNO@LoadPlrGFX?3?5illegal?5player?5?$CFd?$AA@ DB 'LoadPlrGFX: '
	DB	'illegal player %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CAGC@?$CFc?$CFc?$CFc?$AA@
_DATA	SEGMENT
??_C@_06CAGC@?$CFc?$CFc?$CFc?$AA@ DB '%c%c%c', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_02LJBN@HT?$AA@
_DATA	SEGMENT
??_C@_02LJBN@HT?$AA@ DB 'HT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02BKOD@AT?$AA@
_DATA	SEGMENT
??_C@_02BKOD@AT?$AA@ DB 'AT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02OFFK@AW?$AA@
_DATA	SEGMENT
??_C@_02OFFK@AW?$AA@ DB 'AW', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02PKHN@WL?$AA@
_DATA	SEGMENT
??_C@_02PKHN@WL?$AA@ DB 'WL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02EPAG@AS?$AA@
_DATA	SEGMENT
??_C@_02EPAG@AS?$AA@ DB 'AS', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02FNBP@ST?$AA@
_DATA	SEGMENT
??_C@_02FNBP@ST?$AA@ DB 'ST', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02LEOI@LM?$AA@
_DATA	SEGMENT
??_C@_02LEOI@LM?$AA@ DB 'LM', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05GJPF@PLR?32?$AA@
_DATA	SEGMENT
??_C@_05GJPF@PLR?32?$AA@ DB 'PLR:2', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02NMNE@BL?$AA@
_DATA	SEGMENT
??_C@_02NMNE@BL?$AA@ DB 'BL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02FGOD@DT?$AA@
_DATA	SEGMENT
??_C@_02FGOD@DT?$AA@ DB 'DT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02CHBF@QM?$AA@
_DATA	SEGMENT
??_C@_02CHBF@QM?$AA@ DB 'QM', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02CMOJ@FM?$AA@
_DATA	SEGMENT
??_C@_02CMOJ@FM?$AA@ DB 'FM', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@MGOD@PlrGFX?2?$CFs?2?$CFs?2?$CFs?$CFs?4CL2?$AA@
_DATA	SEGMENT
??_C@_0BG@MGOD@PlrGFX?2?$CFs?2?$CFs?2?$CFs?$CFs?4CL2?$AA@ DB 'PlrGFX\%s\%'
	DB	's\%s%s.CL2', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @LoadPlrGFX@8
_TEXT	SEGMENT
_gfxflag$ = -16
_prefix$ = -32
_pszName$ = -288
_szCel$ = -4
_cs$ = -12
_pData$ = -12
_pAnim$ = -12
_i$ = -8
@LoadPlrGFX@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _gfxflag$ = edx
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 128
	cmp	esi, 4
	mov	DWORD PTR _gfxflag$[ebp], edx
	jb	SHORT $L85009
; Line 129
	push	esi
	push	OFFSET FLAT:??_C@_0BO@HJNO@LoadPlrGFX?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85009:
; Line 132
	imul	esi, 21720				; 000054d8H
	add	esi, OFFSET FLAT:_plr
; Line 133
	mov	eax, DWORD PTR [esi+120]
	mov	ecx, eax
	and	ecx, 15					; 0000000fH
	sar	eax, 4
	movsx	ecx, BYTE PTR _WepChar[ecx]
	movsx	eax, BYTE PTR _ArmourChar[eax]
	push	ecx
	push	eax
	movsx	eax, BYTE PTR [esi+352]
	movsx	eax, BYTE PTR _CharChar[eax]
	push	eax
	lea	eax, DWORD PTR _prefix$[ebp]
	push	OFFSET FLAT:??_C@_06CAGC@?$CFc?$CFc?$CFc?$AA@ ; `string'
	push	eax
	call	_sprintf
; Line 134
	movsx	eax, BYTE PTR [esi+352]
; Line 136
	xor	ecx, ecx
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _ClassStrTbl[eax*4]
	inc	ecx
	mov	DWORD PTR _cs$[ebp], eax
	mov	al, BYTE PTR _leveltype
	mov	edi, DWORD PTR _pData$[ebp]
	mov	ebx, DWORD PTR _pAnim$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$L85012:
; Line 137
	mov	edx, DWORD PTR _gfxflag$[ebp]
	test	ecx, edx
	je	$L85013
; Line 141
	cmp	ecx, 16					; 00000010H
	ja	$L86985
	je	$L85038
	dec	ecx
	je	SHORT $L85020
	dec	ecx
	je	SHORT $L85025
	dec	ecx
	dec	ecx
	je	SHORT $L85030
	sub	ecx, 4
	jne	$L85059
; Line 167
	test	al, al
	je	$L85013
; Line 171
	mov	edi, DWORD PTR [esi+21704]
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02LJBN@HT?$AA@ ; `string'
; Line 172
	lea	ebx, DWORD PTR [esi+772]
; Line 173
	jmp	$L85017
$L85030:
; Line 159
	test	al, al
	je	$L85013
; Line 163
	mov	edi, DWORD PTR [esi+21688]
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02BKOD@AT?$AA@ ; `string'
; Line 164
	lea	ebx, DWORD PTR [esi+620]
; Line 165
	jmp	$L85017
$L85025:
; Line 152
	test	al, al
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02OFFK@AW?$AA@ ; `string'
	jne	SHORT $L85027
; Line 153
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02PKHN@WL?$AA@ ; `string'
$L85027:
; Line 155
	mov	edi, DWORD PTR [esi+21684]
; Line 156
	lea	ebx, DWORD PTR [esi+580]
; Line 157
	jmp	$L85017
$L85020:
; Line 144
	test	al, al
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02EPAG@AS?$AA@ ; `string'
	jne	SHORT $L85022
; Line 145
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02FNBP@ST?$AA@ ; `string'
$L85022:
; Line 147
	mov	edi, DWORD PTR [esi+21680]
; Line 148
	lea	ebx, DWORD PTR [esi+540]
; Line 149
	jmp	$L85017
$L85038:
; Line 175
	test	al, al
	je	$L85013
; Line 179
	mov	edi, DWORD PTR [esi+21692]
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02LEOI@LM?$AA@ ; `string'
; Line 180
	lea	ebx, DWORD PTR [esi+664]
; Line 181
	jmp	$L85017
$L86985:
; Line 141
	sub	ecx, 32					; 00000020H
	je	$L85042
	sub	ecx, 32					; 00000020H
	je	SHORT $L85046
	sub	ecx, 64					; 00000040H
	je	SHORT $L85050
	sub	ecx, 128				; 00000080H
	je	SHORT $L85054
$L85059:
; Line 219
	push	OFFSET FLAT:??_C@_05GJPF@PLR?32?$AA@	; `string'
	call	_TermMsg
	pop	ecx
; Line 220
	jmp	SHORT $L85017
$L85054:
; Line 207
	test	al, al
	je	$L85013
; Line 210
	cmp	BYTE PTR [esi+316], 0
	je	$L85013
; Line 215
	mov	edi, DWORD PTR [esi+21712]
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02NMNE@BL?$AA@ ; `string'
; Line 216
	lea	ebx, DWORD PTR [esi+852]
; Line 217
	jmp	SHORT $L85017
$L85050:
; Line 199
	test	BYTE PTR [esi+120], 15			; 0000000fH
	jne	$L85013
; Line 203
	mov	edi, DWORD PTR [esi+21708]
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02FGOD@DT?$AA@ ; `string'
; Line 204
	lea	ebx, DWORD PTR [esi+812]
; Line 205
	jmp	SHORT $L85017
$L85046:
; Line 191
	test	al, al
	je	SHORT $L85013
; Line 195
	mov	edi, DWORD PTR [esi+21700]
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02CHBF@QM?$AA@ ; `string'
; Line 196
	lea	ebx, DWORD PTR [esi+728]
; Line 197
	jmp	SHORT $L85017
$L85042:
; Line 183
	test	al, al
	je	SHORT $L85013
; Line 187
	mov	edi, DWORD PTR [esi+21696]
	mov	DWORD PTR _szCel$[ebp], OFFSET FLAT:??_C@_02CMOJ@FM?$AA@ ; `string'
; Line 188
	lea	ebx, DWORD PTR [esi+696]
$L85017:
; Line 223
	push	DWORD PTR _szCel$[ebp]
	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	lea	eax, DWORD PTR _pszName$[ebp]
	push	DWORD PTR _cs$[ebp]
	push	OFFSET FLAT:??_C@_0BG@MGOD@PlrGFX?2?$CFs?2?$CFs?2?$CFs?$CFs?4CL2?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 24					; 00000018H
; Line 224
	mov	edx, edi
	lea	ecx, DWORD PTR _pszName$[ebp]
	call	@LoadFileWithMem@8
; Line 225
	mov	edx, ebx
	mov	ecx, edi
	call	@SetPlayerGPtrs@8
; Line 226
	mov	eax, DWORD PTR _i$[ebp]
	or	DWORD PTR [esi+536], eax
	mov	al, BYTE PTR _leveltype
$L85013:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, ecx
	cmp	ecx, 383				; 0000017fH
	mov	DWORD PTR _i$[ebp], ecx
	jbe	$L85012
	pop	edi
	pop	esi
	pop	ebx
; Line 228
	leave
	ret	0
@LoadPlrGFX@8 ENDP
_TEXT	ENDS
PUBLIC	@InitPlayerGFX@4
PUBLIC	??_C@_0CB@OKLD@InitPlayerGFX?3?5illegal?5player?5?$CFd@ ; `string'
;	COMDAT ??_C@_0CB@OKLD@InitPlayerGFX?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT
??_C@_0CB@OKLD@InitPlayerGFX?3?5illegal?5player?5?$CFd@ DB 'InitPlayerGFX'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @InitPlayerGFX@4
_TEXT	SEGMENT
@InitPlayerGFX@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 231
	push	esi
	mov	esi, ecx
; Line 232
	cmp	esi, 4
	jb	SHORT $L85068
; Line 233
	push	esi
	push	OFFSET FLAT:??_C@_0CB@OKLD@InitPlayerGFX?3?5illegal?5player?5?$CFd@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85068:
; Line 236
	mov	eax, esi
; Line 238
	mov	ecx, esi
	imul	eax, 21720				; 000054d8H
	pop	esi
	test	DWORD PTR _plr[eax+408], -64		; ffffffc0H
	jne	SHORT $L85070
	and	DWORD PTR _plr[eax+120], 0
	mov	edx, 128				; 00000080H
	jmp	SHORT $L86991
$L85070:
; Line 240
	mov	edx, 383				; 0000017fH
$L86991:
	jmp	@LoadPlrGFX@8
@InitPlayerGFX@4 ENDP
_TEXT	ENDS
PUBLIC	@InitPlrGFXMem@4
PUBLIC	@GetPlrGFXSize@4
PUBLIC	??_C@_0CB@GMGC@InitPlrGFXMem?3?5illegal?5player?5?$CFd@ ; `string'
EXTRN	@DiabloAllocPtr@4:NEAR
;	COMDAT ??_C@_0CB@GMGC@InitPlrGFXMem?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT
??_C@_0CB@GMGC@InitPlrGFXMem?3?5illegal?5player?5?$CFd@ DB 'InitPlrGFXMem'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @InitPlrGFXMem@4
_TEXT	SEGMENT
@InitPlrGFXMem@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 245
	push	esi
	mov	esi, ecx
; Line 246
	cmp	esi, 4
	jb	SHORT $L85076
; Line 247
	push	esi
	push	OFFSET FLAT:??_C@_0CB@GMGC@InitPlrGFXMem?3?5illegal?5player?5?$CFd@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85076:
; Line 250
	test	BYTE PTR _plr_gfx_flag, 1
	push	ebx
	push	ebp
	push	edi
	jne	SHORT $L85080
; Line 251
	or	BYTE PTR _plr_gfx_flag, 1
; Line 252
	mov	ebx, OFFSET FLAT:??_C@_02EPAG@AS?$AA@	; `string'
	mov	ecx, ebx
	call	@GetPlrGFXSize@4
	mov	edi, OFFSET FLAT:??_C@_02FNBP@ST?$AA@	; `string'
	mov	ebp, eax
	mov	ecx, edi
	call	@GetPlrGFXSize@4
	cmp	eax, ebp
; Line 253
	mov	ecx, edi
	ja	SHORT $L87004
; Line 255
	mov	ecx, ebx
$L87004:
	call	@GetPlrGFXSize@4
	mov	DWORD PTR _plr_sframe_size, eax
$L85080:
; Line 258
	mov	ecx, DWORD PTR _plr_sframe_size
	imul	esi, 21720				; 000054d8H
	call	@DiabloAllocPtr@4
; Line 260
	test	BYTE PTR _plr_gfx_flag, 2
	mov	DWORD PTR _plr[esi+21680], eax
	jne	SHORT $L85083
; Line 261
	or	BYTE PTR _plr_gfx_flag, 2
; Line 262
	mov	ebp, OFFSET FLAT:??_C@_02OFFK@AW?$AA@	; `string'
	mov	ecx, ebp
	call	@GetPlrGFXSize@4
	mov	edi, OFFSET FLAT:??_C@_02PKHN@WL?$AA@	; `string'
	mov	ebx, eax
	mov	ecx, edi
	call	@GetPlrGFXSize@4
	cmp	eax, ebx
; Line 263
	mov	ecx, edi
	ja	SHORT $L87005
; Line 265
	mov	ecx, ebp
$L87005:
	call	@GetPlrGFXSize@4
	mov	DWORD PTR _plr_wframe_size, eax
$L85083:
; Line 268
	mov	ecx, DWORD PTR _plr_wframe_size
	call	@DiabloAllocPtr@4
; Line 270
	test	BYTE PTR _plr_gfx_flag, 4
	pop	edi
	pop	ebp
	mov	DWORD PTR _plr[esi+21684], eax
	pop	ebx
	jne	SHORT $L85084
; Line 271
	or	BYTE PTR _plr_gfx_flag, 4
; Line 272
	mov	ecx, OFFSET FLAT:??_C@_02BKOD@AT?$AA@	; `string'
	call	@GetPlrGFXSize@4
	mov	DWORD PTR _plr_aframe_size, eax
$L85084:
; Line 274
	mov	ecx, DWORD PTR _plr_aframe_size
	call	@DiabloAllocPtr@4
; Line 276
	test	BYTE PTR _plr_gfx_flag, 8
	mov	DWORD PTR _plr[esi+21688], eax
	jne	SHORT $L85085
; Line 277
	or	BYTE PTR _plr_gfx_flag, 8
; Line 278
	mov	ecx, OFFSET FLAT:??_C@_02LJBN@HT?$AA@	; `string'
	call	@GetPlrGFXSize@4
	mov	DWORD PTR _plr_hframe_size, eax
$L85085:
; Line 280
	mov	ecx, DWORD PTR _plr_hframe_size
	call	@DiabloAllocPtr@4
; Line 282
	test	BYTE PTR _plr_gfx_flag, 16		; 00000010H
	mov	DWORD PTR _plr[esi+21704], eax
	jne	SHORT $L85086
; Line 283
	or	BYTE PTR _plr_gfx_flag, 16		; 00000010H
; Line 284
	mov	ecx, OFFSET FLAT:??_C@_02LEOI@LM?$AA@	; `string'
	call	@GetPlrGFXSize@4
	mov	DWORD PTR _plr_lframe_size, eax
$L85086:
; Line 286
	mov	ecx, DWORD PTR _plr_lframe_size
	call	@DiabloAllocPtr@4
; Line 288
	test	BYTE PTR _plr_gfx_flag, 32		; 00000020H
	mov	DWORD PTR _plr[esi+21692], eax
	jne	SHORT $L85087
; Line 289
	or	BYTE PTR _plr_gfx_flag, 32		; 00000020H
; Line 290
	mov	ecx, OFFSET FLAT:??_C@_02CMOJ@FM?$AA@	; `string'
	call	@GetPlrGFXSize@4
	mov	DWORD PTR _plr_fframe_size, eax
$L85087:
; Line 292
	mov	ecx, DWORD PTR _plr_fframe_size
	call	@DiabloAllocPtr@4
; Line 294
	test	BYTE PTR _plr_gfx_flag, 64		; 00000040H
	mov	DWORD PTR _plr[esi+21696], eax
	jne	SHORT $L85088
; Line 295
	or	BYTE PTR _plr_gfx_flag, 64		; 00000040H
; Line 296
	mov	ecx, OFFSET FLAT:??_C@_02CHBF@QM?$AA@	; `string'
	call	@GetPlrGFXSize@4
	mov	DWORD PTR _plr_qframe_size, eax
$L85088:
; Line 298
	mov	ecx, DWORD PTR _plr_qframe_size
	call	@DiabloAllocPtr@4
; Line 300
	test	BYTE PTR _plr_gfx_flag, 128		; 00000080H
	mov	DWORD PTR _plr[esi+21700], eax
	jne	SHORT $L85089
; Line 301
	or	BYTE PTR _plr_gfx_flag, 128		; 00000080H
; Line 302
	mov	ecx, OFFSET FLAT:??_C@_02FGOD@DT?$AA@	; `string'
	call	@GetPlrGFXSize@4
	mov	DWORD PTR _plr_dframe_size, eax
$L85089:
; Line 304
	mov	ecx, DWORD PTR _plr_dframe_size
	call	@DiabloAllocPtr@4
; Line 306
	test	BYTE PTR _plr_gfx_bflag, 1
	mov	DWORD PTR _plr[esi+21708], eax
	jne	SHORT $L85090
; Line 307
	or	BYTE PTR _plr_gfx_bflag, 1
; Line 308
	mov	ecx, OFFSET FLAT:??_C@_02NMNE@BL?$AA@	; `string'
	call	@GetPlrGFXSize@4
	mov	DWORD PTR _plr_bframe_size, eax
$L85090:
; Line 310
	mov	ecx, DWORD PTR _plr_bframe_size
	call	@DiabloAllocPtr@4
; Line 312
	and	DWORD PTR _plr[esi+536], 0
	mov	DWORD PTR _plr[esi+21712], eax
	pop	esi
; Line 313
	ret	0
@InitPlrGFXMem@4 ENDP
_TEXT	ENDS
EXTRN	@WCloseFile@4:NEAR
EXTRN	@WGetFileSize@8:NEAR
EXTRN	@WOpenFile@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @GetPlrGFXSize@4
_TEXT	SEGMENT
_szCel$ = -16
_prefix$ = -36
_pszName$ = -292
_file$ = -12
_size$ = -20
_result$ = -4
@GetPlrGFXSize@4 PROC NEAR				; COMDAT
; _szCel$ = ecx
; Line 316
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
; Line 324
	xor	ebx, ebx
	push	esi
	push	edi
	mov	DWORD PTR _szCel$[ebp], ecx
	mov	DWORD PTR _result$[ebp], ebx
	mov	DWORD PTR -8+[ebp], OFFSET FLAT:_ClassStrTbl
$L85102:
; Line 329
	mov	edi, OFFSET FLAT:_ArmourChar
$L85105:
; Line 330
	mov	esi, OFFSET FLAT:_WepChar
$L85108:
; Line 331
	movsx	eax, BYTE PTR [esi]
	push	eax
	movsx	eax, BYTE PTR [edi]
	push	eax
	movsx	eax, BYTE PTR _CharChar[ebx]
	push	eax
	lea	eax, DWORD PTR _prefix$[ebp]
	push	OFFSET FLAT:??_C@_06CAGC@?$CFc?$CFc?$CFc?$AA@ ; `string'
	push	eax
	call	_sprintf
; Line 332
	push	DWORD PTR _szCel$[ebp]
	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	eax, DWORD PTR -8+[ebp]
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR _pszName$[ebp]
	push	OFFSET FLAT:??_C@_0BG@MGOD@PlrGFX?2?$CFs?2?$CFs?2?$CFs?$CFs?4CL2?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 44					; 0000002cH
; Line 333
	lea	edx, DWORD PTR _file$[ebp]
	lea	ecx, DWORD PTR _pszName$[ebp]
	push	1
	call	@WOpenFile@12
	test	eax, eax
	je	SHORT $L85109
; Line 334
	mov	ecx, DWORD PTR _file$[ebp]
	xor	edx, edx
	call	@WGetFileSize@8
; Line 335
	mov	ecx, DWORD PTR _file$[ebp]
	mov	DWORD PTR _size$[ebp], eax
	call	@WCloseFile@4
; Line 336
	mov	eax, DWORD PTR _size$[ebp]
	cmp	DWORD PTR _result$[ebp], eax
	ja	SHORT $L85109
; Line 337
	mov	DWORD PTR _result$[ebp], eax
$L85109:
; Line 330
	inc	esi
	cmp	BYTE PTR [esi], 0
	jne	SHORT $L85108
	inc	edi
	cmp	BYTE PTR [edi], 0
	jne	$L85105
	add	DWORD PTR -8+[ebp], 4
	inc	ebx
	cmp	ebx, 3
	jb	$L85102
; Line 344
	mov	eax, DWORD PTR _result$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 345
	leave
	ret	0
@GetPlrGFXSize@4 ENDP
_TEXT	ENDS
PUBLIC	@FreePlayerGFX@4
PUBLIC	??_C@_0CB@DDBI@FreePlayerGFX?3?5illegal?5player?5?$CFd@ ; `string'
EXTRN	@mem_free_dbg@4:NEAR
;	COMDAT ??_C@_0CB@DDBI@FreePlayerGFX?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT
??_C@_0CB@DDBI@FreePlayerGFX?3?5illegal?5player?5?$CFd@ DB 'FreePlayerGFX'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @FreePlayerGFX@4
_TEXT	SEGMENT
@FreePlayerGFX@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 348
	push	esi
	mov	esi, ecx
; Line 351
	cmp	esi, 4
	push	edi
	jb	SHORT $L85118
; Line 352
	push	esi
	push	OFFSET FLAT:??_C@_0CB@DDBI@FreePlayerGFX?3?5illegal?5player?5?$CFd@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85118:
; Line 355
	imul	esi, 21720				; 000054d8H
; Line 356
	xor	edi, edi
	lea	eax, DWORD PTR _plr[esi+21680]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
; Line 357
	call	@mem_free_dbg@4
; Line 358
	lea	eax, DWORD PTR _plr[esi+21684]
	mov	ecx, DWORD PTR [eax]
; Line 359
	mov	DWORD PTR [eax], edi
; Line 360
	call	@mem_free_dbg@4
; Line 361
	lea	eax, DWORD PTR _plr[esi+21688]
	mov	ecx, DWORD PTR [eax]
; Line 362
	mov	DWORD PTR [eax], edi
; Line 363
	call	@mem_free_dbg@4
; Line 364
	lea	eax, DWORD PTR _plr[esi+21704]
	mov	ecx, DWORD PTR [eax]
; Line 365
	mov	DWORD PTR [eax], edi
; Line 366
	call	@mem_free_dbg@4
; Line 367
	lea	eax, DWORD PTR _plr[esi+21692]
	mov	ecx, DWORD PTR [eax]
; Line 368
	mov	DWORD PTR [eax], edi
; Line 369
	call	@mem_free_dbg@4
; Line 370
	lea	eax, DWORD PTR _plr[esi+21696]
	mov	ecx, DWORD PTR [eax]
; Line 371
	mov	DWORD PTR [eax], edi
; Line 372
	call	@mem_free_dbg@4
; Line 373
	lea	eax, DWORD PTR _plr[esi+21700]
	mov	ecx, DWORD PTR [eax]
; Line 374
	mov	DWORD PTR [eax], edi
; Line 375
	call	@mem_free_dbg@4
; Line 376
	lea	eax, DWORD PTR _plr[esi+21708]
	mov	ecx, DWORD PTR [eax]
; Line 377
	mov	DWORD PTR [eax], edi
; Line 378
	call	@mem_free_dbg@4
; Line 379
	lea	eax, DWORD PTR _plr[esi+21712]
	mov	ecx, DWORD PTR [eax]
; Line 380
	mov	DWORD PTR [eax], edi
; Line 381
	call	@mem_free_dbg@4
; Line 382
	mov	DWORD PTR _plr[esi+536], edi
	pop	edi
	pop	esi
; Line 383
	ret	0
@FreePlayerGFX@4 ENDP
_TEXT	ENDS
PUBLIC	@NewPlrAnim@20
PUBLIC	??_C@_0BO@FKPI@NewPlrAnim?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BO@FKPI@NewPlrAnim?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@FKPI@NewPlrAnim?3?5illegal?5player?5?$CFd?$AA@ DB 'NewPlrAnim: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @NewPlrAnim@20
_TEXT	SEGMENT
_numFrames$ = 8
_Delay$ = 12
_width$ = 16
@NewPlrAnim@20 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _Peq$ = edx
; Line 386
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
; Line 387
	cmp	edi, 4
	jb	SHORT $L85141
; Line 388
	push	edi
	push	OFFSET FLAT:??_C@_0BO@FKPI@NewPlrAnim?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85141:
; Line 391
	mov	eax, edi
; Line 392
	mov	ecx, DWORD PTR _numFrames$[esp+4]
	imul	eax, 21720				; 000054d8H
	pop	edi
	mov	DWORD PTR _plr[eax+136], ecx
; Line 395
	mov	ecx, DWORD PTR _Delay$[esp]
	and	DWORD PTR _plr[eax+132], 0
	mov	DWORD PTR _plr[eax+128], ecx
; Line 396
	mov	ecx, DWORD PTR _width$[esp]
	mov	DWORD PTR _plr[eax+124], esi
	mov	DWORD PTR _plr[eax+144], ecx
; Line 397
	add	ecx, -64				; ffffffc0H
	sar	ecx, 1
	mov	DWORD PTR _plr[eax+140], 1
	mov	DWORD PTR _plr[eax+148], ecx
	pop	esi
; Line 398
	ret	12					; 0000000cH
@NewPlrAnim@20 ENDP
_TEXT	ENDS
PUBLIC	@ClearPlrPVars@4
PUBLIC	??_C@_0CB@NAMN@ClearPlrPVars?3?5illegal?5player?5?$CFd@ ; `string'
;	COMDAT ??_C@_0CB@NAMN@ClearPlrPVars?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT
??_C@_0CB@NAMN@ClearPlrPVars?3?5illegal?5player?5?$CFd@ DB 'ClearPlrPVars'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @ClearPlrPVars@4
_TEXT	SEGMENT
@ClearPlrPVars@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 401
	push	esi
	mov	esi, ecx
; Line 402
	cmp	esi, 4
	jb	SHORT $L85147
; Line 403
	push	esi
	push	OFFSET FLAT:??_C@_0CB@NAMN@ClearPlrPVars?3?5illegal?5player?5?$CFd@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85147:
; Line 406
	mov	eax, esi
	xor	ecx, ecx
	imul	eax, 21720				; 000054d8H
	pop	esi
	mov	DWORD PTR _plr[eax+468], ecx
; Line 407
	mov	DWORD PTR _plr[eax+472], ecx
; Line 408
	mov	DWORD PTR _plr[eax+476], ecx
; Line 409
	mov	DWORD PTR _plr[eax+480], ecx
; Line 410
	mov	DWORD PTR _plr[eax+484], ecx
; Line 411
	mov	DWORD PTR _plr[eax+488], ecx
; Line 412
	mov	DWORD PTR _plr[eax+492], ecx
; Line 413
	mov	DWORD PTR _plr[eax+496], ecx
; Line 414
	ret	0
@ClearPlrPVars@4 ENDP
_TEXT	ENDS
PUBLIC	@SetPlrAnims@4
PUBLIC	??_C@_0BP@KMIG@SetPlrAnims?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BP@KMIG@SetPlrAnims?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@KMIG@SetPlrAnims?3?5illegal?5player?5?$CFd?$AA@ DB 'SetPlrAnims'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SetPlrAnims@4
_TEXT	SEGMENT
@SetPlrAnims@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 417
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
; Line 420
	cmp	esi, 4
	push	edi
	jb	SHORT $L85155
; Line 421
	push	esi
	push	OFFSET FLAT:??_C@_0BP@KMIG@SetPlrAnims?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85155:
; Line 424
	mov	eax, esi
; Line 434
	mov	bl, BYTE PTR _leveltype
	imul	eax, 21720				; 000054d8H
	push	96					; 00000060H
	mov	edi, 128				; 00000080H
	movsx	esi, BYTE PTR _plr[eax+352]
; Line 435
	mov	ecx, esi
	pop	edx
	imul	ecx, 11					; 0000000bH
	test	bl, bl
	mov	DWORD PTR _plr[eax+576], edx
	mov	DWORD PTR _plr[eax+616], edx
	mov	DWORD PTR _plr[eax+656], edi
	mov	DWORD PTR _plr[eax+808], edx
	mov	DWORD PTR _plr[eax+764], edx
	mov	DWORD PTR _plr[eax+848], edi
	mov	DWORD PTR _plr[eax+888], edx
	jne	SHORT $L85157
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+7]
	mov	DWORD PTR _plr[eax+572], ebp
; Line 436
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+8]
	mov	DWORD PTR _plr[eax+612], ebp
; Line 437
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+4]
	mov	DWORD PTR _plr[eax+844], ebp
; Line 438
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+5]
	mov	DWORD PTR _plr[eax+760], ebp
; Line 439
	jmp	SHORT $L85158
$L85157:
; Line 440
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx]
	mov	DWORD PTR _plr[eax+572], ebp
; Line 441
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+2]
	mov	DWORD PTR _plr[eax+612], ebp
; Line 442
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+1]
	mov	DWORD PTR _plr[eax+652], ebp
; Line 443
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+6]
	mov	DWORD PTR _plr[eax+804], ebp
; Line 444
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+5]
	mov	DWORD PTR _plr[eax+760], ebp
; Line 445
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+4]
	mov	DWORD PTR _plr[eax+844], ebp
; Line 446
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+3]
	mov	DWORD PTR _plr[eax+884], ebp
; Line 447
	movsx	ebp, BYTE PTR _PlrGFXAnimLens[ecx+9]
	mov	DWORD PTR _plr[eax+660], ebp
$L85158:
; Line 449
	movsx	ecx, BYTE PTR _PlrGFXAnimLens[ecx+10]
	mov	DWORD PTR _plr[eax+768], ecx
; Line 451
	mov	ecx, DWORD PTR _plr[eax+120]
	and	ecx, 15					; 0000000fH
; Line 452
	test	esi, esi
	jne	SHORT $L85159
; Line 453
	cmp	ecx, 4
	jne	SHORT $L85160
; Line 454
	test	bl, bl
	je	SHORT $L85161
; Line 455
	mov	DWORD PTR _plr[eax+572], 8
$L85161:
; Line 457
	mov	DWORD PTR _plr[eax+656], edx
$L87027:
; Line 458
	mov	DWORD PTR _plr[eax+660], 11		; 0000000bH
; Line 459
	jmp	$L85181
$L85160:
	cmp	ecx, 5
	jne	SHORT $L85170
; Line 460
	mov	DWORD PTR _plr[eax+652], 20		; 00000014H
; Line 461
	mov	DWORD PTR _plr[eax+660], 10		; 0000000aH
; Line 466
	jmp	$L85181
$L85159:
	cmp	esi, 1
	jne	SHORT $L85167
; Line 467
	cmp	ecx, 5
	jne	SHORT $L85168
; Line 468
	mov	DWORD PTR _plr[eax+652], 22		; 00000016H
; Line 469
	mov	DWORD PTR _plr[eax+660], 13		; 0000000dH
; Line 470
	jmp	$L85181
$L85168:
	cmp	ecx, 4
	jne	SHORT $L85170
; Line 471
	mov	DWORD PTR _plr[eax+652], 12		; 0000000cH
; Line 472
	mov	DWORD PTR _plr[eax+660], 7
; Line 473
	jmp	SHORT $L85181
$L85170:
	cmp	ecx, 8
	jne	SHORT $L85181
; Line 474
	mov	DWORD PTR _plr[eax+652], 16		; 00000010H
; Line 477
	jmp	SHORT $L87027
$L85167:
	cmp	esi, 2
	jne	SHORT $L85181
; Line 479
	test	ecx, ecx
	mov	DWORD PTR _plr[eax+764], edi
	jne	SHORT $L85175
; Line 480
	mov	DWORD PTR _plr[eax+652], 20		; 00000014H
; Line 481
	jmp	SHORT $L85181
$L85175:
	cmp	ecx, 1
	jne	SHORT $L85177
; Line 482
	mov	DWORD PTR _plr[eax+660], 9
; Line 483
	jmp	SHORT $L85181
$L85177:
	cmp	ecx, 4
	jne	SHORT $L85179
; Line 484
	mov	DWORD PTR _plr[eax+652], 20		; 00000014H
; Line 486
	jmp	SHORT $L87026
$L85179:
	cmp	ecx, 5
	jne	SHORT $L85181
; Line 487
	mov	DWORD PTR _plr[eax+652], 24		; 00000018H
$L87026:
; Line 488
	mov	DWORD PTR _plr[eax+660], 16		; 00000010H
$L85181:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 491
	ret	0
@SetPlrAnims@4 ENDP
_TEXT	ENDS
PUBLIC	@ClearPlrRVars@4
; Function compile flags: /Ogsy
;	COMDAT @ClearPlrRVars@4
_TEXT	SEGMENT
@ClearPlrRVars@4 PROC NEAR				; COMDAT
; _p$ = ecx
; Line 496
	xor	eax, eax
	mov	BYTE PTR [ecx+21629], al
; Line 497
	mov	BYTE PTR [ecx+21630], al
; Line 498
	mov	BYTE PTR [ecx+21631], al
; Line 499
	mov	WORD PTR [ecx+21632], ax
; Line 500
	mov	WORD PTR [ecx+21634], ax
; Line 501
	mov	WORD PTR [ecx+21636], ax
; Line 502
	mov	WORD PTR [ecx+21638], ax
; Line 503
	mov	WORD PTR [ecx+21640], ax
; Line 504
	mov	WORD PTR [ecx+21642], ax
; Line 505
	mov	WORD PTR [ecx+21644], ax
; Line 506
	mov	WORD PTR [ecx+21646], ax
; Line 507
	mov	DWORD PTR [ecx+21652], eax
; Line 508
	mov	DWORD PTR [ecx+21656], eax
; Line 509
	mov	DWORD PTR [ecx+21660], eax
; Line 510
	mov	DWORD PTR [ecx+21664], eax
; Line 511
	mov	DWORD PTR [ecx+21668], eax
; Line 512
	mov	DWORD PTR [ecx+21672], eax
; Line 513
	mov	DWORD PTR [ecx+21676], eax
; Line 514
	ret	0
@ClearPlrRVars@4 ENDP
_TEXT	ENDS
PUBLIC	@InitDungMsgs@4
PUBLIC	@CreatePlayer@8
PUBLIC	??_C@_0CA@KEKO@CreatePlayer?3?5illegal?5player?5?$CFd?$AA@ ; `string'
EXTRN	@CreatePlrItems@4:NEAR
EXTRN	@SetRndSeed@4:NEAR
EXTRN	__imp__GetTickCount@0:NEAR
;	COMDAT ??_C@_0CA@KEKO@CreatePlayer?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@KEKO@CreatePlayer?3?5illegal?5player?5?$CFd?$AA@ DB 'CreatePlay'
	DB	'er: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @CreatePlayer@8
_TEXT	SEGMENT
_pnum$ = -4
_c$ = -8
@CreatePlayer@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _c$ = dl
; Line 518
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 523
	mov	esi, edi
	mov	bl, dl
	imul	esi, 21720				; 000054d8H
	mov	BYTE PTR _c$[esp+20], bl
	mov	DWORD PTR _pnum$[esp+20], edi
	lea	ecx, DWORD PTR _plr[esi]
	call	@ClearPlrRVars@4
; Line 524
	call	DWORD PTR __imp__GetTickCount@0
	mov	ecx, eax
	call	@SetRndSeed@4
; Line 526
	cmp	edi, 4
	jb	SHORT $L85195
; Line 527
	push	edi
	push	OFFSET FLAT:??_C@_0CA@KEKO@CreatePlayer?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85195:
; Line 531
	movsx	ecx, bl
	shl	ecx, 2
	mov	BYTE PTR _plr[esi+352], bl
; Line 532
	xor	ebx, ebx
	mov	al, BYTE PTR _StrengthTbl[ecx]
	cmp	al, bl
	jge	SHORT $L85197
; Line 533
	xor	al, al
$L85197:
; Line 535
	movsx	eax, al
	mov	DWORD PTR _plr[esi+356], eax
; Line 536
	mov	DWORD PTR _plr[esi+360], eax
; Line 538
	mov	al, BYTE PTR _MagicTbl[ecx]
; Line 539
	cmp	al, bl
	jge	SHORT $L85198
; Line 540
	xor	al, al
$L85198:
; Line 542
	movsx	eax, al
	mov	DWORD PTR _plr[esi+364], eax
; Line 543
	mov	DWORD PTR _plr[esi+368], eax
; Line 545
	mov	al, BYTE PTR _DexterityTbl[ecx]
; Line 546
	cmp	al, bl
	jge	SHORT $L85199
; Line 547
	xor	al, al
$L85199:
; Line 549
	movsx	eax, al
	mov	DWORD PTR _plr[esi+372], eax
; Line 550
	mov	DWORD PTR _plr[esi+376], eax
; Line 552
	mov	al, BYTE PTR _VitalityTbl[ecx]
; Line 553
	cmp	al, bl
	jge	SHORT $L85200
; Line 554
	xor	al, al
$L85200:
; Line 565
	cmp	BYTE PTR _c$[esp+20], 1
	push	ebp
	movsx	edi, al
	mov	DWORD PTR _plr[esi+380], edi
	mov	DWORD PTR _plr[esi+384], edi
	mov	DWORD PTR _plr[esi+388], ebx
	mov	BYTE PTR _plr[esi+21624], bl
	mov	BYTE PTR _plr[esi+21625], bl
	mov	BYTE PTR _plr[esi+21626], bl
	mov	DWORD PTR _plr[esi+21648], ebx
	jne	SHORT $L85201
; Line 566
	mov	eax, DWORD PTR _plr[esi+372]
	mov	ebp, 200				; 000000c8H
	movsx	edx, BYTE PTR _plr[esi+440]
	add	eax, DWORD PTR _plr[esi+356]
	imul	eax, edx
; Line 567
	jmp	SHORT $L87044
$L85201:
; Line 568
	movsx	eax, BYTE PTR _plr[esi+440]
	imul	eax, DWORD PTR _plr[esi+356]
	push	100					; 00000064H
	pop	ebp
$L87044:
	cdq
	idiv	ebp
; Line 574
	mov	dl, BYTE PTR _c$[esp+24]
	pop	ebp
	mov	DWORD PTR _plr[esi+392], eax
	mov	eax, DWORD PTR _ToBlkTbl[ecx]
	mov	DWORD PTR _plr[esi+396], eax
	lea	eax, DWORD PTR [edi+10]
	shl	eax, 6
	cmp	dl, bl
	mov	DWORD PTR _plr[esi+408], eax
	jne	SHORT $L85203
; Line 575
	add	eax, eax
	mov	DWORD PTR _plr[esi+408], eax
$L85203:
; Line 577
	cmp	dl, 1
	jne	SHORT $L85204
; Line 578
	mov	eax, DWORD PTR _plr[esi+408]
	mov	ecx, eax
	sar	ecx, 1
	add	ecx, eax
	mov	DWORD PTR _plr[esi+408], ecx
$L85204:
; Line 581
	mov	eax, DWORD PTR _plr[esi+408]
; Line 582
	mov	DWORD PTR _plr[esi+412], eax
; Line 583
	mov	DWORD PTR _plr[esi+400], eax
; Line 584
	mov	DWORD PTR _plr[esi+404], eax
; Line 586
	mov	eax, DWORD PTR _plr[esi+364]
	shl	eax, 6
; Line 587
	cmp	dl, 2
	mov	DWORD PTR _plr[esi+428], eax
	jne	SHORT $L85205
; Line 588
	add	eax, eax
	mov	DWORD PTR _plr[esi+428], eax
$L85205:
; Line 590
	cmp	dl, 1
	jne	SHORT $L85206
; Line 591
	mov	eax, DWORD PTR _plr[esi+428]
	mov	ecx, eax
	sar	ecx, 1
	add	ecx, eax
	mov	DWORD PTR _plr[esi+428], ecx
$L85206:
; Line 594
	mov	eax, DWORD PTR _plr[esi+428]
; Line 611
	cmp	dl, bl
	mov	DWORD PTR _plr[esi+432], eax
	mov	DWORD PTR _plr[esi+420], eax
	mov	DWORD PTR _plr[esi+424], eax
	mov	eax, DWORD PTR _ExpLvlsTbl+4
	mov	BYTE PTR _plr[esi+440], 1
	mov	BYTE PTR _plr[esi+441], 1
	mov	DWORD PTR _plr[esi+444], ebx
	mov	DWORD PTR _plr[esi+448], ebx
	mov	DWORD PTR _plr[esi+452], eax
	mov	BYTE PTR _plr[esi+456], bl
	mov	BYTE PTR _plr[esi+457], bl
	mov	BYTE PTR _plr[esi+458], bl
	mov	BYTE PTR _plr[esi+459], bl
	mov	BYTE PTR _plr[esi+318], 10		; 0000000aH
	mov	DWORD PTR _plr[esi+464], ebx
	jne	SHORT $L85207
; Line 612
	mov	DWORD PTR _plr[esi+272], 33554432	; 02000000H
; Line 613
	jmp	SHORT $L87046
$L85207:
	cmp	dl, 1
	jne	SHORT $L85210
; Line 614
	mov	DWORD PTR _plr[esi+272], 134217728	; 08000000H
$L87046:
	mov	DWORD PTR _plr[esi+276], ebx
$L85215:
; Line 622
	mov	DWORD PTR _plr[esi+264], ebx
$L87045:
; Line 626
	push	16					; 00000010H
	lea	edi, DWORD PTR _plr[esi+193]
	pop	ecx
	xor	eax, eax
	mov	DWORD PTR _plr[esi+268], ebx
	rep stosd
; Line 631
	cmp	BYTE PTR _plr[esi+352], 2
	mov	BYTE PTR _plr[esi+288], bl
	jne	SHORT $L85220
; Line 632
	mov	BYTE PTR _plr[esi+194], 2
$L85220:
; Line 637
	lea	edi, DWORD PTR _plr[esi+292]
; Line 638
	or	eax, -1
	stosd
	stosd
; Line 641
	cmp	dl, bl
	stosd
	jne	SHORT $L85224
; Line 642
	mov	DWORD PTR _plr[esi+120], 3
; Line 643
	jmp	SHORT $L85228
$L85210:
; Line 615
	cmp	dl, 2
	jne	SHORT $L85215
; Line 616
	mov	DWORD PTR _plr[esi+272], 67108864	; 04000000H
	mov	DWORD PTR _plr[esi+276], ebx
; Line 620
	mov	DWORD PTR _plr[esi+264], 1
; Line 621
	jmp	SHORT $L87045
$L85224:
; Line 643
	cmp	dl, 1
	jne	SHORT $L85226
; Line 644
	mov	DWORD PTR _plr[esi+120], 4
; Line 645
	jmp	SHORT $L85228
$L85226:
	cmp	dl, 2
	jne	SHORT $L85228
; Line 646
	mov	DWORD PTR _plr[esi+120], 8
$L85228:
; Line 649
	lea	edi, DWORD PTR _plr[esi+500]
; Line 650
	xor	eax, eax
	stosd
	stosd
	stosd
	stosd
	stosb
; Line 653
	lea	edi, DWORD PTR _plr[esi+517]
; Line 654
	xor	eax, eax
	stosd
; Line 663
	mov	ecx, DWORD PTR _pnum$[esp+20]
	stosd
	stosw
	mov	BYTE PTR _plr[esi+319], bl
	mov	BYTE PTR _plr[esi+21624], bl
	mov	BYTE PTR _plr[esi+21626], bl
	mov	BYTE PTR _plr[esi+21627], bl
	mov	BYTE PTR _plr[esi+21628], bl
	call	@InitDungMsgs@4
; Line 664
	mov	ecx, DWORD PTR _pnum$[esp+20]
	call	@CreatePlrItems@4
; Line 665
	xor	ecx, ecx
	pop	edi
	pop	esi
	pop	ebx
; Line 666
	add	esp, 8
	jmp	@SetRndSeed@4
@CreatePlayer@8 ENDP
_TEXT	ENDS
PUBLIC	@CalcStatDiff@4
; Function compile flags: /Ogsy
;	COMDAT @CalcStatDiff@4
_TEXT	SEGMENT
@CalcStatDiff@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 672
	imul	ecx, 21720				; 000054d8H
	movsx	edx, BYTE PTR _plr[ecx+352]
; Line 680
	shl	edx, 4
	mov	eax, DWORD PTR _MaxStats[edx+12]
	sub	eax, DWORD PTR _plr[ecx+384]
	sub	eax, DWORD PTR _plr[ecx+376]
	sub	eax, DWORD PTR _plr[ecx+368]
	sub	eax, DWORD PTR _plr[ecx+360]
	add	eax, DWORD PTR _MaxStats[edx+8]
	add	eax, DWORD PTR _MaxStats[edx+4]
	add	eax, DWORD PTR _MaxStats[edx]
; Line 681
	ret	0
@CalcStatDiff@4 ENDP
_TEXT	ENDS
PUBLIC	@NextPlrLevel@4
PUBLIC	??_C@_0CA@FHMN@NextPlrLevel?3?5illegal?5player?5?$CFd?$AA@ ; `string'
EXTRN	_gbMaxPlayers:BYTE
EXTRN	_drawhpflag:DWORD
EXTRN	_drawmanaflag:DWORD
;	COMDAT ??_C@_0CA@FHMN@NextPlrLevel?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@FHMN@NextPlrLevel?3?5illegal?5player?5?$CFd?$AA@ DB 'NextPlrLev'
	DB	'el: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @NextPlrLevel@4
_TEXT	SEGMENT
@NextPlrLevel@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 684
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
; Line 688
	cmp	edi, 4
	jb	SHORT $L85247
; Line 689
	push	edi
	push	OFFSET FLAT:??_C@_0CA@FHMN@NextPlrLevel?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85247:
; Line 692
	mov	esi, edi
; Line 697
	mov	ecx, edi
	imul	esi, 21720				; 000054d8H
	lea	eax, DWORD PTR _plr[esi+440]
	inc	BYTE PTR [eax]
	mov	bl, BYTE PTR [eax]
	inc	BYTE PTR _plr[esi+441]
	call	@CalcStatDiff@4
	cmp	eax, 5
	jge	SHORT $L85249
; Line 698
	mov	ecx, edi
	call	@CalcStatDiff@4
	mov	DWORD PTR _plr[esi+388], eax
; Line 699
	jmp	SHORT $L85250
$L85249:
; Line 700
	add	DWORD PTR _plr[esi+388], 5
$L85250:
; Line 703
	movsx	eax, bl
; Line 707
	xor	edx, edx
; Line 708
	mov	bl, BYTE PTR _gbMaxPlayers
	mov	eax, DWORD PTR _ExpLvlsTbl[eax*4]
	mov	DWORD PTR _plr[esi+452], eax
	mov	al, BYTE PTR _plr[esi+352]
	cmp	al, 2
	setne	dl
	dec	edx
	and	edx, -64				; ffffffc0H
	add	edx, 128				; 00000080H
	cmp	bl, 1
	jne	SHORT $L85251
; Line 709
	inc	edx
$L85251:
; Line 711
	lea	ecx, DWORD PTR _plr[esi+412]
; Line 716
	mov	ebp, DWORD PTR _myplr
	add	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _plr[esi+408], ecx
	lea	ecx, DWORD PTR _plr[esi+404]
	add	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [ecx]
	cmp	edi, ebp
	mov	DWORD PTR _plr[esi+400], ecx
	jne	SHORT $L85252
; Line 717
	mov	DWORD PTR _drawhpflag, 1
$L85252:
; Line 720
	neg	al
	sbb	eax, eax
	and	eax, 64					; 00000040H
	add	eax, 64					; 00000040H
; Line 721
	cmp	bl, 1
	jne	SHORT $L85253
; Line 722
	inc	eax
$L85253:
; Line 724
	lea	ecx, DWORD PTR _plr[esi+432]
; Line 725
	lea	edx, DWORD PTR _plr[esi+424]
	add	DWORD PTR [ecx], eax
	add	DWORD PTR [edx], eax
; Line 727
	test	BYTE PTR _plr[esi+21587], 8
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	jne	SHORT $L85254
; Line 728
	mov	DWORD PTR _plr[esi+428], ecx
; Line 729
	mov	DWORD PTR _plr[esi+420], edx
$L85254:
; Line 732
	cmp	edi, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	jne	SHORT $L85255
; Line 733
	mov	DWORD PTR _drawmanaflag, 1
$L85255:
; Line 735
	ret	0
@NextPlrLevel@4 ENDP
_TEXT	ENDS
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	@AddPlrExperience@12
PUBLIC	??_C@_0CE@PPMI@AddPlrExperience?3?5illegal?5player@ ; `string'
EXTRN	__ftol:NEAR
EXTRN	__fltused:NEAR
EXTRN	@NetSendCmdParam1@12:NEAR
;	COMDAT ??_C@_0CE@PPMI@AddPlrExperience?3?5illegal?5player@
_DATA	SEGMENT
??_C@_0CE@PPMI@AddPlrExperience?3?5illegal?5player@ DB 'AddPlrExperience:'
	DB	' illegal player %d', 00H			; `string'
_DATA	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogsy
CONST	ENDS
;	COMDAT @AddPlrExperience@12
_TEXT	SEGMENT
_pnum$ = -12
_lvl$ = -8
_exp$ = 8
@AddPlrExperience@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _lvl$ = edx
; Line 738
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 741
	mov	eax, DWORD PTR _myplr
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _lvl$[ebp], edx
	cmp	esi, eax
	mov	DWORD PTR _pnum$[ebp], esi
	jne	$L85262
; Line 745
	cmp	eax, 4
	jb	SHORT $L85269
; Line 746
	push	eax
	push	OFFSET FLAT:??_C@_0CE@PPMI@AddPlrExperience?3?5illegal?5player@ ; `string'
	call	_TermMsg
	mov	eax, DWORD PTR _myplr
	pop	ecx
	pop	ecx
$L85269:
; Line 749
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+408], 0
	jle	$L85262
; Line 754
	imul	esi, 21720				; 000054d8H
	fild	DWORD PTR _lvl$[ebp]
	push	ebx
	push	edi
	mov	bl, BYTE PTR _plr[esi+440]
	movsx	eax, bl
	mov	DWORD PTR -4+[ebp], eax
	fisub	DWORD PTR -4+[ebp]
	fmul	QWORD PTR __real@3fb999999999999a
	fadd	QWORD PTR __real@3ff0000000000000
	fimul	DWORD PTR _exp$[ebp]
	call	__ftol
	mov	edi, eax
; Line 755
	test	edi, edi
	jge	SHORT $L85273
; Line 756
	xor	edi, edi
$L85273:
; Line 760
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L85277
; Line 761
	test	bl, bl
	jge	SHORT $L87057
	xor	ecx, ecx
	jmp	SHORT $L85275
$L87057:
	mov	ecx, DWORD PTR -4+[ebp]
; Line 762
	cmp	ecx, 50					; 00000032H
	jl	SHORT $L85275
; Line 763
	push	50					; 00000032H
	pop	ecx
$L85275:
; Line 766
	mov	eax, DWORD PTR _ExpLvlsTbl[ecx*4]
	push	20					; 00000014H
	cdq
	pop	ebx
	idiv	ebx
	cmp	edi, eax
	jl	SHORT $L85276
; Line 767
	mov	edi, eax
$L85276:
; Line 770
	imul	ecx, 200				; 000000c8H
; Line 771
	cmp	edi, ecx
	jl	SHORT $L85277
; Line 772
	mov	edi, ecx
$L85277:
; Line 776
	lea	eax, DWORD PTR _plr[esi+444]
; Line 777
	mov	ecx, 2000000000				; 77359400H
	add	DWORD PTR [eax], edi
	mov	edx, DWORD PTR [eax]
	pop	edi
	cmp	edx, ecx
	pop	ebx
	jbe	SHORT $L85279
; Line 778
	mov	DWORD PTR [eax], ecx
$L85279:
; Line 781
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR _ExpLvlsTbl+196
	jl	SHORT $L85280
; Line 782
	mov	BYTE PTR _plr[esi+440], 50		; 00000032H
; Line 783
	jmp	SHORT $L85262
$L85280:
; Line 787
	xor	ecx, ecx
; Line 788
	cmp	eax, DWORD PTR _ExpLvlsTbl
	jl	SHORT $L85283
$L85282:
; Line 789
	inc	ecx
	cmp	eax, DWORD PTR _ExpLvlsTbl[ecx*4]
	jge	SHORT $L85282
$L85283:
; Line 791
	cmp	ecx, DWORD PTR -4+[ebp]
	je	SHORT $L85287
; Line 792
	sub	ecx, DWORD PTR -4+[ebp]
	test	ecx, ecx
	jle	SHORT $L85287
	mov	esi, ecx
$L85285:
; Line 793
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@NextPlrLevel@4
	dec	esi
	jne	SHORT $L85285
$L85287:
; Line 797
	mov	eax, DWORD PTR _myplr
	mov	dl, 51					; 00000033H
	imul	eax, 21720				; 000054d8H
	xor	ecx, ecx
	movsx	ax, BYTE PTR _plr[eax+440]
	push	eax
	call	@NetSendCmdParam1@12
$L85262:
	pop	esi
; Line 798
	leave
	ret	4
@AddPlrExperience@12 ENDP
_TEXT	ENDS
PUBLIC	@AddPlrMonstExper@12
; Function compile flags: /Ogsy
;	COMDAT @AddPlrMonstExper@12
_TEXT	SEGMENT
_pmask$ = 8
@AddPlrMonstExper@12 PROC NEAR				; COMDAT
; _lvl$ = ecx
; _exp$ = edx
; Line 801
	push	ebx
	push	esi
; Line 805
	movsx	esi, BYTE PTR _pmask$[esp+4]
	push	edi
	mov	ebx, ecx
	xor	edi, edi
	mov	eax, edx
	xor	ecx, ecx
$L85297:
; Line 806
	xor	edx, edx
	inc	edx
	shl	edx, cl
	test	edx, esi
	je	SHORT $L85298
; Line 807
	inc	edi
$L85298:
; Line 805
	inc	ecx
	cmp	ecx, 4
	jl	SHORT $L85297
; Line 811
	test	edi, edi
	je	SHORT $L85301
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	inc	edx
	shl	edx, cl
	test	edx, esi
	je	SHORT $L85301
; Line 812
	cdq
	idiv	edi
	mov	edx, ebx
	push	eax
	call	@AddPlrExperience@12
$L85301:
	pop	edi
	pop	esi
	pop	ebx
; Line 814
	ret	4
@AddPlrMonstExper@12 ENDP
_TEXT	ENDS
PUBLIC	@PosOkPlayer@12
PUBLIC	@InitPlayer@8
PUBLIC	??_C@_0BO@NDKH@InitPlayer?3?5illegal?5player?5?$CFd?$AA@ ; `string'
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
EXTRN	_leveldebug:DWORD
EXTRN	@AddLight@12:NEAR
EXTRN	@AddVision@16:NEAR
EXTRN	@random@8:NEAR
EXTRN	_currlevel:BYTE
EXTRN	_ScrollInfo:BYTE
;	COMDAT ??_C@_0BO@NDKH@InitPlayer?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@NDKH@InitPlayer?3?5illegal?5player?5?$CFd?$AA@ DB 'InitPlayer: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @InitPlayer@8
_TEXT	SEGMENT
_FirstTime$ = -4
@InitPlayer@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _FirstTime$ = edx
; Line 817
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	ebx, ecx
; Line 820
	cmp	ebx, 4
	push	esi
	mov	DWORD PTR _FirstTime$[ebp], edx
	jb	SHORT $L85309
; Line 821
	push	ebx
	push	OFFSET FLAT:??_C@_0BO@NDKH@InitPlayer?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85309:
; Line 824
	mov	esi, ebx
	push	edi
	imul	esi, 21720				; 000054d8H
	lea	edi, DWORD PTR _plr[esi]
	mov	ecx, edi
	call	@ClearPlrRVars@4
; Line 826
	xor	ecx, ecx
	cmp	DWORD PTR _FirstTime$[ebp], ecx
	je	SHORT $L85311
; Line 832
	mov	eax, DWORD PTR _plr[esi+120]
	or	DWORD PTR _plr[esi+180], -1
	or	DWORD PTR _plr[esi+188], -1
	or	DWORD PTR _plr[esi+164], -1
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _plr[esi+184], 4
	cmp	al, 4
	mov	BYTE PTR _plr[esi+168], 4
	jne	SHORT $L85312
; Line 833
	mov	DWORD PTR _plr[esi+312], 1
; Line 834
	jmp	SHORT $L85313
$L85312:
; Line 835
	mov	DWORD PTR _plr[esi+312], ecx
$L85313:
; Line 837
	and	BYTE PTR _plr[esi+21628], 0
$L85311:
; Line 840
	movzx	eax, BYTE PTR _currlevel
	cmp	DWORD PTR _plr[esi+52], eax
	je	SHORT $L85315
	cmp	DWORD PTR _leveldebug, ecx
	je	$L85314
$L85315:
; Line 842
	mov	ecx, ebx
	call	@SetPlrAnims@4
; Line 844
	xor	eax, eax
; Line 849
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi+96], eax
	mov	DWORD PTR _plr[esi+100], eax
	mov	DWORD PTR _plr[esi+104], eax
	mov	DWORD PTR _plr[esi+108], eax
	call	@ClearPlrPVars@4
; Line 851
	test	DWORD PTR _plr[esi+408], -64		; ffffffc0H
; Line 853
	mov	ecx, ebx
	jle	SHORT $L85316
	push	DWORD PTR _plr[esi+576]
	and	DWORD PTR [edi], 0
	mov	edx, DWORD PTR _plr[esi+540]
	lea	edi, DWORD PTR _plr[esi+572]
	push	3
	push	DWORD PTR [edi]
	call	@NewPlrAnim@20
; Line 854
	mov	edx, DWORD PTR [edi]
	mov	cl, 2
	dec	edx
	call	@random@8
	inc	eax
; Line 855
	mov	cl, 2
	push	3
	mov	DWORD PTR _plr[esi+140], eax
	pop	edx
	call	@random@8
	mov	DWORD PTR _plr[esi+132], eax
; Line 856
	jmp	SHORT $L85317
$L85316:
; Line 858
	push	DWORD PTR _plr[esi+848]
	mov	edx, DWORD PTR _plr[esi+812]
	mov	DWORD PTR [edi], 8
	push	1
	push	DWORD PTR _plr[esi+844]
	call	@NewPlrAnim@20
; Line 859
	mov	eax, DWORD PTR _plr[esi+136]
	lea	ecx, DWORD PTR [eax-1]
; Line 860
	add	eax, eax
	mov	DWORD PTR _plr[esi+140], ecx
	mov	DWORD PTR _plr[esi+496], eax
$L85317:
; Line 863
	xor	edi, edi
; Line 866
	cmp	ebx, DWORD PTR _myplr
	mov	DWORD PTR _plr[esi+112], edi
	mov	DWORD PTR _plr[esi+152], edi
	jne	SHORT $L85318
; Line 867
	cmp	DWORD PTR _FirstTime$[ebp], edi
	je	SHORT $L85320
	cmp	BYTE PTR _currlevel, 0
	je	SHORT $L85319
$L85320:
; Line 868
	mov	eax, DWORD PTR _ViewX
	mov	DWORD PTR _plr[esi+56], eax
; Line 869
	mov	eax, DWORD PTR _ViewY
	mov	DWORD PTR _plr[esi+60], eax
$L85319:
; Line 871
	mov	eax, DWORD PTR _plr[esi+56]
	mov	DWORD PTR _plr[esi+72], eax
; Line 872
	mov	eax, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _plr[esi+76], eax
; Line 873
	jmp	SHORT $L85321
$L85318:
; Line 874
	mov	eax, DWORD PTR _plr[esi+56]
	mov	DWORD PTR _plr[esi+72], eax
; Line 875
	mov	eax, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _plr[esi+76], eax
$L85322:
; Line 876
	mov	eax, DWORD PTR _plryoff2[edi*4]
	mov	edx, DWORD PTR _plrxoff2[edi*4]
	add	eax, DWORD PTR _plr[esi+60]
	add	edx, DWORD PTR _plr[esi+56]
	mov	ecx, ebx
	push	eax
	call	@PosOkPlayer@12
	test	eax, eax
	jne	SHORT $L85324
	inc	edi
	cmp	edi, 8
	jb	SHORT $L85322
$L85324:
; Line 878
	mov	eax, edi
	shl	eax, 2
	mov	ecx, DWORD PTR _plrxoff2[eax]
; Line 879
	mov	eax, DWORD PTR _plryoff2[eax]
	add	DWORD PTR _plr[esi+56], ecx
	add	DWORD PTR _plr[esi+60], eax
$L85321:
; Line 882
	mov	ecx, DWORD PTR _plr[esi+56]
; Line 883
	mov	edx, DWORD PTR _plr[esi+60]
; Line 884
	or	BYTE PTR _plr[esi+4], -1
; Line 885
	or	DWORD PTR _plr[esi+32], -1
; Line 887
	cmp	ebx, DWORD PTR _myplr
	mov	DWORD PTR _plr[esi+64], ecx
	mov	DWORD PTR _plr[esi+68], edx
	jne	SHORT $L85325
; Line 888
	movsx	eax, BYTE PTR _plr[esi+318]
	push	eax
	call	@AddLight@12
	mov	DWORD PTR _plr[esi+156], eax
; Line 889
	jmp	SHORT $L85326
$L85325:
; Line 890
	or	DWORD PTR _plr[esi+156], -1
$L85326:
; Line 892
	xor	eax, eax
	cmp	ebx, DWORD PTR _myplr
	mov	edx, DWORD PTR _plr[esi+60]
	mov	ecx, DWORD PTR _plr[esi+56]
	sete	al
	push	eax
	movsx	eax, BYTE PTR _plr[esi+318]
	push	eax
	call	@AddVision@16
	mov	DWORD PTR _plr[esi+160], eax
	xor	ecx, ecx
$L85314:
; Line 895
	mov	al, BYTE PTR _plr[esi+352]
	pop	edi
	test	al, al
	jne	SHORT $L85327
; Line 896
	mov	DWORD PTR _plr[esi+272], 33554432	; 02000000H
; Line 897
	jmp	SHORT $L87079
$L85327:
	cmp	al, 1
	jne	SHORT $L85329
; Line 898
	mov	DWORD PTR _plr[esi+272], 134217728	; 08000000H
; Line 899
	jmp	SHORT $L87079
$L85329:
	cmp	al, 2
	jne	SHORT $L85331
; Line 900
	mov	DWORD PTR _plr[esi+272], 67108864	; 04000000H
$L87079:
	mov	DWORD PTR _plr[esi+276], ecx
$L85331:
; Line 915
	movsx	eax, BYTE PTR _plr[esi+440]
; Line 916
	and	BYTE PTR _plr[esi+317], 0
; Line 918
	cmp	ebx, DWORD PTR _myplr
	mov	eax, DWORD PTR _ExpLvlsTbl[eax*4]
	mov	DWORD PTR _plr[esi+452], eax
	pop	esi
	pop	ebx
	jne	SHORT $L85332
; Line 919
	mov	DWORD PTR _deathdelay, ecx
; Line 920
	mov	DWORD PTR _deathflag, ecx
; Line 921
	mov	DWORD PTR _ScrollInfo, ecx
; Line 922
	mov	DWORD PTR _ScrollInfo+4, ecx
; Line 923
	mov	DWORD PTR _ScrollInfo+16, ecx
$L85332:
; Line 925
	leave
	ret	0
@InitPlayer@8 ENDP
_TEXT	ENDS
PUBLIC	_InitMultiView
; Function compile flags: /Ogsy
;	COMDAT _InitMultiView
_TEXT	SEGMENT
_InitMultiView PROC NEAR				; COMDAT
; Line 930
	mov	eax, DWORD PTR _myplr
	cmp	eax, 4
	jb	SHORT $L85335
; Line 931
	push	eax
	push	OFFSET FLAT:??_C@_0BO@NDKH@InitPlayer?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85335:
; Line 934
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+56]
; Line 935
	mov	eax, DWORD PTR _plr[eax+60]
	mov	DWORD PTR _ViewX, ecx
	mov	DWORD PTR _ViewY, eax
; Line 936
	ret	0
_InitMultiView ENDP
_TEXT	ENDS
PUBLIC	@InitPlayerLoc@8
EXTRN	_dArch:BYTE
EXTRN	@gendung_get_dpiece_num_from_coord@8:NEAR
EXTRN	_dpiece_defs_map_1:BYTE
EXTRN	_dPiece:BYTE
EXTRN	_nSolidTable:BYTE
; Function compile flags: /Ogsy
;	COMDAT @InitPlayerLoc@8
_TEXT	SEGMENT
_bitflags$ = -8
_flag$ = -12
_i$ = -4
@InitPlayerLoc@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _flag$ = edx
; Line 939
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 944
	cmp	esi, 4
	mov	DWORD PTR _flag$[ebp], edx
	jb	SHORT $L85347
; Line 945
	push	esi
	push	OFFSET FLAT:??_C@_0BO@NDKH@InitPlayer?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85347:
; Line 948
	imul	esi, 21720				; 000054d8H
; Line 950
	and	DWORD PTR _bitflags$[ebp], 0
	mov	edi, DWORD PTR _plr[esi+56]
	mov	ebx, DWORD PTR _plr[esi+60]
	dec	edi
	inc	ebx
; Line 951
	mov	edx, ebx
	mov	ecx, edi
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
	add	eax, OFFSET FLAT:_dpiece_defs_map_1
; Line 953
	mov	DWORD PTR _i$[ebp], 2
$L85348:
; Line 954
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR [eax+ecx*2]
	or	DWORD PTR _bitflags$[ebp], ecx
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jl	SHORT $L85348
; Line 957
	imul	edi, 112				; 00000070H
	add	edi, ebx
	push	1
	mov	eax, DWORD PTR _dPiece[edi*4]
	movsx	ecx, BYTE PTR _dArch[edi]
	movzx	eax, BYTE PTR _nSolidTable[eax]
	or	eax, ecx
	or	eax, DWORD PTR _bitflags$[ebp]
	pop	eax
	je	SHORT $L85351
; Line 958
	mov	DWORD PTR _plr[esi+152], eax
; Line 959
	jmp	SHORT $L85352
$L85351:
; Line 960
	and	DWORD PTR _plr[esi+152], 0
$L85352:
; Line 963
	cmp	DWORD PTR _flag$[ebp], eax
	jne	$L85354
	cmp	DWORD PTR _plr[esi+152], eax
	jne	$L85354
; Line 968
	mov	edi, DWORD PTR _plr[esi+60]
	mov	ebx, DWORD PTR _plr[esi+56]
; Line 969
	and	DWORD PTR _bitflags$[ebp], 0
	inc	edi
	inc	edi
; Line 970
	mov	ecx, ebx
	mov	edx, edi
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
	add	eax, OFFSET FLAT:_dpiece_defs_map_1
; Line 972
	mov	DWORD PTR _i$[ebp], 2
$L85355:
; Line 973
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR [eax+ecx*2]
	or	DWORD PTR _bitflags$[ebp], ecx
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jl	SHORT $L85355
; Line 976
	imul	ebx, 112				; 00000070H
	movsx	eax, BYTE PTR _dArch[ebx+edi]
	or	eax, DWORD PTR _bitflags$[ebp]
	jne	SHORT $L85354
; Line 980
	mov	edi, DWORD PTR _plr[esi+56]
; Line 981
	mov	ebx, DWORD PTR _plr[esi+60]
; Line 982
	and	DWORD PTR _bitflags$[ebp], 0
	dec	edi
	dec	edi
	inc	ebx
; Line 983
	mov	edx, ebx
	mov	ecx, edi
	call	@gendung_get_dpiece_num_from_coord@8
	shl	eax, 5
	add	eax, OFFSET FLAT:_dpiece_defs_map_1
; Line 985
	mov	DWORD PTR _i$[ebp], 2
$L85359:
; Line 986
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR [eax+ecx*2]
	or	DWORD PTR _bitflags$[ebp], ecx
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jl	SHORT $L85359
; Line 989
	imul	edi, 112				; 00000070H
	movsx	eax, BYTE PTR _dArch[edi+ebx]
	or	eax, DWORD PTR _bitflags$[ebp]
	je	SHORT $L85354
; Line 990
	mov	DWORD PTR _plr[esi+152], 2
$L85354:
	pop	edi
	pop	esi
	pop	ebx
; Line 992
	leave
	ret	0
@InitPlayerLoc@8 ENDP
_TEXT	ENDS
PUBLIC	@SolidLoc@8
; Function compile flags: /Ogsy
;	COMDAT @SolidLoc@8
_TEXT	SEGMENT
@SolidLoc@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 996
	test	ecx, ecx
	jl	SHORT $L85369
	test	edx, edx
	jl	SHORT $L85369
	cmp	ecx, 112				; 00000070H
	jge	SHORT $L85369
	cmp	edx, 112				; 00000070H
	jge	SHORT $L85369
; Line 1000
	imul	ecx, 112				; 00000070H
	add	ecx, edx
	mov	eax, DWORD PTR _dPiece[ecx*4]
	movzx	eax, BYTE PTR _nSolidTable[eax]
; Line 1001
	ret	0
$L85369:
; Line 997
	xor	eax, eax
; Line 1001
	ret	0
@SolidLoc@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JNBF@PlrDirOK?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PlrDirOK@8
EXTRN	_dFlags:BYTE
EXTRN	_offset_x:BYTE
EXTRN	_offset_y:BYTE
;	COMDAT ??_C@_0BM@JNBF@PlrDirOK?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BM@JNBF@PlrDirOK?3?5illegal?5player?5?$CFd?$AA@ DB 'PlrDirOK: ille'
	DB	'gal player %d', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PlrDirOK@8
_TEXT	SEGMENT
_pnum$ = -4
@PlrDirOK@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _dir$ = edx
; Line 1004
	push	ecx
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
; Line 1008
	cmp	esi, 4
	push	edi
	mov	ebx, edx
	mov	DWORD PTR _pnum$[esp+20], esi
	jb	SHORT $L85379
; Line 1009
	push	esi
	push	OFFSET FLAT:??_C@_0BM@JNBF@PlrDirOK?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85379:
; Line 1012
	mov	eax, esi
	mov	esi, DWORD PTR _offset_x[ebx*4]
	imul	eax, 21720				; 000054d8H
; Line 1013
	mov	edi, DWORD PTR _offset_y[ebx*4]
	add	esi, DWORD PTR _plr[eax+56]
	add	edi, DWORD PTR _plr[eax+60]
; Line 1015
	test	esi, esi
	jl	SHORT $L85382
	mov	eax, esi
	imul	eax, 112				; 00000070H
	lea	ebp, DWORD PTR [eax+edi]
	cmp	DWORD PTR _dPiece[ebp*4], 0
	je	SHORT $L85382
	mov	ecx, DWORD PTR _pnum$[esp+20]
	push	edi
	mov	edx, esi
	call	@PosOkPlayer@12
	test	eax, eax
	je	SHORT $L85382
; Line 1019
	xor	eax, eax
	inc	eax
; Line 1020
	cmp	ebx, 6
	jne	SHORT $L87100
; Line 1021
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, esi
	call	@SolidLoc@8
	test	eax, eax
	jne	SHORT $L85382
	test	BYTE PTR _dFlags[ebp+1], 32		; 00000020H
; Line 1024
	jmp	SHORT $L87102
$L87100:
	cmp	ebx, 2
	jne	SHORT $L85374
; Line 1025
	lea	ecx, DWORD PTR [esi+1]
	mov	edx, edi
	call	@SolidLoc@8
	test	eax, eax
	jne	SHORT $L85382
	test	BYTE PTR _dFlags[ebp+112], 32		; 00000020H
$L87102:
	jne	SHORT $L85382
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85374
$L85382:
; Line 1016
	xor	eax, eax
$L85374:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1029
	pop	ecx
	ret	0
@PlrDirOK@8 ENDP
_TEXT	ENDS
PUBLIC	@PlrClrTrans@8
EXTRN	_dung_map:BYTE
EXTRN	_TransList:BYTE
; Function compile flags: /Ogsy
;	COMDAT @PlrClrTrans@8
_TEXT	SEGMENT
@PlrClrTrans@8 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1032
	push	ebx
	push	esi
; Line 1035
	lea	esi, DWORD PTR [edx-1]
	lea	ebx, DWORD PTR [edx+1]
	cmp	esi, ebx
	jg	SHORT $L85394
	push	ebp
	push	edi
	lea	edx, DWORD PTR [ecx-1]
	lea	edi, DWORD PTR [ecx+1]
$L85392:
; Line 1036
	cmp	edx, edi
	jg	SHORT $L85393
	mov	eax, edx
	imul	eax, 112				; 00000070H
	lea	ecx, DWORD PTR _dung_map[eax+esi]
	mov	eax, edi
	sub	eax, edx
	inc	eax
$L85395:
; Line 1037
	movsx	ebp, BYTE PTR [ecx]
	add	ecx, 112				; 00000070H
	and	BYTE PTR _TransList[ebp], 0
	dec	eax
	jne	SHORT $L85395
$L85393:
; Line 1035
	inc	esi
	cmp	esi, ebx
	jle	SHORT $L85392
	pop	edi
	pop	ebp
$L85394:
	pop	esi
	pop	ebx
; Line 1040
	ret	0
@PlrClrTrans@8 ENDP
_TEXT	ENDS
PUBLIC	@PlrDoTrans@8
; Function compile flags: /Ogsy
;	COMDAT @PlrDoTrans@8
_TEXT	SEGMENT
@PlrDoTrans@8 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1043
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1046
	mov	al, BYTE PTR _leveltype
	push	edi
	cmp	al, 1
	je	SHORT $L85405
	cmp	al, 2
	je	SHORT $L85405
; Line 1047
	mov	BYTE PTR _TransList+1, 1
; Line 1048
	jmp	SHORT $L85409
$L85405:
; Line 1049
	lea	edi, DWORD PTR [edx-1]
	inc	edx
	cmp	edi, edx
	mov	DWORD PTR -8+[ebp], edx
	jg	SHORT $L85409
	push	ebx
	lea	ebx, DWORD PTR [ecx-1]
; Line 1050
	inc	ecx
	push	esi
	mov	DWORD PTR -4+[ebp], ecx
$L85407:
	cmp	ebx, DWORD PTR -4+[ebp]
	jg	SHORT $L85408
	mov	eax, ebx
	imul	eax, 112				; 00000070H
	add	eax, edi
	lea	ecx, DWORD PTR _dung_map[eax]
	lea	esi, DWORD PTR _dPiece[eax*4]
	mov	eax, DWORD PTR -4+[ebp]
	sub	eax, ebx
	inc	eax
$L85410:
; Line 1051
	mov	edx, DWORD PTR [esi]
	cmp	BYTE PTR _nSolidTable[edx], 0
	jne	SHORT $L85411
	mov	dl, BYTE PTR [ecx]
	test	dl, dl
	je	SHORT $L85411
; Line 1052
	movsx	edx, dl
	mov	BYTE PTR _TransList[edx], 1
$L85411:
	add	esi, 448				; 000001c0H
	add	ecx, 112				; 00000070H
	dec	eax
	jne	SHORT $L85410
$L85408:
; Line 1049
	inc	edi
	cmp	edi, DWORD PTR -8+[ebp]
	jle	SHORT $L85407
	pop	esi
	pop	ebx
$L85409:
	pop	edi
; Line 1057
	leave
	ret	0
@PlrDoTrans@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@MCIA@SetPlayerOld?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@SetPlayerOld@4
;	COMDAT ??_C@_0CA@MCIA@SetPlayerOld?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@MCIA@SetPlayerOld?3?5illegal?5player?5?$CFd?$AA@ DB 'SetPlayerO'
	DB	'ld: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SetPlayerOld@4
_TEXT	SEGMENT
@SetPlayerOld@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1060
	push	esi
	mov	esi, ecx
; Line 1061
	cmp	esi, 4
	jb	SHORT $L85418
; Line 1062
	push	esi
	push	OFFSET FLAT:??_C@_0CA@MCIA@SetPlayerOld?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85418:
; Line 1065
	mov	eax, esi
	pop	esi
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+56]
	mov	DWORD PTR _plr[eax+88], ecx
; Line 1066
	mov	ecx, DWORD PTR _plr[eax+60]
	mov	DWORD PTR _plr[eax+92], ecx
; Line 1067
	ret	0
@SetPlayerOld@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@LNFC@FixPlayerLocation?3?5illegal?5playe@ ; `string'
PUBLIC	@FixPlayerLocation@8
;	COMDAT ??_C@_0CF@LNFC@FixPlayerLocation?3?5illegal?5playe@
_DATA	SEGMENT
??_C@_0CF@LNFC@FixPlayerLocation?3?5illegal?5playe@ DB 'FixPlayerLocation'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @FixPlayerLocation@8
_TEXT	SEGMENT
@FixPlayerLocation@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _dir$ = edx
; Line 1070
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	mov	ebx, edx
; Line 1071
	cmp	edi, 4
	jb	SHORT $L85426
; Line 1072
	push	edi
	push	OFFSET FLAT:??_C@_0CF@LNFC@FixPlayerLocation?3?5illegal?5playe@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85426:
; Line 1075
	mov	esi, edi
; Line 1079
	xor	ebp, ebp
	imul	esi, 21720				; 000054d8H
; Line 1081
	xor	edx, edx
	mov	ecx, DWORD PTR _plr[esi+60]
	mov	eax, DWORD PTR _plr[esi+56]
	mov	DWORD PTR _plr[esi+68], ecx
	mov	DWORD PTR _plr[esi+76], ecx
	mov	ecx, edi
	mov	DWORD PTR _plr[esi+64], eax
	mov	DWORD PTR _plr[esi+72], eax
	mov	DWORD PTR _plr[esi+96], ebp
	mov	DWORD PTR _plr[esi+100], ebp
	call	@InitPlayerLoc@8
; Line 1083
	cmp	edi, DWORD PTR _myplr
	mov	DWORD PTR _plr[esi+112], ebx
	jne	SHORT $L85428
; Line 1087
	mov	eax, DWORD PTR _plr[esi+56]
	mov	DWORD PTR _ScrollInfo, ebp
	mov	DWORD PTR _ViewX, eax
; Line 1088
	mov	eax, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _ScrollInfo+4, ebp
	mov	DWORD PTR _ScrollInfo+16, ebp
	mov	DWORD PTR _ViewY, eax
$L85428:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1090
	ret	0
@FixPlayerLocation@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@HGPM@StartStand?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@StartStand@8
PUBLIC	@FixPlrWalkTags@4
PUBLIC	@SyncPlrKill@8
EXTRN	_dPlayer:BYTE
;	COMDAT ??_C@_0BO@HGPM@StartStand?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@HGPM@StartStand?3?5illegal?5player?5?$CFd?$AA@ DB 'StartStand: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartStand@8
_TEXT	SEGMENT
@StartStand@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _dir$ = edx
; Line 1093
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
; Line 1094
	cmp	ebx, 4
	mov	edi, edx
	jb	SHORT $L85435
; Line 1095
	push	ebx
	push	OFFSET FLAT:??_C@_0BO@HGPM@StartStand?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85435:
; Line 1098
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+317], 0
	je	SHORT $L85438
	cmp	DWORD PTR _plr[esi+408], 0
	jne	SHORT $L85438
	cmp	ebx, DWORD PTR _myplr
	jne	SHORT $L85438
	pop	edi
; Line 1110
	mov	ecx, ebx
	pop	esi
	or	edx, -1
	pop	ebx
	jmp	@SyncPlrKill@8
$L85438:
; Line 1099
	xor	edx, edx
	inc	edx
	test	BYTE PTR _plr[esi+536], dl
	jne	SHORT $L85439
; Line 1100
	mov	ecx, ebx
	call	@LoadPlrGFX@8
$L85439:
; Line 1103
	mov	eax, ebx
	push	DWORD PTR _plr[esi+576]
	imul	eax, 5430				; 00001536H
	push	3
	add	eax, edi
	push	DWORD PTR _plr[esi+572]
	mov	ecx, ebx
	mov	edx, DWORD PTR _plr[eax*4+540]
	call	@NewPlrAnim@20
; Line 1104
	and	DWORD PTR _plr[esi], 0
; Line 1105
	mov	edx, edi
	mov	ecx, ebx
	call	@FixPlayerLocation@8
; Line 1106
	mov	ecx, ebx
	call	@FixPlrWalkTags@4
; Line 1107
	mov	ecx, DWORD PTR _plr[esi+56]
	mov	al, bl
	inc	al
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _plr[esi+60]
	pop	edi
	pop	esi
	mov	BYTE PTR _dPlayer[ecx+edx], al
; Line 1108
	mov	ecx, ebx
	pop	ebx
	jmp	@SetPlayerOld@4
@StartStand@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@OJNO@StartWalkStand?3?5illegal?5player?5?$CF@ ; `string'
PUBLIC	@StartWalkStand@4
;	COMDAT ??_C@_0CC@OJNO@StartWalkStand?3?5illegal?5player?5?$CF@
_DATA	SEGMENT
??_C@_0CC@OJNO@StartWalkStand?3?5illegal?5player?5?$CF@ DB 'StartWalkStan'
	DB	'd: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartWalkStand@4
_TEXT	SEGMENT
@StartWalkStand@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1115
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1116
	cmp	edi, 4
	jb	SHORT $L85445
; Line 1117
	push	edi
	push	OFFSET FLAT:??_C@_0CC@OJNO@StartWalkStand?3?5illegal?5player?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85445:
; Line 1120
	mov	esi, edi
	xor	ebx, ebx
	imul	esi, 21720				; 000054d8H
; Line 1126
	xor	edx, edx
	mov	ecx, edi
	mov	eax, DWORD PTR _plr[esi+56]
	mov	DWORD PTR _plr[esi], ebx
	mov	DWORD PTR _plr[esi+64], eax
	mov	eax, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _plr[esi+68], eax
	mov	DWORD PTR _plr[esi+96], ebx
	mov	DWORD PTR _plr[esi+100], ebx
	call	@InitPlayerLoc@8
; Line 1128
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L85447
; Line 1132
	mov	eax, DWORD PTR _plr[esi+56]
	mov	DWORD PTR _ScrollInfo, ebx
	mov	DWORD PTR _ViewX, eax
; Line 1133
	mov	eax, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _ScrollInfo+4, ebx
	mov	DWORD PTR _ScrollInfo+16, ebx
	mov	DWORD PTR _ViewY, eax
$L85447:
	pop	edi
	pop	esi
	pop	ebx
; Line 1135
	ret	0
@StartWalkStand@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@HOPO@PM_ChangeLightOff?3?5illegal?5playe@ ; `string'
PUBLIC	@PM_ChangeLightOff@4
EXTRN	_LightList:BYTE
EXTRN	@ChangeLightOff@12:NEAR
EXTRN	_abs:NEAR
;	COMDAT ??_C@_0CF@HOPO@PM_ChangeLightOff?3?5illegal?5playe@
_DATA	SEGMENT
??_C@_0CF@HOPO@PM_ChangeLightOff?3?5illegal?5playe@ DB 'PM_ChangeLightOff'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_ChangeLightOff@4
_TEXT	SEGMENT
_x$ = -4
_y$ = -8
_ly$ = -12
@PM_ChangeLightOff@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1138
	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
; Line 1145
	cmp	esi, 4
	push	edi
	jb	SHORT $L85461
; Line 1146
	push	esi
	push	OFFSET FLAT:??_C@_0CF@HOPO@PM_ChangeLightOff?3?5illegal?5playe@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85461:
; Line 1149
	imul	esi, 21720				; 000054d8H
; Line 1150
	or	ebx, -1
	mov	eax, DWORD PTR _plr[esi+156]
; Line 1151
	mov	edx, DWORD PTR _plr[esi+100]
	mov	edi, DWORD PTR _plr[esi+96]
	imul	eax, 52					; 00000034H
	add	edx, edx
	add	eax, OFFSET FLAT:_LightList
	lea	ecx, DWORD PTR [edi+edx]
; Line 1152
	sub	edx, edi
; Line 1153
	test	ecx, ecx
	jge	SHORT $L85463
; Line 1154
	mov	edi, ebx
; Line 1155
	neg	ecx
; Line 1156
	jmp	SHORT $L85464
$L85463:
; Line 1157
	xor	edi, edi
	inc	edi
$L85464:
; Line 1159
	test	edx, edx
	jge	SHORT $L85465
; Line 1160
	neg	edx
; Line 1161
	jmp	SHORT $L85466
$L85465:
; Line 1162
	xor	ebx, ebx
	inc	ebx
$L85466:
; Line 1166
	sar	edx, 3
	imul	edx, ebx
	sar	ecx, 3
	imul	ecx, edi
	mov	ebx, edx
; Line 1168
	mov	edx, DWORD PTR [eax+4]
	shl	edx, 3
	mov	DWORD PTR _y$[esp+28], ebx
	mov	edi, ecx
	mov	ecx, DWORD PTR [eax]
	add	ebx, edx
; Line 1170
	mov	ebp, DWORD PTR [eax+44]
	mov	DWORD PTR _ly$[esp+28], ebx
	mov	ebx, DWORD PTR [eax+40]
	mov	DWORD PTR _x$[esp+28], edi
	shl	ecx, 3
	add	edi, ecx
	add	ebx, ecx
; Line 1172
	sub	edi, ebx
	add	ebp, edx
	push	edi
	call	_abs
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L85467
	mov	eax, DWORD PTR _ly$[esp+28]
	sub	eax, ebp
	push	eax
	call	_abs
	cmp	eax, 3
	pop	ecx
	jl	SHORT $L85450
$L85467:
; Line 1175
	push	DWORD PTR _y$[esp+28]
	mov	edx, DWORD PTR _x$[esp+32]
	mov	ecx, DWORD PTR _plr[esi+156]
	call	@ChangeLightOff@12
$L85450:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1176
	add	esp, 12					; 0000000cH
	ret	0
@PM_ChangeLightOff@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@BOJA@PM_ChangeOffset?3?5illegal?5player?5@ ; `string'
PUBLIC	@PM_ChangeOffset@4
;	COMDAT ??_C@_0CD@BOJA@PM_ChangeOffset?3?5illegal?5player?5@
_DATA	SEGMENT
??_C@_0CD@BOJA@PM_ChangeOffset?3?5illegal?5player?5@ DB 'PM_ChangeOffset:'
	DB	' illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_ChangeOffset@4
_TEXT	SEGMENT
_pnum$ = -8
@PM_ChangeOffset@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1179
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	mov	esi, ecx
; Line 1182
	cmp	esi, 4
	push	edi
	mov	DWORD PTR _pnum$[ebp], esi
	jb	SHORT $L85474
; Line 1183
	push	esi
	push	OFFSET FLAT:??_C@_0CD@BOJA@PM_ChangeOffset?3?5illegal?5player?5@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85474:
; Line 1186
	mov	eax, esi
	push	ebx
	imul	eax, 21720				; 000054d8H
; Line 1187
	mov	edi, DWORD PTR _plr[eax+488]
; Line 1190
	mov	ebx, DWORD PTR _plr[eax+104]
	mov	ecx, edi
	lea	esi, DWORD PTR _plr[eax+492]
	add	edi, ebx
; Line 1191
	mov	ebx, DWORD PTR _plr[eax+108]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR -4+[ebp], edi
	mov	DWORD PTR _plr[eax+488], edi
	mov	edi, DWORD PTR [esi]
	inc	DWORD PTR _plr[eax+496]
	add	edi, ebx
	mov	DWORD PTR [esi], edi
; Line 1192
	mov	esi, DWORD PTR -4+[ebp]
	sar	esi, 8
; Line 1193
	sar	edi, 8
	mov	DWORD PTR _plr[eax+96], esi
	mov	DWORD PTR _plr[eax+100], edi
; Line 1195
	mov	eax, DWORD PTR _pnum$[ebp]
	pop	ebx
	sar	ecx, 8
	sar	edx, 8
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L85476
	cmp	DWORD PTR _ScrollInfo+16, 0
	je	SHORT $L85476
; Line 1196
	sub	ecx, esi
; Line 1197
	sub	edx, edi
	add	DWORD PTR _ScrollInfo, ecx
	add	DWORD PTR _ScrollInfo+4, edx
$L85476:
; Line 1200
	mov	ecx, eax
	call	@PM_ChangeLightOff@4
	pop	edi
	pop	esi
; Line 1201
	leave
	ret	0
@PM_ChangeOffset@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@FNGD@StartWalk?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@StartWalk@28
EXTRN	_zoomflag:DWORD
;	COMDAT ??_C@_0BN@FNGD@StartWalk?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@FNGD@StartWalk?3?5illegal?5player?5?$CFd?$AA@ DB 'StartWalk: il'
	DB	'legal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartWalk@28
_TEXT	SEGMENT
_pnum$ = -4
_xvel$ = -8
_yvel$ = 8
_xadd$ = 12
_yadd$ = 16
_EndDir$ = 20
_sdir$ = 24
@StartWalk@28 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _xvel$ = edx
; Line 1204
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1207
	cmp	edi, 4
	mov	DWORD PTR _xvel$[ebp], edx
	mov	DWORD PTR _pnum$[ebp], edi
	jb	SHORT $L85495
; Line 1208
	push	edi
	push	OFFSET FLAT:??_C@_0BN@FNGD@StartWalk?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85495:
; Line 1211
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+317], 0
	je	SHORT $L85497
	cmp	DWORD PTR _plr[esi+408], 0
	jne	SHORT $L85497
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L85497
; Line 1212
	or	edx, -1
	mov	ecx, edi
	call	@SyncPlrKill@8
; Line 1213
	jmp	$L85509
$L85497:
; Line 1216
	mov	ecx, edi
	call	@SetPlayerOld@4
; Line 1218
	mov	edi, DWORD PTR _plr[esi+56]
; Line 1219
	mov	ebx, DWORD PTR _plr[esi+60]
; Line 1221
	mov	edx, DWORD PTR _EndDir$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	add	edi, DWORD PTR _xadd$[ebp]
	add	ebx, DWORD PTR _yadd$[ebp]
	call	@PlrDirOK@8
	test	eax, eax
	je	$L85509
; Line 1228
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	DWORD PTR _plr[esi+64], edi
	cmp	ecx, DWORD PTR _myplr
	mov	DWORD PTR _plr[esi+68], ebx
	jne	SHORT $L85499
; Line 1229
	mov	eax, DWORD PTR _plr[esi+56]
	sub	eax, DWORD PTR _ViewX
	mov	DWORD PTR _ScrollInfo+8, eax
; Line 1230
	mov	eax, DWORD PTR _plr[esi+60]
	sub	eax, DWORD PTR _ViewY
	mov	DWORD PTR _ScrollInfo+12, eax
$L85499:
; Line 1233
	imul	edi, 112				; 00000070H
	or	al, -1
; Line 1234
	mov	DWORD PTR _plr[esi], 1
	sub	al, cl
	mov	BYTE PTR _dPlayer[edi+ebx], al
; Line 1235
	mov	eax, DWORD PTR _xvel$[ebp]
; Line 1241
	mov	edi, DWORD PTR _EndDir$[ebp]
	mov	DWORD PTR _plr[esi+104], eax
	mov	eax, DWORD PTR _yvel$[ebp]
	xor	ebx, ebx
; Line 1243
	test	BYTE PTR _plr[esi+536], 2
	mov	DWORD PTR _plr[esi+108], eax
	mov	eax, DWORD PTR _xadd$[ebp]
	mov	DWORD PTR _plr[esi+468], eax
	mov	eax, DWORD PTR _yadd$[ebp]
	mov	DWORD PTR _plr[esi+96], ebx
	mov	DWORD PTR _plr[esi+100], ebx
	mov	DWORD PTR _plr[esi+472], eax
	mov	DWORD PTR _plr[esi+476], edi
	jne	SHORT $L85500
; Line 1244
	push	2
	pop	edx
	call	@LoadPlrGFX@8
	mov	ecx, DWORD PTR _pnum$[ebp]
$L85500:
; Line 1247
	mov	eax, ecx
	push	DWORD PTR _plr[esi+616]
	imul	eax, 5430				; 00001536H
	push	ebx
	add	eax, edi
	push	DWORD PTR _plr[esi+612]
	mov	edx, DWORD PTR _plr[eax*4+580]
	call	@NewPlrAnim@20
; Line 1249
	mov	DWORD PTR _plr[esi+112], edi
; Line 1250
	mov	DWORD PTR _plr[esi+488], ebx
; Line 1251
	mov	DWORD PTR _plr[esi+492], ebx
; Line 1252
	mov	DWORD PTR _plr[esi+496], ebx
; Line 1254
	mov	esi, DWORD PTR _pnum$[ebp]
	xor	edx, edx
	mov	ecx, esi
	call	@InitPlayerLoc@8
; Line 1256
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L85509
; Line 1260
	cmp	DWORD PTR _zoomflag, ebx
; Line 1261
	push	DWORD PTR _ScrollInfo+8
	je	SHORT $L85502
	call	_abs
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L85508
	push	DWORD PTR _ScrollInfo+12
	call	_abs
	cmp	eax, 3
; Line 1266
	jmp	SHORT $L87140
$L85502:
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L85508
	push	DWORD PTR _ScrollInfo+12
	call	_abs
	cmp	eax, 2
$L87140:
	pop	ecx
	jge	SHORT $L85508
; Line 1269
	mov	eax, DWORD PTR _sdir$[ebp]
	mov	DWORD PTR _ScrollInfo+16, eax
	jmp	SHORT $L85509
$L85508:
; Line 1267
	mov	DWORD PTR _ScrollInfo+16, ebx
$L85509:
	pop	edi
	pop	esi
	pop	ebx
; Line 1271
	leave
	ret	20					; 00000014H
@StartWalk@28 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JBBF@StartWalk2?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@StartWalk2@36
EXTRN	@ChangeLightXY@12:NEAR
;	COMDAT ??_C@_0BO@JBBF@StartWalk2?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@JBBF@StartWalk2?3?5illegal?5player?5?$CFd?$AA@ DB 'StartWalk2: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartWalk2@36
_TEXT	SEGMENT
_pnum$ = -4
_xvel$ = -8
_yvel$ = 8
_xoff$ = 12
_yoff$ = 16
_xadd$ = 20
_yadd$ = 24
_EndDir$ = 28
_sdir$ = 32
_px$ = 20
@StartWalk2@36 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _xvel$ = edx
; Line 1275
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1278
	cmp	edi, 4
	mov	DWORD PTR _xvel$[ebp], edx
	mov	DWORD PTR _pnum$[ebp], edi
	jb	SHORT $L85532
; Line 1279
	push	edi
	push	OFFSET FLAT:??_C@_0BO@JBBF@StartWalk2?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85532:
; Line 1282
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+317], 0
	je	SHORT $L85534
	cmp	DWORD PTR _plr[esi+408], 0
	jne	SHORT $L85534
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L85534
; Line 1283
	or	edx, -1
	mov	ecx, edi
	call	@SyncPlrKill@8
; Line 1284
	jmp	$L85548
$L85534:
; Line 1287
	mov	ecx, edi
	call	@SetPlayerOld@4
; Line 1288
	mov	ebx, DWORD PTR _plr[esi+56]
; Line 1289
	mov	edi, DWORD PTR _plr[esi+60]
	add	ebx, DWORD PTR _xadd$[ebp]
; Line 1291
	mov	edx, DWORD PTR _EndDir$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	add	edi, DWORD PTR _yadd$[ebp]
	mov	DWORD PTR _px$[ebp], ebx
	call	@PlrDirOK@8
	test	eax, eax
	je	$L85548
; Line 1298
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	DWORD PTR _plr[esi+64], ebx
	cmp	ecx, DWORD PTR _myplr
	mov	DWORD PTR _plr[esi+68], edi
	jne	SHORT $L85536
; Line 1299
	mov	eax, DWORD PTR _plr[esi+56]
	sub	eax, DWORD PTR _ViewX
	mov	DWORD PTR _ScrollInfo+8, eax
; Line 1300
	mov	eax, DWORD PTR _plr[esi+60]
	sub	eax, DWORD PTR _ViewY
	mov	DWORD PTR _ScrollInfo+12, eax
$L85536:
; Line 1303
	or	dl, -1
	mov	eax, DWORD PTR _plr[esi+60]
	sub	dl, cl
	mov	ecx, DWORD PTR _plr[esi+56]
	imul	ecx, 112				; 00000070H
; Line 1305
	mov	DWORD PTR _plr[esi+472], eax
; Line 1312
	push	edi
	mov	BYTE PTR _dPlayer[ecx+eax], dl
	mov	ecx, DWORD PTR _plr[esi+56]
	mov	DWORD PTR _plr[esi+56], ebx
	mov	al, BYTE PTR _pnum$[ebp]
	imul	ebx, 112				; 00000070H
	mov	edx, DWORD PTR _px$[ebp]
	inc	al
	mov	BYTE PTR _dPlayer[ebx+edi], al
	mov	ebx, DWORD PTR _xoff$[ebp]
	mov	eax, DWORD PTR _yoff$[ebp]
	mov	DWORD PTR _plr[esi+468], ecx
	mov	ecx, DWORD PTR _plr[esi+156]
	mov	DWORD PTR _plr[esi+60], edi
	mov	DWORD PTR _plr[esi+96], ebx
	mov	DWORD PTR _plr[esi+100], eax
	call	@ChangeLightXY@12
; Line 1313
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@PM_ChangeLightOff@4
; Line 1316
	mov	eax, DWORD PTR _xvel$[ebp]
	mov	DWORD PTR _plr[esi+104], eax
; Line 1317
	mov	eax, DWORD PTR _yvel$[ebp]
	mov	DWORD PTR _plr[esi+108], eax
; Line 1319
	mov	eax, DWORD PTR _yoff$[ebp]
	shl	ebx, 8
	push	2
	mov	DWORD PTR _plr[esi+488], ebx
; Line 1320
	mov	ebx, DWORD PTR _EndDir$[ebp]
	pop	edi
	shl	eax, 8
; Line 1322
	test	BYTE PTR _plr[esi+536], 2
	mov	DWORD PTR _plr[esi], edi
	mov	DWORD PTR _plr[esi+492], eax
	mov	DWORD PTR _plr[esi+476], ebx
	jne	SHORT $L85537
; Line 1323
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, edi
	call	@LoadPlrGFX@8
$L85537:
; Line 1325
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	DWORD PTR _plr[esi+616]
	mov	eax, ecx
	imul	eax, 5430				; 00001536H
	push	0
	add	eax, ebx
	push	DWORD PTR _plr[esi+612]
	mov	edx, DWORD PTR _plr[eax*4+580]
	call	@NewPlrAnim@20
; Line 1328
	and	DWORD PTR _plr[esi+496], 0
; Line 1331
	mov	ecx, DWORD PTR _pnum$[ebp]
	xor	edx, edx
	cmp	ebx, 7
	mov	DWORD PTR _plr[esi+112], ebx
	jne	SHORT $L85538
	inc	edx
$L85538:
; Line 1333
	call	@InitPlayerLoc@8
; Line 1336
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L85548
; Line 1341
	push	DWORD PTR _ScrollInfo+8
	xor	esi, esi
	cmp	DWORD PTR _zoomflag, esi
	je	SHORT $L85541
	call	_abs
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L85547
	push	DWORD PTR _ScrollInfo+12
	call	_abs
	cmp	eax, 3
; Line 1346
	jmp	SHORT $L87145
$L85541:
	call	_abs
	cmp	eax, edi
	pop	ecx
	jge	SHORT $L85547
	push	DWORD PTR _ScrollInfo+12
	call	_abs
	cmp	eax, edi
$L87145:
	pop	ecx
	jge	SHORT $L85547
; Line 1349
	mov	eax, DWORD PTR _sdir$[ebp]
	mov	DWORD PTR _ScrollInfo+16, eax
	jmp	SHORT $L85548
$L85547:
; Line 1347
	mov	DWORD PTR _ScrollInfo+16, esi
$L85548:
	pop	edi
	pop	esi
	pop	ebx
; Line 1351
	leave
	ret	28					; 0000001cH
@StartWalk2@36 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@NCOL@StartWalk3?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@StartWalk3@44
;	COMDAT ??_C@_0BO@NCOL@StartWalk3?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@NCOL@StartWalk3?3?5illegal?5player?5?$CFd?$AA@ DB 'StartWalk3: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartWalk3@44
_TEXT	SEGMENT
_pnum$ = -4
_xvel$ = -8
_yvel$ = 8
_xoff$ = 12
_yoff$ = 16
_xadd$ = 20
_yadd$ = 24
_mapx$ = 28
_mapy$ = 32
_EndDir$ = 36
_sdir$ = 40
_px$ = 20
_py$ = -12
_x$ = 24
_y$ = 28
@StartWalk3@44 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _xvel$ = edx
; Line 1355
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1358
	cmp	edi, 4
	mov	DWORD PTR _xvel$[ebp], edx
	mov	DWORD PTR _pnum$[ebp], edi
	jb	SHORT $L85577
; Line 1359
	push	edi
	push	OFFSET FLAT:??_C@_0BO@NCOL@StartWalk3?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85577:
; Line 1362
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+317], 0
	je	SHORT $L85579
	cmp	DWORD PTR _plr[esi+408], 0
	jne	SHORT $L85579
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L85579
; Line 1363
	or	edx, -1
	mov	ecx, edi
	call	@SyncPlrKill@8
; Line 1364
	jmp	$L85592
$L85579:
; Line 1367
	mov	ecx, edi
	call	@SetPlayerOld@4
; Line 1368
	mov	eax, DWORD PTR _plr[esi+56]
	mov	ecx, DWORD PTR _xadd$[ebp]
; Line 1369
	mov	edx, DWORD PTR _yadd$[ebp]
	add	ecx, eax
	mov	DWORD PTR _px$[ebp], ecx
	mov	ecx, DWORD PTR _plr[esi+60]
	lea	ebx, DWORD PTR [ecx+edx]
; Line 1370
	mov	edx, DWORD PTR _mapx$[ebp]
	add	eax, edx
; Line 1373
	mov	edx, DWORD PTR _EndDir$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _mapy$[ebp]
	mov	DWORD PTR _py$[ebp], ebx
	lea	edi, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	DWORD PTR _y$[ebp], edi
	call	@PlrDirOK@8
	test	eax, eax
	je	$L85592
; Line 1380
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	eax, DWORD PTR _px$[ebp]
	cmp	ecx, DWORD PTR _myplr
	mov	DWORD PTR _plr[esi+64], eax
	mov	DWORD PTR _plr[esi+68], ebx
	jne	SHORT $L85581
; Line 1381
	mov	eax, DWORD PTR _plr[esi+56]
	sub	eax, DWORD PTR _ViewX
	mov	DWORD PTR _ScrollInfo+8, eax
; Line 1382
	mov	eax, DWORD PTR _plr[esi+60]
	sub	eax, DWORD PTR _ViewY
	mov	DWORD PTR _ScrollInfo+12, eax
$L85581:
; Line 1385
	or	al, -1
	mov	edx, DWORD PTR _plr[esi+60]
	sub	al, cl
	mov	ecx, DWORD PTR _plr[esi+56]
	imul	ecx, 112				; 00000070H
; Line 1388
	mov	DWORD PTR _plr[esi+484], edi
	mov	BYTE PTR _dPlayer[ecx+edx], al
	mov	ecx, DWORD PTR _px$[ebp]
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dPlayer[ecx+ebx], al
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _plr[esi+480], eax
; Line 1389
	imul	eax, 112				; 00000070H
; Line 1391
	mov	ebx, DWORD PTR _yoff$[ebp]
	lea	eax, DWORD PTR _dFlags[eax+edi]
	mov	edi, DWORD PTR _xoff$[ebp]
	mov	DWORD PTR _plr[esi+100], ebx
	or	BYTE PTR [eax], 32			; 00000020H
; Line 1393
	cmp	BYTE PTR _leveltype, 0
	mov	DWORD PTR _plr[esi+96], edi
	je	SHORT $L85582
; Line 1394
	push	DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _plr[esi+156]
	call	@ChangeLightXY@12
; Line 1395
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@PM_ChangeLightOff@4
$L85582:
; Line 1399
	mov	eax, DWORD PTR _xvel$[ebp]
	mov	DWORD PTR _plr[esi], 3
	mov	DWORD PTR _plr[esi+104], eax
; Line 1400
	mov	eax, DWORD PTR _yvel$[ebp]
	mov	DWORD PTR _plr[esi+108], eax
; Line 1401
	mov	eax, DWORD PTR _px$[ebp]
; Line 1403
	shl	edi, 8
	mov	DWORD PTR _plr[esi+468], eax
	mov	eax, DWORD PTR _py$[ebp]
	mov	DWORD PTR _plr[esi+488], edi
; Line 1405
	mov	edi, DWORD PTR _EndDir$[ebp]
	shl	ebx, 8
; Line 1407
	test	BYTE PTR _plr[esi+536], 2
	mov	DWORD PTR _plr[esi+492], ebx
; Line 1408
	mov	ebx, DWORD PTR _pnum$[ebp]
	mov	DWORD PTR _plr[esi+472], eax
	mov	DWORD PTR _plr[esi+476], edi
	jne	SHORT $L85583
	push	2
	mov	ecx, ebx
	pop	edx
	call	@LoadPlrGFX@8
$L85583:
; Line 1410
	mov	eax, ebx
	push	DWORD PTR _plr[esi+616]
	imul	eax, 5430				; 00001536H
	push	0
	add	eax, edi
	push	DWORD PTR _plr[esi+612]
	mov	ecx, ebx
	mov	edx, DWORD PTR _plr[eax*4+580]
	call	@NewPlrAnim@20
; Line 1412
	mov	DWORD PTR _plr[esi+112], edi
; Line 1413
	xor	edi, edi
; Line 1415
	xor	edx, edx
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi+496], edi
	call	@InitPlayerLoc@8
; Line 1417
	cmp	ebx, DWORD PTR _myplr
	jne	SHORT $L85592
; Line 1421
	cmp	DWORD PTR _zoomflag, edi
; Line 1422
	push	DWORD PTR _ScrollInfo+8
	je	SHORT $L85585
	call	_abs
	cmp	eax, 3
	pop	ecx
	jge	SHORT $L85591
	push	DWORD PTR _ScrollInfo+12
	call	_abs
	cmp	eax, 3
; Line 1427
	jmp	SHORT $L87150
$L85585:
	call	_abs
	cmp	eax, 2
	pop	ecx
	jge	SHORT $L85591
	push	DWORD PTR _ScrollInfo+12
	call	_abs
	cmp	eax, 2
$L87150:
	pop	ecx
	jge	SHORT $L85591
; Line 1430
	mov	eax, DWORD PTR _sdir$[ebp]
	mov	DWORD PTR _ScrollInfo+16, eax
	jmp	SHORT $L85592
$L85591:
; Line 1428
	mov	DWORD PTR _ScrollInfo+16, edi
$L85592:
	pop	edi
	pop	esi
	pop	ebx
; Line 1432
	leave
	ret	36					; 00000024H
@StartWalk3@44 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@KNPO@StartAttack?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@StartAttack@8
;	COMDAT ??_C@_0BP@KNPO@StartAttack?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@KNPO@StartAttack?3?5illegal?5player?5?$CFd?$AA@ DB 'StartAttack'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartAttack@8
_TEXT	SEGMENT
@StartAttack@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _d$ = edx
; Line 1436
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1437
	push	4
	mov	edi, ecx
	pop	ebx
	mov	ebp, edx
	cmp	edi, ebx
	jb	SHORT $L85599
; Line 1438
	push	edi
	push	OFFSET FLAT:??_C@_0BP@KNPO@StartAttack?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85599:
; Line 1441
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+317], 0
	je	SHORT $L85601
	cmp	DWORD PTR _plr[esi+408], 0
	jne	SHORT $L85601
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L85601
; Line 1442
	mov	ecx, edi
	pop	edi
	pop	esi
	pop	ebp
	or	edx, -1
	pop	ebx
	jmp	@SyncPlrKill@8
$L85601:
; Line 1446
	test	BYTE PTR _plr[esi+536], bl
	jne	SHORT $L85602
; Line 1447
	mov	edx, ebx
	mov	ecx, edi
	call	@LoadPlrGFX@8
$L85602:
; Line 1450
	mov	eax, edi
	push	DWORD PTR _plr[esi+656]
	imul	eax, 5430				; 00001536H
	push	0
	add	eax, ebp
	push	DWORD PTR _plr[esi+652]
	mov	ecx, edi
	mov	edx, DWORD PTR _plr[eax*4+620]
	call	@NewPlrAnim@20
; Line 1452
	mov	edx, ebp
	mov	ecx, edi
	mov	DWORD PTR _plr[esi], ebx
	call	@FixPlayerLocation@8
; Line 1453
	mov	ecx, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	jmp	@SetPlayerOld@4
@StartAttack@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@INBP@StartRangeAttack?3?5illegal?5player@ ; `string'
PUBLIC	@StartRangeAttack@16
;	COMDAT ??_C@_0CE@INBP@StartRangeAttack?3?5illegal?5player@
_DATA	SEGMENT
??_C@_0CE@INBP@StartRangeAttack?3?5illegal?5player@ DB 'StartRangeAttack:'
	DB	' illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartRangeAttack@16
_TEXT	SEGMENT
_d$ = -4
_cx$ = 8
_cy$ = 12
@StartRangeAttack@16 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _d$ = edx
; Line 1457
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR _d$[ebp], edx
; Line 1458
	cmp	edi, 4
	jb	SHORT $L85613
; Line 1459
	push	edi
	push	OFFSET FLAT:??_C@_0CE@INBP@StartRangeAttack?3?5illegal?5player@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85613:
; Line 1462
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+317], 0
	je	SHORT $L85615
	cmp	DWORD PTR _plr[esi+408], 0
	jne	SHORT $L85615
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L85615
; Line 1463
	or	edx, -1
	mov	ecx, edi
	call	@SyncPlrKill@8
; Line 1464
	jmp	SHORT $L85611
$L85615:
; Line 1467
	test	BYTE PTR _plr[esi+536], 4
	jne	SHORT $L85616
; Line 1468
	push	4
	mov	ecx, edi
	pop	edx
	call	@LoadPlrGFX@8
$L85616:
; Line 1470
	mov	eax, edi
	push	DWORD PTR _plr[esi+656]
	imul	eax, 5430				; 00001536H
	add	eax, DWORD PTR _d$[ebp]
	push	0
	push	DWORD PTR _plr[esi+652]
	mov	ecx, edi
	mov	edx, DWORD PTR _plr[eax*4+620]
	call	@NewPlrAnim@20
; Line 1473
	mov	edx, DWORD PTR _d$[ebp]
	mov	ecx, edi
	mov	DWORD PTR _plr[esi], 5
	call	@FixPlayerLocation@8
; Line 1474
	mov	ecx, edi
	call	@SetPlayerOld@4
; Line 1475
	mov	eax, DWORD PTR _cx$[ebp]
	mov	DWORD PTR _plr[esi+468], eax
; Line 1476
	mov	eax, DWORD PTR _cy$[ebp]
	mov	DWORD PTR _plr[esi+472], eax
$L85611:
	pop	edi
	pop	esi
; Line 1477
	leave
	ret	8
@StartRangeAttack@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@FHGI@StartPlrBlock?3?5illegal?5player?5?$CFd@ ; `string'
PUBLIC	@StartPlrBlock@8
EXTRN	@PlaySfxLoc@12:NEAR
;	COMDAT ??_C@_0CB@FHGI@StartPlrBlock?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT
??_C@_0CB@FHGI@StartPlrBlock?3?5illegal?5player?5?$CFd@ DB 'StartPlrBlock'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartPlrBlock@8
_TEXT	SEGMENT
@StartPlrBlock@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _dir$ = edx
; Line 1480
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1481
	cmp	edi, 4
	mov	ebx, edx
	jb	SHORT $L85623
; Line 1482
	push	edi
	push	OFFSET FLAT:??_C@_0CB@FHGI@StartPlrBlock?3?5illegal?5player?5?$CFd@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85623:
; Line 1485
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+317], 0
	je	SHORT $L85625
	cmp	DWORD PTR _plr[esi+408], 0
	jne	SHORT $L85625
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L85625
; Line 1486
	mov	ecx, edi
	pop	edi
	pop	esi
	or	edx, -1
	pop	ebx
	jmp	@SyncPlrKill@8
$L85625:
; Line 1490
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[esi+56]
	push	61					; 0000003dH
	pop	ecx
	call	@PlaySfxLoc@12
; Line 1492
	mov	edx, 256				; 00000100H
	test	DWORD PTR _plr[esi+536], edx
	jne	SHORT $L85626
; Line 1493
	mov	ecx, edi
	call	@LoadPlrGFX@8
$L85626:
; Line 1495
	mov	eax, edi
	push	DWORD PTR _plr[esi+888]
	imul	eax, 5430				; 00001536H
	push	2
	add	eax, ebx
	push	DWORD PTR _plr[esi+884]
	mov	ecx, edi
	mov	edx, DWORD PTR _plr[eax*4+852]
	call	@NewPlrAnim@20
; Line 1498
	mov	edx, ebx
	mov	ecx, edi
	mov	DWORD PTR _plr[esi], 6
	call	@FixPlayerLocation@8
; Line 1499
	mov	ecx, edi
	pop	edi
	pop	esi
	pop	ebx
	jmp	@SetPlayerOld@4
@StartPlrBlock@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@KMKA@StartSpell?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@StartSpell@16
EXTRN	@GetSpellLevel@8:NEAR
EXTRN	_spelldata:BYTE
;	COMDAT ??_C@_0BO@KMKA@StartSpell?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@KMKA@StartSpell?3?5illegal?5player?5?$CFd?$AA@ DB 'StartSpell: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartSpell@16
_TEXT	SEGMENT
_d$ = -4
_cx$ = 8
_cy$ = 12
@StartSpell@16 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _d$ = edx
; Line 1503
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1504
	cmp	edi, 4
	mov	DWORD PTR _d$[ebp], edx
	jb	SHORT $L85637
; Line 1505
	push	edi
	push	OFFSET FLAT:??_C@_0BO@KMKA@StartSpell?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85637:
; Line 1507
	mov	esi, edi
	xor	ebx, ebx
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+317], bl
	je	SHORT $L85639
	cmp	DWORD PTR _plr[esi+408], ebx
	jne	SHORT $L85639
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L85639
; Line 1508
	or	edx, -1
	mov	ecx, edi
	call	@SyncPlrKill@8
; Line 1509
	jmp	$L85635
$L85639:
; Line 1512
	cmp	BYTE PTR _leveltype, bl
	je	$L85642
; Line 1513
	mov	eax, DWORD PTR _plr[esi+164]
	imul	eax, 56					; 00000038H
	movzx	eax, BYTE PTR _spelldata[eax+2]
	sub	eax, ebx
	je	SHORT $L85645
	dec	eax
	je	SHORT $L85647
	dec	eax
	jne	$L85642
; Line 1527
	push	64					; 00000040H
	pop	edx
	test	BYTE PTR _plr[esi+536], dl
	jne	SHORT $L85650
; Line 1528
	mov	ecx, edi
	call	@LoadPlrGFX@8
$L85650:
; Line 1530
	mov	eax, edi
	imul	eax, 5430				; 00001536H
	add	eax, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _plr[eax*4+728]
; Line 1531
	jmp	SHORT $L87165
$L85647:
; Line 1521
	push	16					; 00000010H
	pop	edx
	test	BYTE PTR _plr[esi+536], dl
	jne	SHORT $L85648
; Line 1522
	mov	ecx, edi
	call	@LoadPlrGFX@8
$L85648:
; Line 1524
	mov	eax, edi
	imul	eax, 5430				; 00001536H
	add	eax, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _plr[eax*4+664]
; Line 1525
	jmp	SHORT $L87165
$L85645:
; Line 1515
	push	32					; 00000020H
	pop	edx
	test	BYTE PTR _plr[esi+536], dl
	jne	SHORT $L85646
; Line 1516
	mov	ecx, edi
	call	@LoadPlrGFX@8
$L85646:
; Line 1518
	mov	eax, edi
	imul	eax, 5430				; 00001536H
	add	eax, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _plr[eax*4+696]
$L87165:
	push	DWORD PTR _plr[esi+764]
	mov	ecx, edi
	push	ebx
	push	DWORD PTR _plr[esi+760]
	call	@NewPlrAnim@20
$L85642:
; Line 1535
	mov	eax, DWORD PTR _plr[esi+164]
	push	DWORD PTR _plr[esi+60]
	imul	eax, 56					; 00000038H
	mov	edx, DWORD PTR _plr[esi+56]
	movzx	ecx, BYTE PTR _spelldata[eax+32]
	call	@PlaySfxLoc@12
; Line 1539
	mov	edx, DWORD PTR _d$[ebp]
	mov	ecx, edi
	mov	DWORD PTR _plr[esi], 9
	call	@FixPlayerLocation@8
; Line 1540
	mov	ecx, edi
	call	@SetPlayerOld@4
; Line 1542
	mov	eax, DWORD PTR _cx$[ebp]
; Line 1544
	mov	edx, DWORD PTR _plr[esi+164]
	mov	DWORD PTR _plr[esi+468], eax
	mov	eax, DWORD PTR _cy$[ebp]
	mov	ecx, edi
	mov	DWORD PTR _plr[esi+472], eax
	call	@GetSpellLevel@8
	mov	DWORD PTR _plr[esi+480], eax
; Line 1545
	mov	DWORD PTR _plr[esi+496], 1
$L85635:
	pop	edi
	pop	esi
	pop	ebx
; Line 1546
	leave
	ret	8
@StartSpell@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@KLLP@FixPlrWalkTags?3?5illegal?5player?5?$CF@ ; `string'
;	COMDAT ??_C@_0CC@KLLP@FixPlrWalkTags?3?5illegal?5player?5?$CF@
_DATA	SEGMENT
??_C@_0CC@KLLP@FixPlrWalkTags?3?5illegal?5player?5?$CF@ DB 'FixPlrWalkTag'
	DB	's: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @FixPlrWalkTags@4
_TEXT	SEGMENT
_pp$ = -12
_x$ = -8
@FixPlrWalkTags@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1549
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	esi, ecx
; Line 1553
	cmp	esi, 4
	push	edi
	jb	SHORT $L85661
; Line 1554
	push	esi
	push	OFFSET FLAT:??_C@_0CC@KLLP@FixPlrWalkTags?3?5illegal?5player?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85661:
; Line 1557
	lea	eax, DWORD PTR [esi+1]
; Line 1558
	or	edx, -1
	mov	DWORD PTR _pp$[ebp], eax
; Line 1559
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	sub	edx, esi
	mov	ecx, DWORD PTR _plr[eax+88]
; Line 1560
	mov	eax, DWORD PTR _plr[eax+92]
; Line 1561
	lea	esi, DWORD PTR [eax-1]
	lea	edi, DWORD PTR [eax+1]
	cmp	esi, edi
	jg	SHORT $L85665
	push	ebx
	lea	edi, DWORD PTR [ecx+1]
$L85663:
; Line 1562
	lea	ebx, DWORD PTR [ecx-1]
	cmp	ebx, edi
	mov	DWORD PTR _x$[ebp], ebx
	jg	SHORT $L85664
	mov	edi, ebx
	imul	edi, 112				; 00000070H
	lea	edi, DWORD PTR _dPlayer[edi+esi]
	mov	DWORD PTR -4+[ebp], edi
$L85666:
; Line 1563
	test	ebx, ebx
	jl	SHORT $L85667
	cmp	ebx, 112				; 00000070H
	jge	SHORT $L85667
	test	esi, esi
	jl	SHORT $L85667
	cmp	esi, 112				; 00000070H
	jge	SHORT $L85667
	mov	edi, DWORD PTR -4+[ebp]
	movsx	edi, BYTE PTR [edi]
	cmp	edi, DWORD PTR _pp$[ebp]
	je	SHORT $L85670
	cmp	edi, edx
	jne	SHORT $L85667
$L85670:
; Line 1564
	mov	edi, DWORD PTR -4+[ebp]
	and	BYTE PTR [edi], 0
$L85667:
	mov	ebx, DWORD PTR _x$[ebp]
	add	DWORD PTR -4+[ebp], 112			; 00000070H
	inc	ebx
	lea	edi, DWORD PTR [ecx+1]
	cmp	ebx, edi
	mov	DWORD PTR _x$[ebp], ebx
	jle	SHORT $L85666
$L85664:
; Line 1561
	inc	esi
	lea	ebx, DWORD PTR [eax+1]
	cmp	esi, ebx
	jle	SHORT $L85663
	pop	ebx
$L85665:
	pop	edi
	pop	esi
; Line 1569
	test	ecx, ecx
	jl	SHORT $L85671
	cmp	ecx, 111				; 0000006fH
	jge	SHORT $L85671
	test	eax, eax
	jl	SHORT $L85671
	cmp	eax, 111				; 0000006fH
	jge	SHORT $L85671
; Line 1570
	imul	ecx, 112				; 00000070H
	add	eax, ecx
	and	BYTE PTR _dFlags[eax+112], -33		; ffffffdfH
; Line 1571
	and	BYTE PTR _dFlags[eax+1], -33		; ffffffdfH
$L85671:
; Line 1573
	leave
	ret	0
@FixPlrWalkTags@4 ENDP
_TEXT	ENDS
PUBLIC	@RemovePlrFromMap@4
; Function compile flags: /Ogsy
;	COMDAT @RemovePlrFromMap@4
_TEXT	SEGMENT
_pp$ = -4
@RemovePlrFromMap@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1576
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 1581
	or	esi, -1
	lea	eax, DWORD PTR [ecx+1]
; Line 1583
	xor	edi, edi
	sub	esi, ecx
	mov	DWORD PTR _pp$[ebp], eax
	inc	edi
	push	ebx
$L85679:
; Line 1584
	push	111					; 0000006fH
	mov	edx, edi
	pop	ebx
$L85682:
; Line 1585
	lea	eax, DWORD PTR _dPlayer[edx]
	movsx	ecx, BYTE PTR [eax+111]
	cmp	ecx, esi
	je	SHORT $L85686
	movsx	eax, BYTE PTR [eax]
	cmp	eax, esi
	jne	SHORT $L85683
$L85686:
; Line 1586
	lea	ecx, DWORD PTR _dFlags[edx+112]
	mov	al, BYTE PTR [ecx]
	test	al, 32					; 00000020H
	je	SHORT $L85683
; Line 1587
	and	al, -33					; ffffffdfH
	mov	BYTE PTR [ecx], al
$L85683:
	add	edx, 112				; 00000070H
	dec	ebx
	jne	SHORT $L85682
	inc	edi
	cmp	edi, 112				; 00000070H
	jl	SHORT $L85679
; Line 1589
	xor	edx, edx
	pop	ebx
$L85688:
; Line 1590
	push	112					; 00000070H
	lea	eax, DWORD PTR _dPlayer[edx]
	pop	edi
$L85691:
; Line 1591
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, DWORD PTR _pp$[ebp]
	je	SHORT $L85695
	cmp	ecx, esi
	jne	SHORT $L85692
$L85695:
; Line 1592
	and	BYTE PTR [eax], 0
$L85692:
; Line 1590
	add	eax, 112				; 00000070H
	dec	edi
	jne	SHORT $L85691
	inc	edx
	cmp	edx, 112				; 00000070H
	jl	SHORT $L85688
	pop	edi
	pop	esi
; Line 1593
	leave
	ret	0
@RemovePlrFromMap@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@PONH@StartPlrHit?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@StartPlrHit@12
;	COMDAT ??_C@_0BP@PONH@StartPlrHit?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@PONH@StartPlrHit?3?5illegal?5player?5?$CFd?$AA@ DB 'StartPlrHit'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartPlrHit@12
_TEXT	SEGMENT
_forcehit$ = 8
@StartPlrHit@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _dam$ = edx
; Line 1596
	push	ebx
	push	ebp
	mov	ebx, ecx
	push	esi
	push	edi
; Line 1599
	cmp	ebx, 4
	mov	edi, edx
	jb	SHORT $L85705
; Line 1600
	push	ebx
	push	OFFSET FLAT:??_C@_0BP@PONH@StartPlrHit?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85705:
; Line 1603
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+317], 0
	je	SHORT $L85707
	cmp	DWORD PTR _plr[esi+408], 0
	jne	SHORT $L85707
	cmp	ebx, DWORD PTR _myplr
	jne	SHORT $L85707
; Line 1604
	or	edx, -1
	mov	ecx, ebx
	call	@SyncPlrKill@8
; Line 1605
	jmp	$L85713
$L85707:
; Line 1608
	mov	al, BYTE PTR _plr[esi+352]
	test	al, al
	jne	SHORT $L85708
; Line 1609
	mov	ecx, 788				; 00000314H
; Line 1610
	jmp	SHORT $L87188
$L85708:
	cmp	al, 1
	jne	SHORT $L85710
; Line 1611
	mov	ecx, 679				; 000002a7H
; Line 1612
	jmp	SHORT $L87188
$L85710:
	cmp	al, 2
	jne	SHORT $L85712
; Line 1613
	mov	ecx, 576				; 00000240H
$L87188:
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[esi+56]
	call	@PlaySfxLoc@12
$L85712:
; Line 1617
	movsx	eax, BYTE PTR _plr[esi+440]
	xor	ebp, ebp
	sar	edi, 6
	inc	ebp
	cmp	edi, eax
	mov	DWORD PTR _drawhpflag, ebp
	jge	SHORT $L85714
	cmp	DWORD PTR _forcehit$[esp+12], 0
	je	SHORT $L85713
$L85714:
; Line 1618
	mov	edi, DWORD PTR _plr[esi+112]
; Line 1620
	push	8
	pop	edx
	test	BYTE PTR _plr[esi+536], dl
	jne	SHORT $L85715
; Line 1621
	mov	ecx, ebx
	call	@LoadPlrGFX@8
$L85715:
; Line 1623
	mov	eax, ebx
	push	DWORD PTR _plr[esi+808]
	imul	eax, 5430				; 00001536H
	push	0
	add	eax, edi
	push	DWORD PTR _plr[esi+804]
	mov	ecx, ebx
	mov	edx, DWORD PTR _plr[eax*4+772]
	call	@NewPlrAnim@20
; Line 1626
	mov	edx, edi
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi], 7
	call	@FixPlayerLocation@8
; Line 1628
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi+496], ebp
	call	@FixPlrWalkTags@4
; Line 1629
	mov	ecx, DWORD PTR _plr[esi+56]
	mov	edx, DWORD PTR _plr[esi+60]
	imul	ecx, 112				; 00000070H
	mov	al, bl
	inc	al
	mov	BYTE PTR _dPlayer[ecx+edx], al
; Line 1630
	mov	ecx, ebx
	call	@SetPlayerOld@4
$L85713:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1632
	ret	4
@StartPlrHit@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@ ; `string'
PUBLIC	@RespawnDeadItem@12
EXTRN	_dItem:BYTE
EXTRN	@FindGetItem@12:NEAR
EXTRN	@SyncGetItem@20:NEAR
EXTRN	@DrawInvMsg@4:NEAR
EXTRN	_itemactive:BYTE
EXTRN	_itemavail:BYTE
EXTRN	_item:BYTE
EXTRN	_numitems:DWORD
EXTRN	@RespawnItem@8:NEAR
;	COMDAT ??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@
_DATA	SEGMENT
??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@ DB 'A duplicate ite'
	DB	'm has been detected.  Destroying duplicate...', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @RespawnDeadItem@12
_TEXT	SEGMENT
_x$ = -4
_y$ = 8
_ii$ = -8
@RespawnDeadItem@12 PROC NEAR				; COMDAT
; _itm$ = ecx
; _x$ = edx
; Line 1635
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1638
	cmp	DWORD PTR _numitems, 127		; 0000007fH
	push	ebx
	mov	DWORD PTR _x$[ebp], edx
	mov	ebx, ecx
	jge	$L85722
; Line 1642
	push	DWORD PTR [ebx]
	mov	dx, WORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx+360]
	call	@FindGetItem@12
	test	eax, eax
	jl	SHORT $L85725
; Line 1643
	mov	ecx, OFFSET FLAT:??_C@_0DN@GKGM@A?5duplicate?5item?5has?5been?5detect@ ; `string'
	call	@DrawInvMsg@4
; Line 1644
	push	DWORD PTR [ebx]
	mov	ax, WORD PTR [ebx+4]
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	push	eax
	push	DWORD PTR [ebx+360]
	call	@SyncGetItem@20
$L85725:
; Line 1648
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _itemavail
	imul	edx, 112				; 00000070H
	push	esi
	mov	esi, DWORD PTR _y$[ebp]
	mov	cl, al
	mov	DWORD PTR _ii$[ebp], eax
	inc	cl
	push	edi
	mov	BYTE PTR _dItem[edx+esi], cl
; Line 1649
	mov	ecx, DWORD PTR _numitems
	shl	ecx, 2
	mov	edx, OFFSET FLAT:_itemavail+504
; Line 1651
	push	92					; 0000005cH
	mov	DWORD PTR _itemactive[ecx], eax
	imul	eax, 368				; 00000170H
	sub	edx, ecx
	lea	edi, DWORD PTR _item[eax]
	pop	ecx
	mov	esi, ebx
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR _itemavail, edx
; Line 1654
	xor	edx, edx
	rep movsd
	mov	ecx, DWORD PTR _x$[ebp]
	inc	edx
	mov	DWORD PTR _item[eax+12], ecx
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _item[eax+16], ecx
	mov	ecx, DWORD PTR _ii$[ebp]
	call	@RespawnItem@8
; Line 1655
	inc	DWORD PTR _numitems
; Line 1656
	or	DWORD PTR [ebx+8], -1
	pop	edi
	pop	esi
$L85722:
	pop	ebx
; Line 1657
	leave
	ret	4
@RespawnDeadItem@12 ENDP
_TEXT	ENDS
PUBLIC	@SetPlayerHitPoints@8
PUBLIC	??_C@_0CD@ICJP@StartPlayerKill?3?5illegal?5player?5@ ; `string'
PUBLIC	??_C@_09FPPI@Ear?5of?5?$CFs?$AA@		; `string'
PUBLIC	@StartPlayerKill@8
PUBLIC	@PlrDeadItem@16
PUBLIC	@DropHalfPlayersGold@4
EXTRN	_pcurs:DWORD
EXTRN	@SetCursor_@4:NEAR
EXTRN	@CalcPlrInv@8:NEAR
EXTRN	@SetPlrHandItem@8:NEAR
;	COMDAT ??_C@_0CD@ICJP@StartPlayerKill?3?5illegal?5player?5@
_DATA	SEGMENT
??_C@_0CD@ICJP@StartPlayerKill?3?5illegal?5player?5@ DB 'StartPlayerKill:'
	DB	' illegal player %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09FPPI@Ear?5of?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_09FPPI@Ear?5of?5?$CFs?$AA@ DB 'Ear of %s', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartPlayerKill@8
_TEXT	SEGMENT
_earflag$ = -4
_diablolevel$ = -8
_ear$ = -376
_pi$ = -4
@StartPlayerKill@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _earflag$ = edx
; Line 1660
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 1667
	mov	esi, edi
	push	8
	imul	esi, 21720				; 000054d8H
	mov	DWORD PTR _earflag$[ebp], edx
	pop	ebx
	cmp	DWORD PTR _plr[esi+408], 0
	jg	SHORT $L85738
	cmp	DWORD PTR _plr[esi], ebx
	je	$L85731
$L85738:
; Line 1671
	cmp	DWORD PTR _myplr, edi
	jne	SHORT $L85739
; Line 1672
	xor	ecx, ecx
	push	edx
	mov	dl, 38					; 00000026H
	inc	ecx
	call	@NetSendCmdParam1@12
$L85739:
; Line 1675
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L87195
	cmp	DWORD PTR _plr[esi+52], 16		; 00000010H
	jne	SHORT $L87195
	mov	DWORD PTR _diablolevel$[ebp], 1
	jmp	SHORT $L87196
$L87195:
	and	DWORD PTR _diablolevel$[ebp], 0
$L87196:
; Line 1677
	cmp	edi, 4
	jb	SHORT $L85741
; Line 1678
	push	edi
	push	OFFSET FLAT:??_C@_0CD@ICJP@StartPlayerKill?3?5illegal?5player?5@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85741:
; Line 1681
	mov	al, BYTE PTR _plr[esi+352]
	test	al, al
	jne	SHORT $L85743
; Line 1682
	push	DWORD PTR _plr[esi+60]
	push	11					; 0000000bH
	pop	ecx
; Line 1683
	jmp	SHORT $L87206
$L85743:
	cmp	al, 1
	jne	SHORT $L85745
; Line 1684
	mov	ecx, 682				; 000002aaH
; Line 1685
	jmp	SHORT $L87207
$L85745:
	cmp	al, 2
	jne	SHORT $L85747
; Line 1686
	mov	ecx, 579				; 00000243H
$L87207:
	push	DWORD PTR _plr[esi+60]
$L87206:
	mov	edx, DWORD PTR _plr[esi+56]
	call	@PlaySfxLoc@12
$L85747:
; Line 1689
	lea	eax, DWORD PTR _plr[esi+120]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], ecx
	je	SHORT $L85748
; Line 1690
	mov	DWORD PTR [eax], ecx
; Line 1691
	mov	DWORD PTR _plr[esi+536], ecx
; Line 1692
	mov	ecx, edi
	call	@SetPlrAnims@4
$L85748:
; Line 1695
	test	BYTE PTR _plr[esi+536], -128		; ffffff80H
	jne	SHORT $L85749
; Line 1696
	mov	edx, 128				; 00000080H
	mov	ecx, edi
	call	@LoadPlrGFX@8
$L85749:
; Line 1700
	push	DWORD PTR _plr[esi+848]
	mov	eax, DWORD PTR _plr[esi+112]
	mov	ecx, edi
	mov	edx, DWORD PTR _plr[esi+eax*4+812]
	push	1
	push	DWORD PTR _plr[esi+844]
	call	@NewPlrAnim@20
; Line 1702
	and	BYTE PTR _plr[esi+316], 0
; Line 1705
	xor	edx, edx
	mov	ecx, edi
	mov	DWORD PTR _plr[esi], ebx
	mov	BYTE PTR _plr[esi+317], 1
	call	@SetPlayerHitPoints@8
; Line 1706
	xor	ebx, ebx
	inc	ebx
; Line 1708
	cmp	edi, DWORD PTR _myplr
	mov	DWORD PTR _plr[esi+496], ebx
	je	SHORT $L85750
	cmp	DWORD PTR _earflag$[ebp], 0
	jne	SHORT $L85750
	cmp	DWORD PTR _diablolevel$[ebp], 0
	jne	SHORT $L85750
; Line 1709
	push	7
	lea	eax, DWORD PTR _plr[esi+900]
	pop	ecx
$L85751:
; Line 1710
	or	DWORD PTR [eax], -1
	add	eax, 368				; 00000170H
	dec	ecx
	jne	SHORT $L85751
; Line 1712
	xor	edx, edx
	mov	ecx, edi
	call	@CalcPlrInv@8
$L85750:
; Line 1715
	movzx	eax, BYTE PTR _currlevel
	cmp	DWORD PTR _plr[esi+52], eax
	jne	$L85767
; Line 1716
	mov	edx, DWORD PTR _plr[esi+112]
	mov	ecx, edi
	call	@FixPlayerLocation@8
; Line 1717
	mov	ecx, edi
	call	@RemovePlrFromMap@4
; Line 1718
	mov	eax, DWORD PTR _plr[esi+56]
	mov	ecx, DWORD PTR _plr[esi+60]
	imul	eax, 112				; 00000070H
	lea	eax, DWORD PTR _dFlags[eax+ecx]
; Line 1719
	mov	ecx, edi
	or	BYTE PTR [eax], 4
	call	@SetPlayerOld@4
; Line 1721
	cmp	edi, DWORD PTR _myplr
	jne	$L85767
; Line 1725
	cmp	DWORD PTR _pcurs, 12			; 0000000cH
	mov	DWORD PTR _drawhpflag, ebx
	mov	DWORD PTR _deathdelay, 30		; 0000001eH
	jl	SHORT $L85756
; Line 1726
	push	0
	push	0
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, edi
	call	@PlrDeadItem@16
; Line 1727
	mov	ecx, ebx
	call	@SetCursor_@4
$L85756:
; Line 1730
	cmp	DWORD PTR _diablolevel$[ebp], 0
	jne	$L85767
; Line 1731
	mov	ecx, edi
	call	@DropHalfPlayersGold@4
; Line 1732
	cmp	DWORD PTR _earflag$[ebp], -1
	je	$L85767
; Line 1733
	cmp	DWORD PTR _earflag$[ebp], 0
	je	$L85759
; Line 1734
	push	23					; 00000017H
	lea	ecx, DWORD PTR _ear$[ebp]
	pop	edx
	call	@SetPlrHandItem@8
; Line 1735
	lea	ebx, DWORD PTR _plr[esi+320]
	lea	eax, DWORD PTR _ear$[ebp+61]
	push	ebx
	push	OFFSET FLAT:??_C@_09FPPI@Ear?5of?5?$CFs?$AA@ ; `string'
	push	eax
	call	_sprintf
; Line 1736
	mov	al, BYTE PTR _plr[esi+352]
	add	esp, 12					; 0000000cH
	cmp	al, 2
	jne	SHORT $L85761
; Line 1737
	mov	DWORD PTR _ear$[ebp+192], 19		; 00000013H
; Line 1738
	jmp	SHORT $L85765
$L85761:
	test	al, al
	jne	SHORT $L85763
; Line 1739
	mov	DWORD PTR _ear$[ebp+192], 20		; 00000014H
; Line 1740
	jmp	SHORT $L85765
$L85763:
	cmp	al, 1
	jne	SHORT $L85765
; Line 1741
	mov	DWORD PTR _ear$[ebp+192], 21		; 00000015H
$L85765:
; Line 1744
	movsx	ax, BYTE PTR _plr[esi+321]
	xor	ecx, ecx
	mov	ch, BYTE PTR [ebx]
	or	eax, ecx
; Line 1745
	movsx	ecx, BYTE PTR _plr[esi+323]
	mov	WORD PTR _ear$[ebp+4], ax
; Line 1748
	mov	edx, DWORD PTR _ear$[ebp+4]
	movsx	eax, BYTE PTR _plr[esi+322]
	shl	eax, 8
	or	eax, ecx
	movsx	ecx, BYTE PTR _plr[esi+324]
	shl	eax, 8
	or	eax, ecx
	movsx	ecx, BYTE PTR _plr[esi+325]
	shl	eax, 8
	or	eax, ecx
	movsx	ecx, BYTE PTR _plr[esi+440]
	push	eax
	push	23					; 00000017H
	mov	DWORD PTR _ear$[ebp+196], ecx
	pop	ecx
	mov	DWORD PTR _ear$[ebp], eax
	call	@FindGetItem@12
	cmp	eax, -1
	jne	SHORT $L85767
; Line 1749
	push	0
	push	0
	lea	edx, DWORD PTR _ear$[ebp]
	mov	ecx, edi
	call	@PlrDeadItem@16
; Line 1751
	jmp	SHORT $L85767
$L85759:
; Line 1752
	lea	eax, DWORD PTR _plr[esi+892]
; Line 1753
	push	7
	mov	DWORD PTR _pi$[ebp], eax
	pop	ebx
$L85769:
; Line 1756
	mov	eax, DWORD PTR _plr[esi+112]
	dec	ebx
	add	eax, ebx
; Line 1757
	mov	edx, DWORD PTR _pi$[ebp]
	and	eax, 7
	mov	ecx, edi
	shl	eax, 2
	push	DWORD PTR _offset_y[eax]
	push	DWORD PTR _offset_x[eax]
	call	@PlrDeadItem@16
; Line 1758
	add	DWORD PTR _pi$[ebp], 368		; 00000170H
	test	ebx, ebx
	jne	SHORT $L85769
; Line 1761
	xor	edx, edx
	mov	ecx, edi
	call	@CalcPlrInv@8
$L85767:
; Line 1767
	xor	edx, edx
	mov	ecx, edi
	call	@SetPlayerHitPoints@8
$L85731:
	pop	edi
	pop	esi
	pop	ebx
; Line 1768
	leave
	ret	0
@StartPlayerKill@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@BNML@PlrDeadItem?3?5illegal?5player?5?$CFd?$AA@ ; `string'
EXTRN	@ItemSpaceOk@8:NEAR
EXTRN	@NetSendCmdPItem@16:NEAR
;	COMDAT ??_C@_0BP@BNML@PlrDeadItem?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@BNML@PlrDeadItem?3?5illegal?5player?5?$CFd?$AA@ DB 'PlrDeadItem'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PlrDeadItem@16
_TEXT	SEGMENT
_itm$ = -12
_xx$ = 8
_yy$ = 12
_x$ = -16
_y$ = -8
_i$ = -4
_j$ = -8
_k$ = 8
@PlrDeadItem@16 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _itm$ = edx
; Line 1771
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 1775
	cmp	DWORD PTR [edx+8], -1
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _itm$[ebp], edx
	mov	edi, ecx
	je	$L85793
; Line 1778
	cmp	edi, 4
	jb	SHORT $L85787
; Line 1779
	push	edi
	push	OFFSET FLAT:??_C@_0BP@BNML@PlrDeadItem?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85787:
; Line 1782
	imul	edi, 21720				; 000054d8H
; Line 1783
	mov	esi, DWORD PTR _plr[edi+60]
	mov	ebx, DWORD PTR _plr[edi+56]
	add	esi, DWORD PTR _yy$[ebp]
	add	ebx, DWORD PTR _xx$[ebp]
; Line 1784
	cmp	DWORD PTR _xx$[ebp], 0
	mov	DWORD PTR _y$[ebp], esi
	jne	SHORT $L85790
	cmp	DWORD PTR _yy$[ebp], 0
	je	SHORT $L85789
$L85790:
	mov	edx, esi
	mov	ecx, ebx
	call	@ItemSpaceOk@8
	test	eax, eax
	je	SHORT $L85789
; Line 1785
	push	esi
	mov	esi, DWORD PTR _itm$[ebp]
	mov	edx, ebx
	mov	ecx, esi
	call	@RespawnDeadItem@12
; Line 1786
	push	92					; 0000005cH
	pop	ecx
; Line 1787
	push	DWORD PTR _y$[ebp]
	push	ebx
; Line 1788
	jmp	SHORT $L87219
$L85789:
; Line 1791
	or	DWORD PTR 12+[ebp], -1
	mov	DWORD PTR _k$[ebp], 1
$L85791:
; Line 1792
	mov	eax, DWORD PTR 12+[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $L87220
$L85794:
; Line 1793
	mov	ebx, DWORD PTR _plr[edi+60]
; Line 1794
	mov	eax, DWORD PTR 12+[ebp]
	add	ebx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$L85797:
; Line 1795
	mov	esi, DWORD PTR _plr[edi+56]
; Line 1796
	mov	edx, ebx
	add	esi, DWORD PTR _i$[ebp]
	mov	ecx, esi
	mov	DWORD PTR _x$[ebp], esi
	call	@ItemSpaceOk@8
	test	eax, eax
	jne	SHORT $L87213
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _k$[ebp]
	jle	SHORT $L85797
	inc	DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
$L87220:
; Line 1792
	cmp	eax, DWORD PTR _k$[ebp]
	jle	SHORT $L85794
	inc	DWORD PTR _k$[ebp]
	dec	DWORD PTR 12+[ebp]
	cmp	DWORD PTR 12+[ebp], -50			; ffffffceH
	jg	SHORT $L85791
; Line 1796
	jmp	SHORT $L85793
$L87213:
; Line 1797
	mov	edx, esi
	mov	esi, DWORD PTR _itm$[ebp]
	push	ebx
	mov	ecx, esi
	call	@RespawnDeadItem@12
; Line 1798
	push	92					; 0000005cH
	pop	ecx
; Line 1799
	push	ebx
	push	DWORD PTR _x$[ebp]
$L87219:
	lea	edi, DWORD PTR _plr[edi+21176]
	mov	dl, 11					; 0000000bH
	rep movsd
	xor	ecx, ecx
	call	@NetSendCmdPItem@16
$L85793:
	pop	edi
	pop	esi
	pop	ebx
; Line 1805
	leave
	ret	8
@PlrDeadItem@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@PBJP@DropHalfPlayersGold?3?5illegal?5pla@ ; `string'
EXTRN	@SetSpdbarGoldCurs@8:NEAR
EXTRN	_drawpanflag:DWORD
EXTRN	@RemoveInvItem@8:NEAR
EXTRN	@RemoveSpdBarItem@8:NEAR
EXTRN	@CalculateGold@4:NEAR
EXTRN	@GetGoldSeed@8:NEAR
EXTRN	@SetPlrHandGoldCurs@4:NEAR
EXTRN	@SetGoldCurs@8:NEAR
;	COMDAT ??_C@_0CH@PBJP@DropHalfPlayersGold?3?5illegal?5pla@
_DATA	SEGMENT
??_C@_0CH@PBJP@DropHalfPlayersGold?3?5illegal?5pla@ DB 'DropHalfPlayersGo'
	DB	'ld: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DropHalfPlayersGold@4
_TEXT	SEGMENT
_i$ = -4
@DropHalfPlayersGold@4 PROC NEAR			; COMDAT
; _pnum$ = ecx
; Line 1808
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	mov	ebx, ecx
	push	esi
; Line 1811
	cmp	ebx, 4
	push	edi
	jb	SHORT $L85807
; Line 1812
	push	ebx
	push	OFFSET FLAT:??_C@_0CH@PBJP@DropHalfPlayersGold?3?5illegal?5pla@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85807:
; Line 1815
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	mov	edi, DWORD PTR _plr[esi+460]
	sar	edi, 1
; Line 1816
	and	DWORD PTR _i$[ebp], 0
$L85809:
	test	edi, edi
	jle	$L85818
; Line 1817
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 368				; 00000170H
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR -8+[ebp], ecx
	cmp	DWORD PTR _plr[ecx+18240], 11		; 0000000bH
	jne	$L85810
	mov	eax, DWORD PTR _plr[ecx+18428]
	cmp	eax, 5000				; 00001388H
	je	$L85810
; Line 1820
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edi, eax
	jge	SHORT $L85813
	sub	eax, edi
	mov	DWORD PTR _plr[ecx+18428], eax
	mov	ecx, ebx
	call	@SetSpdbarGoldCurs@8
; Line 1821
	lea	ecx, DWORD PTR _plr[esi+21176]
	xor	edx, edx
	call	@SetPlrHandItem@8
; Line 1822
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@GetGoldSeed@8
; Line 1823
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandGoldCurs@4
; Line 1824
	mov	DWORD PTR _plr[esi+21372], edi
; Line 1825
	xor	edi, edi
	push	edi
	push	edi
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@PlrDeadItem@16
; Line 1827
	jmp	SHORT $L85810
$L85813:
; Line 1829
	mov	ecx, ebx
	sub	edi, eax
	call	@RemoveSpdBarItem@8
; Line 1830
	lea	ecx, DWORD PTR _plr[esi+21176]
	xor	edx, edx
	call	@SetPlrHandItem@8
; Line 1831
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@GetGoldSeed@8
; Line 1832
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandGoldCurs@4
; Line 1833
	mov	eax, DWORD PTR -8+[ebp]
; Line 1834
	lea	edx, DWORD PTR _plr[esi+21176]
	push	0
	push	0
	mov	eax, DWORD PTR _plr[eax+18428]
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi+21372], eax
	call	@PlrDeadItem@16
; Line 1835
	or	DWORD PTR _i$[ebp], -1
$L85810:
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 8
	jl	$L85809
; Line 1839
	test	edi, edi
	jle	$L85818
; Line 1840
	and	DWORD PTR _i$[ebp], 0
$L85816:
	test	edi, edi
	jle	$L85818
; Line 1841
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 368				; 00000170H
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR -8+[ebp], ecx
	cmp	DWORD PTR _plr[ecx+18240], 11		; 0000000bH
	jne	$L85817
; Line 1842
	mov	eax, DWORD PTR _plr[ecx+18428]
; Line 1844
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edi, eax
	jge	SHORT $L85820
	sub	eax, edi
	mov	DWORD PTR _plr[ecx+18428], eax
	mov	ecx, ebx
	call	@SetSpdbarGoldCurs@8
; Line 1845
	lea	ecx, DWORD PTR _plr[esi+21176]
	xor	edx, edx
	call	@SetPlrHandItem@8
; Line 1846
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@GetGoldSeed@8
; Line 1847
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandGoldCurs@4
; Line 1848
	mov	DWORD PTR _plr[esi+21372], edi
; Line 1849
	xor	edi, edi
	push	edi
	push	edi
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@PlrDeadItem@16
; Line 1851
	jmp	SHORT $L85817
$L85820:
; Line 1853
	mov	ecx, ebx
	sub	edi, eax
	call	@RemoveSpdBarItem@8
; Line 1854
	lea	ecx, DWORD PTR _plr[esi+21176]
	xor	edx, edx
	call	@SetPlrHandItem@8
; Line 1855
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@GetGoldSeed@8
; Line 1856
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandGoldCurs@4
; Line 1857
	mov	eax, DWORD PTR -8+[ebp]
; Line 1858
	lea	edx, DWORD PTR _plr[esi+21176]
	push	0
	push	0
	mov	eax, DWORD PTR _plr[eax+18428]
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi+21372], eax
	call	@PlrDeadItem@16
; Line 1859
	or	DWORD PTR _i$[ebp], -1
$L85817:
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 8
	jl	$L85816
$L85818:
; Line 1865
	xor	edx, edx
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	cmp	edi, edx
	jle	$L85832
; Line 1866
	cmp	DWORD PTR _plr[esi+18188], edx
	mov	DWORD PTR _i$[ebp], edx
	jle	$L85825
$L85823:
	test	edi, edi
	jle	$L85832
; Line 1867
	mov	eax, edx
	imul	eax, 368				; 00000170H
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR -8+[ebp], ecx
	cmp	DWORD PTR _plr[ecx+3476], 11		; 0000000bH
	jne	$L85824
	mov	eax, DWORD PTR _plr[ecx+3664]
	cmp	eax, 5000				; 00001388H
	je	$L85824
; Line 1868
	cmp	edi, eax
	jge	SHORT $L85827
; Line 1869
	sub	eax, edi
	mov	DWORD PTR _plr[ecx+3664], eax
; Line 1870
	mov	ecx, ebx
	call	@SetGoldCurs@8
; Line 1871
	lea	ecx, DWORD PTR _plr[esi+21176]
	xor	edx, edx
	call	@SetPlrHandItem@8
; Line 1872
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@GetGoldSeed@8
; Line 1873
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandGoldCurs@4
; Line 1874
	mov	DWORD PTR _plr[esi+21372], edi
; Line 1875
	xor	edi, edi
	push	edi
	push	edi
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@PlrDeadItem@16
; Line 1877
	jmp	SHORT $L85824
$L85827:
; Line 1879
	mov	ecx, ebx
	sub	edi, eax
	call	@RemoveInvItem@8
; Line 1880
	lea	ecx, DWORD PTR _plr[esi+21176]
	xor	edx, edx
	call	@SetPlrHandItem@8
; Line 1881
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@GetGoldSeed@8
; Line 1882
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandGoldCurs@4
; Line 1883
	mov	eax, DWORD PTR -8+[ebp]
; Line 1884
	lea	edx, DWORD PTR _plr[esi+21176]
	push	0
	push	0
	mov	eax, DWORD PTR _plr[eax+3664]
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi+21372], eax
	call	@PlrDeadItem@16
; Line 1885
	or	DWORD PTR _i$[ebp], -1
$L85824:
	mov	edx, DWORD PTR _i$[ebp]
	inc	edx
	cmp	edx, DWORD PTR _plr[esi+18188]
	mov	DWORD PTR _i$[ebp], edx
	jl	$L85823
$L85825:
; Line 1890
	test	edi, edi
	jle	$L85832
; Line 1891
	xor	edx, edx
	cmp	DWORD PTR _plr[esi+18188], edx
	mov	DWORD PTR _i$[ebp], edx
	jle	$L85832
$L85830:
	test	edi, edi
	jle	$L85832
; Line 1892
	mov	eax, edx
	imul	eax, 368				; 00000170H
	lea	ecx, DWORD PTR [eax+esi]
	mov	DWORD PTR -8+[ebp], ecx
	cmp	DWORD PTR _plr[ecx+3476], 11		; 0000000bH
	jne	$L85831
; Line 1893
	mov	eax, DWORD PTR _plr[ecx+3664]
	cmp	edi, eax
	jge	SHORT $L85834
; Line 1894
	sub	eax, edi
	mov	DWORD PTR _plr[ecx+3664], eax
; Line 1895
	mov	ecx, ebx
	call	@SetGoldCurs@8
; Line 1896
	lea	ecx, DWORD PTR _plr[esi+21176]
	xor	edx, edx
	call	@SetPlrHandItem@8
; Line 1897
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@GetGoldSeed@8
; Line 1898
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandGoldCurs@4
; Line 1899
	mov	DWORD PTR _plr[esi+21372], edi
; Line 1900
	xor	edi, edi
	push	edi
	push	edi
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@PlrDeadItem@16
; Line 1902
	jmp	SHORT $L85831
$L85834:
; Line 1904
	mov	ecx, ebx
	sub	edi, eax
	call	@RemoveInvItem@8
; Line 1905
	lea	ecx, DWORD PTR _plr[esi+21176]
	xor	edx, edx
	call	@SetPlrHandItem@8
; Line 1906
	lea	edx, DWORD PTR _plr[esi+21176]
	mov	ecx, ebx
	call	@GetGoldSeed@8
; Line 1907
	lea	ecx, DWORD PTR _plr[esi+21176]
	call	@SetPlrHandGoldCurs@4
; Line 1908
	mov	eax, DWORD PTR -8+[ebp]
; Line 1909
	lea	edx, DWORD PTR _plr[esi+21176]
	push	0
	push	0
	mov	eax, DWORD PTR _plr[eax+3664]
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi+21372], eax
	call	@PlrDeadItem@16
; Line 1910
	or	DWORD PTR _i$[ebp], -1
$L85831:
	mov	edx, DWORD PTR _i$[ebp]
	inc	edx
	cmp	edx, DWORD PTR _plr[esi+18188]
	mov	DWORD PTR _i$[ebp], edx
	jl	$L85830
$L85832:
; Line 1915
	mov	ecx, ebx
	call	@CalculateGold@4
	mov	DWORD PTR _plr[esi+460], eax
	pop	edi
	pop	esi
	pop	ebx
; Line 1916
	leave
	ret	0
@DropHalfPlayersGold@4 ENDP
_TEXT	ENDS
EXTRN	_missileactive:BYTE
EXTRN	_missile:BYTE
EXTRN	_nummissiles:DWORD
; Function compile flags: /Ogsy
;	COMDAT @SyncPlrKill@8
_TEXT	SEGMENT
@SyncPlrKill@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _earflag$ = edx
; Line 1920
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 1923
	mov	eax, esi
	mov	ebx, edx
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+408], 0
	jne	SHORT $L85843
	cmp	BYTE PTR _currlevel, 0
	jne	SHORT $L85843
; Line 1924
	push	64					; 00000040H
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	jmp	@SetPlayerHitPoints@8
$L85843:
; Line 1928
	mov	edi, DWORD PTR _nummissiles
	xor	edx, edx
	test	edi, edi
	jle	SHORT $L85846
$L85844:
; Line 1929
	mov	ecx, DWORD PTR _missileactive[edx*4]
; Line 1930
	mov	eax, ecx
	imul	eax, 176				; 000000b0H
	cmp	DWORD PTR _missile[eax], 13		; 0000000dH
	jne	SHORT $L85845
	cmp	DWORD PTR _missile[eax+116], esi
	jne	SHORT $L85845
	cmp	DWORD PTR _missile[eax+52], 0
	je	SHORT $L87240
$L85845:
; Line 1928
	inc	edx
	cmp	edx, edi
	jl	SHORT $L85844
$L85846:
; Line 1939
	xor	edx, edx
	mov	ecx, esi
	call	@SetPlayerHitPoints@8
; Line 1940
	mov	ecx, esi
	mov	edx, ebx
	pop	edi
	pop	esi
	pop	ebx
	jmp	@StartPlayerKill@8
$L87240:
; Line 1931
	cmp	ebx, -1
	je	SHORT $L85840
; Line 1932
	imul	ecx, 176				; 000000b0H
	mov	DWORD PTR _missile[ecx+172], ebx
$L85840:
	pop	edi
	pop	esi
	pop	ebx
; Line 1941
	ret	0
@SyncPlrKill@8 ENDP
_TEXT	ENDS
PUBLIC	@RemovePlrMissiles@4
EXTRN	@M_StartKill@8:NEAR
EXTRN	@AddDead@16:NEAR
EXTRN	_DeleteMonsterList:NEAR
EXTRN	@DeleteMissile@8:NEAR
EXTRN	@ClearMissileSpot@4:NEAR
EXTRN	_monster:BYTE
EXTRN	_dMonster:BYTE
; Function compile flags: /Ogsy
;	COMDAT @RemovePlrMissiles@4
_TEXT	SEGMENT
@RemovePlrMissiles@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1944
	push	ebx
; Line 1947
	xor	ebx, ebx
	cmp	BYTE PTR _currlevel, bl
	push	ebp
	push	esi
	mov	ebp, ecx
	je	$L85854
	mov	ecx, DWORD PTR _myplr
	cmp	ebp, ecx
	jne	SHORT $L85854
	mov	eax, ecx
	xor	esi, esi
	imul	eax, 228				; 000000e4H
	inc	esi
	cmp	DWORD PTR _monster[eax+32], esi
	jne	SHORT $L85855
	cmp	DWORD PTR _monster[eax+36], ebx
	je	SHORT $L85854
$L85855:
; Line 1948
	mov	edx, ecx
	call	@M_StartKill@8
; Line 1949
	mov	eax, DWORD PTR _myplr
	imul	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR _monster[eax+220]
	push	DWORD PTR _monster[eax+72]
	mov	edx, DWORD PTR _monster[eax+36]
	mov	cl, BYTE PTR [ecx+317]
	push	ecx
	mov	ecx, DWORD PTR _monster[eax+32]
	call	@AddDead@16
; Line 1950
	mov	eax, DWORD PTR _myplr
	imul	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR _monster[eax+32]
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _monster[eax+36]
; Line 1951
	mov	DWORD PTR _monster[eax+108], esi
	mov	DWORD PTR _dMonster[ecx*4], ebx
; Line 1952
	call	_DeleteMonsterList
$L85854:
; Line 1955
	cmp	DWORD PTR _nummissiles, ebx
	jle	$L85859
	push	edi
$L85857:
; Line 1956
	mov	edi, DWORD PTR _missileactive[ebx*4]
; Line 1957
	mov	esi, edi
	imul	esi, 176				; 000000b0H
	mov	eax, DWORD PTR _missile[esi]
	cmp	eax, 30					; 0000001eH
	jne	SHORT $L85860
	cmp	DWORD PTR _missile[esi+116], ebp
	jne	SHORT $L85860
; Line 1958
	mov	ecx, DWORD PTR _missile[esi+148]
	mov	edx, DWORD PTR _missile[esi+144]
	imul	ecx, 228				; 000000e4H
	mov	DWORD PTR _monster[ecx+4], edx
$L85860:
; Line 1960
	cmp	eax, 13					; 0000000dH
	jne	SHORT $L85861
	cmp	DWORD PTR _missile[esi+116], ebp
	jne	SHORT $L85861
; Line 1961
	mov	ecx, edi
	call	@ClearMissileSpot@4
; Line 1962
	mov	edx, ebx
	mov	ecx, edi
	call	@DeleteMissile@8
$L85861:
; Line 1964
	cmp	DWORD PTR _missile[esi], 34		; 00000022H
	jne	SHORT $L85858
	cmp	DWORD PTR _missile[esi+116], ebp
	jne	SHORT $L85858
; Line 1965
	mov	ecx, edi
	call	@ClearMissileSpot@4
; Line 1966
	mov	edx, ebx
	mov	ecx, edi
	call	@DeleteMissile@8
$L85858:
	inc	ebx
	cmp	ebx, DWORD PTR _nummissiles
	jl	$L85857
	pop	edi
$L85859:
	pop	esi
	pop	ebp
	pop	ebx
; Line 1969
	ret	0
@RemovePlrMissiles@4 ENDP
_TEXT	ENDS
PUBLIC	@ClrPlrPath@4
PUBLIC	@InitLevelChange@4
EXTRN	_sfx_stop:NEAR
EXTRN	_qtextflag:BYTE
; Function compile flags: /Ogsy
;	COMDAT @InitLevelChange@4
_TEXT	SEGMENT
@InitLevelChange@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 1972
	push	esi
	mov	esi, ecx
; Line 1973
	call	@RemovePlrMissiles@4
; Line 1974
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L85866
	cmp	BYTE PTR _qtextflag, 0
	je	SHORT $L85866
; Line 1975
	and	BYTE PTR _qtextflag, 0
; Line 1976
	call	_sfx_stop
$L85866:
; Line 1979
	mov	ecx, esi
	call	@RemovePlrFromMap@4
; Line 1980
	mov	ecx, esi
	call	@SetPlayerOld@4
; Line 1981
	mov	eax, DWORD PTR _myplr
	cmp	esi, eax
	jne	SHORT $L85867
; Line 1982
	mov	ecx, eax
	imul	ecx, 21720				; 000054d8H
	inc	al
	mov	edx, DWORD PTR _plr[ecx+56]
	mov	ecx, DWORD PTR _plr[ecx+60]
	imul	edx, 112				; 00000070H
	mov	BYTE PTR _dPlayer[edx+ecx], al
; Line 1983
	jmp	SHORT $L85868
$L85867:
; Line 1984
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+52]
	mov	BYTE PTR _plr[ecx+eax+500], 1
$L85868:
; Line 1987
	mov	ecx, esi
	call	@ClrPlrPath@4
; Line 1988
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	or	DWORD PTR _plr[eax+32], -1
; Line 1991
	cmp	esi, DWORD PTR _myplr
	mov	BYTE PTR _plr[eax+319], 1
	pop	esi
	jne	SHORT $L85869
; Line 1992
	mov	BYTE PTR _plr[eax+21626], 10		; 0000000aH
$L85869:
; Line 1994
	ret	0
@InitLevelChange@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@HAPG@StartNewLvl?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0M@CMMB@StartNewLvl?$AA@			; `string'
PUBLIC	@StartNewLvl@12
EXTRN	_setlvlnum:BYTE
EXTRN	_ghMainWnd:DWORD
EXTRN	@NetSendCmdParam2@16:NEAR
EXTRN	__imp__PostMessageA@16:NEAR
;	COMDAT ??_C@_0BP@HAPG@StartNewLvl?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@HAPG@StartNewLvl?3?5illegal?5player?5?$CFd?$AA@ DB 'StartNewLvl'
	DB	': illegal player %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@CMMB@StartNewLvl?$AA@
_DATA	SEGMENT
??_C@_0M@CMMB@StartNewLvl?$AA@ DB 'StartNewLvl', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @StartNewLvl@12
_TEXT	SEGMENT
_lvl$ = 8
@StartNewLvl@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _fom$ = edx
; Line 1998
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
; Line 1999
	call	@InitLevelChange@4
; Line 2001
	cmp	esi, 4
	jb	SHORT $L85878
; Line 2002
	push	esi
	push	OFFSET FLAT:??_C@_0BP@HAPG@StartNewLvl?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85878:
; Line 2005
	mov	ebx, DWORD PTR _lvl$[esp+8]
	cmp	edi, 1026				; 00000402H
	jl	SHORT $L85889
	cmp	edi, 1027				; 00000403H
	jle	$L85885
	cmp	edi, 1028				; 00000404H
	je	$L85885
	cmp	edi, 1029				; 00000405H
	je	$L85886
	cmp	edi, 1031				; 00000407H
	je	$L85885
	cmp	edi, 1032				; 00000408H
	je	SHORT $L85887
	cmp	edi, 1033				; 00000409H
	je	SHORT $L85881
$L85889:
; Line 2024
	push	OFFSET FLAT:??_C@_0M@CMMB@StartNewLvl?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L85881:
; Line 2028
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L85892
; Line 2029
	mov	eax, esi
; Line 2031
	push	0
	imul	eax, 21720				; 000054d8H
	push	0
	push	edi
	push	DWORD PTR _ghMainWnd
	mov	DWORD PTR _plr[eax], 10			; 0000000aH
	mov	BYTE PTR _plr[eax+317], 1
	call	DWORD PTR __imp__PostMessageA@16
; Line 2032
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L85892
; Line 2033
	xor	ecx, ecx
	push	ebx
	push	edi
	mov	dl, 30					; 0000001eH
	inc	ecx
	call	@NetSendCmdParam2@16
$L85892:
	pop	edi
	pop	esi
	pop	ebx
; Line 2036
	ret	4
$L85887:
	mov	eax, DWORD PTR _myplr
	mov	cl, BYTE PTR _leveltype
	imul	eax, 21720				; 000054d8H
	dec	ecx
	mov	dl, 1
	dec	ecx
	lea	eax, DWORD PTR _plr[eax+21624]
	shl	dl, cl
	or	BYTE PTR [eax], dl
$L85885:
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _plr[eax+52], ebx
	jmp	SHORT $L85881
$L85886:
; Line 2015
	mov	BYTE PTR _setlvlnum, bl
; Line 2016
	jmp	$L85881
@StartNewLvl@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@CAAK@RestartTownLvl?3?5illegal?5player?5?$CF@ ; `string'
PUBLIC	@RestartTownLvl@4
;	COMDAT ??_C@_0CC@CAAK@RestartTownLvl?3?5illegal?5player?5?$CF@
_DATA	SEGMENT
??_C@_0CC@CAAK@RestartTownLvl?3?5illegal?5player?5?$CF@ DB 'RestartTownLv'
	DB	'l: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @RestartTownLvl@4
_TEXT	SEGMENT
@RestartTownLvl@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 2038
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 2039
	call	@InitLevelChange@4
; Line 2040
	cmp	edi, 4
	jb	SHORT $L85897
; Line 2041
	push	edi
	push	OFFSET FLAT:??_C@_0CC@CAAK@RestartTownLvl?3?5illegal?5player?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85897:
; Line 2044
	mov	esi, edi
; Line 2047
	push	64					; 00000040H
	imul	esi, 21720				; 000054d8H
	xor	ebx, ebx
	pop	edx
	mov	ecx, edi
	mov	DWORD PTR _plr[esi+52], ebx
	mov	BYTE PTR _plr[esi+317], bl
	call	@SetPlayerHitPoints@8
; Line 2050
	mov	eax, DWORD PTR _plr[esi+424]
; Line 2052
	xor	edx, edx
	sub	eax, DWORD PTR _plr[esi+432]
	mov	ecx, edi
	mov	DWORD PTR _plr[esi+428], ebx
	mov	DWORD PTR _plr[esi+420], eax
	call	@CalcPlrInv@8
; Line 2054
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L85899
; Line 2057
	push	ebx
	push	ebx
	push	1033					; 00000409H
	mov	DWORD PTR _plr[esi], 10			; 0000000aH
	push	DWORD PTR _ghMainWnd
	mov	BYTE PTR _plr[esi+317], 1
	call	DWORD PTR __imp__PostMessageA@16
$L85899:
	pop	edi
	pop	esi
	pop	ebx
; Line 2059
	ret	0
@RestartTownLvl@4 ENDP
_TEXT	ENDS
PUBLIC	@StartWarpLvl@8
EXTRN	_portal:BYTE
EXTRN	@SetCurrentPortal@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @StartWarpLvl@8
_TEXT	SEGMENT
@StartWarpLvl@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _pidx$ = edx
; Line 2062
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
; Line 2063
	call	@InitLevelChange@4
; Line 2065
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L85907
; Line 2066
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	lea	eax, DWORD PTR _plr[eax+52]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L85906
; Line 2067
	and	DWORD PTR [eax], 0
; Line 2068
	jmp	SHORT $L85907
$L85906:
; Line 2069
	lea	ecx, DWORD PTR [edi+edi*2]
	mov	ecx, DWORD PTR _portal[ecx*8+12]
	mov	DWORD PTR [eax], ecx
$L85907:
; Line 2073
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L85908
; Line 2074
	mov	ecx, edi
	call	@SetCurrentPortal@4
; Line 2075
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
; Line 2077
	push	0
	push	0
	push	1030					; 00000406H
	mov	DWORD PTR _plr[eax], 10			; 0000000aH
	push	DWORD PTR _ghMainWnd
	mov	BYTE PTR _plr[eax+317], 1
	call	DWORD PTR __imp__PostMessageA@16
$L85908:
	pop	edi
	pop	esi
; Line 2079
	ret	0
@StartWarpLvl@8 ENDP
_TEXT	ENDS
PUBLIC	@PM_DoStand@4
; Function compile flags: /Ogsy
;	COMDAT @PM_DoStand@4
_TEXT	SEGMENT
@PM_DoStand@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 2083
	xor	eax, eax
; Line 2084
	ret	0
@PM_DoStand@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@MDFO@PM_DoWalk?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PM_DoWalk@4
EXTRN	@ChangeVisionXY@12:NEAR
;	COMDAT ??_C@_0BN@MDFO@PM_DoWalk?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@MDFO@PM_DoWalk?3?5illegal?5player?5?$CFd?$AA@ DB 'PM_DoWalk: il'
	DB	'legal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_DoWalk@4
_TEXT	SEGMENT
@PM_DoWalk@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 2087
	push	ebx
	mov	ebx, ecx
; Line 2090
	cmp	ebx, 4
	push	esi
	jb	SHORT $L85917
; Line 2091
	push	ebx
	push	OFFSET FLAT:??_C@_0BN@MDFO@PM_DoWalk?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85917:
; Line 2096
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[esi+140]
	cmp	eax, 3
	je	SHORT $L85920
	mov	ecx, DWORD PTR _plr[esi+612]
	cmp	ecx, 8
	jne	SHORT $L87268
	cmp	eax, 7
	je	SHORT $L85920
	cmp	ecx, ecx
	je	SHORT $L85919
$L87268:
	cmp	eax, 4
	jne	SHORT $L85919
$L85920:
; Line 2097
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[esi+56]
	xor	ecx, ecx
	call	@PlaySfxLoc@12
$L85919:
; Line 2101
	cmp	BYTE PTR _currlevel, 0
	push	8
	pop	eax
	je	SHORT $L85922
; Line 2102
	movsx	eax, BYTE PTR _plr[esi+352]
	mov	eax, DWORD PTR _PWVel[eax*4+36]
$L85922:
; Line 2105
	cmp	DWORD PTR _plr[esi+496], eax
	jne	$L85923
; Line 2106
	mov	ecx, DWORD PTR _plr[esi+56]
	mov	eax, DWORD PTR _plr[esi+60]
	mov	edx, ecx
	push	edi
	imul	edx, 112				; 00000070H
	and	BYTE PTR _dPlayer[edx+eax], 0
; Line 2107
	mov	edx, DWORD PTR _plr[esi+468]
	add	edx, ecx
; Line 2108
	mov	ecx, DWORD PTR _plr[esi+472]
; Line 2109
	mov	edi, edx
	add	eax, ecx
	imul	edi, 112				; 00000070H
	mov	cl, bl
	mov	DWORD PTR _plr[esi+56], edx
	inc	cl
; Line 2111
	cmp	BYTE PTR _leveltype, 0
	mov	BYTE PTR _dPlayer[edi+eax], cl
	mov	DWORD PTR _plr[esi+60], eax
	pop	edi
	je	SHORT $L85924
; Line 2112
	mov	ecx, DWORD PTR _plr[esi+156]
	push	eax
	call	@ChangeLightXY@12
; Line 2113
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[esi+56]
	mov	ecx, DWORD PTR _plr[esi+160]
	call	@ChangeVisionXY@12
$L85924:
; Line 2116
	cmp	ebx, DWORD PTR _myplr
	jne	SHORT $L85925
	cmp	DWORD PTR _ScrollInfo+16, 0
	je	SHORT $L85925
; Line 2117
	mov	eax, DWORD PTR _plr[esi+56]
	sub	eax, DWORD PTR _ScrollInfo+8
	mov	DWORD PTR _ViewX, eax
; Line 2118
	mov	eax, DWORD PTR _plr[esi+60]
	sub	eax, DWORD PTR _ScrollInfo+12
	mov	DWORD PTR _ViewY, eax
$L85925:
; Line 2121
	cmp	BYTE PTR _plr[esi+4], -1
; Line 2122
	mov	ecx, ebx
	je	SHORT $L85926
	call	@StartWalkStand@4
; Line 2123
	jmp	SHORT $L85927
$L85926:
; Line 2124
	mov	edx, DWORD PTR _plr[esi+476]
	call	@StartStand@8
$L85927:
; Line 2127
	mov	ecx, ebx
	call	@ClearPlrPVars@4
; Line 2128
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85928
; Line 2129
	mov	ecx, DWORD PTR _plr[esi+156]
	push	0
	xor	edx, edx
	call	@ChangeLightOff@12
$L85928:
; Line 2132
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85914
$L85923:
; Line 2135
	mov	ecx, ebx
	call	@PM_ChangeOffset@4
; Line 2136
	xor	eax, eax
$L85914:
	pop	esi
	pop	ebx
; Line 2137
	ret	0
@PM_DoWalk@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@HEIL@PM_DoWalk2?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PM_DoWalk2@4
;	COMDAT ??_C@_0BO@HEIL@PM_DoWalk2?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@HEIL@PM_DoWalk2?3?5illegal?5player?5?$CFd?$AA@ DB 'PM_DoWalk2: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_DoWalk2@4
_TEXT	SEGMENT
@PM_DoWalk2@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 2140
	push	ebx
	mov	ebx, ecx
; Line 2143
	cmp	ebx, 4
	push	esi
	jb	SHORT $L85934
; Line 2144
	push	ebx
	push	OFFSET FLAT:??_C@_0BO@HEIL@PM_DoWalk2?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85934:
; Line 2149
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[esi+140]
	cmp	eax, 3
	je	SHORT $L85937
	mov	ecx, DWORD PTR _plr[esi+612]
	cmp	ecx, 8
	jne	SHORT $L87274
	cmp	eax, 7
	je	SHORT $L85937
	cmp	ecx, ecx
	je	SHORT $L85936
$L87274:
	cmp	eax, 4
	jne	SHORT $L85936
$L85937:
; Line 2150
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[esi+56]
	xor	ecx, ecx
	call	@PlaySfxLoc@12
$L85936:
; Line 2154
	cmp	BYTE PTR _currlevel, 0
	push	8
	pop	eax
	je	SHORT $L85939
; Line 2155
	movsx	eax, BYTE PTR _plr[esi+352]
	mov	eax, DWORD PTR _PWVel[eax*4+36]
$L85939:
; Line 2158
	cmp	DWORD PTR _plr[esi+496], eax
	jne	$L85940
; Line 2159
	mov	eax, DWORD PTR _plr[esi+468]
	mov	ecx, DWORD PTR _plr[esi+472]
	imul	eax, 112				; 00000070H
	and	BYTE PTR _dPlayer[eax+ecx], 0
; Line 2160
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85941
; Line 2161
	mov	ecx, DWORD PTR _plr[esi+156]
	push	ebp
	push	edi
	lea	edi, DWORD PTR _plr[esi+60]
	lea	ebp, DWORD PTR _plr[esi+56]
	push	DWORD PTR [edi]
	mov	edx, DWORD PTR [ebp]
	call	@ChangeLightXY@12
; Line 2162
	push	DWORD PTR [edi]
	mov	edx, DWORD PTR [ebp]
	mov	ecx, DWORD PTR _plr[esi+160]
	call	@ChangeVisionXY@12
	pop	edi
	pop	ebp
$L85941:
; Line 2165
	cmp	ebx, DWORD PTR _myplr
	jne	SHORT $L85942
	cmp	DWORD PTR _ScrollInfo+16, 0
	je	SHORT $L85942
; Line 2166
	mov	eax, DWORD PTR _plr[esi+56]
	sub	eax, DWORD PTR _ScrollInfo+8
	mov	DWORD PTR _ViewX, eax
; Line 2167
	mov	eax, DWORD PTR _plr[esi+60]
	sub	eax, DWORD PTR _ScrollInfo+12
	mov	DWORD PTR _ViewY, eax
$L85942:
; Line 2170
	cmp	BYTE PTR _plr[esi+4], -1
; Line 2171
	mov	ecx, ebx
	je	SHORT $L85943
	call	@StartWalkStand@4
; Line 2172
	jmp	SHORT $L85944
$L85943:
; Line 2173
	mov	edx, DWORD PTR _plr[esi+476]
	call	@StartStand@8
$L85944:
; Line 2176
	mov	ecx, ebx
	call	@ClearPlrPVars@4
; Line 2178
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85945
; Line 2179
	mov	ecx, DWORD PTR _plr[esi+156]
	push	0
	xor	edx, edx
	call	@ChangeLightOff@12
$L85945:
; Line 2182
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85931
$L85940:
; Line 2185
	mov	ecx, ebx
	call	@PM_ChangeOffset@4
; Line 2186
	xor	eax, eax
$L85931:
	pop	esi
	pop	ebx
; Line 2187
	ret	0
@PM_DoWalk2@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@DHHF@PM_DoWalk3?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PM_DoWalk3@4
;	COMDAT ??_C@_0BO@DHHF@PM_DoWalk3?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@DHHF@PM_DoWalk3?3?5illegal?5player?5?$CFd?$AA@ DB 'PM_DoWalk3: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_DoWalk3@4
_TEXT	SEGMENT
@PM_DoWalk3@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 2190
	push	ebx
	mov	ebx, ecx
; Line 2193
	cmp	ebx, 4
	push	esi
	jb	SHORT $L85951
; Line 2194
	push	ebx
	push	OFFSET FLAT:??_C@_0BO@DHHF@PM_DoWalk3?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85951:
; Line 2199
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[esi+140]
	cmp	eax, 3
	je	SHORT $L85954
	mov	ecx, DWORD PTR _plr[esi+612]
	cmp	ecx, 8
	jne	SHORT $L87280
	cmp	eax, 7
	je	SHORT $L85954
	cmp	ecx, ecx
	je	SHORT $L85953
$L87280:
	cmp	eax, 4
	jne	SHORT $L85953
$L85954:
; Line 2200
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[esi+56]
	xor	ecx, ecx
	call	@PlaySfxLoc@12
$L85953:
; Line 2204
	cmp	BYTE PTR _currlevel, 0
	push	8
	pop	eax
	je	SHORT $L85956
; Line 2205
	movsx	eax, BYTE PTR _plr[esi+352]
	mov	eax, DWORD PTR _PWVel[eax*4+36]
$L85956:
; Line 2208
	cmp	DWORD PTR _plr[esi+496], eax
	jne	$L85957
; Line 2209
	mov	eax, DWORD PTR _plr[esi+56]
	mov	ecx, DWORD PTR _plr[esi+60]
	imul	eax, 112				; 00000070H
; Line 2211
	mov	edx, DWORD PTR _plr[esi+468]
	push	edi
	and	BYTE PTR _dPlayer[eax+ecx], 0
	mov	eax, DWORD PTR _plr[esi+480]
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _plr[esi+484]
; Line 2213
	mov	edi, edx
	imul	edi, 112				; 00000070H
	lea	eax, DWORD PTR _dFlags[eax+ecx]
	mov	cl, bl
	mov	DWORD PTR _plr[esi+56], edx
	and	BYTE PTR [eax], -33			; ffffffdfH
	mov	eax, DWORD PTR _plr[esi+472]
	inc	cl
; Line 2215
	cmp	BYTE PTR _leveltype, 0
	mov	BYTE PTR _dPlayer[edi+eax], cl
	mov	DWORD PTR _plr[esi+60], eax
	pop	edi
	je	SHORT $L85958
; Line 2216
	mov	ecx, DWORD PTR _plr[esi+156]
	push	eax
	call	@ChangeLightXY@12
; Line 2217
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[esi+56]
	mov	ecx, DWORD PTR _plr[esi+160]
	call	@ChangeVisionXY@12
$L85958:
; Line 2220
	cmp	ebx, DWORD PTR _myplr
	jne	SHORT $L85959
	cmp	DWORD PTR _ScrollInfo+16, 0
	je	SHORT $L85959
; Line 2221
	mov	eax, DWORD PTR _plr[esi+56]
	sub	eax, DWORD PTR _ScrollInfo+8
	mov	DWORD PTR _ViewX, eax
; Line 2222
	mov	eax, DWORD PTR _plr[esi+60]
	sub	eax, DWORD PTR _ScrollInfo+12
	mov	DWORD PTR _ViewY, eax
$L85959:
; Line 2225
	cmp	BYTE PTR _plr[esi+4], -1
; Line 2226
	mov	ecx, ebx
	je	SHORT $L85960
	call	@StartWalkStand@4
; Line 2227
	jmp	SHORT $L85961
$L85960:
; Line 2228
	mov	edx, DWORD PTR _plr[esi+476]
	call	@StartStand@8
$L85961:
; Line 2231
	mov	ecx, ebx
	call	@ClearPlrPVars@4
; Line 2233
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85962
; Line 2234
	mov	ecx, DWORD PTR _plr[esi+156]
	push	0
	xor	edx, edx
	call	@ChangeLightOff@12
$L85962:
; Line 2237
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85948
$L85957:
; Line 2240
	mov	ecx, ebx
	call	@PM_ChangeOffset@4
; Line 2241
	xor	eax, eax
$L85948:
	pop	esi
	pop	ebx
; Line 2242
	ret	0
@PM_DoWalk3@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@DLID@WeaponDur?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@WeaponDur@8
EXTRN	@NetSendCmdDelItem@8:NEAR
;	COMDAT ??_C@_0BN@DLID@WeaponDur?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@DLID@WeaponDur?3?5illegal?5player?5?$CFd?$AA@ DB 'WeaponDur: il'
	DB	'legal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @WeaponDur@8
_TEXT	SEGMENT
@WeaponDur@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _durrnd$ = edx
; Line 2245
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
; Line 2246
	cmp	edi, DWORD PTR _myplr
; Line 2247
	jne	$L85984
; Line 2250
	mov	cl, 3
	call	@random@8
	test	eax, eax
; Line 2251
	jne	$L85984
; Line 2254
	cmp	edi, 4
	jb	SHORT $L85971
; Line 2255
	push	edi
	push	OFFSET FLAT:??_C@_0BN@DLID@WeaponDur?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85971:
; Line 2258
	mov	esi, edi
	xor	ebx, ebx
	imul	esi, 21720				; 000054d8H
	inc	ebx
	mov	edx, 255				; 000000ffH
	mov	ebp, DWORD PTR _plr[esi+2372]
	cmp	ebp, -1
	je	SHORT $L85975
	cmp	BYTE PTR _plr[esi+2554], bl
	jne	SHORT $L85975
; Line 2259
	lea	eax, DWORD PTR _plr[esi+2600]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, edx
; Line 2260
	je	$L85984
; Line 2263
	dec	ecx
; Line 2264
	test	ecx, ecx
	mov	DWORD PTR [eax], ecx
; Line 2268
	je	SHORT $L87289
$L85975:
; Line 2272
	cmp	DWORD PTR _plr[esi+2740], -1
	je	SHORT $L85978
	cmp	BYTE PTR _plr[esi+2922], bl
	jne	SHORT $L85978
; Line 2273
	lea	eax, DWORD PTR _plr[esi+2968]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, edx
; Line 2274
	je	SHORT $L85984
; Line 2277
	dec	ecx
; Line 2278
	test	ecx, ecx
	mov	DWORD PTR [eax], ecx
	jne	SHORT $L85978
$L87290:
; Line 2279
	mov	dl, 5
	mov	ecx, ebx
	call	@NetSendCmdDelItem@8
; Line 2280
	or	DWORD PTR _plr[esi+2740], -1
; Line 2282
	jmp	SHORT $L87288
$L85978:
; Line 2286
	cmp	ebp, -1
	jne	SHORT $L85981
	mov	eax, DWORD PTR _plr[esi+2740]
	cmp	eax, 5
	jne	SHORT $L85981
; Line 2287
	lea	eax, DWORD PTR _plr[esi+2968]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, edx
; Line 2288
	je	SHORT $L85984
; Line 2291
	dec	ecx
; Line 2292
	test	ecx, ecx
	mov	DWORD PTR [eax], ecx
; Line 2296
	je	SHORT $L87290
$L85981:
; Line 2300
	cmp	DWORD PTR _plr[esi+2740], -1
	jne	SHORT $L85984
	cmp	ebp, 5
	jne	SHORT $L85984
; Line 2301
	lea	eax, DWORD PTR _plr[esi+2600]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, edx
; Line 2302
	je	SHORT $L85984
; Line 2305
	dec	ecx
; Line 2306
	test	ecx, ecx
	mov	DWORD PTR [eax], ecx
	jne	SHORT $L85984
$L87289:
; Line 2307
	mov	dl, 4
	mov	ecx, ebx
	call	@NetSendCmdDelItem@8
; Line 2308
	or	DWORD PTR _plr[esi+2372], -1
$L87288:
; Line 2309
	mov	edx, ebx
	mov	ecx, edi
	call	@CalcPlrInv@8
; Line 2310
	mov	eax, ebx
	jmp	SHORT $L85967
$L85984:
; Line 2314
	xor	eax, eax
$L85967:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2315
	ret	0
@WeaponDur@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@GGFI@PlrHitMonst?3?5illegal?5monster?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BP@HEFI@PlrHitMonst?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PlrHitMonst@8
EXTRN	@M_GetKnockback@4:NEAR
EXTRN	@M_StartHit@12:NEAR
EXTRN	@CheckMonsterHit@8:NEAR
;	COMDAT ??_C@_0CA@GGFI@PlrHitMonst?3?5illegal?5monster?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@GGFI@PlrHitMonst?3?5illegal?5monster?5?$CFd?$AA@ DB 'PlrHitMons'
	DB	't: illegal monster %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@HEFI@PlrHitMonst?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@HEFI@PlrHitMonst?3?5illegal?5player?5?$CFd?$AA@ DB 'PlrHitMonst'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PlrHitMonst@8
_TEXT	SEGMENT
_pnum$ = -12
_m$ = -8
_rv$ = -20
_ret$ = -24
_hit$ = -4
_mind$ = -20
_lvl$ = -20
_phanditype$ = -4
_tac$ = -24
@PlrHitMonst@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _m$ = edx
; Line 2318
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	mov	ebx, edx
	mov	esi, ecx
; Line 2322
	cmp	ebx, 200				; 000000c8H
	push	edi
	mov	DWORD PTR _m$[ebp], ebx
	mov	DWORD PTR _pnum$[ebp], esi
	jb	SHORT $L86003
; Line 2323
	push	ebx
	push	OFFSET FLAT:??_C@_0CA@GGFI@PlrHitMonst?3?5illegal?5monster?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86003:
; Line 2326
	imul	ebx, 228				; 000000e4H
	mov	DWORD PTR -16+[ebp], ebx
	test	DWORD PTR _monster[ebx+148], -64	; ffffffc0H
; Line 2327
	jle	SHORT $L87301
; Line 2330
	mov	eax, DWORD PTR _monster[ebx+220]
	cmp	BYTE PTR [eax], 32			; 00000020H
	jne	SHORT $L86006
	cmp	BYTE PTR _monster[ebx+8], 2
; Line 2331
	je	SHORT $L87301
$L86006:
; Line 2334
	cmp	DWORD PTR _monster[ebx+4], 14		; 0000000eH
	jne	SHORT $L86007
$L87301:
; Line 2335
	xor	eax, eax
	jmp	$L85989
$L86007:
; Line 2338
	cmp	esi, 4
	jb	SHORT $L86009
; Line 2339
	push	esi
	push	OFFSET FLAT:??_C@_0BP@HEFI@PlrHitMonst?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86009:
; Line 2342
	and	DWORD PTR _rv$[ebp], 0
; Line 2344
	push	100					; 00000064H
	pop	edx
	mov	cl, 4
	call	@random@8
; Line 2345
	cmp	DWORD PTR _monster[ebx+4], 15		; 0000000fH
	mov	DWORD PTR _hit$[ebp], eax
	jne	SHORT $L86011
; Line 2346
	and	DWORD PTR _hit$[ebp], 0
$L86011:
; Line 2349
	imul	esi, 21720				; 000054d8H
	movzx	ecx, BYTE PTR _monster[ebx+202]
	mov	eax, DWORD PTR _plr[esi+372]
	sar	eax, 1
	sub	eax, ecx
	movsx	ecx, BYTE PTR _plr[esi+440]
	add	eax, DWORD PTR _plr[esi+21600]
; Line 2350
	cmp	BYTE PTR _plr[esi+352], 0
	lea	edi, DWORD PTR [eax+ecx+50]
	jne	SHORT $L86012
; Line 2351
	add	edi, 20					; 00000014H
$L86012:
; Line 2353
	add	edi, DWORD PTR _plr[esi+21560]
; Line 2354
	cmp	edi, 5
	jge	SHORT $L86013
; Line 2355
	push	5
	pop	edi
$L86013:
; Line 2357
	cmp	edi, 95					; 0000005fH
	jle	SHORT $L86014
; Line 2358
	push	95					; 0000005fH
	pop	edi
$L86014:
; Line 2361
	mov	ecx, DWORD PTR _m$[ebp]
	lea	edx, DWORD PTR _ret$[ebp]
	call	@CheckMonsterHit@8
	test	eax, eax
	je	SHORT $L86015
; Line 2362
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$L85989
$L86015:
; Line 2367
	cmp	DWORD PTR _hit$[ebp], edi
	jge	$L86016
; Line 2369
	mov	eax, DWORD PTR _plr[esi+21544]
; Line 2371
	mov	edx, DWORD PTR _plr[esi+21548]
	sub	edx, eax
	mov	cl, 5
	inc	edx
	mov	DWORD PTR _mind$[ebp], eax
	call	@random@8
	mov	edi, eax
; Line 2372
	mov	eax, DWORD PTR _plr[esi+21556]
	add	edi, DWORD PTR _mind$[ebp]
	push	100					; 00000064H
	pop	ecx
	imul	eax, edi
	cdq
	idiv	ecx
	add	eax, DWORD PTR _plr[esi+21568]
	add	eax, DWORD PTR _plr[esi+392]
	add	edi, eax
; Line 2373
	cmp	BYTE PTR _plr[esi+352], 0
	jne	SHORT $L86018
; Line 2374
	movsx	eax, BYTE PTR _plr[esi+440]
; Line 2375
	push	ecx
	mov	cl, 6
	pop	edx
	mov	DWORD PTR _lvl$[ebp], eax
	call	@random@8
	cmp	eax, DWORD PTR _lvl$[ebp]
	jge	SHORT $L86018
; Line 2376
	add	edi, edi
$L86018:
; Line 2381
	mov	eax, DWORD PTR _plr[esi+2372]
	or	DWORD PTR _phanditype$[ebp], -1
	xor	ecx, ecx
	inc	ecx
	cmp	eax, ecx
	je	SHORT $L86020
	cmp	DWORD PTR _plr[esi+2740], ecx
	jne	SHORT $L86019
$L86020:
; Line 2382
	mov	DWORD PTR _phanditype$[ebp], ecx
$L86019:
; Line 2384
	push	4
	pop	ecx
	cmp	eax, ecx
	je	SHORT $L86022
	cmp	DWORD PTR _plr[esi+2740], ecx
	jne	SHORT $L86021
$L86022:
; Line 2385
	mov	DWORD PTR _phanditype$[ebp], ecx
$L86021:
; Line 2388
	mov	eax, DWORD PTR _monster[ebx+224]
	mov	dl, BYTE PTR [eax+114]
; Line 2389
	movsx	eax, dl
	sub	eax, 0
	je	SHORT $L86027
	dec	eax
	dec	eax
	jne	SHORT $L86029
; Line 2399
	cmp	DWORD PTR _phanditype$[ebp], ecx
	jne	SHORT $L86031
; Line 2400
	mov	eax, edi
	sar	eax, 1
	sub	edi, eax
$L86031:
; Line 2402
	cmp	DWORD PTR _phanditype$[ebp], 1
; Line 2405
	jmp	SHORT $L87299
$L86027:
; Line 2391
	cmp	DWORD PTR _phanditype$[ebp], 1
	jne	SHORT $L86028
; Line 2392
	mov	eax, edi
	sar	eax, 1
	sub	edi, eax
$L86028:
; Line 2394
	cmp	DWORD PTR _phanditype$[ebp], ecx
$L87299:
	jne	SHORT $L86029
; Line 2395
	mov	eax, edi
	sar	eax, 1
	add	edi, eax
$L86029:
; Line 2408
	mov	eax, DWORD PTR _plr[esi+21584]
	test	eax, 1073741824				; 40000000H
	je	SHORT $L86033
	cmp	dl, 1
	jne	SHORT $L86033
; Line 2409
	lea	edi, DWORD PTR [edi+edi*2]
$L86033:
; Line 2413
	mov	ecx, DWORD PTR _pnum$[ebp]
	shl	edi, 6
	cmp	ecx, DWORD PTR _myplr
	jne	SHORT $L86034
; Line 2414
	sub	DWORD PTR _monster[ebx+148], edi
$L86034:
; Line 2417
	test	al, 2
	je	SHORT $L87294
; Line 2418
	mov	edx, edi
	mov	cl, 7
	sar	edx, 3
	call	@random@8
; Line 2420
	mov	edx, DWORD PTR _plr[esi+412]
	lea	ecx, DWORD PTR _plr[esi+408]
	add	DWORD PTR [ecx], eax
	mov	ebx, DWORD PTR [ecx]
	cmp	ebx, edx
	jle	SHORT $L86036
; Line 2421
	mov	DWORD PTR [ecx], edx
$L86036:
; Line 2424
	mov	edx, DWORD PTR _plr[esi+404]
	lea	ecx, DWORD PTR _plr[esi+400]
	add	DWORD PTR [ecx], eax
	mov	ebx, DWORD PTR [ecx]
	cmp	ebx, edx
	jle	SHORT $L86037
; Line 2425
	mov	DWORD PTR [ecx], edx
$L86037:
; Line 2427
	mov	ebx, DWORD PTR -16+[ebp]
	mov	DWORD PTR _drawhpflag, 1
	jmp	SHORT $L86035
$L87294:
	mov	eax, DWORD PTR _tac$[ebp]
$L86035:
; Line 2429
	mov	ecx, DWORD PTR _plr[esi+21584]
	test	ch, 96					; 00000060H
	mov	DWORD PTR -4+[ebp], ecx
	je	SHORT $L86038
	test	ecx, 134217728				; 08000000H
	jne	SHORT $L86038
; Line 2430
	test	ch, 32					; 00000020H
	je	SHORT $L86039
; Line 2431
	lea	eax, DWORD PTR [edi+edi*2]
	push	100					; 00000064H
	cdq
	pop	ebx
	idiv	ebx
$L86039:
; Line 2433
	test	ch, 64					; 00000040H
	je	SHORT $L86040
; Line 2434
	lea	eax, DWORD PTR [edi+edi*4]
	push	100					; 00000064H
	cdq
	pop	ecx
	idiv	ecx
$L86040:
; Line 2437
	mov	edx, DWORD PTR _plr[esi+432]
	lea	ecx, DWORD PTR _plr[esi+428]
	add	DWORD PTR [ecx], eax
	mov	ebx, DWORD PTR [ecx]
	cmp	ebx, edx
	jle	SHORT $L86041
; Line 2438
	mov	DWORD PTR [ecx], edx
$L86041:
; Line 2441
	mov	edx, DWORD PTR _plr[esi+424]
	lea	ecx, DWORD PTR _plr[esi+420]
	add	DWORD PTR [ecx], eax
	mov	ebx, DWORD PTR [ecx]
	cmp	ebx, edx
	jle	SHORT $L86042
; Line 2442
	mov	DWORD PTR [ecx], edx
$L86042:
; Line 2444
	mov	ecx, DWORD PTR -4+[ebp]
	mov	ebx, DWORD PTR -16+[ebp]
	mov	DWORD PTR _drawmanaflag, 1
$L86038:
; Line 2446
	test	ecx, 98304				; 00018000H
	je	SHORT $L86043
; Line 2447
	test	ch, ch
	jns	SHORT $L86044
; Line 2448
	lea	eax, DWORD PTR [edi+edi*2]
	push	100					; 00000064H
	cdq
	pop	ebx
	idiv	ebx
$L86044:
; Line 2450
	test	ecx, 65536				; 00010000H
	je	SHORT $L86045
; Line 2451
	lea	eax, DWORD PTR [edi+edi*4]
	push	100					; 00000064H
	cdq
	pop	ecx
	idiv	ecx
$L86045:
; Line 2454
	mov	edx, DWORD PTR _plr[esi+412]
	lea	ecx, DWORD PTR _plr[esi+408]
	add	DWORD PTR [ecx], eax
	mov	ebx, DWORD PTR [ecx]
	cmp	ebx, edx
	jle	SHORT $L86046
; Line 2455
	mov	DWORD PTR [ecx], edx
$L86046:
; Line 2457
	lea	ecx, DWORD PTR _plr[esi+400]
; Line 2458
	mov	esi, DWORD PTR _plr[esi+404]
	add	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [ecx]
	cmp	eax, esi
	jle	SHORT $L86047
; Line 2459
	mov	DWORD PTR [ecx], esi
$L86047:
; Line 2461
	mov	ecx, DWORD PTR -4+[ebp]
	mov	ebx, DWORD PTR -16+[ebp]
	mov	DWORD PTR _drawhpflag, 1
$L86043:
; Line 2463
	test	ch, 1
	je	SHORT $L86048
; Line 2464
	or	DWORD PTR _monster[ebx+156], 8
$L86048:
; Line 2471
	test	DWORD PTR _monster[ebx+148], -64	; ffffffc0H
; Line 2472
	push	15					; 0000000fH
	pop	esi
	jg	SHORT $L86049
	cmp	DWORD PTR _monster[ebx+4], esi
; Line 2473
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _pnum$[ebp]
	jne	SHORT $L86050
	call	@M_StartKill@8
$L87300:
; Line 2474
	mov	DWORD PTR _monster[ebx+4], esi
; Line 2475
	jmp	SHORT $L86054
$L86050:
; Line 2476
	call	@M_StartKill@8
; Line 2478
	jmp	SHORT $L86054
$L86049:
; Line 2479
	cmp	DWORD PTR _monster[ebx+4], esi
	jne	SHORT $L86053
; Line 2480
	mov	edx, DWORD PTR _pnum$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	push	edi
	call	@M_StartHit@12
; Line 2482
	jmp	SHORT $L87300
$L86053:
; Line 2483
	test	ch, 8
	je	SHORT $L86055
; Line 2484
	mov	ecx, DWORD PTR _m$[ebp]
	call	@M_GetKnockback@4
$L86055:
; Line 2486
	mov	edx, DWORD PTR _pnum$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	push	edi
	call	@M_StartHit@12
$L86054:
; Line 2489
	mov	DWORD PTR _rv$[ebp], 1
$L86016:
; Line 2492
	mov	eax, DWORD PTR _rv$[ebp]
$L85989:
	pop	edi
	pop	esi
	pop	ebx
; Line 2493
	leave
	ret	0
@PlrHitMonst@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@KION@PlrHitPlr?3?5illegal?5target?5player@ ; `string'
PUBLIC	??_C@_0CH@KPE@PlrHitPlr?3?5illegal?5attacking?5pla@ ; `string'
PUBLIC	@PlrHitPlr@8
EXTRN	@GetDirection@16:NEAR
EXTRN	@NetSendCmdDamage@12:NEAR
;	COMDAT ??_C@_0CE@KION@PlrHitPlr?3?5illegal?5target?5player@
_DATA	SEGMENT
??_C@_0CE@KION@PlrHitPlr?3?5illegal?5target?5player@ DB 'PlrHitPlr: illeg'
	DB	'al target player %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CH@KPE@PlrHitPlr?3?5illegal?5attacking?5pla@
_DATA	SEGMENT
??_C@_0CH@KPE@PlrHitPlr?3?5illegal?5attacking?5pla@ DB 'PlrHitPlr: illega'
	DB	'l attacking player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PlrHitPlr@8
_TEXT	SEGMENT
_pnum$ = -20
_p$ = -4
_rv$ = -12
_hit$ = -16
@PlrHitPlr@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _p$ = dl
; Line 2496
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	mov	bl, dl
	mov	esi, ecx
; Line 2500
	cmp	bl, 4
	push	edi
	mov	BYTE PTR _p$[ebp], bl
	mov	DWORD PTR _pnum$[ebp], esi
	jb	SHORT $L86074
; Line 2501
	movsx	eax, bl
	push	eax
	push	OFFSET FLAT:??_C@_0CE@KION@PlrHitPlr?3?5illegal?5target?5player@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86074:
; Line 2506
	movsx	edi, bl
	mov	DWORD PTR -8+[ebp], edi
	imul	edi, 21720				; 000054d8H
	and	DWORD PTR _rv$[ebp], 0
	cmp	BYTE PTR _plr[edi+317], 0
; Line 2507
	jne	SHORT $L87306
; Line 2510
	test	BYTE PTR _plr[edi+288], 1
	je	SHORT $L86077
$L87306:
; Line 2511
	xor	eax, eax
	jmp	$L86060
$L86077:
; Line 2514
	cmp	esi, 4
	jb	SHORT $L86079
; Line 2515
	push	esi
	push	OFFSET FLAT:??_C@_0CH@KPE@PlrHitPlr?3?5illegal?5attacking?5pla@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86079:
; Line 2518
	push	100					; 00000064H
	mov	cl, 4
	pop	edx
	call	@random@8
; Line 2520
	imul	esi, 21720				; 000054d8H
	mov	DWORD PTR _hit$[ebp], eax
	mov	eax, DWORD PTR _plr[edi+372]
	push	5
	mov	ecx, DWORD PTR _plr[esi+372]
	cdq
	pop	ebx
	idiv	ebx
	sar	ecx, 1
	sub	ecx, DWORD PTR _plr[edi+21552]
	sub	ecx, DWORD PTR _plr[edi+21564]
	sub	ecx, eax
; Line 2522
	cmp	BYTE PTR _plr[esi+352], 0
	movsx	eax, BYTE PTR _plr[esi+440]
	lea	ebx, DWORD PTR [ecx+eax+50]
	jne	SHORT $L86081
; Line 2523
	add	ebx, 20					; 00000014H
$L86081:
; Line 2525
	add	ebx, DWORD PTR _plr[esi+21560]
; Line 2526
	cmp	ebx, 5
	jge	SHORT $L86082
; Line 2527
	push	5
	pop	ebx
$L86082:
; Line 2529
	cmp	ebx, 95					; 0000005fH
	jle	SHORT $L86083
; Line 2530
	push	95					; 0000005fH
	pop	ebx
$L86083:
; Line 2533
	mov	eax, DWORD PTR _plr[edi]
	test	eax, eax
	je	SHORT $L86085
	cmp	eax, 4
	jne	SHORT $L86084
$L86085:
	cmp	BYTE PTR _plr[edi+316], 0
	je	SHORT $L86084
; Line 2534
	push	100					; 00000064H
	mov	cl, 5
	pop	edx
	call	@random@8
; Line 2535
	jmp	SHORT $L86086
$L86084:
; Line 2536
	push	100					; 00000064H
	pop	eax
$L86086:
; Line 2539
	movsx	ecx, BYTE PTR _plr[edi+440]
	movsx	edx, BYTE PTR _plr[esi+440]
	add	ecx, ecx
	add	edx, edx
	sub	ecx, edx
	add	ecx, DWORD PTR _plr[edi+396]
	add	ecx, DWORD PTR _plr[edi+372]
; Line 2540
	jns	SHORT $L86087
; Line 2541
	xor	ecx, ecx
$L86087:
; Line 2543
	cmp	ecx, 100				; 00000064H
	jle	SHORT $L86088
; Line 2544
	push	100					; 00000064H
	pop	ecx
$L86088:
; Line 2547
	cmp	DWORD PTR _hit$[ebp], ebx
	jge	$L86089
; Line 2548
	cmp	eax, ecx
	jge	SHORT $L86090
; Line 2549
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[edi+60]
	mov	ecx, DWORD PTR _plr[edi+56]
	push	DWORD PTR _plr[esi+56]
	call	@GetDirection@16
; Line 2550
	mov	ecx, DWORD PTR -8+[ebp]
	mov	edx, eax
	call	@StartPlrBlock@8
; Line 2551
	jmp	$L86091
$L86090:
; Line 2552
	mov	ebx, DWORD PTR _plr[esi+21544]
; Line 2554
	mov	edx, DWORD PTR _plr[esi+21548]
	sub	edx, ebx
	mov	cl, 5
	inc	edx
	call	@random@8
	mov	edi, eax
; Line 2555
	mov	eax, DWORD PTR _plr[esi+21556]
	add	edi, ebx
	push	100					; 00000064H
	imul	eax, edi
	cdq
	pop	ecx
	idiv	ecx
	add	eax, DWORD PTR _plr[esi+21568]
	add	eax, DWORD PTR _plr[esi+392]
	add	edi, eax
; Line 2557
	cmp	BYTE PTR _plr[esi+352], 0
	jne	SHORT $L86093
; Line 2558
	movsx	ebx, BYTE PTR _plr[esi+440]
; Line 2559
	push	ecx
	mov	cl, 6
	pop	edx
	call	@random@8
	cmp	eax, ebx
	jge	SHORT $L86093
; Line 2560
	add	edi, edi
$L86093:
; Line 2563
	shl	edi, 6
; Line 2564
	test	BYTE PTR _plr[esi+21584], 2
	je	SHORT $L86094
; Line 2565
	mov	edx, edi
	mov	cl, 7
	sar	edx, 3
	call	@random@8
; Line 2567
	mov	edx, DWORD PTR _plr[esi+412]
	lea	ecx, DWORD PTR _plr[esi+408]
	add	DWORD PTR [ecx], eax
	mov	ebx, DWORD PTR [ecx]
	cmp	ebx, edx
	jle	SHORT $L86095
; Line 2568
	mov	DWORD PTR [ecx], edx
$L86095:
; Line 2570
	lea	ecx, DWORD PTR _plr[esi+400]
; Line 2571
	mov	esi, DWORD PTR _plr[esi+404]
	add	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [ecx]
	cmp	eax, esi
	jle	SHORT $L86096
; Line 2572
	mov	DWORD PTR [ecx], esi
$L86096:
; Line 2574
	mov	DWORD PTR _drawhpflag, 1
$L86094:
; Line 2576
	mov	eax, DWORD PTR _pnum$[ebp]
	cmp	eax, DWORD PTR _myplr
	jne	SHORT $L86097
; Line 2577
	mov	dl, BYTE PTR _p$[ebp]
	xor	ecx, ecx
	push	edi
	inc	ecx
	call	@NetSendCmdDamage@12
$L86097:
; Line 2579
	mov	ecx, DWORD PTR -8+[ebp]
	push	0
	mov	edx, edi
	call	@StartPlrHit@12
$L86091:
; Line 2582
	mov	DWORD PTR _rv$[ebp], 1
$L86089:
; Line 2585
	mov	eax, DWORD PTR _rv$[ebp]
$L86060:
	pop	edi
	pop	esi
	pop	ebx
; Line 2586
	leave
	ret	0
@PlrHitPlr@8 ENDP
_TEXT	ENDS
PUBLIC	@PlrHitObj@12
EXTRN	@BreakObject@8:NEAR
EXTRN	_object:BYTE
EXTRN	_dObject:BYTE
; Function compile flags: /Ogsy
;	COMDAT @PlrHitObj@12
_TEXT	SEGMENT
_my$ = 8
@PlrHitObj@12 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _mx$ = edx
; Line 2592
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _my$[esp-4]
	mov	dl, BYTE PTR _dObject[edx+eax]
	test	dl, dl
	jle	SHORT $L86106
; Line 2593
	movsx	edx, dl
	dec	edx
; Line 2594
	jmp	SHORT $L86107
$L86106:
; Line 2595
	movsx	eax, dl
	or	edx, -1
	sub	edx, eax
$L86107:
; Line 2598
	mov	eax, edx
	imul	eax, 120				; 00000078H
	cmp	BYTE PTR _object[eax+52], 1
	jne	SHORT $L86108
; Line 2599
	call	@BreakObject@8
; Line 2600
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86104
$L86108:
; Line 2603
	xor	eax, eax
$L86104:
; Line 2604
	ret	4
@PlrHitObj@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@LIBL@PM_DoAttack?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PM_DoAttack@4
EXTRN	_FriendlyMode:DWORD
EXTRN	@CanTalkToMonst@4:NEAR
EXTRN	@AddMissile@40:NEAR
;	COMDAT ??_C@_0BP@LIBL@PM_DoAttack?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@LIBL@PM_DoAttack?3?5illegal?5player?5?$CFd?$AA@ DB 'PM_DoAttack'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_DoAttack@4
_TEXT	SEGMENT
_pnum$ = -4
@PM_DoAttack@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 2607
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 2611
	cmp	esi, 4
	mov	DWORD PTR _pnum$[ebp], esi
	jb	SHORT $L86119
; Line 2612
	push	esi
	push	OFFSET FLAT:??_C@_0BP@LIBL@PM_DoAttack?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86119:
; Line 2615
	imul	esi, 21720				; 000054d8H
; Line 2616
	mov	ecx, DWORD PTR _plr[esi+21584]
	mov	eax, DWORD PTR _plr[esi+140]
	test	ecx, 131072				; 00020000H
	je	SHORT $L86121
	cmp	eax, 1
	jne	SHORT $L86121
; Line 2617
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR _plr[esi+140], edx
$L86121:
; Line 2619
	test	ecx, 262144				; 00040000H
	je	SHORT $L86122
	cmp	eax, 1
	je	SHORT $L86123
	cmp	eax, 3
	jne	SHORT $L86122
$L86123:
; Line 2620
	inc	DWORD PTR _plr[esi+140]
$L86122:
; Line 2622
	test	ecx, 524288				; 00080000H
	je	SHORT $L86124
	cmp	eax, 1
	je	SHORT $L86125
	cmp	eax, 3
	je	SHORT $L86125
	cmp	eax, 5
	jne	SHORT $L86124
$L86125:
; Line 2623
	inc	DWORD PTR _plr[esi+140]
$L86124:
; Line 2625
	test	ecx, 1048576				; 00100000H
	je	SHORT $L86126
	cmp	eax, 1
	je	SHORT $L86127
	cmp	eax, 4
	jne	SHORT $L86126
$L86127:
; Line 2626
	add	DWORD PTR _plr[esi+140], 2
$L86126:
; Line 2628
	lea	edi, DWORD PTR _plr[esi+660]
	mov	eax, DWORD PTR [edi]
	dec	eax
	cmp	DWORD PTR _plr[esi+140], eax
	jne	SHORT $L86128
; Line 2629
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[esi+56]
	push	9
	pop	ecx
	call	@PlaySfxLoc@12
$L86128:
; Line 2632
	mov	eax, DWORD PTR _plr[esi+140]
	cmp	eax, DWORD PTR [edi]
	jne	$L86146
; Line 2633
	mov	eax, DWORD PTR _plr[esi+112]
; Line 2637
	xor	ecx, ecx
	shl	eax, 2
	mov	ebx, DWORD PTR _offset_x[eax]
	mov	edi, DWORD PTR _offset_y[eax]
	add	ebx, DWORD PTR _plr[esi+56]
	add	edi, DWORD PTR _plr[esi+60]
	mov	eax, ebx
	imul	eax, 112				; 00000070H
	add	eax, edi
	mov	DWORD PTR -8+[ebp], eax
	mov	edx, DWORD PTR _dMonster[eax*4]
	cmp	edx, ecx
	je	SHORT $L86133
; Line 2638
	jle	SHORT $L86131
; Line 2639
	lea	ecx, DWORD PTR [edx-1]
; Line 2640
	jmp	SHORT $L86132
$L86131:
; Line 2641
	or	ecx, -1
	sub	ecx, edx
$L86132:
; Line 2643
	call	@CanTalkToMonst@4
	test	eax, eax
	je	SHORT $L87313
; Line 2644
	and	DWORD PTR _plr[esi+468], 0
; Line 2645
	jmp	$L86147
$L87313:
	mov	eax, DWORD PTR -8+[ebp]
	xor	ecx, ecx
$L86133:
; Line 2649
	test	BYTE PTR _plr[esi+21584], 16		; 00000010H
	je	SHORT $L86134
; Line 2650
	push	ecx
	push	ecx
	push	DWORD PTR _pnum$[ebp]
	mov	edx, edi
	push	ecx
	push	64					; 00000040H
	push	ecx
	push	ecx
	push	1
	mov	ecx, ebx
	call	@AddMissile@40
	mov	eax, DWORD PTR -8+[ebp]
	xor	ecx, ecx
$L86134:
; Line 2652
	test	BYTE PTR _plr[esi+21584], 32		; 00000020H
	je	SHORT $L86135
; Line 2653
	push	ecx
	push	ecx
	push	DWORD PTR _pnum$[ebp]
	mov	edx, edi
	push	ecx
	push	64					; 00000040H
	push	ecx
	push	ecx
	push	2
	mov	ecx, ebx
	call	@AddMissile@40
	mov	eax, DWORD PTR -8+[ebp]
	xor	ecx, ecx
$L86135:
; Line 2657
	mov	edx, DWORD PTR _dMonster[eax*4]
	cmp	edx, ecx
	je	SHORT $L86136
; Line 2659
	jle	SHORT $L86137
; Line 2660
	lea	eax, DWORD PTR [edx-1]
; Line 2661
	jmp	SHORT $L86138
$L86137:
; Line 2662
	or	eax, -1
	sub	eax, edx
$L86138:
; Line 2664
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, eax
	call	@PlrHitMonst@8
; Line 2665
	jmp	SHORT $L86145
$L86136:
	mov	dl, BYTE PTR _dPlayer[eax]
	test	dl, dl
	je	SHORT $L86140
	cmp	DWORD PTR _FriendlyMode, ecx
	jne	SHORT $L86140
; Line 2667
	test	dl, dl
	jle	SHORT $L86142
; Line 2668
	dec	dl
	mov	al, dl
; Line 2669
	jmp	SHORT $L86143
$L86142:
; Line 2670
	or	al, 255					; 000000ffH
	sub	al, dl
$L86143:
; Line 2672
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	dl, al
	call	@PlrHitPlr@8
; Line 2673
	jmp	SHORT $L86145
$L86140:
	cmp	BYTE PTR _dObject[eax], 0
	jle	SHORT $L86146
; Line 2674
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	edi
	mov	edx, ebx
	call	@PlrHitObj@12
$L86145:
; Line 2677
	test	eax, eax
	je	SHORT $L86146
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	30					; 0000001eH
	pop	edx
	call	@WeaponDur@8
	test	eax, eax
	je	SHORT $L86146
$L87317:
; Line 2678
	mov	edx, DWORD PTR _plr[esi+112]
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@StartStand@8
; Line 2679
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@ClearPlrPVars@4
; Line 2680
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86148
$L86146:
; Line 2684
	mov	eax, DWORD PTR _plr[esi+140]
	cmp	eax, DWORD PTR _plr[esi+652]
; Line 2687
	je	SHORT $L87317
$L86147:
; Line 2689
	xor	eax, eax
$L86148:
	pop	edi
	pop	esi
	pop	ebx
; Line 2691
	leave
	ret	0
@PM_DoAttack@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@HOIC@PM_DoRangeAttack?3?5illegal?5player@ ; `string'
PUBLIC	@PM_DoRangeAttack@4
;	COMDAT ??_C@_0CE@HOIC@PM_DoRangeAttack?3?5illegal?5player@
_DATA	SEGMENT
??_C@_0CE@HOIC@PM_DoRangeAttack?3?5illegal?5player@ DB 'PM_DoRangeAttack:'
	DB	' illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_DoRangeAttack@4
_TEXT	SEGMENT
@PM_DoRangeAttack@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 2694
	push	esi
	push	edi
	mov	edi, ecx
; Line 2697
	cmp	edi, 4
	jb	SHORT $L86155
; Line 2698
	push	edi
	push	OFFSET FLAT:??_C@_0CE@HOIC@PM_DoRangeAttack?3?5illegal?5player@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86155:
; Line 2701
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
; Line 2702
	mov	ecx, DWORD PTR _plr[esi+21584]
	mov	eax, DWORD PTR _plr[esi+140]
	test	ecx, 131072				; 00020000H
	je	SHORT $L86157
	cmp	eax, 1
	jne	SHORT $L86157
; Line 2703
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR _plr[esi+140], edx
$L86157:
; Line 2705
	test	ecx, 262144				; 00040000H
	je	SHORT $L86158
	cmp	eax, 1
	je	SHORT $L86159
	cmp	eax, 3
	jne	SHORT $L86158
$L86159:
; Line 2706
	inc	DWORD PTR _plr[esi+140]
$L86158:
; Line 2709
	mov	eax, DWORD PTR _plr[esi+140]
	cmp	eax, DWORD PTR _plr[esi+660]
	jne	SHORT $L86163
; Line 2710
	xor	eax, eax
; Line 2711
	test	cl, 8
	je	SHORT $L86161
; Line 2712
	push	27					; 0000001bH
	pop	eax
$L86161:
; Line 2714
	test	ecx, 33554432				; 02000000H
	je	SHORT $L86162
; Line 2715
	push	56					; 00000038H
	pop	eax
$L86162:
; Line 2727
	push	0
	push	4
	push	edi
	push	0
	push	eax
	mov	edx, DWORD PTR _plr[esi+60]
	push	DWORD PTR _plr[esi+112]
	mov	ecx, DWORD PTR _plr[esi+56]
	push	DWORD PTR _plr[esi+472]
	push	DWORD PTR _plr[esi+468]
	call	@AddMissile@40
; Line 2729
	push	DWORD PTR _plr[esi+60]
	mov	edx, DWORD PTR _plr[esi+56]
	push	4
	pop	ecx
	call	@PlaySfxLoc@12
; Line 2731
	mov	ecx, edi
	push	40					; 00000028H
	pop	edx
	call	@WeaponDur@8
	test	eax, eax
	je	SHORT $L86163
$L87320:
; Line 2732
	mov	edx, DWORD PTR _plr[esi+112]
	mov	ecx, edi
	call	@StartStand@8
; Line 2733
	mov	ecx, edi
	call	@ClearPlrPVars@4
; Line 2734
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86165
$L86163:
; Line 2738
	mov	eax, DWORD PTR _plr[esi+140]
	cmp	eax, DWORD PTR _plr[esi+652]
; Line 2741
	jge	SHORT $L87320
; Line 2743
	xor	eax, eax
$L86165:
	pop	edi
	pop	esi
; Line 2745
	ret	0
@PM_DoRangeAttack@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@LPGN@ShieldDur?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@ShieldDur@4
;	COMDAT ??_C@_0BN@LPGN@ShieldDur?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@LPGN@ShieldDur?3?5illegal?5player?5?$CFd?$AA@ DB 'ShieldDur: il'
	DB	'legal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @ShieldDur@4
_TEXT	SEGMENT
@ShieldDur@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 2748
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 2749
	cmp	edi, DWORD PTR _myplr
	jne	$L86178
; Line 2753
	cmp	edi, 4
	jb	SHORT $L86171
; Line 2754
	push	edi
	push	OFFSET FLAT:??_C@_0BN@LPGN@ShieldDur?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86171:
; Line 2757
	mov	esi, edi
	mov	ebx, 255				; 000000ffH
	imul	esi, 21720				; 000054d8H
	cmp	DWORD PTR _plr[esi+2372], 5
	jne	SHORT $L86175
; Line 2758
	lea	eax, DWORD PTR _plr[esi+2600]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebx
	je	SHORT $L86178
; Line 2762
	dec	ecx
; Line 2763
	test	ecx, ecx
	mov	DWORD PTR [eax], ecx
	jne	SHORT $L86175
; Line 2764
	mov	dl, 4
	inc	ecx
	call	@NetSendCmdDelItem@8
; Line 2765
	or	DWORD PTR _plr[esi+2372], -1
; Line 2766
	xor	edx, edx
	inc	edx
	mov	ecx, edi
	call	@CalcPlrInv@8
$L86175:
; Line 2770
	cmp	DWORD PTR _plr[esi+2740], 5
	jne	SHORT $L86178
; Line 2771
	lea	eax, DWORD PTR _plr[esi+2968]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebx
	je	SHORT $L86178
; Line 2772
	dec	ecx
; Line 2773
	test	ecx, ecx
	mov	DWORD PTR [eax], ecx
	jne	SHORT $L86178
; Line 2774
	mov	dl, 5
	inc	ecx
	call	@NetSendCmdDelItem@8
; Line 2775
	or	DWORD PTR _plr[esi+2740], -1
; Line 2776
	mov	ecx, edi
	xor	edx, edx
	pop	edi
	pop	esi
	inc	edx
	pop	ebx
	jmp	@CalcPlrInv@8
$L86178:
	pop	edi
	pop	esi
	pop	ebx
; Line 2780
	ret	0
@ShieldDur@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@IAHL@PM_DoBlock?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PM_DoBlock@4
;	COMDAT ??_C@_0BO@IAHL@PM_DoBlock?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@IAHL@PM_DoBlock?3?5illegal?5player?5?$CFd?$AA@ DB 'PM_DoBlock: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_DoBlock@4
_TEXT	SEGMENT
@PM_DoBlock@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 2783
	push	esi
	mov	esi, ecx
; Line 2784
	cmp	esi, 4
	jb	SHORT $L86183
; Line 2785
	push	esi
	push	OFFSET FLAT:??_C@_0BO@IAHL@PM_DoBlock?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86183:
; Line 2788
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	test	BYTE PTR _plr[eax+21587], 1
	je	SHORT $L86185
	lea	ecx, DWORD PTR _plr[eax+140]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $L86185
; Line 2789
	mov	edx, DWORD PTR _plr[eax+884]
	mov	DWORD PTR [ecx], edx
$L86185:
; Line 2792
	mov	ecx, DWORD PTR _plr[eax+140]
	cmp	ecx, DWORD PTR _plr[eax+884]
	jl	SHORT $L86186
; Line 2793
	mov	edx, DWORD PTR _plr[eax+112]
	mov	ecx, esi
	call	@StartStand@8
; Line 2794
	mov	ecx, esi
	call	@ClearPlrPVars@4
; Line 2796
	mov	cl, 3
	push	10					; 0000000aH
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $L86187
; Line 2797
	mov	ecx, esi
	call	@ShieldDur@4
$L86187:
; Line 2799
	xor	eax, eax
	pop	esi
	inc	eax
; Line 2803
	ret	0
$L86186:
; Line 2802
	xor	eax, eax
	pop	esi
; Line 2803
	ret	0
@PM_DoBlock@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@EJDO@PM_DoSpell?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PM_DoSpell@4
EXTRN	@CastSpell@32:NEAR
EXTRN	__allshl:NEAR
;	COMDAT ??_C@_0BO@EJDO@PM_DoSpell?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@EJDO@PM_DoSpell?3?5illegal?5player?5?$CFd?$AA@ DB 'PM_DoSpell: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_DoSpell@4
_TEXT	SEGMENT
@PM_DoSpell@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 2806
	push	esi
	push	edi
	mov	edi, ecx
; Line 2807
	cmp	edi, 4
	jb	SHORT $L86192
; Line 2808
	push	edi
	push	OFFSET FLAT:??_C@_0BO@EJDO@PM_DoSpell?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86192:
; Line 2811
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[esi+496]
	cmp	eax, DWORD PTR _plr[esi+768]
	jne	$L86201
; Line 2820
	push	DWORD PTR _plr[esi+480]
	mov	edx, DWORD PTR _plr[esi+164]
	mov	ecx, edi
	push	0
	push	DWORD PTR _plr[esi+472]
	push	DWORD PTR _plr[esi+468]
	push	DWORD PTR _plr[esi+60]
	push	DWORD PTR _plr[esi+56]
	call	@CastSpell@32
; Line 2822
	cmp	BYTE PTR _plr[esi+169], 0
	jne	$L86201
; Line 2823
	cmp	BYTE PTR _plr[esi+184], 2
	jne	SHORT $L86198
; Line 2825
	mov	ecx, DWORD PTR _plr[esi+180]
	xor	eax, eax
	dec	ecx
	inc	eax
	xor	edx, edx
	call	__allshl
	and	eax, DWORD PTR _plr[esi+280]
	and	edx, DWORD PTR _plr[esi+284]
	or	eax, edx
	jne	SHORT $L86198
; Line 2826
	or	DWORD PTR _plr[esi+180], -1
; Line 2827
	mov	BYTE PTR _plr[esi+184], 4
; Line 2828
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
$L86198:
; Line 2832
	cmp	BYTE PTR _plr[esi+184], 3
	jne	SHORT $L86201
; Line 2834
	mov	ecx, DWORD PTR _plr[esi+180]
	xor	eax, eax
	dec	ecx
	inc	eax
	xor	edx, edx
	call	__allshl
	and	eax, DWORD PTR _plr[esi+21576]
	and	edx, DWORD PTR _plr[esi+21580]
	or	eax, edx
	jne	SHORT $L86201
; Line 2835
	or	DWORD PTR _plr[esi+180], -1
; Line 2836
	mov	BYTE PTR _plr[esi+184], 4
; Line 2837
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
$L86201:
; Line 2843
	inc	DWORD PTR _plr[esi+496]
; Line 2845
	cmp	BYTE PTR _leveltype, 0
	mov	eax, DWORD PTR _plr[esi+496]
	jne	SHORT $L86202
; Line 2846
	cmp	eax, DWORD PTR _plr[esi+760]
	jle	SHORT $L86205
; Line 2847
	mov	ecx, edi
	call	@StartWalkStand@4
; Line 2849
	jmp	SHORT $L87333
$L86202:
; Line 2851
	mov	eax, DWORD PTR _plr[esi+140]
	cmp	eax, DWORD PTR _plr[esi+760]
	jne	SHORT $L86205
; Line 2852
	mov	edx, DWORD PTR _plr[esi+112]
	mov	ecx, edi
	call	@StartStand@8
$L87333:
; Line 2853
	mov	ecx, edi
	call	@ClearPlrPVars@4
; Line 2854
	xor	eax, eax
	inc	eax
	jmp	SHORT $L86190
$L86205:
; Line 2857
	xor	eax, eax
$L86190:
	pop	edi
	pop	esi
; Line 2858
	ret	0
@PM_DoSpell@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@GEBL@PM_DoGotHit?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PM_DoGotHit@4
PUBLIC	@ArmorDur@4
;	COMDAT ??_C@_0BP@GEBL@PM_DoGotHit?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@GEBL@PM_DoGotHit?3?5illegal?5player?5?$CFd?$AA@ DB 'PM_DoGotHit'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_DoGotHit@4
_TEXT	SEGMENT
@PM_DoGotHit@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 2862
	push	esi
	mov	esi, ecx
; Line 2865
	cmp	esi, 4
	jb	SHORT $L86211
; Line 2866
	push	esi
	push	OFFSET FLAT:??_C@_0BP@GEBL@PM_DoGotHit?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86211:
; Line 2869
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
; Line 2870
	mov	edx, DWORD PTR _plr[eax+21584]
	mov	ecx, DWORD PTR _plr[eax+140]
	test	edx, 2097152				; 00200000H
	je	SHORT $L86213
	cmp	ecx, 3
	jne	SHORT $L86213
	push	edi
; Line 2871
	lea	edi, DWORD PTR [ecx+1]
	mov	DWORD PTR _plr[eax+140], edi
	pop	edi
$L86213:
; Line 2873
	test	edx, 4194304				; 00400000H
	je	SHORT $L86214
	cmp	ecx, 3
	je	SHORT $L86215
	cmp	ecx, 5
	jne	SHORT $L86214
$L86215:
; Line 2874
	inc	DWORD PTR _plr[eax+140]
$L86214:
; Line 2876
	test	edx, 8388608				; 00800000H
	je	SHORT $L86216
	cmp	ecx, 1
	je	SHORT $L86217
	cmp	ecx, 3
	je	SHORT $L86217
	cmp	ecx, 5
	jne	SHORT $L86216
$L86217:
; Line 2877
	inc	DWORD PTR _plr[eax+140]
$L86216:
; Line 2880
	mov	ecx, DWORD PTR _plr[eax+140]
	cmp	ecx, DWORD PTR _plr[eax+804]
	jl	SHORT $L86218
; Line 2881
	mov	edx, DWORD PTR _plr[eax+112]
	mov	ecx, esi
	call	@StartStand@8
; Line 2882
	mov	ecx, esi
	call	@ClearPlrPVars@4
; Line 2883
	mov	cl, 3
	push	4
	pop	edx
	call	@random@8
	test	eax, eax
	je	SHORT $L86219
; Line 2884
	mov	ecx, esi
	call	@ArmorDur@4
$L86219:
; Line 2887
	xor	eax, eax
	pop	esi
	inc	eax
; Line 2891
	ret	0
$L86218:
; Line 2890
	xor	eax, eax
	pop	esi
; Line 2891
	ret	0
@PM_DoGotHit@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@GNCJ@ArmorDur?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BM@GNCJ@ArmorDur?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BM@GNCJ@ArmorDur?3?5illegal?5player?5?$CFd?$AA@ DB 'ArmorDur: ille'
	DB	'gal player %d', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @ArmorDur@4
_TEXT	SEGMENT
@ArmorDur@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 2894
	push	ebx
	push	ebp
	mov	ebp, ecx
	push	esi
; Line 2899
	cmp	ebp, DWORD PTR _myplr
	push	edi
	jne	$L86222
; Line 2903
	cmp	ebp, 4
	jb	SHORT $L86228
; Line 2904
	push	ebp
	push	OFFSET FLAT:??_C@_0BM@GNCJ@ArmorDur?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86228:
; Line 2907
	mov	esi, ebp
; Line 2908
	or	ebx, -1
	imul	esi, 21720				; 000054d8H
	add	esi, OFFSET FLAT:_plr
	lea	edi, DWORD PTR [esi+3108]
	cmp	DWORD PTR [edi], ebx
	jne	SHORT $L86230
	cmp	DWORD PTR [esi+900], ebx
	je	SHORT $L86222
$L86230:
; Line 2912
	push	3
	mov	cl, 8
	pop	edx
	call	@random@8
; Line 2913
	mov	edi, DWORD PTR [edi]
	cmp	edi, ebx
	je	SHORT $L87343
	cmp	DWORD PTR [esi+900], ebx
	jne	SHORT $L86231
; Line 2914
	xor	eax, eax
	inc	eax
$L86231:
; Line 2916
	cmp	edi, ebx
	jne	SHORT $L86232
$L87343:
	cmp	DWORD PTR [esi+900], ebx
	je	SHORT $L86232
; Line 2917
	xor	eax, eax
$L86232:
; Line 2920
	test	eax, eax
	je	SHORT $L86233
; Line 2921
	add	esi, 3100				; 00000c1cH
; Line 2922
	jmp	SHORT $L86234
$L86233:
; Line 2923
	add	esi, 892				; 0000037cH
$L86234:
; Line 2925
	lea	edx, DWORD PTR [esi+236]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, 255				; 000000ffH
	je	SHORT $L86222
; Line 2929
	dec	ecx
; Line 2930
	test	ecx, ecx
	mov	DWORD PTR [edx], ecx
	jne	SHORT $L86222
; Line 2935
	inc	ecx
	test	eax, eax
	je	SHORT $L86237
	mov	dl, 6
; Line 2936
	jmp	SHORT $L87344
$L86237:
; Line 2937
	xor	dl, dl
$L87344:
	call	@NetSendCmdDelItem@8
; Line 2939
	mov	DWORD PTR [esi+8], ebx
; Line 2940
	xor	edx, edx
	pop	edi
	mov	ecx, ebp
	pop	esi
	pop	ebp
	inc	edx
	pop	ebx
	jmp	@CalcPlrInv@8
$L86222:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2941
	ret	0
@ArmorDur@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CJCI@PM_DoDeath?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@PM_DoDeath@4
EXTRN	_gamemenu_previous:NEAR
;	COMDAT ??_C@_0BO@CJCI@PM_DoDeath?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@CJCI@PM_DoDeath?3?5illegal?5player?5?$CFd?$AA@ DB 'PM_DoDeath: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PM_DoDeath@4
_TEXT	SEGMENT
@PM_DoDeath@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 2944
	push	esi
	push	edi
	mov	edi, ecx
; Line 2945
	cmp	edi, 4
	jb	SHORT $L86243
; Line 2946
	push	edi
	push	OFFSET FLAT:??_C@_0BO@CJCI@PM_DoDeath?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86243:
; Line 2949
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[esi+844]
	add	eax, eax
	cmp	DWORD PTR _plr[esi+496], eax
	jl	SHORT $L86245
; Line 2950
	xor	eax, eax
	inc	eax
	cmp	DWORD PTR _deathdelay, eax
	jle	SHORT $L86248
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L86248
; Line 2951
	dec	DWORD PTR _deathdelay
; Line 2952
	je	SHORT $L86248
; Line 2954
	cmp	BYTE PTR _gbMaxPlayers, al
	mov	DWORD PTR _deathflag, eax
	jne	SHORT $L86248
; Line 2955
	call	_gamemenu_previous
$L86248:
; Line 2960
	mov	eax, DWORD PTR _plr[esi+136]
; Line 2962
	mov	ecx, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _plr[esi+140], eax
	mov	eax, DWORD PTR _plr[esi+56]
	imul	eax, 112				; 00000070H
	mov	DWORD PTR _plr[esi+128], 10000		; 00002710H
	lea	eax, DWORD PTR _dFlags[eax+ecx]
	or	BYTE PTR [eax], 4
$L86245:
; Line 2965
	mov	eax, DWORD PTR _plr[esi+496]
	cmp	eax, 100				; 00000064H
	jge	SHORT $L86249
; Line 2966
	inc	eax
	mov	DWORD PTR _plr[esi+496], eax
$L86249:
	pop	edi
; Line 2969
	xor	eax, eax
	pop	esi
; Line 2970
	ret	0
@PM_DoDeath@4 ENDP
_TEXT	ENDS
PUBLIC	@PM_DoNewLvl@4
; Function compile flags: /Ogsy
;	COMDAT @PM_DoNewLvl@4
_TEXT	SEGMENT
@PM_DoNewLvl@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 2975
	xor	eax, eax
; Line 2976
	ret	0
@PM_DoNewLvl@4 ENDP
_TEXT	ENDS
PUBLIC	@MakePlrPath@16
PUBLIC	??_C@_0CA@IONG@CheckNewPath?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	@CheckNewPath@4
EXTRN	@TryDisarm@8:NEAR
EXTRN	@OperateObject@12:NEAR
EXTRN	@TalkToTowner@8:NEAR
EXTRN	@TalktoMonster@4:NEAR
EXTRN	@NetSendCmdGItem@20:NEAR
;	COMDAT ??_C@_0CA@IONG@CheckNewPath?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@IONG@CheckNewPath?3?5illegal?5player?5?$CFd?$AA@ DB 'CheckNewPa'
	DB	'th: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @CheckNewPath@4
_TEXT	SEGMENT
_pnum$ = -4
_i$ = -12
_x$ = -8
_y$ = -16
@CheckNewPath@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 2979
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 2983
	cmp	edi, 4
	mov	DWORD PTR _pnum$[ebp], edi
	jb	SHORT $L86264
; Line 2984
	push	edi
	push	OFFSET FLAT:??_C@_0CA@IONG@CheckNewPath?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86264:
; Line 2987
	mov	ebx, edi
	push	20					; 00000014H
	imul	ebx, 21720				; 000054d8H
	pop	esi
	cmp	DWORD PTR _plr[ebx+32], esi
	jne	SHORT $L86266
; Line 2988
	mov	eax, DWORD PTR _plr[ebx+36]
	push	0
	imul	eax, 228				; 000000e4H
	mov	ecx, edi
	push	DWORD PTR _monster[eax+44]
	mov	edx, DWORD PTR _monster[eax+40]
	call	@MakePlrPath@16
$L86266:
; Line 2991
	cmp	DWORD PTR _plr[ebx+32], 21		; 00000015H
	jne	SHORT $L86267
; Line 2992
	mov	eax, DWORD PTR _plr[ebx+36]
	push	0
	imul	eax, 21720				; 000054d8H
	mov	ecx, edi
	push	DWORD PTR _plr[eax+68]
	mov	edx, DWORD PTR _plr[eax+64]
	call	@MakePlrPath@16
$L86267:
; Line 2995
	cmp	BYTE PTR _plr[ebx+4], -1
	je	$L86268
; Line 2996
	cmp	DWORD PTR _plr[ebx], 0
	jne	$L86363
; Line 2997
	cmp	edi, DWORD PTR _myplr
	jne	$L86275
; Line 2998
	mov	eax, DWORD PTR _plr[ebx+32]
	cmp	eax, esi
	je	SHORT $L86272
	cmp	eax, 21					; 00000015H
	jne	$L86275
$L86272:
; Line 2999
	mov	ecx, DWORD PTR _plr[ebx+36]
; Line 3001
	cmp	eax, esi
; Line 3002
	mov	eax, DWORD PTR _plr[ebx+64]
	mov	DWORD PTR _i$[ebp], ecx
	mov	esi, ecx
	jne	SHORT $L86273
	imul	esi, 228				; 000000e4H
	sub	eax, DWORD PTR _monster[esi+40]
	push	eax
	call	_abs
; Line 3003
	lea	edi, DWORD PTR _plr[ebx+68]
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR [edi]
	sub	eax, DWORD PTR _monster[esi+44]
	push	eax
	call	_abs
; Line 3004
	mov	edx, DWORD PTR [edi]
	pop	ecx
	pop	ecx
	push	DWORD PTR _monster[esi+44]
	push	DWORD PTR _monster[esi+40]
; Line 3005
	jmp	SHORT $L87365
$L86273:
; Line 3006
	imul	esi, 21720				; 000054d8H
	sub	eax, DWORD PTR _plr[esi+64]
	push	eax
	call	_abs
	mov	DWORD PTR _x$[ebp], eax
; Line 3007
	mov	eax, DWORD PTR _plr[ebx+68]
	lea	edi, DWORD PTR _plr[esi+68]
	sub	eax, DWORD PTR [edi]
	push	eax
	call	_abs
; Line 3008
	mov	edx, DWORD PTR _plr[ebx+68]
	pop	ecx
	pop	ecx
	push	DWORD PTR [edi]
	push	DWORD PTR _plr[esi+64]
$L87365:
	mov	ecx, DWORD PTR _plr[ebx+64]
	mov	DWORD PTR _y$[ebp], eax
	call	@GetDirection@16
; Line 3011
	cmp	DWORD PTR _x$[ebp], 2
	mov	esi, eax
	jge	SHORT $L86275
	cmp	DWORD PTR _y$[ebp], 2
	jge	SHORT $L86275
; Line 3012
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@ClrPlrPath@4
; Line 3013
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, ecx
	imul	eax, 228				; 000000e4H
	mov	eax, DWORD PTR _monster[eax+208]
	test	eax, eax
	je	SHORT $L86276
	cmp	eax, 36					; 00000024H
	je	SHORT $L86276
; Line 3014
	call	@TalktoMonster@4
; Line 3015
	jmp	SHORT $L86277
$L86276:
; Line 3016
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, esi
	call	@StartAttack@8
$L86277:
; Line 3018
	or	DWORD PTR _plr[ebx+32], -1
$L86275:
; Line 3023
	cmp	BYTE PTR _currlevel, 0
	je	SHORT $L86278
; Line 3024
	movsx	eax, BYTE PTR _plr[ebx+352]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 2
	mov	ecx, DWORD PTR _PWVel[eax]
; Line 3025
	mov	edx, DWORD PTR _PWVel[eax+4]
; Line 3026
	mov	eax, DWORD PTR _PWVel[eax+8]
; Line 3027
	jmp	SHORT $L86279
$L86278:
; Line 3028
	mov	ecx, 2048				; 00000800H
; Line 3029
	mov	edx, 1024				; 00000400H
; Line 3030
	mov	eax, 512				; 00000200H
$L86279:
; Line 3033
	movsx	esi, BYTE PTR _plr[ebx+4]
	dec	esi
	cmp	esi, 7
	ja	$L86281
	jmp	DWORD PTR $L87390[esi*4]
$L86284:
; Line 3035
	push	1
	push	4
	push	-1
	push	-1
	neg	edx
	push	edx
	xor	edx, edx
; Line 3036
	jmp	$L87366
$L86285:
; Line 3038
	push	2
	push	5
	push	-1
	push	0
	neg	eax
; Line 3039
	jmp	SHORT $L87367
$L86286:
; Line 3041
	push	3
	push	6
	push	0
	push	1
	push	-1
	push	1
	push	-16					; fffffff0H
	push	-32					; ffffffe0H
	mov	edx, ecx
; Line 3042
	jmp	SHORT $L87383
$L86287:
; Line 3044
	push	4
	push	7
	push	0
	push	1
	push	-16					; fffffff0H
	push	-32					; ffffffe0H
; Line 3045
	jmp	SHORT $L87384
$L86288:
; Line 3047
	push	5
	push	0
	push	1
	push	1
	push	-32					; ffffffe0H
	push	0
	push	edx
	xor	edx, edx
; Line 3048
	jmp	SHORT $L87369
$L86289:
; Line 3050
	push	6
	push	1
	push	1
	push	0
	push	-16					; fffffff0H
	push	32					; 00000020H
	neg	edx
$L87384:
	push	eax
$L87369:
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@StartWalk2@36
; Line 3051
	jmp	SHORT $L86281
$L86290:
; Line 3053
	push	7
	push	2
	push	1
	push	0
	push	1
	push	-1
	mov	edx, ecx
	push	-16					; fffffff0H
	push	32					; 00000020H
	neg	edx
$L87383:
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	0
	call	@StartWalk3@44
; Line 3054
	jmp	SHORT $L86281
$L86291:
; Line 3056
	push	8
	push	3
	push	0
	push	-1
	neg	eax
	neg	edx
$L87367:
	push	eax
$L87366:
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@StartWalk@28
$L86281:
; Line 3061
	push	24					; 00000018H
	lea	esi, DWORD PTR _plr[ebx+5]
	pop	ecx
	lea	edi, DWORD PTR _plr[ebx+4]
	rep movsb
; Line 3064
	or	BYTE PTR _plr[ebx+28], -1
; Line 3066
	cmp	DWORD PTR _plr[ebx], 0
	jne	$L86363
; Line 3067
	mov	edx, DWORD PTR _plr[ebx+112]
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@StartStand@8
; Line 3072
	jmp	$L87370
$L86268:
; Line 3074
	mov	eax, DWORD PTR _plr[ebx+32]
	cmp	eax, -1
	je	$L86363
; Line 3078
	mov	ecx, DWORD PTR _plr[ebx]
	test	ecx, ecx
	jne	$L86297
; Line 3079
	add	eax, -9					; fffffff7H
	cmp	eax, 17					; 00000011H
	ja	$L86337
	jmp	DWORD PTR $L87391[eax*4]
$L86302:
; Line 3081
	push	DWORD PTR _plr[ebx+40]
	mov	edx, DWORD PTR _plr[ebx+60]
	mov	ecx, DWORD PTR _plr[ebx+56]
	push	DWORD PTR _plr[ebx+36]
; Line 3083
	jmp	$L87387
$L86303:
; Line 3085
	mov	edi, DWORD PTR _plr[ebx+36]
; Line 3086
	mov	eax, DWORD PTR _plr[ebx+56]
	mov	esi, edi
	imul	esi, 228				; 000000e4H
	sub	eax, DWORD PTR _monster[esi+40]
	push	eax
	call	_abs
	mov	DWORD PTR _x$[ebp], eax
; Line 3087
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, DWORD PTR _monster[esi+44]
	push	eax
	call	_abs
; Line 3088
	cmp	DWORD PTR _x$[ebp], 1
	pop	ecx
	pop	ecx
	jg	$L86337
	cmp	eax, 1
	jg	$L86337
; Line 3089
	push	DWORD PTR _monster[esi+44]
	mov	edx, DWORD PTR _plr[ebx+68]
	mov	ecx, DWORD PTR _plr[ebx+64]
	push	DWORD PTR _monster[esi+40]
	call	@GetDirection@16
; Line 3090
	mov	esi, DWORD PTR _monster[esi+208]
	test	esi, esi
	je	$L86305
	cmp	esi, 36					; 00000024H
	je	$L86305
; Line 3092
	jmp	$L87373
$L86307:
; Line 3098
	mov	esi, DWORD PTR _plr[ebx+36]
; Line 3099
	mov	eax, DWORD PTR _plr[ebx+56]
	imul	esi, 21720				; 000054d8H
	sub	eax, DWORD PTR _plr[esi+64]
	push	eax
	call	_abs
	mov	DWORD PTR _x$[ebp], eax
; Line 3100
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, DWORD PTR _plr[esi+68]
	push	eax
	call	_abs
; Line 3101
	cmp	DWORD PTR _x$[ebp], 1
	pop	ecx
	pop	ecx
	jg	$L86337
	cmp	eax, 1
	jg	$L86337
; Line 3102
	push	DWORD PTR _plr[esi+68]
	mov	edx, DWORD PTR _plr[ebx+68]
	mov	ecx, DWORD PTR _plr[ebx+64]
	push	DWORD PTR _plr[esi+64]
$L87387:
	call	@GetDirection@16
; Line 3103
	mov	ecx, edi
; Line 3105
	jmp	$L87385
$L86309:
; Line 3107
	mov	edx, DWORD PTR _plr[ebx+60]
	mov	ecx, DWORD PTR _plr[ebx+56]
	lea	esi, DWORD PTR _plr[ebx+40]
	lea	edi, DWORD PTR _plr[ebx+36]
; Line 3109
	jmp	SHORT $L87386
$L86310:
; Line 3111
	mov	edi, DWORD PTR _plr[ebx+36]
; Line 3112
	mov	edx, DWORD PTR _plr[ebx+68]
	mov	esi, edi
	mov	ecx, DWORD PTR _plr[ebx+64]
	imul	esi, 228				; 000000e4H
	push	DWORD PTR _monster[esi+44]
	push	DWORD PTR _monster[esi+40]
	call	@GetDirection@16
; Line 3113
	mov	ecx, DWORD PTR _monster[esi+208]
	test	ecx, ecx
	je	SHORT $L86311
	cmp	ecx, 36					; 00000024H
	je	SHORT $L86311
$L87373:
; Line 3114
	mov	ecx, edi
	call	@TalktoMonster@4
; Line 3115
	jmp	$L86337
$L86311:
; Line 3116
	push	DWORD PTR _monster[esi+44]
	push	DWORD PTR _monster[esi+40]
; Line 3118
	jmp	SHORT $L87377
$L86313:
; Line 3120
	mov	eax, DWORD PTR _plr[ebx+36]
; Line 3121
	mov	edx, DWORD PTR _plr[ebx+68]
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[ebx+64]
	lea	esi, DWORD PTR _plr[eax+68]
	lea	edi, DWORD PTR _plr[eax+64]
$L87386:
	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	@GetDirection@16
; Line 3122
	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
$L87377:
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, eax
	call	@StartRangeAttack@16
; Line 3123
	jmp	$L86337
$L86314:
; Line 3125
	mov	edx, DWORD PTR _plr[ebx+60]
	mov	ecx, DWORD PTR _plr[ebx+56]
	lea	esi, DWORD PTR _plr[ebx+40]
	lea	edi, DWORD PTR _plr[ebx+36]
	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	@GetDirection@16
; Line 3126
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, eax
	push	DWORD PTR [edi]
	call	@StartSpell@16
; Line 3127
	mov	eax, DWORD PTR _plr[ebx+44]
; Line 3128
	jmp	$L87376
$L86315:
; Line 3130
	push	DWORD PTR _plr[ebx+40]
	lea	esi, DWORD PTR _plr[ebx+44]
	mov	ecx, edi
	push	DWORD PTR _plr[ebx+36]
	mov	edx, DWORD PTR [esi]
	call	@StartSpell@16
; Line 3131
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _plr[ebx+476], eax
; Line 3132
	mov	eax, DWORD PTR _plr[ebx+48]
; Line 3133
	jmp	SHORT $L87376
$L86316:
; Line 3135
	mov	eax, DWORD PTR _plr[ebx+36]
; Line 3136
	imul	eax, 228				; 000000e4H
	lea	esi, DWORD PTR _monster[eax+44]
	lea	edi, DWORD PTR _monster[eax+40]
; Line 3139
	jmp	SHORT $L87375
$L86317:
; Line 3141
	mov	eax, DWORD PTR _plr[ebx+36]
; Line 3142
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+68]
	lea	edi, DWORD PTR _plr[eax+64]
$L87375:
	push	DWORD PTR [esi]
	mov	edx, DWORD PTR _plr[ebx+60]
	mov	ecx, DWORD PTR _plr[ebx+56]
	push	DWORD PTR [edi]
	call	@GetDirection@16
; Line 3143
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, eax
	push	DWORD PTR [edi]
	call	@StartSpell@16
; Line 3144
	mov	eax, DWORD PTR _plr[ebx+40]
$L87376:
	mov	DWORD PTR _plr[ebx+480], eax
; Line 3145
	jmp	$L86337
$L86318:
; Line 3147
	mov	esi, DWORD PTR _plr[ebx+36]
; Line 3148
	mov	eax, DWORD PTR _plr[ebx+56]
	mov	DWORD PTR _i$[ebp], esi
	imul	esi, 120				; 00000078H
	sub	eax, DWORD PTR _object[esi+4]
	push	eax
	call	_abs
	mov	DWORD PTR _x$[ebp], eax
; Line 3149
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, DWORD PTR _object[esi+8]
	push	eax
	call	_abs
	pop	ecx
; Line 3150
	cmp	eax, 1
	pop	ecx
	jle	SHORT $L86319
	mov	edx, DWORD PTR _object[esi+4]
	mov	ecx, DWORD PTR _object[esi+8]
	imul	edx, 112				; 00000070H
	or	edi, -1
	movsx	edx, BYTE PTR _dObject[edx+ecx-1]
	sub	edi, DWORD PTR _i$[ebp]
	cmp	edx, edi
	jne	SHORT $L86319
; Line 3151
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, ecx
	inc	eax
	push	eax
	call	_abs
	pop	ecx
$L86319:
; Line 3153
	cmp	DWORD PTR _x$[ebp], 1
	jg	$L86337
	cmp	eax, 1
	jg	$L86337
; Line 3154
	cmp	BYTE PTR _object[esi+52], 1
; Line 3157
	je	$L87371
$L87388:
; Line 3158
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	0
; Line 3161
	jmp	$L87374
$L86323:
; Line 3163
	mov	esi, DWORD PTR _plr[ebx+36]
; Line 3164
	mov	eax, DWORD PTR _plr[ebx+56]
	mov	DWORD PTR _i$[ebp], esi
	imul	esi, 120				; 00000078H
	sub	eax, DWORD PTR _object[esi+4]
	push	eax
	call	_abs
	mov	DWORD PTR _x$[ebp], eax
; Line 3165
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, DWORD PTR _object[esi+8]
	push	eax
	call	_abs
	pop	ecx
; Line 3166
	cmp	eax, 1
	pop	ecx
	jle	SHORT $L86324
	mov	edx, DWORD PTR _object[esi+4]
	mov	ecx, DWORD PTR _object[esi+8]
	imul	edx, 112				; 00000070H
	or	edi, -1
	movsx	edx, BYTE PTR _dObject[edx+ecx-1]
	sub	edi, DWORD PTR _i$[ebp]
	cmp	edx, edi
	jne	SHORT $L86324
; Line 3167
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, ecx
	inc	eax
	push	eax
	call	_abs
	pop	ecx
$L86324:
; Line 3169
	cmp	DWORD PTR _x$[ebp], 1
	jg	$L86337
	cmp	eax, 1
	jg	$L86337
; Line 3170
	cmp	BYTE PTR _object[esi+52], 1
	jne	SHORT $L86326
$L87371:
; Line 3171
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _plr[ebx+60]
	mov	ecx, DWORD PTR _plr[ebx+56]
	push	DWORD PTR _object[esi+4]
	call	@GetDirection@16
$L86305:
; Line 3172
	mov	ecx, DWORD PTR _pnum$[ebp]
$L87385:
	mov	edx, eax
	call	@StartAttack@8
; Line 3173
	jmp	$L86337
$L86326:
; Line 3174
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@TryDisarm@8
; Line 3178
	jmp	$L87388
$L86328:
; Line 3180
	mov	edx, DWORD PTR _plr[ebx+36]
; Line 3181
	mov	eax, edx
	imul	eax, 120				; 00000078H
	cmp	BYTE PTR _object[eax+52], 1
	je	$L86337
; Line 3182
	push	1
	mov	ecx, edi
$L87374:
	call	@OperateObject@12
; Line 3184
	jmp	$L86337
$L86330:
; Line 3186
	cmp	edi, DWORD PTR _myplr
	jne	$L86337
; Line 3187
	mov	edi, DWORD PTR _plr[ebx+36]
; Line 3188
	mov	eax, DWORD PTR _plr[ebx+56]
	mov	esi, edi
	imul	esi, 368				; 00000170H
	sub	eax, DWORD PTR _item[esi+12]
	push	eax
	call	_abs
	mov	DWORD PTR _x$[ebp], eax
; Line 3189
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, DWORD PTR _item[esi+16]
	push	eax
	call	_abs
	pop	ecx
	pop	ecx
; Line 3190
	xor	ecx, ecx
	inc	ecx
	cmp	DWORD PTR _x$[ebp], ecx
	jg	$L86337
	cmp	eax, ecx
	jg	$L86337
	cmp	DWORD PTR _pcurs, ecx
	jne	$L86337
	cmp	BYTE PTR _item[esi+305], 0
	jne	$L86337
; Line 3191
	mov	al, BYTE PTR _myplr
	push	edi
	mov	dl, al
	push	edx
	push	eax
	mov	dl, 39					; 00000027H
	call	@NetSendCmdGItem@20
; Line 3192
	mov	BYTE PTR _item[esi+305], 1
; Line 3195
	jmp	SHORT $L86337
$L86333:
; Line 3197
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L86337
; Line 3198
	mov	edi, DWORD PTR _plr[ebx+36]
; Line 3199
	mov	eax, DWORD PTR _plr[ebx+56]
	mov	esi, edi
	imul	esi, 368				; 00000170H
	sub	eax, DWORD PTR _item[esi+12]
	push	eax
	call	_abs
	mov	DWORD PTR _x$[ebp], eax
; Line 3200
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, DWORD PTR _item[esi+16]
	push	eax
	call	_abs
; Line 3201
	xor	esi, esi
	pop	ecx
	inc	esi
	pop	ecx
	cmp	DWORD PTR _x$[ebp], esi
	jg	SHORT $L86337
	cmp	eax, esi
	jg	SHORT $L86337
	cmp	DWORD PTR _pcurs, esi
	jne	SHORT $L86337
; Line 3202
	mov	al, BYTE PTR _myplr
	push	edi
	mov	cl, al
	mov	dl, 40					; 00000028H
	push	ecx
	push	eax
	mov	ecx, esi
	call	@NetSendCmdGItem@20
; Line 3205
	jmp	SHORT $L86337
$L86336:
; Line 3207
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L86337
; Line 3208
	mov	edx, DWORD PTR _plr[ebx+36]
	mov	ecx, edi
	call	@TalkToTowner@8
$L86337:
; Line 3213
	mov	edx, DWORD PTR _plr[ebx+112]
	mov	ecx, DWORD PTR _pnum$[ebp]
	call	@FixPlayerLocation@8
; Line 3216
	jmp	$L87370
$L86297:
; Line 3219
	cmp	ecx, 4
	jne	$L86351
	mov	ecx, DWORD PTR _myplr
	mov	edx, DWORD PTR _plr[ebx+140]
	imul	ecx, 21720				; 000054d8H
	cmp	edx, DWORD PTR _plr[ecx+660]
	jle	$L86351
; Line 3220
	cmp	eax, 9
	jne	SHORT $L86339
; Line 3221
	push	DWORD PTR _plr[ebx+40]
	push	DWORD PTR _plr[ebx+36]
$L87379:
	mov	edx, DWORD PTR _plr[ebx+68]
	mov	ecx, DWORD PTR _plr[ebx+64]
	call	@GetDirection@16
; Line 3222
	mov	ecx, edi
$L87389:
	mov	edx, eax
	call	@StartAttack@8
$L86342:
; Line 3223
	or	DWORD PTR _plr[ebx+32], -1
; Line 3224
	jmp	$L86351
$L86339:
	cmp	eax, esi
	jne	SHORT $L86341
; Line 3225
	mov	esi, DWORD PTR _plr[ebx+36]
; Line 3226
	mov	eax, DWORD PTR _plr[ebx+56]
	imul	esi, 228				; 000000e4H
	sub	eax, DWORD PTR _monster[esi+40]
	push	eax
	call	_abs
	mov	DWORD PTR _x$[ebp], eax
; Line 3227
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, DWORD PTR _monster[esi+44]
	push	eax
	call	_abs
; Line 3228
	cmp	DWORD PTR _x$[ebp], 1
	pop	ecx
	pop	ecx
	jg	SHORT $L86342
	cmp	eax, 1
	jg	SHORT $L86342
; Line 3229
	push	DWORD PTR _monster[esi+44]
	push	DWORD PTR _monster[esi+40]
; Line 3233
	jmp	SHORT $L87379
$L86341:
	cmp	eax, 21					; 00000015H
	jne	SHORT $L86344
; Line 3234
	mov	esi, DWORD PTR _plr[ebx+36]
; Line 3235
	mov	eax, DWORD PTR _plr[ebx+56]
	imul	esi, 21720				; 000054d8H
	sub	eax, DWORD PTR _plr[esi+64]
	push	eax
	call	_abs
	mov	edi, eax
; Line 3236
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, DWORD PTR _plr[esi+68]
	push	eax
	call	_abs
	pop	ecx
; Line 3237
	cmp	edi, 1
	pop	ecx
	jg	$L86342
	cmp	eax, 1
	jg	$L86342
; Line 3238
	push	DWORD PTR _plr[esi+68]
	mov	edx, DWORD PTR _plr[ebx+68]
	mov	ecx, DWORD PTR _plr[ebx+64]
	push	DWORD PTR _plr[esi+64]
	call	@GetDirection@16
; Line 3239
	mov	ecx, DWORD PTR _pnum$[ebp]
; Line 3242
	jmp	$L87389
$L86344:
	cmp	eax, 13					; 0000000dH
	jne	$L86351
; Line 3243
	mov	esi, DWORD PTR _plr[ebx+36]
; Line 3244
	mov	eax, DWORD PTR _plr[ebx+56]
	mov	DWORD PTR _i$[ebp], esi
	imul	esi, 120				; 00000078H
	sub	eax, DWORD PTR _object[esi+4]
	push	eax
	call	_abs
	mov	DWORD PTR _x$[ebp], eax
; Line 3245
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, DWORD PTR _object[esi+8]
	push	eax
	call	_abs
	pop	ecx
; Line 3246
	cmp	eax, 1
	pop	ecx
	jle	SHORT $L86348
	mov	edx, DWORD PTR _object[esi+4]
	mov	ecx, DWORD PTR _object[esi+8]
	imul	edx, 112				; 00000070H
	or	edi, -1
	movsx	edx, BYTE PTR _dObject[edx+ecx-1]
	sub	edi, DWORD PTR _i$[ebp]
	cmp	edx, edi
	jne	SHORT $L86348
; Line 3247
	mov	eax, DWORD PTR _plr[ebx+60]
	sub	eax, ecx
	inc	eax
	push	eax
	call	_abs
	pop	ecx
$L86348:
; Line 3249
	cmp	DWORD PTR _x$[ebp], 1
	jg	SHORT $L86351
	cmp	eax, 1
	jg	SHORT $L86351
; Line 3250
	cmp	BYTE PTR _object[esi+52], 1
	jne	SHORT $L86350
; Line 3251
	push	DWORD PTR _object[esi+8]
	mov	edx, DWORD PTR _plr[ebx+60]
	mov	ecx, DWORD PTR _plr[ebx+56]
	push	DWORD PTR _object[esi+4]
	call	@GetDirection@16
; Line 3252
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, eax
	call	@StartAttack@8
; Line 3253
	jmp	SHORT $L86351
$L86350:
; Line 3254
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	0
	call	@OperateObject@12
$L86351:
; Line 3260
	cmp	DWORD PTR _plr[ebx], 5
	jne	$L86357
	mov	eax, DWORD PTR _myplr
	mov	ecx, DWORD PTR _plr[ebx+140]
	imul	eax, 21720				; 000054d8H
	cmp	ecx, DWORD PTR _plr[eax+660]
	jle	SHORT $L86357
; Line 3261
	mov	eax, DWORD PTR _plr[ebx+32]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $L86353
; Line 3262
	lea	esi, DWORD PTR _plr[ebx+40]
	lea	edi, DWORD PTR _plr[ebx+36]
; Line 3265
	jmp	SHORT $L87381
$L86353:
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86355
; Line 3266
	mov	eax, DWORD PTR _plr[ebx+36]
; Line 3267
	imul	eax, 228				; 000000e4H
	lea	esi, DWORD PTR _monster[eax+44]
	lea	edi, DWORD PTR _monster[eax+40]
; Line 3270
	jmp	SHORT $L87381
$L86355:
	cmp	eax, 23					; 00000017H
	jne	SHORT $L86357
; Line 3271
	mov	eax, DWORD PTR _plr[ebx+36]
; Line 3272
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+68]
	lea	edi, DWORD PTR _plr[eax+64]
$L87381:
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR _plr[ebx+56]
	mov	edx, DWORD PTR _plr[ebx+60]
	push	DWORD PTR [edi]
	call	@GetDirection@16
; Line 3273
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, eax
	push	DWORD PTR [edi]
	call	@StartRangeAttack@16
; Line 3274
	or	DWORD PTR _plr[ebx+32], -1
$L86357:
; Line 3278
	cmp	DWORD PTR _plr[ebx], 9
	jne	$L86363
	mov	eax, DWORD PTR _plr[ebx+140]
	cmp	eax, DWORD PTR _plr[ebx+768]
	jle	SHORT $L86363
; Line 3279
	mov	eax, DWORD PTR _plr[ebx+32]
	cmp	eax, 12					; 0000000cH
	jne	SHORT $L86359
; Line 3280
	lea	esi, DWORD PTR _plr[ebx+40]
	lea	edi, DWORD PTR _plr[ebx+36]
; Line 3283
	jmp	SHORT $L87382
$L86359:
	cmp	eax, 24					; 00000018H
	jne	SHORT $L86361
; Line 3284
	mov	eax, DWORD PTR _plr[ebx+36]
; Line 3285
	imul	eax, 228				; 000000e4H
	lea	esi, DWORD PTR _monster[eax+44]
	lea	edi, DWORD PTR _monster[eax+40]
; Line 3288
	jmp	SHORT $L87382
$L86361:
	cmp	eax, 25					; 00000019H
	jne	SHORT $L86363
; Line 3289
	mov	eax, DWORD PTR _plr[ebx+36]
; Line 3290
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+68]
	lea	edi, DWORD PTR _plr[eax+64]
$L87382:
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR _plr[ebx+56]
	mov	edx, DWORD PTR _plr[ebx+60]
	push	DWORD PTR [edi]
	call	@GetDirection@16
; Line 3291
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR _pnum$[ebp]
	mov	edx, eax
	push	DWORD PTR [edi]
	call	@StartSpell@16
$L87370:
; Line 3292
	or	DWORD PTR _plr[ebx+32], -1
$L86363:
	pop	edi
	pop	esi
	pop	ebx
; Line 3295
	leave
	ret	0
$L87390:
	DD	$L86285
	DD	$L86291
	DD	$L86287
	DD	$L86289
	DD	$L86284
	DD	$L86286
	DD	$L86288
	DD	$L86290
$L87391:
	DD	$L86302
	DD	$L86309
	DD	$L86337
	DD	$L86314
	DD	$L86318
	DD	$L86323
	DD	$L86330
	DD	$L86333
	DD	$L86336
	DD	$L86328
	DD	$L86337
	DD	$L86303
	DD	$L86307
	DD	$L86310
	DD	$L86313
	DD	$L86316
	DD	$L86317
	DD	$L86315
@CheckNewPath@4 ENDP
_TEXT	ENDS
PUBLIC	@PlrDeathModeOK@4
PUBLIC	??_C@_0CC@FGNG@PlrDeathModeOK?3?5illegal?5player?5?$CF@ ; `string'
;	COMDAT ??_C@_0CC@FGNG@PlrDeathModeOK?3?5illegal?5player?5?$CF@
_DATA	SEGMENT
??_C@_0CC@FGNG@PlrDeathModeOK?3?5illegal?5player?5?$CF@ DB 'PlrDeathModeO'
	DB	'K: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PlrDeathModeOK@4
_TEXT	SEGMENT
@PlrDeathModeOK@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 3298
	push	esi
	mov	esi, ecx
; Line 3299
	cmp	esi, DWORD PTR _myplr
	je	SHORT $L86367
$L87394:
; Line 3300
	xor	eax, eax
$L87395:
	inc	eax
	pop	esi
; Line 3316
	ret	0
$L86367:
; Line 3303
	cmp	esi, 4
	jb	SHORT $L86369
; Line 3304
	push	esi
	push	OFFSET FLAT:??_C@_0CC@FGNG@PlrDeathModeOK?3?5illegal?5player?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86369:
; Line 3307
	imul	esi, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[esi]
	cmp	esi, 8
; Line 3308
	je	SHORT $L87394
; Line 3310
	xor	eax, eax
	cmp	esi, 11					; 0000000bH
	je	SHORT $L87395
; Line 3311
	cmp	esi, 10					; 0000000aH
	pop	esi
	sete	al
; Line 3316
	ret	0
@PlrDeathModeOK@4 ENDP
_TEXT	ENDS
PUBLIC	_ValidatePlayer
PUBLIC	??_C@_0CC@IBLO@ValidatePlayer?3?5illegal?5player?5?$CF@ ; `string'
;	COMDAT ??_C@_0CC@IBLO@ValidatePlayer?3?5illegal?5player?5?$CF@
_DATA	SEGMENT
??_C@_0CC@IBLO@ValidatePlayer?3?5illegal?5player?5?$CF@ DB 'ValidatePlaye'
	DB	'r: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ValidatePlayer
_TEXT	SEGMENT
_msk$ = -8
_ValidatePlayer PROC NEAR				; COMDAT
; Line 3319
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 3325
	mov	eax, DWORD PTR _myplr
	push	ebx
	push	esi
	push	edi
	xor	edi, edi
	cmp	eax, 4
	mov	DWORD PTR _msk$[ebp], edi
	mov	DWORD PTR _msk$[ebp+4], edi
	jb	SHORT $L86383
; Line 3326
	push	eax
	push	OFFSET FLAT:??_C@_0CC@IBLO@ValidatePlayer?3?5illegal?5player?5?$CF@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86383:
; Line 3328
	mov	esi, DWORD PTR _myplr
	imul	esi, 21720				; 000054d8H
	lea	eax, DWORD PTR _plr[esi+440]
	cmp	BYTE PTR [eax], 50			; 00000032H
	jle	SHORT $L86385
; Line 3329
	mov	BYTE PTR [eax], 50			; 00000032H
$L86385:
; Line 3330
	mov	ecx, DWORD PTR _plr[esi+452]
	lea	eax, DWORD PTR _plr[esi+444]
	cmp	DWORD PTR [eax], ecx
	jle	SHORT $L86386
; Line 3331
	mov	DWORD PTR [eax], ecx
$L86386:
; Line 3333
	xor	ecx, ecx
; Line 3334
	cmp	DWORD PTR _plr[esi+18188], edi
	jle	SHORT $L86389
	lea	eax, DWORD PTR _plr[esi+3664]
	mov	edx, 5000				; 00001388H
$L86387:
; Line 3335
	cmp	DWORD PTR [eax-188], 11			; 0000000bH
	jne	SHORT $L86388
; Line 3336
	cmp	DWORD PTR [eax], edx
	jle	SHORT $L86391
; Line 3337
	mov	DWORD PTR [eax], edx
$L86391:
; Line 3339
	add	ecx, DWORD PTR [eax]
$L86388:
; Line 3334
	inc	edi
	add	eax, 368				; 00000170H
	cmp	edi, DWORD PTR _plr[esi+18188]
	jl	SHORT $L86387
$L86389:
; Line 3342
	lea	eax, DWORD PTR _plr[esi+460]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $L86392
; Line 3343
	mov	DWORD PTR [eax], ecx
$L86392:
; Line 3345
	movsx	eax, BYTE PTR _plr[esi+352]
; Line 3346
	shl	eax, 4
	lea	ecx, DWORD PTR _plr[esi+360]
	mov	edx, DWORD PTR _MaxStats[eax]
	cmp	DWORD PTR [ecx], edx
	jle	SHORT $L86393
; Line 3347
	mov	DWORD PTR [ecx], edx
$L86393:
; Line 3349
	mov	edx, DWORD PTR _MaxStats[eax+4]
	lea	ecx, DWORD PTR _plr[esi+368]
	cmp	DWORD PTR [ecx], edx
	jle	SHORT $L86394
; Line 3350
	mov	DWORD PTR [ecx], edx
$L86394:
; Line 3352
	mov	edx, DWORD PTR _MaxStats[eax+8]
	lea	ecx, DWORD PTR _plr[esi+376]
	cmp	DWORD PTR [ecx], edx
	jle	SHORT $L86395
; Line 3353
	mov	DWORD PTR [ecx], edx
$L86395:
; Line 3355
	mov	eax, DWORD PTR _MaxStats[eax+12]
	lea	ecx, DWORD PTR _plr[esi+384]
	cmp	DWORD PTR [ecx], eax
	jle	SHORT $L86396
; Line 3356
	mov	DWORD PTR [ecx], eax
$L86396:
; Line 3359
	xor	edi, edi
	mov	ebx, OFFSET FLAT:_spelldata+68
	inc	edi
$L86397:
; Line 3360
	cmp	DWORD PTR [ebx], -1
	je	SHORT $L86398
; Line 3361
	xor	eax, eax
	lea	ecx, DWORD PTR [edi-1]
	inc	eax
	xor	edx, edx
	call	__allshl
	or	DWORD PTR _msk$[ebp], eax
	or	DWORD PTR _msk$[ebp+4], edx
; Line 3362
	lea	eax, DWORD PTR _plr[esi+edi+193]
	cmp	BYTE PTR [eax], 15			; 0000000fH
	jle	SHORT $L86398
; Line 3363
	mov	BYTE PTR [eax], 15			; 0000000fH
$L86398:
; Line 3359
	add	ebx, 56					; 00000038H
	inc	edi
	cmp	ebx, OFFSET FLAT:_spelldata+2084
	jl	SHORT $L86397
; Line 3367
	mov	ecx, DWORD PTR _msk$[ebp]
	lea	eax, DWORD PTR _plr[esi+264]
	pop	edi
	pop	esi
	and	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _msk$[ebp+4]
	and	DWORD PTR [eax+4], ecx
	pop	ebx
; Line 3368
	leave
	ret	0
_ValidatePlayer ENDP
_TEXT	ENDS
PUBLIC	_ProcessPlayers
PUBLIC	@CheckCheatStats@4
PUBLIC	??_C@_0CC@OGBI@ProcessPlayers?3?5illegal?5player?5?$CF@ ; `string'
EXTRN	_sfxdelay:DWORD
EXTRN	_sfxdnum:DWORD
EXTRN	@PlaySFX@4:NEAR
;	COMDAT ??_C@_0CC@OGBI@ProcessPlayers?3?5illegal?5player?5?$CF@
_DATA	SEGMENT
??_C@_0CC@OGBI@ProcessPlayers?3?5illegal?5player?5?$CF@ DB 'ProcessPlayer'
	DB	's: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ProcessPlayers
_TEXT	SEGMENT
_ProcessPlayers PROC NEAR				; COMDAT
; Line 3375
	mov	eax, DWORD PTR _myplr
	cmp	eax, 4
	jb	SHORT $L86407
; Line 3376
	push	eax
	push	OFFSET FLAT:??_C@_0CC@OGBI@ProcessPlayers?3?5illegal?5player?5?$CF@ ; `string'
	call	_TermMsg
	mov	eax, DWORD PTR _myplr
	pop	ecx
	pop	ecx
$L86407:
; Line 3379
	imul	eax, 21720				; 000054d8H
	lea	ecx, DWORD PTR _plr[eax+21626]
	mov	al, BYTE PTR [ecx]
	test	al, al
	jbe	SHORT $L86409
; Line 3380
	dec	al
	mov	BYTE PTR [ecx], al
$L86409:
	push	ebx
	push	ebp
; Line 3383
	xor	ebp, ebp
	push	esi
	cmp	DWORD PTR _sfxdelay, ebp
	push	edi
	jle	SHORT $L86411
; Line 3384
	dec	DWORD PTR _sfxdelay
; Line 3385
	jne	SHORT $L86411
; Line 3386
	mov	ecx, DWORD PTR _sfxdnum
	call	@PlaySFX@4
$L86411:
; Line 3390
	call	_ValidatePlayer
	xor	ebx, ebx
	mov	esi, OFFSET FLAT:_plr+408
	inc	ebx
$L86412:
; Line 3393
	lea	eax, DWORD PTR [esi-356]
	cmp	BYTE PTR [eax-23], 0
	je	$L86413
	movzx	ecx, BYTE PTR _currlevel
	cmp	ecx, DWORD PTR [eax]
	jne	$L86413
	cmp	ebp, DWORD PTR _myplr
	je	SHORT $L86416
	cmp	BYTE PTR [eax+267], 0
	jne	$L86413
$L86416:
; Line 3394
	mov	ecx, ebp
	call	@CheckCheatStats@4
; Line 3396
	mov	ecx, ebp
	call	@PlrDeathModeOK@4
	test	eax, eax
	jne	SHORT $L86417
	test	DWORD PTR [esi], -64			; ffffffc0H
	jg	SHORT $L86417
; Line 3397
	or	edx, -1
	mov	ecx, ebp
	call	@SyncPlrKill@8
$L86417:
; Line 3400
	cmp	ebp, DWORD PTR _myplr
	jne	SHORT $L86421
; Line 3401
	test	BYTE PTR [esi+21176], 64		; 00000040H
	je	SHORT $L86419
	cmp	BYTE PTR _currlevel, 0
	je	SHORT $L86419
; Line 3402
	add	DWORD PTR [esi], -4			; fffffffcH
	mov	eax, DWORD PTR [esi]
; Line 3403
	add	DWORD PTR [esi-8], -4			; fffffffcH
; Line 3404
	test	eax, -64				; ffffffc0H
	jg	SHORT $L86420
; Line 3405
	xor	edx, edx
	mov	ecx, ebp
	call	@SyncPlrKill@8
$L86420:
; Line 3407
	mov	DWORD PTR _drawhpflag, ebx
$L86419:
; Line 3409
	test	BYTE PTR [esi+21179], 8
	je	SHORT $L86421
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	jle	SHORT $L86421
; Line 3410
	sub	eax, DWORD PTR [esi+20]
; Line 3411
	and	DWORD PTR [esi+20], 0
; Line 3412
	mov	DWORD PTR _drawmanaflag, ebx
	mov	DWORD PTR [esi+12], eax
$L86421:
; Line 3416
	xor	edi, edi
$L86422:
; Line 3418
	mov	eax, DWORD PTR [esi-408]
	cmp	eax, 10					; 0000000aH
	ja	SHORT $L86426
	jmp	DWORD PTR $L87415[eax*4]
$L86429:
; Line 3420
	mov	ecx, ebp
	call	@PM_DoStand@4
; Line 3421
	jmp	SHORT $L87414
$L86430:
; Line 3423
	mov	ecx, ebp
	call	@PM_DoWalk@4
; Line 3424
	jmp	SHORT $L87414
$L86431:
; Line 3426
	mov	ecx, ebp
	call	@PM_DoWalk2@4
; Line 3427
	jmp	SHORT $L87414
$L86432:
; Line 3429
	mov	ecx, ebp
	call	@PM_DoWalk3@4
; Line 3430
	jmp	SHORT $L87414
$L86433:
; Line 3432
	mov	ecx, ebp
	call	@PM_DoAttack@4
; Line 3433
	jmp	SHORT $L87414
$L86434:
; Line 3435
	mov	ecx, ebp
	call	@PM_DoRangeAttack@4
; Line 3436
	jmp	SHORT $L87414
$L86435:
; Line 3438
	mov	ecx, ebp
	call	@PM_DoBlock@4
; Line 3439
	jmp	SHORT $L87414
$L86436:
; Line 3441
	mov	ecx, ebp
	call	@PM_DoSpell@4
; Line 3442
	jmp	SHORT $L87414
$L86437:
; Line 3444
	mov	ecx, ebp
	call	@PM_DoGotHit@4
; Line 3445
	jmp	SHORT $L87414
$L86438:
; Line 3447
	mov	ecx, ebp
	call	@PM_DoDeath@4
; Line 3448
	jmp	SHORT $L87414
$L86439:
; Line 3450
	mov	ecx, ebp
	call	@PM_DoNewLvl@4
$L87414:
	mov	edi, eax
$L86426:
; Line 3453
	mov	ecx, ebp
	call	@CheckNewPath@4
; Line 3454
	test	edi, edi
	jne	SHORT $L86422
; Line 3456
	lea	eax, DWORD PTR [esi-276]
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax]
; Line 3457
	cmp	ecx, DWORD PTR [esi-280]
	jle	SHORT $L86413
; Line 3458
	and	DWORD PTR [eax], edi
; Line 3459
	lea	eax, DWORD PTR [esi-268]
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax]
; Line 3460
	cmp	ecx, DWORD PTR [esi-272]
	jle	SHORT $L86413
; Line 3461
	mov	DWORD PTR [eax], ebx
$L86413:
; Line 3392
	add	esi, 21720				; 000054d8H
	inc	ebp
	cmp	esi, OFFSET FLAT:_plr+87288
	jl	$L86412
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3466
	ret	0
$L87415:
	DD	$L86429
	DD	$L86430
	DD	$L86431
	DD	$L86432
	DD	$L86433
	DD	$L86434
	DD	$L86435
	DD	$L86437
	DD	$L86438
	DD	$L86436
	DD	$L86439
_ProcessPlayers ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @CheckCheatStats@4
_TEXT	SEGMENT
@CheckCheatStats@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 3471
	imul	ecx, 21720				; 000054d8H
	mov	eax, 750				; 000002eeH
	lea	edx, DWORD PTR _plr[ecx+356]
	cmp	DWORD PTR [edx], eax
	jle	SHORT $L86445
; Line 3472
	mov	DWORD PTR [edx], eax
$L86445:
; Line 3475
	lea	edx, DWORD PTR _plr[ecx+372]
	cmp	DWORD PTR [edx], eax
	jle	SHORT $L86446
; Line 3476
	mov	DWORD PTR [edx], eax
$L86446:
; Line 3479
	lea	edx, DWORD PTR _plr[ecx+364]
	cmp	DWORD PTR [edx], eax
	jle	SHORT $L86447
; Line 3480
	mov	DWORD PTR [edx], eax
$L86447:
; Line 3483
	lea	edx, DWORD PTR _plr[ecx+380]
	cmp	DWORD PTR [edx], eax
	jle	SHORT $L86448
; Line 3484
	mov	DWORD PTR [edx], eax
$L86448:
; Line 3487
	lea	edx, DWORD PTR _plr[ecx+408]
	mov	eax, 128000				; 0001f400H
	cmp	DWORD PTR [edx], eax
	jle	SHORT $L86449
; Line 3488
	mov	DWORD PTR [edx], eax
$L86449:
; Line 3491
	lea	ecx, DWORD PTR _plr[ecx+428]
	cmp	DWORD PTR [ecx], eax
	jle	SHORT $L86450
; Line 3492
	mov	DWORD PTR [ecx], eax
$L86450:
; Line 3494
	ret	0
@CheckCheatStats@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@IFEJ@ClrPlrPath?3?5illegal?5player?5?$CFd?$AA@ ; `string'
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0BO@IFEJ@ClrPlrPath?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@IFEJ@ClrPlrPath?3?5illegal?5player?5?$CFd?$AA@ DB 'ClrPlrPath: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @ClrPlrPath@4
_TEXT	SEGMENT
@ClrPlrPath@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 3497
	push	esi
	mov	esi, ecx
; Line 3498
	cmp	esi, 4
	jb	SHORT $L86455
; Line 3499
	push	esi
	push	OFFSET FLAT:??_C@_0BO@IFEJ@ClrPlrPath?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86455:
; Line 3502
	imul	esi, 21720				; 000054d8H
	push	25					; 00000019H
	add	esi, OFFSET FLAT:_plr+4
	push	-1
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
	pop	esi
; Line 3503
	ret	0
@ClrPlrPath@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @PosOkPlayer@12
_TEXT	SEGMENT
_py$ = 8
@PosOkPlayer@12 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _px$ = edx
; Line 3506
	push	esi
	mov	esi, edx
	push	edi
	mov	edi, ecx
; Line 3512
	test	esi, esi
	jl	$L87425
	cmp	esi, 112				; 00000070H
	jge	$L87425
	mov	edx, DWORD PTR _py$[esp+4]
	test	edx, edx
	jl	$L87425
	cmp	edx, 112				; 00000070H
	jge	$L87425
	mov	ecx, esi
	call	@SolidLoc@8
	test	eax, eax
	jne	$L87425
	mov	eax, esi
	imul	eax, 112				; 00000070H
	lea	esi, DWORD PTR [eax+edx]
	shl	esi, 2
	cmp	DWORD PTR _dPiece[esi], 0
	je	$L87425
; Line 3514
	mov	cl, BYTE PTR _dPlayer[eax+edx]
	test	cl, cl
	je	SHORT $L86471
; Line 3515
	jle	SHORT $L86469
; Line 3516
	movsx	ecx, cl
	dec	ecx
; Line 3517
	jmp	SHORT $L86470
$L86469:
	push	ebx
; Line 3518
	movsx	ebx, cl
	or	ecx, -1
	sub	ecx, ebx
	pop	ebx
$L86470:
; Line 3520
	cmp	ecx, edi
	je	SHORT $L86471
	cmp	ecx, 4
	jae	SHORT $L86471
	imul	ecx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ecx+408], 0
; Line 3521
	jne	SHORT $L87425
$L86471:
; Line 3525
	mov	esi, DWORD PTR _dMonster[esi]
	test	esi, esi
	je	SHORT $L86475
; Line 3526
	cmp	BYTE PTR _currlevel, 0
; Line 3527
	je	SHORT $L87425
; Line 3529
	test	esi, esi
; Line 3530
	jle	SHORT $L87425
; Line 3532
	imul	esi, 228				; 000000e4H
	test	DWORD PTR _monster[esi-80], -64		; ffffffc0H
; Line 3533
	jg	SHORT $L87425
$L86475:
; Line 3537
	mov	al, BYTE PTR _dObject[eax+edx]
	test	al, al
	je	SHORT $L86480
; Line 3538
	jle	SHORT $L86477
; Line 3539
	dec	al
	mov	cl, al
; Line 3540
	jmp	SHORT $L86478
$L86477:
; Line 3541
	or	cl, -1
	sub	cl, al
$L86478:
; Line 3543
	movsx	eax, cl
	imul	eax, 120				; 00000078H
	cmp	DWORD PTR _object[eax+56], 0
	je	SHORT $L86480
$L87425:
; Line 3552
	xor	eax, eax
	jmp	SHORT $L86463
$L86480:
; Line 3553
	xor	eax, eax
	inc	eax
$L86463:
	pop	edi
	pop	esi
; Line 3554
	ret	4
@PosOkPlayer@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@FKB@MakePlrPath?3?5illegal?5player?5?$CFd?$AA@ ; `string'
EXTRN	@FindPath@28:NEAR
;	COMDAT ??_C@_0BP@FKB@MakePlrPath?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@FKB@MakePlrPath?3?5illegal?5player?5?$CFd?$AA@ DB 'MakePlrPath:'
	DB	' illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @MakePlrPath@16
_TEXT	SEGMENT
_pnum$ = -4
_yy$ = 8
_endspace$ = 12
@MakePlrPath@16 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _xx$ = edx
; Line 3557
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 3560
	cmp	esi, 4
	mov	ebx, edx
	mov	DWORD PTR _pnum$[ebp], esi
	jb	SHORT $L86492
; Line 3561
	push	esi
	push	OFFSET FLAT:??_C@_0BP@FKB@MakePlrPath?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86492:
; Line 3564
	imul	esi, 21720				; 000054d8H
; Line 3565
	mov	edi, DWORD PTR _yy$[ebp]
; Line 3566
	mov	eax, DWORD PTR _plr[esi+64]
	mov	DWORD PTR _plr[esi+72], ebx
	cmp	eax, ebx
	mov	DWORD PTR _plr[esi+76], edi
	jne	SHORT $L86494
	cmp	DWORD PTR _plr[esi+68], edi
	je	SHORT $L86489
$L86494:
; Line 3570
	lea	ecx, DWORD PTR _plr[esi+4]
	mov	edx, DWORD PTR _pnum$[ebp]
	push	ecx
	push	edi
	push	ebx
	mov	ecx, OFFSET FLAT:@PosOkPlayer@12
	push	DWORD PTR _plr[esi+68]
	push	eax
	call	@FindPath@28
; Line 3571
	test	eax, eax
	je	SHORT $L86489
; Line 3575
	cmp	DWORD PTR _endspace$[ebp], 0
	jne	SHORT $L86496
; Line 3578
	movsx	ecx, BYTE PTR _plr[esi+eax+3]
	dec	eax
	dec	ecx
	cmp	ecx, 7
	ja	SHORT $L86498
	jmp	DWORD PTR $L87430[ecx*4]
$L86502:
; Line 3583
	inc	ebx
; Line 3584
	jmp	SHORT $L86498
$L86503:
; Line 3586
	dec	ebx
; Line 3587
	jmp	SHORT $L86498
$L86505:
; Line 3592
	inc	ebx
; Line 3594
	jmp	SHORT $L87429
$L86506:
; Line 3596
	dec	ebx
$L87429:
; Line 3597
	inc	edi
; Line 3598
	jmp	SHORT $L86498
$L86507:
; Line 3600
	dec	ebx
; Line 3602
	jmp	SHORT $L86504
$L86508:
; Line 3604
	inc	ebx
$L86504:
; Line 3605
	dec	edi
$L86498:
; Line 3609
	mov	DWORD PTR _plr[esi+72], ebx
; Line 3610
	mov	DWORD PTR _plr[esi+76], edi
$L86496:
; Line 3613
	or	BYTE PTR _plr[esi+eax+4], -1
$L86489:
	pop	edi
	pop	esi
	pop	ebx
; Line 3614
	leave
	ret	8
$L87430:
	DD	$L87429
	DD	$L86502
	DD	$L86503
	DD	$L86504
	DD	$L86505
	DD	$L86506
	DD	$L86507
	DD	$L86508
@MakePlrPath@16 ENDP
_TEXT	ENDS
PUBLIC	@CheckPlrSpell@0
PUBLIC	??_C@_0CB@OGFJ@CheckPlrSpell?3?5illegal?5player?5?$CFd@ ; `string'
EXTRN	_pcursmonst:DWORD
EXTRN	_pcursplr:BYTE
EXTRN	_cursmx:DWORD
EXTRN	_cursmy:DWORD
EXTRN	_MouseY:DWORD
EXTRN	_MouseX:DWORD
EXTRN	_invflag:DWORD
EXTRN	_UseScroll:NEAR
EXTRN	_UseStaff:NEAR
EXTRN	@CheckSpell@16:NEAR
EXTRN	@NetSendCmdLocParam2@24:NEAR
EXTRN	@NetSendCmdLocParam3@28:NEAR
EXTRN	@NetSendCmdParam3@20:NEAR
EXTRN	_chrflag:DWORD
;	COMDAT ??_C@_0CB@OGFJ@CheckPlrSpell?3?5illegal?5player?5?$CFd@
_DATA	SEGMENT
??_C@_0CB@OGFJ@CheckPlrSpell?3?5illegal?5player?5?$CFd@ DB 'CheckPlrSpell'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @CheckPlrSpell@0
_TEXT	SEGMENT
@CheckPlrSpell@0 PROC NEAR				; COMDAT
; Line 3621
	mov	ecx, DWORD PTR _myplr
	cmp	ecx, 4
	jb	SHORT $L86515
; Line 3622
	push	ecx
	push	OFFSET FLAT:??_C@_0CB@OGFJ@CheckPlrSpell?3?5illegal?5player?5?$CFd@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
	mov	ecx, DWORD PTR _myplr
$L86515:
; Line 3625
	mov	eax, ecx
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	esi
	push	edi
	mov	edx, DWORD PTR _plr[eax+180]
; Line 3626
	cmp	edx, -1
	jne	SHORT $L86517
; Line 3627
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L86518
; Line 3628
	mov	ecx, 753				; 000002f1H
	jmp	$L87436
$L86518:
; Line 3629
	cmp	al, 1
	jne	SHORT $L86520
; Line 3630
	mov	ecx, 644				; 00000284H
	jmp	$L87436
$L86520:
; Line 3631
	cmp	al, 2
	jne	$L86530
; Line 3632
	mov	ecx, 541				; 0000021dH
	jmp	$L87436
$L86517:
; Line 3637
	xor	ebx, ebx
	cmp	BYTE PTR _leveltype, bl
	jne	SHORT $L86523
	mov	esi, edx
	imul	esi, 56					; 00000038H
	cmp	DWORD PTR _spelldata[esi+24], ebx
	jne	SHORT $L86523
; Line 3638
	mov	al, BYTE PTR _plr[eax+352]
	cmp	al, bl
	jne	SHORT $L86524
; Line 3639
	mov	ecx, 746				; 000002eaH
	jmp	$L87436
$L86524:
; Line 3640
	cmp	al, 1
	jne	SHORT $L86526
; Line 3641
	mov	ecx, 637				; 0000027dH
	jmp	$L87436
$L86526:
; Line 3642
	cmp	al, 2
	jne	$L86530
; Line 3643
	mov	ecx, 534				; 00000216H
	jmp	$L87436
$L86523:
; Line 3655
	cmp	DWORD PTR _pcurs, 1
	jne	$L86530
	cmp	DWORD PTR _MouseY, 352			; 00000160H
	jge	$L86530
	cmp	DWORD PTR _chrflag, ebx
	mov	esi, DWORD PTR _MouseX
	mov	edi, 320				; 00000140H
	je	SHORT $L86532
	cmp	esi, edi
	jl	SHORT $L86531
$L86532:
	cmp	DWORD PTR _invflag, ebx
	je	SHORT $L86529
	cmp	esi, edi
	jle	SHORT $L86529
$L86531:
	cmp	edx, 2
	je	SHORT $L86529
	cmp	edx, 5
	je	SHORT $L86529
	cmp	edx, 26					; 0000001aH
	je	SHORT $L86529
	cmp	edx, 9
	je	SHORT $L86529
	cmp	edx, 27					; 0000001bH
	jne	$L86530
$L86529:
; Line 3660
	mov	al, BYTE PTR _plr[eax+184]
	cmp	al, bl
	jl	$L86540
	cmp	al, 1
	jle	SHORT $L86537
	cmp	al, 2
	je	SHORT $L86538
	cmp	al, 3
	jne	$L86540
; Line 3669
	call	_UseStaff
; Line 3670
	jmp	SHORT $L86534
$L86538:
; Line 3666
	call	_UseScroll
; Line 3667
	jmp	SHORT $L86534
$L86537:
; Line 3663
	push	ebx
	push	eax
	call	@CheckSpell@16
$L86534:
; Line 3674
	mov	ecx, DWORD PTR _myplr
	cmp	eax, ebx
	je	$L86540
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[eax+180]
	cmp	edx, 6
	jne	SHORT $L86541
; Line 3675
	push	DWORD PTR _cursmy
	mov	edx, DWORD PTR _plr[eax+60]
	mov	ecx, DWORD PTR _plr[eax+56]
	push	DWORD PTR _cursmx
	call	@GetDirection@16
; Line 3676
	mov	ecx, DWORD PTR _myplr
	mov	esi, eax
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[eax+180]
	call	@GetSpellLevel@8
; Line 3677
	xor	ecx, ecx
	mov	dl, 84					; 00000054H
	push	eax
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	push	esi
	inc	ecx
	mov	ax, WORD PTR _plr[eax+180]
	push	eax
	mov	al, BYTE PTR _cursmy
	push	eax
	mov	al, BYTE PTR _cursmx
	push	eax
	call	@NetSendCmdLocParam3@28
$L86530:
	pop	edi
	pop	esi
	pop	ebx
; Line 3700
	ret	0
$L86541:
; Line 3678
	cmp	DWORD PTR _pcursmonst, -1
	je	SHORT $L86543
; Line 3679
	call	@GetSpellLevel@8
; Line 3680
	mov	dl, 22					; 00000016H
	push	eax
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ax, WORD PTR _plr[eax+180]
	push	eax
	mov	ax, WORD PTR _pcursmonst
; Line 3681
	jmp	SHORT $L87437
$L86543:
	cmp	BYTE PTR _pcursplr, -1
	je	SHORT $L86545
; Line 3682
	call	@GetSpellLevel@8
; Line 3683
	mov	dl, 23					; 00000017H
	push	eax
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ax, WORD PTR _plr[eax+180]
	push	eax
	movsx	ax, BYTE PTR _pcursplr
$L87437:
	xor	ecx, ecx
	push	eax
	inc	ecx
	call	@NetSendCmdParam3@20
; Line 3684
	jmp	SHORT $L86530
$L86545:
; Line 3685
	call	@GetSpellLevel@8
; Line 3686
	xor	ecx, ecx
	mov	dl, 14					; 0000000eH
	push	eax
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	inc	ecx
	mov	ax, WORD PTR _plr[eax+180]
	push	eax
	mov	al, BYTE PTR _cursmy
	push	eax
	mov	al, BYTE PTR _cursmx
	push	eax
	call	@NetSendCmdLocParam2@24
; Line 3688
	jmp	$L86530
$L86540:
; Line 3691
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+184], 1
	jne	$L86530
; Line 3692
	mov	al, BYTE PTR _plr[eax+352]
	cmp	al, bl
	jne	SHORT $L86548
; Line 3693
	mov	ecx, 754				; 000002f2H
	jmp	SHORT $L87436
$L86548:
; Line 3694
	cmp	al, 1
	jne	SHORT $L86550
; Line 3695
	mov	ecx, 645				; 00000285H
	jmp	SHORT $L87436
$L86550:
; Line 3696
	cmp	al, 2
	jne	$L86530
; Line 3697
	mov	ecx, 542				; 0000021eH
$L87436:
	pop	edi
	pop	esi
	pop	ebx
	jmp	@PlaySFX@4
@CheckPlrSpell@0 ENDP
_TEXT	ENDS
PUBLIC	@SyncPlrAnim@4
PUBLIC	??_C@_0BP@JMFM@SyncPlrAnim?3?5illegal?5player?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0M@DCCH@SyncPlrAnim?$AA@			; `string'
;	COMDAT ??_C@_0BP@JMFM@SyncPlrAnim?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@JMFM@SyncPlrAnim?3?5illegal?5player?5?$CFd?$AA@ DB 'SyncPlrAnim'
	DB	': illegal player %d', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@DCCH@SyncPlrAnim?$AA@
_DATA	SEGMENT
??_C@_0M@DCCH@SyncPlrAnim?$AA@ DB 'SyncPlrAnim', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SyncPlrAnim@4
_TEXT	SEGMENT
@SyncPlrAnim@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 3704
	push	esi
	mov	esi, ecx
; Line 3707
	cmp	esi, 4
	jb	SHORT $L86559
; Line 3708
	push	esi
	push	OFFSET FLAT:??_C@_0BP@JMFM@SyncPlrAnim?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86559:
; Line 3711
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
; Line 3712
	mov	edx, DWORD PTR _plr[eax]
	mov	ecx, DWORD PTR _plr[eax+112]
	cmp	edx, 11					; 0000000bH
	ja	$L86577
	jmp	DWORD PTR $L87442[edx*4]
$L86565:
; Line 3714
	imul	esi, 5430				; 00001536H
	add	esi, ecx
	mov	ecx, DWORD PTR _plr[esi*4+852]
; Line 3715
	jmp	$L87441
$L86566:
; Line 3717
	imul	esi, 5430				; 00001536H
	add	esi, ecx
	mov	ecx, DWORD PTR _plr[esi*4+772]
; Line 3718
	jmp	$L87441
$L86567:
; Line 3720
	imul	esi, 5430				; 00001536H
	add	esi, ecx
	mov	ecx, DWORD PTR _plr[esi*4+812]
; Line 3721
	jmp	$L87441
$L86568:
; Line 3723
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L86569
; Line 3724
	mov	edx, DWORD PTR _plr[eax+164]
	imul	edx, 56					; 00000038H
	movzx	edx, BYTE PTR _spelldata[edx+2]
; Line 3725
	jmp	SHORT $L86570
$L86569:
; Line 3726
	xor	edx, edx
$L86570:
; Line 3728
	test	edx, edx
	push	edi
	jne	SHORT $L86571
; Line 3729
	mov	edi, esi
	imul	edi, 5430				; 00001536H
	add	edi, ecx
	mov	edi, DWORD PTR _plr[edi*4+696]
	mov	DWORD PTR _plr[eax+124], edi
$L86571:
; Line 3730
	cmp	edx, 1
	jne	SHORT $L86572
; Line 3731
	mov	edi, esi
	imul	edi, 5430				; 00001536H
	add	edi, ecx
	mov	edi, DWORD PTR _plr[edi*4+664]
	mov	DWORD PTR _plr[eax+124], edi
$L86572:
; Line 3732
	cmp	edx, 2
	pop	edi
	jne	SHORT $L86562
; Line 3733
	imul	esi, 5430				; 00001536H
	add	esi, ecx
	mov	ecx, DWORD PTR _plr[esi*4+728]
; Line 3735
	jmp	SHORT $L87441
$L86574:
; Line 3739
	imul	esi, 5430				; 00001536H
	add	esi, ecx
	mov	ecx, DWORD PTR _plr[esi*4+540]
; Line 3740
	jmp	SHORT $L87441
$L86575:
; Line 3744
	imul	esi, 5430				; 00001536H
	add	esi, ecx
	mov	ecx, DWORD PTR _plr[esi*4+580]
; Line 3745
	jmp	SHORT $L87441
$L86576:
; Line 3748
	imul	esi, 5430				; 00001536H
	add	esi, ecx
	mov	ecx, DWORD PTR _plr[esi*4+620]
$L87441:
	mov	DWORD PTR _plr[eax+124], ecx
	pop	esi
; Line 3754
	ret	0
$L86577:
; Line 3751
	push	OFFSET FLAT:??_C@_0M@DCCH@SyncPlrAnim?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
$L86562:
	pop	esi
; Line 3754
	ret	0
$L87442:
	DD	$L86574
	DD	$L86575
	DD	$L86575
	DD	$L86575
	DD	$L86576
	DD	$L86576
	DD	$L86565
	DD	$L86566
	DD	$L86567
	DD	$L86568
	DD	$L86574
	DD	$L86574
@SyncPlrAnim@4 ENDP
_TEXT	ENDS
PUBLIC	@SyncInitPlrPos@4
EXTRN	@PosOkPortal@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @SyncInitPlrPos@4
_TEXT	SEGMENT
_pnum$ = -20
_xx$ = -12
_yy$ = -16
_range$ = -4
_posOk$ = -8
@SyncInitPlrPos@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 3757
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _pnum$[ebp], esi
; Line 3762
	imul	esi, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[esi+56]
; Line 3765
	cmp	BYTE PTR _gbMaxPlayers, 1
	mov	DWORD PTR _plr[esi+72], eax
	mov	eax, DWORD PTR _plr[esi+60]
	mov	DWORD PTR _plr[esi+76], eax
	je	$L86590
	movzx	eax, BYTE PTR _currlevel
	cmp	DWORD PTR _plr[esi+52], eax
	jne	$L86590
; Line 3769
	xor	eax, eax
	mov	DWORD PTR -4+[ebp], eax
	jmp	SHORT $L86591
$L87456:
	mov	eax, DWORD PTR -4+[ebp]
$L86591:
; Line 3770
	mov	ebx, DWORD PTR _plrxoff2[eax]
; Line 3771
	mov	edi, DWORD PTR _plryoff2[eax]
	add	ebx, DWORD PTR _plr[esi+56]
	add	edi, DWORD PTR _plr[esi+60]
; Line 3772
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	edi
	mov	edx, ebx
	call	@PosOkPlayer@12
	test	eax, eax
	jne	SHORT $L87450
	add	DWORD PTR -4+[ebp], 4
	cmp	DWORD PTR -4+[ebp], 32			; 00000020H
	jb	SHORT $L87456
$L87450:
; Line 3777
	mov	ecx, DWORD PTR _pnum$[ebp]
	push	edi
	mov	edx, ebx
	call	@PosOkPlayer@12
	test	eax, eax
	jne	$L86598
; Line 3778
	and	DWORD PTR _posOk$[ebp], eax
	or	eax, -1
; Line 3779
	mov	DWORD PTR _range$[ebp], 1
	mov	DWORD PTR -24+[ebp], eax
$L86596:
	cmp	DWORD PTR _posOk$[ebp], 0
	jne	SHORT $L86598
; Line 3780
	mov	DWORD PTR _yy$[ebp], eax
	jmp	SHORT $L87460
$L86599:
	cmp	DWORD PTR _posOk$[ebp], 0
	jne	SHORT $L86597
; Line 3781
	mov	edi, DWORD PTR _plr[esi+60]
; Line 3782
	mov	eax, DWORD PTR -24+[ebp]
	add	edi, DWORD PTR _yy$[ebp]
	mov	DWORD PTR _xx$[ebp], eax
$L86602:
	cmp	DWORD PTR _posOk$[ebp], 0
	jne	SHORT $L86600
; Line 3783
	mov	ebx, DWORD PTR _plr[esi+56]
; Line 3784
	mov	ecx, DWORD PTR _pnum$[ebp]
	add	ebx, DWORD PTR _xx$[ebp]
	push	edi
	mov	edx, ebx
	call	@PosOkPlayer@12
	test	eax, eax
	je	SHORT $L86603
	movzx	ecx, BYTE PTR _currlevel
	push	edi
	mov	edx, ebx
	call	@PosOkPortal@12
	test	eax, eax
	jne	SHORT $L86603
; Line 3785
	mov	DWORD PTR _posOk$[ebp], 1
$L86603:
; Line 3782
	inc	DWORD PTR _xx$[ebp]
	mov	eax, DWORD PTR _xx$[ebp]
	cmp	eax, DWORD PTR _range$[ebp]
	jle	SHORT $L86602
$L86600:
; Line 3780
	inc	DWORD PTR _yy$[ebp]
	mov	eax, DWORD PTR _yy$[ebp]
$L87460:
	cmp	eax, DWORD PTR _range$[ebp]
	jle	SHORT $L86599
$L86597:
; Line 3779
	mov	eax, DWORD PTR -24+[ebp]
	inc	DWORD PTR _range$[ebp]
	dec	eax
	cmp	eax, -50				; ffffffceH
	mov	DWORD PTR -24+[ebp], eax
	jg	SHORT $L86596
$L86598:
; Line 3794
	mov	eax, DWORD PTR _pnum$[ebp]
	mov	edx, ebx
	imul	edx, 112				; 00000070H
	mov	cl, al
	mov	DWORD PTR _plr[esi+56], ebx
	inc	cl
; Line 3796
	cmp	eax, DWORD PTR _myplr
	mov	DWORD PTR _plr[esi+60], edi
	mov	BYTE PTR _dPlayer[edx+edi], cl
	jne	SHORT $L86590
; Line 3797
	mov	DWORD PTR _plr[esi+64], ebx
; Line 3798
	mov	DWORD PTR _plr[esi+68], edi
; Line 3799
	mov	DWORD PTR _plr[esi+72], ebx
; Line 3800
	mov	DWORD PTR _plr[esi+76], edi
; Line 3801
	mov	DWORD PTR _ViewX, ebx
; Line 3802
	mov	DWORD PTR _ViewY, edi
$L86590:
	pop	edi
	pop	esi
	pop	ebx
; Line 3804
	leave
	ret	0
@SyncInitPlrPos@4 ENDP
_TEXT	ENDS
PUBLIC	@SyncInitPlr@4
PUBLIC	??_C@_0BP@ENDO@SyncInitPlr?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BP@ENDO@SyncInitPlr?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BP@ENDO@SyncInitPlr?3?5illegal?5player?5?$CFd?$AA@ DB 'SyncInitPlr'
	DB	': illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SyncInitPlr@4
_TEXT	SEGMENT
@SyncInitPlr@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 3807
	push	esi
	mov	esi, ecx
; Line 3808
	cmp	esi, 4
	jb	SHORT $L86611
; Line 3809
	push	esi
	push	OFFSET FLAT:??_C@_0BP@ENDO@SyncInitPlr?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86611:
; Line 3812
	mov	ecx, esi
	call	@SetPlrAnims@4
; Line 3813
	mov	ecx, esi
	pop	esi
	jmp	@SyncInitPlrPos@4
@SyncInitPlr@4 ENDP
_TEXT	ENDS
PUBLIC	@CheckStats@4
PUBLIC	??_C@_0BO@INDD@CheckStats?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BO@INDD@CheckStats?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BO@INDD@CheckStats?3?5illegal?5player?5?$CFd?$AA@ DB 'CheckStats: '
	DB	'illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @CheckStats@4
_TEXT	SEGMENT
_c$ = -4
@CheckStats@4 PROC NEAR					; COMDAT
; _pnum$ = ecx
; Line 3817
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 3820
	cmp	esi, 4
	jb	SHORT $L86619
; Line 3821
	push	esi
	push	OFFSET FLAT:??_C@_0BO@INDD@CheckStats?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86619:
; Line 3824
	mov	eax, esi
	xor	ebx, ebx
	imul	eax, 21720				; 000054d8H
	mov	cl, BYTE PTR _plr[eax+352]
	cmp	cl, bl
	jne	SHORT $L86621
; Line 3825
	xor	esi, esi
; Line 3826
	jmp	SHORT $L86625
$L86621:
	cmp	cl, 1
	jne	SHORT $L86623
; Line 3827
	xor	esi, esi
	inc	esi
; Line 3828
	jmp	SHORT $L86625
$L86623:
	cmp	cl, 2
	jne	SHORT $L87469
; Line 3829
	push	2
	pop	esi
	jmp	SHORT $L86625
$L87469:
	mov	esi, DWORD PTR _c$[esp+16]
$L86625:
; Line 3832
	xor	edi, edi
$L86626:
; Line 3833
	mov	ecx, edi
	sub	ecx, ebx
	je	$L86633
	dec	ecx
	je	SHORT $L86637
	dec	ecx
	je	SHORT $L86641
	dec	ecx
	jne	$L86627
; Line 3856
	mov	edx, DWORD PTR _plr[eax+384]
	mov	ecx, esi
	shl	ecx, 4
	mov	ecx, DWORD PTR _MaxStats[ecx+12]
	cmp	edx, ecx
	jle	SHORT $L86646
; Line 3857
	mov	DWORD PTR _plr[eax+384], ecx
; Line 3858
	jmp	$L86627
$L86646:
	cmp	edx, ebx
	jge	$L86627
; Line 3859
	mov	DWORD PTR _plr[eax+384], ebx
; Line 3861
	jmp	SHORT $L86627
$L86641:
; Line 3849
	mov	edx, DWORD PTR _plr[eax+376]
	mov	ecx, esi
	shl	ecx, 4
	mov	ecx, DWORD PTR _MaxStats[ecx+8]
	cmp	edx, ecx
	jle	SHORT $L86642
; Line 3850
	mov	DWORD PTR _plr[eax+376], ecx
; Line 3851
	jmp	SHORT $L86627
$L86642:
	cmp	edx, ebx
	jge	SHORT $L86627
; Line 3852
	mov	DWORD PTR _plr[eax+376], ebx
; Line 3854
	jmp	SHORT $L86627
$L86637:
; Line 3842
	mov	edx, DWORD PTR _plr[eax+368]
	mov	ecx, esi
	shl	ecx, 4
	mov	ecx, DWORD PTR _MaxStats[ecx+4]
	cmp	edx, ecx
	jle	SHORT $L86638
; Line 3843
	mov	DWORD PTR _plr[eax+368], ecx
; Line 3844
	jmp	SHORT $L86627
$L86638:
	cmp	edx, ebx
	jge	SHORT $L86627
; Line 3845
	mov	DWORD PTR _plr[eax+368], ebx
; Line 3847
	jmp	SHORT $L86627
$L86633:
; Line 3835
	mov	edx, DWORD PTR _plr[eax+360]
	mov	ecx, esi
	shl	ecx, 4
	mov	ecx, DWORD PTR _MaxStats[ecx]
	cmp	edx, ecx
	jle	SHORT $L86634
; Line 3836
	mov	DWORD PTR _plr[eax+360], ecx
; Line 3837
	jmp	SHORT $L86627
$L86634:
	cmp	edx, ebx
	jge	SHORT $L86627
; Line 3838
	mov	DWORD PTR _plr[eax+360], ebx
$L86627:
; Line 3832
	inc	edi
	cmp	edi, 4
	jl	$L86626
	pop	edi
	pop	esi
	pop	ebx
; Line 3864
	pop	ecx
	ret	0
@CheckStats@4 ENDP
_TEXT	ENDS
PUBLIC	@ModifyPlrStr@8
PUBLIC	??_C@_0CA@KHLG@ModifyPlrStr?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@KHLG@ModifyPlrStr?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@KHLG@ModifyPlrStr?3?5illegal?5player?5?$CFd?$AA@ DB 'ModifyPlrS'
	DB	'tr: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @ModifyPlrStr@8
_TEXT	SEGMENT
_pnum$ = -4
@ModifyPlrStr@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _l$ = edx
; Line 3867
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
	push	edi
; Line 3870
	cmp	esi, 4
	mov	edi, edx
	mov	DWORD PTR _pnum$[ebp], esi
	jb	SHORT $L86656
; Line 3871
	push	esi
	push	OFFSET FLAT:??_C@_0CA@KHLG@ModifyPlrStr?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86656:
; Line 3874
	imul	esi, 21720				; 000054d8H
	push	ebx
	mov	dl, BYTE PTR _plr[esi+352]
; Line 3875
	mov	ecx, DWORD PTR _plr[esi+360]
	movsx	eax, dl
	shl	eax, 4
	lea	ebx, DWORD PTR [ecx+edi]
	mov	eax, DWORD PTR _MaxStats[eax]
	cmp	ebx, eax
	jle	SHORT $L86658
; Line 3876
	sub	eax, ecx
	mov	edi, eax
$L86658:
; Line 3879
	lea	eax, DWORD PTR _plr[esi+356]
; Line 3880
	add	ecx, edi
	mov	DWORD PTR _plr[esi+360], ecx
	add	DWORD PTR [eax], edi
	mov	ebx, DWORD PTR [eax]
; Line 3882
	cmp	dl, 1
	jne	SHORT $L86659
; Line 3883
	mov	eax, DWORD PTR _plr[esi+372]
	movsx	ecx, BYTE PTR _plr[esi+440]
	add	eax, ebx
	imul	eax, ecx
	mov	ecx, 200				; 000000c8H
; Line 3884
	jmp	SHORT $L87473
$L86659:
; Line 3885
	movsx	eax, BYTE PTR _plr[esi+440]
	push	100					; 00000064H
	imul	eax, ebx
	pop	ecx
$L87473:
	cdq
	idiv	ecx
; Line 3888
	mov	edi, DWORD PTR _pnum$[ebp]
	xor	edx, edx
	inc	edx
	mov	ecx, edi
	mov	DWORD PTR _plr[esi+392], eax
	call	@CalcPlrInv@8
; Line 3890
	cmp	edi, DWORD PTR _myplr
	pop	ebx
	jne	SHORT $L86661
; Line 3891
	mov	ax, WORD PTR _plr[esi+360]
	mov	dl, 79					; 0000004fH
	push	eax
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L86661:
	pop	edi
	pop	esi
; Line 3893
	leave
	ret	0
@ModifyPlrStr@8 ENDP
_TEXT	ENDS
PUBLIC	@ModifyPlrMag@8
PUBLIC	??_C@_0CA@KDMF@ModifyPlrMag?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@KDMF@ModifyPlrMag?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@KDMF@ModifyPlrMag?3?5illegal?5player?5?$CFd?$AA@ DB 'ModifyPlrM'
	DB	'ag: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @ModifyPlrMag@8
_TEXT	SEGMENT
_pnum$ = -4
@ModifyPlrMag@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _l$ = edx
; Line 3896
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
	push	edi
; Line 3899
	cmp	esi, 4
	mov	edi, edx
	mov	DWORD PTR _pnum$[ebp], esi
	jb	SHORT $L86670
; Line 3900
	push	esi
	push	OFFSET FLAT:??_C@_0CA@KDMF@ModifyPlrMag?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86670:
; Line 3903
	imul	esi, 21720				; 000054d8H
	push	ebx
	mov	dl, BYTE PTR _plr[esi+352]
	movsx	eax, dl
	shl	eax, 4
	mov	ecx, DWORD PTR _MaxStats[eax+4]
; Line 3904
	mov	eax, DWORD PTR _plr[esi+368]
	lea	ebx, DWORD PTR [eax+edi]
	cmp	ebx, ecx
	pop	ebx
	jle	SHORT $L86672
; Line 3905
	sub	ecx, eax
	mov	edi, ecx
$L86672:
; Line 3908
	add	DWORD PTR _plr[esi+364], edi
; Line 3909
	add	eax, edi
; Line 3911
	shl	edi, 6
; Line 3912
	cmp	dl, 2
	mov	DWORD PTR _plr[esi+368], eax
	jne	SHORT $L86673
; Line 3913
	add	edi, edi
$L86673:
; Line 3916
	add	DWORD PTR _plr[esi+424], edi
; Line 3917
	add	DWORD PTR _plr[esi+432], edi
; Line 3918
	test	BYTE PTR _plr[esi+21587], 8
	jne	SHORT $L86674
; Line 3919
	add	DWORD PTR _plr[esi+420], edi
; Line 3920
	add	DWORD PTR _plr[esi+428], edi
$L86674:
; Line 3923
	mov	edi, DWORD PTR _pnum$[ebp]
	xor	edx, edx
	inc	edx
	mov	ecx, edi
	call	@CalcPlrInv@8
; Line 3925
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L86675
; Line 3926
	mov	ax, WORD PTR _plr[esi+368]
	mov	dl, 80					; 00000050H
	push	eax
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L86675:
	pop	edi
	pop	esi
; Line 3928
	leave
	ret	0
@ModifyPlrMag@8 ENDP
_TEXT	ENDS
PUBLIC	@ModifyPlrDex@8
PUBLIC	??_C@_0CA@HDD@ModifyPlrDex?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@HDD@ModifyPlrDex?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@HDD@ModifyPlrDex?3?5illegal?5player?5?$CFd?$AA@ DB 'ModifyPlrDe'
	DB	'x: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @ModifyPlrDex@8
_TEXT	SEGMENT
@ModifyPlrDex@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _l$ = edx
; Line 3931
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi
; Line 3934
	cmp	ebx, 4
	mov	edi, edx
	jb	SHORT $L86683
; Line 3935
	push	ebx
	push	OFFSET FLAT:??_C@_0CA@HDD@ModifyPlrDex?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86683:
; Line 3938
	mov	esi, ebx
	imul	esi, 21720				; 000054d8H
	movsx	eax, BYTE PTR _plr[esi+352]
	shl	eax, 4
	mov	ecx, DWORD PTR _MaxStats[eax+8]
; Line 3939
	mov	eax, DWORD PTR _plr[esi+376]
	lea	edx, DWORD PTR [eax+edi]
	cmp	edx, ecx
	jle	SHORT $L86685
; Line 3940
	sub	ecx, eax
	mov	edi, ecx
$L86685:
; Line 3943
	add	DWORD PTR _plr[esi+372], edi
; Line 3945
	xor	edx, edx
	add	eax, edi
	inc	edx
	mov	ecx, ebx
	mov	DWORD PTR _plr[esi+376], eax
	call	@CalcPlrInv@8
; Line 3947
	cmp	BYTE PTR _plr[esi+352], 1
	jne	SHORT $L86686
; Line 3948
	mov	eax, DWORD PTR _plr[esi+356]
	movsx	ecx, BYTE PTR _plr[esi+440]
	add	eax, DWORD PTR _plr[esi+372]
	imul	eax, ecx
	cdq
	mov	ecx, 200				; 000000c8H
	idiv	ecx
	mov	DWORD PTR _plr[esi+392], eax
$L86686:
; Line 3951
	cmp	ebx, DWORD PTR _myplr
	jne	SHORT $L86687
; Line 3952
	mov	ax, WORD PTR _plr[esi+376]
	mov	dl, 81					; 00000051H
	push	eax
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L86687:
	pop	edi
	pop	esi
	pop	ebx
; Line 3954
	ret	0
@ModifyPlrDex@8 ENDP
_TEXT	ENDS
PUBLIC	@ModifyPlrVit@8
PUBLIC	??_C@_0CA@MIAP@ModifyPlrVit?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@MIAP@ModifyPlrVit?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@MIAP@ModifyPlrVit?3?5illegal?5player?5?$CFd?$AA@ DB 'ModifyPlrV'
	DB	'it: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @ModifyPlrVit@8
_TEXT	SEGMENT
_pnum$ = -4
@ModifyPlrVit@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _l$ = edx
; Line 3957
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
	push	edi
; Line 3960
	cmp	esi, 4
	mov	edi, edx
	mov	DWORD PTR _pnum$[ebp], esi
	jb	SHORT $L86696
; Line 3961
	push	esi
	push	OFFSET FLAT:??_C@_0CA@MIAP@ModifyPlrVit?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86696:
; Line 3964
	imul	esi, 21720				; 000054d8H
	push	ebx
	mov	dl, BYTE PTR _plr[esi+352]
	movsx	eax, dl
	shl	eax, 4
	mov	ecx, DWORD PTR _MaxStats[eax+12]
; Line 3965
	mov	eax, DWORD PTR _plr[esi+384]
	lea	ebx, DWORD PTR [eax+edi]
	cmp	ebx, ecx
	pop	ebx
	jle	SHORT $L86698
; Line 3966
	sub	ecx, eax
	mov	edi, ecx
$L86698:
; Line 3969
	add	DWORD PTR _plr[esi+380], edi
; Line 3970
	add	eax, edi
; Line 3972
	shl	edi, 6
; Line 3973
	test	dl, dl
	mov	DWORD PTR _plr[esi+384], eax
	jne	SHORT $L86699
; Line 3974
	add	edi, edi
$L86699:
; Line 3977
	add	DWORD PTR _plr[esi+400], edi
; Line 3978
	add	DWORD PTR _plr[esi+404], edi
; Line 3979
	add	DWORD PTR _plr[esi+408], edi
; Line 3980
	add	DWORD PTR _plr[esi+412], edi
; Line 3982
	mov	edi, DWORD PTR _pnum$[ebp]
	xor	edx, edx
	inc	edx
	mov	ecx, edi
	call	@CalcPlrInv@8
; Line 3984
	cmp	edi, DWORD PTR _myplr
	jne	SHORT $L86700
; Line 3985
	mov	ax, WORD PTR _plr[esi+384]
	mov	dl, 82					; 00000052H
	push	eax
	xor	ecx, ecx
	call	@NetSendCmdParam1@12
$L86700:
	pop	edi
	pop	esi
; Line 3987
	leave
	ret	0
@ModifyPlrVit@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@PALE@SetPlayerHitPoints?3?5illegal?5play@ ; `string'
;	COMDAT ??_C@_0CG@PALE@SetPlayerHitPoints?3?5illegal?5play@
_DATA	SEGMENT
??_C@_0CG@PALE@SetPlayerHitPoints?3?5illegal?5play@ DB 'SetPlayerHitPoint'
	DB	's: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SetPlayerHitPoints@8
_TEXT	SEGMENT
@SetPlayerHitPoints@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _newhp$ = edx
; Line 3990
	push	esi
	mov	esi, ecx
	push	edi
; Line 3991
	cmp	esi, 4
	mov	edi, edx
	jb	SHORT $L86707
; Line 3992
	push	esi
	push	OFFSET FLAT:??_C@_0CG@PALE@SetPlayerHitPoints?3?5illegal?5play@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86707:
; Line 3995
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
; Line 3996
	mov	ecx, DWORD PTR _plr[eax+404]
	mov	DWORD PTR _plr[eax+408], edi
	sub	ecx, DWORD PTR _plr[eax+412]
	add	ecx, edi
; Line 3998
	cmp	esi, DWORD PTR _myplr
	pop	edi
	mov	DWORD PTR _plr[eax+400], ecx
	pop	esi
	jne	SHORT $L86709
; Line 3999
	mov	DWORD PTR _drawhpflag, 1
$L86709:
; Line 4001
	ret	0
@SetPlayerHitPoints@8 ENDP
_TEXT	ENDS
PUBLIC	@SetPlrStr@8
PUBLIC	??_C@_0BN@IDJN@SetPlrStr?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BN@IDJN@SetPlrStr?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@IDJN@SetPlrStr?3?5illegal?5player?5?$CFd?$AA@ DB 'SetPlrStr: il'
	DB	'legal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SetPlrStr@8
_TEXT	SEGMENT
@SetPlrStr@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _v$ = edx
; Line 4004
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 4007
	cmp	edi, 4
	mov	ebx, edx
	jb	SHORT $L86717
; Line 4008
	push	edi
	push	OFFSET FLAT:??_C@_0BN@IDJN@SetPlrStr?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86717:
; Line 4011
	mov	esi, edi
; Line 4012
	xor	edx, edx
	imul	esi, 21720				; 000054d8H
	inc	edx
	mov	ecx, edi
	mov	DWORD PTR _plr[esi+360], ebx
	call	@CalcPlrInv@8
; Line 4014
	cmp	BYTE PTR _plr[esi+352], 1
	jne	SHORT $L86719
; Line 4015
	mov	eax, DWORD PTR _plr[esi+372]
	movsx	ecx, BYTE PTR _plr[esi+440]
	add	eax, DWORD PTR _plr[esi+356]
	imul	eax, ecx
	mov	ecx, 200				; 000000c8H
; Line 4016
	jmp	SHORT $L87486
$L86719:
; Line 4017
	movsx	eax, BYTE PTR _plr[esi+440]
	imul	eax, DWORD PTR _plr[esi+356]
	push	100					; 00000064H
	pop	ecx
$L87486:
	cdq
	idiv	ecx
	pop	edi
; Line 4020
	mov	DWORD PTR _plr[esi+392], eax
	pop	esi
	pop	ebx
; Line 4021
	ret	0
@SetPlrStr@8 ENDP
_TEXT	ENDS
PUBLIC	@SetPlrMag@8
PUBLIC	??_C@_0BN@IHOO@SetPlrMag?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BN@IHOO@SetPlrMag?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@IHOO@SetPlrMag?3?5illegal?5player?5?$CFd?$AA@ DB 'SetPlrMag: il'
	DB	'legal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SetPlrMag@8
_TEXT	SEGMENT
@SetPlrMag@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _v$ = edx
; Line 4024
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
; Line 4027
	cmp	edi, 4
	jb	SHORT $L86728
; Line 4028
	push	edi
	push	OFFSET FLAT:??_C@_0BN@IHOO@SetPlrMag?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86728:
; Line 4031
	mov	eax, edi
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _plr[eax+368], esi
; Line 4033
	shl	esi, 6
; Line 4034
	cmp	BYTE PTR _plr[eax+352], 2
	jne	SHORT $L86730
; Line 4035
	add	esi, esi
$L86730:
; Line 4040
	xor	edx, edx
	mov	ecx, edi
	mov	DWORD PTR _plr[eax+424], esi
	mov	DWORD PTR _plr[eax+432], esi
	pop	edi
	inc	edx
	pop	esi
	jmp	@CalcPlrInv@8
@SetPlrMag@8 ENDP
_TEXT	ENDS
PUBLIC	@SetPlrDex@8
PUBLIC	??_C@_0BN@CDBI@SetPlrDex?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BN@CDBI@SetPlrDex?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@CDBI@SetPlrDex?3?5illegal?5player?5?$CFd?$AA@ DB 'SetPlrDex: il'
	DB	'legal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SetPlrDex@8
_TEXT	SEGMENT
@SetPlrDex@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _v$ = edx
; Line 4044
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 4047
	cmp	edi, 4
	mov	ebx, edx
	jb	SHORT $L86738
; Line 4048
	push	edi
	push	OFFSET FLAT:??_C@_0BN@CDBI@SetPlrDex?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86738:
; Line 4051
	mov	esi, edi
; Line 4052
	xor	edx, edx
	imul	esi, 21720				; 000054d8H
	inc	edx
	mov	ecx, edi
	mov	DWORD PTR _plr[esi+376], ebx
	call	@CalcPlrInv@8
; Line 4054
	cmp	BYTE PTR _plr[esi+352], 1
	jne	SHORT $L86740
; Line 4055
	mov	eax, DWORD PTR _plr[esi+372]
	movsx	ecx, BYTE PTR _plr[esi+440]
	add	eax, DWORD PTR _plr[esi+356]
	imul	eax, ecx
	mov	ecx, 200				; 000000c8H
; Line 4056
	jmp	SHORT $L87494
$L86740:
; Line 4057
	movsx	eax, BYTE PTR _plr[esi+440]
	imul	eax, DWORD PTR _plr[esi+356]
	push	100					; 00000064H
	pop	ecx
$L87494:
	cdq
	idiv	ecx
	pop	edi
; Line 4060
	mov	DWORD PTR _plr[esi+392], eax
	pop	esi
	pop	ebx
; Line 4061
	ret	0
@SetPlrDex@8 ENDP
_TEXT	ENDS
PUBLIC	@SetPlrVit@8
PUBLIC	??_C@_0BN@OMCE@SetPlrVit?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BN@OMCE@SetPlrVit?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0BN@OMCE@SetPlrVit?3?5illegal?5player?5?$CFd?$AA@ DB 'SetPlrVit: il'
	DB	'legal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @SetPlrVit@8
_TEXT	SEGMENT
@SetPlrVit@8 PROC NEAR					; COMDAT
; _pnum$ = ecx
; _v$ = edx
; Line 4064
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
; Line 4067
	cmp	edi, 4
	jb	SHORT $L86749
; Line 4068
	push	edi
	push	OFFSET FLAT:??_C@_0BN@OMCE@SetPlrVit?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86749:
; Line 4071
	mov	eax, edi
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _plr[eax+384], esi
; Line 4073
	shl	esi, 6
; Line 4074
	cmp	BYTE PTR _plr[eax+352], 0
	jne	SHORT $L86751
; Line 4075
	add	esi, esi
$L86751:
; Line 4080
	xor	edx, edx
	mov	ecx, edi
	mov	DWORD PTR _plr[eax+400], esi
	mov	DWORD PTR _plr[eax+404], esi
	pop	edi
	inc	edx
	pop	esi
	jmp	@CalcPlrInv@8
@SetPlrVit@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@BCNB@InitDungMsgs?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@BCNB@InitDungMsgs?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@BCNB@InitDungMsgs?3?5illegal?5player?5?$CFd?$AA@ DB 'InitDungMs'
	DB	'gs: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @InitDungMsgs@4
_TEXT	SEGMENT
@InitDungMsgs@4 PROC NEAR				; COMDAT
; _pnum$ = ecx
; Line 4084
	push	esi
	mov	esi, ecx
; Line 4085
	cmp	esi, 4
	jb	SHORT $L86756
; Line 4086
	push	esi
	push	OFFSET FLAT:??_C@_0CA@BCNB@InitDungMsgs?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L86756:
; Line 4089
	imul	esi, 21720				; 000054d8H
	and	BYTE PTR _plr[esi+21625], 0
	pop	esi
; Line 4090
	ret	0
@InitDungMsgs@4 ENDP
_TEXT	ENDS
PUBLIC	_PlayDungMsgs
PUBLIC	??_C@_0CA@LHAB@PlayDungMsgs?3?5illegal?5player?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0CA@LHAB@PlayDungMsgs?3?5illegal?5player?5?$CFd?$AA@
_DATA	SEGMENT
??_C@_0CA@LHAB@PlayDungMsgs?3?5illegal?5player?5?$CFd?$AA@ DB 'PlayDungMs'
	DB	'gs: illegal player %d', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _PlayDungMsgs
_TEXT	SEGMENT
_PlayDungMsgs PROC NEAR					; COMDAT
; Line 4094
	mov	eax, DWORD PTR _myplr
	cmp	eax, 4
	jb	SHORT $L86760
; Line 4095
	push	eax
	push	OFFSET FLAT:??_C@_0CA@LHAB@PlayDungMsgs?3?5illegal?5player?5?$CFd?$AA@ ; `string'
	call	_TermMsg
	mov	eax, DWORD PTR _myplr
	pop	ecx
	pop	ecx
$L86760:
; Line 4098
	mov	cl, BYTE PTR _currlevel
	push	ebx
	xor	ebx, ebx
	cmp	cl, 1
	jne	SHORT $L86762
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+501], bl
	jne	$L86790
	cmp	BYTE PTR _gbMaxPlayers, cl
	jne	$L86790
	mov	cl, BYTE PTR _plr[eax+21625]
	test	cl, 1
	jne	$L86790
; Line 4100
	mov	dl, BYTE PTR _plr[eax+352]
	mov	DWORD PTR _sfxdelay, 40			; 00000028H
	cmp	dl, bl
	jne	SHORT $L86763
; Line 4101
	mov	DWORD PTR _sfxdnum, 822			; 00000336H
; Line 4102
	jmp	SHORT $L86767
$L86763:
	cmp	dl, 1
	jne	SHORT $L86765
; Line 4103
	mov	DWORD PTR _sfxdnum, 708			; 000002c4H
; Line 4104
	jmp	SHORT $L86767
$L86765:
	cmp	dl, 2
	jne	SHORT $L86767
; Line 4105
	mov	DWORD PTR _sfxdnum, 605			; 0000025dH
$L86767:
; Line 4107
	or	cl, 1
$L87505:
	mov	BYTE PTR _plr[eax+21625], cl
	pop	ebx
; Line 4147
	ret	0
$L86762:
; Line 4108
	cmp	cl, 5
	jne	SHORT $L86769
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+505], bl
	jne	$L86790
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	$L86790
	mov	cl, BYTE PTR _plr[eax+21625]
	test	cl, 2
	jne	$L86790
; Line 4110
	mov	dl, BYTE PTR _plr[eax+352]
	mov	DWORD PTR _sfxdelay, 40			; 00000028H
	cmp	dl, bl
	jne	SHORT $L86770
; Line 4111
	mov	DWORD PTR _sfxdnum, 821			; 00000335H
; Line 4112
	jmp	SHORT $L86774
$L86770:
	cmp	dl, 1
	jne	SHORT $L86772
; Line 4113
	mov	DWORD PTR _sfxdnum, 707			; 000002c3H
; Line 4114
	jmp	SHORT $L86774
$L86772:
	cmp	dl, 2
	jne	SHORT $L86774
; Line 4115
	mov	DWORD PTR _sfxdnum, 604			; 0000025cH
$L86774:
; Line 4117
	or	cl, 2
; Line 4118
	jmp	SHORT $L87505
$L86769:
	cmp	cl, 9
	jne	SHORT $L86776
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+509], bl
	jne	$L86790
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	$L86790
	mov	cl, BYTE PTR _plr[eax+21625]
	test	cl, 4
	jne	$L86790
; Line 4120
	mov	dl, BYTE PTR _plr[eax+352]
	mov	DWORD PTR _sfxdelay, 40			; 00000028H
	cmp	dl, bl
	jne	SHORT $L86777
; Line 4121
	mov	DWORD PTR _sfxdnum, 823			; 00000337H
; Line 4122
	jmp	SHORT $L86781
$L86777:
	cmp	dl, 1
	jne	SHORT $L86779
; Line 4123
	mov	DWORD PTR _sfxdnum, 709			; 000002c5H
; Line 4124
	jmp	SHORT $L86781
$L86779:
	cmp	dl, 2
	jne	SHORT $L86781
; Line 4125
	mov	DWORD PTR _sfxdnum, 606			; 0000025eH
$L86781:
; Line 4127
	or	cl, 4
; Line 4128
	jmp	$L87505
$L86776:
	cmp	cl, 13					; 0000000dH
	jne	SHORT $L86783
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+513], bl
	jne	$L86790
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	$L86790
	mov	cl, BYTE PTR _plr[eax+21625]
	test	cl, 8
	jne	$L86790
; Line 4130
	mov	dl, BYTE PTR _plr[eax+352]
	mov	DWORD PTR _sfxdelay, 40			; 00000028H
	cmp	dl, bl
	jne	SHORT $L86784
; Line 4131
	mov	DWORD PTR _sfxdnum, 824			; 00000338H
; Line 4132
	jmp	SHORT $L86788
$L86784:
	cmp	dl, 1
	jne	SHORT $L86786
; Line 4133
	mov	DWORD PTR _sfxdnum, 710			; 000002c6H
; Line 4134
	jmp	SHORT $L86788
$L86786:
	cmp	dl, 2
	jne	SHORT $L86788
; Line 4135
	mov	DWORD PTR _sfxdnum, 607			; 0000025fH
$L86788:
; Line 4137
	or	cl, 8
; Line 4138
	jmp	$L87505
$L86783:
	cmp	cl, 16					; 00000010H
	jne	SHORT $L86790
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+515], bl
	jne	SHORT $L86790
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L86790
	mov	cl, BYTE PTR _plr[eax+21625]
	test	cl, 16					; 00000010H
	jne	SHORT $L86790
; Line 4140
	mov	dl, BYTE PTR _plr[eax+352]
	mov	DWORD PTR _sfxdelay, 40			; 00000028H
	cmp	dl, bl
	je	SHORT $L86792
	cmp	dl, 1
	je	SHORT $L86792
	cmp	dl, 2
	jne	SHORT $L86791
$L86792:
; Line 4141
	mov	DWORD PTR _sfxdnum, 837			; 00000345H
$L86791:
; Line 4143
	or	cl, 16					; 00000010H
; Line 4144
	jmp	$L87505
$L86790:
; Line 4145
	mov	DWORD PTR _sfxdelay, ebx
	pop	ebx
; Line 4147
	ret	0
_PlayDungMsgs ENDP
_TEXT	ENDS
END
