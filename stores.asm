; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/stores.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_08EOCP@Griswold?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05CDCK@Pepin?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05IMMF@Ogden?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04COPJ@Cain?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07NCCG@Farnham?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05BHI@Adria?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HFBJ@Gillian?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DCMB@Wirt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@CAKE@Data?2TextBox2?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@PCLN@Data?2PentSpn2?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@JNKB@Data?2TextSlid?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02JAFN@?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@CKGA@Welcome?5to?5the?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@KHJH@Blacksmith?8s?5shop?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@NFKG@Talk?5to?5Griswold?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@NGFN@Buy?5basic?5items?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GLAI@Buy?5premium?5items?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IGCK@Sell?5items?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@DIHN@Repair?5items?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@FJPP@Leave?5the?5shop?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03BNII@?0?5?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@EAMD@Charges?3?5?$CFi?1?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GBDG@Damage?3?5?$CFi?9?$CFi?5?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@CAJP@Armor?3?5?$CFi?5?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@HJC@Dur?3?5?$CFi?1?$CFi?0?5?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@NEAL@Indestructible?0?5?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09OOBN@Required?3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GDNC@?$CFs?5?$CFi?5Str?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09LBGI@?$CFs?5?$CFi?5Mag?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09IBEM@?$CFs?5?$CFi?5Dex?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@LFL@No?5required?5attributes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@KGCB@Unique?5Item?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DH@JMAP@I?5have?5these?5items?5for?5sale?5?3?5?5?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JDGB@Back?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DH@ODAC@I?5have?5these?5premium?5items?5for?5s@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DC@MDGE@Which?5item?5is?5for?5sale?$DP?5?5?5?5?5?5?5?5?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DD@BHHN@You?5have?5nothing?5I?5want?4?5?5?5?5?5?5?5?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@PEHE@Repair?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5Yo@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DG@ILHF@You?5have?5nothing?5to?5repair?4?5?5?5?5?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@INAE@Witch?8s?5shack?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@NCAJ@Talk?5to?5Adria?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09OKAN@Buy?5items?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@DCIB@Recharge?5staves?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@MIOM@Leave?5the?5shack?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CP@BANC@Recharge?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DI@KEMJ@You?5have?5nothing?5to?5recharge?4?5?5?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@HIFG@You?5do?5not?5have?5enough?5gold?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@POBB@You?5do?5not?5have?5enough?5room?5in?5i@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NKDL@Do?5we?5have?5a?5deal?$DP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@GOFL@Are?5you?5sure?5you?5want?5to?5identif@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CI@FBKO@Are?5you?5sure?5you?5want?5to?5buy?5thi@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@MGFL@Are?5you?5sure?5you?5want?5to?5recharg@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@OEIG@Are?5you?5sure?5you?5want?5to?5sell?5th@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CL@NGLO@Are?5you?5sure?5you?5want?5to?5repair?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03PEHN@Yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02JOHD@No?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@DLEO@Wirt?5the?5Peg?9legged?5boy?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@EDHE@Talk?5to?5Wirt?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JLDC@Say?5goodbye?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@KKHD@I?5have?5something?5for?5sale?0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JKHG@but?5it?5will?5cost?550?5gold?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@CNLL@just?5to?5take?5a?5look?4?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@MAL@What?5have?5you?5got?$DP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DF@CEJK@I?5have?5this?5item?5for?5sale?5?3?5?5?5?5?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MGBF@Leave?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@PLOI@Healer?8s?5home?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@PAFL@Talk?5to?5Pepin?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@MHBC@Receive?5healing?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CBOH@Leave?5Healer?8s?5home?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@GPOK@The?5Town?5Elder?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FPEM@Talk?5to?5Cain?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@PCIP@Identify?5an?5item?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CP@CHOJ@Identify?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DI@GPPC@You?5have?5nothing?5to?5identify?4?5?5?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@KKHN@This?5item?5is?3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GCNB@Done?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FKDC@Talk?5to?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06LKCA@Gossip?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PNPJ@Rising?5Sun?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@FPLE@Talk?5to?5Ogden?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LOPC@Leave?5the?5tavern?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@PMED@Talk?5to?5Gillian?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FOH@Farnham?5the?5Drunk?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FLHM@Talk?5to?5Farnham?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EJIG@Say?5Goodbye?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _qmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitStores
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SetupTownStores
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FreeStoreMem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawSTextBack
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PrintSString@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawSLine@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawSArrows@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawSTextHelp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ClearSText@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddSLine@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddSTextVal@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @OffsetSTextY@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddSText@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _StoreAutoPlace
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartSmith
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @S_ScrollSBuy@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PrintStoreItem@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartSBuy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @S_ScrollSPBuy@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartSPBuy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SmithSellOk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @S_ScrollSSell@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartSSell
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SmithRepairOk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartSRepair
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddStoreHoldRepair@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartWitch
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @S_ScrollWBuy@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartWBuy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WitchSellOk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartWSell
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WitchRechargeOk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddStoreHoldRecharge@372
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartWRecharge
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartNoMoney
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartNoRoom
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartConfirm
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartBoy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartBBoy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartHealer
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @S_ScrollHBuy@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartHBuy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartStory
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @IdItemOk@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddStoreHoldId@372
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartSIdentify
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartIdShow
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartTalk
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartTavern
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartBarMaid
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StartDrunk
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StartStore@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawSText
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _STextESC
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _STextUp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _STextDown
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _STextPrior
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _STextNext
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_SmithEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetGoldCurs@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetSpdbarGoldCurs@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @TakePlrsMoney@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SmithBuyItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_SBuyEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SmithBuyPItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_SPBuyEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @StoreGoldFit@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PlaceStoreGold@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _StoreSellItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_SSellEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SmithRepairItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_SRepairEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_WitchEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _WitchBuyItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_WBuyEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_WSellEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _WitchRechargeItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_WRechargeEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_BoyEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _BoyBuyItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _HealerBuyItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_BBuyEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _StoryIdItem
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_ConfirmEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_HealerEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_HBuyEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_StoryEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_SIDEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_TalkEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_TavernEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_BarmaidEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _S_DrunkEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _STextEnter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckStoreBtn
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ReleaseStoreBtn
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_SStringY
PUBLIC	_talkname
PUBLIC	??_C@_08EOCP@Griswold?$AA@			; `string'
PUBLIC	??_C@_05CDCK@Pepin?$AA@				; `string'
PUBLIC	??_C@_00A@?$AA@					; `string'
PUBLIC	??_C@_05IMMF@Ogden?$AA@				; `string'
PUBLIC	??_C@_04COPJ@Cain?$AA@				; `string'
PUBLIC	??_C@_07NCCG@Farnham?$AA@			; `string'
PUBLIC	??_C@_05BHI@Adria?$AA@				; `string'
PUBLIC	??_C@_07HFBJ@Gillian?$AA@			; `string'
PUBLIC	??_C@_04DCMB@Wirt?$AA@				; `string'
;	COMDAT ??_C@_00A@?$AA@
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
_DATA	SEGMENT
COMM	_stextup:DWORD
COMM	_storenumh:DWORD
COMM	_stextlhold:DWORD
COMM	_boyitem:BYTE:0170H
COMM	_stextshold:DWORD
COMM	_premiumitem:BYTE:08a0H
COMM	_pSTextBoxCels:DWORD
COMM	_premiumlevel:DWORD
COMM	_talker:DWORD
COMM	_stext:BYTE:0ea0H
COMM	_stextsize:BYTE
COMM	_stextsmax:DWORD
COMM	_InStoreFlag:DWORD
COMM	_storehold:BYTE:04500H
COMM	_gossipstart:DWORD
COMM	_witchitem:BYTE:01cc0H
COMM	_stextscrl:DWORD
COMM	_numpremium:DWORD
COMM	_healitem:BYTE:01cc0H
COMM	_golditem:BYTE:0170H
COMM	_storehidx:BYTE:030H
COMM	_pSTextSlidCels:DWORD
COMM	_stextvhold:DWORD
COMM	_stextsel:DWORD
COMM	_stextscrldbtn:BYTE
COMM	_gossipend:DWORD
COMM	_pCelBuff:DWORD
COMM	_stextsval:DWORD
COMM	_boylevel:DWORD
COMM	_smithitem:BYTE:01cc0H
COMM	_stextdown:DWORD
COMM	_stextscrlubtn:BYTE
COMM	_stextflag:BYTE
_SStringY DD	00H
	DD	0cH
	DD	018H
	DD	024H
	DD	030H
	DD	03cH
	DD	048H
	DD	054H
	DD	060H
	DD	06cH
	DD	078H
	DD	084H
	DD	090H
	DD	09cH
	DD	0a8H
	DD	0b4H
	DD	0c0H
	DD	0ccH
	DD	0d8H
	DD	0e4H
	DD	0f0H
	DD	0fcH
	DD	0108H
	DD	0114H
_DATA	ENDS
;	COMDAT ??_C@_08EOCP@Griswold?$AA@
_DATA	SEGMENT
??_C@_08EOCP@Griswold?$AA@ DB 'Griswold', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05CDCK@Pepin?$AA@
_DATA	SEGMENT
??_C@_05CDCK@Pepin?$AA@ DB 'Pepin', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05IMMF@Ogden?$AA@
_DATA	SEGMENT
??_C@_05IMMF@Ogden?$AA@ DB 'Ogden', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04COPJ@Cain?$AA@
_DATA	SEGMENT
??_C@_04COPJ@Cain?$AA@ DB 'Cain', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07NCCG@Farnham?$AA@
_DATA	SEGMENT
??_C@_07NCCG@Farnham?$AA@ DB 'Farnham', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05BHI@Adria?$AA@
_DATA	SEGMENT
??_C@_05BHI@Adria?$AA@ DB 'Adria', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HFBJ@Gillian?$AA@
_DATA	SEGMENT
??_C@_07HFBJ@Gillian?$AA@ DB 'Gillian', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DCMB@Wirt?$AA@
_DATA	SEGMENT
??_C@_04DCMB@Wirt?$AA@ DB 'Wirt', 00H			; `string'
_DATA	ENDS
_DATA	SEGMENT
_talkname DD	FLAT:??_C@_08EOCP@Griswold?$AA@
	DD	FLAT:??_C@_05CDCK@Pepin?$AA@
	DD	FLAT:??_C@_00A@?$AA@
	DD	FLAT:??_C@_05IMMF@Ogden?$AA@
	DD	FLAT:??_C@_04COPJ@Cain?$AA@
	DD	FLAT:??_C@_07NCCG@Farnham?$AA@
	DD	FLAT:??_C@_05BHI@Adria?$AA@
	DD	FLAT:??_C@_07HFBJ@Gillian?$AA@
	DD	FLAT:??_C@_04DCMB@Wirt?$AA@
_DATA	ENDS
PUBLIC	??_C@_0BC@CAKE@Data?2TextBox2?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BC@PCLN@Data?2PentSpn2?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BC@JNKB@Data?2TextSlid?4CEL?$AA@		; `string'
PUBLIC	_InitStores
PUBLIC	@ClearSText@8
EXTRN	@LoadFileInMem@8:NEAR
;	COMDAT ??_C@_0BC@CAKE@Data?2TextBox2?4CEL?$AA@
; File Source/stores.cpp
_DATA	SEGMENT
??_C@_0BC@CAKE@Data?2TextBox2?4CEL?$AA@ DB 'Data\TextBox2.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@PCLN@Data?2PentSpn2?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BC@PCLN@Data?2PentSpn2?4CEL?$AA@ DB 'Data\PentSpn2.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@JNKB@Data?2TextSlid?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BC@JNKB@Data?2TextSlid?4CEL?$AA@ DB 'Data\TextSlid.CEL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _InitStores
_TEXT	SEGMENT
_InitStores PROC NEAR					; COMDAT
; Line 81
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BC@CAKE@Data?2TextBox2?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 82
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BC@PCLN@Data?2PentSpn2?4CEL?$AA@ ; `string'
	mov	DWORD PTR _pSTextBoxCels, eax
	call	@LoadFileInMem@8
; Line 83
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BC@JNKB@Data?2TextSlid?4CEL?$AA@ ; `string'
	mov	DWORD PTR _pCelBuff, eax
	call	@LoadFileInMem@8
; Line 84
	push	24					; 00000018H
	xor	ecx, ecx
	pop	edx
	mov	DWORD PTR _pSTextSlidCels, eax
	call	@ClearSText@8
; Line 86
	xor	eax, eax
	xor	ecx, ecx
	inc	eax
	mov	BYTE PTR _stextflag, cl
	mov	DWORD PTR _InStoreFlag, eax
; Line 87
	mov	DWORD PTR _premiumlevel, eax
; Line 88
	mov	BYTE PTR _stextsize, cl
; Line 89
	mov	DWORD PTR _stextscrl, ecx
; Line 90
	mov	DWORD PTR _numpremium, ecx
	mov	eax, OFFSET FLAT:_premiumitem+8
$L84996:
; Line 93
	or	DWORD PTR [eax], -1
	add	eax, 368				; 00000170H
	cmp	eax, OFFSET FLAT:_premiumitem+2216
	jl	SHORT $L84996
; Line 95
	or	DWORD PTR _boyitem+8, -1
; Line 96
	mov	DWORD PTR _boylevel, ecx
; Line 97
	ret	0
_InitStores ENDP
_TEXT	ENDS
PUBLIC	_SetupTownStores
EXTRN	@SpawnBoy@4:NEAR
EXTRN	@SpawnHealer@4:NEAR
EXTRN	_SpawnStoreGold:NEAR
EXTRN	_glSeedTbl:BYTE
EXTRN	_gbMaxPlayers:BYTE
EXTRN	@SetRndSeed@4:NEAR
EXTRN	_myplr:DWORD
EXTRN	_plr:BYTE
EXTRN	__imp__GetTickCount@0:NEAR
EXTRN	@SpawnSmith@4:NEAR
EXTRN	@SpawnPremium@4:NEAR
EXTRN	_currlevel:BYTE
EXTRN	@SpawnWitch@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SetupTownStores
_TEXT	SEGMENT
_SetupTownStores PROC NEAR				; COMDAT
; Line 105
	push	esi
; Line 109
	call	DWORD PTR __imp__GetTickCount@0
	mov	ecx, eax
	movzx	eax, BYTE PTR _currlevel
	imul	ecx, DWORD PTR _glSeedTbl[eax*4]
	call	@SetRndSeed@4
; Line 110
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85002
; Line 112
	mov	ecx, DWORD PTR _myplr
	xor	esi, esi
	xor	eax, eax
	imul	ecx, 21720				; 000054d8H
	lea	ecx, DWORD PTR _plr[ecx+500]
$L85003:
; Line 113
	cmp	BYTE PTR [ecx+eax], 0
	je	SHORT $L85004
; Line 114
	mov	esi, eax
$L85004:
; Line 112
	inc	eax
	cmp	eax, 17					; 00000011H
	jl	SHORT $L85003
; Line 116
	jmp	SHORT $L85007
$L85002:
; Line 117
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	movsx	esi, BYTE PTR _plr[eax+440]
	sar	esi, 1
$L85007:
; Line 119
	inc	esi
	inc	esi
; Line 120
	cmp	esi, 6
	jge	SHORT $L85008
; Line 121
	push	6
	pop	esi
$L85008:
; Line 122
	cmp	esi, 16					; 00000010H
	jle	SHORT $L85009
; Line 123
	push	16					; 00000010H
	pop	esi
$L85009:
; Line 124
	call	_SpawnStoreGold
; Line 125
	mov	ecx, esi
	call	@SpawnSmith@4
; Line 126
	mov	ecx, esi
	call	@SpawnWitch@4
; Line 127
	mov	ecx, esi
	call	@SpawnHealer@4
; Line 128
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+440]
	call	@SpawnBoy@4
; Line 129
	mov	eax, DWORD PTR _myplr
	pop	esi
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+440]
	jmp	@SpawnPremium@4
_SetupTownStores ENDP
_TEXT	ENDS
PUBLIC	_FreeStoreMem
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _FreeStoreMem
_TEXT	SEGMENT
_FreeStoreMem PROC NEAR					; COMDAT
; Line 137
	mov	ecx, DWORD PTR _pSTextBoxCels
; Line 138
	and	DWORD PTR _pSTextBoxCels, 0
; Line 139
	call	@mem_free_dbg@4
; Line 140
	mov	ecx, DWORD PTR _pCelBuff
; Line 141
	and	DWORD PTR _pCelBuff, 0
; Line 142
	call	@mem_free_dbg@4
; Line 143
	mov	ecx, DWORD PTR _pSTextSlidCels
; Line 144
	and	DWORD PTR _pSTextSlidCels, 0
; Line 145
	jmp	@mem_free_dbg@4
_FreeStoreMem ENDP
_TEXT	ENDS
PUBLIC	_DrawSTextBack
EXTRN	_gpBuffer:DWORD
EXTRN	@CelDecodeOnly@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DrawSTextBack
_TEXT	SEGMENT
_DrawSTextBack PROC NEAR				; COMDAT
; Line 149
	push	edi
; Line 150
	push	271					; 0000010fH
	push	1
	mov	edx, 487				; 000001e7H
	push	DWORD PTR _pSTextBoxCels
	mov	ecx, 408				; 00000198H
	call	@CelDecodeOnly@20
; File Source/asm_trans_rect.inc
; Line 16
	mov	edi, DWORD PTR _gpBuffer
; Line 18
	add	edi, 372123				; 0005ad9bH
; Line 19
	xor	eax, eax
; Line 20
	mov	edx, 148				; 00000094H
$yloop$85017:
; Line 22
	mov	ecx, 132				; 00000084H
$x0loop$85018:
; Line 24
	stosb
; Line 25
	inc	edi
; Line 26
	loop	$x0loop$85018
; Line 28
	stosb
; Line 30
	sub	edi, 1033				; 00000409H
; Line 31
	mov	ecx, 132				; 00000084H
$x1loop$85019:
; Line 33
	inc	edi
; Line 34
	stosb
; Line 35
	loop	$x1loop$85019
; Line 36
	sub	edi, 1032				; 00000408H
; Line 37
	dec	edx
; Line 38
	jne	SHORT $yloop$85017
; Line 40
	mov	ecx, 132				; 00000084H
$x2loop$85020:
; Line 42
	stosb
; Line 43
	inc	edi
; Line 44
	loop	$x2loop$85020
; Line 46
	stosb
; Line 15
	pop	edi
; File Source/stores.cpp
; Line 157
	ret	0
_DrawSTextBack ENDP
_TEXT	ENDS
PUBLIC	??_C@_02JAFN@?$CFi?$AA@				; `string'
PUBLIC	@PrintSString@24
EXTRN	_fontframe:BYTE
EXTRN	_fontkern:BYTE
EXTRN	_fontidx:BYTE
EXTRN	_sprintf:NEAR
EXTRN	_screen_y_times_768:BYTE
EXTRN	_strlen:NEAR
EXTRN	@CPrintString@12:NEAR
;	COMDAT ??_C@_02JAFN@?$CFi?$AA@
_DATA	SEGMENT
??_C@_02JAFN@?$CFi?$AA@ DB '%i', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PrintSString@24
_TEXT	SEGMENT
_x$ = -28
_y$ = -32
_cjustflag$ = 8
_str$ = 12
_col$ = 16
_val$ = 20
_v7$ = -4
_v10$ = -12
_valstr$ = -64
_v25$ = -24
_v28$ = -20
_v29$ = -16
_v30$ = -8
@PrintSString@24 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 160
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
; Line 187
	mov	eax, edx
	push	ebx
	imul	eax, 156				; 0000009cH
	push	esi
	mov	ebx, ecx
	mov	esi, DWORD PTR _stext[eax+4]
; Line 188
	xor	eax, eax
	add	esi, DWORD PTR _SStringY[edx*4]
	cmp	BYTE PTR _stextsize, al
	push	edi
; Line 196
	mov	edi, DWORD PTR _str$[ebp]
	setne	al
	neg	eax
	mov	DWORD PTR _v7$[ebp], eax
; Line 251
	mov	eax, DWORD PTR _screen_y_times_768[esi*4+816]
	and	WORD PTR _v7$[ebp], 65216		; 0000fec0H
	push	edi
	add	eax, DWORD PTR _v7$[ebp]
	mov	DWORD PTR _y$[ebp], edx
	mov	DWORD PTR _x$[ebp], ebx
	lea	eax, DWORD PTR [eax+ebx+416]
	mov	DWORD PTR _v10$[ebp], eax
	call	_strlen
	mov	dl, BYTE PTR _stextsize
	pop	ecx
	mov	DWORD PTR _v28$[ebp], eax
	xor	eax, eax
	xor	ecx, ecx
	mov	DWORD PTR _v30$[ebp], eax
	neg	dl
	sbb	edx, edx
	and	edx, 320				; 00000140H
	add	edx, 257				; 00000101H
	cmp	BYTE PTR _cjustflag$[ebp], cl
	mov	DWORD PTR _v25$[ebp], edx
	je	SHORT $L85060
; Line 202
	cmp	DWORD PTR _v28$[ebp], ecx
	jle	SHORT $L85064
$L85062:
; Line 204
	movzx	edx, BYTE PTR [ecx+edi]
	inc	ecx
; Line 205
	movzx	edx, BYTE PTR _fontidx[edx]
; Line 206
	cmp	ecx, DWORD PTR _v28$[ebp]
	movzx	edx, BYTE PTR _fontframe[edx]
	movzx	edx, BYTE PTR _fontkern[edx]
	lea	eax, DWORD PTR [eax+edx+1]
	jl	SHORT $L85062
$L85064:
; Line 208
	mov	ecx, DWORD PTR _v25$[ebp]
	cmp	eax, ecx
	jge	SHORT $L85066
; Line 209
	sub	ecx, eax
	sar	ecx, 1
	mov	DWORD PTR _v30$[ebp], ecx
$L85066:
; Line 210
	mov	eax, DWORD PTR _v30$[ebp]
	add	DWORD PTR _v10$[ebp], eax
$L85060:
; Line 212
	mov	eax, DWORD PTR _stextsel
	cmp	eax, DWORD PTR _y$[ebp]
	jne	SHORT $L85067
; Line 213
	cmp	BYTE PTR _cjustflag$[ebp], 0
; Line 214
	mov	eax, DWORD PTR _v7$[ebp]
	je	SHORT $L85068
	mov	ecx, DWORD PTR _v30$[ebp]
	lea	eax, DWORD PTR [ecx+eax+416]
	lea	ecx, DWORD PTR [eax+ebx-20]
; Line 215
	jmp	SHORT $L85069
$L85068:
; Line 216
	lea	ecx, DWORD PTR [eax+ebx+396]
$L85069:
; Line 217
	push	12					; 0000000cH
	lea	edx, DWORD PTR [esi+205]
	push	DWORD PTR _InStoreFlag
	push	DWORD PTR _pCelBuff
	call	@CelDecodeOnly@20
$L85067:
; Line 219
	and	DWORD PTR _v29$[ebp], 0
; Line 220
	cmp	DWORD PTR _v28$[ebp], 0
	jle	SHORT $L85070
	jmp	SHORT $L85071
$L86788:
	mov	edi, DWORD PTR _str$[ebp]
$L85071:
; Line 222
	mov	eax, DWORD PTR _v29$[ebp]
; Line 224
	mov	edx, DWORD PTR _v30$[ebp]
	movzx	eax, BYTE PTR [eax+edi]
	movzx	eax, BYTE PTR _fontidx[eax]
	mov	al, BYTE PTR _fontframe[eax]
	movzx	edi, al
; Line 226
	test	al, al
	movzx	ecx, BYTE PTR _fontkern[edi]
	lea	ecx, DWORD PTR [ecx+edx+1]
	mov	DWORD PTR _v30$[ebp], ecx
	je	SHORT $L85075
	cmp	ecx, DWORD PTR _v25$[ebp]
	jg	SHORT $L85075
; Line 227
	push	DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _v10$[ebp]
	mov	edx, edi
	call	@CPrintString@12
$L85075:
; Line 230
	movzx	eax, BYTE PTR _fontkern[edi]
	mov	ecx, DWORD PTR _v10$[ebp]
	inc	DWORD PTR _v29$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _v10$[ebp], eax
; Line 231
	mov	eax, DWORD PTR _v29$[ebp]
	cmp	eax, DWORD PTR _v28$[ebp]
	jl	SHORT $L86788
$L85070:
; Line 234
	cmp	BYTE PTR _cjustflag$[ebp], 0
	jne	SHORT $L85080
	cmp	DWORD PTR _val$[ebp], 0
	jl	SHORT $L85080
; Line 235
	push	DWORD PTR _val$[ebp]
	lea	eax, DWORD PTR _valstr$[ebp]
	push	OFFSET FLAT:??_C@_02JAFN@?$CFi?$AA@	; `string'
	push	eax
	call	_sprintf
; Line 236
	mov	edi, DWORD PTR _screen_y_times_768[esi*4+816]
; Line 237
	lea	eax, DWORD PTR _valstr$[ebp]
	sub	edi, ebx
	push	eax
	add	edi, 656				; 00000290H
	call	_strlen
	add	esp, 16					; 00000010H
	mov	ebx, eax
$L85083:
; Line 238
	dec	ebx
	test	ebx, ebx
	js	SHORT $L86786
; Line 239
	movzx	eax, BYTE PTR _valstr$[ebp+ebx]
; Line 240
	or	ecx, -1
	movzx	eax, BYTE PTR _fontidx[eax]
	mov	al, BYTE PTR _fontframe[eax]
	movzx	edx, al
	mov	BYTE PTR 15+[ebp], al
	movzx	eax, BYTE PTR _fontkern[edx]
	sub	ecx, eax
	add	edi, ecx
; Line 241
	cmp	BYTE PTR 15+[ebp], 0
	je	SHORT $L85083
; Line 242
	push	DWORD PTR _col$[ebp]
	mov	ecx, edi
	call	@CPrintString@12
	jmp	SHORT $L85083
$L86786:
; Line 238
	mov	ebx, DWORD PTR _x$[ebp]
$L85080:
; Line 246
	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _stextsel, eax
	jne	SHORT $L85084
; Line 247
	cmp	BYTE PTR _cjustflag$[ebp], 0
	je	SHORT $L85085
; Line 248
	mov	eax, DWORD PTR _v7$[ebp]
	mov	ecx, DWORD PTR _v30$[ebp]
	lea	eax, DWORD PTR [ecx+eax+416]
	lea	ecx, DWORD PTR [eax+ebx+4]
; Line 249
	jmp	SHORT $L85086
$L85085:
; Line 250
	mov	ecx, 660				; 00000294H
	sub	ecx, ebx
$L85086:
; Line 251
	push	12					; 0000000cH
	lea	edx, DWORD PTR [esi+205]
	push	DWORD PTR _InStoreFlag
	push	DWORD PTR _pCelBuff
	call	@CelDecodeOnly@20
$L85084:
	pop	edi
	pop	esi
	pop	ebx
; Line 253
	leave
	ret	16					; 00000010H
@PrintSString@24 ENDP
_TEXT	ENDS
PUBLIC	@DrawSLine@4
; Function compile flags: /Ogsy
;	COMDAT @DrawSLine@4
_TEXT	SEGMENT
_out$86797 = -4
@DrawSLine@4 PROC NEAR					; COMDAT
; _y$ = ecx
; Line 259
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 271
	mov	eax, DWORD PTR _SStringY[ecx*4]
; Line 272
	cmp	BYTE PTR _stextsize, 1
	push	ebx
	push	esi
	mov	eax, DWORD PTR _screen_y_times_768[eax*4+792]
	push	edi
	jne	SHORT $L85100
; Line 273
	mov	edx, 142170				; 00022b5aH
; Line 274
	lea	ecx, DWORD PTR [eax+90]
; Line 275
	mov	edi, 146				; 00000092H
; Line 276
	mov	ebx, 182				; 000000b6H
; Line 277
	jmp	SHORT $L85101
$L85100:
; Line 280
	push	66					; 00000042H
	mov	edx, 142490				; 00022c9aH
	lea	ecx, DWORD PTR [eax+410]
	pop	edi
; Line 281
	mov	ebx, 502				; 000001f6H
$L85101:
; Line 283
	mov	eax, DWORD PTR _gpBuffer
	mov	DWORD PTR -16+[ebp], 3
	lea	esi, DWORD PTR [eax+edx]
; Line 284
	lea	edx, DWORD PTR [eax+ecx]
	mov	eax, edi
	shl	eax, 2
$L85104:
; Line 287
	test	eax, eax
	mov	DWORD PTR _out$86797[ebp], edx
	jbe	SHORT $L86800
	mov	DWORD PTR -8+[ebp], esi
	mov	DWORD PTR -12+[ebp], eax
	sub	DWORD PTR -8+[ebp], edx
$L86799:
	mov	ecx, DWORD PTR -8+[ebp]
	mov	edi, DWORD PTR _out$86797[ebp]
	inc	DWORD PTR _out$86797[ebp]
	dec	DWORD PTR -12+[ebp]
	mov	cl, BYTE PTR [ecx+edi]
	mov	BYTE PTR [edi], cl
	jne	SHORT $L86799
$L86800:
; Line 288
	lea	ecx, DWORD PTR [eax+esi]
; Line 289
	add	edx, eax
; Line 294
	dec	DWORD PTR -16+[ebp]
	mov	si, WORD PTR [ecx]
	mov	WORD PTR [edx], si
	lea	esi, DWORD PTR [ebx+ecx+2]
	lea	edx, DWORD PTR [ebx+edx+2]
	jne	SHORT $L85104
	pop	edi
	pop	esi
	pop	ebx
; Line 295
	leave
	ret	0
@DrawSLine@4 ENDP
_TEXT	ENDS
PUBLIC	@DrawSArrows@8
; Function compile flags: /Ogsy
;	COMDAT @DrawSArrows@8
_TEXT	SEGMENT
@DrawSArrows@8 PROC NEAR				; COMDAT
; _y1$ = ecx
; _y2$ = edx
; Line 299
	push	ebx
; Line 309
	mov	ebx, ecx
	push	ebp
	lea	ebp, DWORD PTR _SStringY[edx*4]
	shl	ebx, 2
	push	esi
	push	edi
	mov	esi, DWORD PTR _SStringY[ebx]
; Line 310
	mov	edi, DWORD PTR [ebp]
	mov	eax, 204				; 000000ccH
; Line 312
	mov	ecx, 665				; 00000299H
	add	esi, eax
	add	edi, eax
	cmp	BYTE PTR _stextscrlubtn, -1
	mov	edx, esi
	push	12					; 0000000cH
	jne	SHORT $L85120
	push	10					; 0000000aH
; Line 313
	jmp	SHORT $L86813
$L85120:
; Line 314
	push	12					; 0000000cH
$L86813:
	push	DWORD PTR _pSTextSlidCels
	call	@CelDecodeOnly@20
; Line 315
	cmp	BYTE PTR _stextscrldbtn, -1
; Line 316
	mov	ecx, 665				; 00000299H
	mov	edx, edi
	push	12					; 0000000cH
	jne	SHORT $L85122
	push	9
; Line 317
	jmp	SHORT $L86814
$L85122:
; Line 318
	push	11					; 0000000bH
$L86814:
	push	DWORD PTR _pSTextSlidCels
	call	@CelDecodeOnly@20
; Line 320
	add	esi, 12					; 0000000cH
; Line 321
	cmp	esi, edi
	jge	SHORT $L86809
; Line 323
	push	12					; 0000000cH
	push	14					; 0000000eH
	mov	edx, esi
	mov	ecx, 665				; 00000299H
	jmp	SHORT $L86814
$L86809:
; Line 325
	mov	eax, DWORD PTR _stextsel
; Line 326
	cmp	eax, 22					; 00000016H
	jne	SHORT $L85128
; Line 327
	mov	eax, DWORD PTR _stextlhold
$L85128:
; Line 328
	mov	ecx, DWORD PTR _storenumh
	cmp	ecx, 1
	jg	SHORT $L85129
; Line 329
	xor	eax, eax
; Line 330
	jmp	SHORT $L85130
$L85129:
; Line 331
	sub	eax, DWORD PTR _stextup
	sar	eax, 2
	add	eax, DWORD PTR _stextsval
	imul	eax, 1000				; 000003e8H
	cdq
	dec	ecx
	idiv	ecx
	mov	ecx, DWORD PTR [ebp]
	sub	ecx, DWORD PTR _SStringY[ebx]
	sub	ecx, 24					; 00000018H
	imul	eax, ecx
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
$L85130:
; Line 332
	mov	ecx, DWORD PTR _SStringY[ebx+4]
	push	12					; 0000000cH
	push	13					; 0000000dH
	push	DWORD PTR _pSTextSlidCels
	lea	edx, DWORD PTR [ecx+eax+204]
	mov	ecx, 665				; 00000299H
	call	@CelDecodeOnly@20
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 333
	ret	0
@DrawSArrows@8 ENDP
_TEXT	ENDS
PUBLIC	_DrawSTextHelp
; Function compile flags: /Ogsy
;	COMDAT _DrawSTextHelp
_TEXT	SEGMENT
_DrawSTextHelp PROC NEAR				; COMDAT
; Line 343
	or	DWORD PTR _stextsel, -1
; Line 344
	mov	BYTE PTR _stextsize, 1
; Line 345
	ret	0
_DrawSTextHelp ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @ClearSText@8
_TEXT	SEGMENT
@ClearSText@8 PROC NEAR					; COMDAT
; _s$ = ecx
; _e$ = edx
; Line 350
	mov	eax, ecx
; Line 354
	cmp	eax, edx
	jge	SHORT $L85142
; Line 355
	sub	edx, eax
; Line 356
	imul	eax, 156				; 0000009cH
	add	eax, OFFSET FLAT:_stext+4
	xor	ecx, ecx
$L85140:
; Line 358
	or	DWORD PTR [eax+148], -1
; Line 359
	mov	DWORD PTR [eax-4], ecx
; Line 360
	mov	DWORD PTR [eax], ecx
; Line 361
	mov	BYTE PTR [eax+4], cl
; Line 362
	mov	DWORD PTR [eax+132], ecx
; Line 363
	mov	BYTE PTR [eax+136], cl
; Line 364
	mov	DWORD PTR [eax+140], ecx
; Line 365
	mov	DWORD PTR [eax+144], ecx
; Line 366
	add	eax, 156				; 0000009cH
; Line 367
	dec	edx
; Line 368
	jne	SHORT $L85140
$L85142:
; Line 370
	ret	0
@ClearSText@8 ENDP
_TEXT	ENDS
PUBLIC	@AddSLine@4
; Function compile flags: /Ogsy
;	COMDAT @AddSLine@4
_TEXT	SEGMENT
@AddSLine@4 PROC NEAR					; COMDAT
; _y$ = ecx
; Line 374
	imul	ecx, 156				; 0000009cH
	xor	eax, eax
	mov	DWORD PTR _stext[ecx], eax
; Line 375
	mov	DWORD PTR _stext[ecx+4], eax
; Line 376
	mov	BYTE PTR _stext[ecx+8], al
; Line 377
	mov	DWORD PTR _stext[ecx+144], 1
; Line 378
	ret	0
@AddSLine@4 ENDP
_TEXT	ENDS
PUBLIC	@AddSTextVal@8
; Function compile flags: /Ogsy
;	COMDAT @AddSTextVal@8
_TEXT	SEGMENT
@AddSTextVal@8 PROC NEAR				; COMDAT
; _y$ = ecx
; _val$ = edx
; Line 382
	imul	ecx, 156				; 0000009cH
	mov	DWORD PTR _stext[ecx+152], edx
; Line 383
	ret	0
@AddSTextVal@8 ENDP
_TEXT	ENDS
PUBLIC	@OffsetSTextY@8
; Function compile flags: /Ogsy
;	COMDAT @OffsetSTextY@8
_TEXT	SEGMENT
@OffsetSTextY@8 PROC NEAR				; COMDAT
; _y$ = ecx
; _yo$ = edx
; Line 387
	imul	ecx, 156				; 0000009cH
	mov	DWORD PTR _stext[ecx+4], edx
; Line 388
	ret	0
@OffsetSTextY@8 ENDP
_TEXT	ENDS
PUBLIC	@AddSText@24
EXTRN	_strcpy:NEAR
; Function compile flags: /Ogsy
;	COMDAT @AddSText@24
_TEXT	SEGMENT
_j$ = 8
_str$ = 12
_clr$ = 16
_sel$ = 20
@AddSText@24 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 391
	push	esi
; Line 392
	mov	esi, edx
	imul	esi, 156				; 0000009cH
; Line 394
	push	DWORD PTR _str$[esp]
	and	DWORD PTR _stext[esi+4], 0
	lea	eax, DWORD PTR _stext[esi+8]
	push	eax
	mov	DWORD PTR _stext[esi], ecx
	call	_strcpy
; Line 395
	mov	eax, DWORD PTR _j$[esp+8]
; Line 397
	and	DWORD PTR _stext[esi+144], 0
	mov	DWORD PTR _stext[esi+136], eax
	mov	al, BYTE PTR _clr$[esp+8]
	mov	BYTE PTR _stext[esi+140], al
; Line 398
	mov	eax, DWORD PTR _sel$[esp+8]
	pop	ecx
	mov	DWORD PTR _stext[esi+148], eax
	pop	ecx
	pop	esi
; Line 399
	ret	16					; 00000010H
@AddSText@24 ENDP
_TEXT	ENDS
PUBLIC	_StoreAutoPlace
EXTRN	_AllItemsList:BYTE
EXTRN	_icursH28:DWORD
EXTRN	_icursW28:DWORD
EXTRN	@SetICursor@4:NEAR
EXTRN	@AutoPlace@20:NEAR
EXTRN	_AP2x2Tbl:BYTE
; Function compile flags: /Ogsy
;	COMDAT _StoreAutoPlace
_TEXT	SEGMENT
_v19$ = -12
_v21$ = -4
_StoreAutoPlace PROC NEAR				; COMDAT
; Line 402
	sub	esp, 12					; 0000000cH
; Line 425
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	ebp
	push	esi
	mov	ecx, DWORD PTR _plr[eax+21368]
	push	edi
	add	ecx, 12					; 0000000cH
	call	@SetICursor@4
; Line 428
	mov	ecx, DWORD PTR _icursW28
	mov	edx, DWORD PTR _icursH28
; Line 430
	xor	esi, esi
	xor	eax, eax
	inc	esi
	mov	ebx, edx
	cmp	ecx, esi
	mov	DWORD PTR _v21$[esp+28], ecx
	jne	$L86882
; Line 431
	cmp	edx, esi
	jne	$LABEL_22$85218
; Line 433
	mov	ecx, DWORD PTR _myplr
	imul	ecx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ecx+21532], eax
	je	SHORT $L85198
	mov	edi, DWORD PTR _plr[ecx+21536]
	imul	edi, 76					; 0000004cH
	cmp	DWORD PTR _AllItemsList[edi+64], eax
	je	SHORT $L85198
; Line 434
	mov	DWORD PTR _v19$[esp+28], eax
; Line 435
	lea	ebp, DWORD PTR _plr[ecx+18232]
$L85196:
; Line 437
	test	eax, eax
	jne	SHORT $L85198
; Line 439
	cmp	DWORD PTR [ebp+8], -1
	jne	SHORT $L85200
; Line 440
	mov	eax, ecx
	mov	edi, ebp
	sub	eax, ebp
	mov	DWORD PTR -8+[esp+28], 368		; 00000170H
	lea	eax, DWORD PTR _plr[eax+21176]
$L86841:
	mov	bl, BYTE PTR [eax+edi]
	mov	BYTE PTR [edi], bl
	inc	edi
	dec	DWORD PTR -8+[esp+28]
	jne	SHORT $L86841
; Line 441
	mov	ebx, edx
; Line 442
	mov	eax, esi
$L85200:
; Line 444
	inc	DWORD PTR _v19$[esp+28]
; Line 445
	add	ebp, 368				; 00000170H
; Line 446
	cmp	DWORD PTR _v19$[esp+28], 8
	jl	SHORT $L85196
$L85198:
; Line 448
	push	30					; 0000001eH
	pop	edi
$L85202:
; Line 450
	test	eax, eax
	jne	SHORT $L85204
; Line 452
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	esi
	mov	edx, edi
	push	esi
	inc	edi
	call	@AutoPlace@20
; Line 453
	cmp	edi, 39					; 00000027H
	jle	SHORT $L85202
$L85204:
; Line 454
	push	20					; 00000014H
	pop	edi
$L85206:
; Line 456
	test	eax, eax
	jne	SHORT $L85208
; Line 458
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	esi
	mov	edx, edi
	push	esi
	inc	edi
	call	@AutoPlace@20
; Line 459
	cmp	edi, 29					; 0000001dH
	jle	SHORT $L85206
$L85208:
; Line 460
	push	10					; 0000000aH
	pop	edi
$L85210:
; Line 462
	test	eax, eax
	jne	SHORT $L85212
; Line 464
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	esi
	mov	edx, edi
	push	esi
	inc	edi
	call	@AutoPlace@20
; Line 465
	cmp	edi, 19					; 00000013H
	jle	SHORT $L85210
$L85212:
; Line 466
	xor	edi, edi
	jmp	SHORT $L86889
$L85215:
; Line 468
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	esi
	mov	edx, edi
	push	esi
	inc	edi
	call	@AutoPlace@20
; Line 469
	cmp	edi, 9
	jg	SHORT $LABEL_22$85218
$L86889:
; Line 467
	test	eax, eax
	je	SHORT $L85215
; Line 550
	jmp	$L85271
$LABEL_22$85218:
; Line 474
	push	2
	pop	ebp
	cmp	ebx, ebp
	jne	SHORT $LABEL_32$85233
; Line 475
	push	29					; 0000001dH
	pop	edi
$L85221:
; Line 477
	test	eax, eax
	jne	SHORT $L85223
; Line 479
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	ebp
	mov	edx, edi
	push	esi
	dec	edi
	call	@AutoPlace@20
; Line 480
	cmp	edi, 20					; 00000014H
	jge	SHORT $L85221
$L85223:
; Line 481
	push	9
	pop	edi
$L85225:
; Line 483
	test	eax, eax
	jne	SHORT $L85227
; Line 485
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	ebp
	mov	edx, edi
	push	esi
	dec	edi
	call	@AutoPlace@20
; Line 486
	test	edi, edi
	jge	SHORT $L85225
$L85227:
; Line 487
	push	19					; 00000013H
	pop	ebx
	jmp	SHORT $L86890
$L85230:
; Line 489
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	ebp
	mov	edx, ebx
	push	esi
	dec	ebx
	call	@AutoPlace@20
; Line 490
	cmp	ebx, 10					; 0000000aH
	jl	$L85271
$L86890:
; Line 488
	test	eax, eax
	je	SHORT $L85230
; Line 493
	jmp	$L85271
$LABEL_32$85233:
; Line 495
	cmp	ebx, 3
	jne	$L85271
; Line 496
	xor	edi, edi
	jmp	SHORT $L86891
$L85237:
; Line 498
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	3
	mov	edx, edi
	push	esi
	inc	edi
	call	@AutoPlace@20
; Line 499
	cmp	edi, 20					; 00000014H
	jge	SHORT $LABEL_36$85240
$L86891:
; Line 497
	test	eax, eax
	je	SHORT $L85237
; Line 550
	jmp	$L85271
$L86882:
; Line 497
	push	2
	pop	ebp
$LABEL_36$85240:
; Line 507
	cmp	DWORD PTR _v21$[esp+28], ebp
	jne	$L85271
; Line 508
	cmp	ebx, ebp
	jne	$LABEL_50$85262
; Line 509
	mov	edi, OFFSET FLAT:_AP2x2Tbl
$L85244:
; Line 511
	test	eax, eax
	jne	SHORT $L85246
; Line 513
	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	ebp
	push	ebp
	call	@AutoPlace@20
; Line 514
	add	edi, 4
; Line 515
	cmp	edi, OFFSET FLAT:_AP2x2Tbl+40
	jl	SHORT $L85244
$L85246:
; Line 516
	push	21					; 00000015H
	pop	edi
$L85250:
; Line 518
	test	eax, eax
	jne	SHORT $L85252
; Line 520
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	ebp
	push	ebp
	mov	edx, edi
	call	@AutoPlace@20
; Line 521
	add	edi, ebp
; Line 522
	cmp	edi, 29					; 0000001dH
	jl	SHORT $L85250
$L85252:
; Line 523
	mov	edi, esi
$L85254:
; Line 525
	test	eax, eax
	jne	SHORT $L85256
; Line 527
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	ebp
	push	ebp
	mov	edx, edi
	call	@AutoPlace@20
; Line 528
	add	edi, ebp
; Line 529
	cmp	edi, 9
	jl	SHORT $L85254
$L85256:
; Line 530
	push	10					; 0000000aH
	pop	edi
	jmp	SHORT $L86892
$L85259:
; Line 532
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	ebp
	mov	edx, edi
	push	ebp
	inc	edi
	call	@AutoPlace@20
; Line 533
	cmp	edi, 19					; 00000013H
	jge	SHORT $L85271
$L86892:
; Line 531
	test	eax, eax
	je	SHORT $L85259
; Line 536
	jmp	SHORT $L85271
$LABEL_50$85262:
; Line 538
	cmp	ebx, 3
	jne	SHORT $L85271
; Line 539
	xor	ebx, ebx
$L85265:
; Line 541
	test	eax, eax
	jne	SHORT $L85267
; Line 543
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	3
	mov	edx, ebx
	push	ebp
	inc	ebx
	call	@AutoPlace@20
; Line 544
	cmp	ebx, 9
	jl	SHORT $L85265
$L85267:
; Line 545
	push	10					; 0000000aH
	pop	edi
$L85269:
; Line 547
	test	eax, eax
	jne	SHORT $L85271
; Line 549
	mov	ecx, DWORD PTR _myplr
	push	esi
	push	3
	mov	edx, edi
	push	ebp
	inc	edi
	call	@AutoPlace@20
; Line 550
	cmp	edi, 19					; 00000013H
	jl	SHORT $L85269
$L85271:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 555
	add	esp, 12					; 0000000cH
	ret	0
_StoreAutoPlace ENDP
_TEXT	ENDS
PUBLIC	_S_StartSmith
PUBLIC	??_C@_0P@CKGA@Welcome?5to?5the?$AA@		; `string'
PUBLIC	??_C@_0BC@KHJH@Blacksmith?8s?5shop?$AA@		; `string'
PUBLIC	??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@	; `string'
PUBLIC	??_C@_0BB@NFKG@Talk?5to?5Griswold?$AA@		; `string'
PUBLIC	??_C@_0BA@NGFN@Buy?5basic?5items?$AA@		; `string'
PUBLIC	??_C@_0BC@GLAI@Buy?5premium?5items?$AA@		; `string'
PUBLIC	??_C@_0L@IGCK@Sell?5items?$AA@			; `string'
PUBLIC	??_C@_0N@DIHN@Repair?5items?$AA@		; `string'
PUBLIC	??_C@_0P@FJPP@Leave?5the?5shop?$AA@		; `string'
;	COMDAT ??_C@_0P@CKGA@Welcome?5to?5the?$AA@
_DATA	SEGMENT
??_C@_0P@CKGA@Welcome?5to?5the?$AA@ DB 'Welcome to the', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@KHJH@Blacksmith?8s?5shop?$AA@
_DATA	SEGMENT
??_C@_0BC@KHJH@Blacksmith?8s?5shop?$AA@ DB 'Blacksmith''s shop', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@
_DATA	SEGMENT
??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@ DB 'Would you like to:', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@NFKG@Talk?5to?5Griswold?$AA@
_DATA	SEGMENT
??_C@_0BB@NFKG@Talk?5to?5Griswold?$AA@ DB 'Talk to Griswold', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@NGFN@Buy?5basic?5items?$AA@
_DATA	SEGMENT
??_C@_0BA@NGFN@Buy?5basic?5items?$AA@ DB 'Buy basic items', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GLAI@Buy?5premium?5items?$AA@
_DATA	SEGMENT
??_C@_0BC@GLAI@Buy?5premium?5items?$AA@ DB 'Buy premium items', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@IGCK@Sell?5items?$AA@
_DATA	SEGMENT
??_C@_0L@IGCK@Sell?5items?$AA@ DB 'Sell items', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@DIHN@Repair?5items?$AA@
_DATA	SEGMENT
??_C@_0N@DIHN@Repair?5items?$AA@ DB 'Repair items', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@FJPP@Leave?5the?5shop?$AA@
_DATA	SEGMENT
??_C@_0P@FJPP@Leave?5the?5shop?$AA@ DB 'Leave the shop', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartSmith
_TEXT	SEGMENT
_S_StartSmith PROC NEAR					; COMDAT
; Line 559
	push	ebx
	push	esi
; Line 560
	xor	ebx, ebx
; Line 562
	xor	esi, esi
	push	ebx
	push	3
	inc	esi
	push	OFFSET FLAT:??_C@_0P@CKGA@Welcome?5to?5the?$AA@ ; `string'
	push	esi
	mov	edx, esi
	xor	ecx, ecx
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	call	@AddSText@24
; Line 563
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BC@KHJH@Blacksmith?8s?5shop?$AA@ ; `string'
	push	esi
	push	3
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 564
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@ ; `string'
	push	esi
	push	7
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 565
	push	esi
	push	esi
	push	OFFSET FLAT:??_C@_0BB@NFKG@Talk?5to?5Griswold?$AA@ ; `string'
	push	esi
	push	10					; 0000000aH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 566
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0BA@NGFN@Buy?5basic?5items?$AA@ ; `string'
	push	esi
	push	12					; 0000000cH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 567
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0BC@GLAI@Buy?5premium?5items?$AA@ ; `string'
	push	esi
	push	14					; 0000000eH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 568
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0L@IGCK@Sell?5items?$AA@ ; `string'
	push	esi
	push	16					; 00000010H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 569
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0N@DIHN@Repair?5items?$AA@ ; `string'
	push	esi
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 570
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0P@FJPP@Leave?5the?5shop?$AA@ ; `string'
	push	esi
	push	20					; 00000014H
	xor	ecx, ecx
	pop	esi
	mov	edx, esi
	call	@AddSText@24
; Line 571
	push	5
	pop	ecx
	call	@AddSLine@4
; Line 572
	mov	DWORD PTR _storenumh, esi
	pop	esi
	pop	ebx
; Line 573
	ret	0
_S_StartSmith ENDP
_TEXT	ENDS
PUBLIC	@S_ScrollSBuy@4
PUBLIC	@PrintStoreItem@12
; Function compile flags: /Ogsy
;	COMDAT @S_ScrollSBuy@4
_TEXT	SEGMENT
_iclr$ = -4
@S_ScrollSBuy@4 PROC NEAR				; COMDAT
; _idx$ = ecx
; Line 579
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 587
	push	5
	mov	esi, ecx
	pop	edi
; Line 588
	push	21					; 00000015H
	mov	ecx, edi
	pop	edx
	call	@ClearSText@8
; Line 589
	imul	esi, 368				; 00000170H
	add	esi, OFFSET FLAT:_smithitem+60
; Line 590
	mov	DWORD PTR _stextup, edi
$L85291:
; Line 592
	cmp	DWORD PTR [esi-52], -1
	je	SHORT $L85295
; Line 594
	mov	cl, BYTE PTR [esi]
	and	BYTE PTR _iclr$[ebp], 0
	test	cl, cl
	je	SHORT $L85297
; Line 595
	mov	BYTE PTR _iclr$[ebp], 1
$L85297:
; Line 596
	cmp	DWORD PTR [esi+296], 0
	jne	SHORT $L85300
; Line 597
	mov	BYTE PTR _iclr$[ebp], 2
$L85300:
; Line 599
	test	cl, cl
; Line 608
	lea	eax, DWORD PTR [esi+65]
	jne	SHORT $L85302
	lea	eax, DWORD PTR [esi+1]
$L85302:
; Line 601
	push	1
	mov	edx, edi
	push	DWORD PTR _iclr$[ebp]
	push	eax
	push	0
	push	20					; 00000014H
	pop	ecx
	call	@AddSText@24
; Line 602
	mov	edx, DWORD PTR [esi+140]
	mov	ecx, edi
	call	@AddSTextVal@8
; Line 603
	lea	edx, DWORD PTR [edi+1]
; Line 608
	lea	ecx, DWORD PTR [esi-60]
	push	DWORD PTR _iclr$[ebp]
	call	@PrintStoreItem@12
	mov	DWORD PTR _stextdown, edi
	add	esi, 368				; 00000170H
$L85295:
	add	edi, 4
	cmp	edi, 20					; 00000014H
	jl	SHORT $L85291
; Line 609
	mov	eax, DWORD PTR _stextsel
	pop	edi
	mov	ecx, eax
	pop	esi
	imul	ecx, 156				; 0000009cH
	cmp	DWORD PTR _stext[ecx+148], 0
	jne	SHORT $L85305
	cmp	eax, 22					; 00000016H
	je	SHORT $L85305
; Line 610
	mov	eax, DWORD PTR _stextdown
	mov	DWORD PTR _stextsel, eax
$L85305:
; Line 611
	leave
	ret	0
@S_ScrollSBuy@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_09OOBN@Required?3?$AA@			; `string'
PUBLIC	??_C@_09GDNC@?$CFs?5?$CFi?5Str?$AA@		; `string'
PUBLIC	??_C@_09LBGI@?$CFs?5?$CFi?5Mag?$AA@		; `string'
PUBLIC	??_C@_09IBEM@?$CFs?5?$CFi?5Dex?$AA@		; `string'
PUBLIC	??_C@_0BH@LFL@No?5required?5attributes?$AA@	; `string'
PUBLIC	??_C@_0M@KGCB@Unique?5Item?$AA@			; `string'
PUBLIC	??_C@_03BNII@?0?5?5?$AA@			; `string'
PUBLIC	??_C@_0P@EAMD@Charges?3?5?$CFi?1?$CFi?$AA@	; `string'
PUBLIC	??_C@_0BA@GBDG@Damage?3?5?$CFi?9?$CFi?5?5?$AA@	; `string'
PUBLIC	??_C@_0M@CAJP@Armor?3?5?$CFi?5?5?$AA@		; `string'
PUBLIC	??_C@_0O@HJC@Dur?3?5?$CFi?1?$CFi?0?5?5?$AA@	; `string'
PUBLIC	??_C@_0BC@NEAL@Indestructible?0?5?5?$AA@	; `string'
EXTRN	_tempstr:BYTE
EXTRN	@PrintItemPower@8:NEAR
EXTRN	_strcat:NEAR
;	COMDAT ??_C@_03BNII@?0?5?5?$AA@
_DATA	SEGMENT
??_C@_03BNII@?0?5?5?$AA@ DB ',  ', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@EAMD@Charges?3?5?$CFi?1?$CFi?$AA@
_DATA	SEGMENT
??_C@_0P@EAMD@Charges?3?5?$CFi?1?$CFi?$AA@ DB 'Charges: %i/%i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@GBDG@Damage?3?5?$CFi?9?$CFi?5?5?$AA@
_DATA	SEGMENT
??_C@_0BA@GBDG@Damage?3?5?$CFi?9?$CFi?5?5?$AA@ DB 'Damage: %i-%i  ', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@CAJP@Armor?3?5?$CFi?5?5?$AA@
_DATA	SEGMENT
??_C@_0M@CAJP@Armor?3?5?$CFi?5?5?$AA@ DB 'Armor: %i  ', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@HJC@Dur?3?5?$CFi?1?$CFi?0?5?5?$AA@
_DATA	SEGMENT
??_C@_0O@HJC@Dur?3?5?$CFi?1?$CFi?0?5?5?$AA@ DB 'Dur: %i/%i,  ', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@NEAL@Indestructible?0?5?5?$AA@
_DATA	SEGMENT
??_C@_0BC@NEAL@Indestructible?0?5?5?$AA@ DB 'Indestructible,  ', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09OOBN@Required?3?$AA@
_DATA	SEGMENT
??_C@_09OOBN@Required?3?$AA@ DB 'Required:', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GDNC@?$CFs?5?$CFi?5Str?$AA@
_DATA	SEGMENT
??_C@_09GDNC@?$CFs?5?$CFi?5Str?$AA@ DB '%s %i Str', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09LBGI@?$CFs?5?$CFi?5Mag?$AA@
_DATA	SEGMENT
??_C@_09LBGI@?$CFs?5?$CFi?5Mag?$AA@ DB '%s %i Mag', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09IBEM@?$CFs?5?$CFi?5Dex?$AA@
_DATA	SEGMENT
??_C@_09IBEM@?$CFs?5?$CFi?5Dex?$AA@ DB '%s %i Dex', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@LFL@No?5required?5attributes?$AA@
_DATA	SEGMENT
??_C@_0BH@LFL@No?5required?5attributes?$AA@ DB 'No required attributes', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@KGCB@Unique?5Item?$AA@
_DATA	SEGMENT
??_C@_0M@KGCB@Unique?5Item?$AA@ DB 'Unique Item', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @PrintStoreItem@12
_TEXT	SEGMENT
_iclr$ = 8
_sstr$ = -132
_y$ = -4
@PrintStoreItem@12 PROC NEAR				; COMDAT
; _x$ = ecx
; _l$ = edx
; Line 617
	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
; Line 629
	and	BYTE PTR _sstr$[ebp], 0
	push	ebx
	push	esi
	mov	esi, ecx
	mov	ebx, edx
	push	edi
; Line 632
	cmp	DWORD PTR [esi+56], 0
	mov	DWORD PTR _y$[ebp], ebx
	mov	edi, OFFSET FLAT:_tempstr
	je	SHORT $L85326
; Line 633
	cmp	BYTE PTR [esi+60], 2
	je	SHORT $L85325
; Line 634
	mov	cl, BYTE PTR [esi+332]
; Line 635
	cmp	cl, -1
	je	SHORT $L85325
; Line 636
	mov	edx, esi
	call	@PrintItemPower@8
; Line 637
	lea	eax, DWORD PTR _sstr$[ebp]
	push	edi
	push	eax
	call	_strcat
	pop	ecx
	pop	ecx
$L85325:
; Line 640
	mov	cl, BYTE PTR [esi+333]
; Line 641
	cmp	cl, -1
	je	SHORT $L85326
; Line 642
	mov	edx, esi
	call	@PrintItemPower@8
; Line 643
	cmp	BYTE PTR _sstr$[ebp], 0
	je	SHORT $L85327
; Line 644
	lea	eax, DWORD PTR _sstr$[ebp]
	push	OFFSET FLAT:??_C@_03BNII@?0?5?5?$AA@	; `string'
	push	eax
	call	_strcat
	pop	ecx
	pop	ecx
$L85327:
; Line 645
	lea	eax, DWORD PTR _sstr$[ebp]
	push	edi
	push	eax
	call	_strcat
	pop	ecx
	pop	ecx
$L85326:
; Line 648
	cmp	DWORD PTR [esi+220], 23			; 00000017H
	jne	SHORT $L85329
	mov	eax, DWORD PTR [esi+232]
	test	eax, eax
	je	SHORT $L85329
; Line 649
	push	eax
	push	DWORD PTR [esi+228]
	push	OFFSET FLAT:??_C@_0P@EAMD@Charges?3?5?$CFi?1?$CFi?$AA@ ; `string'
	push	edi
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 650
	cmp	BYTE PTR _sstr$[ebp], 0
	je	SHORT $L85331
; Line 651
	lea	eax, DWORD PTR _sstr$[ebp]
	push	OFFSET FLAT:??_C@_03BNII@?0?5?5?$AA@	; `string'
	push	eax
	call	_strcat
	pop	ecx
	pop	ecx
$L85331:
; Line 652
	lea	eax, DWORD PTR _sstr$[ebp]
	push	edi
	push	eax
	call	_strcat
	pop	ecx
	pop	ecx
$L85329:
; Line 654
	cmp	BYTE PTR _sstr$[ebp], 0
	je	SHORT $L85332
; Line 655
	lea	eax, DWORD PTR [ebx+1]
	push	0
	push	DWORD PTR _iclr$[ebp]
	mov	DWORD PTR _y$[ebp], eax
	lea	eax, DWORD PTR _sstr$[ebp]
	mov	edx, ebx
	push	eax
	push	0
	push	40					; 00000028H
	pop	ecx
	call	@AddSText@24
$L85332:
; Line 656
	and	BYTE PTR _sstr$[ebp], 0
; Line 657
	lea	ebx, DWORD PTR [esi+190]
	cmp	BYTE PTR [ebx], 1
	jne	SHORT $L85333
; Line 658
	push	DWORD PTR [esi+208]
	lea	eax, DWORD PTR _sstr$[ebp]
	push	DWORD PTR [esi+204]
	push	OFFSET FLAT:??_C@_0BA@GBDG@Damage?3?5?$CFi?9?$CFi?5?5?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$L85333:
; Line 659
	cmp	BYTE PTR [ebx], 2
	jne	SHORT $L85335
; Line 660
	push	DWORD PTR [esi+212]
	lea	eax, DWORD PTR _sstr$[ebp]
	push	OFFSET FLAT:??_C@_0M@CAJP@Armor?3?5?$CFi?5?5?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
$L85335:
; Line 661
	mov	eax, DWORD PTR [esi+240]
; Line 662
	xor	ebx, ebx
	cmp	eax, 255				; 000000ffH
	je	SHORT $L85337
	cmp	eax, ebx
	je	SHORT $L85337
; Line 663
	push	eax
	push	DWORD PTR [esi+236]
	push	OFFSET FLAT:??_C@_0O@HJC@Dur?3?5?$CFi?1?$CFi?0?5?5?$AA@ ; `string'
	push	edi
	call	_sprintf
; Line 664
	lea	eax, DWORD PTR _sstr$[ebp]
	push	edi
	push	eax
	call	_strcat
	add	esp, 24					; 00000018H
; Line 665
	jmp	SHORT $L85339
$L85337:
; Line 666
	lea	eax, DWORD PTR _sstr$[ebp]
	push	OFFSET FLAT:??_C@_0BC@NEAL@Indestructible?0?5?5?$AA@ ; `string'
	push	eax
	call	_strcat
	pop	ecx
	pop	ecx
$L85339:
; Line 668
	cmp	DWORD PTR [esi+8], ebx
	jne	SHORT $L85341
; Line 669
	and	BYTE PTR _sstr$[ebp], 0
$L85341:
; Line 670
	movsx	eax, BYTE PTR [esi+354]
	movsx	ecx, BYTE PTR [esi+352]
	add	eax, ecx
	movzx	ecx, BYTE PTR [esi+353]
	add	eax, ecx
	je	SHORT $L85343
; Line 671
	push	OFFSET FLAT:??_C@_09OOBN@Required?3?$AA@ ; `string'
	push	edi
	call	_strcpy
; Line 672
	mov	al, BYTE PTR [esi+352]
	pop	ecx
; Line 673
	test	al, al
	pop	ecx
	je	SHORT $L85345
; Line 674
	movsx	eax, al
	push	eax
	push	edi
	push	OFFSET FLAT:??_C@_09GDNC@?$CFs?5?$CFi?5Str?$AA@ ; `string'
	push	edi
	call	_sprintf
	add	esp, 16					; 00000010H
$L85345:
; Line 675
	mov	al, BYTE PTR [esi+353]
; Line 676
	test	al, al
	je	SHORT $L85347
; Line 677
	movzx	eax, al
	push	eax
	push	edi
	push	OFFSET FLAT:??_C@_09LBGI@?$CFs?5?$CFi?5Mag?$AA@ ; `string'
	push	edi
	call	_sprintf
	add	esp, 16					; 00000010H
$L85347:
; Line 678
	mov	al, BYTE PTR [esi+354]
; Line 679
	test	al, al
	je	SHORT $L85349
; Line 680
	movsx	eax, al
	push	eax
	push	edi
	push	OFFSET FLAT:??_C@_09IBEM@?$CFs?5?$CFi?5Dex?$AA@ ; `string'
	push	edi
	call	_sprintf
	add	esp, 16					; 00000010H
$L85349:
; Line 681
	push	edi
; Line 682
	jmp	SHORT $L86904
$L85343:
; Line 683
	push	OFFSET FLAT:??_C@_0BH@LFL@No?5required?5attributes?$AA@ ; `string'
$L86904:
	lea	eax, DWORD PTR _sstr$[ebp]
	push	eax
	call	_strcat
	pop	ecx
; Line 686
	mov	edi, DWORD PTR _y$[ebp]
	pop	ecx
	lea	eax, DWORD PTR _sstr$[ebp]
	push	ebx
	mov	edx, edi
	push	DWORD PTR _iclr$[ebp]
	push	eax
	push	ebx
	push	40					; 00000028H
	pop	ecx
	call	@AddSText@24
; Line 687
	cmp	BYTE PTR [esi+60], 2
	jne	SHORT $L85354
; Line 688
	cmp	DWORD PTR [esi+56], ebx
	je	SHORT $L85354
; Line 689
	push	ebx
	lea	edx, DWORD PTR [edi+1]
	push	DWORD PTR _iclr$[ebp]
	push	OFFSET FLAT:??_C@_0M@KGCB@Unique?5Item?$AA@ ; `string'
	push	ebx
	push	40					; 00000028H
	pop	ecx
	call	@AddSText@24
$L85354:
	pop	edi
	pop	esi
	pop	ebx
; Line 691
	leave
	ret	4
@PrintStoreItem@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@JMAP@I?5have?5these?5items?5for?5sale?5?3?5?5?5@ ; `string'
PUBLIC	??_C@_04JDGB@Back?$AA@				; `string'
PUBLIC	_S_StartSBuy
;	COMDAT ??_C@_0DH@JMAP@I?5have?5these?5items?5for?5sale?5?3?5?5?5@
_DATA	SEGMENT
??_C@_0DH@JMAP@I?5have?5these?5items?5for?5sale?5?3?5?5?5@ DB 'I have the'
	DB	'se items for sale :           Your gold : %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04JDGB@Back?$AA@
_DATA	SEGMENT
??_C@_04JDGB@Back?$AA@ DB 'Back', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartSBuy
_TEXT	SEGMENT
_S_StartSBuy PROC NEAR					; COMDAT
; Line 699
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	esi
	push	edi
; Line 703
	push	DWORD PTR _plr[eax+460]
	xor	ebx, ebx
	mov	esi, OFFSET FLAT:_tempstr
	inc	ebx
	xor	edi, edi
	push	OFFSET FLAT:??_C@_0DH@JMAP@I?5have?5these?5items?5for?5sale?5?3?5?5?5@ ; `string'
	push	esi
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	mov	DWORD PTR _stextsval, edi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 704
	mov	edx, ebx
	xor	ecx, ecx
	push	edi
	push	3
	push	esi
	push	ebx
	call	@AddSText@24
; Line 705
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 706
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 707
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSBuy@4
; Line 708
	push	edi
	push	edi
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	ebx
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 709
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	call	@OffsetSTextY@8
; Line 710
	xor	eax, eax
; Line 712
	cmp	DWORD PTR _smithitem+8, -1
	mov	DWORD PTR _storenumh, edi
	je	SHORT $L85362
; Line 713
	mov	ecx, OFFSET FLAT:_smithitem+8
$L85363:
; Line 715
	add	ecx, 368				; 00000170H
; Line 716
	inc	eax
; Line 717
	cmp	DWORD PTR [ecx], -1
	jne	SHORT $L85363
; Line 718
	mov	DWORD PTR _storenumh, eax
$L85362:
; Line 720
	add	eax, -4					; fffffffcH
; Line 721
	cmp	eax, edi
	mov	DWORD PTR _stextsmax, eax
	jge	SHORT $L85366
; Line 722
	mov	DWORD PTR _stextsmax, edi
$L85366:
	pop	edi
	pop	esi
	pop	ebx
; Line 723
	ret	0
_S_StartSBuy ENDP
_TEXT	ENDS
PUBLIC	@S_ScrollSPBuy@4
; Function compile flags: /Ogsy
;	COMDAT @S_ScrollSPBuy@4
_TEXT	SEGMENT
_v6$ = -8
_iclr$ = -4
@S_ScrollSPBuy@4 PROC NEAR				; COMDAT
; _idx$ = ecx
; Line 730
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 740
	push	5
	pop	edi
	mov	esi, ecx
; Line 741
	push	21					; 00000015H
	mov	ecx, edi
	pop	edx
	call	@ClearSText@8
; Line 743
	xor	eax, eax
	mov	edx, esi
; Line 745
	test	esi, esi
	mov	DWORD PTR _stextup, edi
	mov	ebx, 368				; 00000170H
	je	SHORT $L85380
; Line 746
	mov	ecx, OFFSET FLAT:_premiumitem+8
$L85378:
; Line 748
	cmp	DWORD PTR [ecx], -1
	je	SHORT $L85381
; Line 749
	dec	edx
$L85381:
; Line 750
	inc	eax
; Line 751
	add	ecx, ebx
; Line 752
	test	edx, edx
	jne	SHORT $L85378
$L85380:
; Line 754
	imul	eax, 368				; 00000170H
	add	eax, OFFSET FLAT:_premiumitem+60
	mov	DWORD PTR _v6$[ebp], eax
	lea	esi, DWORD PTR [eax+296]
$L85382:
; Line 756
	cmp	esi, OFFSET FLAT:_premiumitem+2564
	jge	SHORT $L85384
; Line 758
	cmp	DWORD PTR [esi-348], -1
	jne	SHORT $L85389
; Line 759
	sub	edi, 4
; Line 760
	jmp	SHORT $L85390
$L85389:
; Line 761
	and	BYTE PTR _iclr$[ebp], 0
; Line 762
	cmp	BYTE PTR [eax], 0
	je	SHORT $L85392
; Line 763
	mov	BYTE PTR _iclr$[ebp], 1
$L85392:
; Line 764
	cmp	DWORD PTR [esi], 0
	jne	SHORT $L85395
; Line 765
	mov	BYTE PTR _iclr$[ebp], 2
$L85395:
; Line 766
	push	1
; Line 773
	lea	eax, DWORD PTR [esi-231]
	push	DWORD PTR _iclr$[ebp]
	mov	edx, edi
	push	eax
	push	0
	push	20					; 00000014H
	pop	ecx
	call	@AddSText@24
	mov	edx, DWORD PTR [esi-156]
	mov	ecx, edi
	call	@AddSTextVal@8
	lea	edx, DWORD PTR [edi+1]
	lea	ecx, DWORD PTR [esi-356]
	push	DWORD PTR _iclr$[ebp]
	call	@PrintStoreItem@12
	mov	DWORD PTR _stextdown, edi
$L85390:
	mov	eax, DWORD PTR _v6$[ebp]
	add	edi, 4
	add	eax, ebx
	add	esi, ebx
	cmp	edi, 20					; 00000014H
	mov	DWORD PTR _v6$[ebp], eax
	jl	SHORT $L85382
$L85384:
; Line 774
	mov	eax, DWORD PTR _stextsel
	pop	edi
	mov	ecx, eax
	pop	esi
	imul	ecx, 156				; 0000009cH
	pop	ebx
	cmp	DWORD PTR _stext[ecx+148], 0
	jne	SHORT $L85399
	cmp	eax, 22					; 00000016H
	je	SHORT $L85399
; Line 775
	mov	eax, DWORD PTR _stextdown
	mov	DWORD PTR _stextsel, eax
$L85399:
; Line 776
	leave
	ret	0
@S_ScrollSPBuy@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@ODAC@I?5have?5these?5premium?5items?5for?5s@ ; `string'
PUBLIC	_S_StartSPBuy
PUBLIC	@StartStore@4
;	COMDAT ??_C@_0DH@ODAC@I?5have?5these?5premium?5items?5for?5s@
_DATA	SEGMENT
??_C@_0DH@ODAC@I?5have?5these?5premium?5items?5for?5s@ DB 'I have these p'
	DB	'remium items for sale :   Your gold : %i', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartSPBuy
_TEXT	SEGMENT
_S_StartSPBuy PROC NEAR					; COMDAT
; Line 782
	push	edi
; Line 787
	xor	edi, edi
	mov	DWORD PTR _storenumh, edi
; Line 788
	mov	eax, OFFSET FLAT:_premiumitem+8
$L85404:
; Line 790
	cmp	DWORD PTR [eax], -1
	je	SHORT $L85407
; Line 791
	inc	DWORD PTR _storenumh
$L85407:
; Line 792
	add	eax, 368				; 00000170H
; Line 793
	cmp	eax, OFFSET FLAT:_premiumitem+2216
	jl	SHORT $L85404
; Line 794
	cmp	DWORD PTR _storenumh, edi
	je	$L85410
; Line 795
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	esi
; Line 797
	xor	ebx, ebx
; Line 799
	push	DWORD PTR _plr[eax+460]
	mov	esi, OFFSET FLAT:_tempstr
	inc	ebx
	mov	DWORD PTR _stextsval, edi
	push	OFFSET FLAT:??_C@_0DH@ODAC@I?5have?5these?5premium?5items?5for?5s@ ; `string'
	push	esi
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 800
	mov	edx, ebx
	xor	ecx, ecx
	push	edi
	push	3
	push	esi
	push	ebx
	call	@AddSText@24
; Line 801
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 802
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 803
	push	edi
	push	edi
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	ebx
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 804
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	call	@OffsetSTextY@8
; Line 805
	mov	eax, DWORD PTR _storenumh
	add	eax, -4					; fffffffcH
; Line 806
	cmp	eax, edi
	mov	DWORD PTR _stextsmax, eax
	jge	SHORT $L85412
; Line 807
	mov	DWORD PTR _stextsmax, edi
$L85412:
; Line 808
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSPBuy@4
; Line 809
	mov	al, bl
	pop	esi
	pop	ebx
	pop	edi
; Line 816
	ret	0
$L85410:
; Line 811
	mov	cl, 1
	call	@StartStore@4
; Line 812
	mov	DWORD PTR _stextsel, 14			; 0000000eH
; Line 813
	xor	al, al
	pop	edi
; Line 816
	ret	0
_S_StartSPBuy ENDP
_TEXT	ENDS
PUBLIC	@SmithSellOk@4
; Function compile flags: /Ogsy
;	COMDAT @SmithSellOk@4
_TEXT	SEGMENT
@SmithSellOk@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 826
	mov	eax, DWORD PTR _myplr
	imul	ecx, 368				; 00000170H
	imul	eax, 21720				; 000054d8H
	add	ecx, eax
	mov	eax, DWORD PTR _plr[ecx+3476]
	cmp	eax, -1
	jne	SHORT $L85417
$L86922:
; Line 827
	xor	eax, eax
; Line 840
	ret	0
$L85417:
; Line 828
	test	eax, eax
; Line 829
	je	SHORT $L86922
; Line 830
	cmp	eax, 11					; 0000000bH
; Line 831
	je	SHORT $L86922
; Line 832
	cmp	eax, 14					; 0000000eH
; Line 833
	je	SHORT $L86922
; Line 834
	cmp	eax, 10					; 0000000aH
; Line 835
	je	SHORT $L86922
; Line 836
	xor	eax, eax
	cmp	DWORD PTR _plr[ecx+3828], 33		; 00000021H
	setne	al
; Line 840
	ret	0
@SmithSellOk@4 ENDP
_TEXT	ENDS
PUBLIC	@S_ScrollSSell@4
; Function compile flags: /Ogsy
;	COMDAT @S_ScrollSSell@4
_TEXT	SEGMENT
_v5$ = -8
_iclr$ = -4
@S_ScrollSSell@4 PROC NEAR				; COMDAT
; _idx$ = ecx
; Line 843
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 853
	push	5
	pop	edi
	mov	esi, ecx
; Line 854
	push	21					; 00000015H
	mov	ecx, edi
	pop	edx
	mov	DWORD PTR _v5$[ebp], esi
	call	@ClearSText@8
; Line 855
	imul	esi, 368				; 00000170H
	add	esi, OFFSET FLAT:_storehold+60
; Line 856
	mov	DWORD PTR _stextup, edi
	xor	ebx, ebx
$L85432:
; Line 858
	mov	eax, DWORD PTR _v5$[ebp]
	cmp	eax, DWORD PTR _storenumh
	jge	$L85434
; Line 860
	cmp	DWORD PTR [esi-52], -1
	je	SHORT $L85437
; Line 862
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR _iclr$[ebp], bl
	cmp	al, bl
	je	SHORT $L85439
; Line 863
	mov	BYTE PTR _iclr$[ebp], 1
$L85439:
; Line 864
	cmp	DWORD PTR [esi+296], ebx
	jne	SHORT $L85442
; Line 865
	mov	BYTE PTR _iclr$[ebp], 2
$L85442:
; Line 866
	cmp	al, bl
	je	SHORT $L85445
	cmp	DWORD PTR [esi-4], ebx
	je	SHORT $L85445
; Line 867
	push	1
; Line 880
	lea	eax, DWORD PTR [esi+65]
	push	DWORD PTR _iclr$[ebp]
	mov	edx, edi
	push	eax
	push	ebx
	push	20					; 00000014H
	pop	ecx
	call	@AddSText@24
	mov	edx, DWORD PTR [esi+140]
	jmp	SHORT $L85447
$L85445:
; Line 870
	push	1
; Line 880
	lea	eax, DWORD PTR [esi+1]
	push	DWORD PTR _iclr$[ebp]
	mov	edx, edi
	push	eax
	push	ebx
	push	20					; 00000014H
	pop	ecx
	call	@AddSText@24
	mov	edx, DWORD PTR [esi+136]
$L85447:
	mov	ecx, edi
	call	@AddSTextVal@8
	lea	edx, DWORD PTR [edi+1]
	lea	ecx, DWORD PTR [esi-60]
	push	DWORD PTR _iclr$[ebp]
	call	@PrintStoreItem@12
	mov	DWORD PTR _stextdown, edi
$L85437:
	inc	DWORD PTR _v5$[ebp]
	add	edi, 4
	add	esi, 368				; 00000170H
	cmp	edi, 20					; 00000014H
	jl	$L85432
$L85434:
; Line 881
	mov	eax, DWORD PTR _storenumh
	add	eax, -4					; fffffffcH
; Line 882
	cmp	eax, ebx
	mov	DWORD PTR _stextsmax, eax
	jge	SHORT $L85450
; Line 883
	mov	DWORD PTR _stextsmax, ebx
$L85450:
	pop	edi
	pop	esi
	pop	ebx
; Line 884
	leave
	ret	0
@S_ScrollSSell@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@MDGE@Which?5item?5is?5for?5sale?$DP?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0DD@BHHN@You?5have?5nothing?5I?5want?4?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	_S_StartSSell
;	COMDAT ??_C@_0DC@MDGE@Which?5item?5is?5for?5sale?$DP?5?5?5?5?5?5?5?5?5@
; File Source/../defs.h
_DATA	SEGMENT
??_C@_0DC@MDGE@Which?5item?5is?5for?5sale?$DP?5?5?5?5?5?5?5?5?5@ DB 'Whic'
	DB	'h item is for sale?            Your gold : %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DD@BHHN@You?5have?5nothing?5I?5want?4?5?5?5?5?5?5?5?5@
_DATA	SEGMENT
??_C@_0DD@BHHN@You?5have?5nothing?5I?5want?4?5?5?5?5?5?5?5?5@ DB 'You hav'
	DB	'e nothing I want.            Your gold : %i', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartSSell
_TEXT	SEGMENT
_i$ = -4
_sellok$ = -5
_S_StartSSell PROC NEAR					; COMDAT
; File Source/stores.cpp
; Line 891
	push	ecx
	push	ecx
; Line 896
	and	BYTE PTR _sellok$[esp+8], 0
	push	ebx
	push	esi
	push	edi
; Line 897
	xor	edi, edi
	xor	ebx, ebx
	mov	BYTE PTR _stextsize, 1
	mov	DWORD PTR _storenumh, ebx
	mov	eax, OFFSET FLAT:_storehold+8
$L85454:
; Line 900
	or	DWORD PTR [eax], -1
	add	eax, 368				; 00000170H
	cmp	eax, OFFSET FLAT:_storehold+17672
	jl	SHORT $L85454
; Line 902
	mov	edx, DWORD PTR _myplr
	mov	DWORD PTR _i$[esp+20], edi
	imul	edx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[edx+18188], edi
	jle	$L85464
	push	ebp
	mov	ebp, OFFSET FLAT:_storehold+196
$L85457:
; Line 903
	mov	ecx, DWORD PTR _i$[esp+24]
	call	@SmithSellOk@4
	test	eax, eax
	je	SHORT $L85458
; Line 904
	mov	ecx, DWORD PTR _i$[esp+24]
	lea	eax, DWORD PTR [ebp-196]
	sub	ecx, ebx
; Line 905
	push	92					; 0000005cH
	imul	ecx, 368				; 00000170H
	sub	ecx, OFFSET FLAT:_storehold
	mov	edi, eax
	add	ecx, eax
	mov	BYTE PTR _sellok$[esp+28], 1
	lea	esi, DWORD PTR _plr[ecx+edx+3468]
	pop	ecx
	rep movsd
; Line 907
	cmp	BYTE PTR [eax+60], 0
	je	SHORT $L85462
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $L85462
; Line 908
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [ebp], eax
$L85462:
; Line 910
	sar	DWORD PTR [ebp], 2
	jne	SHORT $L85463
; Line 911
	mov	DWORD PTR [ebp], 1
$L85463:
; Line 913
	mov	eax, DWORD PTR [ebp]
; Line 914
	inc	ebx
	mov	DWORD PTR [ebp+4], eax
	mov	al, BYTE PTR _i$[esp+24]
	mov	BYTE PTR _storehidx[ebx-1], al
	add	ebp, 368				; 00000170H
	xor	edi, edi
$L85458:
	inc	DWORD PTR _i$[esp+24]
	mov	esi, DWORD PTR _plr[edx+18188]
	cmp	DWORD PTR _i$[esp+24], esi
	jl	$L85457
; Line 918
	cmp	BYTE PTR _sellok$[esp+24], 0
	mov	DWORD PTR _storenumh, ebx
	pop	ebp
	je	SHORT $L85464
; Line 922
	push	DWORD PTR _plr[edx+460]
	mov	DWORD PTR _stextsmax, esi
	xor	ebx, ebx
	mov	esi, OFFSET FLAT:_tempstr
	inc	ebx
	push	OFFSET FLAT:??_C@_0DC@MDGE@Which?5item?5is?5for?5sale?$DP?5?5?5?5?5?5?5?5?5@ ; `string'
	push	esi
	mov	DWORD PTR _stextscrl, ebx
	mov	DWORD PTR _stextsval, edi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 923
	mov	edx, ebx
	xor	ecx, ecx
	push	edi
	push	3
	push	esi
	push	ebx
	call	@AddSText@24
; Line 924
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 925
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 926
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSSell@4
; Line 927
	push	ebx
	push	edi
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	ebx
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 928
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
; Line 938
	add	esp, 8
	jmp	@OffsetSTextY@8
$L85464:
; Line 931
	push	DWORD PTR _plr[edx+460]
	mov	esi, OFFSET FLAT:_tempstr
	mov	DWORD PTR _stextscrl, edi
	push	OFFSET FLAT:??_C@_0DD@BHHN@You?5have?5nothing?5I?5want?4?5?5?5?5?5?5?5?5@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 932
	xor	ecx, ecx
	push	edi
	push	3
	push	esi
	xor	esi, esi
	inc	esi
	push	esi
	mov	edx, esi
	call	@AddSText@24
; Line 933
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 934
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 935
	push	esi
	push	edi
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	esi
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 936
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
; Line 938
	add	esp, 8
	jmp	@OffsetSTextY@8
_S_StartSSell ENDP
_TEXT	ENDS
PUBLIC	@SmithRepairOk@4
; Function compile flags: /Ogsy
;	COMDAT @SmithRepairOk@4
_TEXT	SEGMENT
@SmithRepairOk@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 949
	mov	eax, DWORD PTR _myplr
	imul	ecx, 368				; 00000170H
	imul	eax, 21720				; 000054d8H
	add	eax, ecx
	mov	ecx, DWORD PTR _plr[eax+3476]
	cmp	ecx, -1
	je	SHORT $L85471
	test	ecx, ecx
	je	SHORT $L85471
	cmp	ecx, 11					; 0000000bH
	je	SHORT $L85471
	cmp	ecx, 14					; 0000000eH
	je	SHORT $L85471
; Line 950
	mov	ecx, DWORD PTR _plr[eax+3704]
	xor	edx, edx
	cmp	ecx, DWORD PTR _plr[eax+3708]
	setne	dl
	mov	al, dl
; Line 953
	ret	0
$L85471:
; Line 952
	xor	al, al
; Line 953
	ret	0
@SmithRepairOk@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@PEHE@Repair?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5Yo@ ; `string'
PUBLIC	??_C@_0DG@ILHF@You?5have?5nothing?5to?5repair?4?5?5?5?5?5@ ; `string'
PUBLIC	_S_StartSRepair
PUBLIC	@AddStoreHoldRepair@8
;	COMDAT ??_C@_0CN@PEHE@Repair?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5Yo@
_DATA	SEGMENT
??_C@_0CN@PEHE@Repair?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5Yo@ DB 'Rep'
	DB	'air which item?            Your gold : %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DG@ILHF@You?5have?5nothing?5to?5repair?4?5?5?5?5?5@
_DATA	SEGMENT
??_C@_0DG@ILHF@You?5have?5nothing?5to?5repair?4?5?5?5?5?5@ DB 'You have n'
	DB	'othing to repair.            Your gold : %i', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartSRepair
_TEXT	SEGMENT
_v0$ = -4
_v12$ = -8
_S_StartSRepair PROC NEAR				; COMDAT
; Line 956
	push	ecx
	push	ecx
	push	ebx
; Line 973
	xor	ebx, ebx
	push	ebp
	push	esi
	xor	ebp, ebp
	inc	ebx
	push	edi
	mov	DWORD PTR _v0$[esp+24], ebp
	mov	BYTE PTR _stextsize, bl
; Line 974
	mov	DWORD PTR _v12$[esp+24], ebp
; Line 975
	mov	DWORD PTR _storenumh, ebp
; Line 976
	mov	eax, OFFSET FLAT:_storehold+8
	or	edi, -1
$L85487:
; Line 978
	mov	DWORD PTR [eax], edi
; Line 979
	add	eax, 368				; 00000170H
; Line 980
	cmp	eax, OFFSET FLAT:_storehold+17672
	jl	SHORT $L85487
; Line 981
	mov	eax, DWORD PTR _myplr
	mov	esi, eax
; Line 983
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+900], edi
	je	SHORT $L85492
	mov	ecx, DWORD PTR _plr[eax+1128]
	cmp	ecx, DWORD PTR _plr[eax+1132]
	je	SHORT $L85492
; Line 985
	lea	ecx, DWORD PTR _plr[eax+892]
	mov	edx, edi
	mov	DWORD PTR _v12$[esp+24], ebx
	call	@AddStoreHoldRepair@8
; Line 986
	mov	esi, DWORD PTR _myplr
$L85492:
; Line 989
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+3108], edi
	je	SHORT $L85493
	mov	ecx, DWORD PTR _plr[eax+3336]
	cmp	ecx, DWORD PTR _plr[eax+3340]
	je	SHORT $L85493
; Line 991
	push	-2					; fffffffeH
	lea	ecx, DWORD PTR _plr[eax+3100]
	pop	edx
	mov	DWORD PTR _v12$[esp+24], ebx
	call	@AddStoreHoldRepair@8
; Line 992
	mov	esi, DWORD PTR _myplr
$L85493:
; Line 995
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+2372], edi
	je	SHORT $L85494
	mov	ecx, DWORD PTR _plr[eax+2600]
	cmp	ecx, DWORD PTR _plr[eax+2604]
	je	SHORT $L85494
; Line 997
	push	-3					; fffffffdH
	lea	ecx, DWORD PTR _plr[eax+2364]
	pop	edx
	mov	DWORD PTR _v12$[esp+24], ebx
	call	@AddStoreHoldRepair@8
; Line 998
	mov	esi, DWORD PTR _myplr
$L85494:
; Line 1001
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+2740], edi
	je	SHORT $L85495
	mov	ecx, DWORD PTR _plr[eax+2968]
	cmp	ecx, DWORD PTR _plr[eax+2972]
	je	SHORT $L85495
; Line 1003
	push	-4					; fffffffcH
	lea	ecx, DWORD PTR _plr[eax+2732]
	pop	edx
	mov	DWORD PTR _v12$[esp+24], ebx
	call	@AddStoreHoldRepair@8
; Line 1004
	mov	esi, DWORD PTR _myplr
$L85495:
; Line 1006
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	mov	edi, eax
; Line 1007
	cmp	DWORD PTR _plr[eax+18188], ebp
	jle	SHORT $L85499
$L85497:
; Line 1011
	mov	ecx, DWORD PTR _v0$[esp+24]
	call	@SmithRepairOk@4
; Line 1012
	xor	ebx, ebx
	inc	ebx
	test	al, al
	je	SHORT $L85500
; Line 1013
	mov	edx, DWORD PTR _v0$[esp+24]
	lea	ecx, DWORD PTR _plr[edi+ebp+3468]
	mov	DWORD PTR _v12$[esp+24], ebx
	call	@AddStoreHoldRepair@8
; Line 1014
	mov	esi, DWORD PTR _myplr
$L85500:
; Line 1017
	mov	eax, esi
; Line 1018
	add	ebp, 368				; 00000170H
	imul	eax, 21720				; 000054d8H
	inc	DWORD PTR _v0$[esp+24]
	mov	edi, eax
; Line 1019
	mov	ecx, DWORD PTR _v0$[esp+24]
	cmp	ecx, DWORD PTR _plr[eax+18188]
	jl	SHORT $L85497
	xor	ebp, ebp
$L85499:
; Line 1022
	imul	esi, 21720				; 000054d8H
; Line 1023
	cmp	DWORD PTR _v12$[esp+24], ebp
	mov	eax, DWORD PTR _plr[esi+460]
; Line 1028
	push	eax
	je	SHORT $L85503
	mov	ecx, DWORD PTR _plr[esi+18188]
	mov	esi, OFFSET FLAT:_tempstr
	push	OFFSET FLAT:??_C@_0CN@PEHE@Repair?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5Yo@ ; `string'
	push	esi
	mov	DWORD PTR _stextsval, ebp
	mov	DWORD PTR _stextscrl, ebx
	mov	DWORD PTR _stextsmax, ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1029
	mov	edx, ebx
	xor	ecx, ecx
	push	ebp
	push	3
	push	esi
	push	ebx
	call	@AddSText@24
; Line 1030
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1031
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 1032
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSSell@4
; Line 1033
	jmp	SHORT $L85505
$L85503:
; Line 1035
	mov	esi, OFFSET FLAT:_tempstr
	push	OFFSET FLAT:??_C@_0DG@ILHF@You?5have?5nothing?5to?5repair?4?5?5?5?5?5@ ; `string'
	push	esi
	mov	DWORD PTR _stextscrl, ebp
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1036
	mov	edx, ebx
	xor	ecx, ecx
	push	ebp
	push	3
	push	esi
	push	ebx
	call	@AddSText@24
; Line 1037
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1038
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
$L85505:
; Line 1040
	push	ebx
	push	ebp
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	ebx
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1041
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1042
	add	esp, 8
	jmp	@OffsetSTextY@8
_S_StartSRepair ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @AddStoreHoldRepair@8
_TEXT	SEGMENT
_i$ = -4
@AddStoreHoldRepair@8 PROC NEAR				; COMDAT
; _itm$ = ecx
; _i$ = edx
; Line 1049
	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1054
	mov	edi, DWORD PTR _storenumh
	mov	DWORD PTR _i$[esp+20], edx
; Line 1055
	mov	eax, edi
	mov	ebp, 368				; 00000170H
	imul	eax, 368				; 00000170H
	lea	esi, DWORD PTR _storehold[eax]
; Line 1056
	mov	eax, esi
	sub	ecx, esi
$L86966:
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
	inc	eax
	dec	ebp
	jne	SHORT $L86966
; Line 1057
	mov	bl, BYTE PTR [esi+60]
	test	bl, bl
	je	SHORT $L85516
	cmp	DWORD PTR [esi+56], 0
	je	SHORT $L85516
; Line 1058
	mov	eax, DWORD PTR [esi+200]
	push	100					; 00000064H
	imul	eax, 30					; 0000001eH
	cdq
	pop	ecx
	idiv	ecx
	mov	DWORD PTR [esi+196], eax
$L85516:
; Line 1059
	mov	ecx, DWORD PTR [esi+240]
	push	100					; 00000064H
	mov	eax, ecx
	sub	eax, DWORD PTR [esi+236]
	imul	eax, 100				; 00000064H
	cdq
	idiv	ecx
	pop	ecx
	imul	eax, DWORD PTR [esi+196]
	cdq
	idiv	ecx
; Line 1060
	test	eax, eax
	jne	SHORT $L85517
; Line 1061
	test	bl, bl
	je	SHORT $L85518
	cmp	DWORD PTR [esi+56], eax
	jne	SHORT $L85511
$L85518:
; Line 1063
	xor	eax, eax
	inc	eax
$L85517:
; Line 1065
	cmp	eax, 1
	jle	SHORT $L85519
; Line 1066
	sar	eax, 1
$L85519:
; Line 1067
	mov	DWORD PTR [esi+200], eax
; Line 1068
	mov	DWORD PTR [esi+196], eax
; Line 1069
	mov	al, BYTE PTR _i$[esp+20]
	mov	BYTE PTR _storehidx[edi], al
; Line 1070
	inc	edi
	mov	DWORD PTR _storenumh, edi
$L85511:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1071
	pop	ecx
	ret	0
@AddStoreHoldRepair@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@INAE@Witch?8s?5shack?$AA@		; `string'
PUBLIC	??_C@_0O@NCAJ@Talk?5to?5Adria?$AA@		; `string'
PUBLIC	??_C@_09OKAN@Buy?5items?$AA@			; `string'
PUBLIC	??_C@_0BA@DCIB@Recharge?5staves?$AA@		; `string'
PUBLIC	??_C@_0BA@MIOM@Leave?5the?5shack?$AA@		; `string'
PUBLIC	_S_StartWitch
;	COMDAT ??_C@_0O@INAE@Witch?8s?5shack?$AA@
_DATA	SEGMENT
??_C@_0O@INAE@Witch?8s?5shack?$AA@ DB 'Witch''s shack', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@NCAJ@Talk?5to?5Adria?$AA@
_DATA	SEGMENT
??_C@_0O@NCAJ@Talk?5to?5Adria?$AA@ DB 'Talk to Adria', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09OKAN@Buy?5items?$AA@
_DATA	SEGMENT
??_C@_09OKAN@Buy?5items?$AA@ DB 'Buy items', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@DCIB@Recharge?5staves?$AA@
_DATA	SEGMENT
??_C@_0BA@DCIB@Recharge?5staves?$AA@ DB 'Recharge staves', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@MIOM@Leave?5the?5shack?$AA@
_DATA	SEGMENT
??_C@_0BA@MIOM@Leave?5the?5shack?$AA@ DB 'Leave the shack', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartWitch
_TEXT	SEGMENT
_S_StartWitch PROC NEAR					; COMDAT
; Line 1075
	push	ebx
	push	esi
; Line 1076
	xor	ebx, ebx
; Line 1078
	xor	esi, esi
	push	ebx
	push	3
	inc	esi
	push	OFFSET FLAT:??_C@_0O@INAE@Witch?8s?5shack?$AA@ ; `string'
	push	esi
	push	2
	pop	edx
	xor	ecx, ecx
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	call	@AddSText@24
; Line 1079
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@ ; `string'
	push	esi
	push	9
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1080
	push	esi
	push	esi
	push	OFFSET FLAT:??_C@_0O@NCAJ@Talk?5to?5Adria?$AA@ ; `string'
	push	esi
	push	12					; 0000000cH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1081
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_09OKAN@Buy?5items?$AA@ ; `string'
	push	esi
	push	14					; 0000000eH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1082
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0L@IGCK@Sell?5items?$AA@ ; `string'
	push	esi
	push	16					; 00000010H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1083
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0BA@DCIB@Recharge?5staves?$AA@ ; `string'
	push	esi
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1084
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0BA@MIOM@Leave?5the?5shack?$AA@ ; `string'
	push	esi
	push	20					; 00000014H
	xor	ecx, ecx
	pop	esi
	mov	edx, esi
	call	@AddSText@24
; Line 1085
	push	5
	pop	ecx
	call	@AddSLine@4
; Line 1086
	mov	DWORD PTR _storenumh, esi
	pop	esi
	pop	ebx
; Line 1087
	ret	0
_S_StartWitch ENDP
_TEXT	ENDS
PUBLIC	@S_ScrollWBuy@4
; Function compile flags: /Ogsy
;	COMDAT @S_ScrollWBuy@4
_TEXT	SEGMENT
_iclr$ = -4
@S_ScrollWBuy@4 PROC NEAR				; COMDAT
; _idx$ = ecx
; Line 1093
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 1101
	push	5
	mov	esi, ecx
	pop	edi
; Line 1102
	push	21					; 00000015H
	mov	ecx, edi
	pop	edx
	call	@ClearSText@8
; Line 1103
	imul	esi, 368				; 00000170H
	add	esi, OFFSET FLAT:_witchitem+60
; Line 1104
	mov	DWORD PTR _stextup, edi
$L85534:
; Line 1106
	cmp	DWORD PTR [esi-52], -1
	je	SHORT $L85538
; Line 1108
	mov	cl, BYTE PTR [esi]
	and	BYTE PTR _iclr$[ebp], 0
	test	cl, cl
	je	SHORT $L85540
; Line 1109
	mov	BYTE PTR _iclr$[ebp], 1
$L85540:
; Line 1110
	cmp	DWORD PTR [esi+296], 0
	jne	SHORT $L85543
; Line 1111
	mov	BYTE PTR _iclr$[ebp], 2
$L85543:
; Line 1113
	test	cl, cl
; Line 1122
	lea	eax, DWORD PTR [esi+65]
	jne	SHORT $L85545
	lea	eax, DWORD PTR [esi+1]
$L85545:
; Line 1115
	push	1
	mov	edx, edi
	push	DWORD PTR _iclr$[ebp]
	push	eax
	push	0
	push	20					; 00000014H
	pop	ecx
	call	@AddSText@24
; Line 1116
	mov	edx, DWORD PTR [esi+140]
	mov	ecx, edi
	call	@AddSTextVal@8
; Line 1117
	lea	edx, DWORD PTR [edi+1]
; Line 1122
	lea	ecx, DWORD PTR [esi-60]
	push	DWORD PTR _iclr$[ebp]
	call	@PrintStoreItem@12
	mov	DWORD PTR _stextdown, edi
	add	esi, 368				; 00000170H
$L85538:
	add	edi, 4
	cmp	edi, 20					; 00000014H
	jl	SHORT $L85534
; Line 1123
	mov	eax, DWORD PTR _stextsel
	pop	edi
	mov	ecx, eax
	pop	esi
	imul	ecx, 156				; 0000009cH
	cmp	DWORD PTR _stext[ecx+148], 0
	jne	SHORT $L85548
	cmp	eax, 22					; 00000016H
	je	SHORT $L85548
; Line 1124
	mov	eax, DWORD PTR _stextdown
	mov	DWORD PTR _stextsel, eax
$L85548:
; Line 1125
	leave
	ret	0
@S_ScrollWBuy@4 ENDP
_TEXT	ENDS
PUBLIC	_S_StartWBuy
; Function compile flags: /Ogsy
;	COMDAT _S_StartWBuy
_TEXT	SEGMENT
_S_StartWBuy PROC NEAR					; COMDAT
; Line 1136
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	esi
	push	edi
; Line 1141
	push	DWORD PTR _plr[eax+460]
	xor	ebx, ebx
	mov	esi, OFFSET FLAT:_tempstr
	inc	ebx
	xor	edi, edi
	push	OFFSET FLAT:??_C@_0DH@JMAP@I?5have?5these?5items?5for?5sale?5?3?5?5?5@ ; `string'
	push	esi
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	mov	DWORD PTR _stextsval, edi
	mov	DWORD PTR _stextsmax, 20		; 00000014H
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1142
	mov	edx, ebx
	xor	ecx, ecx
	push	edi
	push	3
	push	esi
	push	ebx
	call	@AddSText@24
; Line 1143
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1144
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 1145
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollWBuy@4
; Line 1146
	push	edi
	push	edi
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	ebx
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1147
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	call	@OffsetSTextY@8
; Line 1148
	xor	eax, eax
; Line 1150
	cmp	DWORD PTR _witchitem+8, -1
	mov	DWORD PTR _storenumh, edi
	je	SHORT $L85553
; Line 1151
	mov	ecx, OFFSET FLAT:_witchitem+8
$L85554:
; Line 1153
	add	ecx, 368				; 00000170H
; Line 1154
	inc	eax
; Line 1155
	cmp	DWORD PTR [ecx], -1
	jne	SHORT $L85554
; Line 1156
	mov	DWORD PTR _storenumh, eax
$L85553:
; Line 1158
	add	eax, -4					; fffffffcH
; Line 1159
	cmp	eax, edi
	mov	DWORD PTR _stextsmax, eax
	jge	SHORT $L85557
; Line 1160
	mov	DWORD PTR _stextsmax, edi
$L85557:
	pop	edi
	pop	esi
	pop	ebx
; Line 1161
	ret	0
_S_StartWBuy ENDP
_TEXT	ENDS
PUBLIC	@WitchSellOk@4
; Function compile flags: /Ogsy
;	COMDAT @WitchSellOk@4
_TEXT	SEGMENT
@WitchSellOk@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1175
	mov	edx, DWORD PTR _myplr
	xor	al, al
	test	ecx, ecx
	jge	SHORT $L85563
	not	ecx
	imul	ecx, 368				; 00000170H
	imul	edx, 21720				; 000054d8H
	lea	ecx, DWORD PTR _plr[ecx+edx+18232]
; Line 1176
	jmp	SHORT $L85564
$L85563:
; Line 1177
	imul	edx, 21720				; 000054d8H
	imul	ecx, 368				; 00000170H
	lea	ecx, DWORD PTR _plr[edx+ecx+3468]
$L85564:
; Line 1179
	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	jne	SHORT $L85565
; Line 1180
	mov	al, 1
$L85565:
; Line 1181
	cmp	edx, 10					; 0000000aH
	jne	SHORT $L85566
; Line 1182
	mov	al, 1
$L85566:
; Line 1183
	mov	ecx, DWORD PTR [ecx+360]
	cmp	ecx, 6
	jl	SHORT $L85567
	cmp	ecx, 22					; 00000016H
	jg	SHORT $L85567
; Line 1184
	xor	al, al
$L85567:
; Line 1185
	cmp	ecx, 33					; 00000021H
	jne	SHORT $L85568
; Line 1186
	xor	al, al
$L85568:
; Line 1188
	ret	0
@WitchSellOk@4 ENDP
_TEXT	ENDS
PUBLIC	_S_StartWSell
; Function compile flags: /Ogsy
;	COMDAT _S_StartWSell
_TEXT	SEGMENT
_i$ = -8
_sellok$ = -9
_S_StartWSell PROC NEAR					; COMDAT
; Line 1191
	sub	esp, 12					; 0000000cH
; Line 1196
	and	BYTE PTR _sellok$[esp+12], 0
	push	ebx
	push	ebp
; Line 1197
	xor	ebp, ebp
	push	esi
	push	edi
	mov	BYTE PTR _stextsize, 1
	mov	DWORD PTR _storenumh, ebp
	mov	eax, OFFSET FLAT:_storehold+8
$L85572:
; Line 1200
	or	DWORD PTR [eax], -1
	add	eax, 368				; 00000170H
	cmp	eax, OFFSET FLAT:_storehold+17672
	jl	SHORT $L85572
; Line 1202
	mov	ebx, DWORD PTR _myplr
	mov	DWORD PTR _i$[esp+28], ebp
	imul	ebx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ebx+18188], ebp
	jle	$L85577
$L85575:
; Line 1203
	mov	ecx, DWORD PTR _i$[esp+28]
	call	@WitchSellOk@4
	test	al, al
	je	SHORT $L85576
; Line 1204
	mov	edx, DWORD PTR _i$[esp+28]
; Line 1205
	mov	eax, ebp
	mov	ecx, edx
	imul	eax, 368				; 00000170H
	sub	ecx, ebp
	lea	edi, DWORD PTR _storehold[eax]
	imul	ecx, 368				; 00000170H
	sub	ecx, OFFSET FLAT:_storehold
	push	92					; 0000005cH
	add	ecx, ebx
	mov	BYTE PTR _sellok$[esp+32], 1
	lea	esi, DWORD PTR _plr[ecx+edi+3468]
	pop	ecx
	rep movsd
; Line 1207
	cmp	BYTE PTR _storehold[eax+60], 0
	je	SHORT $L85580
	cmp	DWORD PTR _storehold[eax+56], 0
	je	SHORT $L85580
; Line 1208
	mov	ecx, DWORD PTR _storehold[eax+200]
	mov	DWORD PTR _storehold[eax+196], ecx
$L85580:
; Line 1210
	lea	ecx, DWORD PTR _storehold[eax+196]
	sar	DWORD PTR [ecx], 2
	jne	SHORT $L85581
; Line 1211
	mov	DWORD PTR [ecx], 1
$L85581:
; Line 1213
	mov	ecx, DWORD PTR [ecx]
; Line 1214
	mov	BYTE PTR _storehidx[ebp], dl
	inc	ebp
	mov	DWORD PTR _storehold[eax+200], ecx
	mov	DWORD PTR _storenumh, ebp
$L85576:
	inc	DWORD PTR _i$[esp+28]
	mov	eax, DWORD PTR _i$[esp+28]
	cmp	eax, DWORD PTR _plr[ebx+18188]
	jl	$L85575
$L85577:
; Line 1218
	and	DWORD PTR _i$[esp+28], 0
	lea	eax, DWORD PTR _plr[ebx+18240]
	mov	DWORD PTR -4+[esp+28], eax
$L85582:
; Line 1219
	mov	eax, DWORD PTR -4+[esp+28]
	cmp	DWORD PTR [eax], -1
	je	$L85583
	mov	ecx, DWORD PTR _i$[esp+28]
	not	ecx
	call	@WitchSellOk@4
	test	al, al
	je	SHORT $L85583
; Line 1220
	mov	ecx, DWORD PTR _i$[esp+28]
; Line 1221
	mov	eax, ebp
	sub	ecx, ebp
	imul	eax, 368				; 00000170H
	imul	ecx, 368				; 00000170H
	sub	ecx, OFFSET FLAT:_storehold
	lea	edi, DWORD PTR _storehold[eax]
	add	ecx, ebx
	push	92					; 0000005cH
	mov	BYTE PTR _sellok$[esp+32], 1
	lea	esi, DWORD PTR _plr[ecx+edi+18232]
	pop	ecx
	rep movsd
; Line 1223
	cmp	BYTE PTR _storehold[eax+60], 0
	je	SHORT $L85587
	cmp	DWORD PTR _storehold[eax+56], 0
	je	SHORT $L85587
; Line 1224
	mov	ecx, DWORD PTR _storehold[eax+200]
	mov	DWORD PTR _storehold[eax+196], ecx
$L85587:
; Line 1226
	lea	ecx, DWORD PTR _storehold[eax+196]
	sar	DWORD PTR [ecx], 2
	jne	SHORT $L85588
; Line 1227
	mov	DWORD PTR [ecx], 1
$L85588:
; Line 1229
	mov	ecx, DWORD PTR [ecx]
; Line 1230
	inc	ebp
	mov	DWORD PTR _storehold[eax+200], ecx
	mov	al, BYTE PTR _i$[esp+28]
	not	al
	mov	BYTE PTR _storehidx[ebp-1], al
	mov	DWORD PTR _storenumh, ebp
$L85583:
	inc	DWORD PTR _i$[esp+28]
	add	DWORD PTR -4+[esp+28], 368		; 00000170H
	cmp	DWORD PTR _i$[esp+28], 8
	jl	$L85582
; Line 1234
	cmp	BYTE PTR _sellok$[esp+28], 0
; Line 1238
	push	DWORD PTR _plr[ebx+460]
	mov	esi, OFFSET FLAT:_tempstr
	je	SHORT $L85589
	mov	eax, DWORD PTR _plr[ebx+18188]
	and	DWORD PTR _stextsval, 0
	xor	edi, edi
	push	OFFSET FLAT:??_C@_0DC@MDGE@Which?5item?5is?5for?5sale?$DP?5?5?5?5?5?5?5?5?5@ ; `string'
	inc	edi
	push	esi
	mov	DWORD PTR _stextscrl, edi
	mov	DWORD PTR _stextsmax, eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1239
	mov	edx, edi
	xor	ecx, ecx
	push	0
	push	3
	push	esi
	push	edi
	call	@AddSText@24
; Line 1240
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1241
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 1242
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSSell@4
; Line 1243
	jmp	SHORT $L85590
$L85589:
; Line 1244
	and	DWORD PTR _stextscrl, 0
; Line 1245
	push	OFFSET FLAT:??_C@_0DD@BHHN@You?5have?5nothing?5I?5want?4?5?5?5?5?5?5?5?5@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1246
	xor	edx, edx
	inc	edx
	xor	ecx, ecx
	push	0
	push	3
	push	esi
	push	edx
	call	@AddSText@24
; Line 1247
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1248
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
	xor	edi, edi
	inc	edi
$L85590:
; Line 1251
	push	edi
	push	0
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	edi
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1252
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1253
	add	esp, 12					; 0000000cH
	jmp	@OffsetSTextY@8
_S_StartWSell ENDP
_TEXT	ENDS
PUBLIC	@WitchRechargeOk@4
; Function compile flags: /Ogsy
;	COMDAT @WitchRechargeOk@4
_TEXT	SEGMENT
@WitchRechargeOk@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1265
	mov	edx, DWORD PTR _myplr
	imul	ecx, 368				; 00000170H
	imul	edx, 21720				; 000054d8H
	add	ecx, edx
	xor	al, al
	cmp	DWORD PTR _plr[ecx+3476], 10		; 0000000aH
	jne	SHORT $L85595
	mov	edx, DWORD PTR _plr[ecx+3696]
	cmp	edx, DWORD PTR _plr[ecx+3700]
	je	SHORT $L85595
; Line 1266
	inc	al
$L85595:
; Line 1269
	ret	0
@WitchRechargeOk@4 ENDP
_TEXT	ENDS
PUBLIC	@AddStoreHoldRecharge@372
EXTRN	_spelldata:BYTE
; Function compile flags: /Ogsy
;	COMDAT @AddStoreHoldRecharge@372
_TEXT	SEGMENT
_itm$ = 8
_i$ = -8
_v3$ = -4
@AddStoreHoldRecharge@372 PROC NEAR			; COMDAT
; _i$ = ecx
; Line 1272
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 1280
	mov	eax, DWORD PTR _itm$[ebp+224]
	push	ebx
	imul	eax, 56					; 00000038H
	push	esi
	push	edi
	mov	eax, DWORD PTR _spelldata[eax+52]
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR _v3$[ebp], eax
; Line 1282
	mov	eax, DWORD PTR _storenumh
	mov	ebx, eax
	push	92					; 0000005cH
	imul	ebx, 368				; 00000170H
	lea	edi, DWORD PTR _storehold[ebx]
	mov	ecx, edi
	sub	ecx, ebx
	sub	ecx, OFFSET FLAT:_storehold
	lea	esi, DWORD PTR _itm$[ebp+ecx]
	pop	ecx
	rep movsd
; Line 1290
	mov	ecx, DWORD PTR _storehold[ebx+232]
	mov	esi, eax
	mov	eax, ecx
	push	100					; 00000064H
	sub	eax, DWORD PTR _storehold[ebx+228]
	imul	eax, 100				; 00000064H
	cdq
	idiv	ecx
	mov	ecx, DWORD PTR _storehold[ebx+196]
	add	ecx, DWORD PTR _v3$[ebp]
	imul	eax, ecx
	cdq
	pop	ecx
	pop	edi
	idiv	ecx
	sar	eax, 1
; Line 1291
	inc	DWORD PTR _storenumh
; Line 1292
	mov	DWORD PTR _storehold[ebx+196], eax
; Line 1293
	mov	DWORD PTR _storehold[ebx+200], eax
; Line 1294
	mov	al, BYTE PTR _i$[ebp]
	mov	BYTE PTR _storehidx[esi], al
	pop	esi
	pop	ebx
; Line 1295
	leave
	ret	368					; 00000170H
@AddStoreHoldRecharge@372 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@BANC@Recharge?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0DI@KEMJ@You?5have?5nothing?5to?5recharge?4?5?5?5@ ; `string'
PUBLIC	_S_StartWRecharge
;	COMDAT ??_C@_0CP@BANC@Recharge?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@
; File Source/../defs.h
_DATA	SEGMENT
??_C@_0CP@BANC@Recharge?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'Rec'
	DB	'harge which item?            Your gold : %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DI@KEMJ@You?5have?5nothing?5to?5recharge?4?5?5?5@
_DATA	SEGMENT
??_C@_0DI@KEMJ@You?5have?5nothing?5to?5recharge?4?5?5?5@ DB 'You have not'
	DB	'hing to recharge.            Your gold : %i', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartWRecharge
_TEXT	SEGMENT
_v4$ = -380
_inv_num$ = -4
_v7$ = -8
_v8$ = -12
_S_StartWRecharge PROC NEAR				; COMDAT
; File Source/stores.cpp
; Line 1300
	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
; Line 1312
	and	DWORD PTR _v8$[ebp], 0
; Line 1313
	and	DWORD PTR _storenumh, 0
	push	ebx
	push	esi
	push	edi
	mov	BYTE PTR _stextsize, 1
; Line 1314
	mov	eax, OFFSET FLAT:_storehold+8
$L85616:
; Line 1316
	or	DWORD PTR [eax], -1
; Line 1317
	add	eax, 368				; 00000170H
; Line 1318
	cmp	eax, OFFSET FLAT:_storehold+17672
	jl	SHORT $L85616
; Line 1320
	mov	ebx, DWORD PTR _myplr
	imul	ebx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ebx+2372], 10		; 0000000aH
	jne	SHORT $L85621
	mov	eax, DWORD PTR _plr[ebx+2592]
	cmp	eax, DWORD PTR _plr[ebx+2596]
	je	SHORT $L85621
; Line 1322
	push	92					; 0000005cH
	lea	esi, DWORD PTR _plr[ebx+2364]
	pop	ecx
	lea	edi, DWORD PTR _v4$[ebp]
; Line 1323
	sub	esp, 368				; 00000170H
	mov	DWORD PTR _v8$[ebp], 1
	rep movsd
	push	92					; 0000005cH
	lea	esi, DWORD PTR _v4$[ebp]
	pop	ecx
	mov	edi, esp
	rep movsd
	or	ecx, -1
	call	@AddStoreHoldRecharge@372
$L85621:
; Line 1325
	mov	eax, DWORD PTR _plr[ebx+18188]
; Line 1326
	and	DWORD PTR _inv_num$[ebp], 0
; Line 1327
	test	eax, eax
	jle	SHORT $L85625
; Line 1328
	lea	eax, DWORD PTR _plr[ebx+3468]
	mov	DWORD PTR _v7$[ebp], eax
$L85623:
; Line 1331
	mov	ecx, DWORD PTR _inv_num$[ebp]
	call	@WitchRechargeOk@4
	test	al, al
	je	SHORT $L85626
; Line 1333
	mov	esi, DWORD PTR _v7$[ebp]
	push	92					; 0000005cH
	pop	ecx
	lea	edi, DWORD PTR _v4$[ebp]
; Line 1334
	sub	esp, 368				; 00000170H
	mov	DWORD PTR _v8$[ebp], 1
	rep movsd
	push	92					; 0000005cH
	lea	esi, DWORD PTR _v4$[ebp]
	pop	ecx
	mov	edi, esp
	rep movsd
	mov	ecx, DWORD PTR _inv_num$[ebp]
	call	@AddStoreHoldRecharge@372
$L85626:
; Line 1336
	inc	DWORD PTR _inv_num$[ebp]
; Line 1337
	mov	eax, DWORD PTR _plr[ebx+18188]
; Line 1338
	add	DWORD PTR _v7$[ebp], 368		; 00000170H
; Line 1339
	cmp	DWORD PTR _inv_num$[ebp], eax
	jl	SHORT $L85623
$L85625:
; Line 1341
	mov	ebx, DWORD PTR _plr[ebx+460]
; Line 1342
	xor	ecx, ecx
	cmp	DWORD PTR _v8$[ebp], ecx
; Line 1346
	mov	esi, OFFSET FLAT:_tempstr
	push	ebx
	je	SHORT $L85627
	xor	edi, edi
	push	OFFSET FLAT:??_C@_0CP@BANC@Recharge?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
	inc	edi
	push	esi
	mov	DWORD PTR _stextscrl, edi
	mov	DWORD PTR _stextsval, ecx
	mov	DWORD PTR _stextsmax, eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1347
	mov	edx, edi
	xor	ecx, ecx
	push	0
	push	3
	push	esi
	push	edi
	call	@AddSText@24
; Line 1348
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1349
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 1350
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSSell@4
; Line 1351
	jmp	SHORT $L85629
$L85627:
; Line 1353
	push	OFFSET FLAT:??_C@_0DI@KEMJ@You?5have?5nothing?5to?5recharge?4?5?5?5@ ; `string'
	push	esi
	mov	DWORD PTR _stextscrl, ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1354
	xor	edx, edx
	inc	edx
	xor	ecx, ecx
	push	0
	push	3
	push	esi
	push	edx
	call	@AddSText@24
; Line 1355
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1356
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
	xor	edi, edi
	inc	edi
$L85629:
; Line 1358
	push	edi
	push	0
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	edi
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1359
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	call	@OffsetSTextY@8
; Line 1360
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_S_StartWRecharge ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@HIFG@You?5do?5not?5have?5enough?5gold?$AA@ ; `string'
PUBLIC	_S_StartNoMoney
;	COMDAT ??_C@_0BM@HIFG@You?5do?5not?5have?5enough?5gold?$AA@
_DATA	SEGMENT
??_C@_0BM@HIFG@You?5do?5not?5have?5enough?5gold?$AA@ DB 'You do not have '
	DB	'enough gold', 00H				; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartNoMoney
_TEXT	SEGMENT
_S_StartNoMoney PROC NEAR				; COMDAT
; Line 1368
	mov	cl, BYTE PTR _stextshold
	call	@StartStore@4
; Line 1369
	and	DWORD PTR _stextscrl, 0
; Line 1371
	push	23					; 00000017H
	pop	edx
	mov	BYTE PTR _stextsize, 1
	push	5
	pop	ecx
	call	@ClearSText@8
; Line 1372
	push	1
	push	0
	push	OFFSET FLAT:??_C@_0BM@HIFG@You?5do?5not?5have?5enough?5gold?$AA@ ; `string'
	push	1
	push	14					; 0000000eH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1373
	ret	0
_S_StartNoMoney ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@POBB@You?5do?5not?5have?5enough?5room?5in?5i@ ; `string'
PUBLIC	_S_StartNoRoom
;	COMDAT ??_C@_0CJ@POBB@You?5do?5not?5have?5enough?5room?5in?5i@
_DATA	SEGMENT
??_C@_0CJ@POBB@You?5do?5not?5have?5enough?5room?5in?5i@ DB 'You do not ha'
	DB	've enough room in inventory', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartNoRoom
_TEXT	SEGMENT
_S_StartNoRoom PROC NEAR				; COMDAT
; Line 1379
	mov	cl, BYTE PTR _stextshold
	call	@StartStore@4
; Line 1380
	and	DWORD PTR _stextscrl, 0
; Line 1381
	push	23					; 00000017H
	pop	edx
	push	5
	pop	ecx
	call	@ClearSText@8
; Line 1382
	push	1
	push	0
	push	OFFSET FLAT:??_C@_0CJ@POBB@You?5do?5not?5have?5enough?5room?5in?5i@ ; `string'
	push	1
	push	14					; 0000000eH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1383
	ret	0
_S_StartNoRoom ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@NKDL@Do?5we?5have?5a?5deal?$DP?$AA@	; `string'
PUBLIC	??_C@_0CN@GOFL@Are?5you?5sure?5you?5want?5to?5identif@ ; `string'
PUBLIC	??_C@_0CI@FBKO@Are?5you?5sure?5you?5want?5to?5buy?5thi@ ; `string'
PUBLIC	??_C@_0CN@MGFL@Are?5you?5sure?5you?5want?5to?5recharg@ ; `string'
PUBLIC	??_C@_0CJ@OEIG@Are?5you?5sure?5you?5want?5to?5sell?5th@ ; `string'
PUBLIC	??_C@_0CL@NGLO@Are?5you?5sure?5you?5want?5to?5repair?5@ ; `string'
PUBLIC	??_C@_03PEHN@Yes?$AA@				; `string'
PUBLIC	??_C@_02JOHD@No?$AA@				; `string'
PUBLIC	_S_StartConfirm
;	COMDAT ??_C@_0BD@NKDL@Do?5we?5have?5a?5deal?$DP?$AA@
_DATA	SEGMENT
??_C@_0BD@NKDL@Do?5we?5have?5a?5deal?$DP?$AA@ DB 'Do we have a deal?', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CN@GOFL@Are?5you?5sure?5you?5want?5to?5identif@
_DATA	SEGMENT
??_C@_0CN@GOFL@Are?5you?5sure?5you?5want?5to?5identif@ DB 'Are you sure y'
	DB	'ou want to identify this item?', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CI@FBKO@Are?5you?5sure?5you?5want?5to?5buy?5thi@
_DATA	SEGMENT
??_C@_0CI@FBKO@Are?5you?5sure?5you?5want?5to?5buy?5thi@ DB 'Are you sure '
	DB	'you want to buy this item?', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03PEHN@Yes?$AA@
_DATA	SEGMENT
??_C@_03PEHN@Yes?$AA@ DB 'Yes', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02JOHD@No?$AA@
_DATA	SEGMENT
??_C@_02JOHD@No?$AA@ DB 'No', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CN@MGFL@Are?5you?5sure?5you?5want?5to?5recharg@
_DATA	SEGMENT
??_C@_0CN@MGFL@Are?5you?5sure?5you?5want?5to?5recharg@ DB 'Are you sure y'
	DB	'ou want to recharge this item?', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CL@NGLO@Are?5you?5sure?5you?5want?5to?5repair?5@
_DATA	SEGMENT
??_C@_0CL@NGLO@Are?5you?5sure?5you?5want?5to?5repair?5@ DB 'Are you sure '
	DB	'you want to repair this item?', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@OEIG@Are?5you?5sure?5you?5want?5to?5sell?5th@
_DATA	SEGMENT
??_C@_0CJ@OEIG@Are?5you?5sure?5you?5want?5to?5sell?5th@ DB 'Are you sure '
	DB	'you want to sell this item?', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartConfirm
_TEXT	SEGMENT
_iclr$ = -4
_S_StartConfirm PROC NEAR				; COMDAT
; Line 1387
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1391
	mov	cl, BYTE PTR _stextshold
	push	ebx
	push	esi
	call	@StartStore@4
; Line 1393
	push	23					; 00000017H
	xor	ebx, ebx
	pop	edx
	mov	DWORD PTR _stextscrl, ebx
	push	5
	pop	ecx
	call	@ClearSText@8
; Line 1396
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _iclr$[ebp], bl
	imul	eax, 21720				; 000054d8H
	mov	dl, BYTE PTR _plr[eax+21236]
	cmp	dl, bl
	je	SHORT $L85640
; Line 1397
	mov	BYTE PTR _iclr$[ebp], 1
$L85640:
; Line 1398
	cmp	DWORD PTR _plr[eax+21532], ebx
	jne	SHORT $L85641
; Line 1399
	mov	BYTE PTR _iclr$[ebp], 2
$L85641:
; Line 1401
	xor	ecx, ecx
	cmp	dl, bl
	setne	cl
	mov	esi, ecx
; Line 1403
	mov	ecx, DWORD PTR _stextshold
	cmp	ecx, 17					; 00000011H
	jne	SHORT $L85642
; Line 1404
	xor	esi, esi
$L85642:
; Line 1405
	cmp	dl, bl
	je	SHORT $L85647
	cmp	DWORD PTR _plr[eax+21232], ebx
	jne	SHORT $L85647
; Line 1406
	cmp	ecx, 3
	jne	SHORT $L85644
; Line 1407
	xor	esi, esi
$L85644:
; Line 1408
	cmp	ecx, 7
	jne	SHORT $L85645
; Line 1409
	xor	esi, esi
$L85645:
; Line 1410
	cmp	ecx, 4
	jne	SHORT $L85646
; Line 1411
	xor	esi, esi
$L85646:
; Line 1412
	cmp	ecx, 8
	jne	SHORT $L85647
; Line 1413
	xor	esi, esi
$L85647:
; Line 1416
	push	ebx
	cmp	esi, ebx
	push	DWORD PTR _iclr$[ebp]
	je	SHORT $L85648
	lea	eax, DWORD PTR _plr[eax+21301]
; Line 1417
	jmp	SHORT $L87076
$L85648:
; Line 1418
	lea	eax, DWORD PTR _plr[eax+21237]
$L87076:
	push	eax
	push	ebx
	push	8
	pop	edx
	push	20					; 00000014H
	pop	ecx
	call	@AddSText@24
; Line 1420
	mov	eax, DWORD PTR _myplr
	push	8
	imul	eax, 21720				; 000054d8H
	pop	ecx
	mov	edx, DWORD PTR _plr[eax+21376]
	call	@AddSTextVal@8
; Line 1421
	push	DWORD PTR _iclr$[ebp]
	lea	ecx, DWORD PTR _plr[eax+21176]
	push	9
	pop	edx
	call	@PrintStoreItem@12
; Line 1423
	mov	eax, DWORD PTR _stextshold
	mov	esi, OFFSET FLAT:_tempstr
	cmp	eax, 8
	jle	SHORT $L85650
; Line 1424
	cmp	eax, 13					; 0000000dH
	jne	SHORT $L85651
; Line 1425
	push	OFFSET FLAT:??_C@_0BD@NKDL@Do?5we?5have?5a?5deal?$DP?$AA@ ; `string'
; Line 1426
	jmp	SHORT $L87077
$L85651:
; Line 1428
	cmp	eax, 16					; 00000010H
	je	SHORT $LABEL_34$85658
; Line 1429
	cmp	eax, 17					; 00000011H
	jne	SHORT $L85655
; Line 1430
	push	OFFSET FLAT:??_C@_0CN@GOFL@Are?5you?5sure?5you?5want?5to?5identif@ ; `string'
; Line 1431
	jmp	SHORT $L87077
$L85655:
; Line 1433
	cmp	eax, 18					; 00000012H
	jne	SHORT $LABEL_37$85653
$LABEL_34$85658:
; Line 1437
	push	OFFSET FLAT:??_C@_0CI@FBKO@Are?5you?5sure?5you?5want?5to?5buy?5thi@ ; `string'
$L87077:
	push	esi
	call	_strcpy
	pop	ecx
	pop	ecx
$LABEL_37$85653:
; Line 1459
	push	ebx
	push	ebx
	push	esi
	xor	esi, esi
	inc	esi
	xor	ecx, ecx
	push	esi
	push	15					; 0000000fH
	pop	edx
	call	@AddSText@24
; Line 1460
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_03PEHN@Yes?$AA@	; `string'
	push	esi
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1461
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_02JOHD@No?$AA@	; `string'
	push	esi
	push	20					; 00000014H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
	pop	esi
	pop	ebx
; Line 1462
	leave
	ret	0
$L85650:
; Line 1440
	dec	eax
	dec	eax
	je	SHORT $LABEL_34$85658
	dec	eax
	je	SHORT $LABEL_27$85668
	dec	eax
	je	SHORT $L85670
	dec	eax
	dec	eax
	je	SHORT $LABEL_34$85658
	dec	eax
	je	SHORT $LABEL_27$85668
	dec	eax
	jne	SHORT $LABEL_37$85653
; Line 1442
	push	OFFSET FLAT:??_C@_0CN@MGFL@Are?5you?5sure?5you?5want?5to?5recharg@ ; `string'
; Line 1443
	jmp	SHORT $L87077
$L85670:
; Line 1451
	push	OFFSET FLAT:??_C@_0CL@NGLO@Are?5you?5sure?5you?5want?5to?5repair?5@ ; `string'
; Line 1452
	jmp	SHORT $L87077
$LABEL_27$85668:
; Line 1448
	push	OFFSET FLAT:??_C@_0CJ@OEIG@Are?5you?5sure?5you?5want?5to?5sell?5th@ ; `string'
; Line 1449
	jmp	SHORT $L87077
_S_StartConfirm ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@DLEO@Wirt?5the?5Peg?9legged?5boy?$AA@	; `string'
PUBLIC	??_C@_0N@EDHE@Talk?5to?5Wirt?$AA@		; `string'
PUBLIC	??_C@_0M@JLDC@Say?5goodbye?$AA@			; `string'
PUBLIC	??_C@_0BL@KKHD@I?5have?5something?5for?5sale?0?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JKHG@but?5it?5will?5cost?550?5gold?$AA@ ; `string'
PUBLIC	??_C@_0BG@CNLL@just?5to?5take?5a?5look?4?5?$AA@	; `string'
PUBLIC	??_C@_0BD@MAL@What?5have?5you?5got?$DP?$AA@	; `string'
PUBLIC	_S_StartBoy
;	COMDAT ??_C@_0BI@DLEO@Wirt?5the?5Peg?9legged?5boy?$AA@
_DATA	SEGMENT
??_C@_0BI@DLEO@Wirt?5the?5Peg?9legged?5boy?$AA@ DB 'Wirt the Peg-legged b'
	DB	'oy', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@EDHE@Talk?5to?5Wirt?$AA@
_DATA	SEGMENT
??_C@_0N@EDHE@Talk?5to?5Wirt?$AA@ DB 'Talk to Wirt', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@JLDC@Say?5goodbye?$AA@
_DATA	SEGMENT
??_C@_0M@JLDC@Say?5goodbye?$AA@ DB 'Say goodbye', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@KKHD@I?5have?5something?5for?5sale?0?$AA@
_DATA	SEGMENT
??_C@_0BL@KKHD@I?5have?5something?5for?5sale?0?$AA@ DB 'I have something '
	DB	'for sale,', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@JKHG@but?5it?5will?5cost?550?5gold?$AA@
_DATA	SEGMENT
??_C@_0BJ@JKHG@but?5it?5will?5cost?550?5gold?$AA@ DB 'but it will cost 50'
	DB	' gold', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@CNLL@just?5to?5take?5a?5look?4?5?$AA@
_DATA	SEGMENT
??_C@_0BG@CNLL@just?5to?5take?5a?5look?4?5?$AA@ DB 'just to take a look. '
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@MAL@What?5have?5you?5got?$DP?$AA@
_DATA	SEGMENT
??_C@_0BD@MAL@What?5have?5you?5got?$DP?$AA@ DB 'What have you got?', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartBoy
_TEXT	SEGMENT
_S_StartBoy PROC NEAR					; COMDAT
; Line 1466
	push	ebx
	push	esi
; Line 1467
	xor	ebx, ebx
; Line 1469
	xor	esi, esi
	push	ebx
	push	3
	inc	esi
	push	OFFSET FLAT:??_C@_0BI@DLEO@Wirt?5the?5Peg?9legged?5boy?$AA@ ; `string'
	push	esi
	push	2
	pop	edx
	xor	ecx, ecx
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	call	@AddSText@24
; Line 1470
	push	5
	pop	ecx
	call	@AddSLine@4
; Line 1472
	push	esi
	xor	ecx, ecx
	cmp	DWORD PTR _boyitem+8, -1
	push	esi
	push	OFFSET FLAT:??_C@_0N@EDHE@Talk?5to?5Wirt?$AA@ ; `string'
	push	esi
	jne	SHORT $L85678
	push	12					; 0000000cH
	pop	edx
	call	@AddSText@24
; Line 1473
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0M@JLDC@Say?5goodbye?$AA@ ; `string'
	push	esi
	push	18					; 00000012H
; Line 1474
	jmp	SHORT $L87080
$L85678:
; Line 1475
	push	8
	pop	edx
	call	@AddSText@24
; Line 1476
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BL@KKHD@I?5have?5something?5for?5sale?0?$AA@ ; `string'
	push	esi
	push	12					; 0000000cH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1477
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BJ@JKHG@but?5it?5will?5cost?550?5gold?$AA@ ; `string'
	push	esi
	push	14					; 0000000eH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1478
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BG@CNLL@just?5to?5take?5a?5look?4?5?$AA@ ; `string'
	push	esi
	push	16					; 00000010H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1479
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0BD@MAL@What?5have?5you?5got?$DP?$AA@ ; `string'
	push	esi
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1480
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0M@JLDC@Say?5goodbye?$AA@ ; `string'
	push	esi
	push	20					; 00000014H
$L87080:
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
	pop	esi
	pop	ebx
; Line 1482
	ret	0
_S_StartBoy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@CEJK@I?5have?5this?5item?5for?5sale?5?3?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_05MGBF@Leave?$AA@				; `string'
PUBLIC	_S_StartBBoy
;	COMDAT ??_C@_0DF@CEJK@I?5have?5this?5item?5for?5sale?5?3?5?5?5?5?5@
_DATA	SEGMENT
??_C@_0DF@CEJK@I?5have?5this?5item?5for?5sale?5?3?5?5?5?5?5@ DB 'I have t'
	DB	'his item for sale :           Your gold : %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MGBF@Leave?$AA@
_DATA	SEGMENT
??_C@_05MGBF@Leave?$AA@ DB 'Leave', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartBBoy
_TEXT	SEGMENT
_S_StartBBoy PROC NEAR					; COMDAT
; Line 1492
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	esi
	push	edi
	push	DWORD PTR _plr[eax+460]
	xor	ebx, ebx
	mov	esi, OFFSET FLAT:_tempstr
	inc	ebx
	xor	edi, edi
	push	OFFSET FLAT:??_C@_0DF@CEJK@I?5have?5this?5item?5for?5sale?5?3?5?5?5?5?5@ ; `string'
	push	esi
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, edi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1493
	mov	edx, ebx
	xor	ecx, ecx
	push	edi
	push	3
	push	esi
	push	ebx
	call	@AddSText@24
; Line 1494
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1495
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 1498
	mov	al, BYTE PTR _boyitem+60
	xor	esi, esi
	test	al, al
	je	SHORT $L85689
; Line 1499
	mov	esi, ebx
$L85689:
; Line 1500
	cmp	DWORD PTR _boyitem+356, edi
	jne	SHORT $L85690
; Line 1501
	push	2
	pop	esi
$L85690:
; Line 1503
	push	ebx
	push	esi
	test	al, al
	je	SHORT $L85691
	push	OFFSET FLAT:_boyitem+125
; Line 1504
	jmp	SHORT $L87085
$L85691:
; Line 1505
	push	OFFSET FLAT:_boyitem+61
$L87085:
	push	edi
	push	10					; 0000000aH
	pop	edx
	push	20					; 00000014H
	pop	ecx
	call	@AddSText@24
; Line 1507
	mov	eax, DWORD PTR _boyitem+200
	push	10					; 0000000aH
	mov	edx, eax
	pop	ecx
	sar	edx, 1
	add	edx, eax
	call	@AddSTextVal@8
; Line 1508
	push	esi
	push	11					; 0000000bH
	pop	edx
	mov	ecx, OFFSET FLAT:_boyitem
	call	@PrintStoreItem@12
; Line 1509
	push	ebx
	push	edi
	push	OFFSET FLAT:??_C@_05MGBF@Leave?$AA@	; `string'
	push	ebx
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1510
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	jmp	@OffsetSTextY@8
_S_StartBBoy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@PLOI@Healer?8s?5home?$AA@		; `string'
PUBLIC	??_C@_0O@PAFL@Talk?5to?5Pepin?$AA@		; `string'
PUBLIC	??_C@_0BA@MHBC@Receive?5healing?$AA@		; `string'
PUBLIC	??_C@_0BE@CBOH@Leave?5Healer?8s?5home?$AA@	; `string'
PUBLIC	_S_StartHealer
;	COMDAT ??_C@_0O@PLOI@Healer?8s?5home?$AA@
_DATA	SEGMENT
??_C@_0O@PLOI@Healer?8s?5home?$AA@ DB 'Healer''s home', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@PAFL@Talk?5to?5Pepin?$AA@
_DATA	SEGMENT
??_C@_0O@PAFL@Talk?5to?5Pepin?$AA@ DB 'Talk to Pepin', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@MHBC@Receive?5healing?$AA@
_DATA	SEGMENT
??_C@_0BA@MHBC@Receive?5healing?$AA@ DB 'Receive healing', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@CBOH@Leave?5Healer?8s?5home?$AA@
_DATA	SEGMENT
??_C@_0BE@CBOH@Leave?5Healer?8s?5home?$AA@ DB 'Leave Healer''s home', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartHealer
_TEXT	SEGMENT
_S_StartHealer PROC NEAR				; COMDAT
; Line 1516
	push	ebx
	push	esi
; Line 1517
	xor	ebx, ebx
; Line 1519
	xor	esi, esi
	push	ebx
	push	3
	inc	esi
	push	OFFSET FLAT:??_C@_0P@CKGA@Welcome?5to?5the?$AA@ ; `string'
	push	esi
	mov	edx, esi
	xor	ecx, ecx
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	call	@AddSText@24
; Line 1520
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0O@PLOI@Healer?8s?5home?$AA@ ; `string'
	push	esi
	push	3
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1521
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@ ; `string'
	push	esi
	push	9
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1522
	push	esi
	push	esi
	push	OFFSET FLAT:??_C@_0O@PAFL@Talk?5to?5Pepin?$AA@ ; `string'
	push	esi
	push	12					; 0000000cH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1523
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0BA@MHBC@Receive?5healing?$AA@ ; `string'
	push	esi
	push	14					; 0000000eH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1524
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_09OKAN@Buy?5items?$AA@ ; `string'
	push	esi
	push	16					; 00000010H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1525
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0BE@CBOH@Leave?5Healer?8s?5home?$AA@ ; `string'
	push	esi
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1526
	push	5
	pop	ecx
	call	@AddSLine@4
	pop	esi
; Line 1527
	mov	DWORD PTR _storenumh, 20		; 00000014H
	pop	ebx
; Line 1528
	ret	0
_S_StartHealer ENDP
_TEXT	ENDS
PUBLIC	@S_ScrollHBuy@4
; Function compile flags: /Ogsy
;	COMDAT @S_ScrollHBuy@4
_TEXT	SEGMENT
_iclr$ = -4
@S_ScrollHBuy@4 PROC NEAR				; COMDAT
; _idx$ = ecx
; Line 1534
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 1538
	push	21					; 00000015H
	mov	esi, ecx
	pop	edx
	push	5
	pop	edi
	mov	ecx, edi
	call	@ClearSText@8
	imul	esi, 368				; 00000170H
; Line 1539
	mov	DWORD PTR _stextup, edi
	add	esi, OFFSET FLAT:_healitem+356
$L85704:
; Line 1541
	cmp	DWORD PTR [esi-348], -1
	je	SHORT $L85705
; Line 1542
	and	BYTE PTR _iclr$[ebp], 0
; Line 1543
	cmp	DWORD PTR [esi], 0
	jne	SHORT $L85708
; Line 1544
	mov	BYTE PTR _iclr$[ebp], 2
$L85708:
; Line 1545
	push	1
	lea	eax, DWORD PTR [esi-295]
	push	DWORD PTR _iclr$[ebp]
	mov	edx, edi
	push	eax
	push	0
	push	20					; 00000014H
	pop	ecx
	call	@AddSText@24
; Line 1546
	mov	edx, DWORD PTR [esi-156]
	mov	ecx, edi
	call	@AddSTextVal@8
; Line 1547
	lea	edx, DWORD PTR [edi+1]
	lea	ecx, DWORD PTR [esi-356]
	push	DWORD PTR _iclr$[ebp]
	call	@PrintStoreItem@12
; Line 1548
	mov	DWORD PTR _stextdown, edi
; Line 1549
	add	esi, 368				; 00000170H
$L85705:
	add	edi, 4
	cmp	edi, 20					; 00000014H
	jl	SHORT $L85704
; Line 1553
	mov	eax, DWORD PTR _stextsel
	pop	edi
	mov	ecx, eax
	pop	esi
	imul	ecx, 156				; 0000009cH
	cmp	DWORD PTR _stext[ecx+148], 0
	jne	SHORT $L85709
	cmp	eax, 22					; 00000016H
	je	SHORT $L85709
; Line 1554
	mov	eax, DWORD PTR _stextdown
	mov	DWORD PTR _stextsel, eax
$L85709:
; Line 1555
	leave
	ret	0
@S_ScrollHBuy@4 ENDP
_TEXT	ENDS
PUBLIC	_S_StartHBuy
; Function compile flags: /Ogsy
;	COMDAT _S_StartHBuy
_TEXT	SEGMENT
_S_StartHBuy PROC NEAR					; COMDAT
; Line 1566
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	esi
	push	edi
; Line 1570
	push	DWORD PTR _plr[eax+460]
	xor	ebx, ebx
	mov	esi, OFFSET FLAT:_tempstr
	inc	ebx
	xor	edi, edi
	push	OFFSET FLAT:??_C@_0DH@JMAP@I?5have?5these?5items?5for?5sale?5?3?5?5?5@ ; `string'
	push	esi
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	mov	DWORD PTR _stextsval, edi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1571
	mov	edx, ebx
	xor	ecx, ecx
	push	edi
	push	3
	push	esi
	push	ebx
	call	@AddSText@24
; Line 1572
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1573
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 1574
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollHBuy@4
; Line 1575
	push	edi
	push	edi
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	ebx
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1576
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	call	@OffsetSTextY@8
; Line 1577
	xor	eax, eax
; Line 1579
	cmp	DWORD PTR _healitem+8, -1
	mov	DWORD PTR _storenumh, edi
	je	SHORT $L85714
; Line 1580
	mov	ecx, OFFSET FLAT:_healitem+8
$L85715:
; Line 1582
	add	ecx, 368				; 00000170H
; Line 1583
	inc	eax
; Line 1584
	cmp	DWORD PTR [ecx], -1
	jne	SHORT $L85715
; Line 1585
	mov	DWORD PTR _storenumh, eax
$L85714:
; Line 1587
	add	eax, -4					; fffffffcH
; Line 1588
	cmp	eax, edi
	mov	DWORD PTR _stextsmax, eax
	jge	SHORT $L85718
; Line 1589
	mov	DWORD PTR _stextsmax, edi
$L85718:
	pop	edi
	pop	esi
	pop	ebx
; Line 1590
	ret	0
_S_StartHBuy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@GPOK@The?5Town?5Elder?$AA@		; `string'
PUBLIC	??_C@_0N@FPEM@Talk?5to?5Cain?$AA@		; `string'
PUBLIC	??_C@_0BB@PCIP@Identify?5an?5item?$AA@		; `string'
PUBLIC	_S_StartStory
;	COMDAT ??_C@_0P@GPOK@The?5Town?5Elder?$AA@
_DATA	SEGMENT
??_C@_0P@GPOK@The?5Town?5Elder?$AA@ DB 'The Town Elder', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@FPEM@Talk?5to?5Cain?$AA@
_DATA	SEGMENT
??_C@_0N@FPEM@Talk?5to?5Cain?$AA@ DB 'Talk to Cain', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@PCIP@Identify?5an?5item?$AA@
_DATA	SEGMENT
??_C@_0BB@PCIP@Identify?5an?5item?$AA@ DB 'Identify an item', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartStory
_TEXT	SEGMENT
_S_StartStory PROC NEAR					; COMDAT
; Line 1597
	push	ebx
	push	esi
; Line 1598
	xor	ebx, ebx
; Line 1600
	xor	esi, esi
	push	ebx
	push	3
	inc	esi
	push	OFFSET FLAT:??_C@_0P@GPOK@The?5Town?5Elder?$AA@ ; `string'
	push	esi
	push	2
	pop	edx
	xor	ecx, ecx
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	call	@AddSText@24
; Line 1601
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@ ; `string'
	push	esi
	push	9
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1602
	push	esi
	push	esi
	push	OFFSET FLAT:??_C@_0N@FPEM@Talk?5to?5Cain?$AA@ ; `string'
	push	esi
	push	12					; 0000000cH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1603
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0BB@PCIP@Identify?5an?5item?$AA@ ; `string'
	push	esi
	push	14					; 0000000eH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1604
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0M@JLDC@Say?5goodbye?$AA@ ; `string'
	push	esi
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1605
	push	5
	pop	ecx
	pop	esi
	pop	ebx
	jmp	@AddSLine@4
_S_StartStory ENDP
_TEXT	ENDS
PUBLIC	@IdItemOk@4
; Function compile flags: /Ogsy
;	COMDAT @IdItemOk@4
_TEXT	SEGMENT
@IdItemOk@4 PROC NEAR					; COMDAT
; _i$ = ecx
; Line 1614
	xor	eax, eax
; Line 1615
	cmp	DWORD PTR [ecx+8], -1
	je	SHORT $L85728
; Line 1616
	cmp	BYTE PTR [ecx+60], al
	je	SHORT $L85728
; Line 1617
	cmp	DWORD PTR [ecx+56], eax
	sete	al
$L85728:
; Line 1620
	ret	0
@IdItemOk@4 ENDP
_TEXT	ENDS
PUBLIC	@AddStoreHoldId@372
; Function compile flags: /Ogsy
;	COMDAT @AddStoreHoldId@372
_TEXT	SEGMENT
_itm$ = 8
@AddStoreHoldId@372 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 1624
	mov	edx, DWORD PTR _storenumh
	push	ebx
	mov	eax, edx
	push	esi
	imul	eax, 368				; 00000170H
	push	edi
	mov	ebx, ecx
	lea	edi, DWORD PTR _storehold[eax]
	push	92					; 0000005cH
	mov	ecx, edi
; Line 1627
	mov	BYTE PTR _storehidx[edx], bl
	sub	ecx, eax
	sub	ecx, OFFSET FLAT:_storehold
	inc	edx
	mov	DWORD PTR _storenumh, edx
	lea	esi, DWORD PTR _itm$[esp+ecx+12]
	pop	ecx
	rep movsd
	push	100					; 00000064H
	pop	ecx
	pop	edi
	mov	DWORD PTR _storehold[eax+196], ecx
	pop	esi
	mov	DWORD PTR _storehold[eax+200], ecx
	pop	ebx
; Line 1628
	ret	368					; 00000170H
@AddStoreHoldId@372 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@CHOJ@Identify?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0DI@GPPC@You?5have?5nothing?5to?5identify?4?5?5?5@ ; `string'
PUBLIC	_S_StartSIdentify
;	COMDAT ??_C@_0CP@CHOJ@Identify?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@
; File Source/../defs.h
_DATA	SEGMENT
??_C@_0CP@CHOJ@Identify?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'Ide'
	DB	'ntify which item?            Your gold : %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DI@GPPC@You?5have?5nothing?5to?5identify?4?5?5?5@
_DATA	SEGMENT
??_C@_0DI@GPPC@You?5have?5nothing?5to?5identify?4?5?5?5@ DB 'You have not'
	DB	'hing to identify.            Your gold : %i', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartSIdentify
_TEXT	SEGMENT
_itm$ = -380
_idok$ = -1
_i$ = -8
_S_StartSIdentify PROC NEAR				; COMDAT
; File Source/stores.cpp
; Line 1633
	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
; Line 1638
	and	BYTE PTR _idok$[ebp], 0
; Line 1639
	and	DWORD PTR _storenumh, 0
	push	ebx
	push	esi
	push	edi
; Line 1640
	mov	BYTE PTR _stextsize, 1
	mov	eax, OFFSET FLAT:_storehold+8
$L85739:
; Line 1643
	or	DWORD PTR [eax], -1
	add	eax, 368				; 00000170H
	cmp	eax, OFFSET FLAT:_storehold+17672
	jl	SHORT $L85739
; Line 1645
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+892]
	mov	ecx, esi
	call	@IdItemOk@4
	push	92					; 0000005cH
	test	al, al
	pop	ebx
	je	SHORT $L85742
; Line 1647
	mov	ecx, ebx
	lea	edi, DWORD PTR _itm$[ebp]
	rep movsd
; Line 1648
	sub	esp, 368				; 00000170H
	mov	ecx, ebx
	lea	esi, DWORD PTR _itm$[ebp]
	mov	edi, esp
	rep movsd
	or	ecx, -1
	mov	BYTE PTR _idok$[ebp], 1
	call	@AddStoreHoldId@372
$L85742:
; Line 1650
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+3100]
	mov	ecx, esi
	call	@IdItemOk@4
	test	al, al
	je	SHORT $L85744
; Line 1652
	mov	ecx, ebx
	lea	edi, DWORD PTR _itm$[ebp]
	rep movsd
; Line 1653
	sub	esp, 368				; 00000170H
	mov	ecx, ebx
	lea	esi, DWORD PTR _itm$[ebp]
	mov	edi, esp
	rep movsd
	push	-2					; fffffffeH
	mov	BYTE PTR _idok$[ebp], 1
	pop	ecx
	call	@AddStoreHoldId@372
$L85744:
; Line 1655
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+2364]
	mov	ecx, esi
	call	@IdItemOk@4
	test	al, al
	je	SHORT $L85746
; Line 1657
	mov	ecx, ebx
	lea	edi, DWORD PTR _itm$[ebp]
	rep movsd
; Line 1658
	sub	esp, 368				; 00000170H
	mov	ecx, ebx
	lea	esi, DWORD PTR _itm$[ebp]
	mov	edi, esp
	rep movsd
	push	-3					; fffffffdH
	mov	BYTE PTR _idok$[ebp], 1
	pop	ecx
	call	@AddStoreHoldId@372
$L85746:
; Line 1660
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+2732]
	mov	ecx, esi
	call	@IdItemOk@4
	test	al, al
	je	SHORT $L85748
; Line 1662
	mov	ecx, ebx
	lea	edi, DWORD PTR _itm$[ebp]
	rep movsd
; Line 1663
	sub	esp, 368				; 00000170H
	mov	ecx, ebx
	lea	esi, DWORD PTR _itm$[ebp]
	mov	edi, esp
	rep movsd
	push	-4					; fffffffcH
	mov	BYTE PTR _idok$[ebp], 1
	pop	ecx
	call	@AddStoreHoldId@372
$L85748:
; Line 1665
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+1260]
	mov	ecx, esi
	call	@IdItemOk@4
	test	al, al
	je	SHORT $L85750
; Line 1667
	mov	ecx, ebx
	lea	edi, DWORD PTR _itm$[ebp]
	rep movsd
; Line 1668
	sub	esp, 368				; 00000170H
	mov	ecx, ebx
	lea	esi, DWORD PTR _itm$[ebp]
	mov	edi, esp
	rep movsd
	push	-5					; fffffffbH
	mov	BYTE PTR _idok$[ebp], 1
	pop	ecx
	call	@AddStoreHoldId@372
$L85750:
; Line 1670
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+1628]
	mov	ecx, esi
	call	@IdItemOk@4
	test	al, al
	je	SHORT $L85752
; Line 1672
	mov	ecx, ebx
	lea	edi, DWORD PTR _itm$[ebp]
	rep movsd
; Line 1673
	sub	esp, 368				; 00000170H
	mov	ecx, ebx
	lea	esi, DWORD PTR _itm$[ebp]
	mov	edi, esp
	rep movsd
	push	-6					; fffffffaH
	mov	BYTE PTR _idok$[ebp], 1
	pop	ecx
	call	@AddStoreHoldId@372
$L85752:
; Line 1675
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	lea	esi, DWORD PTR _plr[eax+1996]
	mov	ecx, esi
	call	@IdItemOk@4
	test	al, al
	je	SHORT $L85754
; Line 1677
	mov	ecx, ebx
	lea	edi, DWORD PTR _itm$[ebp]
	rep movsd
; Line 1678
	sub	esp, 368				; 00000170H
	mov	ecx, ebx
	lea	esi, DWORD PTR _itm$[ebp]
	mov	edi, esp
	rep movsd
	push	-7					; fffffff9H
	mov	BYTE PTR _idok$[ebp], 1
	pop	ecx
	call	@AddStoreHoldId@372
$L85754:
; Line 1681
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	mov	eax, ecx
	mov	DWORD PTR _i$[ebp], edx
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+18188], edx
	jle	SHORT $L85758
	mov	DWORD PTR -12+[ebp], edx
$L85756:
; Line 1682
	mov	ecx, DWORD PTR -12+[ebp]
	lea	esi, DWORD PTR _plr[ecx+eax+3468]
	mov	ecx, esi
	call	@IdItemOk@4
	test	al, al
	je	SHORT $L85757
; Line 1684
	mov	ecx, ebx
	lea	edi, DWORD PTR _itm$[ebp]
	rep movsd
; Line 1685
	sub	esp, 368				; 00000170H
	mov	ecx, ebx
	lea	esi, DWORD PTR _itm$[ebp]
	mov	edi, esp
	rep movsd
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _idok$[ebp], 1
	call	@AddStoreHoldId@372
$L85757:
	mov	ecx, DWORD PTR _myplr
	inc	DWORD PTR _i$[ebp]
	mov	eax, ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	eax, 21720				; 000054d8H
	add	DWORD PTR -12+[ebp], 368		; 00000170H
	cmp	edx, DWORD PTR _plr[eax+18188]
	jl	SHORT $L85756
; Line 1681
	xor	edx, edx
$L85758:
; Line 1689
	cmp	BYTE PTR _idok$[ebp], 0
; Line 1693
	mov	esi, OFFSET FLAT:_tempstr
	je	SHORT $L85761
	mov	eax, ecx
	xor	edi, edi
	imul	eax, 21720				; 000054d8H
	inc	edi
	mov	DWORD PTR _stextsval, edx
	push	DWORD PTR _plr[eax+460]
	mov	ecx, DWORD PTR _plr[eax+18188]
	mov	DWORD PTR _stextscrl, edi
	mov	DWORD PTR _stextsmax, ecx
	push	OFFSET FLAT:??_C@_0CP@CHOJ@Identify?5which?5item?$DP?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1694
	mov	edx, edi
	xor	ecx, ecx
	push	0
	push	3
	push	esi
	push	edi
	call	@AddSText@24
; Line 1695
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1696
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
; Line 1697
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSSell@4
; Line 1698
	jmp	SHORT $L85763
$L85761:
; Line 1700
	imul	ecx, 21720				; 000054d8H
	mov	DWORD PTR _stextscrl, edx
	push	DWORD PTR _plr[ecx+460]
	push	OFFSET FLAT:??_C@_0DI@GPPC@You?5have?5nothing?5to?5identify?4?5?5?5@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1701
	xor	edx, edx
	inc	edx
	xor	ecx, ecx
	push	0
	push	3
	push	esi
	push	edx
	call	@AddSText@24
; Line 1702
	push	3
	pop	ecx
	call	@AddSLine@4
; Line 1703
	push	21					; 00000015H
	pop	ecx
	call	@AddSLine@4
	xor	edi, edi
	inc	edi
$L85763:
; Line 1706
	push	edi
	push	0
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	edi
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1707
	push	6
	pop	edx
	push	22					; 00000016H
	pop	ecx
	call	@OffsetSTextY@8
; Line 1708
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
_S_StartSIdentify ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@KKHN@This?5item?5is?3?$AA@		; `string'
PUBLIC	??_C@_04GCNB@Done?$AA@				; `string'
PUBLIC	_S_StartIdShow
;	COMDAT ??_C@_0O@KKHN@This?5item?5is?3?$AA@
_DATA	SEGMENT
??_C@_0O@KKHN@This?5item?5is?3?$AA@ DB 'This item is:', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GCNB@Done?$AA@
_DATA	SEGMENT
??_C@_04GCNB@Done?$AA@ DB 'Done', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartIdShow
_TEXT	SEGMENT
_iclr$ = -4
_S_StartIdShow PROC NEAR				; COMDAT
; Line 1715
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1718
	mov	cl, BYTE PTR _stextshold
	push	ebx
	call	@StartStore@4
; Line 1720
	push	23					; 00000017H
	xor	ebx, ebx
	pop	edx
	mov	DWORD PTR _stextscrl, ebx
	push	5
	pop	ecx
	call	@ClearSText@8
; Line 1723
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _iclr$[ebp], bl
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21236], bl
	je	SHORT $L85767
; Line 1724
	mov	BYTE PTR _iclr$[ebp], 1
$L85767:
; Line 1725
	cmp	DWORD PTR _plr[eax+21532], ebx
	jne	SHORT $L85768
; Line 1726
	mov	BYTE PTR _iclr$[ebp], 2
$L85768:
; Line 1728
	push	ebx
	push	ebx
	push	OFFSET FLAT:??_C@_0O@KKHN@This?5item?5is?3?$AA@ ; `string'
	push	1
	push	7
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1729
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _iclr$[ebp]
	add	eax, OFFSET FLAT:_plr+21301
	push	eax
	push	ebx
	push	11					; 0000000bH
	pop	edx
	push	20					; 00000014H
	pop	ecx
	call	@AddSText@24
; Line 1730
	mov	ecx, DWORD PTR _myplr
	push	DWORD PTR _iclr$[ebp]
	imul	ecx, 21720				; 000054d8H
	push	12					; 0000000cH
	add	ecx, OFFSET FLAT:_plr+21176
	pop	edx
	call	@PrintStoreItem@12
; Line 1731
	push	1
	push	ebx
	push	OFFSET FLAT:??_C@_04GCNB@Done?$AA@	; `string'
	push	1
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
	pop	ebx
; Line 1732
	leave
	ret	0
_S_StartIdShow ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@FKDC@Talk?5to?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_06LKCA@Gossip?$AA@			; `string'
PUBLIC	_S_StartTalk
EXTRN	_quests:BYTE
EXTRN	_questlist:BYTE
EXTRN	_Qtalklist:BYTE
;	COMDAT ??_C@_0L@FKDC@Talk?5to?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0L@FKDC@Talk?5to?5?$CFs?$AA@ DB 'Talk to %s', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06LKCA@Gossip?$AA@
_DATA	SEGMENT
??_C@_06LKCA@Gossip?$AA@ DB 'Gossip', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartTalk
_TEXT	SEGMENT
_v0$ = -4
_v6$ = -8
_v8$ = -12
_S_StartTalk PROC NEAR					; COMDAT
; Line 1736
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 1750
	mov	eax, DWORD PTR _talker
	push	ebx
	push	esi
	and	BYTE PTR _stextsize, 0
	push	edi
	mov	esi, OFFSET FLAT:_tempstr
	push	DWORD PTR _talkname[eax*4]
	xor	edi, edi
	mov	DWORD PTR _stextscrl, edi
	push	OFFSET FLAT:??_C@_0L@FKDC@Talk?5to?5?$CFs?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1751
	xor	ecx, ecx
	push	edi
	push	3
	push	esi
	xor	esi, esi
	inc	esi
	push	esi
	push	2
	pop	edx
	call	@AddSText@24
; Line 1752
	push	5
	pop	ecx
	call	@AddSLine@4
; Line 1753
	mov	eax, OFFSET FLAT:_quests+20
; Line 1754
	xor	edx, edx
	mov	DWORD PTR _v0$[ebp], eax
; Line 1755
	xor	ecx, ecx
$L85783:
; Line 1758
	cmp	BYTE PTR [eax-18], 2
	jne	SHORT $L85788
	mov	ebx, DWORD PTR _talker
	shl	ebx, 4
	add	ebx, ecx
	cmp	DWORD PTR _Qtalklist[ebx*4], -1
	je	SHORT $L85788
	cmp	DWORD PTR [eax], edi
	je	SHORT $L85788
; Line 1759
	inc	edx
$L85788:
; Line 1760
	add	eax, 24					; 00000018H
; Line 1761
	inc	ecx
; Line 1762
	cmp	eax, OFFSET FLAT:_quests+404
	jl	SHORT $L85783
; Line 1763
	cmp	edx, 6
	jg	SHORT $L85791
; Line 1764
	push	15					; 0000000fH
; Line 1765
	mov	DWORD PTR _v8$[ebp], 2
; Line 1766
	jmp	SHORT $L87221
$L85791:
; Line 1767
	sar	edx, 1
; Line 1768
	push	14					; 0000000eH
; Line 1769
	mov	DWORD PTR _v8$[ebp], esi
$L87221:
	pop	eax
; Line 1773
	mov	DWORD PTR _v6$[ebp], edi
	sub	eax, edx
	mov	esi, OFFSET FLAT:_questlist+16
	mov	ebx, eax
; Line 1774
	lea	edi, DWORD PTR [eax-2]
$L85793:
; Line 1776
	mov	eax, DWORD PTR _v0$[ebp]
	cmp	BYTE PTR [eax-18], 2
	jne	SHORT $L85798
	mov	ecx, DWORD PTR _talker
	shl	ecx, 4
	add	ecx, DWORD PTR _v6$[ebp]
	cmp	DWORD PTR _Qtalklist[ecx*4], -1
	je	SHORT $L85798
	cmp	DWORD PTR [eax], 0
	je	SHORT $L85798
; Line 1777
	push	1
	push	0
	push	DWORD PTR [esi]
	mov	edx, ebx
	xor	ecx, ecx
	push	1
	call	@AddSText@24
; Line 1778
	add	ebx, DWORD PTR _v8$[ebp]
$L85798:
; Line 1780
	add	DWORD PTR _v0$[ebp], 24			; 00000018H
; Line 1781
	inc	DWORD PTR _v6$[ebp]
; Line 1782
	add	esi, 20					; 00000014H
; Line 1783
	cmp	DWORD PTR _v0$[ebp], OFFSET FLAT:_quests+404
	jl	SHORT $L85793
; Line 1784
	xor	esi, esi
	mov	edx, edi
	inc	esi
	xor	ecx, ecx
	push	esi
	push	esi
	push	OFFSET FLAT:??_C@_06LKCA@Gossip?$AA@	; `string'
	push	esi
	call	@AddSText@24
; Line 1785
	push	esi
	push	0
	push	OFFSET FLAT:??_C@_04JDGB@Back?$AA@	; `string'
	push	esi
	push	22					; 00000016H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
	pop	edi
	pop	esi
	pop	ebx
; Line 1786
	leave
	ret	0
_S_StartTalk ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@PNPJ@Rising?5Sun?$AA@			; `string'
PUBLIC	??_C@_0O@FPLE@Talk?5to?5Ogden?$AA@		; `string'
PUBLIC	??_C@_0BB@LOPC@Leave?5the?5tavern?$AA@		; `string'
PUBLIC	_S_StartTavern
;	COMDAT ??_C@_0L@PNPJ@Rising?5Sun?$AA@
_DATA	SEGMENT
??_C@_0L@PNPJ@Rising?5Sun?$AA@ DB 'Rising Sun', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@FPLE@Talk?5to?5Ogden?$AA@
_DATA	SEGMENT
??_C@_0O@FPLE@Talk?5to?5Ogden?$AA@ DB 'Talk to Ogden', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LOPC@Leave?5the?5tavern?$AA@
_DATA	SEGMENT
??_C@_0BB@LOPC@Leave?5the?5tavern?$AA@ DB 'Leave the tavern', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartTavern
_TEXT	SEGMENT
_S_StartTavern PROC NEAR				; COMDAT
; Line 1792
	push	ebx
	push	esi
; Line 1793
	xor	ebx, ebx
; Line 1795
	xor	esi, esi
	push	ebx
	push	3
	inc	esi
	push	OFFSET FLAT:??_C@_0P@CKGA@Welcome?5to?5the?$AA@ ; `string'
	push	esi
	mov	edx, esi
	xor	ecx, ecx
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	call	@AddSText@24
; Line 1796
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0L@PNPJ@Rising?5Sun?$AA@ ; `string'
	push	esi
	push	3
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1797
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@ ; `string'
	push	esi
	push	9
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1798
	push	esi
	push	esi
	push	OFFSET FLAT:??_C@_0O@FPLE@Talk?5to?5Ogden?$AA@ ; `string'
	push	esi
	push	12					; 0000000cH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1799
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0BB@LOPC@Leave?5the?5tavern?$AA@ ; `string'
	push	esi
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1800
	push	5
	pop	ecx
	call	@AddSLine@4
	pop	esi
; Line 1801
	mov	DWORD PTR _storenumh, 20		; 00000014H
	pop	ebx
; Line 1802
	ret	0
_S_StartTavern ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@PMED@Talk?5to?5Gillian?$AA@		; `string'
PUBLIC	_S_StartBarMaid
;	COMDAT ??_C@_0BA@PMED@Talk?5to?5Gillian?$AA@
_DATA	SEGMENT
??_C@_0BA@PMED@Talk?5to?5Gillian?$AA@ DB 'Talk to Gillian', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartBarMaid
_TEXT	SEGMENT
_S_StartBarMaid PROC NEAR				; COMDAT
; Line 1808
	push	ebx
	push	esi
; Line 1809
	xor	ebx, ebx
; Line 1811
	xor	esi, esi
	push	ebx
	push	3
	inc	esi
	push	OFFSET FLAT:??_C@_07HFBJ@Gillian?$AA@	; `string'
	push	esi
	push	2
	pop	edx
	xor	ecx, ecx
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	call	@AddSText@24
; Line 1812
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@ ; `string'
	push	esi
	push	9
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1813
	push	esi
	push	esi
	push	OFFSET FLAT:??_C@_0BA@PMED@Talk?5to?5Gillian?$AA@ ; `string'
	push	esi
	push	12					; 0000000cH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1814
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0M@JLDC@Say?5goodbye?$AA@ ; `string'
	push	esi
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1815
	push	5
	pop	ecx
	call	@AddSLine@4
	pop	esi
; Line 1816
	mov	DWORD PTR _storenumh, 20		; 00000014H
	pop	ebx
; Line 1817
	ret	0
_S_StartBarMaid ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@FOH@Farnham?5the?5Drunk?$AA@		; `string'
PUBLIC	??_C@_0BA@FLHM@Talk?5to?5Farnham?$AA@		; `string'
PUBLIC	??_C@_0M@EJIG@Say?5Goodbye?$AA@			; `string'
PUBLIC	_S_StartDrunk
;	COMDAT ??_C@_0BC@FOH@Farnham?5the?5Drunk?$AA@
_DATA	SEGMENT
??_C@_0BC@FOH@Farnham?5the?5Drunk?$AA@ DB 'Farnham the Drunk', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FLHM@Talk?5to?5Farnham?$AA@
_DATA	SEGMENT
??_C@_0BA@FLHM@Talk?5to?5Farnham?$AA@ DB 'Talk to Farnham', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@EJIG@Say?5Goodbye?$AA@
_DATA	SEGMENT
??_C@_0M@EJIG@Say?5Goodbye?$AA@ DB 'Say Goodbye', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _S_StartDrunk
_TEXT	SEGMENT
_S_StartDrunk PROC NEAR					; COMDAT
; Line 1823
	push	ebx
	push	esi
; Line 1824
	xor	ebx, ebx
; Line 1826
	xor	esi, esi
	push	ebx
	push	3
	inc	esi
	push	OFFSET FLAT:??_C@_0BC@FOH@Farnham?5the?5Drunk?$AA@ ; `string'
	push	esi
	push	2
	pop	edx
	xor	ecx, ecx
	mov	BYTE PTR _stextsize, bl
	mov	DWORD PTR _stextscrl, ebx
	call	@AddSText@24
; Line 1827
	push	ebx
	push	3
	push	OFFSET FLAT:??_C@_0BD@NJCG@Would?5you?5like?5to?3?$AA@ ; `string'
	push	esi
	push	9
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1828
	push	esi
	push	esi
	push	OFFSET FLAT:??_C@_0BA@FLHM@Talk?5to?5Farnham?$AA@ ; `string'
	push	esi
	push	12					; 0000000cH
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1829
	push	esi
	push	ebx
	push	OFFSET FLAT:??_C@_0M@EJIG@Say?5Goodbye?$AA@ ; `string'
	push	esi
	push	18					; 00000012H
	xor	ecx, ecx
	pop	edx
	call	@AddSText@24
; Line 1830
	push	5
	pop	ecx
	call	@AddSLine@4
	pop	esi
; Line 1831
	mov	DWORD PTR _storenumh, 20		; 00000014H
	pop	ebx
; Line 1832
	ret	0
_S_StartDrunk ENDP
_TEXT	ENDS
PUBLIC	_ReleaseStoreBtn
EXTRN	_questlog:DWORD
EXTRN	_invflag:DWORD
EXTRN	_dropGoldFlag:DWORD
EXTRN	_sbookflag:DWORD
EXTRN	_chrflag:DWORD
; Function compile flags: /Ogsy
;	COMDAT @StartStore@4
_TEXT	SEGMENT
@StartStore@4 PROC NEAR					; COMDAT
; _s$ = cl
; Line 1838
	push	ebx
	push	esi
	mov	bl, cl
; Line 1842
	xor	esi, esi
$L85817:
; Line 1848
	push	24					; 00000018H
	xor	ecx, ecx
	pop	edx
	mov	DWORD PTR _sbookflag, esi
	mov	DWORD PTR _invflag, esi
	mov	DWORD PTR _chrflag, esi
	mov	DWORD PTR _questlog, esi
	mov	DWORD PTR _dropGoldFlag, esi
	call	@ClearSText@8
; Line 1849
	call	_ReleaseStoreBtn
; Line 1850
	movsx	eax, bl
	dec	eax
	cmp	eax, 22					; 00000016H
	ja	$L85851
	jmp	DWORD PTR $L87242[eax*4]
$L85824:
; Line 1852
	call	_S_StartSmith
; Line 1853
	jmp	$L85851
$L85825:
; Line 1855
	cmp	DWORD PTR _storenumh, esi
	jle	$L85851
; Line 1856
	call	_S_StartSBuy
; Line 1857
	jmp	$L85851
$L85827:
; Line 1859
	call	_S_StartSSell
; Line 1860
	jmp	$L85851
$L85828:
; Line 1862
	call	_S_StartSRepair
; Line 1863
	jmp	$L85851
$L85829:
; Line 1865
	call	_S_StartWitch
; Line 1866
	jmp	$L85851
$L85830:
; Line 1868
	cmp	DWORD PTR _storenumh, esi
	jle	$L85851
; Line 1869
	call	_S_StartWBuy
; Line 1870
	jmp	$L85851
$L85832:
; Line 1872
	call	_S_StartWSell
; Line 1873
	jmp	SHORT $L85851
$L85833:
; Line 1875
	call	_S_StartWRecharge
; Line 1876
	jmp	SHORT $L85851
$L85834:
; Line 1878
	call	_S_StartNoMoney
; Line 1879
	jmp	SHORT $L85851
$L85835:
; Line 1881
	call	_S_StartNoRoom
; Line 1882
	jmp	SHORT $L85851
$L85836:
; Line 1884
	call	_S_StartConfirm
; Line 1885
	jmp	SHORT $L85851
$L85837:
; Line 1887
	call	_S_StartBoy
; Line 1888
	jmp	SHORT $L85851
$L85838:
; Line 1890
	call	_S_StartBBoy
; Line 1891
	jmp	SHORT $L85851
$L85839:
; Line 1893
	call	_S_StartHealer
; Line 1894
	jmp	SHORT $L85851
$L85840:
; Line 1896
	call	_S_StartStory
; Line 1897
	jmp	SHORT $L85851
$L85841:
; Line 1899
	cmp	DWORD PTR _storenumh, esi
	jle	SHORT $L85851
; Line 1900
	call	_S_StartHBuy
; Line 1901
	jmp	SHORT $L85851
$L85843:
; Line 1903
	call	_S_StartSIdentify
; Line 1904
	jmp	SHORT $L85851
$L85844:
; Line 1906
	call	_S_StartSPBuy
	test	al, al
	jne	SHORT $L85851
$L87238:
	pop	esi
	pop	ebx
; Line 1938
	ret	0
$L85846:
; Line 1910
	call	_S_StartTalk
; Line 1911
	jmp	SHORT $L85851
$L85847:
; Line 1913
	call	_S_StartIdShow
; Line 1914
	jmp	SHORT $L85851
$L85848:
; Line 1916
	call	_S_StartTavern
; Line 1917
	jmp	SHORT $L85851
$L85849:
; Line 1919
	call	_S_StartDrunk
; Line 1920
	jmp	SHORT $L85851
$L85850:
; Line 1922
	call	_S_StartBarMaid
$L85851:
; Line 1928
	xor	ecx, ecx
	mov	eax, OFFSET FLAT:_stext+148
$L85852:
; Line 1929
	cmp	DWORD PTR [eax], esi
	jne	SHORT $L87237
	add	eax, 156				; 0000009cH
	inc	ecx
	cmp	eax, OFFSET FLAT:_stext+3892
	jl	SHORT $L85852
$L87237:
; Line 1933
	cmp	ecx, 24					; 00000018H
	jne	SHORT $L87233
	or	DWORD PTR _stextsel, -1
	jmp	SHORT $L87234
$L87233:
	mov	DWORD PTR _stextsel, ecx
$L87234:
; Line 1935
	cmp	bl, 2
	mov	BYTE PTR _stextflag, bl
	jne	SHORT $L87238
	cmp	DWORD PTR _storenumh, esi
	jne	SHORT $L87238
; Line 1842
	dec	bl
	jmp	$L85817
$L87242:
; Line 1938
	DD	$L85824
	DD	$L85825
	DD	$L85827
	DD	$L85828
	DD	$L85829
	DD	$L85830
	DD	$L85832
	DD	$L85833
	DD	$L85834
	DD	$L85835
	DD	$L85836
	DD	$L85837
	DD	$L85838
	DD	$L85839
	DD	$L85840
	DD	$L85841
	DD	$L85843
	DD	$L85844
	DD	$L85846
	DD	$L85847
	DD	$L85848
	DD	$L85849
	DD	$L85850
@StartStore@4 ENDP
_TEXT	ENDS
PUBLIC	_DrawSText
EXTRN	_DrawQTextBack:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DrawSText
_TEXT	SEGMENT
_DrawSText PROC NEAR					; COMDAT
; Line 1950
	cmp	BYTE PTR _stextsize, 0
	je	SHORT $L85860
; Line 1951
	call	_DrawQTextBack
; Line 1952
	jmp	SHORT $L85861
$L85860:
; Line 1953
	call	_DrawSTextBack
$L85861:
; Line 1954
	cmp	DWORD PTR _stextscrl, 0
	je	SHORT $LABEL_19$85863
; Line 1956
	mov	al, BYTE PTR _stextflag
	cmp	al, 8
	jle	SHORT $L85865
; Line 1957
	movsx	eax, al
	sub	eax, 16					; 00000010H
	je	SHORT $L85870
	dec	eax
	je	SHORT $LABEL_17$85872
	dec	eax
	jne	SHORT $LABEL_19$85863
; Line 1964
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSPBuy@4
; Line 1965
	jmp	SHORT $LABEL_19$85863
$L85870:
; Line 1959
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollHBuy@4
; Line 1967
	jmp	SHORT $LABEL_19$85863
$L85865:
; Line 1968
	cmp	al, 7
	jge	SHORT $LABEL_17$85872
; Line 1970
	cmp	al, 2
	jne	SHORT $L87248
; Line 1971
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSBuy@4
; Line 1972
	jmp	SHORT $LABEL_19$85863
$L87248:
; Line 1974
	jle	SHORT $LABEL_19$85863
; Line 1975
	cmp	al, 4
	jle	SHORT $LABEL_17$85872
; Line 1976
	cmp	al, 6
	jne	SHORT $LABEL_19$85863
; Line 1977
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollWBuy@4
; Line 1978
	jmp	SHORT $LABEL_19$85863
$LABEL_17$85872:
; Line 1981
	mov	ecx, DWORD PTR _stextsval
	call	@S_ScrollSSell@4
$LABEL_19$85863:
	push	esi
	push	edi
; Line 1987
	xor	edi, edi
	mov	esi, OFFSET FLAT:_stext+152
$L85883:
; Line 1988
	cmp	DWORD PTR [esi-8], 0
	je	SHORT $L85886
; Line 1989
	mov	ecx, edi
	call	@DrawSLine@4
$L85886:
; Line 1990
	lea	eax, DWORD PTR [esi-144]
	test	eax, eax
	je	SHORT $L85884
; Line 1991
	movsx	eax, BYTE PTR [esi-12]
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi-152]
	mov	edx, edi
	push	eax
	lea	eax, DWORD PTR [esi-144]
	push	eax
	mov	al, BYTE PTR [esi-16]
	push	eax
	call	@PrintSString@24
$L85884:
	add	esi, 156				; 0000009cH
	inc	edi
	cmp	esi, OFFSET FLAT:_stext+3896
	jl	SHORT $L85883
; Line 1994
	cmp	DWORD PTR _stextscrl, 0
	pop	edi
	pop	esi
	je	SHORT $L85888
; Line 1995
	push	20					; 00000014H
	pop	edx
	push	4
	pop	ecx
	call	@DrawSArrows@8
$L85888:
; Line 1996
	mov	eax, DWORD PTR _InStoreFlag
	and	eax, 7
	inc	eax
	mov	DWORD PTR _InStoreFlag, eax
; Line 1997
	ret	0
_DrawSText ENDP
_TEXT	ENDS
PUBLIC	_STextESC
EXTRN	_sfx_stop:NEAR
EXTRN	_qtextflag:BYTE
EXTRN	_leveltype:BYTE
; Function compile flags: /Ogsy
;	COMDAT _STextESC
_TEXT	SEGMENT
_STextESC PROC NEAR					; COMDAT
; Line 2008
	xor	cl, cl
	cmp	BYTE PTR _qtextflag, cl
	je	SHORT $L85893
; Line 2010
	cmp	BYTE PTR _leveltype, cl
	mov	BYTE PTR _qtextflag, cl
	jne	SHORT $L85918
; Line 2011
	jmp	_sfx_stop
$L85893:
; Line 2013
	movsx	eax, BYTE PTR _stextflag
	dec	eax
	cmp	eax, 22					; 00000016H
	ja	SHORT $L85918
	movzx	eax, BYTE PTR $L87252[eax]
	jmp	DWORD PTR $L87253[eax*4]
$L85900:
; Line 2023
	mov	BYTE PTR _stextflag, cl
$L85918:
; Line 2080
	ret	0
$L85901:
; Line 2026
	mov	cl, 1
	call	@StartStore@4
; Line 2027
	mov	DWORD PTR _stextsel, 12			; 0000000cH
; Line 2080
	ret	0
$L85902:
; Line 2030
	mov	cl, 1
; Line 2031
	jmp	SHORT $LABEL_16$85903
$L85904:
; Line 2033
	mov	cl, 1
; Line 2034
	jmp	SHORT $LABEL_14$85905
$L85906:
; Line 2036
	mov	cl, 5
; Line 2037
	jmp	SHORT $LABEL_18$85907
$L85908:
; Line 2039
	mov	cl, 5
; Line 2040
	jmp	SHORT $LABEL_16$85903
$L85909:
; Line 2042
	mov	cl, 5
$LABEL_14$85905:
; Line 2044
	call	@StartStore@4
; Line 2045
	mov	DWORD PTR _stextsel, 18			; 00000012H
; Line 2080
	ret	0
$L85910:
; Line 2050
	mov	cl, BYTE PTR _stextshold
	call	@StartStore@4
; Line 2051
	mov	eax, DWORD PTR _stextlhold
	mov	DWORD PTR _stextsel, eax
; Line 2052
	mov	eax, DWORD PTR _stextvhold
	mov	DWORD PTR _stextsval, eax
; Line 2080
	ret	0
$L85912:
; Line 2055
	mov	cl, 14					; 0000000eH
$LABEL_16$85903:
; Line 2057
	call	@StartStore@4
; Line 2058
	mov	DWORD PTR _stextsel, 16			; 00000010H
; Line 2080
	ret	0
$L85913:
; Line 2061
	mov	cl, 15					; 0000000fH
; Line 2062
	jmp	SHORT $LABEL_18$85907
$L85914:
; Line 2064
	mov	cl, 1
$LABEL_18$85907:
; Line 2066
	call	@StartStore@4
; Line 2067
	mov	DWORD PTR _stextsel, 14			; 0000000eH
; Line 2080
	ret	0
$L85915:
; Line 2070
	mov	cl, BYTE PTR _stextshold
	call	@StartStore@4
; Line 2071
	mov	eax, DWORD PTR _stextlhold
	mov	DWORD PTR _stextsel, eax
; Line 2080
	ret	0
$L85917:
; Line 2074
	mov	cl, 17					; 00000011H
	jmp	@StartStore@4
$L87253:
; Line 2080
	DD	$L85900
	DD	$L85901
	DD	$L85902
	DD	$L85904
	DD	$L85906
	DD	$L85908
	DD	$L85909
	DD	$L85910
	DD	$L85912
	DD	$L85913
	DD	$L85914
	DD	$L85915
	DD	$L85917
$L87252:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	0
	DB	4
	DB	5
	DB	6
	DB	7
	DB	7
	DB	7
	DB	0
	DB	0
	DB	0
	DB	0
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	0
	DB	0
	DB	0
_STextESC ENDP
_TEXT	ENDS
PUBLIC	_STextUp
EXTRN	@PlaySFX@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _STextUp
_TEXT	SEGMENT
_STextUp PROC NEAR					; COMDAT
; Line 2091
	push	69					; 00000045H
	pop	ecx
	call	@PlaySFX@4
; Line 2092
	mov	eax, DWORD PTR _stextsel
	cmp	eax, -1
	je	$L85934
; Line 2093
	xor	ecx, ecx
	cmp	DWORD PTR _stextscrl, ecx
	je	SHORT $L85922
; Line 2094
	cmp	eax, DWORD PTR _stextup
	jne	SHORT $L85923
; Line 2095
	cmp	DWORD PTR _stextsval, ecx
	je	SHORT $L85934
; Line 2096
	dec	DWORD PTR _stextsval
; Line 2128
	ret	0
$L85923:
; Line 2099
	dec	eax
; Line 2101
	mov	edx, eax
	mov	DWORD PTR _stextsel, eax
	imul	edx, 156				; 0000009cH
	cmp	DWORD PTR _stext[edx+148], ecx
	jne	SHORT $L85934
$L85926:
; Line 2104
	cmp	eax, ecx
	je	SHORT $L85929
; Line 2105
	dec	eax
; Line 2106
	jmp	SHORT $L85927
$L85929:
; Line 2107
	push	23					; 00000017H
	pop	eax
$L85927:
; Line 2108
	mov	edx, eax
	imul	edx, 156				; 0000009cH
	cmp	DWORD PTR _stext[edx+148], ecx
	je	SHORT $L85926
	jmp	SHORT $LABEL_20$85931
$L85922:
; Line 2113
	cmp	eax, ecx
	je	SHORT $L85932
; Line 2114
	dec	eax
; Line 2115
	jmp	SHORT $L85933
$L85932:
; Line 2116
	push	23					; 00000017H
	pop	eax
$L85933:
; Line 2118
	mov	edx, eax
	mov	DWORD PTR _stextsel, eax
	imul	edx, 156				; 0000009cH
	cmp	DWORD PTR _stext[edx+148], ecx
	jne	SHORT $L85934
$L85935:
; Line 2120
	cmp	eax, ecx
	je	SHORT $L85938
; Line 2121
	dec	eax
; Line 2122
	jmp	SHORT $L85936
$L85938:
; Line 2123
	push	23					; 00000017H
	pop	eax
$L85936:
; Line 2124
	mov	edx, eax
	imul	edx, 156				; 0000009cH
	cmp	DWORD PTR _stext[edx+148], ecx
	je	SHORT $L85935
$LABEL_20$85931:
; Line 2110
	mov	DWORD PTR _stextsel, eax
$L85934:
; Line 2128
	ret	0
_STextUp ENDP
_TEXT	ENDS
PUBLIC	_STextDown
; Function compile flags: /Ogsy
;	COMDAT _STextDown
_TEXT	SEGMENT
_STextDown PROC NEAR					; COMDAT
; Line 2137
	push	69					; 00000045H
	pop	ecx
	call	@PlaySFX@4
; Line 2138
	mov	eax, DWORD PTR _stextsel
	cmp	eax, -1
	je	$L85955
; Line 2139
	xor	ecx, ecx
	cmp	DWORD PTR _stextscrl, ecx
	je	SHORT $L85943
; Line 2140
	cmp	eax, DWORD PTR _stextdown
	jne	SHORT $L85944
; Line 2141
	mov	eax, DWORD PTR _stextsval
	cmp	eax, DWORD PTR _stextsmax
	jge	SHORT $L85955
; Line 2142
	inc	DWORD PTR _stextsval
; Line 2174
	ret	0
$L85944:
; Line 2145
	inc	eax
; Line 2147
	mov	edx, eax
	mov	DWORD PTR _stextsel, eax
	imul	edx, 156				; 0000009cH
	cmp	DWORD PTR _stext[edx+148], ecx
	jne	SHORT $L85955
$L85947:
; Line 2150
	cmp	eax, 23					; 00000017H
	jne	SHORT $L85950
; Line 2151
	xor	eax, eax
; Line 2152
	jmp	SHORT $L85948
$L85950:
; Line 2153
	inc	eax
$L85948:
; Line 2154
	mov	edx, eax
	imul	edx, 156				; 0000009cH
	cmp	DWORD PTR _stext[edx+148], ecx
	je	SHORT $L85947
	jmp	SHORT $LABEL_20$85952
$L85943:
; Line 2159
	cmp	eax, 23					; 00000017H
	jne	SHORT $L85953
; Line 2160
	xor	eax, eax
; Line 2161
	jmp	SHORT $L85954
$L85953:
; Line 2162
	inc	eax
$L85954:
; Line 2164
	mov	edx, eax
	mov	DWORD PTR _stextsel, eax
	imul	edx, 156				; 0000009cH
	cmp	DWORD PTR _stext[edx+148], ecx
	jne	SHORT $L85955
$L85956:
; Line 2166
	cmp	eax, 23					; 00000017H
	jne	SHORT $L85959
; Line 2167
	xor	eax, eax
; Line 2168
	jmp	SHORT $L85957
$L85959:
; Line 2169
	inc	eax
$L85957:
; Line 2170
	mov	edx, eax
	imul	edx, 156				; 0000009cH
	cmp	DWORD PTR _stext[edx+148], ecx
	je	SHORT $L85956
$LABEL_20$85952:
; Line 2156
	mov	DWORD PTR _stextsel, eax
$L85955:
; Line 2174
	ret	0
_STextDown ENDP
_TEXT	ENDS
PUBLIC	_STextPrior
; Function compile flags: /Ogsy
;	COMDAT _STextPrior
_TEXT	SEGMENT
_STextPrior PROC NEAR					; COMDAT
; Line 2182
	push	69					; 00000045H
	pop	ecx
	call	@PlaySFX@4
; Line 2183
	mov	ecx, DWORD PTR _stextsel
	cmp	ecx, -1
	je	SHORT $L85966
	xor	edx, edx
	cmp	DWORD PTR _stextscrl, edx
	je	SHORT $L85966
; Line 2184
	mov	eax, DWORD PTR _stextup
	cmp	ecx, eax
	jne	SHORT $L85963
; Line 2185
	cmp	DWORD PTR _stextsval, edx
	je	SHORT $L85966
; Line 2186
	sub	DWORD PTR _stextsval, 4
; Line 2187
	jns	SHORT $L85966
; Line 2188
	mov	DWORD PTR _stextsval, edx
; Line 2194
	ret	0
$L85963:
; Line 2191
	mov	DWORD PTR _stextsel, eax
$L85966:
; Line 2194
	ret	0
_STextPrior ENDP
_TEXT	ENDS
PUBLIC	_STextNext
; Function compile flags: /Ogsy
;	COMDAT _STextNext
_TEXT	SEGMENT
_STextNext PROC NEAR					; COMDAT
; Line 2201
	push	69					; 00000045H
	pop	ecx
	call	@PlaySFX@4
; Line 2202
	mov	ecx, DWORD PTR _stextsel
	cmp	ecx, -1
	je	SHORT $L85972
	cmp	DWORD PTR _stextscrl, 0
	je	SHORT $L85972
; Line 2203
	mov	eax, DWORD PTR _stextdown
	cmp	ecx, eax
	jne	SHORT $L85969
; Line 2204
	mov	eax, DWORD PTR _stextsmax
	cmp	DWORD PTR _stextsval, eax
	jge	SHORT $L87270
; Line 2205
	add	DWORD PTR _stextsval, 4
; Line 2206
	cmp	DWORD PTR _stextsval, eax
$L87270:
	jle	SHORT $L85972
; Line 2207
	mov	DWORD PTR _stextsval, eax
; Line 2212
	ret	0
$L85969:
; Line 2209
	mov	DWORD PTR _stextsel, eax
$L85972:
; Line 2212
	ret	0
_STextNext ENDP
_TEXT	ENDS
PUBLIC	_S_SmithEnter
; Function compile flags: /Ogsy
;	COMDAT _S_SmithEnter
_TEXT	SEGMENT
_v0$ = -4
_S_SmithEnter PROC NEAR					; COMDAT
; Line 2219
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2223
	mov	eax, DWORD PTR _stextsel
	push	10					; 0000000aH
	pop	ecx
	cmp	eax, ecx
	jne	SHORT $L85975
; Line 2224
	and	DWORD PTR _talker, 0
; Line 2225
	mov	DWORD PTR _stextlhold, ecx
; Line 2226
	mov	DWORD PTR _stextshold, 1
; Line 2227
	mov	DWORD PTR _gossipstart, 189		; 000000bdH
; Line 2228
	mov	DWORD PTR _gossipend, 199		; 000000c7H
; Line 2229
	mov	cl, 19					; 00000013H
; Line 2230
	jmp	SHORT $LABEL_13$85977
$L85975:
; Line 2232
	push	2
; Line 2233
	sub	eax, 12					; 0000000cH
	pop	ecx
	mov	DWORD PTR _v0$[ebp], ecx
	je	SHORT $L87274
	sub	eax, ecx
	je	SHORT $L85983
	sub	eax, ecx
	je	SHORT $L85985
	sub	eax, ecx
	je	SHORT $L85987
	sub	eax, ecx
	jne	SHORT $L85979
; Line 2248
	and	BYTE PTR _stextflag, 0
; Line 2251
	leave
	ret	0
$L85987:
; Line 2245
	mov	cl, 4
; Line 2246
	jmp	SHORT $LABEL_13$85977
$L85985:
; Line 2242
	mov	cl, 3
; Line 2243
	jmp	SHORT $LABEL_13$85977
$L85983:
; Line 2239
	mov	cl, 18					; 00000012H
	jmp	SHORT $LABEL_13$85977
$L87274:
	mov	cl, BYTE PTR _v0$[ebp]
$LABEL_13$85977:
; Line 2236
	call	@StartStore@4
$L85979:
; Line 2251
	leave
	ret	0
_S_SmithEnter ENDP
_TEXT	ENDS
PUBLIC	@SetGoldCurs@8
; Function compile flags: /Ogsy
;	COMDAT @SetGoldCurs@8
_TEXT	SEGMENT
@SetGoldCurs@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 2261
	imul	ecx, 21720				; 000054d8H
	imul	edx, 368				; 00000170H
	lea	eax, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _plr[eax+3664]
	cmp	ecx, 2500				; 000009c4H
	jge	SHORT $L85995
; Line 2262
	cmp	ecx, 1000				; 000003e8H
	jle	SHORT $L85996
; Line 2263
	mov	DWORD PTR _plr[eax+3660], 5
; Line 2269
	ret	0
$L85996:
; Line 2265
	mov	DWORD PTR _plr[eax+3660], 4
; Line 2269
	ret	0
$L85995:
; Line 2267
	mov	DWORD PTR _plr[eax+3660], 6
; Line 2269
	ret	0
@SetGoldCurs@8 ENDP
_TEXT	ENDS
PUBLIC	@SetSpdbarGoldCurs@8
; Function compile flags: /Ogsy
;	COMDAT @SetSpdbarGoldCurs@8
_TEXT	SEGMENT
@SetSpdbarGoldCurs@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _i$ = edx
; Line 2273
	imul	ecx, 21720				; 000054d8H
	imul	edx, 368				; 00000170H
	lea	eax, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _plr[eax+18428]
	cmp	ecx, 2500				; 000009c4H
	jge	SHORT $L86004
; Line 2274
	cmp	ecx, 1000				; 000003e8H
	jle	SHORT $L86005
; Line 2275
	mov	DWORD PTR _plr[eax+18424], 5
; Line 2281
	ret	0
$L86005:
; Line 2277
	mov	DWORD PTR _plr[eax+18424], 4
; Line 2281
	ret	0
$L86004:
; Line 2279
	mov	DWORD PTR _plr[eax+18424], 6
; Line 2281
	ret	0
@SetSpdbarGoldCurs@8 ENDP
_TEXT	ENDS
PUBLIC	@TakePlrsMoney@4
EXTRN	_drawpanflag:DWORD
EXTRN	@RemoveInvItem@8:NEAR
EXTRN	@RemoveSpdBarItem@8:NEAR
EXTRN	@CalculateGold@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @TakePlrsMoney@4
_TEXT	SEGMENT
@TakePlrsMoney@4 PROC NEAR				; COMDAT
; _cost$ = ecx
; Line 2284
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 2308
	mov	ecx, DWORD PTR _myplr
	call	@CalculateGold@4
; Line 2309
	mov	ecx, DWORD PTR _myplr
; Line 2310
	xor	ebx, ebx
	mov	esi, ecx
; Line 2311
	sub	eax, edi
	imul	ecx, 21720				; 000054d8H
	mov	DWORD PTR _plr[ecx+460], eax
	jmp	SHORT $L87296
$L86033:
; Line 2313
	mov	eax, esi
	mov	ecx, ebx
	imul	eax, 21720				; 000054d8H
	imul	ecx, 368				; 00000170H
	add	eax, ecx
; Line 2314
	cmp	DWORD PTR _plr[eax+18240], 11		; 0000000bH
	jne	SHORT $L86044
; Line 2316
	mov	ecx, DWORD PTR _plr[eax+18428]
; Line 2317
	cmp	ecx, 5000				; 00001388H
	je	SHORT $L86044
; Line 2318
	cmp	edi, ecx
; Line 2320
	mov	edx, ebx
	jl	SHORT $L86043
	sub	edi, ecx
	mov	ecx, esi
	call	@RemoveSpdBarItem@8
; Line 2321
	mov	esi, DWORD PTR _myplr
; Line 2322
	or	ebx, -1
; Line 2323
	jmp	SHORT $L86044
$L86043:
; Line 2324
	sub	ecx, edi
	mov	DWORD PTR _plr[eax+18428], ecx
; Line 2325
	mov	ecx, esi
	call	@SetSpdbarGoldCurs@8
; Line 2326
	xor	edi, edi
$L86044:
; Line 2330
	inc	ebx
	cmp	ebx, 8
	jge	SHORT $L87287
$L87296:
; Line 2312
	test	edi, edi
	jg	SHORT $L86033
; Line 2387
	jmp	SHORT $L86049
$L87287:
; Line 2331
	test	edi, edi
	jle	SHORT $L86049
; Line 2332
	xor	ebx, ebx
$L86047:
; Line 2334
	test	edi, edi
	jle	SHORT $L86049
; Line 2336
	mov	eax, esi
	mov	ecx, ebx
	imul	eax, 21720				; 000054d8H
	imul	ecx, 368				; 00000170H
	add	eax, ecx
; Line 2337
	cmp	DWORD PTR _plr[eax+18240], 11		; 0000000bH
	jne	SHORT $L86059
; Line 2339
	mov	ecx, DWORD PTR _plr[eax+18428]
; Line 2342
	mov	edx, ebx
	cmp	edi, ecx
	jl	SHORT $L86058
	sub	edi, ecx
	mov	ecx, esi
	call	@RemoveSpdBarItem@8
; Line 2343
	mov	esi, DWORD PTR _myplr
; Line 2344
	or	ebx, -1
; Line 2345
	jmp	SHORT $L86059
$L86058:
; Line 2346
	sub	ecx, edi
	mov	DWORD PTR _plr[eax+18428], ecx
; Line 2347
	mov	ecx, esi
	call	@SetSpdbarGoldCurs@8
; Line 2348
	xor	edi, edi
$L86059:
; Line 2351
	inc	ebx
; Line 2352
	cmp	ebx, 8
	jl	SHORT $L86047
$L86049:
; Line 2357
	xor	ebx, ebx
; Line 2358
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
; Line 2359
	cmp	edi, ebx
	jle	$L86067
; Line 2360
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	mov	ecx, eax
; Line 2361
	cmp	DWORD PTR _plr[eax+18188], ebx
	jle	SHORT $LABEL_26$86062
$L86080:
; Line 2392
	mov	eax, ebx
	imul	eax, 368				; 00000170H
	add	eax, ecx
; Line 2393
	cmp	DWORD PTR _plr[eax+3476], 11		; 0000000bH
	jne	SHORT $L86091
; Line 2395
	mov	ecx, DWORD PTR _plr[eax+3664]
; Line 2396
	cmp	ecx, 5000				; 00001388H
	je	SHORT $L86091
; Line 2397
	cmp	edi, ecx
; Line 2399
	mov	edx, ebx
	jl	SHORT $L86090
	sub	edi, ecx
	mov	ecx, esi
	call	@RemoveInvItem@8
; Line 2400
	mov	esi, DWORD PTR _myplr
; Line 2401
	or	ebx, -1
; Line 2402
	jmp	SHORT $L86091
$L86090:
; Line 2403
	sub	ecx, edi
	mov	DWORD PTR _plr[eax+3664], ecx
; Line 2404
	mov	ecx, esi
	call	@SetGoldCurs@8
; Line 2405
	xor	edi, edi
$L86091:
; Line 2410
	mov	eax, esi
	inc	ebx
	imul	eax, 21720				; 000054d8H
	mov	ecx, eax
; Line 2411
	cmp	ebx, DWORD PTR _plr[eax+18188]
	jge	SHORT $LABEL_26$86062
; Line 2391
	test	edi, edi
	jg	SHORT $L86080
; Line 2387
	jmp	SHORT $L86067
$LABEL_26$86062:
; Line 2363
	xor	ebx, ebx
; Line 2364
	cmp	edi, ebx
	jle	SHORT $L86067
; Line 2365
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	mov	ecx, eax
; Line 2366
	cmp	DWORD PTR _plr[eax+18188], ebx
	jle	SHORT $L86067
$L86065:
; Line 2368
	test	edi, edi
	jle	SHORT $L86067
; Line 2370
	mov	eax, ebx
	imul	eax, 368				; 00000170H
	add	eax, ecx
; Line 2371
	cmp	DWORD PTR _plr[eax+3476], 11		; 0000000bH
	jne	SHORT $L86077
; Line 2373
	mov	ecx, DWORD PTR _plr[eax+3664]
; Line 2376
	mov	edx, ebx
	cmp	edi, ecx
	jl	SHORT $L86076
	sub	edi, ecx
	mov	ecx, esi
	call	@RemoveInvItem@8
; Line 2377
	mov	esi, DWORD PTR _myplr
; Line 2378
	or	ebx, -1
; Line 2379
	jmp	SHORT $L86077
$L86076:
; Line 2380
	sub	ecx, edi
	mov	DWORD PTR _plr[eax+3664], ecx
; Line 2381
	mov	ecx, esi
	call	@SetGoldCurs@8
; Line 2382
	xor	edi, edi
$L86077:
; Line 2386
	mov	eax, esi
	inc	ebx
	imul	eax, 21720				; 000054d8H
	mov	ecx, eax
; Line 2387
	cmp	ebx, DWORD PTR _plr[eax+18188]
	jl	SHORT $L86065
$L86067:
	pop	edi
	pop	esi
	pop	ebx
; Line 2416
	ret	0
@TakePlrsMoney@4 ENDP
_TEXT	ENDS
PUBLIC	_SmithBuyItem
EXTRN	@CalcPlrInv@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SmithBuyItem
_TEXT	SEGMENT
_v3$ = -1
_SmithBuyItem PROC NEAR					; COMDAT
; Line 2420
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2426
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+21376]
	call	@TakePlrsMoney@4
; Line 2427
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21236], 0
	jne	SHORT $L86098
; Line 2428
	and	DWORD PTR _plr[eax+21232], 0
$L86098:
; Line 2429
	call	_StoreAutoPlace
; Line 2430
	mov	ecx, DWORD PTR _stextlhold
	sub	ecx, DWORD PTR _stextup
	sar	ecx, 2
	add	ecx, DWORD PTR _stextvhold
; Line 2431
	cmp	ecx, 19					; 00000013H
	jne	SHORT $L86099
; Line 2432
	or	DWORD PTR _smithitem+7000, -1
; Line 2433
	jmp	SHORT $L86100
$L86099:
; Line 2434
	mov	eax, ecx
	imul	eax, 368				; 00000170H
	cmp	DWORD PTR _smithitem[eax+376], -1
	je	SHORT $L86104
	push	ebx
	push	esi
	push	edi
; Line 2435
	lea	eax, DWORD PTR _smithitem[eax]
$L86102:
; Line 2437
	mov	edi, eax
; Line 2438
	add	eax, 368				; 00000170H
; Line 2439
	inc	ecx
; Line 2441
	mov	esi, eax
	cmp	DWORD PTR [eax+376], -1
	mov	edx, 368				; 00000170H
	sete	BYTE PTR _v3$[ebp]
	sub	esi, edi
$L87304:
	mov	bl, BYTE PTR [esi+edi]
	mov	BYTE PTR [edi], bl
	inc	edi
	dec	edx
	jne	SHORT $L87304
; Line 2442
	cmp	BYTE PTR _v3$[ebp], 0
	je	SHORT $L86102
	pop	edi
	pop	esi
	pop	ebx
$L86104:
; Line 2444
	imul	ecx, 368				; 00000170H
	or	DWORD PTR _smithitem[ecx+8], -1
$L86100:
; Line 2446
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	inc	edx
	call	@CalcPlrInv@8
; Line 2447
	leave
	ret	0
_SmithBuyItem ENDP
_TEXT	ENDS
PUBLIC	_S_SBuyEnter
EXTRN	_cursH:DWORD
EXTRN	_cursW:DWORD
EXTRN	@SetCursor_@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _S_SBuyEnter
_TEXT	SEGMENT
_S_SBuyEnter PROC NEAR					; COMDAT
; Line 2460
	mov	eax, DWORD PTR _stextsel
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86112
; Line 2461
	mov	cl, 1
	call	@StartStore@4
; Line 2462
	mov	DWORD PTR _stextsel, 12			; 0000000cH
; Line 2492
	ret	0
$L86112:
	mov	ecx, DWORD PTR _stextsval
	mov	edx, DWORD PTR _myplr
	mov	DWORD PTR _stextlhold, eax
	sub	eax, DWORD PTR _stextup
	imul	edx, 21720				; 000054d8H
	sar	eax, 2
	add	eax, ecx
	mov	DWORD PTR _stextvhold, ecx
	imul	eax, 368				; 00000170H
	mov	ecx, DWORD PTR _plr[edx+460]
	mov	DWORD PTR _stextshold, 2
	cmp	ecx, DWORD PTR _smithitem[eax+200]
	jl	SHORT $L86114
	push	esi
	sub	eax, edx
	push	edi
	lea	edi, DWORD PTR _plr[edx+21176]
	sub	eax, OFFSET FLAT:_plr+21176
	push	92					; 0000005cH
	lea	esi, DWORD PTR _smithitem[eax+edi]
; Line 2470
	pop	ecx
	rep movsd
; Line 2471
	mov	ecx, DWORD PTR _plr[edx+21368]
	add	ecx, 12					; 0000000cH
	call	@SetCursor_@4
; Line 2472
	xor	eax, eax
; Line 2473
	xor	esi, esi
$L86115:
; Line 2475
	test	eax, eax
	jne	SHORT $LABEL_9$86119
; Line 2477
	push	eax
	mov	eax, DWORD PTR _cursH
	push	28					; 0000001cH
	mov	ecx, esi
	cdq
	pop	edi
	inc	esi
	idiv	edi
	push	eax
	mov	eax, DWORD PTR _cursW
	cdq
	idiv	edi
	mov	edx, ecx
	mov	ecx, DWORD PTR _myplr
	push	eax
	call	@AutoPlace@20
; Line 2478
	cmp	esi, 40					; 00000028H
	jl	SHORT $L86115
; Line 2479
	test	eax, eax
	je	SHORT $L86120
$LABEL_9$86119:
; Line 2481
	mov	cl, 11					; 0000000bH
; Line 2482
	jmp	SHORT $LABEL_11$86121
$L86120:
; Line 2484
	mov	cl, 10					; 0000000aH
$LABEL_11$86121:
; Line 2486
	call	@StartStore@4
; Line 2487
	xor	ecx, ecx
	pop	edi
	inc	ecx
	pop	esi
	jmp	@SetCursor_@4
$L86114:
; Line 2489
	mov	cl, 9
	jmp	@StartStore@4
_S_SBuyEnter ENDP
_TEXT	ENDS
PUBLIC	_SmithBuyPItem
; Function compile flags: /Ogsy
;	COMDAT _SmithBuyPItem
_TEXT	SEGMENT
_SmithBuyPItem PROC NEAR				; COMDAT
; Line 2507
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+21376]
	call	@TakePlrsMoney@4
; Line 2508
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21236], 0
	jne	SHORT $L86129
; Line 2509
	and	DWORD PTR _plr[eax+21232], 0
$L86129:
; Line 2510
	call	_StoreAutoPlace
; Line 2512
	mov	eax, DWORD PTR _stextlhold
; Line 2514
	mov	edx, DWORD PTR _stextvhold
	sub	eax, DWORD PTR _stextup
	xor	ecx, ecx
	sar	eax, 2
	add	eax, edx
; Line 2515
	xor	edx, edx
	test	eax, eax
; Line 2516
	jl	SHORT $L86133
	push	esi
	mov	esi, OFFSET FLAT:_premiumitem+8
$L86131:
; Line 2518
	cmp	DWORD PTR [esi], -1
	je	SHORT $L86134
; Line 2519
	dec	eax
; Line 2520
	mov	ecx, edx
$L86134:
; Line 2522
	inc	edx
	add	esi, 368				; 00000170H
; Line 2523
	test	eax, eax
	jge	SHORT $L86131
	pop	esi
$L86133:
; Line 2526
	imul	ecx, 368				; 00000170H
; Line 2528
	mov	eax, DWORD PTR _myplr
	or	DWORD PTR _premiumitem[ecx+8], -1
	dec	DWORD PTR _numpremium
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+440]
	jmp	@SpawnPremium@4
_SmithBuyPItem ENDP
_TEXT	ENDS
PUBLIC	_S_SPBuyEnter
; Function compile flags: /Ogsy
;	COMDAT _S_SPBuyEnter
_TEXT	SEGMENT
_S_SPBuyEnter PROC NEAR					; COMDAT
; Line 2548
	mov	eax, DWORD PTR _stextsel
	push	esi
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86147
; Line 2549
	mov	cl, 1
	call	@StartStore@4
; Line 2550
	mov	DWORD PTR _stextsel, 14			; 0000000eH
	pop	esi
; Line 2596
	ret	0
$L86147:
	mov	ecx, DWORD PTR _stextsval
	mov	DWORD PTR _stextlhold, eax
	sub	eax, DWORD PTR _stextup
	mov	DWORD PTR _stextvhold, ecx
	xor	edx, edx
	mov	DWORD PTR _stextshold, 18		; 00000012H
	sar	eax, 2
	add	ecx, eax
	xor	eax, eax
	test	ecx, ecx
	jl	SHORT $L86152
; Line 2561
	mov	esi, OFFSET FLAT:_premiumitem+8
$L86150:
; Line 2563
	cmp	DWORD PTR [esi], -1
	je	SHORT $L86153
; Line 2564
	dec	ecx
; Line 2565
	mov	eax, edx
$L86153:
; Line 2567
	inc	edx
; Line 2568
	add	esi, 368				; 00000170H
; Line 2569
	test	ecx, ecx
	jge	SHORT $L86150
$L86152:
; Line 2573
	mov	edx, DWORD PTR _myplr
	imul	eax, 368				; 00000170H
	imul	edx, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[edx+460]
	cmp	ecx, DWORD PTR _premiumitem[eax+200]
	jl	SHORT $L86154
; Line 2574
	sub	eax, edx
	push	edi
	lea	edi, DWORD PTR _plr[edx+21176]
	sub	eax, OFFSET FLAT:_plr+21176
	push	92					; 0000005cH
	lea	esi, DWORD PTR _premiumitem[eax+edi]
	pop	ecx
	rep movsd
; Line 2575
	mov	ecx, DWORD PTR _plr[edx+21368]
	add	ecx, 12					; 0000000cH
	call	@SetCursor_@4
; Line 2576
	xor	eax, eax
; Line 2577
	xor	esi, esi
$L86155:
; Line 2579
	test	eax, eax
	jne	SHORT $LABEL_14$86159
; Line 2581
	push	eax
	mov	eax, DWORD PTR _cursH
	push	28					; 0000001cH
	mov	ecx, esi
	cdq
	pop	edi
	inc	esi
	idiv	edi
	push	eax
	mov	eax, DWORD PTR _cursW
	cdq
	idiv	edi
	mov	edx, ecx
	mov	ecx, DWORD PTR _myplr
	push	eax
	call	@AutoPlace@20
; Line 2582
	cmp	esi, 40					; 00000028H
	jl	SHORT $L86155
; Line 2583
	test	eax, eax
	je	SHORT $L86160
$LABEL_14$86159:
; Line 2585
	mov	cl, 11					; 0000000bH
; Line 2586
	jmp	SHORT $LABEL_16$86161
$L86160:
; Line 2588
	mov	cl, 10					; 0000000aH
$LABEL_16$86161:
; Line 2590
	call	@StartStore@4
; Line 2591
	xor	ecx, ecx
	pop	edi
	inc	ecx
	pop	esi
	jmp	@SetCursor_@4
$L86154:
; Line 2593
	mov	cl, 9
	pop	esi
	jmp	@StartStore@4
_S_SPBuyEnter ENDP
_TEXT	ENDS
PUBLIC	@StoreGoldFit@4
; Function compile flags: /Ogsy
;	COMDAT @StoreGoldFit@4
_TEXT	SEGMENT
_numsqrs$ = -4
@StoreGoldFit@4 PROC NEAR				; COMDAT
; _idx$ = ecx
; Line 2604
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2610
	imul	ecx, 368				; 00000170H
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _storehold[ecx+200]
; Line 2611
	mov	eax, edi
	mov	esi, 5000				; 00001388H
	cdq
	mov	ebx, esi
	idiv	ebx
; Line 2612
	test	edx, edx
	mov	ebx, eax
	je	SHORT $L86170
; Line 2613
	inc	ebx
$L86170:
; Line 2615
	mov	ecx, DWORD PTR _storehold[ecx+192]
	add	ecx, 12					; 0000000cH
	call	@SetCursor_@4
; Line 2616
	mov	eax, DWORD PTR _cursH
	push	28					; 0000001cH
	cdq
	pop	ecx
	idiv	ecx
	mov	DWORD PTR -4+[ebp], eax
	mov	eax, DWORD PTR _cursW
	cdq
	idiv	ecx
	mov	ecx, DWORD PTR -4+[ebp]
	imul	ecx, eax
	mov	DWORD PTR _numsqrs$[ebp], ecx
; Line 2617
	xor	ecx, ecx
	inc	ecx
	call	@SetCursor_@4
; Line 2619
	cmp	DWORD PTR _numsqrs$[ebp], ebx
	jl	SHORT $L86171
; Line 2620
	mov	al, 1
	jmp	SHORT $L86165
$L86171:
; Line 2622
	mov	eax, DWORD PTR _myplr
	xor	ecx, ecx
	imul	eax, 21720				; 000054d8H
$L86172:
; Line 2623
	cmp	BYTE PTR _plr[eax+ecx+18192], 0
	jne	SHORT $L86173
; Line 2624
	inc	DWORD PTR _numsqrs$[ebp]
$L86173:
; Line 2622
	inc	ecx
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L86172
; Line 2627
	mov	ecx, DWORD PTR _plr[eax+18188]
	test	ecx, ecx
	jle	SHORT $L86178
	lea	eax, DWORD PTR _plr[eax+3664]
$L86176:
; Line 2628
	cmp	DWORD PTR [eax-188], 11			; 0000000bH
	jne	SHORT $L86177
	mov	edx, DWORD PTR [eax]
	cmp	edx, esi
	je	SHORT $L86177
; Line 2629
	add	edi, edx
; Line 2630
	cmp	edi, esi
	jle	SHORT $L86180
; Line 2631
	sub	edi, esi
; Line 2632
	jmp	SHORT $L86177
$L86180:
; Line 2633
	xor	edi, edi
$L86177:
; Line 2627
	add	eax, 368				; 00000170H
	dec	ecx
	jne	SHORT $L86176
$L86178:
; Line 2637
	mov	eax, edi
	cdq
	idiv	esi
; Line 2638
	test	edx, edx
	je	SHORT $L86182
; Line 2639
	inc	eax
$L86182:
; Line 2640
	xor	ecx, ecx
	cmp	DWORD PTR _numsqrs$[ebp], eax
	setge	cl
	mov	al, cl
$L86165:
	pop	edi
	pop	esi
	pop	ebx
; Line 2641
	leave
	ret	0
@StoreGoldFit@4 ENDP
_TEXT	ENDS
PUBLIC	@PlaceStoreGold@4
EXTRN	@GetGoldSeed@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @PlaceStoreGold@4
_TEXT	SEGMENT
_v$ = -8
_i$ = -16
@PlaceStoreGold@4 PROC NEAR				; COMDAT
; _v$ = ecx
; Line 2645
	sub	esp, 16					; 00000010H
	push	ebx
; Line 2654
	mov	ebx, DWORD PTR _myplr
	push	ebp
	mov	DWORD PTR _v$[esp+24], ecx
	push	esi
	xor	cl, cl
	and	DWORD PTR _i$[esp+28], 0
	push	edi
$L86191:
; Line 2655
	test	cl, cl
	jne	$L87371
; Line 2657
	mov	eax, DWORD PTR _i$[esp+32]
	push	10					; 0000000aH
	cdq
	pop	esi
	idiv	esi
	mov	DWORD PTR -12+[esp+32], edx
	lea	ebp, DWORD PTR [eax+eax*4]
; Line 2658
	mov	eax, ebx
	imul	eax, 21720				; 000054d8H
	add	ebp, ebp
	add	edx, eax
	cmp	BYTE PTR _plr[edx+ebp+18192], cl
	jne	$L86192
; Line 2659
	mov	esi, DWORD PTR _plr[eax+18188]
; Line 2661
	mov	edx, OFFSET FLAT:_golditem
	mov	ecx, ebx
	mov	DWORD PTR -4+[esp+32], esi
	call	@GetGoldSeed@8
; Line 2662
	mov	ebx, DWORD PTR _myplr
	mov	ecx, esi
	mov	eax, ebx
	imul	ecx, 368				; 00000170H
	imul	eax, 21720				; 000054d8H
	push	92					; 0000005cH
	lea	edx, DWORD PTR [ecx+eax]
	mov	ecx, esi
	imul	ecx, 368				; 00000170H
	lea	edi, DWORD PTR _plr[edx+3468]
	mov	esi, edi
	sub	esi, ecx
	pop	ecx
	sub	esi, eax
	sub	esi, OFFSET FLAT:_plr+3468
	add	esi, OFFSET FLAT:_golditem
	rep movsd
; Line 2664
	mov	esi, DWORD PTR -12+[esp+32]
	lea	ecx, DWORD PTR _plr[eax+18188]
	add	esi, eax
	inc	DWORD PTR [ecx]
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR _plr[esi+ebp+18192], al
; Line 2665
	mov	eax, DWORD PTR _v$[esp+32]
	mov	DWORD PTR _plr[edx+3664], eax
; Line 2666
	mov	edx, DWORD PTR -4+[esp+32]
	mov	ecx, ebx
	call	@SetGoldCurs@8
; Line 2667
	mov	cl, 1
$L86192:
	inc	DWORD PTR _i$[esp+32]
	cmp	DWORD PTR _i$[esp+32], 40		; 00000028H
	jl	$L86191
$L87371:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2670
	add	esp, 16					; 00000010H
	ret	0
@PlaceStoreGold@4 ENDP
_TEXT	ENDS
PUBLIC	_StoreSellItem
; Function compile flags: /Ogsy
;	COMDAT _StoreSellItem
_TEXT	SEGMENT
_v13$ = -4
_StoreSellItem PROC NEAR				; COMDAT
; Line 2673
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 2687
	mov	esi, DWORD PTR _stextlhold
; Line 2690
	mov	ecx, DWORD PTR _myplr
	sub	esi, DWORD PTR _stextup
	push	edi
	sar	esi, 2
	add	esi, DWORD PTR _stextvhold
	lea	ebx, DWORD PTR _storehidx[esi]
	mov	al, BYTE PTR [ebx]
	test	al, al
	jge	SHORT $L86209
	movsx	eax, al
	or	edx, -1
	sub	edx, eax
	call	@RemoveSpdBarItem@8
; Line 2691
	jmp	SHORT $L86210
$L86209:
; Line 2692
	movsx	edx, al
	call	@RemoveInvItem@8
$L86210:
; Line 2694
	mov	ecx, esi
	mov	eax, DWORD PTR _storenumh
	imul	ecx, 368				; 00000170H
; Line 2696
	mov	edx, esi
	dec	eax
	sub	edx, DWORD PTR _storenumh
	mov	edi, DWORD PTR _storehold[ecx+200]
	mov	DWORD PTR _storenumh, eax
	inc	edx
; Line 2697
	jns	SHORT $L87394
; Line 2698
	sub	eax, esi
; Line 2699
	lea	edx, DWORD PTR _storehidx[esi+1]
	je	SHORT $L87385
	mov	esi, edx
	mov	DWORD PTR -4+[ebp], eax
	sub	esi, ebx
$L87384:
	mov	dl, BYTE PTR [esi+ebx]
	mov	BYTE PTR [ebx], dl
	inc	ebx
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L87384
$L87385:
; Line 2700
	imul	eax, 368				; 00000170H
	shr	eax, 2
	shl	eax, 2
	lea	edx, DWORD PTR _storehold[ecx]
	lea	ecx, DWORD PTR _storehold[ecx+368]
	je	SHORT $L87394
	sub	ecx, edx
	mov	esi, eax
$L87393:
	mov	al, BYTE PTR [ecx+edx]
	mov	BYTE PTR [edx], al
	inc	edx
	dec	esi
	jne	SHORT $L87393
$L87394:
; Line 2704
	mov	esi, DWORD PTR _myplr
	xor	edx, edx
	imul	esi, 21720				; 000054d8H
	mov	DWORD PTR _v13$[ebp], edx
	add	DWORD PTR _plr[esi+460], edi
; Line 2705
	cmp	DWORD PTR _plr[esi+18188], edx
	jle	SHORT $LABEL_15$86213
; Line 2720
	cmp	edi, edx
	lea	ebx, DWORD PTR _plr[esi+3664]
	jle	$L86214
$L86221:
; Line 2721
	cmp	DWORD PTR [ebx-188], 11			; 0000000bH
	jne	SHORT $L86225
	mov	eax, DWORD PTR [ebx]
	mov	ecx, 5000				; 00001388H
	cmp	eax, ecx
	je	SHORT $L86225
; Line 2722
	add	edi, eax
; Line 2723
	cmp	edi, ecx
	jle	SHORT $L86224
; Line 2724
	mov	DWORD PTR [ebx], ecx
; Line 2726
	mov	ecx, DWORD PTR _myplr
	add	edi, -5000				; ffffec78H
	call	@SetGoldCurs@8
; Line 2727
	jmp	SHORT $L86225
$L86224:
; Line 2729
	mov	ecx, DWORD PTR _myplr
	mov	DWORD PTR [ebx], edi
	call	@SetGoldCurs@8
; Line 2730
	xor	edi, edi
$L86225:
; Line 2734
	mov	eax, DWORD PTR _v13$[ebp]
	add	ebx, 368				; 00000170H
	lea	edx, DWORD PTR [eax+1]
	mov	eax, edx
; Line 2735
	cmp	eax, DWORD PTR _plr[esi+18188]
	mov	DWORD PTR _v13$[ebp], eax
	jge	SHORT $LABEL_15$86213
; Line 2720
	test	edi, edi
	jg	SHORT $L86221
; Line 2735
	jmp	SHORT $L86214
$LABEL_15$86213:
; Line 2707
	test	edi, edi
	jle	SHORT $L86214
; Line 2708
	mov	ecx, 5000				; 00001388H
	cmp	edi, ecx
	jle	SHORT $L86218
; Line 2709
	lea	eax, DWORD PTR [edi-5001]
	cdq
	idiv	ecx
	mov	esi, eax
	inc	esi
; Line 2710
	mov	eax, esi
	imul	eax, -5000				; ffffec78H
	add	edi, eax
$L86216:
; Line 2712
	mov	ecx, 5000				; 00001388H
	call	@PlaceStoreGold@4
; Line 2713
	dec	esi
; Line 2714
	jne	SHORT $L86216
$L86218:
; Line 2716
	mov	ecx, edi
	call	@PlaceStoreGold@4
$L86214:
	pop	edi
	pop	esi
	pop	ebx
; Line 2739
	leave
	ret	0
_StoreSellItem ENDP
_TEXT	ENDS
PUBLIC	_S_SSellEnter
; Function compile flags: /Ogsy
;	COMDAT _S_SSellEnter
_TEXT	SEGMENT
_S_SSellEnter PROC NEAR					; COMDAT
; Line 2749
	mov	eax, DWORD PTR _stextsel
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86229
; Line 2750
	mov	cl, 1
	call	@StartStore@4
; Line 2751
	mov	DWORD PTR _stextsel, 16			; 00000010H
; Line 2765
	ret	0
$L86229:
	mov	ecx, DWORD PTR _stextsval
	mov	DWORD PTR _stextlhold, eax
	sub	eax, DWORD PTR _stextup
	mov	DWORD PTR _stextvhold, ecx
	push	esi
	push	edi
	sar	eax, 2
	add	eax, ecx
	mov	ecx, DWORD PTR _myplr
	mov	edx, eax
	imul	ecx, 21720				; 000054d8H
	imul	edx, 368				; 00000170H
	sub	edx, ecx
	lea	edi, DWORD PTR _plr[ecx+21176]
	sub	edx, OFFSET FLAT:_plr+21176
	mov	DWORD PTR _stextshold, 3
	push	92					; 0000005cH
	lea	esi, DWORD PTR _storehold[edx+edi]
; Line 2758
	pop	ecx
	rep movsd
; Line 2760
	mov	ecx, eax
	call	@StoreGoldFit@4
	pop	edi
	pop	esi
	test	al, al
; Line 2761
	mov	cl, 10					; 0000000aH
; Line 2760
	je	SHORT $L87423
; Line 2763
	inc	cl
$L87423:
	jmp	@StartStore@4
_S_SSellEnter ENDP
_TEXT	ENDS
PUBLIC	_SmithRepairItem
; Function compile flags: /Ogsy
;	COMDAT _SmithRepairItem
_TEXT	SEGMENT
_SmithRepairItem PROC NEAR				; COMDAT
; Line 2776
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+21376]
	call	@TakePlrsMoney@4
; Line 2778
	mov	eax, DWORD PTR _stextlhold
	sub	eax, DWORD PTR _stextup
	sar	eax, 2
	add	eax, DWORD PTR _stextvhold
; Line 2779
	movsx	ecx, BYTE PTR _storehidx[eax]
; Line 2780
	imul	eax, 368				; 00000170H
	mov	edx, DWORD PTR _storehold[eax+240]
	mov	DWORD PTR _storehold[eax+236], edx
; Line 2783
	mov	eax, DWORD PTR _myplr
	test	ecx, ecx
	jl	SHORT $L86236
	imul	eax, 21720				; 000054d8H
	imul	ecx, 368				; 00000170H
	add	eax, ecx
	mov	ecx, DWORD PTR _plr[eax+3708]
	mov	DWORD PTR _plr[eax+3704], ecx
; Line 2794
	ret	0
$L86236:
; Line 2785
	cmp	ecx, -1
	push	esi
	jne	SHORT $L86238
; Line 2786
	mov	edx, eax
	imul	edx, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[edx+1132]
	mov	DWORD PTR _plr[edx+1128], esi
$L86238:
; Line 2787
	cmp	ecx, -2					; fffffffeH
	jne	SHORT $L86239
; Line 2788
	mov	edx, eax
	imul	edx, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[edx+3340]
	mov	DWORD PTR _plr[edx+3336], esi
$L86239:
; Line 2789
	cmp	ecx, -3					; fffffffdH
	jne	SHORT $L86240
; Line 2790
	mov	edx, eax
	imul	edx, 21720				; 000054d8H
	mov	esi, DWORD PTR _plr[edx+2604]
	mov	DWORD PTR _plr[edx+2600], esi
$L86240:
; Line 2791
	cmp	ecx, -4					; fffffffcH
	pop	esi
	jne	SHORT $L86241
; Line 2792
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+2972]
	mov	DWORD PTR _plr[eax+2968], ecx
$L86241:
; Line 2794
	ret	0
_SmithRepairItem ENDP
_TEXT	ENDS
PUBLIC	_S_SRepairEnter
; Function compile flags: /Ogsy
;	COMDAT _S_SRepairEnter
_TEXT	SEGMENT
_S_SRepairEnter PROC NEAR				; COMDAT
; Line 2808
	mov	eax, DWORD PTR _stextsel
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86248
; Line 2809
	mov	cl, 1
	call	@StartStore@4
; Line 2810
	mov	DWORD PTR _stextsel, 18			; 00000012H
; Line 2826
	ret	0
$L86248:
	mov	ecx, DWORD PTR _stextsval
	mov	DWORD PTR _stextlhold, eax
	sub	eax, DWORD PTR _stextup
	mov	edx, DWORD PTR _myplr
	imul	edx, 21720				; 000054d8H
	sar	eax, 2
	add	eax, ecx
	mov	DWORD PTR _stextvhold, ecx
	imul	eax, 368				; 00000170H
	mov	ecx, eax
	push	esi
	sub	ecx, edx
	push	edi
	lea	edi, DWORD PTR _plr[edx+21176]
	sub	ecx, OFFSET FLAT:_plr+21176
	mov	DWORD PTR _stextshold, 4
	push	92					; 0000005cH
	lea	esi, DWORD PTR _storehold[ecx+edi]
; Line 2817
	pop	ecx
	rep movsd
; Line 2821
	mov	cl, 9
; Line 2820
	mov	edx, DWORD PTR _plr[edx+460]
	pop	edi
	pop	esi
	sub	edx, DWORD PTR _storehold[eax+200]
; Line 2822
	js	SHORT $L86250
; Line 2823
	add	cl, 2
$L86250:
; Line 2824
	jmp	@StartStore@4
_S_SRepairEnter ENDP
_TEXT	ENDS
PUBLIC	_S_WitchEnter
; Function compile flags: /Ogsy
;	COMDAT _S_WitchEnter
_TEXT	SEGMENT
_S_WitchEnter PROC NEAR					; COMDAT
; Line 2837
	mov	eax, DWORD PTR _stextsel
	push	12					; 0000000cH
	pop	ecx
	cmp	eax, ecx
	jne	SHORT $L86253
; Line 2838
	mov	DWORD PTR _stextlhold, ecx
; Line 2839
	mov	DWORD PTR _talker, 6
; Line 2840
	mov	DWORD PTR _stextshold, 5
; Line 2841
	mov	DWORD PTR _gossipstart, 213		; 000000d5H
; Line 2842
	mov	DWORD PTR _gossipend, 223		; 000000dfH
; Line 2843
	mov	cl, 19					; 00000013H
; Line 2844
	jmp	SHORT $LABEL_12$86255
$L86253:
; Line 2847
	sub	eax, 14					; 0000000eH
	je	SHORT $L86260
	dec	eax
	dec	eax
	je	SHORT $L86262
	dec	eax
	dec	eax
	je	SHORT $L86264
	dec	eax
	dec	eax
	jne	SHORT $L86257
; Line 2860
	and	BYTE PTR _stextflag, 0
$L86257:
; Line 2863
	ret	0
$L86264:
; Line 2855
	mov	cl, 8
	jmp	SHORT $LABEL_12$86255
$L86262:
; Line 2852
	mov	cl, 7
; Line 2853
	jmp	SHORT $LABEL_12$86255
$L86260:
; Line 2849
	mov	cl, 6
$LABEL_12$86255:
; Line 2857
	jmp	@StartStore@4
_S_WitchEnter ENDP
_TEXT	ENDS
PUBLIC	_WitchBuyItem
EXTRN	_GetRndSeed:NEAR
; Function compile flags: /Ogsy
;	COMDAT _WitchBuyItem
_TEXT	SEGMENT
_WitchBuyItem PROC NEAR					; COMDAT
; Line 2872
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 2877
	mov	esi, DWORD PTR _stextlhold
	sub	esi, DWORD PTR _stextup
	sar	esi, 2
	add	esi, DWORD PTR _stextvhold
; Line 2879
	cmp	esi, 3
	jge	SHORT $L87458
; Line 2880
	call	_GetRndSeed
	mov	ecx, DWORD PTR _myplr
	mov	edx, ecx
	imul	edx, 21720				; 000054d8H
	mov	DWORD PTR _plr[edx+21176], eax
	jmp	SHORT $L86271
$L87458:
	mov	ecx, DWORD PTR _myplr
$L86271:
; Line 2882
	imul	ecx, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[ecx+21376]
	call	@TakePlrsMoney@4
; Line 2883
	call	_StoreAutoPlace
; Line 2885
	cmp	esi, 3
	jl	SHORT $L86274
; Line 2886
	cmp	esi, 19					; 00000013H
	jne	SHORT $L86273
; Line 2887
	or	DWORD PTR _witchitem+7000, -1
; Line 2888
	jmp	SHORT $L86274
$L86273:
; Line 2889
	mov	eax, esi
	imul	eax, 368				; 00000170H
	cmp	DWORD PTR _witchitem[eax+376], -1
	je	SHORT $L86278
; Line 2890
	lea	ecx, DWORD PTR _witchitem[eax]
	push	ebx
	mov	eax, 368				; 00000170H
	push	edi
$L86276:
; Line 2892
	mov	edi, ecx
; Line 2893
	add	ecx, eax
; Line 2895
	mov	edx, ecx
	inc	esi
	sub	edx, edi
	mov	DWORD PTR -4+[ebp], eax
$L87452:
	mov	bl, BYTE PTR [edx+edi]
	mov	BYTE PTR [edi], bl
	inc	edi
	dec	DWORD PTR -4+[ebp]
	jne	SHORT $L87452
; Line 2896
	cmp	DWORD PTR [ecx+376], -1
	jne	SHORT $L86276
	pop	edi
	pop	ebx
$L86278:
; Line 2898
	imul	esi, 368				; 00000170H
	or	DWORD PTR _witchitem[esi+8], -1
$L86274:
; Line 2901
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	inc	edx
	call	@CalcPlrInv@8
	pop	esi
; Line 2902
	leave
	ret	0
_WitchBuyItem ENDP
_TEXT	ENDS
PUBLIC	_S_WBuyEnter
EXTRN	@SpecialAutoPlace@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT _S_WBuyEnter
_TEXT	SEGMENT
_S_WBuyEnter PROC NEAR					; COMDAT
; Line 2913
	mov	eax, DWORD PTR _stextsel
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86284
; Line 2914
	mov	cl, 5
	call	@StartStore@4
; Line 2915
	mov	DWORD PTR _stextsel, 14			; 0000000eH
; Line 2943
	ret	0
$L86284:
	mov	ecx, DWORD PTR _stextsval
	mov	edx, DWORD PTR _myplr
	mov	DWORD PTR _stextlhold, eax
	sub	eax, DWORD PTR _stextup
	imul	edx, 21720				; 000054d8H
	sar	eax, 2
	add	eax, ecx
	mov	DWORD PTR _stextvhold, ecx
	imul	eax, 368				; 00000170H
	mov	ecx, DWORD PTR _plr[edx+460]
	mov	DWORD PTR _stextshold, 6
	cmp	ecx, DWORD PTR _witchitem[eax+200]
	jl	SHORT $L86286
	push	esi
	sub	eax, edx
	push	edi
	lea	edi, DWORD PTR _plr[edx+21176]
	sub	eax, OFFSET FLAT:_plr+21176
	push	92					; 0000005cH
	lea	esi, DWORD PTR _witchitem[eax+edi]
; Line 2923
	pop	ecx
	rep movsd
; Line 2924
	mov	ecx, DWORD PTR _plr[edx+21368]
	add	ecx, 12					; 0000000cH
	call	@SetCursor_@4
; Line 2925
	xor	eax, eax
; Line 2927
	xor	esi, esi
$L86288:
; Line 2928
	test	eax, eax
	jne	SHORT $L87475
; Line 2930
	push	eax
	mov	eax, DWORD PTR _cursH
	push	28					; 0000001cH
	cdq
	pop	ecx
	idiv	ecx
	push	eax
	mov	eax, DWORD PTR _cursW
	cdq
	idiv	ecx
	mov	ecx, DWORD PTR _myplr
	mov	edx, esi
	push	eax
	call	@SpecialAutoPlace@20
	inc	esi
	cmp	esi, 40					; 00000028H
	jl	SHORT $L86288
; Line 2933
	test	eax, eax
	je	SHORT $L86292
$L87475:
; Line 2934
	mov	cl, 11					; 0000000bH
; Line 2935
	jmp	SHORT $L87476
$L86292:
; Line 2936
	mov	cl, 10					; 0000000aH
$L87476:
	call	@StartStore@4
; Line 2938
	xor	ecx, ecx
	pop	edi
	inc	ecx
	pop	esi
	jmp	@SetCursor_@4
$L86286:
; Line 2940
	mov	cl, 9
	jmp	@StartStore@4
_S_WBuyEnter ENDP
_TEXT	ENDS
PUBLIC	_S_WSellEnter
; Function compile flags: /Ogsy
;	COMDAT _S_WSellEnter
_TEXT	SEGMENT
_S_WSellEnter PROC NEAR					; COMDAT
; Line 2955
	mov	eax, DWORD PTR _stextsel
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86298
; Line 2956
	mov	cl, 5
	call	@StartStore@4
; Line 2957
	mov	DWORD PTR _stextsel, 16			; 00000010H
; Line 2969
	ret	0
$L86298:
	mov	ecx, DWORD PTR _stextsval
	mov	DWORD PTR _stextlhold, eax
	sub	eax, DWORD PTR _stextup
	mov	DWORD PTR _stextvhold, ecx
	push	ebx
	push	esi
	sar	eax, 2
	add	eax, ecx
	mov	ecx, DWORD PTR _myplr
	mov	edx, eax
	imul	ecx, 21720				; 000054d8H
	imul	edx, 368				; 00000170H
	sub	edx, ecx
	push	edi
	lea	edi, DWORD PTR _plr[ecx+21176]
	sub	edx, OFFSET FLAT:_plr+21176
	mov	DWORD PTR _stextshold, 7
	push	92					; 0000005cH
	lea	esi, DWORD PTR _storehold[edx+edi]
; Line 2963
	pop	ecx
	rep movsd
; Line 2964
	mov	bl, 11					; 0000000bH
; Line 2965
	mov	ecx, eax
	call	@StoreGoldFit@4
	test	al, al
	jne	SHORT $L86300
; Line 2966
	dec	bl
$L86300:
	pop	edi
; Line 2967
	mov	cl, bl
	pop	esi
	pop	ebx
	jmp	@StartStore@4
_S_WSellEnter ENDP
_TEXT	ENDS
PUBLIC	_WitchRechargeItem
; Function compile flags: /Ogsy
;	COMDAT _WitchRechargeItem
_TEXT	SEGMENT
_WitchRechargeItem PROC NEAR				; COMDAT
; Line 2980
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+21376]
	call	@TakePlrsMoney@4
; Line 2982
	mov	eax, DWORD PTR _stextlhold
	sub	eax, DWORD PTR _stextup
	sar	eax, 2
	add	eax, DWORD PTR _stextvhold
; Line 2983
	movsx	ecx, BYTE PTR _storehidx[eax]
; Line 2984
	imul	eax, 368				; 00000170H
	mov	edx, DWORD PTR _storehold[eax+232]
	mov	DWORD PTR _storehold[eax+228], edx
; Line 2987
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	test	ecx, ecx
	jl	SHORT $L86304
	imul	ecx, 368				; 00000170H
	add	eax, ecx
	mov	ecx, DWORD PTR _plr[eax+3700]
	mov	DWORD PTR _plr[eax+3696], ecx
; Line 2988
	jmp	SHORT $L86305
$L86304:
; Line 2989
	mov	ecx, DWORD PTR _plr[eax+2596]
	mov	DWORD PTR _plr[eax+2592], ecx
$L86305:
; Line 2991
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	inc	edx
	jmp	@CalcPlrInv@8
_WitchRechargeItem ENDP
_TEXT	ENDS
PUBLIC	_S_WRechargeEnter
; Function compile flags: /Ogsy
;	COMDAT _S_WRechargeEnter
_TEXT	SEGMENT
_S_WRechargeEnter PROC NEAR				; COMDAT
; Line 3006
	mov	eax, DWORD PTR _stextsel
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86312
; Line 3007
	mov	cl, 5
	call	@StartStore@4
; Line 3008
	mov	DWORD PTR _stextsel, 18			; 00000012H
; Line 3024
	ret	0
$L86312:
	mov	ecx, DWORD PTR _stextsval
	mov	DWORD PTR _stextlhold, eax
	sub	eax, DWORD PTR _stextup
	mov	edx, DWORD PTR _myplr
	imul	edx, 21720				; 000054d8H
	sar	eax, 2
	add	eax, ecx
	mov	DWORD PTR _stextvhold, ecx
	imul	eax, 368				; 00000170H
	mov	ecx, eax
	push	esi
	sub	ecx, edx
	push	edi
	lea	edi, DWORD PTR _plr[edx+21176]
	sub	ecx, OFFSET FLAT:_plr+21176
	mov	DWORD PTR _stextshold, 8
	push	92					; 0000005cH
	lea	esi, DWORD PTR _storehold[ecx+edi]
; Line 3015
	pop	ecx
	rep movsd
; Line 3019
	mov	cl, 9
; Line 3018
	mov	edx, DWORD PTR _plr[edx+460]
	pop	edi
	pop	esi
	sub	edx, DWORD PTR _storehold[eax+200]
; Line 3020
	js	SHORT $L86314
; Line 3021
	add	cl, 2
$L86314:
; Line 3022
	jmp	@StartStore@4
_S_WRechargeEnter ENDP
_TEXT	ENDS
PUBLIC	_S_BoyEnter
; Function compile flags: /Ogsy
;	COMDAT _S_BoyEnter
_TEXT	SEGMENT
_S_BoyEnter PROC NEAR					; COMDAT
; Line 3035
	mov	ecx, DWORD PTR _boyitem+8
	mov	eax, DWORD PTR _stextsel
	cmp	ecx, -1
	je	SHORT $L86317
	push	18					; 00000012H
	pop	edx
	cmp	eax, edx
	jne	SHORT $L86317
; Line 3037
	mov	eax, DWORD PTR _myplr
	push	50					; 00000032H
	imul	eax, 21720				; 000054d8H
	pop	ecx
	cmp	DWORD PTR _plr[eax+460], ecx
	jl	SHORT $L86318
; Line 3038
	call	@TakePlrsMoney@4
; Line 3039
	mov	cl, 13					; 0000000dH
; Line 3040
	jmp	SHORT $LABEL_5$86322
$L86318:
; Line 3043
	mov	eax, DWORD PTR _stextsval
	mov	DWORD PTR _stextshold, 12		; 0000000cH
	mov	DWORD PTR _stextlhold, edx
	mov	DWORD PTR _stextvhold, eax
; Line 3044
	mov	cl, 9
; Line 3046
	jmp	SHORT $LABEL_5$86322
$L86317:
; Line 3048
	push	12					; 0000000cH
	cmp	eax, 8
	pop	edx
	jne	SHORT $L86325
	cmp	ecx, -1
	jne	SHORT $L86324
$L86325:
	cmp	eax, edx
	jne	SHORT $L86323
	cmp	ecx, -1
	jne	SHORT $L86323
$L86324:
; Line 3049
	mov	DWORD PTR _talker, 8
; Line 3050
	mov	DWORD PTR _stextshold, edx
; Line 3051
	mov	DWORD PTR _stextlhold, eax
; Line 3052
	mov	DWORD PTR _gossipstart, 225		; 000000e1H
; Line 3053
	mov	DWORD PTR _gossipend, 234		; 000000eaH
; Line 3054
	mov	cl, 19					; 00000013H
$LABEL_5$86322:
; Line 3056
	jmp	@StartStore@4
$L86323:
; Line 3059
	and	BYTE PTR _stextflag, 0
; Line 3060
	ret	0
_S_BoyEnter ENDP
_TEXT	ENDS
PUBLIC	_BoyBuyItem
; Function compile flags: /Ogsy
;	COMDAT _BoyBuyItem
_TEXT	SEGMENT
_BoyBuyItem PROC NEAR					; COMDAT
; Line 3071
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+21376]
	call	@TakePlrsMoney@4
; Line 3072
	call	_StoreAutoPlace
; Line 3073
	or	DWORD PTR _boyitem+8, -1
; Line 3075
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	mov	DWORD PTR _stextshold, 12		; 0000000cH
	inc	edx
	jmp	@CalcPlrInv@8
_BoyBuyItem ENDP
_TEXT	ENDS
PUBLIC	_HealerBuyItem
; Function compile flags: /Ogsy
;	COMDAT _HealerBuyItem
_TEXT	SEGMENT
_v10$ = -1
_HealerBuyItem PROC NEAR				; COMDAT
; Line 3079
	push	ecx
	push	esi
; Line 3092
	mov	esi, DWORD PTR _stextlhold
	sub	esi, DWORD PTR _stextup
	sar	esi, 2
	add	esi, DWORD PTR _stextvhold
; Line 3093
	cmp	BYTE PTR _gbMaxPlayers, 1
; Line 3095
	lea	eax, DWORD PTR [esi-2]
	je	SHORT $L87530
; Line 3098
	lea	eax, DWORD PTR [esi-3]
$L87530:
	test	eax, eax
	setl	al
; Line 3100
	test	al, al
	je	SHORT $L86340
; Line 3101
	call	_GetRndSeed
; Line 3102
	mov	ecx, DWORD PTR _myplr
	mov	edx, ecx
; Line 3103
	imul	ecx, 21720				; 000054d8H
	mov	DWORD PTR _plr[ecx+21176], eax
; Line 3104
	jmp	SHORT $L86341
$L86340:
; Line 3105
	mov	edx, DWORD PTR _myplr
$L86341:
; Line 3107
	imul	edx, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[edx+21376]
	call	@TakePlrsMoney@4
; Line 3108
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+21236], 0
	jne	SHORT $L86342
; Line 3109
	and	DWORD PTR _plr[eax+21232], 0
$L86342:
; Line 3110
	call	_StoreAutoPlace
; Line 3111
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L86343
; Line 3113
	add	esi, -2					; fffffffeH
; Line 3114
	jmp	SHORT $L87531
$L86343:
; Line 3116
	add	esi, -3					; fffffffdH
$L87531:
	test	esi, esi
	setl	al
; Line 3118
	test	al, al
	jne	$L86345
; Line 3119
	mov	ecx, DWORD PTR _stextlhold
	sub	ecx, DWORD PTR _stextup
	sar	ecx, 2
	add	ecx, DWORD PTR _stextvhold
; Line 3120
	cmp	ecx, 19					; 00000013H
	jne	SHORT $L86346
; Line 3121
	or	DWORD PTR _healitem+7000, -1
; Line 3122
	jmp	SHORT $L86347
$L86346:
; Line 3123
	mov	eax, ecx
	imul	eax, 368				; 00000170H
	cmp	DWORD PTR _healitem[eax+376], -1
	je	SHORT $L86351
	push	ebx
	push	ebp
	push	edi
; Line 3124
	lea	eax, DWORD PTR _healitem[eax]
	mov	esi, 368				; 00000170H
$L86349:
; Line 3126
	mov	edi, eax
; Line 3127
	add	eax, esi
; Line 3128
	inc	ecx
; Line 3130
	mov	ebp, eax
	cmp	DWORD PTR [eax+376], -1
	mov	edx, esi
	sete	BYTE PTR _v10$[esp+20]
	sub	ebp, edi
$L87522:
	mov	bl, BYTE PTR [edi+ebp]
	mov	BYTE PTR [edi], bl
	inc	edi
	dec	edx
	jne	SHORT $L87522
; Line 3131
	cmp	BYTE PTR _v10$[esp+20], 0
	je	SHORT $L86349
	pop	edi
	pop	ebp
	pop	ebx
$L86351:
; Line 3133
	imul	ecx, 368				; 00000170H
	or	DWORD PTR _healitem[ecx+8], -1
$L86347:
; Line 3135
	mov	ecx, DWORD PTR _myplr
	xor	edx, edx
	pop	esi
	inc	edx
; Line 3137
	add	esp, 4
	jmp	@CalcPlrInv@8
$L86345:
	pop	esi
	pop	ecx
	ret	0
_HealerBuyItem ENDP
_TEXT	ENDS
PUBLIC	_S_BBuyEnter
; Function compile flags: /Ogsy
;	COMDAT _S_BBuyEnter
_TEXT	SEGMENT
_S_BBuyEnter PROC NEAR					; COMDAT
; Line 3151
	cmp	DWORD PTR _stextsel, 10			; 0000000aH
	jne	$L86359
; Line 3153
	mov	eax, DWORD PTR _stextsval
; Line 3157
	mov	ecx, DWORD PTR _boyitem+200
	mov	DWORD PTR _stextvhold, eax
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	edx, ecx
	mov	DWORD PTR _stextshold, 13		; 0000000dH
	sar	edx, 1
	add	edx, ecx
	mov	DWORD PTR _stextlhold, 10		; 0000000aH
	cmp	DWORD PTR _plr[eax+460], edx
	jl	$L86360
	push	esi
	push	edi
; Line 3158
	lea	edi, DWORD PTR _plr[eax+21176]
	push	92					; 0000005cH
	mov	esi, edi
	pop	ecx
	sub	esi, eax
	sub	esi, OFFSET FLAT:_plr+21176
	add	esi, OFFSET FLAT:_boyitem
	rep movsd
; Line 3159
	lea	ecx, DWORD PTR _plr[eax+21376]
	mov	edx, DWORD PTR [ecx]
	mov	esi, edx
	sar	esi, 1
	add	esi, edx
	mov	DWORD PTR [ecx], esi
; Line 3160
	mov	ecx, DWORD PTR _plr[eax+21368]
	add	ecx, 12					; 0000000cH
	call	@SetCursor_@4
; Line 3161
	xor	eax, eax
; Line 3162
	xor	esi, esi
$L86361:
; Line 3164
	test	eax, eax
	jne	SHORT $LABEL_8$86365
; Line 3166
	push	eax
	mov	eax, DWORD PTR _cursH
	push	28					; 0000001cH
	mov	ecx, esi
	cdq
	pop	edi
	inc	esi
	idiv	edi
	push	eax
	mov	eax, DWORD PTR _cursW
	cdq
	idiv	edi
	mov	edx, ecx
	mov	ecx, DWORD PTR _myplr
	push	eax
	call	@AutoPlace@20
; Line 3167
	cmp	esi, 40					; 00000028H
	jl	SHORT $L86361
; Line 3168
	test	eax, eax
	je	SHORT $L86366
$LABEL_8$86365:
; Line 3170
	mov	cl, 11					; 0000000bH
; Line 3171
	jmp	SHORT $LABEL_10$86368
$L86366:
; Line 3173
	mov	cl, 10					; 0000000aH
$LABEL_10$86368:
; Line 3175
	call	@StartStore@4
; Line 3176
	xor	ecx, ecx
	pop	edi
	inc	ecx
	pop	esi
	jmp	@SetCursor_@4
$L86360:
; Line 3179
	mov	cl, 9
	jmp	@StartStore@4
$L86359:
; Line 3182
	and	BYTE PTR _stextflag, 0
; Line 3184
	ret	0
_S_BBuyEnter ENDP
_TEXT	ENDS
PUBLIC	_StoryIdItem
; Function compile flags: /Ogsy
;	COMDAT _StoryIdItem
_TEXT	SEGMENT
_StoryIdItem PROC NEAR					; COMDAT
; Line 3197
	mov	eax, DWORD PTR _stextlhold
	mov	ecx, DWORD PTR _stextvhold
	sub	eax, DWORD PTR _stextup
	push	esi
; Line 3200
	xor	esi, esi
	sar	eax, 2
	movsx	ecx, BYTE PTR _storehidx[eax+ecx]
	mov	eax, DWORD PTR _myplr
	test	ecx, ecx
	jl	SHORT $L86377
	mov	edx, eax
	imul	ecx, 368				; 00000170H
	imul	edx, 21720				; 000054d8H
	inc	esi
	mov	DWORD PTR _plr[edx+ecx+3524], esi
; Line 3201
	jmp	$L86385
$L86377:
; Line 3202
	inc	esi
	cmp	ecx, -1
	jne	SHORT $L86379
; Line 3203
	mov	edx, eax
	imul	edx, 21720				; 000054d8H
	mov	DWORD PTR _plr[edx+948], esi
$L86379:
; Line 3204
	cmp	ecx, -2					; fffffffeH
	jne	SHORT $L86380
; Line 3205
	mov	edx, eax
	imul	edx, 21720				; 000054d8H
	mov	DWORD PTR _plr[edx+3156], esi
$L86380:
; Line 3206
	cmp	ecx, -3					; fffffffdH
	jne	SHORT $L86381
; Line 3207
	mov	edx, eax
	imul	edx, 21720				; 000054d8H
	mov	DWORD PTR _plr[edx+2420], esi
$L86381:
; Line 3208
	cmp	ecx, -4					; fffffffcH
	jne	SHORT $L86382
; Line 3209
	mov	edx, eax
	imul	edx, 21720				; 000054d8H
	mov	DWORD PTR _plr[edx+2788], esi
$L86382:
; Line 3210
	cmp	ecx, -5					; fffffffbH
	jne	SHORT $L86383
; Line 3211
	mov	edx, eax
	imul	edx, 21720				; 000054d8H
	mov	DWORD PTR _plr[edx+1316], esi
$L86383:
; Line 3212
	cmp	ecx, -6					; fffffffaH
	jne	SHORT $L86384
; Line 3213
	mov	edx, eax
	imul	edx, 21720				; 000054d8H
	mov	DWORD PTR _plr[edx+1684], esi
$L86384:
; Line 3214
	cmp	ecx, -7					; fffffff9H
	jne	SHORT $L86385
; Line 3215
	mov	ecx, eax
	imul	ecx, 21720				; 000054d8H
	mov	DWORD PTR _plr[ecx+2052], esi
$L86385:
; Line 3218
	imul	eax, 21720				; 000054d8H
; Line 3219
	mov	ecx, DWORD PTR _plr[eax+21376]
	mov	DWORD PTR _plr[eax+21232], esi
	call	@TakePlrsMoney@4
; Line 3220
	mov	ecx, DWORD PTR _myplr
	mov	edx, esi
	pop	esi
	jmp	@CalcPlrInv@8
_StoryIdItem ENDP
_TEXT	ENDS
PUBLIC	_S_ConfirmEnter
; Function compile flags: /Ogsy
;	COMDAT _S_ConfirmEnter
_TEXT	SEGMENT
_S_ConfirmEnter PROC NEAR				; COMDAT
; Line 3230
	cmp	DWORD PTR _stextsel, 18			; 00000012H
	jne	SHORT $L86388
; Line 3231
	mov	eax, DWORD PTR _stextshold
	cmp	eax, 8
	jle	SHORT $L86389
; Line 3232
	sub	eax, 13					; 0000000dH
	je	SHORT $L86394
	sub	eax, 3
	je	SHORT $L86395
	dec	eax
	je	SHORT $L86396
	dec	eax
	jne	SHORT $L86401
; Line 3246
	call	_SmithBuyPItem
; Line 3247
	jmp	SHORT $L86401
$L86396:
; Line 3240
	call	_StoryIdItem
; Line 3241
	mov	cl, 20					; 00000014H
	jmp	SHORT $LABEL_20$86397
$L86395:
; Line 3237
	call	_HealerBuyItem
; Line 3238
	jmp	SHORT $L86401
$L86394:
; Line 3234
	call	_BoyBuyItem
; Line 3249
	jmp	SHORT $L86401
$L86389:
; Line 3250
	dec	eax
	dec	eax
	je	SHORT $L86405
	dec	eax
	je	SHORT $LABEL_27$86407
	dec	eax
	je	SHORT $L86408
	dec	eax
	dec	eax
	je	SHORT $L86409
	dec	eax
	je	SHORT $LABEL_27$86407
	dec	eax
	jne	SHORT $L86401
; Line 3252
	call	_WitchRechargeItem
; Line 3253
	jmp	SHORT $L86401
$L86409:
; Line 3263
	call	_WitchBuyItem
; Line 3264
	jmp	SHORT $L86401
$L86408:
; Line 3260
	call	_SmithRepairItem
; Line 3261
	jmp	SHORT $L86401
$LABEL_27$86407:
; Line 3267
	call	_StoreSellItem
; Line 3268
	jmp	SHORT $L86401
$L86405:
; Line 3255
	call	_SmithBuyItem
$L86401:
; Line 3271
	mov	cl, BYTE PTR _stextshold
$LABEL_20$86397:
; Line 3243
	jmp	@StartStore@4
$L86388:
; Line 3274
	mov	cl, BYTE PTR _stextshold
	call	@StartStore@4
; Line 3275
	mov	eax, DWORD PTR _stextlhold
	mov	DWORD PTR _stextsel, eax
; Line 3276
	mov	eax, DWORD PTR _stextvhold
	mov	DWORD PTR _stextsval, eax
; Line 3277
	ret	0
_S_ConfirmEnter ENDP
_TEXT	ENDS
PUBLIC	_S_HealerEnter
EXTRN	_drawhpflag:DWORD
; Function compile flags: /Ogsy
;	COMDAT _S_HealerEnter
_TEXT	SEGMENT
_S_HealerEnter PROC NEAR				; COMDAT
; Line 3288
	mov	eax, DWORD PTR _stextsel
	push	12					; 0000000cH
	pop	ecx
	cmp	eax, ecx
	jne	SHORT $L86415
; Line 3289
	mov	DWORD PTR _stextlhold, ecx
; Line 3290
	mov	DWORD PTR _talker, 1
; Line 3291
	mov	DWORD PTR _stextshold, 14		; 0000000eH
; Line 3292
	mov	DWORD PTR _gossipstart, 170		; 000000aaH
; Line 3293
	mov	DWORD PTR _gossipend, 178		; 000000b2H
; Line 3294
	mov	cl, 19					; 00000013H
$LABEL_12$86417:
; Line 3305
	jmp	@StartStore@4
$L86415:
; Line 3297
	cmp	eax, 14					; 0000000eH
	je	SHORT $L86418
; Line 3298
	push	16					; 00000010H
	pop	ecx
	cmp	eax, ecx
	je	SHORT $LABEL_12$86417
; Line 3299
	cmp	eax, 18					; 00000012H
	jne	SHORT $L86412
; Line 3300
	and	BYTE PTR _stextflag, 0
; Line 3314
	ret	0
$L86418:
; Line 3308
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+408]
	cmp	ecx, DWORD PTR _plr[eax+412]
	je	SHORT $L86422
; Line 3309
	push	82					; 00000052H
	pop	ecx
	call	@PlaySFX@4
$L86422:
; Line 3312
	mov	eax, DWORD PTR _myplr
	mov	DWORD PTR _drawhpflag, 1
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+412]
	mov	DWORD PTR _plr[eax+408], ecx
; Line 3313
	mov	ecx, DWORD PTR _plr[eax+404]
	mov	DWORD PTR _plr[eax+400], ecx
$L86412:
; Line 3314
	ret	0
_S_HealerEnter ENDP
_TEXT	ENDS
PUBLIC	_S_HBuyEnter
; Function compile flags: /Ogsy
;	COMDAT _S_HBuyEnter
_TEXT	SEGMENT
_S_HBuyEnter PROC NEAR					; COMDAT
; Line 3330
	mov	eax, DWORD PTR _stextsel
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86429
; Line 3331
	mov	cl, 14					; 0000000eH
	call	@StartStore@4
; Line 3332
	mov	DWORD PTR _stextsel, 16			; 00000010H
; Line 3362
	ret	0
$L86429:
	mov	ecx, DWORD PTR _stextsval
	mov	edx, DWORD PTR _myplr
	mov	DWORD PTR _stextlhold, eax
	sub	eax, DWORD PTR _stextup
	imul	edx, 21720				; 000054d8H
	sar	eax, 2
	add	eax, ecx
	mov	DWORD PTR _stextvhold, ecx
	imul	eax, 368				; 00000170H
	mov	ecx, DWORD PTR _plr[edx+460]
	mov	DWORD PTR _stextshold, 16		; 00000010H
	cmp	ecx, DWORD PTR _healitem[eax+200]
	jl	SHORT $L86431
	push	esi
	sub	eax, edx
	push	edi
	lea	edi, DWORD PTR _plr[edx+21176]
	sub	eax, OFFSET FLAT:_plr+21176
	push	92					; 0000005cH
	lea	esi, DWORD PTR _healitem[eax+edi]
; Line 3340
	pop	ecx
	rep movsd
; Line 3341
	mov	ecx, DWORD PTR _plr[edx+21368]
	add	ecx, 12					; 0000000cH
	call	@SetCursor_@4
; Line 3342
	xor	eax, eax
; Line 3343
	xor	esi, esi
$L86432:
; Line 3345
	test	eax, eax
	jne	SHORT $LABEL_9$86436
; Line 3347
	push	eax
	mov	eax, DWORD PTR _cursH
	push	28					; 0000001cH
	mov	ecx, esi
	cdq
	pop	edi
	inc	esi
	idiv	edi
	push	eax
	mov	eax, DWORD PTR _cursW
	cdq
	idiv	edi
	mov	edx, ecx
	mov	ecx, DWORD PTR _myplr
	push	eax
	call	@SpecialAutoPlace@20
; Line 3348
	cmp	esi, 40					; 00000028H
	jl	SHORT $L86432
; Line 3349
	test	eax, eax
	je	SHORT $L86437
$LABEL_9$86436:
; Line 3351
	mov	cl, 11					; 0000000bH
; Line 3352
	jmp	SHORT $LABEL_11$86438
$L86437:
; Line 3354
	mov	cl, 10					; 0000000aH
$LABEL_11$86438:
; Line 3356
	call	@StartStore@4
; Line 3357
	xor	ecx, ecx
	pop	edi
	inc	ecx
	pop	esi
	jmp	@SetCursor_@4
$L86431:
; Line 3359
	mov	cl, 9
	jmp	@StartStore@4
_S_HBuyEnter ENDP
_TEXT	ENDS
PUBLIC	_S_StoryEnter
; Function compile flags: /Ogsy
;	COMDAT _S_StoryEnter
_TEXT	SEGMENT
_S_StoryEnter PROC NEAR					; COMDAT
; Line 3374
	mov	eax, DWORD PTR _stextsel
	push	12					; 0000000cH
	pop	ecx
	sub	eax, ecx
	je	SHORT $L86446
	dec	eax
	dec	eax
	je	SHORT $L86449
	sub	eax, 4
	jne	SHORT $L86443
; Line 3389
	and	BYTE PTR _stextflag, 0
$L86443:
; Line 3392
	ret	0
$L86449:
; Line 3384
	mov	cl, 17					; 00000011H
	jmp	SHORT $LABEL_8$86448
$L86446:
; Line 3376
	mov	DWORD PTR _stextlhold, ecx
; Line 3377
	mov	DWORD PTR _talker, 4
; Line 3378
	mov	DWORD PTR _stextshold, 15		; 0000000fH
; Line 3379
	mov	DWORD PTR _gossipstart, 151		; 00000097H
; Line 3380
	mov	DWORD PTR _gossipend, 159		; 0000009fH
; Line 3381
	mov	cl, 19					; 00000013H
$LABEL_8$86448:
; Line 3386
	jmp	@StartStore@4
_S_StoryEnter ENDP
_TEXT	ENDS
PUBLIC	_S_SIDEnter
; Function compile flags: /Ogsy
;	COMDAT _S_SIDEnter
_TEXT	SEGMENT
_S_SIDEnter PROC NEAR					; COMDAT
; Line 3409
	mov	eax, DWORD PTR _stextsel
	cmp	eax, 22					; 00000016H
	jne	SHORT $L86458
; Line 3410
	mov	cl, 15					; 0000000fH
	call	@StartStore@4
; Line 3411
	mov	DWORD PTR _stextsel, 14			; 0000000eH
; Line 3427
	ret	0
$L86458:
	mov	ecx, DWORD PTR _stextsval
	mov	DWORD PTR _stextlhold, eax
	sub	eax, DWORD PTR _stextup
	mov	edx, DWORD PTR _myplr
	imul	edx, 21720				; 000054d8H
	sar	eax, 2
	add	eax, ecx
	mov	DWORD PTR _stextvhold, ecx
	imul	eax, 368				; 00000170H
	mov	ecx, eax
	push	esi
	sub	ecx, edx
	push	edi
	lea	edi, DWORD PTR _plr[edx+21176]
	sub	ecx, OFFSET FLAT:_plr+21176
	mov	DWORD PTR _stextshold, 17		; 00000011H
	push	92					; 0000005cH
	lea	esi, DWORD PTR _storehold[ecx+edi]
; Line 3418
	pop	ecx
	rep movsd
; Line 3422
	mov	cl, 9
; Line 3421
	mov	edx, DWORD PTR _plr[edx+460]
	pop	edi
	pop	esi
	sub	edx, DWORD PTR _storehold[eax+200]
; Line 3423
	js	SHORT $L86460
; Line 3424
	add	cl, 2
$L86460:
; Line 3425
	jmp	@StartStore@4
_S_SIDEnter ENDP
_TEXT	ENDS
PUBLIC	_S_TalkEnter
EXTRN	_towner:BYTE
EXTRN	@InitQTextMsg@4:NEAR
EXTRN	@random@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _S_TalkEnter
_TEXT	SEGMENT
_v0$ = -4
_S_TalkEnter PROC NEAR					; COMDAT
; Line 3434
	push	ecx
	push	ebx
; Line 3446
	mov	ebx, DWORD PTR _stextsel
	push	ebp
	push	esi
	cmp	ebx, 22					; 00000016H
	push	edi
	jne	SHORT $L86472
; Line 3447
	mov	cl, BYTE PTR _stextshold
	call	@StartStore@4
; Line 3448
	mov	eax, DWORD PTR _stextlhold
	mov	DWORD PTR _stextsel, eax
; Line 3449
	jmp	$L86489
$L86472:
; Line 3450
	mov	ecx, DWORD PTR _talker
; Line 3451
	mov	eax, OFFSET FLAT:_quests+20
; Line 3452
	xor	edx, edx
	mov	DWORD PTR _v0$[esp+20], ecx
	mov	edi, eax
; Line 3453
	xor	esi, esi
$L86475:
; Line 3456
	cmp	BYTE PTR [eax-18], 2
	jne	SHORT $L86480
	mov	ebp, ecx
	shl	ebp, 4
	add	ebp, esi
	cmp	DWORD PTR _Qtalklist[ebp*4], -1
	je	SHORT $L86480
	cmp	DWORD PTR [eax], 0
	je	SHORT $L86480
; Line 3457
	inc	edx
$L86480:
; Line 3458
	add	eax, 24					; 00000018H
; Line 3459
	inc	esi
; Line 3460
	cmp	eax, OFFSET FLAT:_quests+404
	jl	SHORT $L86475
; Line 3461
	cmp	edx, 6
	jg	SHORT $L86483
; Line 3462
	push	15					; 0000000fH
	pop	esi
; Line 3463
	push	2
	sub	esi, edx
	pop	ebp
; Line 3464
	jmp	SHORT $L86484
$L86483:
; Line 3465
	push	14					; 0000000eH
; Line 3466
	xor	ebp, ebp
	sar	edx, 1
	pop	esi
	sub	esi, edx
	inc	ebp
$L86484:
; Line 3468
	lea	eax, DWORD PTR [esi-2]
	cmp	ebx, eax
	jne	SHORT $L86485
; Line 3469
	imul	ecx, 232				; 000000e8H
	mov	ecx, DWORD PTR _towner[ecx+140]
	call	@SetRndSeed@4
; Line 3470
	mov	edx, DWORD PTR _gossipend
	xor	cl, cl
	sub	edx, DWORD PTR _gossipstart
	inc	edx
	call	@random@8
; Line 3471
	mov	ecx, DWORD PTR _gossipstart
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	ecx, eax
; Line 3492
	add	esp, 4
	jmp	@InitQTextMsg@4
$L86485:
; Line 3473
	xor	ebx, ebx
$L86487:
; Line 3475
	cmp	BYTE PTR [edi-18], 2
	jne	SHORT $L86494
; Line 3476
	mov	eax, DWORD PTR _v0$[esp+20]
	shl	eax, 4
	add	eax, ebx
	mov	ecx, DWORD PTR _Qtalklist[eax*4]
; Line 3477
	cmp	ecx, -1
	je	SHORT $L86494
; Line 3478
	cmp	DWORD PTR [edi], 0
	je	SHORT $L86494
; Line 3479
	cmp	esi, DWORD PTR _stextsel
	jne	SHORT $L86495
; Line 3480
	call	@InitQTextMsg@4
; Line 3481
	mov	eax, DWORD PTR _talker
	mov	DWORD PTR _v0$[esp+20], eax
$L86495:
; Line 3483
	add	esi, ebp
$L86494:
; Line 3487
	add	edi, 24					; 00000018H
; Line 3488
	inc	ebx
; Line 3489
	cmp	edi, OFFSET FLAT:_quests+404
	jl	SHORT $L86487
$L86489:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3492
	pop	ecx
	ret	0
_S_TalkEnter ENDP
_TEXT	ENDS
PUBLIC	_S_TavernEnter
; Function compile flags: /Ogsy
;	COMDAT _S_TavernEnter
_TEXT	SEGMENT
_S_TavernEnter PROC NEAR				; COMDAT
; Line 3504
	mov	eax, DWORD PTR _stextsel
	push	12					; 0000000cH
	pop	ecx
	cmp	eax, ecx
	jne	SHORT $L86500
; Line 3505
	mov	DWORD PTR _stextlhold, ecx
; Line 3506
	mov	DWORD PTR _talker, 3
; Line 3507
	mov	DWORD PTR _stextshold, 21		; 00000015H
; Line 3508
	mov	DWORD PTR _gossipstart, 161		; 000000a1H
; Line 3509
	mov	DWORD PTR _gossipend, 168		; 000000a8H
; Line 3511
	mov	cl, 19					; 00000013H
	jmp	@StartStore@4
$L86500:
; Line 3512
	cmp	eax, 18					; 00000012H
	jne	SHORT $L86503
; Line 3513
	and	BYTE PTR _stextflag, 0
$L86503:
; Line 3515
	ret	0
_S_TavernEnter ENDP
_TEXT	ENDS
PUBLIC	_S_BarmaidEnter
; Function compile flags: /Ogsy
;	COMDAT _S_BarmaidEnter
_TEXT	SEGMENT
_S_BarmaidEnter PROC NEAR				; COMDAT
; Line 3528
	mov	eax, DWORD PTR _stextsel
	push	12					; 0000000cH
	pop	ecx
	cmp	eax, ecx
	jne	SHORT $L86506
; Line 3529
	mov	DWORD PTR _stextlhold, ecx
; Line 3530
	mov	DWORD PTR _talker, 7
; Line 3531
	mov	DWORD PTR _stextshold, 23		; 00000017H
; Line 3532
	mov	DWORD PTR _gossipstart, 180		; 000000b4H
; Line 3533
	mov	DWORD PTR _gossipend, 187		; 000000bbH
; Line 3535
	mov	cl, 19					; 00000013H
	jmp	@StartStore@4
$L86506:
; Line 3536
	cmp	eax, 18					; 00000012H
	jne	SHORT $L86509
; Line 3537
	and	BYTE PTR _stextflag, 0
$L86509:
; Line 3539
	ret	0
_S_BarmaidEnter ENDP
_TEXT	ENDS
PUBLIC	_S_DrunkEnter
; Function compile flags: /Ogsy
;	COMDAT _S_DrunkEnter
_TEXT	SEGMENT
_S_DrunkEnter PROC NEAR					; COMDAT
; Line 3552
	mov	eax, DWORD PTR _stextsel
	push	12					; 0000000cH
	pop	ecx
	cmp	eax, ecx
	jne	SHORT $L86512
; Line 3553
	mov	DWORD PTR _stextlhold, ecx
; Line 3554
	mov	DWORD PTR _talker, 5
; Line 3555
	mov	DWORD PTR _stextshold, 22		; 00000016H
; Line 3556
	mov	DWORD PTR _gossipstart, 201		; 000000c9H
; Line 3557
	mov	DWORD PTR _gossipend, 211		; 000000d3H
; Line 3559
	mov	cl, 19					; 00000013H
	jmp	@StartStore@4
$L86512:
; Line 3560
	cmp	eax, 18					; 00000012H
	jne	SHORT $L86515
; Line 3561
	and	BYTE PTR _stextflag, 0
$L86515:
; Line 3563
	ret	0
_S_DrunkEnter ENDP
_TEXT	ENDS
PUBLIC	_STextEnter
; Function compile flags: /Ogsy
;	COMDAT _STextEnter
_TEXT	SEGMENT
_STextEnter PROC NEAR					; COMDAT
; Line 3573
	xor	al, al
	cmp	BYTE PTR _qtextflag, al
	je	SHORT $L86517
; Line 3575
	cmp	BYTE PTR _leveltype, al
	mov	BYTE PTR _qtextflag, al
	jne	SHORT $L86546
; Line 3576
	jmp	_sfx_stop
$L86517:
; Line 3578
	push	70					; 00000046H
	pop	ecx
	call	@PlaySFX@4
; Line 3579
	movsx	eax, BYTE PTR _stextflag
	dec	eax
	cmp	eax, 22					; 00000016H
	ja	SHORT $L86546
	jmp	DWORD PTR $L87611[eax*4]
$L86524:
; Line 3581
	jmp	_S_SmithEnter
$L86525:
; Line 3584
	jmp	_S_SBuyEnter
$L86526:
; Line 3587
	jmp	_S_SSellEnter
$L86527:
; Line 3590
	jmp	_S_SRepairEnter
$L86528:
; Line 3593
	jmp	_S_WitchEnter
$L86529:
; Line 3596
	jmp	_S_WBuyEnter
$L86530:
; Line 3599
	jmp	_S_WSellEnter
$L86531:
; Line 3602
	jmp	_S_WRechargeEnter
$L86532:
; Line 3606
	mov	cl, BYTE PTR _stextshold
	call	@StartStore@4
; Line 3607
	mov	eax, DWORD PTR _stextlhold
	mov	DWORD PTR _stextsel, eax
; Line 3608
	mov	eax, DWORD PTR _stextvhold
	mov	DWORD PTR _stextsval, eax
$L86546:
; Line 3653
	ret	0
$L86533:
; Line 3611
	jmp	_S_ConfirmEnter
$L86534:
; Line 3614
	jmp	_S_BoyEnter
$L86535:
; Line 3617
	jmp	_S_BBuyEnter
$L86536:
; Line 3620
	jmp	_S_HealerEnter
$L86537:
; Line 3623
	jmp	_S_StoryEnter
$L86538:
; Line 3626
	jmp	_S_HBuyEnter
$L86539:
; Line 3629
	jmp	_S_SIDEnter
$L86540:
; Line 3632
	jmp	_S_SPBuyEnter
$L86541:
; Line 3635
	jmp	_S_TalkEnter
$L86542:
; Line 3638
	mov	cl, 17					; 00000011H
	jmp	@StartStore@4
$L86543:
; Line 3641
	jmp	_S_TavernEnter
$L86544:
; Line 3644
	jmp	_S_DrunkEnter
$L86545:
; Line 3647
	jmp	_S_BarmaidEnter
$L87611:
; Line 3653
	DD	$L86524
	DD	$L86525
	DD	$L86526
	DD	$L86527
	DD	$L86528
	DD	$L86529
	DD	$L86530
	DD	$L86531
	DD	$L86532
	DD	$L86532
	DD	$L86533
	DD	$L86534
	DD	$L86535
	DD	$L86536
	DD	$L86537
	DD	$L86538
	DD	$L86539
	DD	$L86540
	DD	$L86541
	DD	$L86542
	DD	$L86543
	DD	$L86544
	DD	$L86545
_STextEnter ENDP
_TEXT	ENDS
PUBLIC	_CheckStoreBtn
EXTRN	_MouseY:DWORD
EXTRN	_MouseX:DWORD
; Function compile flags: /Ogsy
;	COMDAT _CheckStoreBtn
_TEXT	SEGMENT
_CheckStoreBtn PROC NEAR				; COMDAT
; Line 3661
	push	ebx
; Line 3667
	xor	ebx, ebx
	cmp	BYTE PTR _qtextflag, bl
	push	esi
	je	SHORT $L86551
; Line 3669
	cmp	BYTE PTR _leveltype, bl
	mov	BYTE PTR _qtextflag, bl
	jne	SHORT $L86573
	pop	esi
	pop	ebx
; Line 3670
	jmp	_sfx_stop
$L86551:
; Line 3671
	cmp	DWORD PTR _stextsel, -1
	je	SHORT $L86573
	mov	eax, DWORD PTR _MouseY
	cmp	eax, 32					; 00000020H
	jl	SHORT $L86573
	cmp	eax, 320				; 00000140H
	jg	SHORT $L86573
; Line 3674
	mov	ecx, DWORD PTR _MouseX
	cmp	BYTE PTR _stextsize, bl
	lea	edx, DWORD PTR [ecx-24]
	jne	SHORT $L87616
; Line 3677
	lea	edx, DWORD PTR [ecx-344]
$L87616:
	test	edx, edx
	setl	dl
; Line 3679
	cmp	dl, bl
	jne	SHORT $L86573
	cmp	ecx, 616				; 00000268H
	jg	SHORT $L86573
; Line 3680
	add	eax, -32				; ffffffe0H
	push	12					; 0000000cH
	cdq
	pop	esi
	idiv	esi
; Line 3681
	mov	esi, DWORD PTR _stextscrl
	cmp	esi, ebx
	je	SHORT $L86558
	cmp	ecx, 600				; 00000258H
	jle	SHORT $L86558
; Line 3682
	cmp	eax, 4
	jne	SHORT $L86559
; Line 3683
	cmp	BYTE PTR _stextscrlubtn, bl
	jg	SHORT $L86560
; Line 3684
	call	_STextUp
; Line 3685
	mov	BYTE PTR _stextscrlubtn, 10		; 0000000aH
$L86573:
	pop	esi
	pop	ebx
; Line 3720
	ret	0
$L86560:
; Line 3688
	dec	BYTE PTR _stextscrlubtn
$L86559:
; Line 3690
	cmp	eax, 20					; 00000014H
	jne	SHORT $L86573
; Line 3691
	cmp	BYTE PTR _stextscrldbtn, bl
	jle	SHORT $L86562
; Line 3692
	dec	BYTE PTR _stextscrldbtn
; Line 3693
	jmp	SHORT $L86573
$L86562:
; Line 3694
	call	_STextDown
; Line 3695
	mov	BYTE PTR _stextscrldbtn, 10		; 0000000aH
; Line 3698
	jmp	SHORT $L86573
$L86558:
	cmp	eax, 5
	jl	SHORT $L86573
; Line 3699
	cmp	eax, 23					; 00000017H
	jl	SHORT $L86566
; Line 3700
	push	22					; 00000016H
	pop	eax
$L86566:
; Line 3701
	cmp	esi, ebx
	je	SHORT $L86572
; Line 3702
	cmp	eax, 21					; 00000015H
	jge	SHORT $L86572
; Line 3703
	mov	ecx, eax
	imul	ecx, 156				; 0000009cH
	add	ecx, OFFSET FLAT:_stext+148
; Line 3704
	cmp	DWORD PTR [ecx], ebx
	jne	SHORT $L86572
; Line 3705
	lea	edx, DWORD PTR [eax-2]
	push	edi
	mov	edi, edx
	imul	edi, 156				; 0000009cH
	cmp	DWORD PTR _stext[edi+148], ebx
	pop	edi
	je	SHORT $L86570
; Line 3706
	mov	eax, edx
; Line 3707
	jmp	SHORT $L86572
$L86570:
	cmp	DWORD PTR [ecx-156], ebx
	je	SHORT $L86572
; Line 3708
	dec	eax
$L86572:
; Line 3713
	mov	ecx, eax
	imul	ecx, 156				; 0000009cH
	cmp	DWORD PTR _stext[ecx+148], ebx
	jne	SHORT $L86574
	cmp	esi, ebx
	je	$L86573
	cmp	eax, 22					; 00000016H
	jne	$L86573
$L86574:
	pop	esi
; Line 3714
	mov	DWORD PTR _stextsel, eax
	pop	ebx
; Line 3715
	jmp	_STextEnter
_CheckStoreBtn ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _ReleaseStoreBtn
_TEXT	SEGMENT
_ReleaseStoreBtn PROC NEAR				; COMDAT
; Line 3730
	or	BYTE PTR _stextscrlubtn, -1
; Line 3731
	or	BYTE PTR _stextscrldbtn, -1
; Line 3732
	ret	0
_ReleaseStoreBtn ENDP
_TEXT	ENDS
END
