; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/sha.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _SHA1Clear
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SHA1Result@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SHA1Calculate@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SHA1Input@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SHA1ProcessMessageBlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SHA1Reset@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SHA1Init@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_sgSHA1:BYTE:0114H
_DATA	ENDS
PUBLIC	_SHA1Clear
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT _SHA1Clear
_TEXT	SEGMENT
_SHA1Clear PROC NEAR					; COMDAT
; File Source/sha.cpp
; Line 9
	push	276					; 00000114H
	push	0
	push	OFFSET FLAT:_sgSHA1
	call	_memset
	add	esp, 12					; 0000000cH
; Line 10
	ret	0
_SHA1Clear ENDP
_TEXT	ENDS
PUBLIC	@SHA1Result@8
; Function compile flags: /Ogsy
;	COMDAT @SHA1Result@8
_TEXT	SEGMENT
@SHA1Result@8 PROC NEAR					; COMDAT
; _n$ = ecx
; _Message_Digest$ = edx
; Line 13
	mov	eax, edx
; Line 18
	test	eax, eax
	je	SHORT $L84995
; Line 19
	imul	ecx, 92					; 0000005cH
	push	5
	add	ecx, OFFSET FLAT:_sgSHA1
	pop	edx
	push	esi
$L84993:
; Line 20
	mov	esi, DWORD PTR [ecx]
	add	ecx, 4
	mov	DWORD PTR [eax], esi
; Line 21
	add	eax, 4
	dec	edx
	jne	SHORT $L84993
	pop	esi
$L84995:
; Line 24
	ret	0
@SHA1Result@8 ENDP
_TEXT	ENDS
PUBLIC	@SHA1Calculate@12
PUBLIC	@SHA1Input@12
; Function compile flags: /Ogsy
;	COMDAT @SHA1Calculate@12
_TEXT	SEGMENT
_Message_Digest$ = 8
@SHA1Calculate@12 PROC NEAR				; COMDAT
; _n$ = ecx
; _data$ = edx
; Line 27
	push	esi
	mov	esi, ecx
; Line 28
	imul	ecx, 92					; 0000005cH
	push	64					; 00000040H
	add	ecx, OFFSET FLAT:_sgSHA1
	call	@SHA1Input@12
; Line 29
	mov	edx, DWORD PTR _Message_Digest$[esp]
	test	edx, edx
	je	SHORT $L85003
; Line 30
	mov	ecx, esi
	call	@SHA1Result@8
$L85003:
	pop	esi
; Line 31
	ret	4
@SHA1Calculate@12 ENDP
_TEXT	ENDS
PUBLIC	@SHA1ProcessMessageBlock@4
EXTRN	_memcpy:NEAR
; Function compile flags: /Ogsy
;	COMDAT @SHA1Input@12
_TEXT	SEGMENT
_len$ = 8
@SHA1Input@12 PROC NEAR					; COMDAT
; _context$ = ecx
; _message_array$ = edx
; Line 37
	mov	eax, DWORD PTR _len$[esp-4]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	ebx, edx
	mov	ecx, DWORD PTR [esi+20]
	lea	edx, DWORD PTR [ecx+eax*8]
; Line 38
	cmp	edx, ecx
	jge	SHORT $L85013
; Line 39
	inc	DWORD PTR [esi+24]
$L85013:
; Line 42
	mov	ecx, eax
	mov	DWORD PTR [esi+20], edx
	sar	ecx, 29					; 0000001dH
	add	DWORD PTR [esi+24], ecx
; Line 44
	cmp	eax, 64					; 00000040H
	jl	SHORT $L85016
	push	ebp
	push	edi
	shr	eax, 6
	lea	edi, DWORD PTR [esi+28]
	mov	ebp, eax
$L85014:
; Line 45
	push	64					; 00000040H
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 46
	mov	ecx, esi
	call	@SHA1ProcessMessageBlock@4
; Line 47
	add	ebx, 64					; 00000040H
	dec	ebp
	jne	SHORT $L85014
	pop	edi
	pop	ebp
$L85016:
	pop	esi
	pop	ebx
; Line 49
	ret	4
@SHA1Input@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SHA1ProcessMessageBlock@4
_TEXT	SEGMENT
_i$ = -4
_W$ = -336
_A$ = -12
_C$ = -16
_D$ = -8
@SHA1ProcessMessageBlock@4 PROC NEAR			; COMDAT
; _context$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	mov	eax, ecx
; Line 60
	push	16					; 00000010H
	lea	edi, DWORD PTR _W$[ebp]
	lea	esi, DWORD PTR [eax+28]
	pop	ecx
	rep movsd
; Line 62
	push	64					; 00000040H
	lea	ecx, DWORD PTR _W$[ebp+8]
	pop	edx
$L85033:
; Line 63
	mov	esi, DWORD PTR [ecx+44]
	xor	esi, DWORD PTR [ecx+24]
	xor	esi, DWORD PTR [ecx-8]
	xor	esi, DWORD PTR [ecx]
	add	ecx, 4
	dec	edx
	mov	DWORD PTR [ecx+52], esi
	jne	SHORT $L85033
; Line 66
	mov	ecx, DWORD PTR [eax]
; Line 69
	mov	edx, DWORD PTR [eax+12]
	mov	edi, DWORD PTR [eax+8]
; Line 72
	and	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _A$[ebp], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _D$[ebp], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _C$[ebp], edi
$L85036:
; Line 73
	mov	esi, ecx
	mov	ebx, DWORD PTR _A$[ebp]
	not	esi
	and	esi, DWORD PTR _D$[ebp]
	and	edi, ecx
	shl	ebx, 5
	or	esi, edi
	mov	edi, DWORD PTR _A$[ebp]
	sar	edi, 27					; 0000001bH
	or	edi, ebx
	add	esi, edi
	mov	edi, DWORD PTR _i$[ebp]
	add	esi, DWORD PTR _W$[ebp+edi*4]
; Line 75
	mov	edi, DWORD PTR _C$[ebp]
	lea	esi, DWORD PTR [esi+edx+1518500249]
	mov	edx, DWORD PTR _D$[ebp]
	mov	DWORD PTR _D$[ebp], edi
; Line 76
	mov	edi, ecx
	shl	edi, 30					; 0000001eH
	sar	ecx, 2
	or	edi, ecx
	inc	DWORD PTR _i$[ebp]
; Line 77
	mov	ecx, DWORD PTR _A$[ebp]
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	mov	DWORD PTR _C$[ebp], edi
; Line 78
	mov	DWORD PTR _A$[ebp], esi
	jl	SHORT $L85036
; Line 81
	mov	DWORD PTR _i$[ebp], 20			; 00000014H
$L85039:
; Line 82
	mov	ebx, esi
	sar	ebx, 27					; 0000001bH
	shl	esi, 5
	or	ebx, esi
	mov	esi, DWORD PTR _D$[ebp]
	xor	esi, edi
	xor	esi, ecx
	add	ebx, esi
	mov	esi, DWORD PTR _i$[ebp]
	add	ebx, DWORD PTR _W$[ebp+esi*4]
	lea	esi, DWORD PTR [ebx+edx+1859775393]
; Line 83
	mov	edx, DWORD PTR _D$[ebp]
; Line 84
	mov	DWORD PTR _D$[ebp], edi
; Line 85
	mov	edi, ecx
	shl	edi, 30					; 0000001eH
	sar	ecx, 2
	or	edi, ecx
	inc	DWORD PTR _i$[ebp]
; Line 86
	mov	ecx, DWORD PTR _A$[ebp]
	cmp	DWORD PTR _i$[ebp], 40			; 00000028H
; Line 87
	mov	DWORD PTR _A$[ebp], esi
	jl	SHORT $L85039
	mov	DWORD PTR _C$[ebp], edi
; Line 90
	mov	DWORD PTR _i$[ebp], 40			; 00000028H
$L85042:
; Line 91
	mov	ebx, edi
	and	edi, ecx
	or	ebx, ecx
	and	ebx, DWORD PTR _D$[ebp]
	or	ebx, edi
	mov	edi, esi
	sar	edi, 27					; 0000001bH
	shl	esi, 5
	or	edi, esi
	mov	esi, DWORD PTR _i$[ebp]
	add	ebx, edi
; Line 93
	mov	edi, DWORD PTR _C$[ebp]
	add	ebx, DWORD PTR _W$[ebp+esi*4]
	lea	esi, DWORD PTR [ebx+edx-1894007588]
	mov	edx, DWORD PTR _D$[ebp]
	mov	DWORD PTR _D$[ebp], edi
; Line 94
	mov	edi, ecx
	shl	edi, 30					; 0000001eH
	sar	ecx, 2
	or	edi, ecx
	inc	DWORD PTR _i$[ebp]
; Line 95
	mov	ecx, DWORD PTR _A$[ebp]
	cmp	DWORD PTR _i$[ebp], 60			; 0000003cH
	mov	DWORD PTR _C$[ebp], edi
; Line 96
	mov	DWORD PTR _A$[ebp], esi
	jl	SHORT $L85042
; Line 99
	mov	DWORD PTR _i$[ebp], 60			; 0000003cH
$L85045:
; Line 100
	mov	ebx, esi
	sar	ebx, 27					; 0000001bH
	shl	esi, 5
	or	ebx, esi
	mov	esi, DWORD PTR _D$[ebp]
	xor	esi, edi
	xor	esi, ecx
	add	ebx, esi
	mov	esi, DWORD PTR _i$[ebp]
	add	ebx, DWORD PTR _W$[ebp+esi*4]
	lea	esi, DWORD PTR [ebx+edx-899497514]
; Line 101
	mov	edx, DWORD PTR _D$[ebp]
; Line 102
	mov	DWORD PTR _D$[ebp], edi
; Line 103
	mov	edi, ecx
	shl	edi, 30					; 0000001eH
	sar	ecx, 2
	or	edi, ecx
	inc	DWORD PTR _i$[ebp]
; Line 104
	mov	ecx, DWORD PTR _A$[ebp]
	cmp	DWORD PTR _i$[ebp], 80			; 00000050H
; Line 105
	mov	DWORD PTR _A$[ebp], esi
	jl	SHORT $L85045
; Line 108
	mov	ebx, DWORD PTR [eax]
	add	ebx, esi
; Line 109
	mov	esi, DWORD PTR [eax+4]
	add	esi, ecx
; Line 110
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, edi
	mov	DWORD PTR [eax+4], esi
; Line 111
	mov	esi, DWORD PTR _D$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	pop	edi
	add	ecx, esi
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+12], ecx
; Line 112
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, edx
	pop	esi
	mov	DWORD PTR [eax+16], ecx
	pop	ebx
; Line 113
	leave
	ret	0
@SHA1ProcessMessageBlock@4 ENDP
_TEXT	ENDS
PUBLIC	@SHA1Reset@4
PUBLIC	@SHA1Init@4
; Function compile flags: /Ogsy
;	COMDAT @SHA1Reset@4
_TEXT	SEGMENT
@SHA1Reset@4 PROC NEAR					; COMDAT
; _n$ = ecx
; Line 117
	imul	ecx, 92					; 0000005cH
	add	ecx, OFFSET FLAT:_sgSHA1
	jmp	@SHA1Init@4
@SHA1Reset@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SHA1Init@4
_TEXT	SEGMENT
@SHA1Init@4 PROC NEAR					; COMDAT
; _context$ = ecx
; Line 122
	and	DWORD PTR [ecx+20], 0
; Line 123
	and	DWORD PTR [ecx+24], 0
; Line 124
	mov	DWORD PTR [ecx], 1732584193		; 67452301H
; Line 125
	mov	DWORD PTR [ecx+4], -271733879		; efcdab89H
; Line 126
	mov	DWORD PTR [ecx+8], -1732584194		; 98badcfeH
; Line 127
	mov	DWORD PTR [ecx+12], 271733878		; 10325476H
; Line 128
	mov	DWORD PTR [ecx+16], -1009589776		; c3d2e1f0H
; Line 129
	ret	0
@SHA1Init@4 ENDP
_TEXT	ENDS
END
