; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/drlg_l4.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@FGMD@Levels?2L4Data?2diab2b?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MDGD@Levels?2L4Data?2diab3b?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CLAD@Levels?2L4Data?2diab4b?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _DRLG_LoadL4SP
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_FreeL4SP
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L4SetSPRoom@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L4SaveQuads
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L4SetRoom@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_LoadDiabQuads@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @IsDURWall@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @IsDLLWall@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L4FixRim
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L4GeneralFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CreateL4Dungeon@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L4@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L4Shadows
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitL4Dungeon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L4makeDmt
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L4AddWall
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L4HWallOk@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L4VWallOk@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L4HorizWall@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L4VertWall@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L4tileFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L4Subs
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L4makeDungeon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _uShape
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetArea
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _L4firstRoom
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L4drawRoom@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L4roomGen@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @L4checkRoom@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L4PlaceMiniSet@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L4FloodTVal
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DRLG_L4FTVR@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L4TransFix
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L4Corners
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DRLG_L4Pass3
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_L4ConvTbl
PUBLIC	_L4USTAIRS
PUBLIC	_L4TWARP
PUBLIC	_L4DSTAIRS
PUBLIC	_L4PENTA
PUBLIC	_L4PENTA2
PUBLIC	_L4BTYPES
_DATA	SEGMENT
COMM	_diabquad1x:DWORD
COMM	_diabquad1y:DWORD
COMM	_diabquad3x:DWORD
COMM	_diabquad3y:DWORD
COMM	_diabquad2x:DWORD
COMM	_diabquad2y:DWORD
COMM	_diabquad4x:DWORD
COMM	_diabquad4y:DWORD
COMM	_hallok:DWORD:014H
COMM	_l4holdx:DWORD
COMM	_l4holdy:DWORD
COMM	_SP4x1:DWORD
COMM	_SP4x2:DWORD
COMM	_SP4y1:DWORD
COMM	_SP4y2:DWORD
COMM	_L4dungeon:BYTE:01900H
COMM	_dung:BYTE:0190H
_DATA	ENDS
CONST	SEGMENT
_L4ConvTbl DB	01eH
	DB	06H
	DB	01H
	DB	06H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	09H
	DB	06H
	DB	01H
	DB	06H
	DB	02H
	DB	06H
	DB	03H
	DB	06H
_L4USTAIRS DB	04H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	024H
	DB	026H
	DB	023H
	DB	00H
	DB	025H
	DB	022H
	DB	021H
	DB	020H
	DB	00H
	DB	00H
	DB	01fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_L4TWARP DB	04H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	086H
	DB	088H
	DB	085H
	DB	00H
	DB	087H
	DB	084H
	DB	083H
	DB	082H
	DB	00H
	DB	00H
	DB	081H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+2
_L4DSTAIRS DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02dH
	DB	029H
	DB	00H
	DB	00H
	DB	02cH
	DB	02bH
	DB	028H
	DB	00H
	DB	00H
	DB	02eH
	DB	02aH
	DB	027H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L4PENTA DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	062H
	DB	064H
	DB	067H
	DB	00H
	DB	00H
	DB	063H
	DB	066H
	DB	069H
	DB	00H
	DB	00H
	DB	065H
	DB	068H
	DB	06aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_L4PENTA2 DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06bH
	DB	06dH
	DB	070H
	DB	00H
	DB	00H
	DB	06cH
	DB	06fH
	DB	072H
	DB	00H
	DB	00H
	DB	06eH
	DB	071H
	DB	073H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
_L4BTYPES DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	06H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	010H
	DB	09H
	DB	0cH
	DB	04H
	DB	05H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	_DRLG_LoadL4SP
PUBLIC	??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@	; `string'
EXTRN	_pSetPiece_2:DWORD
EXTRN	@QuestStatus@4:NEAR
EXTRN	_gbMaxPlayers:BYTE
EXTRN	@LoadFileInMem@8:NEAR
EXTRN	_setloadflag_2:DWORD
EXTRN	_currlevel:BYTE
;	COMDAT ??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@
; File Source/drlg_l4.cpp
_DATA	SEGMENT
??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@ DB 'Levels\L4Data\Warlord'
	DB	'.DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@ DB 'Levels\L4Data\Vile1.DU'
	DB	'N', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DRLG_LoadL4SP
_TEXT	SEGMENT
_DRLG_LoadL4SP PROC NEAR				; COMDAT
; Line 294
	and	DWORD PTR _setloadflag_2, 0
	push	ebx
; Line 295
	push	11					; 0000000bH
	pop	ecx
	call	@QuestStatus@4
	xor	ebx, ebx
	inc	ebx
	test	eax, eax
	je	SHORT $L84983
; Line 296
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BK@JPE@Levels?2L4Data?2Warlord?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	DWORD PTR _pSetPiece_2, eax
; Line 297
	mov	DWORD PTR _setloadflag_2, ebx
$L84983:
; Line 299
	cmp	BYTE PTR _currlevel, 15			; 0000000fH
	jne	SHORT $L84986
	cmp	BYTE PTR _gbMaxPlayers, bl
	je	SHORT $L84986
; Line 300
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BI@KOPC@Levels?2L4Data?2Vile1?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	DWORD PTR _pSetPiece_2, eax
; Line 301
	mov	DWORD PTR _setloadflag_2, ebx
$L84986:
	pop	ebx
; Line 303
	ret	0
_DRLG_LoadL4SP ENDP
_TEXT	ENDS
PUBLIC	_DRLG_FreeL4SP
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DRLG_FreeL4SP
_TEXT	SEGMENT
_DRLG_FreeL4SP PROC NEAR				; COMDAT
; Line 311
	mov	ecx, DWORD PTR _pSetPiece_2
; Line 312
	and	DWORD PTR _pSetPiece_2, 0
; Line 313
	jmp	@mem_free_dbg@4
_DRLG_FreeL4SP ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L4SetSPRoom@8
EXTRN	_setpc_h:DWORD
EXTRN	_setpc_w:DWORD
EXTRN	_setpc_x:DWORD
EXTRN	_setpc_y:DWORD
EXTRN	_dungeon:BYTE
EXTRN	_dflags:BYTE
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L4SetSPRoom@8
_TEXT	SEGMENT
_v6$ = -12
_v7$ = -8
_v8$ = -4
@DRLG_L4SetSPRoom@8 PROC NEAR				; COMDAT
; _rx1$ = ecx
; _ry1$ = edx
; Line 317
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 327
	mov	eax, DWORD PTR _pSetPiece_2
	and	DWORD PTR _v8$[ebp], 0
	push	esi
	push	edi
	movzx	edi, BYTE PTR [eax+2]
; Line 328
	movzx	esi, BYTE PTR [eax]
; Line 333
	add	eax, 4
	mov	DWORD PTR _setpc_x, ecx
; Line 334
	test	edi, edi
	mov	DWORD PTR _setpc_y, edx
	mov	DWORD PTR _setpc_w, esi
	mov	DWORD PTR _setpc_h, edi
	mov	DWORD PTR _v7$[ebp], eax
	jle	SHORT $L85008
	push	ebx
$L85006:
; Line 336
	test	esi, esi
	jle	SHORT $L85012
; Line 338
	mov	ebx, DWORD PTR _v8$[ebp]
	lea	eax, DWORD PTR [ecx+ecx*4]
	mov	DWORD PTR _v6$[ebp], esi
	lea	eax, DWORD PTR [ebx+eax*8]
	add	eax, edx
$L85010:
; Line 340
	mov	ebx, DWORD PTR _v7$[ebp]
	mov	bl, BYTE PTR [ebx]
; Line 341
	test	bl, bl
	je	SHORT $L85013
; Line 342
	or	BYTE PTR _dflags[eax], -128		; ffffff80H
; Line 343
	mov	BYTE PTR _dungeon[eax], bl
; Line 344
	jmp	SHORT $L85014
$L85013:
; Line 345
	mov	BYTE PTR _dungeon[eax], 6
$L85014:
; Line 347
	add	DWORD PTR _v7$[ebp], 2
; Line 350
	add	eax, 40					; 00000028H
	dec	DWORD PTR _v6$[ebp]
	jne	SHORT $L85010
$L85012:
; Line 352
	inc	DWORD PTR _v8$[ebp]
; Line 353
	cmp	DWORD PTR _v8$[ebp], edi
	jl	SHORT $L85006
	pop	ebx
$L85008:
	pop	edi
	pop	esi
; Line 355
	leave
	ret	0
@DRLG_L4SetSPRoom@8 ENDP
_TEXT	ENDS
PUBLIC	_L4SaveQuads
; Function compile flags: /Ogsy
;	COMDAT _L4SaveQuads
_TEXT	SEGMENT
_v5$ = -24
_v10$ = -4
_L4SaveQuads PROC NEAR					; COMDAT
; Line 360
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 373
	mov	eax, DWORD PTR _l4holdx
	mov	ecx, DWORD PTR _l4holdy
	mov	edx, ecx
	push	ebx
	lea	eax, DWORD PTR [eax+eax*4]
	push	esi
	shl	eax, 3
	sub	edx, eax
	push	edi
; Line 401
	mov	edi, eax
	mov	DWORD PTR -16+[ebp], 14			; 0000000eH
	lea	esi, DWORD PTR _dflags[edx+1560]
	mov	edx, OFFSET FLAT:_dflags+1599
	sub	edx, eax
	sub	edi, esi
	sub	edx, ecx
	sub	eax, edx
	lea	edi, DWORD PTR _dflags[edi+ecx]
	sub	eax, ecx
	lea	eax, DWORD PTR _dflags[eax+39]
	mov	DWORD PTR -20+[ebp], eax
$L85027:
	mov	ecx, DWORD PTR -20+[ebp]
	mov	DWORD PTR -8+[ebp], esi
	add	ecx, edx
	sub	DWORD PTR -8+[ebp], edx
	mov	DWORD PTR _v10$[ebp], ecx
	mov	eax, edx
	lea	ecx, DWORD PTR [edi+esi]
	mov	DWORD PTR -12+[ebp], 14			; 0000000eH
$L85030:
	mov	ebx, DWORD PTR _v10$[ebp]
	add	DWORD PTR _v10$[ebp], 40		; 00000028H
	mov	DWORD PTR _v5$[ebp], ebx
	mov	ebx, DWORD PTR -8+[ebp]
	mov	BYTE PTR [ecx], 1
	add	ecx, 40					; 00000028H
	mov	BYTE PTR [ebx+eax], 1
	mov	ebx, DWORD PTR _v5$[ebp]
	mov	BYTE PTR [ebx], 1
	mov	BYTE PTR [eax], 1
	sub	eax, 40					; 00000028H
	dec	DWORD PTR -12+[ebp]
	jne	SHORT $L85030
	dec	edx
	inc	esi
	dec	DWORD PTR -16+[ebp]
	jne	SHORT $L85027
	pop	edi
	pop	esi
	pop	ebx
; Line 402
	leave
	ret	0
_L4SaveQuads ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L4SetRoom@12
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L4SetRoom@12
_TEXT	SEGMENT
_ry1$ = 8
_v8$ = -8
_v9$ = -4
@DRLG_L4SetRoom@12 PROC NEAR				; COMDAT
; _pSetPiece$ = ecx
; _rx1$ = edx
; Line 407
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 418
	movzx	eax, BYTE PTR [ecx+2]
	push	ebx
	push	esi
	movzx	ebx, BYTE PTR [ecx]
	push	edi
	xor	edi, edi
; Line 420
	test	eax, eax
	mov	DWORD PTR _v8$[ebp], eax
	lea	esi, DWORD PTR [ecx+4]
	jle	SHORT $L85050
$L85048:
; Line 422
	test	ebx, ebx
	jle	SHORT $L85054
; Line 424
	lea	eax, DWORD PTR [edx+edx*4]
	mov	DWORD PTR _v9$[ebp], ebx
	lea	eax, DWORD PTR [edi+eax*8]
	add	eax, DWORD PTR _ry1$[ebp]
$L85052:
; Line 426
	mov	cl, BYTE PTR [esi]
; Line 427
	test	cl, cl
	je	SHORT $L85055
; Line 428
	or	BYTE PTR _dflags[eax], -128		; ffffff80H
; Line 429
	mov	BYTE PTR _dungeon[eax], cl
; Line 430
	jmp	SHORT $L85056
$L85055:
; Line 431
	mov	BYTE PTR _dungeon[eax], 6
$L85056:
; Line 436
	add	eax, 40					; 00000028H
	inc	esi
	inc	esi
	dec	DWORD PTR _v9$[ebp]
	jne	SHORT $L85052
$L85054:
; Line 438
	inc	edi
; Line 439
	cmp	edi, DWORD PTR _v8$[ebp]
	jl	SHORT $L85048
$L85050:
	pop	edi
	pop	esi
	pop	ebx
; Line 441
	leave
	ret	4
@DRLG_L4SetRoom@12 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_LoadDiabQuads@4
PUBLIC	??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@FGMD@Levels?2L4Data?2diab2b?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@MDGD@Levels?2L4Data?2diab3b?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@CLAD@Levels?2L4Data?2diab4b?4DUN?$AA@	; `string'
PUBLIC	??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@	; `string'
;	COMDAT ??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@ DB 'Levels\L4Data\diab1.DU'
	DB	'N', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@FGMD@Levels?2L4Data?2diab2b?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@FGMD@Levels?2L4Data?2diab2b?4DUN?$AA@ DB 'Levels\L4Data\diab2b.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@ DB 'Levels\L4Data\diab2a.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MDGD@Levels?2L4Data?2diab3b?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@MDGD@Levels?2L4Data?2diab3b?4DUN?$AA@ DB 'Levels\L4Data\diab3b.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@ DB 'Levels\L4Data\diab3a.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CLAD@Levels?2L4Data?2diab4b?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@CLAD@Levels?2L4Data?2diab4b?4DUN?$AA@ DB 'Levels\L4Data\diab4b.'
	DB	'DUN', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@
_DATA	SEGMENT
??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@ DB 'Levels\L4Data\diab4a.'
	DB	'DUN', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DRLG_LoadDiabQuads@4
_TEXT	SEGMENT
@DRLG_LoadDiabQuads@4 PROC NEAR				; COMDAT
; _preflag$ = cl
; Line 444
	push	ebx
	mov	bl, cl
	push	esi
; Line 455
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BI@EPOL@Levels?2L4Data?2diab1?4DUN?$AA@ ; `string'
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 456
	mov	eax, DWORD PTR _l4holdx
; Line 458
	mov	ecx, esi
	lea	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _l4holdy
	add	eax, 4
	mov	DWORD PTR _diabquad1x, edx
	push	eax
	mov	DWORD PTR _diabquad1y, eax
	call	@DRLG_L4SetRoom@12
; Line 459
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 461
	test	bl, bl
	mov	ecx, OFFSET FLAT:??_C@_0BJ@FGMD@Levels?2L4Data?2diab2b?4DUN?$AA@ ; `string'
	jne	SHORT $L85070
; Line 462
	mov	ecx, OFFSET FLAT:??_C@_0BJ@LGKM@Levels?2L4Data?2diab2a?4DUN?$AA@ ; `string'
$L85070:
; Line 463
	xor	edx, edx
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 464
	mov	eax, DWORD PTR _l4holdy
; Line 465
	push	27					; 0000001bH
	inc	eax
	pop	edx
; Line 466
	mov	ecx, esi
	sub	edx, DWORD PTR _l4holdx
	push	eax
	mov	DWORD PTR _diabquad2y, eax
	mov	DWORD PTR _diabquad2x, edx
	call	@DRLG_L4SetRoom@12
; Line 467
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 469
	test	bl, bl
	mov	ecx, OFFSET FLAT:??_C@_0BJ@MDGD@Levels?2L4Data?2diab3b?4DUN?$AA@ ; `string'
	jne	SHORT $L85073
; Line 470
	mov	ecx, OFFSET FLAT:??_C@_0BJ@CDAM@Levels?2L4Data?2diab3a?4DUN?$AA@ ; `string'
$L85073:
; Line 471
	xor	edx, edx
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 472
	mov	eax, DWORD PTR _l4holdx
; Line 473
	push	27					; 0000001bH
; Line 474
	mov	ecx, esi
	lea	edx, DWORD PTR [eax+1]
	pop	eax
	sub	eax, DWORD PTR _l4holdy
	mov	DWORD PTR _diabquad3x, edx
	push	eax
	mov	DWORD PTR _diabquad3y, eax
	call	@DRLG_L4SetRoom@12
; Line 475
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 477
	test	bl, bl
	mov	ecx, OFFSET FLAT:??_C@_0BJ@CLAD@Levels?2L4Data?2diab4b?4DUN?$AA@ ; `string'
	jne	SHORT $L85076
; Line 478
	mov	ecx, OFFSET FLAT:??_C@_0BJ@MLGM@Levels?2L4Data?2diab4a?4DUN?$AA@ ; `string'
$L85076:
; Line 479
	xor	edx, edx
	call	@LoadFileInMem@8
	mov	esi, eax
; Line 480
	push	28					; 0000001cH
; Line 482
	mov	ecx, esi
	pop	edx
	mov	eax, edx
	sub	edx, DWORD PTR _l4holdx
	sub	eax, DWORD PTR _l4holdy
	mov	DWORD PTR _diabquad4x, edx
	push	eax
	mov	DWORD PTR _diabquad4y, eax
	call	@DRLG_L4SetRoom@12
; Line 483
	mov	ecx, esi
	pop	esi
	pop	ebx
	jmp	@mem_free_dbg@4
@DRLG_LoadDiabQuads@4 ENDP
_TEXT	ENDS
PUBLIC	@IsDURWall@4
; Function compile flags: /Ogsy
;	COMDAT @IsDURWall@4
_TEXT	SEGMENT
@IsDURWall@4 PROC NEAR					; COMDAT
; _d$ = cl
; Line 494
	cmp	cl, 25					; 00000019H
	je	SHORT $L85083
	cmp	cl, 28					; 0000001cH
	je	SHORT $L85083
; Line 497
	cmp	cl, 23					; 00000017H
	sete	al
; Line 499
	ret	0
$L85083:
; Line 495
	mov	al, 1
; Line 499
	ret	0
@IsDURWall@4 ENDP
_TEXT	ENDS
PUBLIC	@IsDLLWall@4
; Function compile flags: /Ogsy
;	COMDAT @IsDLLWall@4
_TEXT	SEGMENT
@IsDLLWall@4 PROC NEAR					; COMDAT
; _dd$ = cl
; Line 505
	cmp	cl, 27					; 0000001bH
	je	SHORT $L85090
	cmp	cl, 26					; 0000001aH
	je	SHORT $L85090
; Line 508
	cmp	cl, 22					; 00000016H
	sete	al
; Line 510
	ret	0
$L85090:
; Line 506
	mov	al, 1
; Line 510
	ret	0
@IsDLLWall@4 ENDP
_TEXT	ENDS
PUBLIC	_L4FixRim
; Function compile flags: /Ogsy
;	COMDAT _L4FixRim
_TEXT	SEGMENT
_L4FixRim PROC NEAR					; COMDAT
; Line 516
	mov	eax, OFFSET FLAT:_dung
	xor	ecx, ecx
$L85094:
; Line 518
	mov	BYTE PTR [eax], cl
; Line 519
	add	eax, 20					; 00000014H
; Line 520
	cmp	eax, OFFSET FLAT:_dung+400
	jl	SHORT $L85094
; Line 521
	mov	DWORD PTR _dung, ecx
; Line 522
	mov	DWORD PTR _dung+4, ecx
; Line 523
	mov	DWORD PTR _dung+8, ecx
; Line 524
	mov	DWORD PTR _dung+12, ecx
; Line 525
	mov	DWORD PTR _dung+16, ecx
; Line 526
	ret	0
_L4FixRim ENDP
_TEXT	ENDS
PUBLIC	_DRLG_L4GeneralFix
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L4GeneralFix
_TEXT	SEGMENT
_DRLG_L4GeneralFix PROC NEAR				; COMDAT
; Line 535
	xor	ecx, ecx
	push	esi
$L85109:
; Line 537
	push	39					; 00000027H
	lea	eax, DWORD PTR _dungeon[ecx]
	pop	esi
$L85113:
; Line 540
	mov	dl, BYTE PTR [eax]
	cmp	dl, 24					; 00000018H
	je	SHORT $L85117
	cmp	dl, 122					; 0000007aH
	jne	SHORT $L85116
$L85117:
	cmp	BYTE PTR [eax+40], 2
	jne	SHORT $L85116
	cmp	BYTE PTR [eax+1], 5
	jne	SHORT $L85116
; Line 541
	mov	BYTE PTR [eax], 17			; 00000011H
$L85116:
; Line 542
	add	eax, 40					; 00000028H
; Line 544
	dec	esi
	jne	SHORT $L85113
; Line 545
	inc	ecx
; Line 546
	cmp	ecx, 39					; 00000027H
	jl	SHORT $L85109
	pop	esi
; Line 547
	ret	0
_DRLG_L4GeneralFix ENDP
_TEXT	ENDS
PUBLIC	@CreateL4Dungeon@8
PUBLIC	@DRLG_L4@4
PUBLIC	_DRLG_L4Pass3
EXTRN	_dmaxx:DWORD
EXTRN	_dmaxy:DWORD
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
EXTRN	_dminx:DWORD
EXTRN	_dminy:DWORD
EXTRN	_DRLG_InitSetPC:NEAR
EXTRN	_DRLG_SetPC:NEAR
EXTRN	@SetRndSeed@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @CreateL4Dungeon@8
_TEXT	SEGMENT
@CreateL4Dungeon@8 PROC NEAR				; COMDAT
; _rseed$ = ecx
; _entry$ = edx
; Line 550
	push	esi
	mov	esi, edx
; Line 554
	call	@SetRndSeed@4
; Line 555
	push	16					; 00000010H
	pop	eax
; Line 557
	push	96					; 00000060H
	mov	DWORD PTR _dminx, eax
	mov	DWORD PTR _dminy, eax
	pop	eax
; Line 559
	push	40					; 00000028H
	mov	DWORD PTR _dmaxx, eax
	mov	DWORD PTR _dmaxy, eax
	pop	eax
	mov	DWORD PTR _ViewX, eax
; Line 560
	mov	DWORD PTR _ViewY, eax
; Line 561
	call	_DRLG_InitSetPC
; Line 562
	call	_DRLG_LoadL4SP
; Line 563
	mov	ecx, esi
	call	@DRLG_L4@4
; Line 564
	call	_DRLG_L4Pass3
; Line 565
	call	_DRLG_FreeL4SP
	pop	esi
; Line 566
	jmp	_DRLG_SetPC
@CreateL4Dungeon@8 ENDP
_TEXT	ENDS
PUBLIC	_DRLG_L4Shadows
PUBLIC	_InitL4Dungeon
PUBLIC	_L4makeDmt
PUBLIC	_L4AddWall
PUBLIC	_L4tileFix
PUBLIC	_DRLG_L4Subs
PUBLIC	_L4makeDungeon
PUBLIC	_uShape
PUBLIC	_GetArea
PUBLIC	_L4firstRoom
PUBLIC	@DRLG_L4PlaceMiniSet@28
PUBLIC	_DRLG_L4FloodTVal
PUBLIC	_DRLG_L4TransFix
PUBLIC	_DRLG_L4Corners
EXTRN	_DRLG_InitTrans:NEAR
EXTRN	@Make_SetPC@16:NEAR
EXTRN	@DRLG_PlaceThemeRooms@20:NEAR
EXTRN	_quests:BYTE
EXTRN	@DRLG_CheckQuests@8:NEAR
EXTRN	_DRLG_Init_Globals:NEAR
EXTRN	_memset:NEAR
EXTRN	_pdungeon:BYTE
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L4@4
_TEXT	SEGMENT
_entry$ = -16
_v1$ = -4
_v24$ = -8
@DRLG_L4@4 PROC NEAR					; COMDAT
; _entry$ = ecx
; Line 574
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi
; Line 600
	xor	esi, esi
	xor	ebx, ebx
	push	edi
	inc	esi
	mov	DWORD PTR _entry$[esp+32], ecx
	mov	DWORD PTR _v1$[esp+32], ebx
	or	edi, -1
	mov	ebp, OFFSET FLAT:_L4USTAIRS
	jmp	SHORT $L85148
$L86501:
	xor	ebx, ebx
$L85148:
; Line 603
	call	_DRLG_InitTrans
$L85151:
; Line 605
	call	_InitL4Dungeon
; Line 606
	call	_L4firstRoom
; Line 607
	call	_L4FixRim
; Line 608
	call	_GetArea
	cmp	eax, 173				; 000000adH
	jl	SHORT $L85151
; Line 609
	call	_uShape
; Line 610
	call	_L4makeDungeon
; Line 611
	call	_L4makeDmt
; Line 612
	call	_L4tileFix
; Line 613
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	jne	SHORT $L85154
; Line 614
	call	_L4SaveQuads
$L85154:
; Line 616
	push	11					; 0000000bH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	jne	SHORT $L85156
	mov	al, BYTE PTR _currlevel
	cmp	al, BYTE PTR _quests+360
	jne	$L85159
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	$L85159
$L85156:
	mov	eax, DWORD PTR _SP4x1
	mov	ecx, DWORD PTR _SP4x2
	cmp	eax, ecx
	jge	SHORT $L85159
; Line 618
	sub	ecx, eax
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 3
	mov	DWORD PTR _v24$[esp+32], ecx
	mov	ecx, DWORD PTR _SP4y1
	mov	DWORD PTR -12+[esp+32], eax
$L85157:
; Line 620
	cmp	ecx, DWORD PTR _SP4y2
	jge	SHORT $L85160
; Line 621
	mov	eax, DWORD PTR -12+[esp+32]
	lea	edi, DWORD PTR _dflags[eax+ecx]
; Line 622
	mov	eax, DWORD PTR _SP4y2
	mov	bl, al
; Line 623
	sub	eax, ecx
	shr	eax, 2
; Line 624
	mov	ebp, eax
	sub	bl, cl
	shl	ebp, 2
	push	ebp
	push	esi
	push	edi
	call	_memset
; Line 627
	and	DWORD PTR _v1$[esp+44], 0
	and	ebx, 3
; Line 628
	push	ebx
	add	ebp, edi
	push	esi
	push	ebp
	call	_memset
	mov	ecx, DWORD PTR _SP4y1
	mov	eax, DWORD PTR -12+[esp+56]
	add	esp, 24					; 00000018H
	or	edi, -1
	mov	ebp, OFFSET FLAT:_L4USTAIRS
	xor	ebx, ebx
$L85160:
; Line 630
	add	eax, 40					; 00000028H
; Line 631
	dec	DWORD PTR _v24$[esp+32]
	mov	DWORD PTR -12+[esp+32], eax
; Line 632
	jne	SHORT $L85157
$L85159:
; Line 634
	call	_L4AddWall
; Line 635
	call	_DRLG_L4FloodTVal
; Line 636
	call	_DRLG_L4TransFix
; Line 637
	cmp	DWORD PTR _setloadflag_2, ebx
	je	SHORT $L85162
; Line 638
	mov	edx, DWORD PTR _SP4y1
	mov	ecx, DWORD PTR _SP4x1
	call	@DRLG_L4SetSPRoom@8
$L85162:
; Line 639
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	jne	SHORT $L85163
; Line 640
	mov	cl, 1
	call	@DRLG_LoadDiabQuads@4
$L85163:
; Line 642
	push	11					; 0000000bH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
; Line 645
	mov	ecx, ebp
	push	ebx
	jne	$L85164
	cmp	BYTE PTR _currlevel, 15			; 0000000fH
	mov	edx, esi
	jne	SHORT $L85165
; Line 644
	cmp	DWORD PTR _entry$[esp+36], ebx
	jne	SHORT $L85166
; Line 645
	push	esi
	push	edi
	push	edi
	push	esi
	call	@DRLG_L4PlaceMiniSet@28
	movzx	eax, al
; Line 646
	test	eax, eax
	je	$LABEL_35$85172
; Line 647
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85170
	cmp	BYTE PTR _quests+122, 2
	mov	ecx, OFFSET FLAT:_L4PENTA
	jne	SHORT $L85169
$L85170:
; Line 648
	mov	ecx, OFFSET FLAT:_L4PENTA2
$L85169:
; Line 649
	push	esi
	push	0
; Line 651
	jmp	$L86511
$L85166:
; Line 653
	push	ebx
	push	edi
	push	edi
	push	esi
	call	@DRLG_L4PlaceMiniSet@28
	movzx	eax, al
; Line 654
	test	eax, eax
	je	$L85192
; Line 655
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L85176
	cmp	BYTE PTR _quests+122, 2
	mov	ecx, OFFSET FLAT:_L4PENTA
	jne	SHORT $L85175
$L85176:
; Line 656
	mov	ecx, OFFSET FLAT:_L4PENTA2
$L85175:
; Line 657
	push	esi
	push	esi
; Line 659
	jmp	$L86512
$L85165:
; Line 660
	cmp	DWORD PTR _entry$[esp+36], ebx
	jne	SHORT $L85179
; Line 661
	push	esi
	push	edi
	push	edi
	push	esi
	call	@DRLG_L4PlaceMiniSet@28
	movzx	eax, al
; Line 662
	test	eax, eax
	je	$LABEL_35$85172
; Line 663
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	je	$LABEL_31$85182
; Line 664
	push	esi
	push	0
	mov	ecx, OFFSET FLAT:_L4DSTAIRS
; Line 665
	jmp	$L86513
$L85179:
; Line 671
	push	ebx
	push	edi
	push	edi
	push	esi
	call	@DRLG_L4PlaceMiniSet@28
; Line 672
	cmp	DWORD PTR _entry$[esp+32], esi
	movzx	eax, al
	je	SHORT $L85183
; Line 673
	test	eax, eax
	je	$LABEL_35$85172
; Line 674
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	je	$LABEL_46$85186
; Line 675
	push	esi
	push	0
	push	edi
	push	edi
	push	esi
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L4DSTAIRS
	call	@DRLG_L4PlaceMiniSet@28
	movzx	eax, al
	jmp	$LABEL_46$85186
$L85183:
; Line 688
	test	eax, eax
	je	SHORT $L85192
; Line 689
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	je	SHORT $L85191
; Line 690
	push	esi
	push	esi
	push	edi
	push	edi
	push	esi
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L4DSTAIRS
	call	@DRLG_L4PlaceMiniSet@28
	movzx	eax, al
$L85191:
; Line 691
	test	eax, eax
	je	SHORT $L85192
	cmp	BYTE PTR _currlevel, 13			; 0000000dH
	jne	SHORT $L85192
; Line 692
	push	6
	push	0
	mov	ecx, OFFSET FLAT:_L4TWARP
$L86512:
	push	edi
	push	edi
	mov	edx, esi
	push	esi
	call	@DRLG_L4PlaceMiniSet@28
	movzx	eax, al
$L85192:
; Line 695
	inc	DWORD PTR _ViewY
; Line 696
	jmp	$L85149
$L85164:
; Line 698
	cmp	DWORD PTR _entry$[esp+36], ebx
	jne	SHORT $L85193
; Line 699
	push	esi
$L86513:
	push	edi
	push	edi
	mov	edx, esi
	push	esi
	call	@DRLG_L4PlaceMiniSet@28
	movzx	eax, al
$LABEL_31$85182:
; Line 701
	test	eax, eax
	je	SHORT $LABEL_35$85172
	cmp	BYTE PTR _currlevel, 13			; 0000000dH
	jne	SHORT $LABEL_35$85172
; Line 703
	xor	eax, eax
; Line 704
	jmp	SHORT $LABEL_34$85189
$L85193:
; Line 706
	push	ebx
	push	edi
	push	edi
	push	esi
	mov	edx, esi
	call	@DRLG_L4PlaceMiniSet@28
; Line 707
	cmp	DWORD PTR _entry$[esp+32], esi
	movzx	eax, al
	je	SHORT $L85196
$LABEL_46$85186:
; Line 677
	test	eax, eax
	je	SHORT $LABEL_35$85172
; Line 678
	cmp	BYTE PTR _currlevel, 13			; 0000000dH
	jne	SHORT $LABEL_35$85172
; Line 679
	mov	eax, esi
$LABEL_34$85189:
; Line 681
	push	6
	push	eax
	mov	ecx, OFFSET FLAT:_L4TWARP
$L86511:
	push	edi
	push	edi
	mov	edx, esi
	push	esi
	call	@DRLG_L4PlaceMiniSet@28
	movzx	eax, al
$LABEL_35$85172:
; Line 668
	inc	DWORD PTR _ViewX
; Line 669
	jmp	SHORT $L85149
$L85196:
; Line 709
	test	eax, eax
	je	SHORT $L85197
	cmp	BYTE PTR _currlevel, 13			; 0000000dH
	jne	SHORT $L85197
; Line 710
	push	6
	push	0
	push	edi
	push	edi
	push	esi
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_L4TWARP
	call	@DRLG_L4PlaceMiniSet@28
	movzx	eax, al
$L85197:
; Line 711
	mov	ecx, DWORD PTR _setpc_x
	lea	ecx, DWORD PTR [ecx+ecx+22]
	mov	DWORD PTR _ViewX, ecx
; Line 712
	mov	ecx, DWORD PTR _setpc_y
	lea	ecx, DWORD PTR [ecx+ecx+22]
	mov	DWORD PTR _ViewY, ecx
$L85149:
; Line 713
	test	eax, eax
	je	$L86501
; Line 714
	call	_DRLG_L4GeneralFix
; Line 715
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	je	SHORT $L85198
; Line 716
	push	esi
	push	8
	push	6
	push	10					; 0000000aH
	pop	edx
	push	7
	pop	ecx
	call	@DRLG_PlaceThemeRooms@20
$L85198:
; Line 717
	call	_DRLG_L4Shadows
; Line 718
	call	_DRLG_L4Corners
; Line 719
	call	_DRLG_L4Subs
; Line 720
	call	_DRLG_Init_Globals
; Line 722
	push	11					; 0000000bH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	je	SHORT $L85202
	mov	esi, DWORD PTR _v1$[esp+32]
$L85200:
; Line 724
	push	40					; 00000028H
; Line 727
	mov	eax, esi
	pop	ecx
$L85203:
	mov	dl, BYTE PTR _dungeon[eax]
	mov	BYTE PTR _pdungeon[eax], dl
	add	eax, 40					; 00000028H
; Line 730
	dec	ecx
	jne	SHORT $L85203
; Line 731
	inc	esi
; Line 732
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85200
$L85202:
; Line 734
	mov	edx, DWORD PTR _SP4y1
	mov	ecx, DWORD PTR _SP4x1
	call	@DRLG_CheckQuests@8
; Line 735
	cmp	BYTE PTR _currlevel, 15			; 0000000fH
	jne	SHORT $L85209
; Line 736
	mov	ebx, edi
$L85207:
; Line 738
	mov	esi, edi
; Line 739
	lea	ebp, DWORD PTR _dungeon[ebx+1]
$L85210:
; Line 741
	cmp	BYTE PTR [ebp], 98			; 00000062H
	jne	SHORT $L85213
; Line 742
	push	5
	push	5
	mov	edx, ebx
	mov	ecx, esi
	call	@Make_SetPC@16
$L85213:
; Line 743
	cmp	BYTE PTR [ebp], 107			; 0000006bH
	jne	SHORT $L85214
; Line 744
	push	5
	push	5
	mov	edx, ebx
	mov	ecx, esi
	call	@Make_SetPC@16
$L85214:
; Line 745
	add	ebp, 40					; 00000028H
; Line 746
	inc	esi
; Line 747
	lea	eax, DWORD PTR [esi+1]
	cmp	eax, 40					; 00000028H
	jl	SHORT $L85210
; Line 748
	inc	ebx
; Line 749
	cmp	ebx, 39					; 00000027H
	jl	SHORT $L85207
$L85209:
; Line 751
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	jne	SHORT $L85215
; Line 752
	xor	ecx, ecx
$L85216:
; Line 754
	push	40					; 00000028H
; Line 757
	mov	eax, ecx
	pop	esi
$L85219:
	mov	dl, BYTE PTR _dungeon[eax]
	mov	BYTE PTR _pdungeon[eax], dl
	add	eax, 40					; 00000028H
; Line 760
	dec	esi
	jne	SHORT $L85219
; Line 761
	inc	ecx
; Line 762
	cmp	ecx, 40					; 00000028H
	jl	SHORT $L85216
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 763
	xor	cl, cl
; Line 765
	add	esp, 16					; 00000010H
	jmp	@DRLG_LoadDiabQuads@4
$L85215:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	0
@DRLG_L4@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L4Shadows
_TEXT	SEGMENT
_DRLG_L4Shadows PROC NEAR				; COMDAT
; Line 772
	push	esi
; Line 779
	xor	esi, esi
	push	edi
	inc	esi
$L85228:
; Line 781
	push	39					; 00000027H
	lea	eax, DWORD PTR _dungeon[esi+40]
	pop	edi
$L85231:
; Line 784
	mov	dl, BYTE PTR [eax]
; Line 785
	xor	ecx, ecx
; Line 786
	cmp	dl, 3
	jne	SHORT $L85234
; Line 787
	inc	ecx
$L85234:
; Line 788
	cmp	dl, 4
	jne	SHORT $L85235
; Line 789
	xor	ecx, ecx
	inc	ecx
$L85235:
; Line 790
	cmp	dl, 8
	jne	SHORT $L85236
; Line 791
	xor	ecx, ecx
	inc	ecx
$L85236:
; Line 792
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85237
; Line 793
	xor	ecx, ecx
	inc	ecx
$L85237:
; Line 794
	test	ecx, ecx
	je	SHORT $L85240
; Line 795
	cmp	BYTE PTR [eax-40], 6
	jne	SHORT $L85239
; Line 796
	mov	BYTE PTR [eax-40], 47			; 0000002fH
$L85239:
; Line 797
	cmp	BYTE PTR [eax-41], 6
	jne	SHORT $L85240
; Line 798
	mov	BYTE PTR [eax-41], 48			; 00000030H
$L85240:
; Line 800
	add	eax, 40					; 00000028H
; Line 802
	dec	edi
	jne	SHORT $L85231
; Line 803
	inc	esi
; Line 804
	cmp	esi, 40					; 00000028H
	jl	SHORT $L85228
	pop	edi
	pop	esi
; Line 805
	ret	0
_DRLG_L4Shadows ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _InitL4Dungeon
_TEXT	SEGMENT
_InitL4Dungeon PROC NEAR				; COMDAT
; Line 813
	push	400					; 00000190H
	push	0
	push	OFFSET FLAT:_dung
	call	_memset
; Line 814
	push	6400					; 00001900H
	push	0
	push	OFFSET FLAT:_L4dungeon
	call	_memset
	add	esp, 24					; 00000018H
; Line 815
	xor	edx, edx
$L85245:
; Line 817
	push	40					; 00000028H
; Line 820
	mov	eax, edx
	pop	ecx
$L85248:
	and	BYTE PTR _dflags[eax], 0
; Line 821
	mov	BYTE PTR _dungeon[eax], 30		; 0000001eH
	add	eax, 40					; 00000028H
; Line 824
	dec	ecx
	jne	SHORT $L85248
; Line 825
	inc	edx
; Line 826
	cmp	edx, 40					; 00000028H
	jl	SHORT $L85245
; Line 827
	ret	0
_InitL4Dungeon ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L4makeDmt
_TEXT	SEGMENT
_v1$ = -4
_L4makeDmt PROC NEAR					; COMDAT
; Line 830
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 839
	xor	edi, edi
	inc	edi
; Line 840
	mov	DWORD PTR _v1$[ebp], OFFSET FLAT:_dungeon
$L85259:
; Line 842
	mov	esi, DWORD PTR _v1$[ebp]
	push	39					; 00000027H
; Line 843
	lea	eax, DWORD PTR _L4dungeon[edi+81]
	pop	ebx
$L85262:
; Line 846
	movzx	ecx, BYTE PTR [eax+80]
; Line 847
	movzx	edx, BYTE PTR [eax]
; Line 848
	add	eax, 160				; 000000a0H
; Line 850
	lea	ecx, DWORD PTR [edx+ecx*2]
	movzx	edx, BYTE PTR [eax-81]
	lea	ecx, DWORD PTR [edx+ecx*2]
	movzx	edx, BYTE PTR [eax-161]
	mov	cl, BYTE PTR _L4ConvTbl[edx+ecx*2]
	mov	BYTE PTR [esi], cl
; Line 851
	add	esi, 40					; 00000028H
; Line 853
	dec	ebx
	jne	SHORT $L85262
; Line 854
	inc	DWORD PTR _v1$[ebp]
; Line 855
	inc	edi
	inc	edi
; Line 856
	cmp	edi, 77					; 0000004dH
	jle	SHORT $L85259
	pop	edi
	pop	esi
	pop	ebx
; Line 857
	leave
	ret	0
_L4makeDmt ENDP
_TEXT	ENDS
PUBLIC	@L4HWallOk@8
PUBLIC	@L4VWallOk@8
PUBLIC	@L4HorizWall@12
PUBLIC	@L4VertWall@12
EXTRN	@random@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _L4AddWall
_TEXT	SEGMENT
_L4AddWall PROC NEAR					; COMDAT
; Line 860
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 880
	xor	edi, edi
	or	ebp, -1
$L85291:
; Line 882
	xor	esi, esi
; Line 964
	mov	ebx, edi
$L85294:
; Line 885
	cmp	BYTE PTR _dflags[ebx], 0
	jne	$L85327
; Line 886
	cmp	BYTE PTR _dungeon[ebx], 10		; 0000000aH
	jne	SHORT $L85299
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85299
; Line 887
	mov	edx, edi
	mov	ecx, esi
	call	@L4HWallOk@8
; Line 888
	cmp	eax, ebp
	je	SHORT $L85299
; Line 889
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4HorizWall@12
$L85299:
; Line 891
	cmp	BYTE PTR _dungeon[ebx], 12		; 0000000cH
	jne	SHORT $L85301
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85301
; Line 892
	mov	edx, edi
	mov	ecx, esi
	call	@L4HWallOk@8
; Line 893
	cmp	eax, ebp
	je	SHORT $L85301
; Line 894
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4HorizWall@12
$L85301:
; Line 896
	cmp	BYTE PTR _dungeon[ebx], 13		; 0000000dH
	jne	SHORT $L85303
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85303
; Line 897
	mov	edx, edi
	mov	ecx, esi
	call	@L4HWallOk@8
; Line 898
	cmp	eax, ebp
	je	SHORT $L85303
; Line 899
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4HorizWall@12
$L85303:
; Line 901
	cmp	BYTE PTR _dungeon[ebx], 15		; 0000000fH
	jne	SHORT $L85305
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85305
; Line 902
	mov	edx, edi
	mov	ecx, esi
	call	@L4HWallOk@8
; Line 903
	cmp	eax, ebp
	je	SHORT $L85305
; Line 904
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4HorizWall@12
$L85305:
; Line 906
	cmp	BYTE PTR _dungeon[ebx], 16		; 00000010H
	jne	SHORT $L85307
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85307
; Line 907
	mov	edx, edi
	mov	ecx, esi
	call	@L4HWallOk@8
; Line 908
	cmp	eax, ebp
	je	SHORT $L85307
; Line 909
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4HorizWall@12
$L85307:
; Line 911
	cmp	BYTE PTR _dungeon[ebx], 21		; 00000015H
	jne	SHORT $L85309
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85309
; Line 912
	mov	edx, edi
	mov	ecx, esi
	call	@L4HWallOk@8
; Line 913
	cmp	eax, ebp
	je	SHORT $L85309
; Line 914
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4HorizWall@12
$L85309:
; Line 916
	cmp	BYTE PTR _dungeon[ebx], 22		; 00000016H
	jne	SHORT $L85311
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85311
; Line 917
	mov	edx, edi
	mov	ecx, esi
	call	@L4HWallOk@8
; Line 918
	cmp	eax, ebp
	je	SHORT $L85311
; Line 919
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4HorizWall@12
$L85311:
; Line 921
	cmp	BYTE PTR _dungeon[ebx], 8
	jne	SHORT $L85313
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85313
; Line 922
	mov	edx, edi
	mov	ecx, esi
	call	@L4VWallOk@8
; Line 923
	cmp	eax, ebp
	je	SHORT $L85313
; Line 924
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4VertWall@12
$L85313:
; Line 926
	cmp	BYTE PTR _dungeon[ebx], 9
	jne	SHORT $L85315
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85315
; Line 927
	mov	edx, edi
	mov	ecx, esi
	call	@L4VWallOk@8
; Line 928
	cmp	eax, ebp
	je	SHORT $L85315
; Line 929
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4VertWall@12
$L85315:
; Line 931
	cmp	BYTE PTR _dungeon[ebx], 11		; 0000000bH
	jne	SHORT $L85317
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85317
; Line 932
	mov	edx, edi
	mov	ecx, esi
	call	@L4VWallOk@8
; Line 933
	cmp	eax, ebp
	je	SHORT $L85317
; Line 934
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4VertWall@12
$L85317:
; Line 936
	cmp	BYTE PTR _dungeon[ebx], 14		; 0000000eH
	jne	SHORT $L85319
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85319
; Line 937
	mov	edx, edi
	mov	ecx, esi
	call	@L4VWallOk@8
; Line 938
	cmp	eax, ebp
	je	SHORT $L85319
; Line 939
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4VertWall@12
$L85319:
; Line 941
	cmp	BYTE PTR _dungeon[ebx], 15		; 0000000fH
	jne	SHORT $L85321
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85321
; Line 942
	mov	edx, edi
	mov	ecx, esi
	call	@L4VWallOk@8
; Line 943
	cmp	eax, ebp
	je	SHORT $L85321
; Line 944
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4VertWall@12
$L85321:
; Line 946
	cmp	BYTE PTR _dungeon[ebx], 16		; 00000010H
	jne	SHORT $L85323
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85323
; Line 947
	mov	edx, edi
	mov	ecx, esi
	call	@L4VWallOk@8
; Line 948
	cmp	eax, ebp
	je	SHORT $L85323
; Line 949
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4VertWall@12
$L85323:
; Line 951
	cmp	BYTE PTR _dungeon[ebx], 21		; 00000015H
	jne	SHORT $L85325
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85325
; Line 952
	mov	edx, edi
	mov	ecx, esi
	call	@L4VWallOk@8
; Line 953
	cmp	eax, ebp
	je	SHORT $L85325
; Line 954
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4VertWall@12
$L85325:
; Line 956
	cmp	BYTE PTR _dungeon[ebx], 23		; 00000017H
	jne	SHORT $L85327
	push	100					; 00000064H
	xor	cl, cl
	pop	edx
	call	@random@8
	cmp	eax, 100				; 00000064H
	jge	SHORT $L85327
; Line 957
	mov	edx, edi
	mov	ecx, esi
	call	@L4VWallOk@8
; Line 958
	cmp	eax, ebp
	je	SHORT $L85327
; Line 959
	push	eax
	mov	edx, edi
	mov	ecx, esi
	call	@L4VertWall@12
$L85327:
; Line 962
	inc	esi
; Line 964
	add	ebx, 40					; 00000028H
	cmp	esi, 40					; 00000028H
	jl	$L85294
; Line 965
	inc	edi
; Line 966
	cmp	edi, 40					; 00000028H
	jl	$L85291
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 967
	ret	0
_L4AddWall ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L4HWallOk@8
_TEXT	SEGMENT
@L4HWallOk@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 970
	push	esi
; Line 979
	lea	eax, DWORD PTR [ecx+ecx*4+5]
	push	edi
; Line 980
	xor	edi, edi
	shl	eax, 3
	inc	edi
; Line 981
	cmp	BYTE PTR _dungeon[eax+edx], 6
	jne	SHORT $L85343
; Line 983
	lea	esi, DWORD PTR [ecx+ecx*4]
	lea	esi, DWORD PTR _dungeon[edx+esi*8+40]
$L85341:
; Line 985
	cmp	BYTE PTR _dflags[edx+eax], 0
	jne	SHORT $L85343
; Line 987
	cmp	BYTE PTR _dungeon[eax+edx-1], 6
	jne	SHORT $L85343
; Line 989
	cmp	BYTE PTR _dungeon[eax+edx+1], 6
	jne	SHORT $L85343
; Line 992
	add	esi, 40					; 00000028H
	inc	edi
; Line 993
	add	eax, 40					; 00000028H
; Line 995
	cmp	BYTE PTR [esi], 6
	je	SHORT $L85341
$L85343:
; Line 999
	add	ecx, edi
	xor	esi, esi
	mov	eax, edi
	lea	ecx, DWORD PTR [ecx+ecx*4]
	mov	dl, BYTE PTR _dungeon[edx+ecx*8]
; Line 1001
	xor	ecx, ecx
	inc	ecx
	cmp	dl, 10					; 0000000aH
	jne	SHORT $L85347
	mov	esi, ecx
$L85347:
; Line 1002
	cmp	dl, 12					; 0000000cH
	jne	SHORT $L85348
; Line 1003
	mov	esi, ecx
$L85348:
; Line 1004
	cmp	dl, 13					; 0000000dH
	jne	SHORT $L85349
; Line 1005
	mov	esi, ecx
$L85349:
; Line 1006
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85350
; Line 1007
	mov	esi, ecx
$L85350:
; Line 1008
	cmp	dl, 16					; 00000010H
	jne	SHORT $L85351
; Line 1009
	mov	esi, ecx
$L85351:
; Line 1010
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85352
; Line 1011
	mov	esi, ecx
$L85352:
; Line 1012
	cmp	dl, 22					; 00000016H
	jne	SHORT $L85353
; Line 1013
	mov	esi, ecx
$L85353:
; Line 1014
	cmp	edi, 3
	jg	SHORT $L85354
; Line 1015
	xor	esi, esi
$L85354:
; Line 1016
	test	esi, esi
	pop	edi
	pop	esi
	jne	SHORT $L85355
; Line 1017
	or	eax, -1
$L85355:
; Line 1019
	ret	0
@L4HWallOk@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L4VWallOk@8
_TEXT	SEGMENT
@L4VWallOk@8 PROC NEAR					; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 1031
	lea	ecx, DWORD PTR [ecx+ecx*4]
	xor	eax, eax
	shl	ecx, 3
	inc	eax
	push	esi
	cmp	BYTE PTR _dungeon[ecx+edx+1], 6
	push	edi
	jne	SHORT $L85369
$L85367:
; Line 1033
	lea	esi, DWORD PTR _dflags[ecx+edx]
	cmp	BYTE PTR [esi+eax], 0
	jne	SHORT $L85369
; Line 1035
	lea	esi, DWORD PTR _dungeon[ecx+edx]
; Line 1036
	cmp	BYTE PTR [esi+eax-40], 6
	jne	SHORT $L85369
; Line 1038
	lea	edi, DWORD PTR [ecx+eax]
	cmp	BYTE PTR _dungeon[edi+edx+40], 6
	jne	SHORT $L85369
; Line 1040
	inc	eax
; Line 1041
	cmp	BYTE PTR [esi+eax], 6
	je	SHORT $L85367
$L85369:
; Line 1044
	add	ecx, eax
	xor	esi, esi
	mov	dl, BYTE PTR _dungeon[ecx+edx]
; Line 1046
	xor	ecx, ecx
	inc	ecx
	cmp	dl, 8
	jne	SHORT $L85373
	mov	esi, ecx
$L85373:
; Line 1047
	cmp	dl, 9
	jne	SHORT $L85374
; Line 1048
	mov	esi, ecx
$L85374:
; Line 1049
	cmp	dl, 11					; 0000000bH
	jne	SHORT $L85375
; Line 1050
	mov	esi, ecx
$L85375:
; Line 1051
	cmp	dl, 14					; 0000000eH
	jne	SHORT $L85376
; Line 1052
	mov	esi, ecx
$L85376:
; Line 1053
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85377
; Line 1054
	mov	esi, ecx
$L85377:
; Line 1055
	cmp	dl, 16					; 00000010H
	jne	SHORT $L85378
; Line 1056
	mov	esi, ecx
$L85378:
; Line 1057
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85379
; Line 1058
	mov	esi, ecx
$L85379:
; Line 1059
	cmp	dl, 23					; 00000017H
	jne	SHORT $L85380
; Line 1060
	mov	esi, ecx
$L85380:
; Line 1061
	cmp	eax, 3
	jg	SHORT $L85381
; Line 1062
	xor	esi, esi
$L85381:
; Line 1063
	test	esi, esi
	pop	edi
	pop	esi
	jne	SHORT $L85382
; Line 1064
	or	eax, -1
$L85382:
; Line 1066
	ret	0
@L4VWallOk@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L4HorizWall@12
_TEXT	SEGMENT
_dx$ = 8
@L4HorizWall@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 1069
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, edx
; Line 1083
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edi+eax*8]
; Line 1084
	cmp	BYTE PTR _dungeon[eax], 13		; 0000000dH
	jne	SHORT $L85400
; Line 1085
	mov	BYTE PTR _dungeon[eax], 17		; 00000011H
$L85400:
; Line 1086
	cmp	BYTE PTR _dungeon[eax], 16		; 00000010H
	jne	SHORT $L85401
; Line 1087
	mov	BYTE PTR _dungeon[eax], 11		; 0000000bH
$L85401:
; Line 1088
	cmp	BYTE PTR _dungeon[eax], 12		; 0000000cH
	jne	SHORT $L85402
; Line 1089
	mov	BYTE PTR _dungeon[eax], 14		; 0000000eH
$L85402:
; Line 1091
	mov	ecx, DWORD PTR _dx$[esp+4]
	cmp	ecx, 1
	jle	SHORT $L85406
; Line 1092
	lea	eax, DWORD PTR _dungeon[eax+40]
; Line 1093
	lea	edx, DWORD PTR [ecx-1]
$L85404:
; Line 1095
	mov	BYTE PTR [eax], 2
; Line 1096
	add	eax, 40					; 00000028H
; Line 1097
	dec	edx
; Line 1098
	jne	SHORT $L85404
$L85406:
; Line 1100
	lea	eax, DWORD PTR [esi+ecx]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR _dungeon[edi+eax*8]
; Line 1101
	cmp	BYTE PTR [eax], 15			; 0000000fH
	jne	SHORT $L85407
; Line 1102
	mov	BYTE PTR [eax], 14			; 0000000eH
$L85407:
; Line 1103
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $L85408
; Line 1104
	mov	BYTE PTR [eax], 17			; 00000011H
$L85408:
; Line 1105
	cmp	BYTE PTR [eax], 21			; 00000015H
	jne	SHORT $L85409
; Line 1106
	mov	BYTE PTR [eax], 23			; 00000017H
$L85409:
; Line 1107
	cmp	BYTE PTR [eax], 22			; 00000016H
	jne	SHORT $L85410
; Line 1108
	mov	BYTE PTR [eax], 29			; 0000001dH
$L85410:
; Line 1109
	lea	edx, DWORD PTR [ecx-3]
	xor	cl, cl
	call	@random@8
	lea	eax, DWORD PTR [eax+esi+1]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [edi+eax*8]
	pop	edi
	pop	esi
; Line 1113
	lea	ecx, DWORD PTR _dungeon[eax]
	mov	BYTE PTR _dungeon[eax+80], 56		; 00000038H
	mov	BYTE PTR _dungeon[eax+40], 60		; 0000003cH
	cmp	BYTE PTR [ecx-1], 6
	mov	BYTE PTR [ecx], 57			; 00000039H
; Line 1114
	jne	SHORT $L85411
; Line 1115
	mov	BYTE PTR [ecx-1], 58			; 0000003aH
$L85411:
; Line 1116
	lea	eax, DWORD PTR _dungeon[eax+39]
; Line 1117
	cmp	BYTE PTR [eax], 6
	jne	SHORT $L85412
; Line 1118
	mov	BYTE PTR [eax], 59			; 0000003bH
$L85412:
; Line 1119
	ret	4
@L4HorizWall@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L4VertWall@12
_TEXT	SEGMENT
_j$ = -4
_dy$ = 8
@L4VertWall@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 1122
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 1135
	lea	edi, DWORD PTR [ecx+ecx*4]
	shl	edi, 3
	mov	DWORD PTR _j$[ebp], edx
; Line 1137
	lea	esi, DWORD PTR [edi+edx]
; Line 1138
	cmp	BYTE PTR _dungeon[esi], 14		; 0000000eH
	jne	SHORT $L85430
; Line 1139
	mov	BYTE PTR _dungeon[esi], 17		; 00000011H
$L85430:
; Line 1140
	cmp	BYTE PTR _dungeon[esi], 8
	jne	SHORT $L85431
; Line 1141
	mov	BYTE PTR _dungeon[esi], 9
$L85431:
; Line 1142
	cmp	BYTE PTR _dungeon[esi], 15		; 0000000fH
	jne	SHORT $L85432
; Line 1143
	mov	BYTE PTR _dungeon[esi], 10		; 0000000aH
$L85432:
; Line 1145
	mov	ebx, DWORD PTR _dy$[ebp]
	cmp	ebx, 1
	jle	SHORT $L85433
; Line 1146
	lea	eax, DWORD PTR [ebx-1]
	push	eax
	lea	eax, DWORD PTR _dungeon[esi+1]
	push	1
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$L85433:
; Line 1150
	lea	eax, DWORD PTR _dungeon[esi+ebx]
; Line 1151
	cmp	BYTE PTR [eax], 11			; 0000000bH
	jne	SHORT $L85435
; Line 1152
	mov	BYTE PTR [eax], 17			; 00000011H
$L85435:
; Line 1153
	cmp	BYTE PTR [eax], 9
	jne	SHORT $L85436
; Line 1154
	mov	BYTE PTR [eax], 10			; 0000000aH
$L85436:
; Line 1155
	cmp	BYTE PTR [eax], 16			; 00000010H
	jne	SHORT $L85437
; Line 1156
	mov	BYTE PTR [eax], 13			; 0000000dH
$L85437:
; Line 1157
	cmp	BYTE PTR [eax], 21			; 00000015H
	jne	SHORT $L85438
; Line 1158
	mov	BYTE PTR [eax], 22			; 00000016H
$L85438:
; Line 1159
	cmp	BYTE PTR [eax], 23			; 00000017H
	jne	SHORT $L85439
; Line 1160
	mov	BYTE PTR [eax], 29			; 0000001dH
$L85439:
; Line 1161
	lea	edx, DWORD PTR [ebx-3]
; Line 1162
	xor	cl, cl
	call	@random@8
	mov	ecx, DWORD PTR _j$[ebp]
; Line 1171
	add	eax, edi
	pop	edi
	pop	esi
	lea	eax, DWORD PTR [eax+ecx+1]
	pop	ebx
	lea	ecx, DWORD PTR _dungeon[eax]
	mov	BYTE PTR _dungeon[eax+2], 52		; 00000034H
	mov	BYTE PTR _dungeon[eax+1], 6
	cmp	BYTE PTR [ecx-40], 6
	mov	BYTE PTR [ecx], 53			; 00000035H
	jne	SHORT $L85441
; Line 1169
	mov	BYTE PTR [ecx-40], 54			; 00000036H
$L85441:
; Line 1170
	cmp	BYTE PTR [ecx-41], 6
	jne	SHORT $L85442
; Line 1171
	mov	BYTE PTR [ecx-41], 55			; 00000037H
$L85442:
; Line 1172
	leave
	ret	4
@L4VertWall@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L4tileFix
_TEXT	SEGMENT
_L4tileFix PROC NEAR					; COMDAT
; Line 1175
	push	ebp
	push	esi
; Line 1317
	push	40					; 00000028H
	xor	edx, edx
	pop	ebp
$L85584:
; Line 1319
	lea	eax, DWORD PTR _dungeon[edx+40]
	mov	esi, ebp
$L85587:
; Line 1322
	mov	cl, BYTE PTR [eax-40]
; Line 1323
	cmp	cl, 2
	jne	SHORT $L85592
; Line 1324
	cmp	BYTE PTR [eax], 6
	jne	SHORT $L85591
; Line 1325
	mov	BYTE PTR [eax], 5
$L85591:
; Line 1326
	cmp	BYTE PTR [eax], 1
	jne	SHORT $L85593
; Line 1327
	mov	BYTE PTR [eax], 13			; 0000000dH
$L85592:
; Line 1329
	cmp	cl, 1
	jne	SHORT $L85593
	cmp	BYTE PTR [eax-39], 2
	jne	SHORT $L85593
; Line 1330
	mov	BYTE PTR [eax-39], 14			; 0000000eH
$L85593:
; Line 1331
	add	eax, ebp
; Line 1333
	dec	esi
	jne	SHORT $L85587
; Line 1334
	inc	edx
; Line 1335
	cmp	edx, ebp
	jl	SHORT $L85584
; Line 1336
	xor	edx, edx
$L85594:
; Line 1338
	lea	eax, DWORD PTR _dungeon[edx+40]
	mov	esi, ebp
$L85597:
; Line 1341
	mov	cl, BYTE PTR [eax-40]
; Line 1342
	cmp	cl, 2
	jne	SHORT $L85602
; Line 1343
	cmp	BYTE PTR [eax], 6
	jne	SHORT $L85601
; Line 1344
	mov	BYTE PTR [eax], cl
$L85601:
; Line 1345
	cmp	BYTE PTR [eax], 9
	jne	SHORT $L85609
; Line 1346
	mov	BYTE PTR [eax], 11			; 0000000bH
$L85602:
; Line 1348
	cmp	cl, 9
	jne	SHORT $L85603
	cmp	BYTE PTR [eax], 6
	jne	SHORT $L85609
; Line 1349
	mov	BYTE PTR [eax], 12			; 0000000cH
$L85603:
; Line 1350
	cmp	cl, 14					; 0000000eH
	jne	SHORT $L85604
	cmp	BYTE PTR [eax], 1
	jne	SHORT $L85609
; Line 1351
	mov	BYTE PTR [eax], 13			; 0000000dH
$L85604:
; Line 1352
	cmp	cl, 6
	jne	SHORT $L85607
; Line 1353
	cmp	BYTE PTR [eax], 14			; 0000000eH
	jne	SHORT $L85606
; Line 1354
	mov	BYTE PTR [eax], 15			; 0000000fH
$L85606:
; Line 1355
	cmp	BYTE PTR [eax-39], 13			; 0000000dH
	jne	SHORT $L86591
; Line 1356
	mov	BYTE PTR [eax-39], 16			; 00000010H
$L85607:
; Line 1358
	cmp	cl, 1
	jne	SHORT $L85608
	cmp	BYTE PTR [eax-39], 9
	jne	SHORT $L85609
; Line 1359
	mov	BYTE PTR [eax-39], 10			; 0000000aH
$L85608:
; Line 1360
	cmp	cl, 6
	jne	SHORT $L85609
$L86591:
	cmp	BYTE PTR [eax-41], 1
	jne	SHORT $L85609
; Line 1361
	mov	BYTE PTR [eax-41], 1
$L85609:
; Line 1362
	add	eax, ebp
; Line 1364
	dec	esi
	jne	SHORT $L85597
; Line 1365
	inc	edx
; Line 1366
	cmp	edx, ebp
	jl	SHORT $L85594
	push	ebx
	push	edi
; Line 1367
	xor	edi, edi
	mov	bl, 30					; 0000001eH
$L85610:
; Line 1369
	xor	eax, eax
; Line 1370
	xor	esi, esi
$L85613:
; Line 1373
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [edi+eax*8]
; Line 1374
	mov	dl, BYTE PTR _dungeon[eax]
; Line 1375
	cmp	dl, 13					; 0000000dH
	jne	SHORT $L85617
; Line 1376
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1377
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L85617
; Line 1378
	mov	BYTE PTR [ecx], 27			; 0000001bH
$L85617:
; Line 1380
	cmp	dl, 27					; 0000001bH
	jne	SHORT $L85619
; Line 1381
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1382
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L86592
; Line 1383
	mov	BYTE PTR [ecx], 19			; 00000013H
$L85619:
; Line 1385
	cmp	dl, 1
	jne	SHORT $L85621
; Line 1386
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1387
	cmp	BYTE PTR [ecx], bl
	jne	$L86593
; Line 1388
	mov	BYTE PTR [ecx], 27			; 0000001bH
$L85621:
; Line 1390
	cmp	dl, 27					; 0000001bH
	jne	SHORT $L85623
$L86592:
; Line 1391
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1392
	cmp	BYTE PTR [ecx], 1
	jne	SHORT $L86594
; Line 1393
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85623:
; Line 1395
	cmp	dl, 19					; 00000013H
	jne	SHORT $L85625
; Line 1396
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1397
	cmp	BYTE PTR [ecx], 27			; 0000001bH
	jne	$L86595
; Line 1398
	mov	BYTE PTR [ecx], 26			; 0000001aH
$L85625:
; Line 1400
	cmp	dl, 27					; 0000001bH
	jne	SHORT $L85627
$L86594:
; Line 1401
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1402
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L86596
; Line 1403
	mov	BYTE PTR [ecx], 19			; 00000013H
$L85627:
; Line 1405
	cmp	dl, 2
	jne	SHORT $L85629
; Line 1406
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1407
	cmp	BYTE PTR [ecx], 15			; 0000000fH
	jne	$L86597
; Line 1408
	mov	BYTE PTR [ecx], 14			; 0000000eH
$L85629:
; Line 1410
	cmp	dl, 14					; 0000000eH
	jne	SHORT $L85631
; Line 1411
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1412
	cmp	BYTE PTR [ecx], 15			; 0000000fH
	jne	$L86598
; Line 1413
	mov	BYTE PTR [ecx], dl
$L85631:
; Line 1415
	cmp	dl, 22					; 00000016H
	jne	SHORT $L85633
; Line 1416
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1417
	cmp	BYTE PTR [ecx], 1
	jne	SHORT $L86599
; Line 1418
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85633:
; Line 1420
	cmp	dl, 27					; 0000001bH
	jne	SHORT $L85635
$L86596:
; Line 1421
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1422
	cmp	BYTE PTR [ecx], 1
	jne	$L85782
; Line 1423
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85635:
; Line 1425
	cmp	dl, 6
	jne	SHORT $L85638
; Line 1426
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1427
	cmp	BYTE PTR [ecx], 27			; 0000001bH
	jne	$L86600
; Line 1428
	cmp	BYTE PTR _dungeon[eax+41], 0
	je	$L86600
; Line 1429
	mov	BYTE PTR [ecx], 22			; 00000016H
$L85638:
; Line 1432
	cmp	dl, 22					; 00000016H
	jne	SHORT $L85640
$L86599:
; Line 1433
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1434
	cmp	BYTE PTR [ecx], bl
	jne	$L86601
; Line 1435
	mov	BYTE PTR [ecx], 19			; 00000013H
$L85640:
; Line 1437
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85642
; Line 1438
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1439
	cmp	BYTE PTR [ecx], 1
	jne	$L86602
	cmp	BYTE PTR _dungeon[eax+39], 1
	jne	$L86602
; Line 1440
	mov	BYTE PTR [ecx], 13			; 0000000dH
$L85642:
; Line 1442
	cmp	dl, 14					; 0000000eH
	jne	SHORT $L85644
$L86598:
; Line 1443
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1444
	cmp	BYTE PTR [ecx], bl
	jne	$L86603
	cmp	BYTE PTR _dungeon[eax+1], 6
	jne	$L86603
; Line 1445
	mov	BYTE PTR [ecx], 28			; 0000001cH
$L85644:
; Line 1447
	cmp	dl, 16					; 00000010H
	jne	SHORT $L85648
; Line 1448
	cmp	BYTE PTR _dungeon[eax+40], 6
	jne	SHORT $L85647
; Line 1449
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1450
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L85647
; Line 1451
	mov	BYTE PTR [ecx], 27			; 0000001bH
$L85647:
; Line 1453
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1454
	cmp	BYTE PTR [ecx], bl
	jne	$L86604
	cmp	BYTE PTR _dungeon[eax+41], bl
	jne	$L86604
; Line 1455
	mov	BYTE PTR [ecx], 27			; 0000001bH
$L85648:
; Line 1457
	cmp	dl, 6
	jne	SHORT $L85650
$L86600:
; Line 1458
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1459
	cmp	BYTE PTR [ecx], bl
	jne	$L85782
	cmp	BYTE PTR _dungeon[eax+39], 6
	jne	$L85782
; Line 1460
	mov	BYTE PTR [ecx], 21			; 00000015H
$L85650:
; Line 1462
	cmp	dl, 2
	jne	SHORT $L85652
$L86597:
; Line 1463
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1464
	cmp	BYTE PTR [ecx], 27			; 0000001bH
	jne	$L86605
	cmp	BYTE PTR _dungeon[eax+41], 9
	jne	$L86605
; Line 1465
	mov	BYTE PTR [ecx], 29			; 0000001dH
$L85652:
; Line 1467
	cmp	dl, 9
	jne	SHORT $L85654
; Line 1468
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1469
	cmp	BYTE PTR [ecx], 15			; 0000000fH
	jne	SHORT $L86606
; Line 1470
	mov	BYTE PTR [ecx], 14			; 0000000eH
$L85654:
; Line 1472
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85656
; Line 1473
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1474
	cmp	BYTE PTR [ecx], 27			; 0000001bH
	jne	$L86607
	cmp	BYTE PTR _dungeon[eax+41], 2
	jne	$L86607
; Line 1475
	mov	BYTE PTR [ecx], 29			; 0000001dH
$L85656:
; Line 1477
	cmp	dl, 19					; 00000013H
	jne	SHORT $L85658
$L86595:
; Line 1478
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1479
	cmp	BYTE PTR [ecx], 18			; 00000012H
	jne	SHORT $L86608
; Line 1480
	mov	BYTE PTR [ecx], 24			; 00000018H
$L85658:
; Line 1482
	cmp	dl, 9
	jne	SHORT $L85660
$L86606:
; Line 1483
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1484
	cmp	BYTE PTR [ecx], 15			; 0000000fH
	jne	$L85782
; Line 1485
	mov	BYTE PTR [ecx], 14			; 0000000eH
$L85660:
; Line 1487
	cmp	dl, 19					; 00000013H
	jne	SHORT $L85662
$L86608:
; Line 1488
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1489
	cmp	BYTE PTR [ecx], 19			; 00000013H
	jne	SHORT $L86609
	cmp	BYTE PTR _dungeon[eax+39], bl
	jne	SHORT $L86609
; Line 1490
	mov	BYTE PTR [ecx], 24			; 00000018H
$L85662:
; Line 1492
	cmp	dl, 24					; 00000018H
	jne	SHORT $L85663
	lea	ecx, DWORD PTR _dungeon[eax-1]
	cmp	BYTE PTR [ecx], bl
	jne	$L86610
	cmp	BYTE PTR _dungeon[eax-2], 6
	jne	$L86610
; Line 1493
	mov	BYTE PTR [ecx], 21			; 00000015H
$L85663:
; Line 1494
	cmp	dl, 2
	jne	SHORT $L85665
$L86605:
; Line 1495
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1496
	cmp	BYTE PTR [ecx], bl
	jne	$L86611
; Line 1497
	mov	BYTE PTR [ecx], 28			; 0000001cH
$L85665:
; Line 1499
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85667
$L86607:
; Line 1500
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1501
	cmp	BYTE PTR [ecx], bl
	jne	$L86612
; Line 1502
	mov	BYTE PTR [ecx], 28			; 0000001cH
$L85667:
; Line 1504
	cmp	dl, 28					; 0000001cH
	jne	SHORT $L85670
; Line 1505
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1506
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L85669
; Line 1507
	mov	BYTE PTR [ecx], 18			; 00000012H
$L85669:
; Line 1509
	cmp	BYTE PTR [ecx], 2
	jne	$L86613
; Line 1510
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85670:
; Line 1512
	cmp	dl, 19					; 00000013H
	jne	SHORT $L85674
$L86609:
; Line 1513
	mov	cl, BYTE PTR _dungeon[eax+80]
	cmp	cl, 2
	jne	$L86614
	cmp	BYTE PTR _dungeon[eax+39], 18		; 00000012H
	jne	SHORT $L85672
	cmp	BYTE PTR _dungeon[eax+41], 1
	jne	SHORT $L85672
; Line 1514
	mov	BYTE PTR _dungeon[eax+40], 17		; 00000011H
$L85672:
; Line 1515
	cmp	cl, 2
	jne	$L86614
	cmp	BYTE PTR _dungeon[eax+39], 22		; 00000016H
	jne	SHORT $L85673
	cmp	BYTE PTR _dungeon[eax+41], 1
	jne	SHORT $L85673
; Line 1516
	mov	BYTE PTR _dungeon[eax+40], 17		; 00000011H
$L85673:
; Line 1517
	cmp	cl, 2
	jne	$L86614
	cmp	BYTE PTR _dungeon[eax+39], 18		; 00000012H
	jne	$L86614
	cmp	BYTE PTR _dungeon[eax+41], 13		; 0000000dH
	jne	$L86614
; Line 1518
	mov	BYTE PTR _dungeon[eax+40], 17		; 00000011H
$L85674:
; Line 1520
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85677
$L86602:
; Line 1521
	mov	cl, BYTE PTR _dungeon[eax+80]
	cmp	cl, 2
	jne	SHORT $L85676
	cmp	BYTE PTR _dungeon[eax+39], 18		; 00000012H
	jne	SHORT $L85676
	cmp	BYTE PTR _dungeon[eax+41], 1
	jne	$L86615
; Line 1522
	mov	BYTE PTR _dungeon[eax+40], 17		; 00000011H
$L85676:
; Line 1523
	cmp	BYTE PTR _dungeon[eax+41], 1
	jne	$L86615
	cmp	BYTE PTR _dungeon[eax+39], 22		; 00000016H
	jne	$L86615
	cmp	cl, 3
	jne	$L86615
; Line 1524
	mov	BYTE PTR _dungeon[eax+40], 17		; 00000011H
$L85677:
; Line 1526
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85679
$L86612:
; Line 1527
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1528
	cmp	BYTE PTR [ecx], 28			; 0000001cH
	jne	SHORT $L86616
	cmp	BYTE PTR _dungeon[eax+80], bl
	jne	SHORT $L86616
	cmp	BYTE PTR _dungeon[eax+39], 6
	jne	SHORT $L86616
; Line 1529
	mov	BYTE PTR [ecx], 23			; 00000017H
$L85679:
; Line 1531
	cmp	dl, 14					; 0000000eH
	jne	SHORT $L85681
$L86603:
; Line 1532
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1533
	cmp	BYTE PTR [ecx], 28			; 0000001cH
	jne	$L86617
	cmp	BYTE PTR _dungeon[eax+80], 1
	jne	$L86617
; Line 1534
	mov	BYTE PTR [ecx], 23			; 00000017H
$L85681:
; Line 1536
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85683
$L86616:
; Line 1537
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1538
	cmp	BYTE PTR [ecx], 27			; 0000001bH
	jne	$L86618
	cmp	BYTE PTR _dungeon[eax+41], bl
	jne	$L86618
; Line 1539
	mov	BYTE PTR [ecx], 29			; 0000001dH
$L85683:
; Line 1541
	cmp	dl, 28					; 0000001cH
	jne	SHORT $L85685
$L86613:
; Line 1542
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1543
	cmp	BYTE PTR [ecx], 9
	jne	$L85782
; Line 1544
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85685:
; Line 1546
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85686
$L86615:
	cmp	BYTE PTR _dungeon[eax+39], 21		; 00000015H
	jne	SHORT $L86619
; Line 1547
	mov	BYTE PTR _dungeon[eax+40], 24		; 00000018H
$L85686:
; Line 1548
	cmp	dl, 2
	jne	SHORT $L85689
$L86611:
; Line 1549
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1550
	cmp	BYTE PTR [ecx], 27			; 0000001bH
	jne	SHORT $L85688
	cmp	BYTE PTR _dungeon[eax+41], bl
	jne	SHORT $L85688
; Line 1551
	mov	BYTE PTR [ecx], 29			; 0000001dH
$L85688:
; Line 1553
	cmp	BYTE PTR [ecx], 18			; 00000012H
	jne	$L86620
; Line 1554
	mov	BYTE PTR [ecx], 25			; 00000019H
$L85689:
; Line 1556
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85691
$L86619:
; Line 1557
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1558
	cmp	BYTE PTR [ecx], 9
	jne	SHORT $L86621
	cmp	BYTE PTR _dungeon[eax+80], 2
	jne	SHORT $L86621
; Line 1559
	mov	BYTE PTR [ecx], 11			; 0000000bH
$L85691:
; Line 1561
	cmp	dl, 19					; 00000013H
	jne	SHORT $L85693
$L86614:
; Line 1562
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1563
	cmp	BYTE PTR [ecx], 10			; 0000000aH
	jne	$L86622
; Line 1564
	mov	BYTE PTR [ecx], 17			; 00000011H
$L85693:
; Line 1566
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85695
$L86618:
; Line 1567
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1568
	cmp	BYTE PTR [ecx], 3
	jne	$L86623
; Line 1569
	mov	BYTE PTR [ecx], 4
$L85695:
; Line 1571
	cmp	dl, 22					; 00000016H
	jne	SHORT $L85697
$L86601:
; Line 1572
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1573
	cmp	BYTE PTR [ecx], 9
	jne	SHORT $L86624
; Line 1574
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85697:
; Line 1576
	cmp	dl, 18					; 00000012H
	jne	SHORT $L85699
; Line 1577
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1578
	cmp	BYTE PTR [ecx], bl
	jne	$L86625
; Line 1579
	mov	BYTE PTR [ecx], dl
$L85699:
; Line 1581
	cmp	dl, 24					; 00000018H
	jne	SHORT $L85700
$L86610:
	lea	ecx, DWORD PTR _dungeon[eax-40]
	cmp	BYTE PTR [ecx], bl
	jne	$L85782
; Line 1582
	mov	BYTE PTR [ecx], 19			; 00000013H
$L85700:
; Line 1583
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85703
$L86621:
; Line 1584
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1585
	cmp	BYTE PTR [ecx], 2
	jne	SHORT $L85702
; Line 1586
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85702:
; Line 1588
	cmp	BYTE PTR [ecx], 9
	jne	SHORT $L86626
; Line 1589
	mov	BYTE PTR [ecx], 10			; 0000000aH
$L85703:
; Line 1591
	cmp	dl, 22					; 00000016H
	jne	SHORT $L85705
$L86624:
; Line 1592
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1593
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L86627
; Line 1594
	mov	BYTE PTR [ecx], 18			; 00000012H
$L85705:
; Line 1596
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85707
$L86626:
; Line 1597
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1598
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L86628
; Line 1599
	mov	BYTE PTR [ecx], 18			; 00000012H
$L85707:
; Line 1601
	cmp	dl, 16					; 00000010H
	jne	SHORT $L85709
$L86604:
; Line 1602
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1603
	cmp	BYTE PTR [ecx], 2
	jne	$L86629
; Line 1604
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85709:
; Line 1606
	cmp	dl, 13					; 0000000dH
	jne	SHORT $L85711
; Line 1607
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1608
	cmp	BYTE PTR [ecx], 2
	jne	$L86630
; Line 1609
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85711:
; Line 1611
	cmp	dl, 22					; 00000016H
	jne	SHORT $L85713
$L86627:
; Line 1612
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1613
	cmp	BYTE PTR [ecx], 2
	jne	$L86631
; Line 1614
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85713:
; Line 1616
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85716
$L86628:
; Line 1617
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1618
	cmp	BYTE PTR [ecx], 18			; 00000012H
	jne	SHORT $L85715
	cmp	BYTE PTR _dungeon[eax+80], bl
	jne	SHORT $L85715
; Line 1619
	mov	BYTE PTR [ecx], 24			; 00000018H
$L85715:
; Line 1621
	cmp	BYTE PTR [ecx], 9
	jne	$L86632
	cmp	BYTE PTR _dungeon[eax+41], 1
	jne	$L86632
; Line 1622
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85716:
; Line 1624
	cmp	dl, 2
	jne	SHORT $L85718
$L86620:
; Line 1625
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1626
	cmp	BYTE PTR [ecx], 27			; 0000001bH
	jne	$L86633
	cmp	BYTE PTR _dungeon[eax+41], 2
	jne	$L86633
; Line 1627
	mov	BYTE PTR [ecx], 29			; 0000001dH
$L85718:
; Line 1629
	cmp	dl, 23					; 00000017H
	jne	SHORT $L85721
; Line 1630
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1631
	cmp	BYTE PTR [ecx], 2
	jne	SHORT $L85720
; Line 1632
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85720:
; Line 1634
	cmp	BYTE PTR [ecx], 9
	jne	SHORT $L86634
; Line 1635
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85721:
; Line 1637
	cmp	dl, 25					; 00000019H
	jne	SHORT $L85723
; Line 1638
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1639
	cmp	BYTE PTR [ecx], 2
	jne	$L86635
; Line 1640
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85723:
; Line 1642
	cmp	dl, 22					; 00000016H
	jne	SHORT $L85725
$L86631:
; Line 1643
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1644
	cmp	BYTE PTR [ecx], 9
	jne	$L85782
; Line 1645
	mov	BYTE PTR [ecx], 11			; 0000000bH
$L85725:
; Line 1647
	cmp	dl, 23					; 00000017H
	jne	SHORT $L85727
$L86634:
; Line 1648
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1649
	cmp	BYTE PTR [ecx], 9
	jne	SHORT $L86636
; Line 1650
	mov	BYTE PTR [ecx], 11			; 0000000bH
$L85727:
; Line 1652
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85729
$L86623:
; Line 1653
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1654
	cmp	BYTE PTR [ecx], 1
	jne	$L85782
; Line 1655
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85729:
; Line 1657
	cmp	dl, 11					; 0000000bH
	jne	SHORT $L85731
; Line 1658
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1659
	cmp	BYTE PTR [ecx], 15			; 0000000fH
	jne	$L86637
; Line 1660
	mov	BYTE PTR [ecx], 14			; 0000000eH
$L85731:
; Line 1662
	cmp	dl, 23					; 00000017H
	jne	SHORT $L85733
$L86636:
; Line 1663
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1664
	cmp	BYTE PTR [ecx], 1
	jne	$L86638
; Line 1665
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85733:
; Line 1667
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85736
$L86632:
; Line 1668
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1669
	cmp	BYTE PTR [ecx], 27			; 0000001bH
	jne	SHORT $L85735
; Line 1670
	mov	BYTE PTR [ecx], 26			; 0000001aH
$L85735:
; Line 1672
	cmp	BYTE PTR [ecx], 18			; 00000012H
	jne	$L86639
; Line 1673
	mov	BYTE PTR [ecx], 24			; 00000018H
$L85736:
; Line 1675
	cmp	dl, 26					; 0000001aH
	jne	SHORT $L85738
; Line 1676
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1677
	cmp	BYTE PTR [ecx], 1
	jne	$L86640
; Line 1678
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85738:
; Line 1680
	cmp	dl, 29					; 0000001dH
	jne	SHORT $L85741
; Line 1681
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1682
	cmp	BYTE PTR [ecx], 1
	jne	SHORT $L85740
; Line 1683
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85740:
; Line 1684
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1685
	cmp	BYTE PTR [ecx], 2
	jne	$L86641
; Line 1686
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85741:
; Line 1688
	cmp	dl, 1
	jne	SHORT $L85742
$L86593:
	lea	ecx, DWORD PTR _dungeon[eax-1]
	cmp	BYTE PTR [ecx], 15			; 0000000fH
	jne	$L85782
; Line 1689
	mov	BYTE PTR [ecx], 10			; 0000000aH
$L85742:
; Line 1690
	cmp	dl, 18					; 00000012H
	jne	SHORT $L85744
$L86625:
; Line 1691
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1692
	cmp	BYTE PTR [ecx], 2
	jne	SHORT $L86642
; Line 1693
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85744:
; Line 1695
	cmp	dl, 23					; 00000017H
	jne	SHORT $L85746
$L86638:
; Line 1696
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1697
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L86643
; Line 1698
	mov	BYTE PTR [ecx], 18			; 00000012H
$L85746:
; Line 1700
	cmp	dl, 18					; 00000012H
	jne	SHORT $L85748
$L86642:
; Line 1701
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1702
	cmp	BYTE PTR [ecx], 9
	jne	$L86644
; Line 1703
	mov	BYTE PTR [ecx], 10			; 0000000aH
$L85748:
; Line 1705
	cmp	dl, 14					; 0000000eH
	jne	SHORT $L85750
$L86617:
; Line 1706
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1707
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L86645
	cmp	BYTE PTR _dungeon[eax+41], bl
	jne	SHORT $L86645
; Line 1708
	mov	BYTE PTR [ecx], 23			; 00000017H
$L85750:
; Line 1710
	cmp	dl, 2
	jne	SHORT $L85752
$L86633:
; Line 1711
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1712
	cmp	BYTE PTR [ecx], 28			; 0000001cH
	jne	$L85782
	cmp	BYTE PTR _dungeon[eax+39], 6
	jne	$L85782
; Line 1713
	mov	BYTE PTR [ecx], 23			; 00000017H
$L85752:
; Line 1715
	cmp	dl, 23					; 00000017H
	jne	SHORT $L85754
$L86643:
; Line 1716
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1717
	cmp	BYTE PTR [ecx], 18			; 00000012H
	jne	SHORT $L86646
	cmp	BYTE PTR _dungeon[eax-1], 6
	jne	SHORT $L86646
; Line 1718
	mov	BYTE PTR [ecx], 24			; 00000018H
$L85754:
; Line 1720
	cmp	dl, 14					; 0000000eH
	jne	SHORT $L85757
$L86645:
; Line 1722
	cmp	BYTE PTR _dungeon[eax+40], 23		; 00000017H
	jne	SHORT $L85756
	cmp	BYTE PTR _dungeon[eax+80], bl
	jne	SHORT $L85756
; Line 1723
	mov	BYTE PTR _dungeon[eax+40], 28		; 0000001cH
$L85756:
; Line 1725
	cmp	BYTE PTR _dungeon[eax+40], 28		; 0000001cH
	jne	$L85782
	cmp	BYTE PTR _dungeon[eax+80], bl
	jne	$L85782
	cmp	BYTE PTR _dungeon[eax+39], 6
	jne	$L85782
; Line 1726
	mov	BYTE PTR _dungeon[eax+40], 23		; 00000017H
$L85757:
; Line 1728
	cmp	dl, 23					; 00000017H
	jne	SHORT $L85759
$L86646:
; Line 1729
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1730
	cmp	BYTE PTR [ecx], bl
	jne	$L85782
; Line 1731
	mov	BYTE PTR [ecx], 19			; 00000013H
$L85759:
; Line 1733
	cmp	dl, 29					; 0000001dH
	jne	SHORT $L85762
$L86641:
; Line 1734
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1735
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L85761
; Line 1736
	mov	BYTE PTR [ecx], 19			; 00000013H
$L85761:
; Line 1737
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1738
	cmp	BYTE PTR [ecx], bl
	jne	$L85782
; Line 1739
	mov	BYTE PTR [ecx], 18			; 00000012H
$L85762:
; Line 1741
	cmp	dl, 19					; 00000013H
	jne	SHORT $L85764
$L86622:
; Line 1742
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1743
	cmp	BYTE PTR [ecx], bl
	jne	$L86647
; Line 1744
	mov	BYTE PTR [ecx], 19			; 00000013H
$L85764:
; Line 1746
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85766
$L86639:
; Line 1747
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1748
	cmp	BYTE PTR [ecx], bl
	jne	$L85782
; Line 1749
	mov	BYTE PTR [ecx], 19			; 00000013H
$L85766:
; Line 1751
	cmp	dl, 26					; 0000001aH
	jne	SHORT $L85768
$L86640:
; Line 1752
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1753
	cmp	BYTE PTR [ecx], bl
	jne	$L85782
; Line 1754
	mov	BYTE PTR [ecx], 19			; 00000013H
$L85768:
; Line 1756
	cmp	dl, 16					; 00000010H
	jne	SHORT $L85770
$L86629:
; Line 1757
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1758
	cmp	BYTE PTR [ecx], bl
	jne	$L85782
; Line 1759
	mov	BYTE PTR [ecx], 18			; 00000012H
$L85770:
; Line 1761
	cmp	dl, 13					; 0000000dH
	jne	SHORT $L85772
$L86630:
; Line 1762
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1763
	cmp	BYTE PTR [ecx], 9
	jne	SHORT $L85782
; Line 1764
	mov	BYTE PTR [ecx], 10			; 0000000aH
$L85772:
; Line 1766
	cmp	dl, 25					; 00000019H
	jne	SHORT $L85774
$L86635:
; Line 1767
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1768
	cmp	BYTE PTR [ecx], bl
	jne	SHORT $L85782
; Line 1769
	mov	BYTE PTR [ecx], 18			; 00000012H
$L85774:
; Line 1771
	cmp	dl, 18					; 00000012H
	jne	SHORT $L85776
$L86644:
; Line 1772
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1773
	cmp	BYTE PTR [ecx], 2
	jne	SHORT $L85782
; Line 1774
	mov	BYTE PTR [ecx], 15			; 0000000fH
$L85776:
; Line 1776
	cmp	dl, 11					; 0000000bH
	jne	SHORT $L85778
$L86637:
; Line 1777
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1778
	cmp	BYTE PTR [ecx], 3
	jne	SHORT $L85782
; Line 1779
	mov	BYTE PTR [ecx], 5
$L85778:
; Line 1781
	cmp	dl, 19					; 00000013H
	jne	SHORT $L85782
$L86647:
; Line 1783
	cmp	BYTE PTR _dungeon[eax+40], 9
	jne	SHORT $L85780
; Line 1784
	mov	BYTE PTR _dungeon[eax+40], 11		; 0000000bH
$L85780:
; Line 1786
	cmp	BYTE PTR _dungeon[eax+40], 1
	jne	SHORT $L85781
; Line 1787
	mov	BYTE PTR _dungeon[eax+40], 13		; 0000000dH
$L85781:
; Line 1789
	cmp	BYTE PTR _dungeon[eax+40], 13		; 0000000dH
	jne	SHORT $L85782
	cmp	BYTE PTR _dungeon[eax+39], 6
	jne	SHORT $L85782
; Line 1790
	mov	BYTE PTR _dungeon[eax+40], 16		; 00000010H
$L85782:
; Line 1792
	lea	eax, DWORD PTR [esi+1]
	mov	esi, eax
; Line 1793
	cmp	esi, ebp
	jl	$L85613
; Line 1794
	inc	edi
; Line 1795
	cmp	edi, ebp
	jl	$L85610
; Line 1796
	xor	edi, edi
$L85783:
; Line 1798
	xor	esi, esi
$L85786:
; Line 1801
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edi+eax*8]
; Line 1802
	mov	dl, BYTE PTR _dungeon[eax]
; Line 1803
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85790
; Line 1804
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1805
	cmp	BYTE PTR [ecx], 24			; 00000018H
	jne	SHORT $L85790
	cmp	BYTE PTR _dungeon[eax+2], 1
	jne	SHORT $L85790
; Line 1806
	mov	BYTE PTR [ecx], 17			; 00000011H
$L85790:
; Line 1811
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85791
	cmp	BYTE PTR _dungeon[eax+41], 9
	jne	$L86648
	cmp	BYTE PTR _dungeon[eax+39], 1
	jne	$L86648
	cmp	BYTE PTR _dungeon[eax+80], 16		; 00000010H
	jne	$L86648
; Line 1812
	mov	BYTE PTR _dungeon[eax+40], 29		; 0000001dH
$L85791:
; Line 1814
	cmp	dl, 2
	jne	SHORT $L85792
	lea	ecx, DWORD PTR _dungeon[eax-40]
	cmp	BYTE PTR [ecx], 6
	jne	$L86649
; Line 1815
	mov	BYTE PTR [ecx], 8
$L85792:
; Line 1816
	cmp	dl, 1
	jne	SHORT $L85793
	lea	ecx, DWORD PTR _dungeon[eax-1]
	cmp	BYTE PTR [ecx], 6
	jne	SHORT $L86650
; Line 1817
	mov	BYTE PTR [ecx], 7
$L85793:
; Line 1818
	cmp	dl, 6
	jne	SHORT $L85795
; Line 1819
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1820
	cmp	BYTE PTR [ecx], 15			; 0000000fH
	jne	$L86651
	cmp	BYTE PTR _dungeon[eax+41], 4
	jne	$L86651
; Line 1821
	mov	BYTE PTR [ecx], 10			; 0000000aH
$L85795:
; Line 1823
	cmp	dl, 1
	jne	SHORT $L85798
$L86650:
; Line 1824
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1825
	cmp	BYTE PTR [ecx], 3
	jne	SHORT $L85797
; Line 1826
	mov	BYTE PTR [ecx], 4
$L85797:
; Line 1828
	cmp	BYTE PTR [ecx], 6
	jne	SHORT $L86652
; Line 1829
	mov	BYTE PTR [ecx], 4
$L85798:
; Line 1831
	cmp	dl, 9
	jne	SHORT $L85800
; Line 1832
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1833
	cmp	BYTE PTR [ecx], 3
	jne	$L86653
; Line 1834
	mov	BYTE PTR [ecx], 4
$L85800:
; Line 1836
	cmp	dl, 10					; 0000000aH
	jne	SHORT $L85802
; Line 1837
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1838
	cmp	BYTE PTR [ecx], 3
	jne	$L86654
; Line 1839
	mov	BYTE PTR [ecx], 4
$L85802:
; Line 1841
	cmp	dl, 13					; 0000000dH
	jne	SHORT $L85804
; Line 1842
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1843
	cmp	BYTE PTR [ecx], 3
	jne	SHORT $L86655
; Line 1844
	mov	BYTE PTR [ecx], 4
$L85804:
; Line 1846
	cmp	dl, 1
	jne	SHORT $L85807
$L86652:
; Line 1847
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1848
	cmp	BYTE PTR [ecx], 5
	jne	SHORT $L85806
; Line 1849
	mov	BYTE PTR [ecx], 12			; 0000000cH
$L85806:
; Line 1851
	cmp	BYTE PTR [ecx], 16			; 00000010H
	jne	$L86656
; Line 1852
	mov	BYTE PTR [ecx], 13			; 0000000dH
$L85807:
; Line 1854
	cmp	dl, 6
	jne	SHORT $L85809
$L86651:
; Line 1855
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1856
	cmp	BYTE PTR [ecx], 13			; 0000000dH
	jne	$L85849
; Line 1857
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85809:
; Line 1859
	cmp	dl, 25					; 00000019H
	jne	SHORT $L85811
; Line 1860
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1861
	cmp	BYTE PTR [ecx], 9
	jne	$L85849
; Line 1862
	mov	BYTE PTR [ecx], 10			; 0000000aH
$L85811:
; Line 1864
	cmp	dl, 13					; 0000000dH
	jne	SHORT $L85813
$L86655:
; Line 1865
	lea	ecx, DWORD PTR _dungeon[eax+1]
; Line 1866
	cmp	BYTE PTR [ecx], 5
	jne	$L85849
; Line 1867
	mov	BYTE PTR [ecx], 12			; 0000000cH
$L85813:
; Line 1869
	cmp	dl, 28					; 0000001cH
	jne	SHORT $L85815
	cmp	BYTE PTR _dungeon[eax-1], 6
	jne	$L86657
; Line 1870
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1871
	cmp	BYTE PTR [ecx], 1
	jne	$L86657
; Line 1872
	mov	BYTE PTR [ecx], 23			; 00000017H
$L85815:
; Line 1874
	cmp	dl, 19					; 00000013H
	jne	SHORT $L85817
; Line 1875
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1876
	cmp	BYTE PTR [ecx], 10			; 0000000aH
	jne	$L85849
; Line 1877
	mov	BYTE PTR [ecx], 17			; 00000011H
$L85817:
; Line 1879
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85819
; Line 1880
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1881
	cmp	BYTE PTR [ecx], 9
	jne	SHORT $L86658
; Line 1882
	mov	BYTE PTR [ecx], 11			; 0000000bH
$L85819:
; Line 1884
	cmp	dl, 11					; 0000000bH
	jne	SHORT $L85821
; Line 1885
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1886
	cmp	BYTE PTR [ecx], 3
	jne	SHORT $L86659
; Line 1887
	mov	BYTE PTR [ecx], 5
$L85821:
; Line 1889
	cmp	dl, 10					; 0000000aH
	jne	SHORT $L85823
$L86654:
; Line 1890
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1891
	cmp	BYTE PTR [ecx], 4
	jne	$L85849
; Line 1892
	mov	BYTE PTR [ecx], 12			; 0000000cH
$L85823:
; Line 1894
	cmp	dl, 14					; 0000000eH
	jne	SHORT $L85825
; Line 1895
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1896
	cmp	BYTE PTR [ecx], 4
	jne	$L86660
; Line 1897
	mov	BYTE PTR [ecx], 12			; 0000000cH
$L85825:
; Line 1899
	cmp	dl, 27					; 0000001bH
	jne	SHORT $L85827
; Line 1900
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1901
	cmp	BYTE PTR [ecx], 9
	jne	$L85849
; Line 1902
	mov	BYTE PTR [ecx], 11			; 0000000bH
$L85827:
; Line 1904
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85829
$L86648:
; Line 1905
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1906
	cmp	BYTE PTR [ecx], 4
	jne	SHORT $L86661
; Line 1907
	mov	BYTE PTR [ecx], 12			; 0000000cH
$L85829:
; Line 1909
	cmp	dl, 21					; 00000015H
	jne	SHORT $L85831
$L86658:
; Line 1910
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1911
	cmp	BYTE PTR [ecx], 1
	jne	$L85849
; Line 1912
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85831:
; Line 1914
	cmp	dl, 11					; 0000000bH
	jne	SHORT $L85833
$L86659:
; Line 1915
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1916
	cmp	BYTE PTR [ecx], 4
	jne	$L85849
; Line 1917
	mov	BYTE PTR [ecx], 12			; 0000000cH
$L85833:
; Line 1919
	cmp	dl, 2
	jne	SHORT $L85835
$L86649:
; Line 1920
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1921
	cmp	BYTE PTR [ecx], 3
	jne	SHORT $L86662
; Line 1922
	mov	BYTE PTR [ecx], 5
$L85835:
; Line 1924
	cmp	dl, 9
	jne	SHORT $L85837
$L86653:
; Line 1925
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1926
	cmp	BYTE PTR [ecx], 3
	jne	SHORT $L86663
; Line 1927
	mov	BYTE PTR [ecx], 5
$L85837:
; Line 1929
	cmp	dl, 14					; 0000000eH
	jne	SHORT $L85839
$L86660:
; Line 1930
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1931
	cmp	BYTE PTR [ecx], 3
	jne	SHORT $L85849
; Line 1932
	mov	BYTE PTR [ecx], 5
$L85839:
; Line 1934
	cmp	dl, 15					; 0000000fH
	jne	SHORT $L85841
$L86661:
; Line 1935
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1936
	cmp	BYTE PTR [ecx], 3
	jne	SHORT $L85849
; Line 1937
	mov	BYTE PTR [ecx], 5
$L85841:
; Line 1939
	cmp	dl, 2
	jne	SHORT $L85844
$L86662:
; Line 1940
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1941
	cmp	BYTE PTR [ecx], 5
	jne	SHORT $L85843
	cmp	BYTE PTR _dungeon[eax+39], 16		; 00000010H
	jne	SHORT $L85843
; Line 1942
	mov	BYTE PTR [ecx], 12			; 0000000cH
$L85843:
; Line 1944
	cmp	BYTE PTR [ecx], 4
	jne	SHORT $L85849
; Line 1945
	mov	BYTE PTR [ecx], 12			; 0000000cH
$L85844:
; Line 1947
	cmp	dl, 9
	jne	SHORT $L85846
$L86663:
; Line 1948
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1949
	cmp	BYTE PTR [ecx], 4
	jne	SHORT $L85849
; Line 1950
	mov	BYTE PTR [ecx], 12			; 0000000cH
$L85846:
; Line 1952
	cmp	dl, 1
	jne	SHORT $L85847
$L86656:
	lea	ecx, DWORD PTR _dungeon[eax-1]
	cmp	BYTE PTR [ecx], 8
	jne	SHORT $L85849
; Line 1953
	mov	BYTE PTR [ecx], 9
$L85847:
; Line 1954
	cmp	dl, 28					; 0000001cH
	jne	SHORT $L85849
$L86657:
; Line 1955
	lea	ecx, DWORD PTR _dungeon[eax+40]
; Line 1956
	cmp	BYTE PTR [ecx], 23			; 00000017H
	jne	SHORT $L85849
	cmp	BYTE PTR _dungeon[eax+41], 3
	jne	SHORT $L85849
; Line 1957
	mov	BYTE PTR [ecx], 16			; 00000010H
$L85849:
; Line 1959
	inc	esi
; Line 1960
	cmp	esi, ebp
	jl	$L85786
; Line 1961
	inc	edi
; Line 1962
	cmp	edi, ebp
	jl	$L85783
; Line 1963
	xor	esi, esi
$L85850:
; Line 1965
	lea	eax, DWORD PTR _dungeon[esi+1]
	mov	edi, ebp
$L85853:
; Line 2007
	lea	edx, DWORD PTR [eax+40]
	mov	cl, BYTE PTR [edx-41]
	cmp	cl, 21					; 00000015H
	jne	SHORT $L85856
; Line 1969
	cmp	BYTE PTR [eax+39], 10			; 0000000aH
	jne	$L86664
; Line 1970
	mov	BYTE PTR [eax+39], 17			; 00000011H
$L85856:
; Line 1971
	cmp	cl, 17					; 00000011H
	jne	SHORT $L85857
	cmp	BYTE PTR [eax+39], 4
	jne	SHORT $L86665
; Line 1972
	mov	BYTE PTR [eax+39], 12			; 0000000cH
$L85857:
; Line 1973
	cmp	cl, 10					; 0000000aH
	jne	SHORT $L85858
	cmp	BYTE PTR [eax+39], 4
	jne	SHORT $L86666
; Line 1974
	mov	BYTE PTR [eax+39], 12			; 0000000cH
$L85858:
; Line 1975
	cmp	cl, 17					; 00000011H
	jne	SHORT $L85859
$L86665:
	cmp	BYTE PTR [eax], 5
	jne	$L85873
; Line 1976
	mov	BYTE PTR [eax], 12			; 0000000cH
$L85859:
; Line 1977
	cmp	cl, 29					; 0000001dH
	jne	SHORT $L85860
	cmp	BYTE PTR [eax], 9
	jne	$L85873
; Line 1978
	mov	BYTE PTR [eax], 10			; 0000000aH
$L85860:
; Line 1979
	cmp	cl, 13					; 0000000dH
	jne	SHORT $L85861
	cmp	BYTE PTR [eax], 5
	jne	$L85873
; Line 1980
	mov	BYTE PTR [eax], 12			; 0000000cH
$L85861:
; Line 1981
	cmp	cl, 9
	jne	SHORT $L85862
	cmp	BYTE PTR [eax], 16			; 00000010H
	jne	$L85873
; Line 1982
	mov	BYTE PTR [eax], 13			; 0000000dH
$L85862:
; Line 1983
	cmp	cl, 10					; 0000000aH
	jne	SHORT $L85863
$L86666:
	cmp	BYTE PTR [eax], 16			; 00000010H
	jne	SHORT $L86667
; Line 1984
	mov	BYTE PTR [eax], 13			; 0000000dH
$L85863:
; Line 1985
	cmp	cl, 16					; 00000010H
	jne	SHORT $L85864
	cmp	BYTE PTR [eax], 3
	jne	SHORT $L86668
; Line 1986
	mov	BYTE PTR [eax], 4
$L85864:
; Line 1987
	cmp	cl, 11					; 0000000bH
	jne	SHORT $L85865
	cmp	BYTE PTR [eax], 5
	jne	$L85873
; Line 1988
	mov	BYTE PTR [eax], 12			; 0000000cH
$L85865:
; Line 1989
	cmp	cl, 10					; 0000000aH
	jne	SHORT $L85866
$L86667:
	cmp	BYTE PTR [eax+39], 3
	jne	$L85873
	cmp	BYTE PTR [edx-2], 16			; 00000010H
	jne	SHORT $L85873
; Line 1990
	mov	BYTE PTR [eax+39], 12			; 0000000cH
$L85866:
; Line 1991
	cmp	cl, 16					; 00000010H
	jne	SHORT $L85867
$L86668:
	cmp	BYTE PTR [eax], 5
	jne	SHORT $L85873
; Line 1992
	mov	BYTE PTR [eax], 12			; 0000000cH
$L85867:
; Line 1993
	cmp	cl, 1
	jne	SHORT $L85868
	cmp	BYTE PTR [eax], 6
	jne	SHORT $L85873
; Line 1994
	mov	BYTE PTR [eax], 4
$L85868:
; Line 1995
	cmp	cl, 21					; 00000015H
	jne	SHORT $L85869
$L86664:
	cmp	BYTE PTR [eax+39], 13			; 0000000dH
	jne	SHORT $L85873
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $L85873
; Line 1996
	mov	BYTE PTR [edx], 12			; 0000000cH
$L85869:
; Line 1997
	cmp	cl, 15					; 0000000fH
	jne	SHORT $L85870
	cmp	BYTE PTR [eax+39], 10			; 0000000aH
	jne	SHORT $L86669
; Line 1998
	mov	BYTE PTR [eax+39], 17			; 00000011H
$L85870:
; Line 1999
	cmp	cl, 22					; 00000016H
	jne	SHORT $L85871
	cmp	BYTE PTR [eax], 11			; 0000000bH
	jne	SHORT $L85873
; Line 2000
	mov	BYTE PTR [eax], 17			; 00000011H
$L85871:
; Line 2001
	cmp	cl, 15					; 0000000fH
	jne	SHORT $L85872
$L86669:
	cmp	BYTE PTR [eax+39], 28			; 0000001cH
	jne	SHORT $L85873
	cmp	BYTE PTR [edx+39], 16			; 00000010H
	jne	SHORT $L85873
; Line 2002
	mov	BYTE PTR [eax+39], 23			; 00000017H
$L85872:
; Line 2003
	cmp	cl, 28					; 0000001cH
	jne	SHORT $L85873
	cmp	BYTE PTR [eax+39], 23			; 00000017H
	jne	SHORT $L85873
	cmp	BYTE PTR [edx], 1
	jne	SHORT $L85873
	cmp	BYTE PTR [edx+39], 6
	jne	SHORT $L85873
; Line 2004
	mov	BYTE PTR [eax+39], 16			; 00000010H
$L85873:
; Line 2007
	dec	edi
	mov	eax, edx
	jne	$L85853
; Line 2008
	inc	esi
; Line 2009
	cmp	esi, ebp
	jl	$L85850
	pop	edi
; Line 2010
	xor	edx, edx
	pop	ebx
$L85874:
; Line 2012
	lea	eax, DWORD PTR _dungeon[edx]
	mov	esi, ebp
$L85878:
; Line 2015
	mov	cl, BYTE PTR [eax]
; Line 2016
	cmp	cl, 15					; 0000000fH
	jne	SHORT $L85881
	cmp	BYTE PTR [eax+40], 28			; 0000001cH
	jne	SHORT $L85881
	cmp	BYTE PTR [eax+80], 16			; 00000010H
	jne	SHORT $L85881
; Line 2017
	mov	BYTE PTR [eax+40], 23			; 00000017H
$L85881:
; Line 2018
	cmp	cl, 21					; 00000015H
	jne	SHORT $L85882
	cmp	BYTE PTR [eax+39], cl
	jne	SHORT $L85883
	cmp	BYTE PTR [eax+41], 13			; 0000000dH
	jne	SHORT $L85883
	cmp	BYTE PTR [eax+80], 2
	jne	SHORT $L85883
; Line 2019
	mov	BYTE PTR [eax+40], 17			; 00000011H
$L85882:
; Line 2020
	cmp	cl, 19					; 00000013H
	jne	SHORT $L85883
	cmp	BYTE PTR [eax+40], 15			; 0000000fH
	jne	SHORT $L85883
	cmp	BYTE PTR [eax+41], 12			; 0000000cH
	jne	SHORT $L85883
; Line 2021
	mov	BYTE PTR [eax+40], 17			; 00000011H
$L85883:
; Line 2022
	add	eax, ebp
; Line 2024
	dec	esi
	jne	SHORT $L85878
; Line 2025
	inc	edx
; Line 2026
	cmp	edx, ebp
	jl	SHORT $L85874
	pop	esi
	pop	ebp
; Line 2027
	ret	0
_L4tileFix ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L4Subs
_TEXT	SEGMENT
_DRLG_L4Subs PROC NEAR					; COMDAT
; Line 2030
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 2041
	xor	edi, edi
$L85894:
; Line 2043
	push	40					; 00000028H
; Line 2064
	mov	esi, edi
	pop	ebp
$L85897:
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $L85903
	movzx	eax, BYTE PTR _dungeon[esi]
	mov	bl, BYTE PTR _L4BTYPES[eax]
	test	bl, bl
	je	SHORT $L85903
; Line 2049
	cmp	BYTE PTR _dflags[esi], 0
	jne	SHORT $L85903
; Line 2050
	push	16					; 00000010H
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 2051
	or	ecx, -1
	jmp	SHORT $L86691
$L85905:
; Line 2053
	inc	ecx
	cmp	ecx, 140				; 0000008cH
	jne	SHORT $L85907
; Line 2054
	xor	ecx, ecx
$L85907:
; Line 2055
	cmp	bl, BYTE PTR _L4BTYPES[ecx]
	jne	SHORT $L86691
; Line 2056
	dec	eax
$L86691:
; Line 2052
	test	eax, eax
	jge	SHORT $L85905
; Line 2058
	mov	BYTE PTR _dungeon[esi], cl
$L85903:
; Line 2064
	add	esi, 40					; 00000028H
	dec	ebp
	jne	SHORT $L85897
; Line 2065
	inc	edi
; Line 2066
	cmp	edi, 40					; 00000028H
	jl	SHORT $L85894
; Line 2067
	xor	edi, edi
$L85909:
; Line 2069
	push	40					; 00000028H
; Line 2076
	mov	esi, edi
	pop	ebx
$L85912:
	push	10					; 0000000aH
	xor	cl, cl
	pop	edx
	call	@random@8
	test	eax, eax
	jne	SHORT $L85916
	movzx	eax, BYTE PTR _dungeon[esi]
	cmp	BYTE PTR _L4BTYPES[eax], 6
	jne	SHORT $L85916
; Line 2072
	cmp	BYTE PTR _dflags[esi], 0
	jne	SHORT $L85916
; Line 2073
	push	3
	xor	cl, cl
	pop	edx
	call	@random@8
	add	al, 95					; 0000005fH
	mov	BYTE PTR _dungeon[esi], al
$L85916:
; Line 2076
	add	esi, 40					; 00000028H
	dec	ebx
	jne	SHORT $L85912
; Line 2077
	inc	edi
; Line 2078
	cmp	edi, 40					; 00000028H
	jl	SHORT $L85909
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2079
	ret	0
_DRLG_L4Subs ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _L4makeDungeon
_TEXT	SEGMENT
_v0$ = -8
_v4$ = -16
_v12$ = -4
_v16$ = -16
_v25$ = -12
_v26$ = -4
_L4makeDungeon PROC NEAR				; COMDAT
; Line 2082
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 2111
	and	DWORD PTR _v0$[ebp], 0
	push	ebx
	push	esi
	push	edi
	mov	esi, 160				; 000000a0H
	mov	edx, 3200				; 00000c80H
$L85945:
; Line 2114
	mov	eax, DWORD PTR _v0$[ebp]
	and	DWORD PTR -4+[ebp], 0
	lea	edi, DWORD PTR _dung[eax]
; Line 2126
	lea	ebx, DWORD PTR [eax+eax]
$L85949:
	mov	ecx, DWORD PTR -4+[ebp]
	mov	al, BYTE PTR [edi]
	add	DWORD PTR -4+[ebp], esi
	mov	DWORD PTR _v4$[ebp], ecx
	add	ecx, ebx
	add	edi, 20					; 00000014H
	cmp	DWORD PTR -4+[ebp], edx
	mov	BYTE PTR _L4dungeon[ecx], al
	mov	BYTE PTR _L4dungeon[ecx+1], al
	mov	BYTE PTR _L4dungeon[ecx+80], al
	mov	BYTE PTR _L4dungeon[ecx+81], al
	jl	SHORT $L85949
	inc	DWORD PTR _v0$[ebp]
	cmp	DWORD PTR _v0$[ebp], 20			; 00000014H
	jl	SHORT $L85945
; Line 2127
	and	DWORD PTR -4+[ebp], 0
; Line 2128
	mov	DWORD PTR _v25$[ebp], OFFSET FLAT:_dung+19
	mov	DWORD PTR -16+[ebp], 20			; 00000014H
$L85952:
; Line 2131
	mov	edi, DWORD PTR _v25$[ebp]
	and	DWORD PTR -8+[ebp], 0
$L85955:
; Line 2136
	mov	ecx, DWORD PTR -8+[ebp]
; Line 2137
	mov	ebx, DWORD PTR -4+[ebp]
	mov	al, BYTE PTR [edi]
	add	DWORD PTR -8+[ebp], esi
	add	ecx, ebx
	add	edi, 20					; 00000014H
; Line 2142
	cmp	DWORD PTR -8+[ebp], edx
	mov	BYTE PTR _L4dungeon[ecx+40], al
	mov	BYTE PTR _L4dungeon[ecx+41], al
	mov	BYTE PTR _L4dungeon[ecx+120], al
	mov	BYTE PTR _L4dungeon[ecx+121], al
	jl	SHORT $L85955
; Line 2143
	add	DWORD PTR -4+[ebp], 2
; Line 2144
	dec	DWORD PTR _v25$[ebp]
; Line 2146
	dec	DWORD PTR -16+[ebp]
	jne	SHORT $L85952
; Line 2147
	and	DWORD PTR _v12$[ebp], 0
$L85958:
; Line 2150
	mov	eax, DWORD PTR _v12$[ebp]
	and	DWORD PTR -8+[ebp], 0
	lea	edi, DWORD PTR _dung[eax+380]
; Line 2162
	lea	ebx, DWORD PTR [eax+eax]
$L85961:
	mov	ecx, DWORD PTR -8+[ebp]
	mov	al, BYTE PTR [edi]
	add	DWORD PTR -8+[ebp], esi
	mov	DWORD PTR _v16$[ebp], ecx
	add	ecx, ebx
	sub	edi, 20					; 00000014H
	cmp	DWORD PTR -8+[ebp], edx
	mov	BYTE PTR _L4dungeon[ecx+3200], al
	mov	BYTE PTR _L4dungeon[ecx+3201], al
	mov	BYTE PTR _L4dungeon[ecx+3280], al
	mov	BYTE PTR _L4dungeon[ecx+3281], al
	jl	SHORT $L85961
	inc	DWORD PTR _v12$[ebp]
	cmp	DWORD PTR _v12$[ebp], 20		; 00000014H
	jl	SHORT $L85958
; Line 2163
	and	DWORD PTR -12+[ebp], 0
; Line 2164
	mov	DWORD PTR _v26$[ebp], OFFSET FLAT:_dung+399
$L85964:
; Line 2166
	mov	edi, DWORD PTR _v26$[ebp]
	and	DWORD PTR -8+[ebp], 0
$L85967:
; Line 2171
	mov	ecx, DWORD PTR -8+[ebp]
; Line 2172
	mov	ebx, DWORD PTR -12+[ebp]
	mov	al, BYTE PTR [edi]
	add	DWORD PTR -8+[ebp], esi
	add	ecx, ebx
	sub	edi, 20					; 00000014H
; Line 2177
	cmp	DWORD PTR -8+[ebp], edx
	mov	BYTE PTR _L4dungeon[ecx+3240], al
	mov	BYTE PTR _L4dungeon[ecx+3241], al
	mov	BYTE PTR _L4dungeon[ecx+3320], al
	mov	BYTE PTR _L4dungeon[ecx+3321], al
	jl	SHORT $L85967
; Line 2178
	add	DWORD PTR -12+[ebp], 2
; Line 2179
	dec	DWORD PTR _v26$[ebp]
; Line 2180
	cmp	DWORD PTR _v26$[ebp], OFFSET FLAT:_dung+379
	jg	SHORT $L85964
	pop	edi
	pop	esi
	pop	ebx
; Line 2181
	leave
	ret	0
_L4makeDungeon ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _uShape
_TEXT	SEGMENT
_uShape	PROC NEAR					; COMDAT
; Line 2184
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 2200
	push	19					; 00000013H
	mov	edi, OFFSET FLAT:_hallok+76
	xor	ebx, ebx
	pop	edx
	mov	esi, edi
	inc	ebx
	mov	ebp, OFFSET FLAT:_hallok
$L85987:
; Line 2202
	push	19					; 00000013H
	pop	ecx
$L85990:
; Line 2205
	lea	eax, DWORD PTR [ecx+ecx*4]
	shl	eax, 2
; Line 2206
	cmp	BYTE PTR _dung[eax+edx], bl
	je	SHORT $L85994
	and	DWORD PTR [esi], 0
	jmp	SHORT $L85993
$L85994:
; Line 2207
	cmp	BYTE PTR _dung[eax+edx+1], bl
	jne	SHORT $L86712
	cmp	BYTE PTR _dung[eax+edx+21], 0
	jne	SHORT $L86712
	mov	eax, ebx
	jmp	SHORT $L86713
$L86712:
	xor	eax, eax
$L86713:
	mov	DWORD PTR [esi], eax
; Line 2208
	xor	ecx, ecx
$L85993:
; Line 2210
	dec	ecx
; Line 2211
	jns	SHORT $L85990
; Line 2212
	sub	esi, 4
	dec	edx
; Line 2213
	cmp	esi, ebp
	jge	SHORT $L85987
; Line 2214
	push	19					; 00000013H
	xor	cl, cl
	pop	edx
	call	@random@8
	inc	eax
$L85995:
; Line 2216
	cmp	DWORD PTR _hallok[eax*4], 0
	je	SHORT $L85998
; Line 2217
	push	19					; 00000013H
	pop	esi
$L85999:
; Line 2219
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	ecx, DWORD PTR [eax+ecx*4]
; Line 2220
	lea	edx, DWORD PTR _dung[ecx]
	cmp	BYTE PTR [edx], bl
	jne	SHORT $L86002
; Line 2221
	or	esi, -1
; Line 2222
	xor	eax, eax
; Line 2223
	jmp	SHORT $L86003
$L86002:
; Line 2224
	mov	BYTE PTR [edx], bl
; Line 2225
	mov	BYTE PTR _dung[ecx+1], bl
$L86003:
; Line 2227
	dec	esi
; Line 2228
	jns	SHORT $L85999
; Line 2229
	jmp	SHORT $L85996
$L85998:
	inc	eax
	cmp	eax, 20					; 00000014H
	jne	SHORT $L85996
; Line 2230
	mov	eax, ebx
$L85996:
; Line 2232
	test	eax, eax
	jne	SHORT $L85995
; Line 2234
	mov	edx, edi
	mov	ecx, OFFSET FLAT:_dung+400
$L86006:
; Line 2236
	push	19					; 00000013H
; Line 2240
	lea	esi, DWORD PTR [ecx-20]
	pop	eax
$L86009:
; Line 2239
	cmp	BYTE PTR [esi+eax], bl
	je	SHORT $L86013
	and	DWORD PTR [edx], 0
	jmp	SHORT $L86012
$L86013:
; Line 2240
	cmp	BYTE PTR [ecx+eax], bl
	jne	SHORT $L86714
	cmp	BYTE PTR [ecx+eax+1], 0
	jne	SHORT $L86714
	mov	eax, ebx
	jmp	SHORT $L86715
$L86714:
	xor	eax, eax
$L86715:
	mov	DWORD PTR [edx], eax
; Line 2241
	xor	eax, eax
$L86012:
; Line 2243
	dec	eax
; Line 2244
	jns	SHORT $L86009
; Line 2245
	sub	edx, 4
; Line 2246
	mov	ecx, esi
; Line 2247
	cmp	edx, ebp
	jge	SHORT $L86006
; Line 2248
	push	19					; 00000013H
	xor	cl, cl
	pop	edx
	call	@random@8
	inc	eax
$L86016:
; Line 2250
	cmp	DWORD PTR _hallok[eax*4], 0
	je	SHORT $L86019
; Line 2251
	push	19					; 00000013H
	pop	esi
$L86020:
; Line 2253
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [esi+ecx*4]
	lea	edx, DWORD PTR _dung[ecx]
; Line 2254
	cmp	BYTE PTR [edx], bl
	jne	SHORT $L86023
; Line 2255
	or	esi, -1
; Line 2256
	xor	eax, eax
; Line 2257
	jmp	SHORT $L86024
$L86023:
; Line 2258
	mov	BYTE PTR [edx], bl
; Line 2259
	mov	BYTE PTR _dung[ecx+20], bl
$L86024:
; Line 2261
	dec	esi
; Line 2262
	jns	SHORT $L86020
; Line 2263
	jmp	SHORT $L86017
$L86019:
	inc	eax
	cmp	eax, 20					; 00000014H
	jne	SHORT $L86017
; Line 2264
	mov	eax, ebx
$L86017:
; Line 2266
	test	eax, eax
	jne	SHORT $L86016
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2267
	ret	0
_uShape	ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _GetArea
_TEXT	SEGMENT
_GetArea PROC NEAR					; COMDAT
; Line 2276
	xor	eax, eax
; Line 2277
	xor	edx, edx
	push	esi
$L86032:
; Line 2279
	push	20					; 00000014H
	lea	ecx, DWORD PTR _dung[edx]
	pop	esi
$L86036:
; Line 2282
	cmp	BYTE PTR [ecx], 1
	jne	SHORT $L86039
; Line 2283
	inc	eax
$L86039:
; Line 2284
	add	ecx, 20					; 00000014H
; Line 2286
	dec	esi
	jne	SHORT $L86036
; Line 2287
	inc	edx
; Line 2288
	cmp	edx, 20					; 00000014H
	jl	SHORT $L86032
	pop	esi
; Line 2290
	ret	0
_GetArea ENDP
_TEXT	ENDS
PUBLIC	@L4drawRoom@16
PUBLIC	@L4roomGen@20
; Function compile flags: /Ogsy
;	COMDAT _L4firstRoom
_TEXT	SEGMENT
_v2$ = -4
_L4firstRoom PROC NEAR					; COMDAT
; Line 2293
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2305
	mov	al, BYTE PTR _currlevel
	push	ebx
	push	esi
	cmp	al, 16					; 00000010H
	push	edi
	jne	SHORT $L86050
; Line 2306
	push	14					; 0000000eH
; Line 2307
	jmp	SHORT $L86735
$L86050:
; Line 2309
	cmp	al, BYTE PTR _quests+264
	jne	SHORT $L86053
	cmp	BYTE PTR _quests+266, 0
	jne	SHORT $L86052
$L86053:
	cmp	al, BYTE PTR _quests+360
	jne	SHORT $L86054
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $L86054
$L86052:
; Line 2314
	push	11					; 0000000bH
$L86735:
	pop	esi
; Line 2316
	mov	edi, esi
; Line 2317
	jmp	SHORT $LABEL_10$86055
$L86054:
; Line 2310
	push	5
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	esi, eax
; Line 2311
	push	5
	inc	esi
	pop	edx
	xor	cl, cl
	inc	esi
	call	@random@8
	mov	edi, eax
	inc	edi
	inc	edi
$LABEL_10$86055:
; Line 2319
	push	20					; 00000014H
; Line 2320
	xor	cl, cl
	pop	edx
	mov	eax, edx
	sub	eax, esi
	mov	ebx, eax
	mov	DWORD PTR _v2$[ebp], eax
	sar	ebx, 1
	sub	edx, ebx
	sub	edx, esi
	call	@random@8
	add	eax, ebx
; Line 2321
	lea	ecx, DWORD PTR [eax+esi]
	cmp	ecx, 19					; 00000013H
	jg	SHORT $L86056
; Line 2322
	mov	DWORD PTR _v2$[ebp], eax
$L86056:
; Line 2323
	push	20					; 00000014H
	xor	cl, cl
	pop	ebx
	sub	ebx, edi
	push	20					; 00000014H
	mov	DWORD PTR -8+[ebp], ebx
	pop	edx
	sar	DWORD PTR -8+[ebp], 1
	sub	edx, DWORD PTR -8+[ebp]
	sub	edx, edi
	call	@random@8
	add	eax, DWORD PTR -8+[ebp]
; Line 2325
	lea	ecx, DWORD PTR [eax+edi]
	cmp	ecx, 19					; 00000013H
	jg	SHORT $L86057
; Line 2326
	mov	ebx, eax
$L86057:
; Line 2327
	cmp	BYTE PTR _currlevel, 16			; 00000010H
	jne	SHORT $L86058
; Line 2328
	mov	eax, DWORD PTR _v2$[ebp]
; Line 2329
	mov	DWORD PTR _l4holdy, ebx
	mov	DWORD PTR _l4holdx, eax
$L86058:
; Line 2332
	push	11					; 0000000bH
	pop	ecx
	call	@QuestStatus@4
	test	eax, eax
	jne	SHORT $L86060
	mov	al, BYTE PTR _currlevel
	cmp	al, BYTE PTR _quests+360
	jne	SHORT $L86059
	cmp	BYTE PTR _gbMaxPlayers, 1
	jne	SHORT $L86060
$L86059:
; Line 2341
	mov	ecx, DWORD PTR _v2$[ebp]
	xor	eax, eax
	mov	DWORD PTR _SP4x1, eax
	mov	DWORD PTR _SP4y1, eax
	mov	DWORD PTR _SP4y2, eax
	jmp	SHORT $L86061
$L86060:
; Line 2333
	mov	ecx, DWORD PTR _v2$[ebp]
; Line 2336
	lea	edx, DWORD PTR [ebx+edi+1]
	mov	DWORD PTR _SP4y2, edx
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR _SP4x1, eax
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR _SP4y1, eax
	lea	eax, DWORD PTR [ecx+esi+1]
$L86061:
; Line 2344
	push	edi
	push	esi
	mov	edx, ebx
	mov	DWORD PTR _SP4x2, eax
	call	@L4drawRoom@16
; Line 2345
	push	2
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 2346
	mov	ecx, DWORD PTR _v2$[ebp]
	push	eax
	push	edi
	push	esi
	mov	edx, ebx
	call	@L4roomGen@20
	pop	edi
	pop	esi
	pop	ebx
; Line 2347
	leave
	ret	0
_L4firstRoom ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L4drawRoom@16
_TEXT	SEGMENT
_width$ = 8
_height$ = 12
@L4drawRoom@16 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2355
	push	esi
; Line 2360
	xor	esi, esi
	cmp	DWORD PTR _height$[esp], esi
	jle	SHORT $L86076
	push	edi
$L86074:
; Line 2361
	cmp	DWORD PTR _width$[esp+4], 0
	jle	SHORT $L86080
; Line 2362
	mov	edi, DWORD PTR _width$[esp+4]
; Line 2363
	lea	eax, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [esi+eax*4]
	lea	eax, DWORD PTR _dung[eax+edx]
$L86078:
; Line 2365
	mov	BYTE PTR [eax], 1
; Line 2366
	add	eax, 20					; 00000014H
; Line 2367
	dec	edi
; Line 2368
	jne	SHORT $L86078
$L86080:
; Line 2360
	inc	esi
	cmp	esi, DWORD PTR _height$[esp+4]
	jl	SHORT $L86074
	pop	edi
$L86076:
	pop	esi
; Line 2371
	ret	8
@L4drawRoom@16 ENDP
_TEXT	ENDS
PUBLIC	@L4checkRoom@16
; Function compile flags: /Ogsy
;	COMDAT @L4roomGen@20
_TEXT	SEGMENT
_w$ = 8
_h$ = 12
_dir$ = 16
_v6$ = -8
_v13$ = -8
_v14$ = -20
_v19$ = -8
_v20$ = -16
_xa$ = -4
_v27$ = -12
_wa$ = -16
_hb$ = -20
_dira$ = 16
_dirb$ = 16
@L4roomGen@20 PROC NEAR					; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2374
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
; Line 2403
	mov	DWORD PTR _v27$[ebp], edx
; Line 2404
	mov	DWORD PTR _xa$[ebp], ecx
$L86123:
; Line 2407
	push	4
	xor	cl, cl
	pop	edx
	call	@random@8
; Line 2408
	xor	ecx, ecx
; Line 2409
	cmp	DWORD PTR _dir$[ebp], 1
	mov	DWORD PTR _v6$[ebp], ecx
	jne	SHORT $L86744
	cmp	eax, ecx
	setne	al
	jmp	SHORT $L86763
$L86744:
	cmp	eax, ecx
	sete	al
$L86763:
	mov	BYTE PTR _v6$[ebp], al
; Line 2412
	cmp	DWORD PTR _v6$[ebp], ecx
	je	$L86750
; Line 2414
	cmp	DWORD PTR _v6$[ebp], 1
	jne	$L86751
; Line 2417
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _dira$[ebp], ecx
	cdq
	sub	eax, edx
	mov	ebx, eax
	sar	ebx, 1
	mov	DWORD PTR _wa$[ebp], ebx
	jmp	SHORT $L86128
$L86756:
	mov	ebx, DWORD PTR _wa$[ebp]
$L86128:
; Line 2419
	push	5
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	esi, eax
; Line 2421
	xor	cl, cl
	inc	esi
	push	5
	inc	esi
	pop	edx
	and	esi, -2					; fffffffeH
	call	@random@8
	mov	edi, eax
; Line 2422
	mov	eax, esi
	cdq
	inc	edi
	sub	eax, edx
	inc	edi
	mov	ecx, eax
	and	edi, -2					; fffffffeH
	mov	eax, ebx
	sar	ecx, 1
	sub	eax, ecx
; Line 2423
	mov	ecx, DWORD PTR _v27$[ebp]
	add	eax, DWORD PTR _xa$[ebp]
; Line 2424
	lea	edx, DWORD PTR [edi+1]
	push	edx
	sub	ecx, edi
	lea	edx, DWORD PTR [esi+2]
	mov	DWORD PTR 8+[ebp], ecx
	push	edx
	lea	edx, DWORD PTR [ecx-1]
	lea	ecx, DWORD PTR [eax-1]
	mov	DWORD PTR _v13$[ebp], eax
	call	@L4checkRoom@16
; Line 2425
	inc	DWORD PTR _dira$[ebp]
	movzx	eax, al
; Line 2427
	test	eax, eax
	mov	DWORD PTR _v14$[ebp], eax
	jne	SHORT $L86131
	cmp	DWORD PTR _dira$[ebp], 20		; 00000014H
	jl	SHORT $L86756
$L86131:
; Line 2428
	cmp	eax, 1
	jne	SHORT $L86132
; Line 2429
	mov	edx, DWORD PTR 8+[ebp]
	mov	ecx, DWORD PTR _v13$[ebp]
	push	edi
	push	esi
	call	@L4drawRoom@16
$L86132:
; Line 2430
	mov	eax, DWORD PTR _v27$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	lea	edx, DWORD PTR [eax+ecx]
; Line 2431
	lea	eax, DWORD PTR [edi+1]
	push	eax
	lea	eax, DWORD PTR [esi+2]
	push	eax
	mov	eax, DWORD PTR _v13$[ebp]
	mov	DWORD PTR -12+[ebp], edx
	lea	ecx, DWORD PTR [eax-1]
	call	@L4checkRoom@16
	movzx	ebx, al
; Line 2432
	cmp	ebx, 1
	jne	SHORT $L86133
; Line 2433
	mov	edx, DWORD PTR -12+[ebp]
	mov	ecx, DWORD PTR _v13$[ebp]
	push	edi
	push	esi
	call	@L4drawRoom@16
$L86133:
; Line 2434
	cmp	DWORD PTR _v14$[ebp], 1
	jne	SHORT $L86134
; Line 2435
	mov	edx, DWORD PTR 8+[ebp]
	mov	ecx, DWORD PTR _v13$[ebp]
	push	0
	push	edi
	push	esi
	call	@L4roomGen@20
$L86134:
; Line 2436
	cmp	ebx, 1
	jne	$L86751
; Line 2441
	mov	eax, DWORD PTR -12+[ebp]
	and	DWORD PTR _dir$[ebp], 0
	mov	DWORD PTR _v27$[ebp], eax
; Line 2442
	mov	eax, DWORD PTR _v13$[ebp]
	mov	DWORD PTR _h$[ebp], edi
	mov	DWORD PTR _w$[ebp], esi
	mov	DWORD PTR _xa$[ebp], eax
	jmp	$L86123
$L86750:
; Line 2445
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _dirb$[ebp], ecx
	cdq
	sub	eax, edx
	mov	ebx, eax
	sar	ebx, 1
	mov	DWORD PTR _hb$[ebp], ebx
	jmp	SHORT $L86136
$L86760:
	mov	ebx, DWORD PTR _hb$[ebp]
$L86136:
; Line 2447
	push	5
	xor	cl, cl
	pop	edx
	call	@random@8
	mov	edi, eax
; Line 2449
	xor	cl, cl
	inc	edi
	push	5
	inc	edi
	pop	edx
	and	edi, -2					; fffffffeH
	call	@random@8
	mov	esi, eax
	inc	esi
	inc	esi
	and	esi, -2					; fffffffeH
; Line 2450
	mov	eax, esi
	cdq
	sub	eax, edx
; Line 2452
	lea	edx, DWORD PTR [edi+1]
	mov	ecx, eax
	mov	eax, ebx
	sar	ecx, 1
	sub	eax, ecx
	mov	ecx, DWORD PTR _xa$[ebp]
	add	eax, DWORD PTR _v27$[ebp]
	push	edx
	sub	ecx, edi
	lea	edx, DWORD PTR [esi+2]
	mov	DWORD PTR 12+[ebp], ecx
	push	edx
	lea	edx, DWORD PTR [eax-1]
	dec	ecx
	mov	DWORD PTR _v19$[ebp], eax
	call	@L4checkRoom@16
; Line 2453
	inc	DWORD PTR _dirb$[ebp]
	movzx	eax, al
; Line 2455
	test	eax, eax
	mov	DWORD PTR _v20$[ebp], eax
	jne	SHORT $L86139
	cmp	DWORD PTR _dirb$[ebp], 20		; 00000014H
	jl	SHORT $L86760
$L86139:
; Line 2456
	cmp	eax, 1
	jne	SHORT $L86140
; Line 2457
	mov	edx, DWORD PTR _v19$[ebp]
	mov	ecx, DWORD PTR 12+[ebp]
	push	esi
	push	edi
	call	@L4drawRoom@16
$L86140:
; Line 2458
	mov	ecx, DWORD PTR _xa$[ebp]
; Line 2459
	lea	eax, DWORD PTR [esi+2]
	add	ecx, DWORD PTR _w$[ebp]
	push	eax
	lea	eax, DWORD PTR [edi+1]
	push	eax
	mov	eax, DWORD PTR _v19$[ebp]
	mov	DWORD PTR _xa$[ebp], ecx
	lea	edx, DWORD PTR [eax-1]
	call	@L4checkRoom@16
	movzx	ebx, al
; Line 2460
	cmp	ebx, 1
	jne	SHORT $L86141
; Line 2461
	mov	edx, DWORD PTR _v19$[ebp]
	mov	ecx, DWORD PTR _xa$[ebp]
	push	esi
	push	edi
	call	@L4drawRoom@16
$L86141:
; Line 2462
	cmp	DWORD PTR _v20$[ebp], 1
	jne	SHORT $L86142
; Line 2463
	mov	edx, DWORD PTR _v19$[ebp]
	mov	ecx, DWORD PTR 12+[ebp]
	push	1
	push	esi
	push	edi
	call	@L4roomGen@20
$L86142:
; Line 2464
	xor	eax, eax
	inc	eax
	cmp	ebx, eax
	jne	SHORT $L86751
; Line 2466
	mov	DWORD PTR _dir$[ebp], eax
; Line 2469
	mov	eax, DWORD PTR _v19$[ebp]
	mov	DWORD PTR _h$[ebp], esi
	mov	DWORD PTR _w$[ebp], edi
	mov	DWORD PTR _v27$[ebp], eax
	jmp	$L86123
$L86751:
	pop	edi
	pop	esi
	pop	ebx
; Line 2471
	leave
	ret	12					; 0000000cH
@L4roomGen@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @L4checkRoom@16
_TEXT	SEGMENT
_width$ = 8
_height$ = 12
_v8$ = -4
@L4checkRoom@16 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2474
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 2480
	xor	edi, edi
; Line 2481
	cmp	ecx, edi
	jle	SHORT $L86167
	cmp	edx, edi
	jle	SHORT $L86167
; Line 2482
	cmp	DWORD PTR _height$[ebp], edi
; Line 2483
	jle	SHORT $L86776
$L86160:
; Line 2485
	and	DWORD PTR _v8$[ebp], 0
; Line 2486
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LABEL_12$86163
; Line 2493
	lea	eax, DWORD PTR [ecx+ecx*4]
	mov	ebx, ecx
	lea	eax, DWORD PTR [edi+eax*4]
	lea	esi, DWORD PTR _dung[eax+edx]
$L86166:
; Line 2494
	test	ebx, ebx
	jl	SHORT $L86167
	cmp	ebx, 20					; 00000014H
	jge	SHORT $L86167
	lea	eax, DWORD PTR [edi+edx]
	test	eax, eax
	jl	SHORT $L86167
	cmp	eax, 20					; 00000014H
	jge	SHORT $L86167
	cmp	BYTE PTR [esi], 0
	jne	SHORT $L86167
; Line 2495
	inc	DWORD PTR _v8$[ebp]
; Line 2498
	mov	eax, DWORD PTR _width$[ebp]
	add	esi, 20					; 00000014H
	inc	ebx
	cmp	DWORD PTR _v8$[ebp], eax
	jl	SHORT $L86166
$LABEL_12$86163:
; Line 2489
	inc	edi
	cmp	edi, DWORD PTR _height$[ebp]
	jl	SHORT $L86160
$L86776:
; Line 2490
	mov	al, 1
	jmp	SHORT $L86152
$L86167:
; Line 2502
	xor	al, al
$L86152:
	pop	edi
	pop	esi
	pop	ebx
; Line 2503
	leave
	ret	8
@L4checkRoom@16 ENDP
_TEXT	ENDS
EXTRN	_LvlViewY:DWORD
EXTRN	_LvlViewX:DWORD
; Function compile flags: /Ogsy
;	COMDAT @DRLG_L4PlaceMiniSet@28
_TEXT	SEGMENT
_miniset$ = -44
_tmax$ = 8
_cx$ = 12
_cy$ = 16
_setview$ = 20
_ldir$ = 24
_v13$ = -16
_v24$ = -40
_v25$ = -36
_v26$ = -32
_v27$ = -28
_v30$ = -24
_max$ = -20
_v33$ = -12
_tmaxa$ = 8
@DRLG_L4PlaceMiniSet@28 PROC NEAR			; COMDAT
; _miniset$ = ecx
; _tmin$ = edx
; Line 2506
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
; Line 2538
	movzx	ebx, BYTE PTR [ecx]
	push	edi
	mov	esi, edx
	movzx	edi, BYTE PTR [ecx+1]
; Line 2540
	mov	edx, DWORD PTR _tmax$[ebp]
	mov	DWORD PTR _miniset$[ebp], ecx
	sub	edx, esi
	mov	DWORD PTR -8+[ebp], edi
	mov	DWORD PTR -4+[ebp], ebx
; Line 2543
	je	SHORT $L86211
; Line 2544
	xor	cl, cl
	call	@random@8
	add	eax, esi
	mov	DWORD PTR _v24$[ebp], eax
; Line 2545
	jmp	SHORT $L86212
$L86211:
; Line 2546
	mov	DWORD PTR _v24$[ebp], 1
$L86212:
; Line 2547
	xor	eax, eax
; Line 2548
	cmp	DWORD PTR _v24$[ebp], eax
	mov	DWORD PTR _v25$[ebp], eax
	jg	SHORT $L86213
; Line 2549
	mov	esi, DWORD PTR _tmax$[ebp]
$L86217:
; Line 2631
	cmp	BYTE PTR _currlevel, 15			; 0000000fH
	jne	SHORT $L86247
; Line 2632
	lea	ecx, DWORD PTR [esi+1]
	mov	DWORD PTR _quests+364, ecx
; Line 2633
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR _quests+368, ecx
$L86247:
; Line 2636
	cmp	DWORD PTR _setview$[ebp], 1
	jne	SHORT $L86248
; Line 2637
	lea	ecx, DWORD PTR [esi+esi+21]
	mov	DWORD PTR _ViewX, ecx
; Line 2638
	lea	ecx, DWORD PTR [eax+eax+22]
	mov	DWORD PTR _ViewY, ecx
$L86248:
; Line 2640
	cmp	DWORD PTR _ldir$[ebp], 0
	jne	SHORT $L86249
; Line 2641
	lea	ecx, DWORD PTR [esi+esi+21]
; Line 2642
	lea	eax, DWORD PTR [eax+eax+22]
	mov	DWORD PTR _LvlViewX, ecx
	mov	DWORD PTR _LvlViewY, eax
$L86249:
; Line 2644
	mov	al, 1
$L86183:
	pop	edi
	pop	esi
	pop	ebx
; Line 2645
	leave
	ret	20					; 00000014H
$L86213:
; Line 2552
	push	40					; 00000028H
	pop	eax
	sub	eax, ebx
; Line 2553
	push	40					; 00000028H
	mov	DWORD PTR _max$[ebp], eax
	pop	eax
	sub	eax, edi
	mov	DWORD PTR _v30$[ebp], eax
$L86215:
; Line 2555
	mov	edx, DWORD PTR _max$[ebp]
	xor	cl, cl
	call	@random@8
; Line 2557
	mov	edx, DWORD PTR _v30$[ebp]
	xor	ebx, ebx
	xor	cl, cl
	mov	esi, eax
	mov	DWORD PTR _v27$[ebp], ebx
	call	@random@8
; Line 2558
	mov	DWORD PTR _v33$[ebp], eax
$L86218:
; Line 2560
	cmp	DWORD PTR _v27$[ebp], 200		; 000000c8H
	jge	$L86789
; Line 2563
	cmp	esi, DWORD PTR _SP4x1
	mov	DWORD PTR _tmaxa$[ebp], 1
	jl	SHORT $L86222
	cmp	esi, DWORD PTR _SP4x2
	jg	SHORT $L86222
	cmp	eax, DWORD PTR _SP4y1
	jl	SHORT $L86222
	cmp	eax, DWORD PTR _SP4y2
	jg	SHORT $L86222
; Line 2564
	mov	DWORD PTR _tmaxa$[ebp], ebx
$L86222:
; Line 2565
	mov	ecx, DWORD PTR _cx$[ebp]
	cmp	ecx, -1
	je	SHORT $L86223
	mov	edx, ecx
	sub	edx, DWORD PTR -4+[ebp]
	cmp	esi, edx
	jl	SHORT $L86223
	add	ecx, 12					; 0000000cH
	cmp	esi, ecx
	jg	SHORT $L86223
; Line 2566
	mov	edx, DWORD PTR _max$[ebp]
	xor	cl, cl
	call	@random@8
; Line 2568
	mov	edx, DWORD PTR _v30$[ebp]
	xor	cl, cl
	mov	esi, eax
	mov	DWORD PTR _tmaxa$[ebp], ebx
	call	@random@8
	mov	DWORD PTR _v33$[ebp], eax
$L86223:
; Line 2571
	mov	ecx, DWORD PTR _cy$[ebp]
	cmp	ecx, -1
	je	SHORT $L86224
	mov	edx, ecx
	sub	edx, DWORD PTR -8+[ebp]
	cmp	eax, edx
	jl	SHORT $L86224
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	jg	SHORT $L86224
; Line 2572
	mov	edx, DWORD PTR _max$[ebp]
	xor	cl, cl
	call	@random@8
; Line 2574
	mov	edx, DWORD PTR _v30$[ebp]
	xor	cl, cl
	mov	esi, eax
	mov	DWORD PTR _tmaxa$[ebp], ebx
	call	@random@8
	mov	DWORD PTR _v33$[ebp], eax
$L86224:
; Line 2578
	cmp	DWORD PTR -8+[ebp], ebx
	push	2
	mov	DWORD PTR _v13$[ebp], ebx
	pop	edi
	jle	SHORT $L86786
$L86225:
; Line 2579
	cmp	DWORD PTR _tmaxa$[ebp], 1
	jne	SHORT $L86786
; Line 2582
	cmp	DWORD PTR -4+[ebp], ebx
	mov	DWORD PTR _v26$[ebp], ebx
	jle	SHORT $L86232
; Line 2583
	mov	edx, DWORD PTR _v13$[ebp]
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	ecx, DWORD PTR [edx+ecx*8]
	add	ecx, eax
$L86230:
; Line 2585
	cmp	DWORD PTR _tmaxa$[ebp], 1
	jne	SHORT $L86232
; Line 2587
	mov	edx, DWORD PTR _miniset$[ebp]
	mov	dl, BYTE PTR [edi+edx]
; Line 2588
	test	dl, dl
	je	SHORT $L86234
	movsx	ebx, BYTE PTR _dungeon[ecx]
	movzx	edx, dl
	cmp	ebx, edx
	je	SHORT $L86793
; Line 2589
	and	DWORD PTR _tmaxa$[ebp], 0
$L86793:
	xor	ebx, ebx
$L86234:
; Line 2590
	cmp	BYTE PTR _dflags[ecx], 0
	je	SHORT $L86235
; Line 2591
	mov	DWORD PTR _tmaxa$[ebp], ebx
$L86235:
; Line 2592
	inc	edi
; Line 2593
	inc	DWORD PTR _v26$[ebp]
; Line 2595
	mov	edx, DWORD PTR _v26$[ebp]
	add	ecx, 40					; 00000028H
	xor	ebx, ebx
	cmp	edx, DWORD PTR -4+[ebp]
	jl	SHORT $L86230
$L86232:
; Line 2578
	inc	DWORD PTR _v13$[ebp]
	mov	ecx, DWORD PTR _v13$[ebp]
	cmp	ecx, DWORD PTR -8+[ebp]
	jl	SHORT $L86225
$L86786:
; Line 2598
	cmp	DWORD PTR _tmaxa$[ebp], ebx
	jne	SHORT $L86237
	inc	esi
	cmp	esi, DWORD PTR _max$[ebp]
	jne	SHORT $L86237
; Line 2599
	xor	esi, esi
; Line 2600
	inc	eax
; Line 2601
	cmp	eax, DWORD PTR _v30$[ebp]
	mov	DWORD PTR _v33$[ebp], eax
	jne	SHORT $L86237
; Line 2602
	mov	DWORD PTR _v33$[ebp], ebx
; Line 2603
	xor	eax, eax
$L86237:
; Line 2606
	inc	DWORD PTR _v27$[ebp]
; Line 2607
	cmp	DWORD PTR _tmaxa$[ebp], ebx
	je	$L86218
; Line 2608
	cmp	DWORD PTR _v27$[ebp], 200		; 000000c8H
	jge	SHORT $L86789
; Line 2611
	mov	ecx, DWORD PTR -8+[ebp]
	xor	edi, edi
	imul	ecx, DWORD PTR -4+[ebp]
	inc	ecx
	inc	ecx
	cmp	DWORD PTR -8+[ebp], ebx
	jle	SHORT $L86241
$L86239:
; Line 2612
	mov	ebx, DWORD PTR -4+[ebp]
; Line 2613
	test	ebx, ebx
	jle	SHORT $L86240
; Line 2614
	lea	edx, DWORD PTR [esi+esi*4]
	lea	edx, DWORD PTR [edi+edx*8]
	add	edx, eax
$L86243:
; Line 2616
	mov	eax, DWORD PTR _miniset$[ebp]
	mov	al, BYTE PTR [ecx+eax]
; Line 2617
	test	al, al
	je	SHORT $L86246
; Line 2618
	or	BYTE PTR _dflags[edx], 8
; Line 2619
	mov	BYTE PTR _dungeon[edx], al
$L86246:
; Line 2621
	inc	ecx
; Line 2624
	add	edx, 40					; 00000028H
	dec	ebx
	jne	SHORT $L86243
; Line 2625
	mov	eax, DWORD PTR _v33$[ebp]
$L86240:
; Line 2611
	inc	edi
	cmp	edi, DWORD PTR -8+[ebp]
	jl	SHORT $L86239
$L86241:
; Line 2628
	inc	DWORD PTR _v25$[ebp]
; Line 2629
	mov	ecx, DWORD PTR _v25$[ebp]
	cmp	ecx, DWORD PTR _v24$[ebp]
	jl	$L86215
	jmp	$L86217
$L86789:
; Line 2609
	xor	al, al
	jmp	$L86183
@DRLG_L4PlaceMiniSet@28 ENDP
_TEXT	ENDS
PUBLIC	@DRLG_L4FTVR@20
EXTRN	_TransVal:BYTE
EXTRN	_dung_map:BYTE
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L4FloodTVal
_TEXT	SEGMENT
_v3$ = -12
_x$ = -8
_i$ = -4
_DRLG_L4FloodTVal PROC NEAR				; COMDAT
; Line 2652
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 2660
	push	16					; 00000010H
	pop	ebx
; Line 2661
	xor	esi, esi
$L86257:
; Line 2663
	and	DWORD PTR _i$[ebp], 0
; Line 2666
	lea	eax, DWORD PTR _dungeon[esi]
	mov	DWORD PTR _x$[ebp], 16			; 00000010H
	lea	edi, DWORD PTR _dung_map[ebx+1792]
	mov	DWORD PTR _v3$[ebp], eax
$L86261:
; Line 2668
	mov	eax, DWORD PTR _v3$[ebp]
	cmp	BYTE PTR [eax], 6
	jne	SHORT $L86264
	cmp	BYTE PTR [edi], 0
	jne	SHORT $L86264
; Line 2669
	mov	ecx, DWORD PTR _i$[ebp]
	push	0
	push	ebx
	mov	edx, esi
	push	DWORD PTR _x$[ebp]
	call	@DRLG_L4FTVR@20
; Line 2670
	inc	BYTE PTR _TransVal
$L86264:
; Line 2672
	add	DWORD PTR _x$[ebp], 2
; Line 2673
	add	DWORD PTR _v3$[ebp], 40			; 00000028H
; Line 2674
	add	edi, 224				; 000000e0H
; Line 2675
	inc	DWORD PTR _i$[ebp]
; Line 2676
	cmp	DWORD PTR _i$[ebp], 40			; 00000028H
	jl	SHORT $L86261
; Line 2677
	inc	ebx
	inc	ebx
; Line 2678
	inc	esi
; Line 2679
	cmp	esi, 40					; 00000028H
	jl	SHORT $L86257
	pop	edi
	pop	esi
	pop	ebx
; Line 2680
	leave
	ret	0
_DRLG_L4FloodTVal ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DRLG_L4FTVR@20
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_d$ = 16
_v10$ = -12
_k$ = -32
_ia$ = -8
@DRLG_L4FTVR@20 PROC NEAR				; COMDAT
; _i$ = ecx
; _j$ = edx
; Line 2684
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
; Line 2710
	mov	edi, DWORD PTR _x$[ebp]
	mov	eax, edi
	mov	ebx, DWORD PTR _y$[ebp]
	imul	eax, 112				; 00000070H
	lea	esi, DWORD PTR [eax+ebx]
; Line 2713
	cmp	BYTE PTR _dung_map[esi], 0
	jne	$L86813
; Line 2715
	lea	edi, DWORD PTR [ecx-1]
	mov	DWORD PTR _ia$[ebp], edi
; Line 2716
	mov	edi, DWORD PTR _x$[ebp]
	add	edi, -2					; fffffffeH
	mov	DWORD PTR _v10$[ebp], edi
; Line 2720
	lea	edi, DWORD PTR [ecx+ecx*4]
	shl	edi, 3
	mov	DWORD PTR _k$[ebp], edi
	cmp	BYTE PTR _dungeon[edi+edx], 6
	jne	$L86817
	mov	edi, DWORD PTR _ia$[ebp]
	mov	DWORD PTR -28+[ebp], eax
	mov	eax, ebx
	sub	edi, ecx
	inc	eax
	mov	DWORD PTR -24+[ebp], edx
	inc	eax
	sub	DWORD PTR -24+[ebp], ecx
	mov	DWORD PTR -16+[ebp], eax
	mov	eax, DWORD PTR _ia$[ebp]
	lea	edi, DWORD PTR [edi+edx+1]
	mov	ecx, ebx
	mov	DWORD PTR -4+[ebp], edi
	lea	edi, DWORD PTR [eax+2]
	mov	eax, DWORD PTR _v10$[ebp]
; Line 2735
	mov	DWORD PTR _d$[ebp], 8
	add	eax, 4
	mov	DWORD PTR -20+[ebp], eax
	lea	eax, DWORD PTR [ecx-2]
	mov	DWORD PTR 12+[ebp], eax
	sub	DWORD PTR 12+[ebp], ecx
$L86297:
	mov	al, BYTE PTR _TransVal
	mov	edx, DWORD PTR -4+[ebp]
	push	1
	push	ebx
	push	DWORD PTR -20+[ebp]
	mov	ecx, edi
	mov	BYTE PTR _dung_map[esi], al
	mov	BYTE PTR _dung_map[esi+112], al
	mov	BYTE PTR _dung_map[esi+1], al
	mov	BYTE PTR _dung_map[esi+113], al
	call	@DRLG_L4FTVR@20
	mov	edx, DWORD PTR -4+[ebp]
	mov	ecx, DWORD PTR _ia$[ebp]
	push	2
	push	ebx
	push	DWORD PTR _v10$[ebp]
	call	@DRLG_L4FTVR@20
	mov	eax, DWORD PTR -24+[ebp]
	lea	ecx, DWORD PTR [edi-1]
	push	3
	push	DWORD PTR -16+[ebp]
	lea	edx, DWORD PTR [eax+edi]
	mov	DWORD PTR -36+[ebp], edx
	push	DWORD PTR _x$[ebp]
	call	@DRLG_L4FTVR@20
	mov	eax, DWORD PTR 12+[ebp]
	lea	ecx, DWORD PTR [edi-1]
	push	4
	lea	esi, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR -4+[ebp]
	push	esi
	push	DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax-1]
	call	@DRLG_L4FTVR@20
	mov	eax, DWORD PTR -4+[ebp]
	mov	ecx, DWORD PTR _ia$[ebp]
	push	5
	push	esi
	push	DWORD PTR _v10$[ebp]
	lea	edx, DWORD PTR [eax-1]
	call	@DRLG_L4FTVR@20
	mov	eax, DWORD PTR -4+[ebp]
	mov	ecx, edi
	push	6
	push	esi
	push	DWORD PTR -20+[ebp]
	lea	edx, DWORD PTR [eax-1]
	call	@DRLG_L4FTVR@20
	mov	edx, DWORD PTR -36+[ebp]
	mov	ecx, DWORD PTR _ia$[ebp]
	push	7
	push	DWORD PTR -16+[ebp]
	push	DWORD PTR _v10$[ebp]
	call	@DRLG_L4FTVR@20
	add	DWORD PTR -28+[ebp], 224		; 000000e0H
	add	DWORD PTR _k$[ebp], 40			; 00000028H
; Line 2736
	push	2
	pop	eax
	add	DWORD PTR _x$[ebp], eax
; Line 2738
	add	DWORD PTR -16+[ebp], eax
; Line 2739
	add	DWORD PTR _v10$[ebp], eax
	add	DWORD PTR -20+[ebp], eax
	add	ebx, eax
; Line 2744
	mov	eax, DWORD PTR -28+[ebp]
	inc	DWORD PTR _ia$[ebp]
	inc	edi
	inc	DWORD PTR -4+[ebp]
	lea	esi, DWORD PTR [eax+ebx]
; Line 2745
	cmp	BYTE PTR _dung_map[esi], 0
	jne	SHORT $L86817
	mov	eax, DWORD PTR -4+[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	BYTE PTR _dungeon[eax+ecx], 6
	je	$L86297
$L86817:
; Line 2720
	mov	edi, DWORD PTR _x$[ebp]
$L86813:
; Line 2751
	mov	edx, DWORD PTR _d$[ebp]
	mov	al, BYTE PTR _TransVal
	cmp	edx, 1
	jne	SHORT $L86301
; Line 2752
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	add	ecx, ebx
; Line 2753
	mov	BYTE PTR _dung_map[ecx], al
; Line 2754
	mov	BYTE PTR _dung_map[ecx+1], al
$L86301:
; Line 2756
	cmp	edx, 2
	jne	SHORT $L86302
; Line 2757
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	add	ecx, ebx
; Line 2758
	mov	BYTE PTR _dung_map[ecx+112], al
; Line 2759
	mov	BYTE PTR _dung_map[ecx+113], al
$L86302:
; Line 2761
	cmp	edx, 3
	jne	SHORT $L86303
; Line 2762
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	add	ecx, ebx
; Line 2763
	mov	BYTE PTR _dung_map[ecx], al
; Line 2764
	mov	BYTE PTR _dung_map[ecx+112], al
$L86303:
; Line 2766
	cmp	edx, 4
	jne	SHORT $L86304
; Line 2767
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	add	ecx, ebx
; Line 2768
	mov	BYTE PTR _dung_map[ecx+1], al
; Line 2769
	mov	BYTE PTR _dung_map[ecx+113], al
$L86304:
; Line 2771
	cmp	edx, 5
	jne	SHORT $L86305
; Line 2772
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ecx+ebx+113], al
$L86305:
; Line 2773
	cmp	edx, 6
	jne	SHORT $L86306
; Line 2774
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ecx+ebx+1], al
$L86306:
; Line 2775
	cmp	edx, 7
	jne	SHORT $L86307
; Line 2776
	mov	ecx, edi
	imul	ecx, 112				; 00000070H
	mov	BYTE PTR _dung_map[ecx+ebx+112], al
$L86307:
; Line 2777
	cmp	edx, 8
	jne	SHORT $L86308
; Line 2778
	imul	edi, 112				; 00000070H
	mov	BYTE PTR _dung_map[edi+ebx], al
$L86308:
	pop	edi
	pop	esi
	pop	ebx
; Line 2779
	leave
	ret	12					; 0000000cH
@DRLG_L4FTVR@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L4TransFix
_TEXT	SEGMENT
_DRLG_L4TransFix PROC NEAR				; COMDAT
; Line 2783
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	push	edi
; Line 2791
	xor	edi, edi
	mov	DWORD PTR -4+[ebp], OFFSET FLAT:_dung_map+1921
$L86316:
; Line 2794
	mov	edx, DWORD PTR -4+[ebp]
; Line 2795
	lea	esi, DWORD PTR _dungeon[edi]
	mov	DWORD PTR -8+[ebp], 40			; 00000028H
$L86320:
; Line 2798
	mov	cl, BYTE PTR [esi]
	call	@IsDURWall@4
	test	al, al
	je	SHORT $L86323
	cmp	BYTE PTR [esi-1], 18			; 00000012H
	jne	SHORT $L86323
; Line 2799
	mov	al, BYTE PTR [edx-113]
	mov	BYTE PTR [edx-1], al
; Line 2800
	mov	BYTE PTR [edx], al
$L86323:
; Line 2802
	call	@IsDLLWall@4
	test	al, al
	je	SHORT $L86324
	cmp	BYTE PTR [esi+40], 19			; 00000013H
	jne	SHORT $L86324
; Line 2803
	mov	al, BYTE PTR [edx-113]
	mov	BYTE PTR [edx-112], al
; Line 2804
	mov	BYTE PTR [edx], al
$L86324:
; Line 2807
	cmp	cl, 18					; 00000012H
	jne	SHORT $L86325
; Line 2808
	mov	al, BYTE PTR [edx-113]
	mov	BYTE PTR [edx-1], al
; Line 2809
	mov	BYTE PTR [edx], al
$L86325:
; Line 2811
	cmp	cl, 19					; 00000013H
	jne	SHORT $L86326
; Line 2812
	mov	al, BYTE PTR [edx-113]
	mov	BYTE PTR [edx-112], al
; Line 2813
	mov	BYTE PTR [edx], al
$L86326:
; Line 2815
	cmp	cl, 24					; 00000018H
	jne	SHORT $L86327
; Line 2816
	mov	al, BYTE PTR [edx-113]
	mov	BYTE PTR [edx-1], al
; Line 2817
	mov	BYTE PTR [edx-112], al
; Line 2818
	mov	BYTE PTR [edx], al
$L86327:
; Line 2820
	cmp	cl, 57					; 00000039H
	jne	SHORT $L86328
; Line 2821
	mov	al, BYTE PTR [edx-112]
	mov	BYTE PTR [edx-225], al
; Line 2822
	mov	BYTE PTR [edx-113], al
$L86328:
; Line 2824
	cmp	cl, 53					; 00000035H
	jne	SHORT $L86329
; Line 2825
	mov	al, BYTE PTR [edx-1]
	mov	BYTE PTR [edx-114], al
; Line 2826
	mov	BYTE PTR [edx-113], al
$L86329:
; Line 2828
	add	edx, 224				; 000000e0H
; Line 2829
	add	esi, 40					; 00000028H
; Line 2831
	dec	DWORD PTR -8+[ebp]
	jne	$L86320
; Line 2832
	add	DWORD PTR -4+[ebp], 2
; Line 2833
	inc	edi
; Line 2834
	cmp	edi, 40					; 00000028H
	jl	$L86316
	pop	edi
	pop	esi
; Line 2835
	leave
	ret	0
_DRLG_L4TransFix ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _DRLG_L4Corners
_TEXT	SEGMENT
_DRLG_L4Corners PROC NEAR				; COMDAT
; Line 2844
	xor	edx, edx
	push	esi
	inc	edx
$L86335:
; Line 2846
	push	38					; 00000026H
	lea	eax, DWORD PTR _dungeon[edx+40]
	pop	esi
$L86338:
; Line 2849
	mov	cl, BYTE PTR [eax]
; Line 2852
	cmp	cl, 18					; 00000012H
	jb	SHORT $L86345
	cmp	cl, 30					; 0000001eH
	ja	SHORT $L86345
	cmp	BYTE PTR [eax+40], 18			; 00000012H
	jb	SHORT $L86346
	cmp	BYTE PTR [eax+1], 18			; 00000012H
	jae	SHORT $L86345
$L86346:
; Line 2853
	add	cl, 98					; 00000062H
	mov	BYTE PTR [eax], cl
$L86345:
; Line 2855
	add	eax, 40					; 00000028H
; Line 2857
	dec	esi
	jne	SHORT $L86338
; Line 2858
	inc	edx
; Line 2859
	cmp	edx, 39					; 00000027H
	jl	SHORT $L86335
	pop	esi
; Line 2860
	ret	0
_DRLG_L4Corners ENDP
_TEXT	ENDS
EXTRN	_dPiece:BYTE
EXTRN	_pMegaTiles:DWORD
; Function compile flags: /Ogsy
;	COMDAT _DRLG_L4Pass3
_TEXT	SEGMENT
_v15$ = -24
_v16$ = -20
_v0$ = -4
_v1$ = -4
_v4$ = -8
_v6$ = -12
_v9$ = -4
_DRLG_L4Pass3 PROC NEAR					; COMDAT
; Line 2863
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 2886
	mov	eax, DWORD PTR _pMegaTiles
	push	ebx
	push	esi
	push	edi
	movzx	ecx, WORD PTR [eax+232]
	lea	edx, DWORD PTR [ecx+1]
; Line 2888
	mov	cx, WORD PTR [eax+234]
	mov	DWORD PTR _v0$[ebp], edx
	mov	WORD PTR _v0$[ebp], cx
; Line 2889
	inc	DWORD PTR _v0$[ebp]
; Line 2890
	mov	cx, WORD PTR [eax+236]
	mov	edi, DWORD PTR _v0$[ebp]
	mov	WORD PTR _v0$[ebp], cx
; Line 2891
	inc	DWORD PTR _v0$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR _v15$[ebp], ecx
; Line 2892
	mov	cx, WORD PTR [eax+238]
	mov	WORD PTR _v0$[ebp], cx
; Line 2893
	mov	ecx, DWORD PTR _v0$[ebp]
; Line 2894
	mov	DWORD PTR _v1$[ebp], OFFSET FLAT:_dPiece+448
	lea	esi, DWORD PTR [ecx+1]
$L86377:
; Line 2896
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR -16+[ebp], 56			; 00000038H
	add	ecx, -444				; fffffe44H
$L86380:
; Line 2901
	mov	ebx, DWORD PTR _v15$[ebp]
	mov	DWORD PTR [ecx-4], edx
	mov	DWORD PTR [ecx+444], edi
	mov	DWORD PTR [ecx], ebx
; Line 2902
	mov	DWORD PTR [ecx+448], esi
; Line 2903
	add	ecx, 896				; 00000380H
; Line 2905
	dec	DWORD PTR -16+[ebp]
	jne	SHORT $L86380
; Line 2906
	add	DWORD PTR _v1$[ebp], 8
; Line 2907
	cmp	DWORD PTR _v1$[ebp], OFFSET FLAT:_dPiece+896
	jl	SHORT $L86377
; Line 2908
	and	DWORD PTR _v4$[ebp], 0
	mov	DWORD PTR -16+[ebp], OFFSET FLAT:_dPiece+7236
$L86385:
; Line 2912
	mov	ecx, DWORD PTR _v4$[ebp]
	mov	esi, DWORD PTR -16+[ebp]
	mov	DWORD PTR -24+[ebp], 40			; 00000028H
	lea	ecx, DWORD PTR _dungeon[ecx]
	mov	DWORD PTR _v6$[ebp], ecx
$L86389:
; Line 2915
	mov	ecx, DWORD PTR _v6$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	dec	ecx
; Line 2916
	jns	SHORT $L86392
; Line 2917
	xor	ecx, ecx
	xor	edx, edx
; Line 2918
	xor	edi, edi
; Line 2919
	mov	DWORD PTR _v16$[ebp], ecx
; Line 2921
	jmp	SHORT $L86393
$L86392:
; Line 2922
	lea	ecx, DWORD PTR [eax+ecx*8]
; Line 2923
	mov	dx, WORD PTR [ecx]
; Line 2924
	inc	ecx
; Line 2925
	movzx	edx, dx
	inc	ecx
	inc	edx
	mov	DWORD PTR _v9$[ebp], edx
; Line 2927
	mov	di, WORD PTR [ecx]
; Line 2928
	inc	ecx
	mov	WORD PTR _v9$[ebp], di
	inc	ecx
; Line 2929
	inc	DWORD PTR _v9$[ebp]
; Line 2930
	mov	bx, WORD PTR [ecx]
	mov	edi, DWORD PTR _v9$[ebp]
; Line 2932
	mov	cx, WORD PTR [ecx+2]
	mov	WORD PTR _v9$[ebp], bx
	inc	DWORD PTR _v9$[ebp]
	mov	ebx, DWORD PTR _v9$[ebp]
	mov	WORD PTR _v9$[ebp], cx
; Line 2933
	mov	ecx, DWORD PTR _v9$[ebp]
	mov	DWORD PTR _v16$[ebp], ebx
	inc	ecx
$L86393:
; Line 2935
	add	DWORD PTR _v6$[ebp], 40			; 00000028H
; Line 2936
	mov	DWORD PTR [esi-4], edx
; Line 2938
	mov	edx, DWORD PTR _v16$[ebp]
	mov	DWORD PTR [esi+444], edi
	mov	DWORD PTR [esi], edx
; Line 2939
	mov	DWORD PTR [esi+448], ecx
; Line 2940
	add	esi, 896				; 00000380H
; Line 2942
	dec	DWORD PTR -24+[ebp]
	jne	SHORT $L86389
; Line 2943
	add	DWORD PTR -16+[ebp], 8
; Line 2944
	inc	DWORD PTR _v4$[ebp]
; Line 2945
	cmp	DWORD PTR _v4$[ebp], 40			; 00000028H
	jl	$L86385
	pop	edi
	pop	esi
	pop	ebx
; Line 2946
	leave
	ret	0
_DRLG_L4Pass3 ENDP
_TEXT	ENDS
END
