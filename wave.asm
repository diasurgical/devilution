; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/wave.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @WCloseFile@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WGetFileSize@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WGetFileArchive@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WOpenFile@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WReadFile@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @WSetFilePointer@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadWaveFormat@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AllocateMemFile@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @FreeMemFile@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ReadWaveFile@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ReadMemFile@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @FillMemFile@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SeekMemFile@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ReadWaveSection@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @LoadWaveFile@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	@WCloseFile@4
EXTRN	_SFileCloseFile@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @WCloseFile@4
_TEXT	SEGMENT
@WCloseFile@4 PROC NEAR					; COMDAT
; _file$ = ecx
; File Source/wave.cpp
; Line 7
	push	ecx
	call	_SFileCloseFile@4
; Line 8
	ret	0
@WCloseFile@4 ENDP
_TEXT	ENDS
PUBLIC	@WGetFileSize@8
PUBLIC	@WGetFileArchive@12
EXTRN	_SFileGetFileSize@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @WGetFileSize@8
_TEXT	SEGMENT
_retry$ = -4
@WGetFileSize@8 PROC NEAR				; COMDAT
; _hsFile$ = ecx
; _lpFileSizeHigh$ = edx
; Line 11
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 12
	and	DWORD PTR _retry$[ebp], 0
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
; Line 15
	jmp	SHORT $L85214
$L84993:
; Line 16
	push	0
	lea	edx, DWORD PTR _retry$[ebp]
	mov	ecx, esi
	call	@WGetFileArchive@12
$L85214:
	push	edi
	push	esi
	call	_SFileGetFileSize@8
	test	eax, eax
	je	SHORT $L84993
	pop	edi
	pop	esi
; Line 19
	leave
	ret	0
@WGetFileSize@8 ENDP
_TEXT	ENDS
EXTRN	_diabdat_mpq:DWORD
EXTRN	__imp__Sleep@4:NEAR
EXTRN	_SFileGetFileArchive@8:NEAR
EXTRN	@FileErrDlg@4:NEAR
EXTRN	_InsertCDDlg:NEAR
; Function compile flags: /Ogsy
;	COMDAT @WGetFileArchive@12
_TEXT	SEGMENT
_FileName$ = 8
_archive$ = -4
@WGetFileArchive@12 PROC NEAR				; COMDAT
; _hsFile$ = ecx
; _retries$ = edx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, edx
	push	edi
	mov	edi, ecx
; Line 25
	cmp	DWORD PTR [esi], 5
	jb	SHORT $L85004
; Line 26
	mov	ecx, DWORD PTR _FileName$[ebp]
	call	@FileErrDlg@4
$L85004:
; Line 28
	test	edi, edi
	je	SHORT $L85005
	lea	eax, DWORD PTR _archive$[ebp]
	push	eax
	push	edi
	call	_SFileGetFileArchive@8
	test	eax, eax
	je	SHORT $L85005
	mov	eax, DWORD PTR _archive$[ebp]
	cmp	eax, DWORD PTR _diabdat_mpq
	je	SHORT $L85005
; Line 29
	push	20					; 00000014H
	call	DWORD PTR __imp__Sleep@4
; Line 30
	inc	DWORD PTR [esi]
; Line 31
	jmp	SHORT $L85007
$L85005:
	call	_InsertCDDlg
	test	eax, eax
	jne	SHORT $L85007
; Line 32
	mov	ecx, DWORD PTR _FileName$[ebp]
	call	@FileErrDlg@4
$L85007:
	pop	edi
	pop	esi
; Line 33
	leave
	ret	4
@WGetFileArchive@12 ENDP
_TEXT	ENDS
PUBLIC	@WOpenFile@12
EXTRN	_SErrGetLastError@0:NEAR
EXTRN	_SFileOpenFile@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @WOpenFile@12
_TEXT	SEGMENT
_mayNotExist$ = 8
_retry$ = -4
@WOpenFile@12 PROC NEAR					; COMDAT
; _FileName$ = ecx
; _phsFile$ = edx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 37
	and	DWORD PTR _retry$[ebp], 0
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
$L85017:
; Line 40
	push	edi
	push	esi
	call	_SFileOpenFile@8
	test	eax, eax
	jne	SHORT $L85220
; Line 42
	cmp	DWORD PTR _mayNotExist$[ebp], eax
	je	SHORT $L85020
	call	_SErrGetLastError@0
	cmp	eax, 2
	je	SHORT $L85221
$L85020:
; Line 44
	push	esi
	lea	edx, DWORD PTR _retry$[ebp]
	xor	ecx, ecx
	call	@WGetFileArchive@12
	jmp	SHORT $L85017
$L85220:
; Line 41
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85014
$L85221:
; Line 46
	xor	eax, eax
$L85014:
	pop	edi
	pop	esi
; Line 47
	leave
	ret	4
@WOpenFile@12 ENDP
_TEXT	ENDS
PUBLIC	@WReadFile@12
PUBLIC	@WSetFilePointer@16
EXTRN	_SFileReadFile@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT @WReadFile@12
_TEXT	SEGMENT
_to_read$ = 8
_retry$ = -4
_readed$ = -12
_initial_pos$ = -8
@WReadFile@12 PROC NEAR					; COMDAT
; _hsFile$ = ecx
; _buf$ = edx
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 51
	xor	esi, esi
	mov	ebx, edx
; Line 53
	push	1
	push	esi
	xor	edx, edx
	mov	edi, ecx
	mov	DWORD PTR _retry$[ebp], esi
	call	@WSetFilePointer@16
	mov	DWORD PTR _initial_pos$[ebp], eax
; Line 55
	jmp	SHORT $L85228
$L85035:
; Line 56
	push	esi
	lea	edx, DWORD PTR _retry$[ebp]
	mov	ecx, edi
	call	@WGetFileArchive@12
; Line 57
	mov	edx, DWORD PTR _initial_pos$[ebp]
	mov	ecx, edi
	push	esi
	push	esi
	call	@WSetFilePointer@16
$L85228:
	lea	eax, DWORD PTR _readed$[ebp]
	push	esi
	push	eax
	push	DWORD PTR _to_read$[ebp]
	push	ebx
	push	edi
	call	_SFileReadFile@20
	test	eax, eax
	je	SHORT $L85035
	pop	edi
	pop	esi
	pop	ebx
; Line 59
	leave
	ret	4
@WReadFile@12 ENDP
_TEXT	ENDS
EXTRN	_SFileSetFilePointer@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT @WSetFilePointer@16
_TEXT	SEGMENT
_file2$ = 8
_whence$ = 12
_retry$ = -4
@WSetFilePointer@16 PROC NEAR				; COMDAT
; _file1$ = ecx
; _offset$ = edx
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 63
	and	DWORD PTR _retry$[ebp], 0
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
$L85051:
; Line 67
	push	DWORD PTR _whence$[ebp]
	push	DWORD PTR _file2$[ebp]
	push	edi
	push	esi
	call	_SFileSetFilePointer@16
; Line 68
	cmp	eax, -1
	jne	SHORT $L85232
; Line 70
	push	0
	lea	edx, DWORD PTR _retry$[ebp]
	mov	ecx, esi
	call	@WGetFileArchive@12
	jmp	SHORT $L85051
$L85232:
	pop	edi
	pop	esi
; Line 73
	leave
	ret	8
@WSetFilePointer@16 ENDP
_TEXT	ENDS
PUBLIC	@LoadWaveFormat@8
PUBLIC	@AllocateMemFile@12
PUBLIC	@FreeMemFile@4
PUBLIC	@ReadWaveFile@12
; Function compile flags: /Ogsy
;	COMDAT @LoadWaveFormat@8
_TEXT	SEGMENT
_wave_file$ = -28
@LoadWaveFormat@8 PROC NEAR				; COMDAT
; _hsFile$ = ecx
; _pwfx$ = edx
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	esi, edx
; Line 80
	push	0
	lea	edx, DWORD PTR _wave_file$[ebp]
	call	@AllocateMemFile@12
; Line 81
	mov	edx, esi
	lea	ecx, DWORD PTR _wave_file$[ebp]
	push	0
	call	@ReadWaveFile@12
; Line 82
	lea	ecx, DWORD PTR _wave_file$[ebp]
	mov	esi, eax
	call	@FreeMemFile@4
; Line 83
	mov	eax, esi
	pop	esi
; Line 84
	leave
	ret	0
@LoadWaveFormat@8 ENDP
_TEXT	ENDS
EXTRN	@DiabloAllocPtr@4:NEAR
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT @AllocateMemFile@12
_TEXT	SEGMENT
_dwPos$ = 8
@AllocateMemFile@12 PROC NEAR				; COMDAT
; _hsFile$ = ecx
; _pMemFile$ = edx
; Line 87
	push	esi
	push	edi
	mov	esi, edx
; Line 90
	push	28					; 0000001cH
	push	0
	push	esi
	mov	edi, ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 91
	xor	edx, edx
	mov	ecx, edi
	call	@WGetFileSize@8
; Line 92
	mov	ecx, 4096				; 00001000H
	mov	DWORD PTR [esi], eax
; Line 93
	cmp	DWORD PTR _dwPos$[esp+4], ecx
	jbe	SHORT $L85072
; Line 94
	mov	ecx, DWORD PTR _dwPos$[esp+4]
$L85072:
; Line 96
	cmp	ecx, eax
	mov	DWORD PTR [esi+8], ecx
	jb	SHORT $L85073
; Line 97
	mov	ecx, eax
$L85073:
; Line 98
	mov	DWORD PTR [esi+8], ecx
; Line 99
	call	@DiabloAllocPtr@4
; Line 100
	mov	DWORD PTR [esi+24], edi
	mov	DWORD PTR [esi+20], eax
	pop	edi
	pop	esi
; Line 102
	ret	4
@AllocateMemFile@12 ENDP
_TEXT	ENDS
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @FreeMemFile@4
_TEXT	SEGMENT
@FreeMemFile@4 PROC NEAR				; COMDAT
; _pMemFile$ = ecx
; Line 105
	mov	eax, ecx
; Line 106
	mov	ecx, DWORD PTR [eax+20]
; Line 107
	and	DWORD PTR [eax+20], 0
; Line 108
	jmp	@mem_free_dbg@4
@FreeMemFile@4 ENDP
_TEXT	ENDS
PUBLIC	@ReadMemFile@12
PUBLIC	@SeekMemFile@12
PUBLIC	@ReadWaveSection@12
; Function compile flags: /Ogsy
;	COMDAT @ReadWaveFile@12
_TEXT	SEGMENT
_chunk$ = 8
_hdr$ = -44
_fmt$ = -8
_wf$ = -24
@ReadWaveFile@12 PROC NEAR				; COMDAT
; _pMemFile$ = ecx
; _pwfx$ = edx
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	mov	esi, edx
; Line 117
	push	12					; 0000000cH
	lea	edx, DWORD PTR _hdr$[ebp]
	mov	edi, ecx
	call	@ReadMemFile@12
	test	eax, eax
; Line 118
	je	$L85107
; Line 119
	cmp	DWORD PTR _hdr$[ebp], 1179011410	; 46464952H
	jne	$L85107
	cmp	DWORD PTR _hdr$[ebp+8], 1163280727	; 45564157H
	jne	$L85107
; Line 121
	lea	eax, DWORD PTR _fmt$[ebp]
	mov	edx, 544501094				; 20746d66H
	push	eax
	mov	ecx, edi
	call	@ReadWaveSection@12
	test	eax, eax
; Line 122
	je	SHORT $L85107
; Line 123
	cmp	DWORD PTR _fmt$[ebp], 16		; 00000010H
; Line 124
	jb	SHORT $L85107
; Line 125
	push	16					; 00000010H
	lea	edx, DWORD PTR _wf$[ebp]
	mov	ecx, edi
	call	@ReadMemFile@12
	test	eax, eax
; Line 126
	je	SHORT $L85107
; Line 127
	mov	eax, DWORD PTR _fmt$[ebp]
	push	1
	mov	ecx, edi
	lea	edx, DWORD PTR [eax-16]
	call	@SeekMemFile@12
	cmp	eax, -1
; Line 128
	je	SHORT $L85107
; Line 131
	mov	ax, WORD PTR _wf$[ebp]
	and	WORD PTR [esi+16], 0
	mov	WORD PTR [esi], ax
; Line 132
	mov	ax, WORD PTR _wf$[ebp+2]
	mov	WORD PTR [esi+2], ax
; Line 133
	mov	eax, DWORD PTR _wf$[ebp+4]
	mov	DWORD PTR [esi+4], eax
; Line 134
	mov	eax, DWORD PTR _wf$[ebp+8]
; Line 137
	cmp	DWORD PTR _chunk$[ebp], 0
	mov	DWORD PTR [esi+8], eax
	mov	ax, WORD PTR _wf$[ebp+12]
	mov	WORD PTR [esi+12], ax
	mov	ax, WORD PTR _wf$[ebp+14]
	mov	WORD PTR [esi+14], ax
	jne	SHORT $L85122
; Line 138
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85085
$L85122:
; Line 139
	push	DWORD PTR _chunk$[ebp]
	mov	edx, 1635017060				; 61746164H
	mov	ecx, edi
	call	@ReadWaveSection@12
	jmp	SHORT $L85085
$L85107:
; Line 120
	xor	eax, eax
$L85085:
	pop	edi
	pop	esi
; Line 140
	leave
	ret	4
@ReadWaveFile@12 ENDP
_TEXT	ENDS
PUBLIC	@FillMemFile@4
EXTRN	_memcpy:NEAR
; Function compile flags: /Ogsy
;	COMDAT @ReadMemFile@12
_TEXT	SEGMENT
_length$ = 8
@ReadMemFile@12 PROC NEAR				; COMDAT
; _pMemFile$ = ecx
; _lpBuf$ = edx
; Line 143
	push	ebx
; Line 144
	mov	ebx, DWORD PTR _length$[esp]
	push	ebp
	push	esi
	test	ebx, ebx
	push	edi
	mov	ebp, edx
	mov	esi, ecx
	je	SHORT $L85140
$L85139:
; Line 146
	cmp	DWORD PTR [esi+16], 0
	jne	SHORT $L85142
; Line 147
	mov	ecx, esi
	call	@FillMemFile@4
$L85142:
; Line 148
	mov	edi, DWORD PTR [esi+16]
; Line 149
	cmp	ebx, edi
	jae	SHORT $L85143
; Line 150
	mov	edi, ebx
$L85143:
; Line 151
	test	edi, edi
	je	SHORT $L85247
; Line 153
	mov	eax, DWORD PTR [esi+20]
	push	edi
	add	eax, DWORD PTR [esi+12]
	push	eax
	push	ebp
	call	_memcpy
; Line 154
	add	DWORD PTR [esi+4], edi
; Line 155
	add	DWORD PTR [esi+12], edi
; Line 156
	sub	DWORD PTR [esi+16], edi
	add	esp, 12					; 0000000cH
; Line 158
	sub	ebx, edi
	jne	SHORT $L85139
$L85140:
; Line 160
	xor	eax, eax
	inc	eax
$L85137:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 161
	ret	4
$L85247:
; Line 152
	xor	eax, eax
	jmp	SHORT $L85137
@ReadMemFile@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @FillMemFile@4
_TEXT	SEGMENT
@FillMemFile@4 PROC NEAR				; COMDAT
; _pMemFile$ = ecx
; Line 164
	push	esi
	mov	esi, ecx
	push	edi
; Line 166
	push	0
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+24]
	push	0
	call	@WSetFilePointer@16
; Line 167
	mov	edi, DWORD PTR [esi]
; Line 168
	mov	eax, DWORD PTR [esi+8]
	sub	edi, DWORD PTR [esi+4]
	cmp	eax, edi
	jae	SHORT $L85150
; Line 169
	mov	edi, eax
$L85150:
; Line 170
	test	edi, edi
	je	SHORT $L85151
; Line 171
	mov	edx, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+24]
	push	edi
	call	@WReadFile@12
$L85151:
; Line 172
	and	DWORD PTR [esi+12], 0
; Line 173
	mov	DWORD PTR [esi+16], edi
	pop	edi
	pop	esi
; Line 174
	ret	0
@FillMemFile@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @SeekMemFile@12
_TEXT	SEGMENT
@SeekMemFile@12 PROC NEAR				; COMDAT
; _pMemFile$ = ecx
; _lDist$ = edx
; Line 178
	mov	eax, DWORD PTR [ecx+16]
	cmp	edx, eax
	jae	SHORT $L85159
; Line 179
	sub	eax, edx
; Line 180
	add	DWORD PTR [ecx+12], edx
	mov	DWORD PTR [ecx+16], eax
; Line 181
	jmp	SHORT $L85160
$L85159:
; Line 182
	and	DWORD PTR [ecx+16], 0
$L85160:
; Line 183
	add	DWORD PTR [ecx+4], edx
; Line 184
	mov	eax, DWORD PTR [ecx+4]
; Line 185
	ret	4
@SeekMemFile@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @ReadWaveSection@12
_TEXT	SEGMENT
_chunk$ = 8
_hdr$ = -8
@ReadWaveSection@12 PROC NEAR				; COMDAT
; _pMemFile$ = ecx
; _id$ = edx
; Line 188
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx
$L85170:
; Line 192
	push	8
	lea	edx, DWORD PTR _hdr$[ebp]
	mov	ecx, edi
	call	@ReadMemFile@12
	test	eax, eax
	je	SHORT $L85262
; Line 194
	cmp	DWORD PTR _hdr$[ebp], esi
; Line 196
	mov	ecx, edi
	push	1
	je	SHORT $L85171
	mov	edx, DWORD PTR _hdr$[ebp+4]
	call	@SeekMemFile@12
	cmp	eax, -1
	jne	SHORT $L85170
$L85262:
; Line 197
	xor	eax, eax
	jmp	SHORT $L85167
$L85171:
; Line 200
	mov	esi, DWORD PTR _chunk$[ebp]
	mov	eax, DWORD PTR _hdr$[ebp+4]
; Line 201
	xor	edx, edx
	mov	DWORD PTR [esi], eax
	call	@SeekMemFile@12
; Line 202
	xor	ecx, ecx
	cmp	eax, -1
	setne	cl
	mov	DWORD PTR [esi+4], eax
	mov	eax, ecx
$L85167:
	pop	edi
	pop	esi
; Line 203
	leave
	ret	4
@ReadWaveSection@12 ENDP
_TEXT	ENDS
PUBLIC	@LoadWaveFile@12
; Function compile flags: /Ogsy
;	COMDAT @LoadWaveFile@12
_TEXT	SEGMENT
_chunk$ = 8
_wave_file$ = -28
@LoadWaveFile@12 PROC NEAR				; COMDAT
; _hsFile$ = ecx
; _pwfx$ = edx
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	esi, edx
; Line 209
	push	-1
	lea	edx, DWORD PTR _wave_file$[ebp]
	call	@AllocateMemFile@12
; Line 210
	mov	edx, esi
	lea	ecx, DWORD PTR _wave_file$[ebp]
	push	DWORD PTR _chunk$[ebp]
	call	@ReadWaveFile@12
	test	eax, eax
	pop	esi
	jne	SHORT $L85185
; Line 211
	lea	ecx, DWORD PTR _wave_file$[ebp]
	call	@FreeMemFile@4
; Line 212
	xor	eax, eax
	jmp	SHORT $L85182
$L85185:
; Line 214
	mov	eax, DWORD PTR _wave_file$[ebp+20]
$L85182:
; Line 215
	leave
	ret	4
@LoadWaveFile@12 ENDP
_TEXT	ENDS
END
