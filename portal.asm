; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/portal.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _InitPortals
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetPortalStats@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddWarpMissile@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SyncPortals
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddInTownPortal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ActivatePortal@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DeactivatePortal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PortalOnLevel@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RemovePortalMissile@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetCurrentPortal@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetPortalLevel
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetPortalLvlPos
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PosOkPortal@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_WarpDropX
PUBLIC	_WarpDropY
_DATA	SEGMENT
COMM	_portal:BYTE:060H
COMM	_portalindex:DWORD
_WarpDropX DD	039H
	DD	03bH
	DD	03dH
	DD	03fH
_WarpDropY DD	028H
	DD	028H
	DD	028H
	DD	028H
_DATA	ENDS
PUBLIC	_InitPortals
EXTRN	@delta_portal_inited@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _InitPortals
_TEXT	SEGMENT
_InitPortals PROC NEAR					; COMDAT
; File Source/portal.cpp
; Line 12
	push	esi
	push	edi
; Line 15
	xor	edi, edi
	mov	esi, OFFSET FLAT:_portal
$L84984:
; Line 16
	mov	ecx, edi
	call	@delta_portal_inited@4
	test	eax, eax
	je	SHORT $L84985
; Line 17
	and	DWORD PTR [esi], 0
$L84985:
; Line 15
	add	esi, 24					; 00000018H
	inc	edi
	cmp	esi, OFFSET FLAT:_portal+96
	jl	SHORT $L84984
	pop	edi
	pop	esi
; Line 19
	ret	0
_InitPortals ENDP
_TEXT	ENDS
PUBLIC	@SetPortalStats@24
; Function compile flags: /Ogsy
;	COMDAT @SetPortalStats@24
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_lvl$ = 16
_lvltype$ = 20
@SetPortalStats@24 PROC NEAR				; COMDAT
; _i$ = ecx
; _o$ = edx
; Line 23
	lea	eax, DWORD PTR [ecx+ecx*2]
; Line 24
	mov	ecx, DWORD PTR _x$[esp-4]
	shl	eax, 3
	mov	DWORD PTR _portal[eax+4], ecx
; Line 25
	mov	ecx, DWORD PTR _y$[esp-4]
	and	DWORD PTR _portal[eax+20], 0
	mov	DWORD PTR _portal[eax+8], ecx
; Line 27
	mov	ecx, DWORD PTR _lvl$[esp-4]
	mov	DWORD PTR _portal[eax], edx
	mov	DWORD PTR _portal[eax+12], ecx
; Line 28
	mov	ecx, DWORD PTR _lvltype$[esp-4]
	mov	DWORD PTR _portal[eax+16], ecx
; Line 29
	ret	16					; 00000010H
@SetPortalStats@24 ENDP
_TEXT	ENDS
PUBLIC	@AddWarpMissile@12
EXTRN	_dMissile:BYTE
EXTRN	@AddLight@12:NEAR
EXTRN	_missile:BYTE
EXTRN	@SetMissDir@8:NEAR
EXTRN	@AddMissile@40:NEAR
EXTRN	_missiledata:BYTE
EXTRN	_currlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT @AddWarpMissile@12
_TEXT	SEGMENT
_y$ = 8
@AddWarpMissile@12 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 32
	push	ebx
	push	esi
; Line 36
	mov	esi, edx
	mov	eax, DWORD PTR _y$[esp+4]
	imul	esi, 112				; 00000070H
	xor	ebx, ebx
	or	DWORD PTR _missiledata+300, -1
; Line 37
	push	ebx
	push	ebx
	push	ecx
	push	ebx
	push	10					; 0000000aH
	push	ebx
	push	eax
	push	edx
	xor	edx, edx
	xor	ecx, ecx
	mov	BYTE PTR _dMissile[esi+eax], bl
	call	@AddMissile@40
	mov	esi, eax
; Line 39
	cmp	esi, -1
	je	SHORT $L85009
; Line 40
	xor	edx, edx
	mov	ecx, esi
	inc	edx
	call	@SetMissDir@8
; Line 42
	cmp	BYTE PTR _currlevel, bl
	je	SHORT $L85010
; Line 43
	imul	esi, 176				; 000000b0H
	push	15					; 0000000fH
	mov	edx, DWORD PTR _missile[esi+8]
	mov	ecx, DWORD PTR _missile[esi+4]
	call	@AddLight@12
	mov	DWORD PTR _missile[esi+136], eax
$L85010:
; Line 45
	mov	DWORD PTR _missiledata+300, 129		; 00000081H
$L85009:
	pop	esi
	pop	ebx
; Line 47
	ret	4
@AddWarpMissile@12 ENDP
_TEXT	ENDS
PUBLIC	_SyncPortals
EXTRN	_setlvlnum:BYTE
EXTRN	_setlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT _SyncPortals
_TEXT	SEGMENT
_SyncPortals PROC NEAR					; COMDAT
; Line 50
	push	esi
	push	edi
; Line 53
	xor	edi, edi
	mov	esi, OFFSET FLAT:_portal+12
$L85013:
; Line 54
	cmp	DWORD PTR [esi-12], 0
	je	SHORT $L85014
; Line 56
	mov	al, BYTE PTR _currlevel
	test	al, al
	jne	SHORT $L85017
; Line 57
	push	DWORD PTR _WarpDropY[edi*4]
	mov	edx, DWORD PTR _WarpDropX[edi*4]
; Line 58
	jmp	SHORT $L85115
$L85017:
; Line 60
	cmp	BYTE PTR _setlevel, 0
	movzx	eax, al
	je	SHORT $L85020
; Line 61
	movzx	eax, BYTE PTR _setlvlnum
$L85020:
; Line 62
	cmp	DWORD PTR [esi], eax
	jne	SHORT $L85014
; Line 63
	push	DWORD PTR [esi-4]
	mov	edx, DWORD PTR [esi-8]
$L85115:
	mov	ecx, edi
	call	@AddWarpMissile@12
$L85014:
	add	esi, 24					; 00000018H
	inc	edi
	cmp	esi, OFFSET FLAT:_portal+108
	jl	SHORT $L85013
	pop	edi
	pop	esi
; Line 66
	ret	0
_SyncPortals ENDP
_TEXT	ENDS
PUBLIC	@AddInTownPortal@4
; Function compile flags: /Ogsy
;	COMDAT @AddInTownPortal@4
_TEXT	SEGMENT
@AddInTownPortal@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 71
	push	DWORD PTR _WarpDropY[ecx*4]
	mov	edx, DWORD PTR _WarpDropX[ecx*4]
	call	@AddWarpMissile@12
; Line 72
	ret	0
@AddInTownPortal@4 ENDP
_TEXT	ENDS
PUBLIC	@ActivatePortal@24
; Function compile flags: /Ogsy
;	COMDAT @ActivatePortal@24
_TEXT	SEGMENT
_y$ = 8
_lvl$ = 12
_lvltype$ = 16
_sp$ = 20
@ActivatePortal@24 PROC NEAR				; COMDAT
; _i$ = ecx
; _x$ = edx
; Line 76
	lea	eax, DWORD PTR [ecx+ecx*2]
; Line 78
	mov	ecx, DWORD PTR _lvl$[esp-4]
	shl	eax, 3
	test	ecx, ecx
	mov	DWORD PTR _portal[eax], 1
	je	SHORT $L85038
; Line 81
	mov	DWORD PTR _portal[eax+12], ecx
; Line 82
	mov	ecx, DWORD PTR _lvltype$[esp-4]
	mov	DWORD PTR _portal[eax+4], edx
	mov	edx, DWORD PTR _y$[esp-4]
	mov	DWORD PTR _portal[eax+16], ecx
; Line 83
	mov	ecx, DWORD PTR _sp$[esp-4]
	mov	DWORD PTR _portal[eax+8], edx
	mov	DWORD PTR _portal[eax+20], ecx
$L85038:
; Line 85
	ret	16					; 00000010H
@ActivatePortal@24 ENDP
_TEXT	ENDS
PUBLIC	@DeactivatePortal@4
; Function compile flags: /Ogsy
;	COMDAT @DeactivatePortal@4
_TEXT	SEGMENT
@DeactivatePortal@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 89
	lea	eax, DWORD PTR [ecx+ecx*2]
	and	DWORD PTR _portal[eax*8], 0
; Line 90
	ret	0
@DeactivatePortal@4 ENDP
_TEXT	ENDS
PUBLIC	@PortalOnLevel@4
; Function compile flags: /Ogsy
;	COMDAT @PortalOnLevel@4
_TEXT	SEGMENT
@PortalOnLevel@4 PROC NEAR				; COMDAT
; _i$ = ecx
; Line 94
	mov	al, BYTE PTR _currlevel
	lea	ecx, DWORD PTR [ecx+ecx*2]
	movzx	edx, al
	cmp	DWORD PTR _portal[ecx*8+12], edx
	jne	SHORT $L85045
; Line 95
	xor	eax, eax
	inc	eax
; Line 98
	ret	0
$L85045:
; Line 97
	xor	ecx, ecx
	test	al, al
	sete	cl
	mov	eax, ecx
; Line 98
	ret	0
@PortalOnLevel@4 ENDP
_TEXT	ENDS
PUBLIC	@RemovePortalMissile@4
EXTRN	_dFlags:BYTE
EXTRN	@AddUnLight@4:NEAR
EXTRN	_missileactive:BYTE
EXTRN	_nummissiles:DWORD
EXTRN	@DeleteMissile@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @RemovePortalMissile@4
_TEXT	SEGMENT
@RemovePortalMissile@4 PROC NEAR			; COMDAT
; _id$ = ecx
; Line 101
	push	esi
	push	edi
; Line 105
	xor	edi, edi
	mov	esi, ecx
	cmp	DWORD PTR _nummissiles, edi
	jle	SHORT $L85054
	push	ebx
$L85052:
; Line 106
	mov	ebx, DWORD PTR _missileactive[edi*4]
; Line 107
	mov	eax, ebx
	imul	eax, 176				; 000000b0H
	cmp	DWORD PTR _missile[eax], 10		; 0000000aH
	jne	SHORT $L85053
	cmp	DWORD PTR _missile[eax+116], esi
	jne	SHORT $L85053
; Line 108
	mov	ecx, DWORD PTR _missile[eax+4]
	mov	edx, DWORD PTR _missile[eax+8]
	imul	ecx, 112				; 00000070H
	add	ecx, edx
	and	BYTE PTR _dFlags[ecx], -2		; fffffffeH
; Line 109
	and	BYTE PTR _dMissile[ecx], 0
; Line 111
	lea	ecx, DWORD PTR [esi+esi*2]
	cmp	DWORD PTR _portal[ecx*8+12], 0
	je	SHORT $L85056
; Line 112
	mov	ecx, DWORD PTR _missile[eax+136]
	call	@AddUnLight@4
$L85056:
; Line 114
	mov	edx, edi
	mov	ecx, ebx
	call	@DeleteMissile@8
$L85053:
	inc	edi
	cmp	edi, DWORD PTR _nummissiles
	jl	SHORT $L85052
	pop	ebx
$L85054:
	pop	edi
	pop	esi
; Line 117
	ret	0
@RemovePortalMissile@4 ENDP
_TEXT	ENDS
PUBLIC	@SetCurrentPortal@4
; Function compile flags: /Ogsy
;	COMDAT @SetCurrentPortal@4
_TEXT	SEGMENT
@SetCurrentPortal@4 PROC NEAR				; COMDAT
; _p$ = ecx
; Line 121
	mov	DWORD PTR _portalindex, ecx
; Line 122
	ret	0
@SetCurrentPortal@4 ENDP
_TEXT	ENDS
PUBLIC	_GetPortalLevel
EXTRN	_myplr:DWORD
EXTRN	_plr:BYTE
EXTRN	@NetSendCmd@8:NEAR
EXTRN	_leveltype:BYTE
; Function compile flags: /Ogsy
;	COMDAT _GetPortalLevel
_TEXT	SEGMENT
_GetPortalLevel PROC NEAR				; COMDAT
; Line 126
	xor	edx, edx
	cmp	BYTE PTR _currlevel, dl
	je	SHORT $L85061
; Line 130
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _setlevel, dl
	imul	eax, 21720				; 000054d8H
	mov	BYTE PTR _currlevel, dl
	mov	BYTE PTR _leveltype, dl
	mov	DWORD PTR _plr[eax+52], edx
$L85065:
; Line 148
	ret	0
$L85061:
; Line 132
	mov	ecx, DWORD PTR _portalindex
	lea	eax, DWORD PTR [ecx+ecx*2]
	shl	eax, 3
	cmp	DWORD PTR _portal[eax+20], edx
	je	SHORT $L85063
; Line 134
	mov	dl, BYTE PTR _portal[eax+12]
	mov	BYTE PTR _setlevel, 1
	mov	BYTE PTR _setlvlnum, dl
; Line 135
	jmp	SHORT $L85064
$L85063:
; Line 136
	mov	BYTE PTR _setlevel, dl
$L85064:
	push	esi
; Line 139
	lea	esi, DWORD PTR _portal[eax+12]
; Line 140
	mov	al, BYTE PTR _portal[eax+16]
	mov	dl, BYTE PTR [esi]
	mov	BYTE PTR _leveltype, al
; Line 141
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _currlevel, dl
	mov	edx, eax
	mov	esi, DWORD PTR [esi]
	imul	edx, 21720				; 000054d8H
; Line 143
	cmp	ecx, eax
	mov	DWORD PTR _plr[edx+52], esi
	pop	esi
	jne	SHORT $L85065
; Line 144
	xor	ecx, ecx
	mov	dl, 57					; 00000039H
	inc	ecx
	call	@NetSendCmd@8
; Line 145
	mov	ecx, DWORD PTR _portalindex
	jmp	@DeactivatePortal@4
_GetPortalLevel ENDP
_TEXT	ENDS
PUBLIC	_GetPortalLvlPos
EXTRN	_ViewX:DWORD
EXTRN	_ViewY:DWORD
; Function compile flags: /Ogsy
;	COMDAT _GetPortalLvlPos
_TEXT	SEGMENT
_GetPortalLvlPos PROC NEAR				; COMDAT
; Line 153
	cmp	BYTE PTR _currlevel, 0
	jne	SHORT $L85067
; Line 154
	mov	eax, DWORD PTR _portalindex
	shl	eax, 2
	mov	ecx, DWORD PTR _WarpDropX[eax]
; Line 155
	mov	eax, DWORD PTR _WarpDropY[eax]
	inc	ecx
	inc	eax
	mov	DWORD PTR _ViewX, ecx
	mov	DWORD PTR _ViewY, eax
; Line 165
	ret	0
$L85067:
; Line 157
	mov	ecx, DWORD PTR _portalindex
	lea	eax, DWORD PTR [ecx+ecx*2]
	shl	eax, 3
; Line 160
	cmp	ecx, DWORD PTR _myplr
	mov	edx, DWORD PTR _portal[eax+4]
	mov	eax, DWORD PTR _portal[eax+8]
	mov	DWORD PTR _ViewX, edx
	mov	DWORD PTR _ViewY, eax
	je	SHORT $L85069
; Line 161
	inc	DWORD PTR _ViewX
; Line 162
	inc	DWORD PTR _ViewY
$L85069:
; Line 165
	ret	0
_GetPortalLvlPos ENDP
_TEXT	ENDS
PUBLIC	@PosOkPortal@12
; Function compile flags: /Ogsy
;	COMDAT @PosOkPortal@12
_TEXT	SEGMENT
_y$ = 8
@PosOkPortal@12 PROC NEAR				; COMDAT
; _lvl$ = ecx
; _x$ = edx
; Line 168
	push	ebx
	push	esi
	push	edi
; Line 171
	mov	edi, DWORD PTR _y$[esp+8]
	mov	eax, OFFSET FLAT:_portal+4
$L85078:
; Line 172
	cmp	DWORD PTR [eax-4], 0
	je	SHORT $L85079
	cmp	DWORD PTR [eax+8], ecx
	jne	SHORT $L85079
	mov	esi, DWORD PTR [eax]
	cmp	esi, edx
	jne	SHORT $L85083
	cmp	DWORD PTR [eax+4], edi
	je	SHORT $L85082
$L85083:
	lea	ebx, DWORD PTR [edx-1]
	cmp	esi, ebx
	jne	SHORT $L85079
	lea	esi, DWORD PTR [edi-1]
	cmp	DWORD PTR [eax+4], esi
	je	SHORT $L85082
$L85079:
; Line 171
	add	eax, 24					; 00000018H
	cmp	eax, OFFSET FLAT:_portal+100
	jl	SHORT $L85078
; Line 175
	xor	eax, eax
$L85076:
	pop	edi
	pop	esi
	pop	ebx
; Line 176
	ret	4
$L85082:
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85076
@PosOkPortal@12 ENDP
_TEXT	ENDS
END
