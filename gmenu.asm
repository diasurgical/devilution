; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/gmenu.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_05PFIH@Pause?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@JOOC@Data?2Diabsmal?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@KHIG@Data?2BigTGold?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@JAGD@Data?2PentSpin?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FMK@Data?2option?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FBPC@Data?2optbar?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _gmenu_draw_pause
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_print_text@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FreeGMenu
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gmenu_init_menu
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gmenu_exception
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_call_proc@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_up_down@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _gmenu_draw
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_draw_menu_item@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_clear_buffer@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_get_lfont@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_presskeys@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_left_right@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_on_mouse_move@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_valid_mouse_pos@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_left_mouse@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_enable@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_slider_1@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_slider_get@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @gmenu_slider_3@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_lfontframe
PUBLIC	_lfontkern
_DATA	SEGMENT
COMM	_optbar_cel:DWORD
COMM	_byte_634464:BYTE
COMM	_PentSpin_cel:DWORD
COMM	_BigTGold_cel:DWORD
COMM	_dword_634474:DWORD
COMM	_byte_634478:BYTE
COMM	_dword_63447C:DWORD
COMM	_dword_634480:DWORD
COMM	_option_cel:DWORD
COMM	_dword_63448C:DWORD
COMM	_sgpCurrItem:DWORD
COMM	_sgpLogo:DWORD
_DATA	ENDS
CONST	SEGMENT
_lfontframe DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	025H
	DB	031H
	DB	026H
	DB	00H
	DB	027H
	DB	028H
	DB	02fH
	DB	02aH
	DB	02bH
	DB	029H
	DB	02dH
	DB	034H
	DB	02cH
	DB	035H
	DB	037H
	DB	024H
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	033H
	DB	032H
	DB	00H
	DB	02eH
	DB	00H
	DB	036H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	02aH
	DB	00H
	DB	02bH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	014H
	DB	00H
	DB	015H
	DB	00H
	ORG $+1
_lfontkern DB	012H
	DB	021H
	DB	015H
	DB	01aH
	DB	01cH
	DB	013H
	DB	013H
	DB	01aH
	DB	019H
	DB	0bH
	DB	0cH
	DB	019H
	DB	013H
	DB	022H
	DB	01cH
	DB	020H
	DB	014H
	DB	020H
	DB	01cH
	DB	014H
	DB	01cH
	DB	024H
	DB	023H
	DB	02eH
	DB	021H
	DB	021H
	DB	018H
	DB	0bH
	DB	017H
	DB	016H
	DB	016H
	DB	015H
	DB	016H
	DB	015H
	DB	015H
	DB	015H
	DB	020H
	DB	0aH
	DB	014H
	DB	024H
	DB	01fH
	DB	011H
	DB	0dH
	DB	0cH
	DB	0dH
	DB	012H
	DB	010H
	DB	0bH
	DB	014H
	DB	015H
	DB	0bH
	DB	0aH
	DB	0cH
	DB	0bH
	DB	015H
	DB	017H
CONST	ENDS
PUBLIC	_gmenu_draw_pause
PUBLIC	@gmenu_print_text@12
PUBLIC	??_C@_05PFIH@Pause?$AA@				; `string'
EXTRN	_RedBack:NEAR
EXTRN	_light_table_index:DWORD
EXTRN	_currlevel:BYTE
;	COMDAT ??_C@_05PFIH@Pause?$AA@
; File Source/gmenu.cpp
_DATA	SEGMENT
??_C@_05PFIH@Pause?$AA@ DB 'Pause', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _gmenu_draw_pause
_TEXT	SEGMENT
_gmenu_draw_pause PROC NEAR				; COMDAT
; Line 44
	cmp	BYTE PTR _currlevel, 0
	je	SHORT $L84985
; Line 45
	call	_RedBack
$L84985:
; Line 46
	cmp	DWORD PTR _dword_634480, 0
	jne	SHORT $L84986
; Line 47
	and	DWORD PTR _light_table_index, 0
; Line 48
	push	OFFSET FLAT:??_C@_05PFIH@Pause?$AA@	; `string'
	mov	edx, 336				; 00000150H
	mov	ecx, 316				; 0000013cH
	call	@gmenu_print_text@12
$L84986:
; Line 50
	ret	0
_gmenu_draw_pause ENDP
_TEXT	ENDS
EXTRN	_fontidx:BYTE
EXTRN	@CelDecodeLightOnly@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT @gmenu_print_text@12
_TEXT	SEGMENT
_pszStr$ = 8
@gmenu_print_text@12 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 61
	mov	eax, DWORD PTR _pszStr$[esp-4]
	push	ebp
	push	esi
	push	edi
	mov	edi, eax
; Line 64
	mov	al, BYTE PTR [eax]
	test	al, al
	mov	ebp, edx
	mov	esi, ecx
	je	SHORT $L85002
	push	ebx
$L85000:
; Line 66
	movzx	eax, al
	inc	edi
	movzx	eax, BYTE PTR _fontidx[eax]
	mov	bl, BYTE PTR _lfontframe[eax]
; Line 67
	test	bl, bl
	je	SHORT $L85003
; Line 68
	movzx	eax, bl
	push	46					; 0000002eH
	push	eax
	push	DWORD PTR _BigTGold_cel
	mov	edx, ebp
	mov	ecx, esi
	call	@CelDecodeLightOnly@20
$L85003:
; Line 69
	movzx	eax, bl
	movzx	eax, BYTE PTR _lfontkern[eax]
	lea	esi, DWORD PTR [esi+eax+2]
	mov	al, BYTE PTR [edi]
	test	al, al
	jne	SHORT $L85000
	pop	ebx
$L85002:
	pop	edi
	pop	esi
	pop	ebp
; Line 71
	ret	4
@gmenu_print_text@12 ENDP
_TEXT	ENDS
PUBLIC	_FreeGMenu
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _FreeGMenu
_TEXT	SEGMENT
_FreeGMenu PROC NEAR					; COMDAT
; Line 81
	mov	ecx, DWORD PTR _sgpLogo
	push	esi
; Line 82
	xor	esi, esi
	mov	DWORD PTR _sgpLogo, esi
; Line 83
	call	@mem_free_dbg@4
; Line 84
	mov	ecx, DWORD PTR _BigTGold_cel
; Line 85
	mov	DWORD PTR _BigTGold_cel, esi
; Line 86
	call	@mem_free_dbg@4
; Line 87
	mov	ecx, DWORD PTR _PentSpin_cel
; Line 88
	mov	DWORD PTR _PentSpin_cel, esi
; Line 89
	call	@mem_free_dbg@4
; Line 90
	mov	ecx, DWORD PTR _option_cel
; Line 91
	mov	DWORD PTR _option_cel, esi
; Line 92
	call	@mem_free_dbg@4
; Line 93
	mov	ecx, DWORD PTR _optbar_cel
; Line 94
	mov	DWORD PTR _optbar_cel, esi
	pop	esi
; Line 95
	jmp	@mem_free_dbg@4
_FreeGMenu ENDP
_TEXT	ENDS
PUBLIC	_gmenu_init_menu
PUBLIC	??_C@_0BC@JOOC@Data?2Diabsmal?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BC@KHIG@Data?2BigTGold?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BC@JAGD@Data?2PentSpin?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BA@FMK@Data?2option?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BA@FBPC@Data?2optbar?4CEL?$AA@		; `string'
EXTRN	@LoadFileInMem@8:NEAR
;	COMDAT ??_C@_0BC@JOOC@Data?2Diabsmal?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BC@JOOC@Data?2Diabsmal?4CEL?$AA@ DB 'Data\Diabsmal.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@KHIG@Data?2BigTGold?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BC@KHIG@Data?2BigTGold?4CEL?$AA@ DB 'Data\BigTGold.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@JAGD@Data?2PentSpin?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BC@JAGD@Data?2PentSpin?4CEL?$AA@ DB 'Data\PentSpin.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FMK@Data?2option?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BA@FMK@Data?2option?4CEL?$AA@ DB 'Data\option.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FBPC@Data?2optbar?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BA@FBPC@Data?2optbar?4CEL?$AA@ DB 'Data\optbar.CEL', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _gmenu_init_menu
_TEXT	SEGMENT
_gmenu_init_menu PROC NEAR				; COMDAT
; Line 101
	xor	eax, eax
; Line 106
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BC@JOOC@Data?2Diabsmal?4CEL?$AA@ ; `string'
	mov	BYTE PTR _byte_634478, 1
	mov	DWORD PTR _dword_634480, eax
	mov	DWORD PTR _sgpCurrItem, eax
	mov	DWORD PTR _dword_63447C, eax
	mov	DWORD PTR _dword_63448C, eax
	mov	BYTE PTR _byte_634464, al
	call	@LoadFileInMem@8
; Line 107
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BC@KHIG@Data?2BigTGold?4CEL?$AA@ ; `string'
	mov	DWORD PTR _sgpLogo, eax
	call	@LoadFileInMem@8
; Line 108
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BC@JAGD@Data?2PentSpin?4CEL?$AA@ ; `string'
	mov	DWORD PTR _BigTGold_cel, eax
	call	@LoadFileInMem@8
; Line 109
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BA@FMK@Data?2option?4CEL?$AA@ ; `string'
	mov	DWORD PTR _PentSpin_cel, eax
	call	@LoadFileInMem@8
; Line 110
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BA@FBPC@Data?2optbar?4CEL?$AA@ ; `string'
	mov	DWORD PTR _option_cel, eax
	call	@LoadFileInMem@8
	mov	DWORD PTR _optbar_cel, eax
; Line 111
	ret	0
_gmenu_init_menu ENDP
_TEXT	ENDS
PUBLIC	_gmenu_exception
; Function compile flags: /Ogsy
;	COMDAT _gmenu_exception
_TEXT	SEGMENT
_gmenu_exception PROC NEAR				; COMDAT
; Line 118
	xor	eax, eax
	cmp	DWORD PTR _dword_634480, eax
	setne	al
; Line 119
	ret	0
_gmenu_exception ENDP
_TEXT	ENDS
PUBLIC	@gmenu_call_proc@8
PUBLIC	@gmenu_up_down@4
EXTRN	_PauseMode:DWORD
; Function compile flags: /Ogsy
;	COMDAT @gmenu_call_proc@8
_TEXT	SEGMENT
@gmenu_call_proc@8 PROC NEAR				; COMDAT
; _pItem$ = ecx
; _gmFunc$ = edx
; Line 122
	push	ebx
; Line 127
	xor	ebx, ebx
; Line 132
	cmp	edx, ebx
	mov	DWORD PTR _PauseMode, ebx
	mov	BYTE PTR _byte_634464, bl
	mov	DWORD PTR _dword_63447C, edx
	mov	DWORD PTR _dword_634480, ecx
	je	SHORT $L85026
; Line 133
	call	edx
; Line 134
	mov	ecx, DWORD PTR _dword_634480
$L85026:
; Line 136
	xor	edx, edx
; Line 138
	cmp	ecx, ebx
	mov	DWORD PTR _dword_63448C, ebx
	je	SHORT $L85030
; Line 139
	lea	eax, DWORD PTR [ecx+8]
	jmp	SHORT $L85267
$L85029:
; Line 141
	inc	edx
; Line 142
	add	eax, 12					; 0000000cH
; Line 143
	mov	DWORD PTR _dword_63448C, edx
$L85267:
; Line 140
	cmp	DWORD PTR [eax], ebx
	jne	SHORT $L85029
$L85030:
; Line 146
	lea	eax, DWORD PTR [edx+edx*2]
	pop	ebx
	lea	eax, DWORD PTR [ecx+eax*4-12]
; Line 147
	xor	ecx, ecx
	mov	DWORD PTR _sgpCurrItem, eax
	inc	ecx
	jmp	@gmenu_up_down@4
@gmenu_call_proc@8 ENDP
_TEXT	ENDS
EXTRN	@PlaySFX@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @gmenu_up_down@4
_TEXT	SEGMENT
@gmenu_up_down@4 PROC NEAR				; COMDAT
; _a1$ = ecx
; Line 158
	mov	eax, DWORD PTR _sgpCurrItem
	push	esi
; Line 159
	test	eax, eax
	push	edi
	je	SHORT $L85046
; Line 161
	mov	edx, DWORD PTR _dword_63448C
	and	BYTE PTR _byte_634464, 0
	mov	edi, edx
; Line 162
	test	edi, edi
	je	SHORT $L85046
	mov	esi, DWORD PTR _dword_634480
$L85038:
; Line 163
	dec	edi
; Line 164
	test	ecx, ecx
	je	SHORT $L85040
; Line 165
	add	eax, 12					; 0000000cH
; Line 166
	mov	DWORD PTR _sgpCurrItem, eax
; Line 167
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LABEL_10$85042
; Line 169
	mov	eax, esi
; Line 170
	jmp	SHORT $L85043
$L85040:
; Line 171
	cmp	eax, esi
	jne	SHORT $L85044
; Line 172
	lea	eax, DWORD PTR [edx+edx*2]
	lea	eax, DWORD PTR [esi+eax*4]
$L85044:
; Line 173
	sub	eax, 12					; 0000000cH
$L85043:
; Line 175
	mov	DWORD PTR _sgpCurrItem, eax
$LABEL_10$85042:
; Line 177
	test	BYTE PTR [eax+3], -128			; ffffff80H
	jne	SHORT $L85272
; Line 162
	test	edi, edi
	jne	SHORT $L85038
$L85046:
	pop	edi
	pop	esi
; Line 184
	ret	0
$L85272:
; Line 178
	test	edi, edi
	je	SHORT $L85046
; Line 179
	push	69					; 00000045H
	pop	ecx
	pop	edi
	pop	esi
	jmp	@PlaySFX@4
@gmenu_up_down@4 ENDP
_TEXT	ENDS
PUBLIC	_gmenu_draw
PUBLIC	@gmenu_draw_menu_item@8
EXTRN	@CelDecodeOnly@20:NEAR
EXTRN	__imp__GetTickCount@0:NEAR
; Function compile flags: /Ogsy
;	COMDAT _gmenu_draw
_TEXT	SEGMENT
_gmenu_draw PROC NEAR					; COMDAT
; Line 194
	cmp	DWORD PTR _dword_634480, 0
	je	SHORT $L85057
; Line 195
	mov	eax, DWORD PTR _dword_63447C
	test	eax, eax
	je	SHORT $L85052
; Line 196
	call	eax
$L85052:
	push	esi
	push	edi
; Line 197
	push	296					; 00000128H
	push	1
	push	DWORD PTR _sgpLogo
	mov	edx, 262				; 00000106H
	mov	ecx, 236				; 000000ecH
	call	@CelDecodeOnly@20
; Line 199
	mov	esi, DWORD PTR _dword_634480
	mov	edi, 320				; 00000140H
	jmp	SHORT $L85279
$L85053:
; Line 200
	mov	edx, edi
	mov	ecx, esi
	call	@gmenu_draw_menu_item@8
; Line 201
	add	esi, 12					; 0000000cH
	add	edi, 45					; 0000002dH
$L85279:
; Line 199
	cmp	DWORD PTR [esi+8], 0
	jne	SHORT $L85053
; Line 203
	call	DWORD PTR __imp__GetTickCount@0
; Line 204
	mov	ecx, eax
	pop	edi
	sub	ecx, DWORD PTR _dword_634474
	pop	esi
	cmp	ecx, 25					; 00000019H
	jle	SHORT $L85057
; Line 205
	inc	BYTE PTR _byte_634478
	cmp	BYTE PTR _byte_634478, 9
	jne	SHORT $L85058
; Line 206
	mov	BYTE PTR _byte_634478, 1
$L85058:
; Line 207
	mov	DWORD PTR _dword_634474, eax
$L85057:
; Line 210
	ret	0
_gmenu_draw ENDP
_TEXT	ENDS
PUBLIC	@gmenu_clear_buffer@16
PUBLIC	@gmenu_get_lfont@4
; Function compile flags: /Ogsy
;	COMDAT @gmenu_draw_menu_item@8
_TEXT	SEGMENT
_v4$ = -8
_v6$ = -12
_v8$ = -4
_v12$ = -4
@gmenu_draw_menu_item@8 PROC NEAR			; COMDAT
; _pItem$ = ecx
; _a2$ = edx
; Line 215
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
; Line 232
	call	@gmenu_get_lfont@4
; Line 235
	test	BYTE PTR [esi+3], 64			; 00000040H
	mov	ebx, eax
	mov	DWORD PTR _v4$[ebp], ebx
	je	SHORT $L85077
; Line 236
	shr	ebx, 1
; Line 237
	push	287					; 0000011fH
	push	1
	push	DWORD PTR _optbar_cel
	lea	ecx, DWORD PTR [ebx+80]
	lea	edx, DWORD PTR [edi-10]
	mov	DWORD PTR _v6$[ebp], ecx
	call	@CelDecodeOnly@20
; Line 238
	mov	eax, DWORD PTR [esi]
	mov	edx, 4095				; 00000fffH
	mov	ecx, eax
	shr	ecx, 12					; 0000000cH
	and	ecx, edx
; Line 239
	cmp	ecx, 2
	jae	SHORT $L85078
; Line 240
	push	2
	pop	ecx
$L85078:
; Line 241
	and	eax, edx
	xor	edx, edx
	shl	eax, 8
	div	ecx
; Line 244
	push	28					; 0000001cH
	lea	edx, DWORD PTR [edi-12]
	lea	ecx, DWORD PTR [ebx+82]
	mov	DWORD PTR _v8$[ebp], eax
	add	eax, 13					; 0000000dH
	push	eax
	call	@gmenu_clear_buffer@16
; Line 245
	mov	eax, DWORD PTR _v8$[ebp]
	mov	ecx, DWORD PTR _v6$[ebp]
	push	27					; 0000001bH
	push	1
	push	DWORD PTR _option_cel
	lea	ecx, DWORD PTR [eax+ecx+2]
	lea	edx, DWORD PTR [edi-12]
	call	@CelDecodeOnly@20
$L85077:
; Line 248
	mov	eax, DWORD PTR _v4$[ebp]
	mov	ebx, 384				; 00000180H
	shr	eax, 1
	sub	ebx, eax
; Line 249
	mov	eax, DWORD PTR [esi]
	shr	eax, 31					; 0000001fH
	neg	eax
	mov	DWORD PTR _v12$[ebp], eax
; Line 252
	mov	edx, edi
	and	BYTE PTR _v12$[ebp], 241		; 000000f1H
	mov	ecx, ebx
	mov	eax, DWORD PTR _v12$[ebp]
	add	eax, 15					; 0000000fH
	mov	DWORD PTR _light_table_index, eax
	push	DWORD PTR [esi+4]
	call	@gmenu_print_text@12
; Line 253
	cmp	esi, DWORD PTR _sgpCurrItem
	jne	SHORT $L85080
; Line 255
	movzx	eax, BYTE PTR _byte_634478
	push	48					; 00000030H
	push	eax
	push	DWORD PTR _PentSpin_cel
	inc	edi
	lea	ecx, DWORD PTR [ebx-54]
	mov	edx, edi
	call	@CelDecodeOnly@20
; Line 256
	movzx	eax, BYTE PTR _byte_634478
	push	48					; 00000030H
	push	eax
	mov	eax, DWORD PTR _v4$[ebp]
	push	DWORD PTR _PentSpin_cel
	mov	edx, edi
	lea	ecx, DWORD PTR [ebx+eax+4]
	call	@CelDecodeOnly@20
$L85080:
	pop	edi
	pop	esi
	pop	ebx
; Line 258
	leave
	ret	0
@gmenu_draw_menu_item@8 ENDP
_TEXT	ENDS
EXTRN	_gpBuffer:DWORD
EXTRN	_screen_y_times_768:BYTE
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT @gmenu_clear_buffer@16
_TEXT	SEGMENT
_width$ = 8
_height$ = 12
@gmenu_clear_buffer@16 PROC NEAR			; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 263
	push	esi
; Line 268
	mov	esi, DWORD PTR _screen_y_times_768[edx*4]
	add	esi, DWORD PTR _gpBuffer
	push	edi
	mov	edi, DWORD PTR _height$[esp+4]
	add	esi, ecx
	test	edi, edi
	je	SHORT $L85097
$L85095:
; Line 269
	push	DWORD PTR _width$[esp+4]
	push	205					; 000000cdH
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 270
	sub	esi, 768				; 00000300H
	dec	edi
	jne	SHORT $L85095
$L85097:
	pop	edi
	pop	esi
; Line 272
	ret	8
@gmenu_clear_buffer@16 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @gmenu_get_lfont@4
_TEXT	SEGMENT
@gmenu_get_lfont@4 PROC NEAR				; COMDAT
; _pItem$ = ecx
; Line 280
	test	BYTE PTR [ecx+3], 64			; 00000040H
	je	SHORT $L85104
; Line 281
	mov	eax, 490				; 000001eaH
; Line 290
	ret	0
$L85104:
; Line 282
	mov	eax, DWORD PTR [ecx+4]
; Line 283
	xor	edx, edx
; Line 284
	jmp	SHORT $L85295
$L85105:
; Line 283
	movzx	ecx, cl
; Line 287
	inc	eax
	movzx	ecx, BYTE PTR _fontidx[ecx]
	movzx	ecx, BYTE PTR _lfontframe[ecx]
	movzx	ecx, BYTE PTR _lfontkern[ecx]
	lea	edx, DWORD PTR [edx+ecx+2]
$L85295:
	mov	cl, BYTE PTR [eax]
	test	cl, cl
	jne	SHORT $L85105
; Line 289
	lea	eax, DWORD PTR [edx-2]
; Line 290
	ret	0
@gmenu_get_lfont@4 ENDP
_TEXT	ENDS
PUBLIC	@gmenu_presskeys@4
PUBLIC	@gmenu_left_right@4
; Function compile flags: /Ogsy
;	COMDAT @gmenu_presskeys@4
_TEXT	SEGMENT
@gmenu_presskeys@4 PROC NEAR				; COMDAT
; _a1$ = ecx
; Line 294
	cmp	DWORD PTR _dword_634480, 0
	mov	eax, ecx
; Line 295
	je	SHORT $L85122
; Line 296
	sub	eax, 13					; 0000000dH
	je	SHORT $L85117
	sub	eax, 14					; 0000000eH
	je	SHORT $L85121
	sub	eax, 5
	je	SHORT $L85122
	sub	eax, 5
	je	SHORT $L85123
	dec	eax
	je	SHORT $L85125
	dec	eax
	je	SHORT $L85124
	dec	eax
	jne	SHORT $L85118
; Line 319
	xor	ecx, ecx
	inc	ecx
$L85299:
	call	@gmenu_up_down@4
; Line 320
	jmp	SHORT $L85118
$L85124:
; Line 313
	xor	ecx, ecx
	inc	ecx
$L85300:
	call	@gmenu_left_right@4
; Line 314
	jmp	SHORT $L85118
$L85125:
; Line 316
	xor	ecx, ecx
; Line 317
	jmp	SHORT $L85299
$L85123:
; Line 310
	xor	ecx, ecx
; Line 311
	jmp	SHORT $L85300
$L85122:
; Line 308
	xor	eax, eax
; Line 323
	ret	0
$L85121:
; Line 304
	push	69					; 00000045H
	pop	ecx
	call	@PlaySFX@4
; Line 305
	xor	edx, edx
	xor	ecx, ecx
	call	@gmenu_call_proc@8
; Line 306
	jmp	SHORT $L85118
$L85117:
; Line 298
	mov	eax, DWORD PTR _sgpCurrItem
	test	BYTE PTR [eax+3], -128			; ffffff80H
	je	SHORT $L85118
; Line 299
	push	69					; 00000045H
	pop	ecx
	call	@PlaySFX@4
; Line 300
	mov	eax, DWORD PTR _sgpCurrItem
	xor	ecx, ecx
	inc	ecx
	call	DWORD PTR [eax+8]
$L85118:
; Line 322
	xor	eax, eax
	inc	eax
; Line 323
	ret	0
@gmenu_presskeys@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @gmenu_left_right@4
_TEXT	SEGMENT
_v1$ = -4
@gmenu_left_right@4 PROC NEAR				; COMDAT
; _a1$ = ecx
; Line 326
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 331
	mov	eax, DWORD PTR _sgpCurrItem
	push	esi
	push	edi
	mov	esi, DWORD PTR [eax]
	mov	edi, esi
; Line 332
	test	esi, 1073741824				; 40000000H
	mov	DWORD PTR _v1$[ebp], edi
	je	SHORT $L85133
; Line 333
	mov	edx, 4095				; 00000fffH
	and	esi, edx
; Line 334
	test	ecx, ecx
	je	SHORT $L85134
; Line 335
	sar	edi, 12					; 0000000cH
	and	edi, edx
	cmp	esi, edi
	je	SHORT $L85133
; Line 337
	lea	ecx, DWORD PTR [esi+1]
; Line 338
	jmp	SHORT $L85136
$L85134:
; Line 339
	test	esi, esi
	je	SHORT $L85133
; Line 341
	lea	ecx, DWORD PTR [esi-1]
$L85136:
; Line 343
	and	WORD PTR _v1$[ebp], 61440		; 0000f000H
; Line 344
	mov	edx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [eax], edx
; Line 345
	mov	eax, DWORD PTR _sgpCurrItem
	or	DWORD PTR [eax], ecx
; Line 346
	mov	eax, DWORD PTR _sgpCurrItem
	xor	ecx, ecx
	call	DWORD PTR [eax+8]
$L85133:
	pop	edi
	pop	esi
; Line 348
	leave
	ret	0
@gmenu_left_right@4 ENDP
_TEXT	ENDS
PUBLIC	@gmenu_on_mouse_move@4
PUBLIC	@gmenu_valid_mouse_pos@4
; Function compile flags: /Ogsy
;	COMDAT @gmenu_on_mouse_move@4
_TEXT	SEGMENT
_a1$ = -4
@gmenu_on_mouse_move@4 PROC NEAR			; COMDAT
; _lParam$ = ecx
; Line 351
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 356
	cmp	BYTE PTR _byte_634464, 0
	mov	DWORD PTR _a1$[ebp], ecx
	jne	SHORT $L85146
; Line 357
	xor	eax, eax
; Line 365
	leave
	ret	0
$L85146:
; Line 358
	lea	ecx, DWORD PTR _a1$[ebp]
	call	@gmenu_valid_mouse_pos@4
; Line 359
	mov	ecx, DWORD PTR _sgpCurrItem
	mov	eax, DWORD PTR [ecx]
	shr	eax, 12					; 0000000cH
	mov	edx, eax
; Line 360
	and	eax, 4095				; 00000fffH
	imul	eax, DWORD PTR _a1$[ebp]
	imul	edx, DWORD PTR _a1$[ebp]
	shr	eax, 8
	mov	DWORD PTR _a1$[ebp], eax
; Line 361
	and	WORD PTR [ecx], 61440			; 0000f000H
; Line 362
	mov	eax, DWORD PTR _sgpCurrItem
	mov	ecx, DWORD PTR _a1$[ebp]
	and	edx, 255				; 000000ffH
	or	DWORD PTR [eax], ecx
; Line 363
	mov	eax, DWORD PTR _sgpCurrItem
	xor	ecx, ecx
	call	DWORD PTR [eax+8]
; Line 364
	xor	eax, eax
	inc	eax
; Line 365
	leave
	ret	0
@gmenu_on_mouse_move@4 ENDP
_TEXT	ENDS
EXTRN	_MouseX:DWORD
; Function compile flags: /Ogsy
;	COMDAT @gmenu_valid_mouse_pos@4
_TEXT	SEGMENT
@gmenu_valid_mouse_pos@4 PROC NEAR			; COMDAT
; _plOffset$ = ecx
; Line 371
	mov	edx, 282				; 0000011aH
	mov	DWORD PTR [ecx], edx
; Line 372
	mov	eax, DWORD PTR _MouseX
	cmp	eax, edx
	jge	SHORT $L85154
; Line 373
	and	DWORD PTR [ecx], 0
; Line 374
	jmp	SHORT $L85308
$L85154:
; Line 376
	cmp	eax, 538				; 0000021aH
	jle	SHORT $L85155
; Line 377
	mov	DWORD PTR [ecx], 256			; 00000100H
$L85308:
; Line 378
	xor	al, al
; Line 382
	ret	0
$L85155:
; Line 380
	add	eax, -282				; fffffee6H
	mov	DWORD PTR [ecx], eax
; Line 381
	mov	al, 1
; Line 382
	ret	0
@gmenu_valid_mouse_pos@4 ENDP
_TEXT	ENDS
PUBLIC	@gmenu_left_mouse@4
EXTRN	_MouseY:DWORD
; Function compile flags: /Ogsy
;	COMDAT @gmenu_left_mouse@4
_TEXT	SEGMENT
_a1a$ = -4
@gmenu_left_mouse@4 PROC NEAR				; COMDAT
; _a1$ = ecx
; Line 385
	push	ecx
	push	esi
	push	edi
	mov	edi, ecx
; Line 394
	test	edi, edi
	je	$L85165
; Line 395
	mov	ecx, DWORD PTR _dword_634480
	test	ecx, ecx
	je	$L85167
	mov	eax, DWORD PTR _MouseY
	cmp	eax, 352				; 00000160H
	jge	$L85167
; Line 397
	add	eax, -117				; ffffff8bH
	test	eax, eax
	jl	$L85177
; Line 398
	push	45					; 0000002dH
	cdq
	pop	esi
	idiv	esi
; Line 399
	cmp	eax, DWORD PTR _dword_63448C
	jae	SHORT $L85177
; Line 401
	lea	eax, DWORD PTR [eax+eax*2]
	lea	esi, DWORD PTR [ecx+eax*4]
; Line 402
	test	BYTE PTR [esi+3], -128			; ffffff80H
	je	SHORT $L85177
; Line 403
	mov	ecx, esi
	call	@gmenu_get_lfont@4
; Line 404
	mov	ecx, DWORD PTR _MouseX
	mov	edx, 320				; 00000140H
	shr	eax, 1
	sub	edx, eax
	cmp	ecx, edx
	jb	SHORT $L85177
	add	eax, 320				; 00000140H
	cmp	ecx, eax
	ja	SHORT $L85177
; Line 406
	push	69					; 00000045H
	mov	DWORD PTR _sgpCurrItem, esi
	pop	ecx
	call	@PlaySFX@4
; Line 407
	test	BYTE PTR [esi+3], 64			; 00000040H
	je	SHORT $L85173
; Line 408
	lea	ecx, DWORD PTR _a1a$[esp+12]
	call	@gmenu_valid_mouse_pos@4
; Line 409
	mov	ecx, edi
	mov	BYTE PTR _byte_634464, al
	call	@gmenu_on_mouse_move@4
; Line 410
	jmp	SHORT $L85177
$L85173:
; Line 411
	mov	eax, DWORD PTR _sgpCurrItem
	xor	ecx, ecx
	inc	ecx
	call	DWORD PTR [eax+8]
; Line 417
	jmp	SHORT $L85177
$L85165:
; Line 419
	cmp	BYTE PTR _byte_634464, 0
	jne	SHORT $L85178
$L85167:
; Line 420
	xor	eax, eax
	jmp	SHORT $L85158
$L85178:
; Line 421
	and	BYTE PTR _byte_634464, 0
$L85177:
; Line 423
	xor	eax, eax
	inc	eax
$L85158:
	pop	edi
	pop	esi
; Line 424
	pop	ecx
	ret	0
@gmenu_left_mouse@4 ENDP
_TEXT	ENDS
PUBLIC	@gmenu_enable@8
; Function compile flags: /Ogsy
;	COMDAT @gmenu_enable@8
_TEXT	SEGMENT
@gmenu_enable@8 PROC NEAR				; COMDAT
; _pMenuItem$ = ecx
; _enable$ = edx
; Line 430
	test	edx, edx
	je	SHORT $L85184
; Line 431
	or	BYTE PTR [ecx+3], -128			; ffffff80H
; Line 434
	ret	0
$L85184:
; Line 433
	and	DWORD PTR [ecx], 2130706432		; 7f000000H
; Line 434
	ret	0
@gmenu_enable@8 ENDP
_TEXT	ENDS
PUBLIC	@gmenu_slider_1@16
; Function compile flags: /Ogsy
;	COMDAT @gmenu_slider_1@16
_TEXT	SEGMENT
_max$ = 8
_gamma$ = 12
_v4$ = -4
@gmenu_slider_1@16 PROC NEAR				; COMDAT
; _pItem$ = ecx
; _min$ = edx
; Line 437
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 441
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _v4$[ebp], eax
; Line 442
	shr	eax, 12					; 0000000cH
	and	eax, 4095				; 00000fffH
; Line 443
	cmp	eax, 2
	jge	SHORT $L85197
; Line 444
	push	2
	pop	eax
$L85197:
	push	esi
; Line 446
	mov	esi, DWORD PTR _max$[ebp]
	push	edi
	mov	edi, DWORD PTR _gamma$[ebp]
	sub	edi, edx
	sub	esi, edx
	imul	edi, eax
	lea	eax, DWORD PTR [esi-1]
	and	WORD PTR _v4$[ebp], 61440		; 0000f000H
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, edi
	pop	edi
	cdq
	idiv	esi
	pop	esi
	or	eax, DWORD PTR _v4$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 447
	leave
	ret	8
@gmenu_slider_1@16 ENDP
_TEXT	ENDS
PUBLIC	@gmenu_slider_get@12
; Function compile flags: /Ogsy
;	COMDAT @gmenu_slider_get@12
_TEXT	SEGMENT
_max$ = 8
@gmenu_slider_get@12 PROC NEAR				; COMDAT
; _pItem$ = ecx
; _min$ = edx
; Line 454
	mov	eax, DWORD PTR [ecx]
	push	esi
	mov	ecx, eax
	mov	esi, edx
	shr	ecx, 12					; 0000000cH
	mov	edx, 4095				; 00000fffH
	push	edi
	and	ecx, edx
; Line 455
	and	eax, edx
; Line 456
	cmp	ecx, 2
	jge	SHORT $L85208
; Line 457
	push	2
	pop	ecx
$L85208:
; Line 458
	mov	edi, DWORD PTR _max$[esp+4]
	sub	edi, esi
	imul	edi, eax
	lea	eax, DWORD PTR [ecx-1]
	cdq
	sub	eax, edx
	xor	edx, edx
	sar	eax, 1
	add	eax, edi
	pop	edi
	div	ecx
	add	eax, esi
	pop	esi
; Line 459
	ret	4
@gmenu_slider_get@12 ENDP
_TEXT	ENDS
PUBLIC	@gmenu_slider_3@8
; Function compile flags: /Ogsy
;	COMDAT @gmenu_slider_3@8
_TEXT	SEGMENT
@gmenu_slider_3@8 PROC NEAR				; COMDAT
; _pItem$ = ecx
; _dwTicks$ = edx
; Line 463
	mov	eax, DWORD PTR [ecx]
	shl	edx, 12					; 0000000cH
	xor	edx, eax
	and	edx, 16773120				; 00fff000H
	xor	edx, eax
	mov	DWORD PTR [ecx], edx
; Line 464
	ret	0
@gmenu_slider_3@8 ENDP
_TEXT	ENDS
END
