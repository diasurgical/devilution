; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/control.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_03LPLJ@?8c?8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03PIEF@?8q?8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03CHMJ@Tab?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LJNO@Esc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03CHLI@?8i?8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03KJBD@?8b?8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LEJJ@Enter?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@EFMA@Character?5Information?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@LPOB@Quests?5log?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BFIO@Automap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09NIAC@Main?5Menu?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09FIEK@Inventory?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DFIB@Spell?5book?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CMOL@Send?5Message?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@FAGI@Player?5Attack?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DAAM@?$CFs?5Spell?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OBOO@Damages?5undead?5only?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@EMPL@Spell?5Level?5?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@FKGC@Spell?5Level?50?5?9?5Unusable?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@OHJB@Scroll?5of?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08ONPP@1?5Scroll?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FEEO@?$CFi?5Scrolls?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@ELHC@Staff?5of?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08LHHI@1?5Charge?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@EGBE@?$CFi?5Charges?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PIKE@?$CFs?5Skill?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@DMPO@Spell?5Hot?5Key?5?$CDF?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OPIC@CtrlPan?2SmalText?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CJCK@Data?2Char?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NBJK@CtrlPan?2SpelIcon?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@BGAG@CtrlPan?2Panel8?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@ECMM@CtrlPan?2P8Bulbs?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CPCG@CtrlPan?2TalkPanl?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@ELKD@CtrlPan?2P8But2?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@LBKC@CtrlPan?2TalkButt?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@LANN@CtrlPan?2Panel8bu?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@EEDG@Data?2CharBut?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@HOOH@Items?2DurIcons?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@DACB@Data?2SpellBk?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@OAJB@Data?2SpellBkB?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@IJMO@Data?2SpellI2?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@BMEF@Data?2Quest?4CEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NPBO@CtrlPan?2Golddrop?4cel?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@DDBG@Player?5friendly?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@OEGM@Player?5attack?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@PDPG@Hotkey?5?3?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@KDOG@Select?5current?5spell?5button?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@EMNL@Hotkey?5?3?5?8s?8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BAHA@Level?5?3?5?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@LJG@Hit?5Points?5?$CFi?5of?5?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OGEE@Requirements?5not?5met?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MHIA@Warrior?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LCAJ@Rogue?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08HHBF@Sorceror?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02JAFN@?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03MBJP@?$CFli?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04COF@None?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NEPN@?$CFi?$CF?$CF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05INGO@?$CFi?9?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03OLFE@MAX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08IOGD@Level?5Up?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@BBBG@Staff?5?$CI?$CFi?5charges?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OLFF@Mana?3?5?$CFi?5?5?5Dam?3?5n?1a?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@DMNL@Mana?3?5?$CFi?5?5Dam?3?5?$CFi?5?9?5?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@BBBC@Mana?3?5?$CFi?5?5Dam?3?51?13?5tgt?5hp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MMNO@Skill?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JAHO@piece?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MHHJ@pieces?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KGFD@You?5have?5?$CFu?5gold?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OKKB@?$CFs?4?5?5How?5many?5do?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OKDG@you?5want?5to?5remove?$DP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MHMJ@?$CFu?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _qmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ___ROR2__
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawSpellCel@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetSpellTrans@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawSpell
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawSpellList
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SetSpell
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetSpeedSpell@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ToggleSpell@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CPrintString@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @AddPanelString@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ClearPanel
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawPanelBox@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @SetFlaskHeight@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawFlask@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawLifeFlask
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _UpdateLifeFlask
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawManaFlask
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _control_update_life_mana
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _UpdateManaFlask
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitControlPan
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ClearCtrlPan
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawCtrlPan
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DoSpeedBook
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DoPanBtn
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_set_button_down@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _control_check_btn_press
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DoAutoMap
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckPanelInfo
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckBtnUp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FreeControlPan
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_WriteStringToBuffer@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawInfoBox
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_print_info_str@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PrintGameStr@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawChr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ADD_PlrStringXY@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @MY_PlrStringXY@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckLvlBtn
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ReleaseLvlBtn
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawLevelUpIcon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckChrBtns
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ReleaseChrBtns
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawDurIcon
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawDurIcon4Item@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RedBack
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @GetSBookTrans@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawSpellBook
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @PrintSBookStr@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckSBook
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @get_pieces_str@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @DrawGoldSplit@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_drop_gold@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_remove_gold@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_set_gold_curs@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DrawTalkPan
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_print_talk_msg@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _control_check_talk_btn
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _control_release_talk_btn
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _control_reset_talk_msg
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _control_type_message
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _control_reset_talk
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_talk_last_key@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_presskeys@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _control_press_enter
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @control_up_down@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_fontframe
PUBLIC	_fontkern
PUBLIC	_lineoffset
PUBLIC	_fontidx
PUBLIC	_SpellITbl
PUBLIC	_PanBtnPos
PUBLIC	_PanBtnHotKey
PUBLIC	_PanBtnStr
PUBLIC	_attribute_inc_rects
PUBLIC	_SpellPages
PUBLIC	??_C@_03LPLJ@?8c?8?$AA@				; `string'
PUBLIC	??_C@_03PIEF@?8q?8?$AA@				; `string'
PUBLIC	??_C@_03CHMJ@Tab?$AA@				; `string'
PUBLIC	??_C@_03LJNO@Esc?$AA@				; `string'
PUBLIC	??_C@_03CHLI@?8i?8?$AA@				; `string'
PUBLIC	??_C@_03KJBD@?8b?8?$AA@				; `string'
PUBLIC	??_C@_05LEJJ@Enter?$AA@				; `string'
PUBLIC	??_C@_0BG@EFMA@Character?5Information?$AA@	; `string'
PUBLIC	??_C@_0L@LPOB@Quests?5log?$AA@			; `string'
PUBLIC	??_C@_07BFIO@Automap?$AA@			; `string'
PUBLIC	??_C@_09NIAC@Main?5Menu?$AA@			; `string'
PUBLIC	??_C@_09FIEK@Inventory?$AA@			; `string'
PUBLIC	??_C@_0L@DFIB@Spell?5book?$AA@			; `string'
PUBLIC	??_C@_0N@CMOL@Send?5Message?$AA@		; `string'
PUBLIC	??_C@_0O@FAGI@Player?5Attack?$AA@		; `string'
_DATA	SEGMENT
COMM	_sgbNextTalkSave:BYTE
COMM	_sgbTalkSavePos:BYTE
COMM	_sgszTalkSave:BYTE:0280H
COMM	_sgszTalkMsg:BYTE:050H
COMM	_sgbPlrTalkTbl:DWORD
COMM	_splTrans:BYTE:0100H
COMM	_pDurIcons:DWORD
COMM	_pChrButtons:DWORD
COMM	_drawhpflag:DWORD
COMM	_dropGoldFlag:DWORD
COMM	_panbtn:DWORD:08H
COMM	_chrbtn:DWORD:04H
COMM	_pMultiBtns:DWORD
COMM	_pPanelButtons:DWORD
COMM	_pChrPanel:DWORD
COMM	_lvlbtndown:DWORD
COMM	_dropGoldValue:DWORD
COMM	_drawmanaflag:DWORD
COMM	_chrbtnactive:DWORD
COMM	_pPanelText:DWORD
COMM	_frame_4B8800:DWORD
COMM	_pLifeBuff:DWORD
COMM	_pBtmBuff:DWORD
COMM	_pTalkBtns:DWORD
COMM	_pstrjust:DWORD:04H
COMM	_pnumlines:DWORD
COMM	_pinfoflag:DWORD
COMM	_talkbtndown:DWORD:03H
COMM	_pSpell:DWORD
COMM	_pManaBuff:DWORD
COMM	_infoclr:DWORD
COMM	_pGBoxBuff:DWORD
COMM	_pSBkBtnCel:DWORD
COMM	_tempstr:BYTE:0100H
COMM	_byte_4B894C:BYTE:04H
COMM	_sbooktab:DWORD
COMM	_pSplType:DWORD
COMM	_frame:DWORD
COMM	_initialDropGoldIndex:DWORD
COMM	_talkflag:DWORD
COMM	_pSBkIconCels:DWORD
COMM	_sbookflag:DWORD
COMM	_chrflag:DWORD
COMM	_drawbtnflag:DWORD
COMM	_pSpellBkCel:DWORD
COMM	_infostr:BYTE:0104H
COMM	_numpanbtns:DWORD
COMM	_pStatusPanel:DWORD
COMM	_panelstr:BYTE:0100H
COMM	_panelflag:DWORD
COMM	_initialDropGoldValue:DWORD
COMM	_pSpellCels:DWORD
COMM	_panbtndown:DWORD
COMM	_pTalkPanel:DWORD
COMM	_spselflag:DWORD
_DATA	ENDS
CONST	SEGMENT
_fontframe DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	036H
	DB	02cH
	DB	039H
	DB	03aH
	DB	038H
	DB	037H
	DB	02fH
	DB	028H
	DB	029H
	DB	03bH
	DB	027H
	DB	032H
	DB	025H
	DB	033H
	DB	034H
	DB	024H
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	030H
	DB	031H
	DB	03cH
	DB	026H
	DB	03dH
	DB	035H
	DB	03eH
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	02aH
	DB	03fH
	DB	02bH
	DB	040H
	DB	041H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	028H
	DB	042H
	DB	029H
	DB	043H
	ORG $+1
_fontkern DB	08H
	DB	0aH
	DB	07H
	DB	09H
	DB	08H
	DB	07H
	DB	06H
	DB	08H
	DB	08H
	DB	03H
	DB	03H
	DB	08H
	DB	06H
	DB	0bH
	DB	09H
	DB	0aH
	DB	06H
	DB	09H
	DB	09H
	DB	06H
	DB	09H
	DB	0bH
	DB	0aH
	DB	0dH
	DB	0aH
	DB	0bH
	DB	07H
	DB	05H
	DB	07H
	DB	07H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	0aH
	DB	04H
	DB	05H
	DB	06H
	DB	03H
	DB	03H
	DB	04H
	DB	03H
	DB	06H
	DB	06H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	07H
	DB	06H
	DB	03H
	DB	0aH
	DB	0aH
	DB	06H
	DB	06H
	DB	07H
	DB	04H
	DB	04H
	DB	09H
	DB	06H
	DB	06H
	DB	0cH
	DB	03H
	DB	07H
	ORG $+4
_lineoffset DD	06f6f1H
	DD	06000H
	DD	06000H
	DD	06000H
	DD	060b4H
	DD	06d2f1H
	DD	071af1H
	DD	06000H
	DD	06000H
	DD	06000H
	DD	06c0f1H
	DD	06f6f1H
	DD	072cf1H
	DD	06000H
	DD	06000H
	DD	06b4f1H
	DD	06e1f1H
	DD	070bf1H
	DD	0738f1H
	DD	06000H
	DD	06aef1H
	DD	06d2f1H
	DD	06f6f1H
	DD	071af1H
	DD	073bf1H
	ORG $+4
_fontidx DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	01H
	DB	043H
	DB	075H
	DB	065H
	DB	061H
	DB	061H
	DB	061H
	DB	061H
	DB	063H
	DB	065H
	DB	065H
	DB	065H
	DB	069H
	DB	069H
	DB	069H
	DB	041H
	DB	041H
	DB	045H
	DB	061H
	DB	041H
	DB	06fH
	DB	06fH
	DB	06fH
	DB	075H
	DB	075H
	DB	079H
	DB	04fH
	DB	055H
	DB	063H
	DB	04cH
	DB	059H
	DB	050H
	DB	066H
	DB	061H
	DB	069H
	DB	06fH
	DB	075H
	DB	06eH
	DB	04eH
	DB	061H
	DB	06fH
	DB	03fH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	021H
	DB	03cH
	DB	03eH
	DB	06fH
	DB	02bH
	DB	032H
	DB	033H
	DB	027H
	DB	075H
	DB	050H
	DB	02eH
	DB	02cH
	DB	031H
	DB	030H
	DB	03eH
	DB	01H
	DB	01H
	DB	01H
	DB	03fH
	DB	041H
	DB	041H
	DB	041H
	DB	041H
	DB	041H
	DB	041H
	DB	041H
	DB	043H
	DB	045H
	DB	045H
	DB	045H
	DB	045H
	DB	049H
	DB	049H
	DB	049H
	DB	049H
	DB	044H
	DB	04eH
	DB	04fH
	DB	04fH
	DB	04fH
	DB	04fH
	DB	04fH
	DB	058H
	DB	030H
	DB	055H
	DB	055H
	DB	055H
	DB	055H
	DB	059H
	DB	062H
	DB	042H
	DB	061H
	DB	061H
	DB	061H
	DB	061H
	DB	061H
	DB	061H
	DB	061H
	DB	063H
	DB	065H
	DB	065H
	DB	065H
	DB	065H
	DB	069H
	DB	069H
	DB	069H
	DB	069H
	DB	06fH
	DB	06eH
	DB	06fH
	DB	06fH
	DB	06fH
	DB	06fH
	DB	06fH
	DB	02fH
	DB	030H
	DB	075H
	DB	075H
	DB	075H
	DB	075H
	DB	079H
	DB	062H
	DB	079H
CONST	ENDS
_DATA	SEGMENT
_SpellITbl DB	01H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	01cH
	DB	0dH
	DB	0cH
	DB	012H
	DB	010H
	DB	0eH
	DB	012H
	DB	013H
	DB	0bH
	DB	014H
	DB	0fH
	DB	015H
	DB	017H
	DB	018H
	DB	019H
	DB	016H
	DB	01aH
	DB	01dH
	DB	025H
	DB	026H
	DB	027H
	DB	02aH
	DB	029H
	DB	028H
	DB	0aH
	DB	024H
	DB	01eH
	ORG $+3
_PanBtnPos DD	09H
	DD	0169H
	DD	047H
	DD	013H
	DD	01H
	DD	09H
	DD	0183H
	DD	047H
	DD	013H
	DD	00H
	DD	09H
	DD	01abH
	DD	047H
	DD	013H
	DD	01H
	DD	09H
	DD	01c5H
	DD	047H
	DD	013H
	DD	00H
	DD	0230H
	DD	0169H
	DD	047H
	DD	013H
	DD	01H
	DD	0230H
	DD	0183H
	DD	047H
	DD	013H
	DD	00H
	DD	057H
	DD	01bbH
	DD	021H
	DD	020H
	DD	01H
	DD	020fH
	DD	01bbH
	DD	021H
	DD	020H
	DD	01H
_DATA	ENDS
;	COMDAT ??_C@_03LPLJ@?8c?8?$AA@
_DATA	SEGMENT
??_C@_03LPLJ@?8c?8?$AA@ DB '''c''', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03PIEF@?8q?8?$AA@
_DATA	SEGMENT
??_C@_03PIEF@?8q?8?$AA@ DB '''q''', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03CHMJ@Tab?$AA@
_DATA	SEGMENT
??_C@_03CHMJ@Tab?$AA@ DB 'Tab', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03LJNO@Esc?$AA@
_DATA	SEGMENT
??_C@_03LJNO@Esc?$AA@ DB 'Esc', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03CHLI@?8i?8?$AA@
_DATA	SEGMENT
??_C@_03CHLI@?8i?8?$AA@ DB '''i''', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03KJBD@?8b?8?$AA@
_DATA	SEGMENT
??_C@_03KJBD@?8b?8?$AA@ DB '''b''', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LEJJ@Enter?$AA@
_DATA	SEGMENT
??_C@_05LEJJ@Enter?$AA@ DB 'Enter', 00H			; `string'
_DATA	ENDS
_DATA	SEGMENT
_PanBtnHotKey DD FLAT:??_C@_03LPLJ@?8c?8?$AA@
	DD	FLAT:??_C@_03PIEF@?8q?8?$AA@
	DD	FLAT:??_C@_03CHMJ@Tab?$AA@
	DD	FLAT:??_C@_03LJNO@Esc?$AA@
	DD	FLAT:??_C@_03CHLI@?8i?8?$AA@
	DD	FLAT:??_C@_03KJBD@?8b?8?$AA@
	DD	FLAT:??_C@_05LEJJ@Enter?$AA@
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_0BG@EFMA@Character?5Information?$AA@
_DATA	SEGMENT
??_C@_0BG@EFMA@Character?5Information?$AA@ DB 'Character Information', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@LPOB@Quests?5log?$AA@
_DATA	SEGMENT
??_C@_0L@LPOB@Quests?5log?$AA@ DB 'Quests log', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07BFIO@Automap?$AA@
_DATA	SEGMENT
??_C@_07BFIO@Automap?$AA@ DB 'Automap', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09NIAC@Main?5Menu?$AA@
_DATA	SEGMENT
??_C@_09NIAC@Main?5Menu?$AA@ DB 'Main Menu', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09FIEK@Inventory?$AA@
_DATA	SEGMENT
??_C@_09FIEK@Inventory?$AA@ DB 'Inventory', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DFIB@Spell?5book?$AA@
_DATA	SEGMENT
??_C@_0L@DFIB@Spell?5book?$AA@ DB 'Spell book', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CMOL@Send?5Message?$AA@
_DATA	SEGMENT
??_C@_0N@CMOL@Send?5Message?$AA@ DB 'Send Message', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@FAGI@Player?5Attack?$AA@
_DATA	SEGMENT
??_C@_0O@FAGI@Player?5Attack?$AA@ DB 'Player Attack', 00H ; `string'
_DATA	ENDS
_DATA	SEGMENT
_PanBtnStr DD	FLAT:??_C@_0BG@EFMA@Character?5Information?$AA@
	DD	FLAT:??_C@_0L@LPOB@Quests?5log?$AA@
	DD	FLAT:??_C@_07BFIO@Automap?$AA@
	DD	FLAT:??_C@_09NIAC@Main?5Menu?$AA@
	DD	FLAT:??_C@_09FIEK@Inventory?$AA@
	DD	FLAT:??_C@_0L@DFIB@Spell?5book?$AA@
	DD	FLAT:??_C@_0N@CMOL@Send?5Message?$AA@
	DD	FLAT:??_C@_0O@FAGI@Player?5Attack?$AA@
_attribute_inc_rects DD 089H
	DD	08aH
	DD	029H
	DD	016H
	DD	089H
	DD	0a6H
	DD	029H
	DD	016H
	DD	089H
	DD	0c3H
	DD	029H
	DD	016H
	DD	089H
	DD	0dfH
	DD	029H
	DD	016H
_SpellPages DD	00H
	DD	01H
	DD	01eH
	DD	01fH
	DD	02H
	DD	022H
	DD	014H
	DD	020H
	DD	06H
	DD	021H
	DD	03H
	DD	07H
	DD	04H
	DD	08H
	DD	0aH
	DD	0bH
	DD	01dH
	DD	0cH
	DD	0fH
	DD	0eH
	DD	0dH
	DD	012H
	DD	015H
	DD	017H
	DD	018H
	DD	024H
	DD	023H
	DD	019H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
_DATA	ENDS
PUBLIC	@DrawSpellCel@20
EXTRN	_gpBuffer:DWORD
EXTRN	_screen_y_times_768:BYTE
EXTRN	__rotr:NEAR
; Function compile flags: /Ogsy
;	COMDAT @DrawSpellCel@20
_TEXT	SEGMENT
_Trans$ = 8
_nCel$ = 12
_w$ = 16
_v9$ = 12
_v10$ = 8
_v15$ = 8
_v18$ = -4
@DrawSpellCel@20 PROC NEAR				; COMDAT
; _xp$ = ecx
; _yp$ = edx
; File Source/control.cpp
; Line 187
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 200
	mov	eax, DWORD PTR _nCel$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _Trans$[ebp]
	lea	eax, DWORD PTR [edi+eax*4]
; Line 201
	mov	esi, DWORD PTR [eax]
; Line 203
	mov	eax, DWORD PTR [eax+4]
	sub	eax, esi
	lea	ebx, DWORD PTR [esi+edi]
	mov	edi, DWORD PTR _screen_y_times_768[edx*4]
	add	edi, DWORD PTR _gpBuffer
	mov	esi, -256				; ffffff00H
	add	edi, ecx
	add	eax, ebx
	mov	DWORD PTR _v18$[ebp], eax
$L85031:
; Line 206
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _v9$[ebp], ecx
$L85038:
; Line 209
	movzx	ecx, BYTE PTR [ebx]
	inc	ebx
	mov	DWORD PTR _v10$[ebp], ecx
; Line 210
	test	cl, 128					; 00000080H
	je	SHORT $L86607
; Line 212
	neg	BYTE PTR _v10$[ebp]
; Line 213
	mov	ecx, DWORD PTR _v10$[ebp]
	add	edi, ecx
; Line 214
	sub	DWORD PTR _v9$[ebp], ecx
	jmp	$L86611
$L86607:
; Line 218
	sub	DWORD PTR _v9$[ebp], ecx
; Line 219
	shr	ecx, 1
; Line 220
	test	BYTE PTR _v10$[ebp], 1
	je	SHORT $L85049
; Line 221
	movsx	edx, BYTE PTR [ebx]
; Line 223
	movzx	edx, dl
	inc	ebx
	mov	dl, BYTE PTR _splTrans[edx]
	mov	BYTE PTR [edi], dl
	inc	edi
; Line 224
	test	ecx, ecx
	je	$L85035
$L85049:
; Line 228
	mov	eax, ecx
	shr	eax, 1
	test	cl, 1
	mov	DWORD PTR _v15$[ebp], eax
; Line 229
	je	SHORT $LABEL_15$85051
; Line 231
	movzx	eax, WORD PTR [ebx]
; Line 233
	movzx	ecx, al
	and	eax, esi
; Line 234
	xor	edx, edx
	movzx	ecx, BYTE PTR _splTrans[ecx]
	add	ecx, eax
	inc	ebx
	movzx	eax, cx
	mov	dh, cl
	inc	ebx
	movzx	ecx, dx
	shr	eax, 8
	or	eax, ecx
; Line 235
	movzx	ecx, al
	and	eax, esi
	movzx	ecx, BYTE PTR _splTrans[ecx]
	add	ecx, eax
; Line 236
	xor	eax, eax
	mov	al, ch
	mov	ah, cl
	mov	WORD PTR [edi], ax
; Line 237
	inc	edi
	inc	edi
; Line 238
	cmp	DWORD PTR _v15$[ebp], 0
	je	SHORT $L85061
$LABEL_15$85051:
; Line 241
	mov	eax, DWORD PTR [ebx]
; Line 244
	push	8
	movzx	ecx, al
	and	eax, esi
	add	ebx, 4
	movzx	ecx, BYTE PTR _splTrans[ecx]
	add	ecx, eax
	push	ecx
	call	__rotr
; Line 245
	movzx	ecx, al
	and	eax, esi
; Line 246
	push	8
	movzx	ecx, BYTE PTR _splTrans[ecx]
	add	ecx, eax
	push	ecx
	call	__rotr
; Line 247
	movzx	ecx, al
	and	eax, esi
; Line 248
	push	8
	movzx	ecx, BYTE PTR _splTrans[ecx]
	add	ecx, eax
	push	ecx
	call	__rotr
; Line 249
	movzx	ecx, al
	and	eax, esi
; Line 250
	push	8
	movzx	ecx, BYTE PTR _splTrans[ecx]
	add	ecx, eax
	push	ecx
	call	__rotr
	mov	DWORD PTR [edi], eax
	add	esp, 32					; 00000020H
; Line 251
	add	edi, 4
; Line 252
	dec	DWORD PTR _v15$[ebp]
; Line 253
	jne	SHORT $LABEL_15$85051
$L85061:
	mov	eax, DWORD PTR _v18$[ebp]
$L85035:
; Line 255
	cmp	DWORD PTR _v9$[ebp], 0
$L86611:
	jne	$L85038
; Line 257
	mov	ecx, -768				; fffffd00H
	sub	ecx, DWORD PTR _w$[ebp]
$LABEL_12$85045:
	add	edi, ecx
; Line 258
	cmp	ebx, eax
	jne	$L85031
	pop	edi
	pop	esi
	pop	ebx
; Line 259
	leave
	ret	12					; 0000000cH
@DrawSpellCel@20 ENDP
_TEXT	ENDS
PUBLIC	@SetSpellTrans@4
; Function compile flags: /Ogsy
;	COMDAT @SetSpellTrans@4
_TEXT	SEGMENT
@SetSpellTrans@4 PROC NEAR				; COMDAT
; _t$ = cl
; Line 265
	test	cl, cl
	mov	edx, 128				; 00000080H
	jne	SHORT $L85080
; Line 266
	xor	eax, eax
$L85078:
; Line 267
	mov	BYTE PTR _splTrans[eax], al
	inc	eax
	cmp	eax, edx
	jl	SHORT $L85078
$L85080:
; Line 269
	mov	eax, edx
$L85081:
; Line 270
	mov	BYTE PTR _splTrans[eax], al
	inc	eax
	cmp	eax, 256				; 00000100H
	jl	SHORT $L85081
; Line 271
	and	BYTE PTR _splTrans+255, 0
	push	esi
; Line 273
	movsx	eax, cl
	dec	eax
	je	$L85088
	dec	eax
	je	$L85092
	dec	eax
	je	SHORT $L85096
	dec	eax
	jne	$L85091
; Line 306
	mov	ecx, OFFSET FLAT:_splTrans
	push	edi
	mov	edx, ecx
	mov	esi, ecx
	sub	edx, 48					; 00000030H
	mov	BYTE PTR _splTrans+144, 241		; 000000f1H
	sub	esi, edx
	mov	BYTE PTR _splTrans+145, 243		; 000000f3H
	add	esi, -80				; ffffffb0H
	sub	ecx, edx
	mov	BYTE PTR _splTrans+146, 245		; 000000f5H
	mov	eax, 240				; 000000f0H
	lea	edi, DWORD PTR [ecx-32]
$L85101:
; Line 307
	lea	ecx, DWORD PTR [edx+eax]
	mov	BYTE PTR [esi+ecx], al
; Line 308
	mov	BYTE PTR [ecx], al
; Line 309
	mov	BYTE PTR [edi+ecx], al
	inc	eax
	cmp	eax, 255				; 000000ffH
	jl	SHORT $L85101
; Line 311
	and	BYTE PTR _splTrans+175, 0
; Line 312
	and	BYTE PTR _splTrans+207, 0
; Line 313
	and	BYTE PTR _splTrans+223, 0
	pop	edi
	pop	esi
; Line 315
	ret	0
$L85096:
; Line 297
	mov	ecx, OFFSET FLAT:_splTrans
	mov	BYTE PTR _splTrans+144, 209		; 000000d1H
	mov	edx, ecx
	mov	BYTE PTR _splTrans+145, 211		; 000000d3H
	sub	edx, 16					; 00000010H
	mov	BYTE PTR _splTrans+146, 213		; 000000d5H
	sub	ecx, edx
	mov	eax, 208				; 000000d0H
	lea	esi, DWORD PTR [ecx-48]
$L85097:
; Line 298
	lea	ecx, DWORD PTR [edx+eax]
	mov	BYTE PTR [esi+ecx], al
; Line 299
	mov	BYTE PTR [ecx], al
	inc	eax
	cmp	eax, 224				; 000000e0H
	jl	SHORT $L85097
	pop	esi
; Line 315
	ret	0
$L85092:
; Line 285
	mov	BYTE PTR _splTrans+144, 161		; 000000a1H
; Line 286
	mov	BYTE PTR _splTrans+145, 163		; 000000a3H
; Line 287
	mov	BYTE PTR _splTrans+146, 165		; 000000a5H
; Line 288
	mov	eax, 160				; 000000a0H
$L85093:
; Line 289
	lea	ecx, DWORD PTR _splTrans[eax+48]
	mov	BYTE PTR [ecx-16], al
; Line 290
	mov	BYTE PTR [ecx], al
	inc	eax
	cmp	eax, 176				; 000000b0H
	jl	SHORT $L85093
	pop	esi
; Line 315
	ret	0
$L85088:
; Line 278
	mov	edx, OFFSET FLAT:_splTrans
	mov	BYTE PTR _splTrans+144, 177		; 000000b1H
	mov	BYTE PTR _splTrans+145, 179		; 000000b3H
	mov	BYTE PTR _splTrans+146, 181		; 000000b5H
	mov	eax, 176				; 000000b0H
	sub	edx, 16					; 00000010H
$L85089:
; Line 280
	lea	ecx, DWORD PTR _splTrans[eax+32]
	mov	BYTE PTR [edx+eax], al
	mov	BYTE PTR [ecx-16], al
; Line 281
	mov	BYTE PTR [ecx], al
	inc	eax
	cmp	eax, 192				; 000000c0H
	jl	SHORT $L85089
$L85091:
	pop	esi
; Line 315
	ret	0
@SetSpellTrans@4 ENDP
_TEXT	ENDS
PUBLIC	_DrawSpell
EXTRN	_myplr:DWORD
EXTRN	_plr:BYTE
EXTRN	@CheckSpell@16:NEAR
EXTRN	_spelldata:BYTE
EXTRN	_currlevel:BYTE
; Function compile flags: /Ogsy
;	COMDAT _DrawSpell
_TEXT	SEGMENT
_DrawSpell PROC NEAR					; COMDAT
; Line 318
	push	ecx
; Line 326
	mov	ecx, DWORD PTR _myplr
	push	ebx
; Line 327
	mov	eax, ecx
	push	ebp
	imul	eax, 21720				; 000054d8H
	push	esi
	push	edi
	mov	dl, BYTE PTR _plr[eax+180]
; Line 328
	mov	bl, BYTE PTR _plr[eax+184]
; Line 329
	movsx	edi, dl
	mov	ebp, ecx
	mov	BYTE PTR -1+[esp+20], dl
; Line 331
	movsx	esi, BYTE PTR _plr[edi+eax+193]
	movsx	eax, BYTE PTR _plr[eax+21592]
	add	esi, eax
; Line 332
	cmp	bl, 1
	jne	SHORT $L85113
	cmp	dl, -1
	je	SHORT $L85113
; Line 333
	push	1
	push	1
	mov	edx, edi
	call	@CheckSpell@16
	test	eax, eax
	jne	SHORT $L85112
; Line 334
	add	bl, 3
$L85112:
; Line 335
	mov	ebp, DWORD PTR _myplr
; Line 336
	test	esi, esi
	jg	SHORT $L85113
; Line 337
	mov	bl, 4
$L85113:
; Line 339
	cmp	BYTE PTR _currlevel, 0
	jne	SHORT $L85114
	cmp	bl, 4
	je	SHORT $L85114
	mov	eax, edi
	imul	eax, 56					; 00000038H
	cmp	DWORD PTR _spelldata[eax+24], 0
	jne	SHORT $L85114
; Line 340
	mov	bl, 4
$L85114:
; Line 341
	imul	ebp, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ebp+180], 0
	jge	SHORT $L85115
; Line 342
	mov	bl, 4
$L85115:
; Line 343
	mov	cl, bl
	call	@SetSpellTrans@4
; Line 344
	cmp	BYTE PTR -1+[esp+20], -1
; Line 345
	mov	ecx, 629				; 00000275H
	mov	edx, 631				; 00000277H
	push	56					; 00000038H
	jne	SHORT $L85116
	push	27					; 0000001bH
; Line 346
	jmp	SHORT $L86631
$L85116:
; Line 347
	movsx	eax, BYTE PTR _SpellITbl[edi]
	push	eax
$L86631:
	push	DWORD PTR _pSpellCels
	call	@DrawSpellCel@20
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 348
	pop	ecx
	ret	0
_DrawSpell ENDP
_TEXT	ENDS
PUBLIC	??_C@_08DAAM@?$CFs?5Spell?$AA@			; `string'
PUBLIC	??_C@_0BE@OBOO@Damages?5undead?5only?$AA@	; `string'
PUBLIC	??_C@_0P@EMPL@Spell?5Level?5?$CFi?$AA@		; `string'
PUBLIC	??_C@_0BJ@FKGC@Spell?5Level?50?5?9?5Unusable?$AA@ ; `string'
PUBLIC	??_C@_0N@OHJB@Scroll?5of?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_08ONPP@1?5Scroll?$AA@			; `string'
PUBLIC	??_C@_0L@FEEO@?$CFi?5Scrolls?$AA@		; `string'
PUBLIC	??_C@_0M@ELHC@Staff?5of?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_08LHHI@1?5Charge?$AA@			; `string'
PUBLIC	??_C@_0L@EGBE@?$CFi?5Charges?$AA@		; `string'
PUBLIC	??_C@_08PIKE@?$CFs?5Skill?$AA@			; `string'
PUBLIC	??_C@_0BD@DMPO@Spell?5Hot?5Key?5?$CDF?$CFi?$AA@	; `string'
PUBLIC	_DrawSpellList
PUBLIC	@AddPanelString@8
PUBLIC	_ClearPanel
EXTRN	_sprintf:NEAR
EXTRN	_MouseY:DWORD
EXTRN	_MouseX:DWORD
EXTRN	__allmul:NEAR
EXTRN	_strcpy:NEAR
;	COMDAT ??_C@_0M@ELHC@Staff?5of?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0M@ELHC@Staff?5of?5?$CFs?$AA@ DB 'Staff of %s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08LHHI@1?5Charge?$AA@
_DATA	SEGMENT
??_C@_08LHHI@1?5Charge?$AA@ DB '1 Charge', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@EGBE@?$CFi?5Charges?$AA@
_DATA	SEGMENT
??_C@_0L@EGBE@?$CFi?5Charges?$AA@ DB '%i Charges', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@OHJB@Scroll?5of?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0N@OHJB@Scroll?5of?5?$CFs?$AA@ DB 'Scroll of %s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08ONPP@1?5Scroll?$AA@
_DATA	SEGMENT
??_C@_08ONPP@1?5Scroll?$AA@ DB '1 Scroll', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FEEO@?$CFi?5Scrolls?$AA@
_DATA	SEGMENT
??_C@_0L@FEEO@?$CFi?5Scrolls?$AA@ DB '%i Scrolls', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DAAM@?$CFs?5Spell?$AA@
_DATA	SEGMENT
??_C@_08DAAM@?$CFs?5Spell?$AA@ DB '%s Spell', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OBOO@Damages?5undead?5only?$AA@
_DATA	SEGMENT
??_C@_0BE@OBOO@Damages?5undead?5only?$AA@ DB 'Damages undead only', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@EMPL@Spell?5Level?5?$CFi?$AA@
_DATA	SEGMENT
??_C@_0P@EMPL@Spell?5Level?5?$CFi?$AA@ DB 'Spell Level %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@FKGC@Spell?5Level?50?5?9?5Unusable?$AA@
_DATA	SEGMENT
??_C@_0BJ@FKGC@Spell?5Level?50?5?9?5Unusable?$AA@ DB 'Spell Level 0 - Unu'
	DB	'sable', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PIKE@?$CFs?5Skill?$AA@
_DATA	SEGMENT
??_C@_08PIKE@?$CFs?5Skill?$AA@ DB '%s Skill', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@DMPO@Spell?5Hot?5Key?5?$CDF?$CFi?$AA@
_DATA	SEGMENT
??_C@_0BD@DMPO@Spell?5Hot?5Key?5?$CDF?$CFi?$AA@ DB 'Spell Hot Key #F%i', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DrawSpellList
_TEXT	SEGMENT
_v1$ = -12
_v17$ = -4
_xp$ = -8
_yp$ = -16
_v20$ = -20
_nCel$ = -32
_v22$ = -24
_v23$ = -36
_v24$ = -40
_v25$ = -48
_v26$ = -56
_DrawSpellList PROC NEAR				; COMDAT
; Line 351
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
; Line 378
	or	DWORD PTR _pSpell, -1
; Line 379
	and	BYTE PTR _infostr, 0
	push	ebx
	push	esi
	push	edi
; Line 380
	mov	edi, 636				; 0000027cH
	mov	DWORD PTR _v17$[ebp], edi
; Line 381
	mov	DWORD PTR _xp$[ebp], 495		; 000001efH
; Line 382
	call	_ClearPanel
; Line 384
	and	DWORD PTR _v1$[ebp], 0
	mov	esi, DWORD PTR _myplr
; Line 385
	and	DWORD PTR _v24$[ebp], 0
$L85147:
; Line 387
	mov	eax, DWORD PTR _v1$[ebp]
	sub	eax, 0
	je	SHORT $L85154
	dec	eax
	je	SHORT $L85155
	dec	eax
	je	SHORT $L85156
	dec	eax
	jne	$L85151
; Line 403
	mov	cl, 3
	call	@SetSpellTrans@4
; Line 405
	mov	eax, esi
	mov	DWORD PTR _yp$[ebp], 45			; 0000002dH
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+21576]
	mov	eax, DWORD PTR _plr[eax+21580]
; Line 406
	jmp	SHORT $L86652
$L85156:
; Line 398
	mov	cl, 2
	call	@SetSpellTrans@4
; Line 400
	mov	eax, esi
	mov	DWORD PTR _yp$[ebp], 44			; 0000002cH
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+280]
	mov	eax, DWORD PTR _plr[eax+284]
; Line 401
	jmp	SHORT $L86652
$L85155:
; Line 395
	mov	eax, esi
	mov	DWORD PTR _yp$[ebp], 47			; 0000002fH
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+264]
	mov	eax, DWORD PTR _plr[eax+268]
; Line 396
	jmp	SHORT $L86652
$L85154:
; Line 389
	xor	cl, cl
	call	@SetSpellTrans@4
; Line 391
	mov	eax, esi
	mov	DWORD PTR _yp$[ebp], 46			; 0000002eH
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+272]
	mov	eax, DWORD PTR _plr[eax+276]
$L86652:
	mov	DWORD PTR _v25$[ebp], ecx
	mov	DWORD PTR _v25$[ebp+4], eax
$L85151:
; Line 412
	mov	eax, DWORD PTR _xp$[ebp]
	and	DWORD PTR _v26$[ebp+4], 0
	xor	ebx, ebx
	add	eax, -216				; ffffff28H
	inc	ebx
	mov	DWORD PTR _v22$[ebp], eax
	add	eax, 56					; 00000038H
	mov	DWORD PTR _v20$[ebp], OFFSET FLAT:_spelldata+80
	mov	DWORD PTR _v26$[ebp], ebx
	mov	DWORD PTR _v23$[ebp], ebx
	mov	DWORD PTR -28+[ebp], eax
$L85159:
; Line 414
	mov	eax, DWORD PTR _v26$[ebp]
	mov	ecx, DWORD PTR _v26$[ebp+4]
	and	eax, DWORD PTR _v25$[ebp]
	and	ecx, DWORD PTR _v25$[ebp+4]
	or	eax, ecx
	je	$LABEL_68$85163
; Line 416
	cmp	DWORD PTR _v1$[ebp], 1
	jne	SHORT $L85164
; Line 418
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+ebx+193]
; Line 419
	movsx	eax, BYTE PTR _plr[eax+21592]
; Line 421
	lea	esi, DWORD PTR [eax+ecx]
	test	esi, esi
; Line 422
	mov	DWORD PTR _nCel$[ebp], esi
; Line 423
	jge	SHORT $L86653
; Line 424
	and	DWORD PTR _nCel$[ebp], 0
; Line 425
	xor	esi, esi
; Line 427
	test	esi, esi
$L86653:
	setg	cl
	dec	cl
	and	cl, 3
	inc	cl
	call	@SetSpellTrans@4
; Line 428
	jmp	SHORT $L85166
$L85164:
; Line 429
	mov	esi, DWORD PTR _nCel$[ebp]
$L85166:
; Line 431
	cmp	BYTE PTR _currlevel, 0
	jne	SHORT $L85167
	mov	eax, DWORD PTR _v20$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L85167
; Line 432
	mov	cl, 4
	call	@SetSpellTrans@4
$L85167:
; Line 433
	movsx	eax, BYTE PTR _SpellITbl[ebx]
	mov	edx, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR _v17$[ebp]
	push	56					; 00000038H
	push	eax
	push	DWORD PTR _pSpellCels
	call	@DrawSpellCel@20
; Line 434
	mov	ecx, DWORD PTR _v17$[ebp]
	mov	eax, DWORD PTR _MouseX
	lea	edx, DWORD PTR [ecx-64]
	cmp	eax, edx
	jl	$L85170
	lea	edx, DWORD PTR [ecx-8]
	cmp	eax, edx
	jge	$L85170
	mov	eax, DWORD PTR _MouseY
	cmp	eax, DWORD PTR _v22$[ebp]
	jl	$L85170
	cmp	eax, DWORD PTR -28+[ebp]
	jge	$L85170
; Line 436
	mov	edi, DWORD PTR _v1$[ebp]
; Line 437
	mov	edx, DWORD PTR _xp$[ebp]
	push	56					; 00000038H
	mov	DWORD PTR _pSpell, ebx
	push	DWORD PTR _yp$[ebp]
	mov	DWORD PTR _pSplType, edi
	push	DWORD PTR _pSpellCels
	call	@DrawSpellCel@20
; Line 438
	test	edi, edi
	je	$L85172
; Line 439
	mov	eax, edi
	dec	eax
	je	$L85177
	dec	eax
	je	SHORT $L85186
	dec	eax
	jne	$L85209
; Line 489
	mov	eax, DWORD PTR _pSpell
	imul	eax, 56					; 00000038H
	push	DWORD PTR _spelldata[eax+4]
	push	OFFSET FLAT:??_C@_0M@ELHC@Staff?5of?5?$CFs?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 490
	mov	eax, DWORD PTR _myplr
	add	esp, 12					; 0000000cH
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+2592]
	cmp	eax, 1
	jne	SHORT $L85205
; Line 491
	push	OFFSET FLAT:??_C@_08LHHI@1?5Charge?$AA@	; `string'
	push	OFFSET FLAT:_tempstr
	call	_strcpy
; Line 492
	jmp	$L86654
$L85205:
; Line 493
	push	eax
	push	OFFSET FLAT:??_C@_0L@EGBE@?$CFi?5Charges?$AA@ ; `string'
	push	OFFSET FLAT:_tempstr
; Line 494
	jmp	$L86655
$L85186:
; Line 454
	mov	eax, DWORD PTR _pSpell
	imul	eax, 56					; 00000038H
	push	DWORD PTR _spelldata[eax+4]
	push	OFFSET FLAT:??_C@_0N@OHJB@Scroll?5of?5?$CFs?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 457
	mov	eax, DWORD PTR _myplr
; Line 458
	mov	ebx, DWORD PTR _pSpell
	imul	eax, 21720				; 000054d8H
	add	esp, 12					; 0000000cH
	xor	edi, edi
	mov	edx, DWORD PTR _plr[eax+18188]
	test	edx, edx
	jle	SHORT $L85191
; Line 459
	lea	ecx, DWORD PTR _plr[eax+3688]
$L85189:
; Line 463
	cmp	DWORD PTR [ecx-212], -1
	je	SHORT $L85192
	mov	esi, DWORD PTR [ecx]
	cmp	esi, 21					; 00000015H
	je	SHORT $L85193
	cmp	esi, 22					; 00000016H
	jne	SHORT $L85192
$L85193:
	cmp	DWORD PTR [ecx+4], ebx
	jne	SHORT $L85192
; Line 464
	inc	edi
$L85192:
; Line 466
	add	ecx, 368				; 00000170H
; Line 467
	dec	edx
; Line 468
	jne	SHORT $L85189
$L85191:
; Line 470
	push	8
	lea	eax, DWORD PTR _plr[eax+18452]
	pop	edx
$L85194:
; Line 475
	cmp	DWORD PTR [eax-212], -1
	je	SHORT $L85197
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 21					; 00000015H
	je	SHORT $L85198
	cmp	ecx, 22					; 00000016H
	jne	SHORT $L85197
$L85198:
	cmp	DWORD PTR [eax+4], ebx
	jne	SHORT $L85197
; Line 476
	inc	edi
$L85197:
; Line 478
	add	eax, 368				; 00000170H
; Line 480
	dec	edx
	jne	SHORT $L85194
; Line 481
	cmp	edi, 1
	jne	SHORT $L85199
; Line 482
	push	OFFSET FLAT:??_C@_08ONPP@1?5Scroll?$AA@	; `string'
	push	OFFSET FLAT:_tempstr
	call	_strcpy
	pop	ecx
	pop	ecx
; Line 483
	jmp	SHORT $L85201
$L85199:
; Line 484
	push	edi
	push	OFFSET FLAT:??_C@_0L@FEEO@?$CFi?5Scrolls?$AA@ ; `string'
	push	OFFSET FLAT:_tempstr
	call	_sprintf
	add	esp, 12					; 0000000cH
$L85201:
; Line 485
	xor	edx, edx
	mov	ecx, OFFSET FLAT:_tempstr
	inc	edx
	call	@AddPanelString@8
; Line 486
	mov	ebx, DWORD PTR _v23$[ebp]
; Line 487
	jmp	$L85209
$L85177:
; Line 441
	mov	eax, DWORD PTR _pSpell
	imul	eax, 56					; 00000038H
	push	DWORD PTR _spelldata[eax+4]
	push	OFFSET FLAT:??_C@_08DAAM@?$CFs?5Spell?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 442
	cmp	DWORD PTR _pSpell, 31			; 0000001fH
; Line 443
	mov	edi, OFFSET FLAT:_tempstr
	jne	SHORT $L85179
	push	OFFSET FLAT:??_C@_0BE@OBOO@Damages?5undead?5only?$AA@ ; `string'
	push	edi
	call	_sprintf
	pop	ecx
; Line 444
	xor	edx, edx
	pop	ecx
	inc	edx
	mov	ecx, edi
	call	@AddPanelString@8
$L85179:
; Line 446
	test	esi, esi
	je	SHORT $L85181
; Line 447
	push	esi
	push	OFFSET FLAT:??_C@_0P@EMPL@Spell?5Level?5?$CFi?$AA@ ; `string'
	push	edi
$L86655:
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 448
	jmp	SHORT $LABEL_32$85185
$L85181:
; Line 449
	push	OFFSET FLAT:??_C@_0BJ@FKGC@Spell?5Level?50?5?9?5Unusable?$AA@ ; `string'
	push	edi
	call	_sprintf
$L86654:
	pop	ecx
	pop	ecx
$LABEL_32$85185:
; Line 451
	xor	edx, edx
	mov	ecx, OFFSET FLAT:_tempstr
	inc	edx
	call	@AddPanelString@8
; Line 496
	jmp	SHORT $L85209
$L85172:
; Line 497
	mov	eax, DWORD PTR _pSpell
	imul	eax, 56					; 00000038H
	push	DWORD PTR _spelldata[eax+8]
	push	OFFSET FLAT:??_C@_08PIKE@?$CFs?5Skill?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
	add	esp, 12					; 0000000cH
$L85209:
; Line 499
	mov	esi, DWORD PTR _myplr
; Line 500
	xor	edi, edi
$L85211:
; Line 502
	mov	eax, esi
	imul	eax, 5430				; 00001536H
	add	eax, edi
	mov	eax, DWORD PTR _plr[eax*4+292]
	cmp	eax, DWORD PTR _pSpell
	jne	SHORT $L85214
	mov	eax, esi
	imul	eax, 21720				; 000054d8H
	movsx	eax, BYTE PTR _plr[eax+edi+308]
	cmp	eax, DWORD PTR _pSplType
	jne	SHORT $L85214
; Line 503
	lea	esi, DWORD PTR [edi+5]
	mov	edx, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR _v17$[ebp]
	push	56					; 00000038H
	lea	eax, DWORD PTR [esi+43]
	push	eax
	push	DWORD PTR _pSpellCels
	call	@DrawSpellCel@20
; Line 504
	push	esi
	mov	esi, OFFSET FLAT:_tempstr
	push	OFFSET FLAT:??_C@_0BD@DMPO@Spell?5Hot?5Key?5?$CDF?$CFi?$AA@ ; `string'
	push	esi
	call	_sprintf
; Line 505
	xor	edx, edx
	add	esp, 12					; 0000000cH
	inc	edx
	mov	ecx, esi
	call	@AddPanelString@8
; Line 506
	mov	esi, DWORD PTR _myplr
$L85214:
; Line 508
	inc	edi
; Line 509
	cmp	edi, 4
	jl	SHORT $L85211
; Line 510
	mov	eax, DWORD PTR _v24$[ebp]
; Line 511
	mov	edi, 636				; 0000027cH
	mov	DWORD PTR _v1$[ebp], eax
	jmp	SHORT $LABEL_66$85217
$L85170:
; Line 513
	mov	esi, DWORD PTR _myplr
$LABEL_66$85217:
; Line 515
	push	56					; 00000038H
	pop	eax
	sub	DWORD PTR _v17$[ebp], eax
; Line 516
	cmp	DWORD PTR _v17$[ebp], 20		; 00000014H
	jne	SHORT $LABEL_68$85163
; Line 517
	sub	DWORD PTR _xp$[ebp], eax
; Line 518
	sub	DWORD PTR _v22$[ebp], eax
	sub	DWORD PTR -28+[ebp], eax
; Line 519
	mov	DWORD PTR _v17$[ebp], edi
$LABEL_68$85163:
; Line 522
	add	DWORD PTR _v20$[ebp], 56		; 00000038H
; Line 524
	push	0
	push	2
	inc	ebx
	push	DWORD PTR _v26$[ebp+4]
	push	DWORD PTR _v26$[ebp]
	call	__allmul
; Line 526
	cmp	DWORD PTR _v20$[ebp], OFFSET FLAT:_spelldata+2096
	mov	DWORD PTR _v26$[ebp], eax
	mov	DWORD PTR _v26$[ebp+4], edx
	mov	DWORD PTR _v23$[ebp], ebx
	jl	$L85159
; Line 527
	mov	eax, DWORD PTR _v25$[ebp]
	or	eax, DWORD PTR _v25$[ebp+4]
	je	SHORT $L85222
	cmp	DWORD PTR _v17$[ebp], edi
	je	SHORT $L85222
; Line 528
	sub	DWORD PTR _v17$[ebp], 56		; 00000038H
$L85222:
; Line 529
	cmp	DWORD PTR _v17$[ebp], 20		; 00000014H
	jne	SHORT $L85223
; Line 530
	sub	DWORD PTR _xp$[ebp], 56			; 00000038H
; Line 531
	mov	DWORD PTR _v17$[ebp], edi
$L85223:
; Line 533
	inc	DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
; Line 534
	cmp	eax, 4
	mov	DWORD PTR _v24$[ebp], eax
	jl	$L85147
	pop	edi
	pop	esi
	pop	ebx
; Line 535
	leave
	ret	0
_DrawSpellList ENDP
_TEXT	ENDS
PUBLIC	_SetSpell
EXTRN	_drawpanflag:DWORD
; Function compile flags: /Ogsy
;	COMDAT _SetSpell
_TEXT	SEGMENT
_SetSpell PROC NEAR					; COMDAT
; Line 543
	and	DWORD PTR _spselflag, 0
; Line 544
	cmp	DWORD PTR _pSpell, -1
	je	SHORT $L85226
; Line 545
	call	_ClearPanel
; Line 546
	mov	eax, DWORD PTR _myplr
; Line 548
	mov	ecx, DWORD PTR _pSpell
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	mov	DWORD PTR _plr[eax+180], ecx
; Line 549
	mov	cl, BYTE PTR _pSplType
	mov	BYTE PTR _plr[eax+184], cl
$L85226:
; Line 551
	ret	0
_SetSpell ENDP
_TEXT	ENDS
PUBLIC	@SetSpeedSpell@4
; Function compile flags: /Ogsy
;	COMDAT @SetSpeedSpell@4
_TEXT	SEGMENT
_slot$ = -4
@SetSpeedSpell@4 PROC NEAR				; COMDAT
; _slot$ = ecx
; Line 558
	push	ecx
	push	esi
; Line 564
	mov	esi, DWORD PTR _pSpell
; Line 565
	cmp	esi, -1
	mov	DWORD PTR _slot$[esp+8], ecx
	je	SHORT $L85235
; Line 568
	mov	edx, DWORD PTR _myplr
	push	ebx
	push	ebp
	mov	eax, edx
	xor	ebp, ebp
	imul	eax, 21720				; 000054d8H
	mov	ebx, DWORD PTR _pSplType
	push	edi
	lea	edi, DWORD PTR _plr[eax+292]
$L85236:
; Line 570
	cmp	DWORD PTR [edi], esi
	jne	SHORT $L85239
	movsx	ecx, BYTE PTR _plr[eax+ebp+308]
	cmp	ecx, ebx
	jne	SHORT $L85239
; Line 571
	or	DWORD PTR [edi], -1
$L85239:
; Line 572
	inc	ebp
; Line 573
	add	edi, 4
; Line 574
	cmp	ebp, 4
	jl	SHORT $L85236
; Line 575
	imul	edx, 5430				; 00001536H
	mov	ecx, DWORD PTR _slot$[esp+20]
	pop	edi
	add	edx, ecx
	pop	ebp
	mov	DWORD PTR _plr[edx*4+292], esi
; Line 576
	mov	BYTE PTR _plr[eax+ecx+308], bl
	pop	ebx
$L85235:
	pop	esi
; Line 578
	pop	ecx
	ret	0
@SetSpeedSpell@4 ENDP
_TEXT	ENDS
PUBLIC	@ToggleSpell@4
EXTRN	__allshl:NEAR
; Function compile flags: /Ogsy
;	COMDAT @ToggleSpell@4
_TEXT	SEGMENT
_spells$ = -12
@ToggleSpell@4 PROC NEAR				; COMDAT
; _slot$ = ecx
; Line 583
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
; Line 586
	mov	esi, DWORD PTR _myplr
	mov	eax, esi
	imul	eax, 5430				; 00001536H
	add	eax, ecx
	mov	edx, DWORD PTR _plr[eax*4+292]
	cmp	edx, -1
	mov	DWORD PTR -4+[ebp], edx
	je	$L85254
; Line 590
	imul	esi, 21720				; 000054d8H
	push	ebx
	push	edi
	lea	eax, DWORD PTR _plr[esi+ecx+308]
	mov	DWORD PTR -8+[ebp], eax
	movsx	eax, BYTE PTR [eax]
	sub	eax, 0
	je	SHORT $L85249
	dec	eax
	je	SHORT $L85250
	dec	eax
	je	SHORT $L85251
	dec	eax
	jne	SHORT $L86667
; Line 601
	mov	ebx, DWORD PTR _plr[esi+21576]
	mov	edi, DWORD PTR _plr[esi+21580]
; Line 602
	jmp	SHORT $L85246
$L85251:
; Line 598
	mov	ebx, DWORD PTR _plr[esi+280]
	mov	edi, DWORD PTR _plr[esi+284]
; Line 599
	jmp	SHORT $L85246
$L85250:
; Line 595
	mov	ebx, DWORD PTR _plr[esi+264]
	mov	edi, DWORD PTR _plr[esi+268]
; Line 596
	jmp	SHORT $L85246
$L85249:
; Line 592
	mov	ebx, DWORD PTR _plr[esi+272]
	mov	edi, DWORD PTR _plr[esi+276]
	jmp	SHORT $L85246
$L86667:
	mov	edi, DWORD PTR _spells$[ebp+4]
	mov	ebx, DWORD PTR _spells$[ebp]
$L85246:
; Line 605
	xor	eax, eax
	lea	ecx, DWORD PTR [edx-1]
	inc	eax
	xor	edx, edx
	call	__allshl
	and	eax, ebx
	and	edx, edi
	pop	edi
	or	eax, edx
	pop	ebx
	je	SHORT $L85254
; Line 606
	mov	eax, DWORD PTR -4+[ebp]
; Line 608
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	mov	DWORD PTR _plr[esi+180], eax
	mov	eax, DWORD PTR -8+[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR _plr[esi+184], al
$L85254:
	pop	esi
; Line 610
	leave
	ret	0
@ToggleSpell@4 ENDP
_TEXT	ENDS
PUBLIC	@CPrintString@12
; Function compile flags: /Ogsy
;	COMDAT @CPrintString@12
_TEXT	SEGMENT
_col$ = 8
_v6$ = -8
_v7$ = -4
_v8$ = 8
_v13$ = 8
_v17$ = 8
_v21$ = 8
@CPrintString@12 PROC NEAR				; COMDAT
; _No$ = ecx
; _glyph$ = edx
; Line 614
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 637
	mov	eax, DWORD PTR _pPanelText
	push	ebx
	push	esi
	push	edi
; Line 639
	mov	edi, DWORD PTR _gpBuffer
	lea	edx, DWORD PTR [eax+edx*4]
	add	ecx, edi
	mov	esi, DWORD PTR [edx]
; Line 640
	mov	edi, DWORD PTR [edx+4]
	add	eax, esi
	sub	edi, esi
	add	edi, eax
; Line 641
	cmp	BYTE PTR _col$[ebp], 0
	mov	DWORD PTR _v6$[ebp], edi
	je	$L85366
; Line 642
	cmp	BYTE PTR _col$[ebp], 1
	jne	SHORT $L85291
$L85292:
; Line 644
	push	13					; 0000000dH
	pop	ebx
$L85299:
; Line 647
	movzx	esi, BYTE PTR [eax]
	mov	DWORD PTR _v13$[ebp], esi
	inc	eax
; Line 648
	test	BYTE PTR _v13$[ebp], 128		; 00000080H
	je	SHORT $L86694
; Line 650
	neg	BYTE PTR _v13$[ebp]
; Line 651
	add	ecx, DWORD PTR _v13$[ebp]
; Line 652
	sub	ebx, DWORD PTR _v13$[ebp]
	jmp	SHORT $L86722
$L86694:
; Line 656
	sub	ebx, esi
$L85307:
; Line 659
	mov	dl, BYTE PTR [eax]
	inc	eax
; Line 660
	cmp	dl, 253					; 000000fdH
	jbe	SHORT $L85311
; Line 661
	mov	dl, -65					; ffffffbfH
; Line 662
	jmp	SHORT $L85314
$L85311:
	cmp	dl, 240					; 000000f0H
	jb	SHORT $L85314
; Line 663
	add	dl, -62					; ffffffc2H
$L85314:
; Line 665
	mov	BYTE PTR [ecx], dl
	inc	ecx
; Line 666
	dec	esi
; Line 667
	jne	SHORT $L85307
; Line 668
	test	ebx, ebx
$L86722:
	jne	SHORT $L85299
; Line 670
	sub	ecx, 781				; 0000030dH
; Line 671
	cmp	edi, eax
$LABEL_28$85306:
	jne	SHORT $L85292
; Line 672
	jmp	$L85368
$L85291:
	cmp	BYTE PTR _col$[ebp], 2
	jne	SHORT $L85341
$L85319:
; Line 674
	push	13					; 0000000dH
	pop	ebx
$L85326:
; Line 677
	movzx	esi, BYTE PTR [eax]
	mov	DWORD PTR _v17$[ebp], esi
	inc	eax
; Line 678
	test	BYTE PTR _v17$[ebp], 128		; 00000080H
	je	SHORT $L86696
; Line 680
	neg	BYTE PTR _v17$[ebp]
; Line 681
	add	ecx, DWORD PTR _v17$[ebp]
; Line 682
	sub	ebx, DWORD PTR _v17$[ebp]
	jmp	SHORT $L86723
$L86696:
; Line 686
	sub	ebx, esi
$L85334:
; Line 689
	mov	dl, BYTE PTR [eax]
	inc	eax
; Line 690
	cmp	dl, 240					; 000000f0H
	jb	SHORT $L85338
; Line 691
	add	dl, -16					; fffffff0H
$L85338:
; Line 692
	mov	BYTE PTR [ecx], dl
	inc	ecx
; Line 693
	dec	esi
; Line 694
	jne	SHORT $L85334
; Line 695
	test	ebx, ebx
$L86723:
	jne	SHORT $L85326
; Line 697
	sub	ecx, 781				; 0000030dH
; Line 698
	cmp	edi, eax
$LABEL_39$85333:
	jne	SHORT $L85319
; Line 699
	jmp	$L85368
$L85341:
; Line 701
	push	13					; 0000000dH
	pop	ebx
$L85348:
; Line 704
	movzx	esi, BYTE PTR [eax]
	mov	DWORD PTR _v21$[ebp], esi
	inc	eax
; Line 705
	test	BYTE PTR _v21$[ebp], 128		; 00000080H
	je	SHORT $L86698
; Line 707
	neg	BYTE PTR _v21$[ebp]
; Line 708
	add	ecx, DWORD PTR _v21$[ebp]
; Line 709
	sub	ebx, DWORD PTR _v21$[ebp]
	jmp	SHORT $L86724
$L86698:
; Line 713
	sub	ebx, esi
$L85356:
; Line 716
	mov	dl, BYTE PTR [eax]
	inc	eax
; Line 717
	cmp	dl, 240					; 000000f0H
	jb	SHORT $L85363
; Line 718
	cmp	dl, 254					; 000000feH
	jb	SHORT $L85362
; Line 719
	mov	dl, -49					; ffffffcfH
; Line 720
	jmp	SHORT $L85363
$L85362:
; Line 721
	add	dl, -46					; ffffffd2H
$L85363:
; Line 723
	mov	BYTE PTR [ecx], dl
	inc	ecx
; Line 724
	dec	esi
; Line 725
	jne	SHORT $L85356
; Line 726
	test	ebx, ebx
$L86724:
	jne	SHORT $L85348
; Line 728
	sub	ecx, 781				; 0000030dH
; Line 729
	cmp	edi, eax
$LABEL_52$85355:
	jne	SHORT $L85341
; Line 731
	jmp	$L85368
$L85366:
; Line 733
	mov	DWORD PTR _v7$[ebp], 13			; 0000000dH
$L85373:
; Line 736
	movzx	esi, BYTE PTR [eax]
	mov	DWORD PTR _v8$[ebp], esi
	inc	eax
; Line 737
	test	BYTE PTR _v8$[ebp], 128			; 00000080H
	je	SHORT $L86700
; Line 739
	neg	BYTE PTR _v8$[ebp]
; Line 740
	mov	edx, DWORD PTR _v8$[ebp]
	add	ecx, edx
; Line 741
	sub	DWORD PTR _v7$[ebp], edx
	jmp	SHORT $L86725
$L86700:
; Line 745
	sub	DWORD PTR _v7$[ebp], esi
; Line 746
	mov	edx, esi
	shr	edx, 1
; Line 747
	test	BYTE PTR _v8$[ebp], 1
	je	SHORT $L85382
; Line 748
	mov	bl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], bl
	inc	ecx
	inc	eax
; Line 749
	test	edx, edx
	je	SHORT $L85370
$L85382:
; Line 753
	shr	esi, 2
	test	dl, 1
; Line 754
	je	SHORT $L85386
; Line 755
	mov	dx, WORD PTR [eax]
; Line 756
	inc	eax
	mov	WORD PTR [ecx], dx
	inc	eax
; Line 757
	inc	ecx
	inc	ecx
; Line 758
	test	esi, esi
	je	SHORT $L85370
$L85386:
; Line 761
	shl	esi, 2
	test	esi, esi
	mov	edi, ecx
	jbe	SHORT $L86676
	mov	edx, eax
	mov	DWORD PTR 8+[ebp], esi
	sub	edx, ecx
$L86675:
	mov	bl, BYTE PTR [edx+edi]
	mov	BYTE PTR [edi], bl
	inc	edi
	dec	DWORD PTR 8+[ebp]
	jne	SHORT $L86675
$L86676:
; Line 763
	mov	edi, DWORD PTR _v6$[ebp]
	add	eax, esi
	add	ecx, esi
$L85370:
; Line 764
	cmp	DWORD PTR _v7$[ebp], 0
$L86725:
	jne	SHORT $L85373
; Line 766
	sub	ecx, 781				; 0000030dH
; Line 767
	cmp	edi, eax
$LABEL_15$85380:
	jne	SHORT $L85366
$L85368:
	pop	edi
	pop	esi
	pop	ebx
; Line 769
	leave
	ret	4
@CPrintString@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @AddPanelString@8
_TEXT	SEGMENT
@AddPanelString@8 PROC NEAR				; COMDAT
; _str$ = ecx
; _just$ = edx
; Line 773
	mov	eax, DWORD PTR _pnumlines
	push	esi
	shl	eax, 6
	add	eax, OFFSET FLAT:_panelstr
	push	ecx
	push	eax
	mov	esi, edx
	call	_strcpy
; Line 774
	mov	eax, DWORD PTR _pnumlines
	pop	ecx
	pop	ecx
; Line 776
	cmp	eax, 4
	mov	DWORD PTR _pstrjust[eax*4], esi
	pop	esi
	jge	SHORT $L85393
; Line 777
	inc	eax
	mov	DWORD PTR _pnumlines, eax
$L85393:
; Line 778
	ret	0
@AddPanelString@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _ClearPanel
_TEXT	SEGMENT
_ClearPanel PROC NEAR					; COMDAT
; Line 782
	and	DWORD PTR _pnumlines, 0
; Line 783
	and	DWORD PTR _pinfoflag, 0
; Line 784
	ret	0
_ClearPanel ENDP
_TEXT	ENDS
PUBLIC	@DrawPanelBox@24
; Function compile flags: /Ogsy
;	COMDAT @DrawPanelBox@24
_TEXT	SEGMENT
_w$ = 8
_h$ = 12
_sx$ = 16
_sy$ = 20
_v8$ = -8
_out$86737 = 20
@DrawPanelBox@24 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 787
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 796
	mov	eax, DWORD PTR _sy$[ebp]
	lea	edx, DWORD PTR [edx+edx*4]
	shl	edx, 7
	add	edx, DWORD PTR _pBtmBuff
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 8
	add	eax, DWORD PTR _gpBuffer
	push	ebx
	add	edx, ecx
; Line 797
	mov	ecx, DWORD PTR _h$[ebp]
	add	eax, DWORD PTR _sx$[ebp]
	push	esi
	mov	esi, DWORD PTR _w$[ebp]
	mov	DWORD PTR _v8$[ebp], ecx
	mov	ecx, esi
; Line 799
	mov	DWORD PTR 16+[ebp], esi
	sar	ecx, 1
	and	DWORD PTR 16+[ebp], 1
	push	edi
$L85415:
; Line 800
	cmp	DWORD PTR 16+[ebp], 0
	je	SHORT $L85419
	mov	bl, BYTE PTR [edx]
	inc	edx
	mov	BYTE PTR [eax], bl
	inc	eax
	test	ecx, ecx
	je	SHORT $L85422
$L85419:
; Line 802
	sar	esi, 2
	test	cl, 1
; Line 803
	je	SHORT $L85423
	mov	di, WORD PTR [edx]
	inc	edx
	mov	WORD PTR [eax], di
	inc	edx
	inc	eax
	inc	eax
	test	esi, esi
	je	SHORT $L85422
$L85423:
; Line 804
	shl	esi, 2
	test	esi, esi
	mov	DWORD PTR _out$86737[ebp], eax
	jbe	SHORT $L86740
	mov	DWORD PTR 12+[ebp], edx
	mov	DWORD PTR -4+[ebp], esi
	sub	DWORD PTR 12+[ebp], eax
$L86739:
	mov	edi, DWORD PTR 12+[ebp]
	mov	ebx, DWORD PTR _out$86737[ebp]
	mov	bl, BYTE PTR [edi+ebx]
	mov	edi, DWORD PTR _out$86737[ebp]
	inc	DWORD PTR _out$86737[ebp]
	dec	DWORD PTR -4+[ebp]
	mov	BYTE PTR [edi], bl
	jne	SHORT $L86739
$L86740:
; Line 805
	add	edx, esi
; Line 806
	add	eax, esi
$L85422:
; Line 809
	mov	esi, DWORD PTR _w$[ebp]
	mov	edi, 640				; 00000280H
	sub	edi, esi
	add	edx, edi
; Line 810
	mov	edi, 768				; 00000300H
	sub	edi, esi
	add	eax, edi
; Line 811
	dec	DWORD PTR _v8$[ebp]
; Line 812
	jne	SHORT $L85415
	pop	edi
	pop	esi
	pop	ebx
; Line 813
	leave
	ret	16					; 00000010H
@DrawPanelBox@24 ENDP
_TEXT	ENDS
PUBLIC	@SetFlaskHeight@20
; Function compile flags: /Ogsy
;	COMDAT @SetFlaskHeight@20
_TEXT	SEGMENT
_max$ = 8
_c$ = 12
_r$ = 16
@SetFlaskHeight@20 PROC NEAR				; COMDAT
; _buf$ = ecx
; _min$ = edx
; Line 816
	push	ebp
	mov	ebp, esp
; Line 822
	mov	eax, DWORD PTR _r$[ebp]
	push	ebx
	push	esi
	mov	esi, edx
	imul	esi, 88					; 00000058H
	lea	eax, DWORD PTR [eax+eax*2]
	add	esi, ecx
; Line 823
	mov	ecx, DWORD PTR _max$[ebp]
	push	edi
	shl	eax, 8
	add	eax, DWORD PTR _gpBuffer
	add	eax, DWORD PTR _c$[ebp]
	sub	ecx, edx
$L85438:
; Line 825
	mov	edx, esi
	mov	edi, eax
	sub	edx, eax
	mov	DWORD PTR 16+[ebp], 88			; 00000058H
$L86754:
	mov	bl, BYTE PTR [edx+edi]
	mov	BYTE PTR [edi], bl
	inc	edi
	dec	DWORD PTR 16+[ebp]
	jne	SHORT $L86754
; Line 826
	add	esi, 88					; 00000058H
; Line 827
	add	eax, 768				; 00000300H
; Line 828
	dec	ecx
; Line 829
	jne	SHORT $L85438
	pop	edi
	pop	esi
	pop	ebx
; Line 830
	pop	ebp
	ret	12					; 0000000cH
@SetFlaskHeight@20 ENDP
_TEXT	ENDS
PUBLIC	@DrawFlask@24
; Function compile flags: /Ogsy
;	COMDAT @DrawFlask@24
_TEXT	SEGMENT
_a3$ = 8
_a4$ = 12
_a5$ = 16
_a6$ = 20
@DrawFlask@24 PROC NEAR					; COMDAT
; _a1$ = ecx
; _a2$ = edx
; Line 842
	mov	eax, DWORD PTR _a3$[esp-4]
	push	ebx
	push	esi
; Line 843
	mov	esi, DWORD PTR _a4$[esp+4]
	add	ecx, eax
	mov	eax, DWORD PTR _a5$[esp+4]
	push	edi
	add	eax, esi
; Line 844
	mov	esi, DWORD PTR _a6$[esp+8]
	lea	edi, DWORD PTR [edx-59]
$L85462:
; Line 846
	push	59					; 0000003bH
	pop	ebx
$L85465:
; Line 848
	mov	dl, BYTE PTR [ecx]
	inc	ecx
; Line 849
	test	dl, dl
	je	SHORT $L85468
; Line 850
	mov	BYTE PTR [eax], dl
$L85468:
; Line 851
	inc	eax
; Line 853
	dec	ebx
	jne	SHORT $L85465
; Line 854
	add	ecx, edi
; Line 855
	add	eax, 709				; 000002c5H
; Line 856
	dec	esi
; Line 857
	jne	SHORT $L85462
	pop	edi
	pop	esi
	pop	ebx
; Line 858
	ret	16					; 00000010H
@DrawFlask@24 ENDP
_TEXT	ENDS
PUBLIC	__real@4054000000000000
PUBLIC	_DrawLifeFlask
EXTRN	__ftol:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@4054000000000000
CONST	SEGMENT
__real@4054000000000000 DQ 04054000000000000r	; 80
; Function compile flags: /Ogsy
CONST	ENDS
;	COMDAT _DrawLifeFlask
_TEXT	SEGMENT
_DrawLifeFlask PROC NEAR				; COMDAT
; Line 861
	push	esi
; Line 862
	mov	esi, DWORD PTR _myplr
	imul	esi, 21720				; 000054d8H
	push	edi
	fild	DWORD PTR _plr[esi+408]
	fidiv	DWORD PTR _plr[esi+412]
	fmul	QWORD PTR __real@4054000000000000
	call	__ftol
; Line 865
	push	80					; 00000050H
	mov	DWORD PTR _plr[esi+416], eax
	pop	esi
	cmp	eax, esi
	jle	SHORT $L85473
; Line 866
	mov	eax, esi
$L85473:
; Line 867
	sub	esi, eax
; Line 868
	cmp	esi, 11					; 0000000bH
	jle	SHORT $L85474
; Line 869
	push	11					; 0000000bH
	pop	esi
$L85474:
; Line 870
	inc	esi
; Line 872
	mov	edi, 383405				; 0005d9adH
	inc	esi
	mov	ecx, DWORD PTR _pLifeBuff
	push	esi
	push	edi
	push	DWORD PTR _gpBuffer
	push	277					; 00000115H
	push	88					; 00000058H
	pop	edx
	call	@DrawFlask@24
; Line 873
	cmp	esi, 13					; 0000000dH
	je	SHORT $L85475
; Line 874
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _pBtmBuff
	pop	eax
	mov	edx, 640				; 00000280H
	sub	eax, esi
	push	eax
	lea	eax, DWORD PTR [esi+esi*2]
	shl	eax, 8
	add	eax, edi
	push	eax
	lea	eax, DWORD PTR [esi+esi*4]
	push	DWORD PTR _gpBuffer
	shl	eax, 7
	add	eax, 2029				; 000007edH
	push	eax
	call	@DrawFlask@24
$L85475:
	pop	edi
	pop	esi
; Line 875
	ret	0
_DrawLifeFlask ENDP
_TEXT	ENDS
PUBLIC	_UpdateLifeFlask
; Function compile flags: /Ogsy
;	COMDAT _UpdateLifeFlask
_TEXT	SEGMENT
_UpdateLifeFlask PROC NEAR				; COMDAT
; Line 878
	push	esi
; Line 879
	mov	esi, DWORD PTR _myplr
	imul	esi, 21720				; 000054d8H
	push	edi
	fild	DWORD PTR _plr[esi+408]
	fidiv	DWORD PTR _plr[esi+412]
	fmul	QWORD PTR __real@4054000000000000
	call	__ftol
	mov	edi, eax
; Line 880
	mov	DWORD PTR _plr[esi+416], edi
; Line 882
	cmp	edi, 69					; 00000045H
	mov	esi, 160				; 000000a0H
	jle	SHORT $L85480
; Line 883
	push	69					; 00000045H
	pop	edi
; Line 884
	jmp	SHORT $L86774
$L85480:
	test	edi, edi
	jge	SHORT $L85482
; Line 885
	xor	edi, edi
$L85482:
; Line 886
	cmp	edi, 69					; 00000045H
	je	SHORT $L85483
; Line 887
	push	512					; 00000200H
	push	esi
	push	85					; 00000055H
	mov	ecx, DWORD PTR _pLifeBuff
	pop	eax
	sub	eax, edi
	push	eax
	push	16					; 00000010H
	pop	edx
	call	@SetFlaskHeight@20
$L85483:
; Line 888
	test	edi, edi
	je	SHORT $L85484
$L86774:
; Line 889
	mov	eax, 581				; 00000245H
	sub	eax, edi
	push	eax
	push	esi
	push	edi
	push	88					; 00000058H
	push	85					; 00000055H
	pop	edx
	push	96					; 00000060H
	sub	edx, edi
	pop	ecx
	call	@DrawPanelBox@24
$L85484:
	pop	edi
	pop	esi
; Line 890
	ret	0
_UpdateLifeFlask ENDP
_TEXT	ENDS
PUBLIC	_DrawManaFlask
; Function compile flags: /Ogsy
;	COMDAT _DrawManaFlask
_TEXT	SEGMENT
_DrawManaFlask PROC NEAR				; COMDAT
; Line 894
	mov	eax, DWORD PTR _myplr
	push	esi
	imul	eax, 21720				; 000054d8H
	push	edi
; Line 895
	push	80					; 00000050H
	mov	eax, DWORD PTR _plr[eax+436]
	pop	esi
	cmp	eax, esi
	jle	SHORT $L85487
; Line 896
	mov	eax, esi
$L85487:
; Line 897
	sub	esi, eax
; Line 898
	cmp	esi, 11					; 0000000bH
	jle	SHORT $L85488
; Line 899
	push	11					; 0000000bH
	pop	esi
$L85488:
; Line 900
	inc	esi
; Line 902
	mov	edi, 383771				; 0005db1bH
	inc	esi
	mov	ecx, DWORD PTR _pManaBuff
	push	esi
	push	edi
	push	DWORD PTR _gpBuffer
	push	277					; 00000115H
	push	88					; 00000058H
	pop	edx
	call	@DrawFlask@24
; Line 903
	cmp	esi, 13					; 0000000dH
	je	SHORT $L85489
; Line 904
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _pBtmBuff
	pop	eax
	mov	edx, 640				; 00000280H
	sub	eax, esi
	push	eax
	lea	eax, DWORD PTR [esi+esi*2]
	shl	eax, 8
	add	eax, edi
	push	eax
	lea	eax, DWORD PTR [esi+esi*4]
	push	DWORD PTR _gpBuffer
	shl	eax, 7
	add	eax, 2395				; 0000095bH
	push	eax
	call	@DrawFlask@24
$L85489:
	pop	edi
	pop	esi
; Line 905
	ret	0
_DrawManaFlask ENDP
_TEXT	ENDS
PUBLIC	_control_update_life_mana
; Function compile flags: /Ogsy
;	COMDAT _control_update_life_mana
_TEXT	SEGMENT
_maxMana$ = -4
_mana$ = -8
_control_update_life_mana PROC NEAR			; COMDAT
; Line 908
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 910
	mov	esi, DWORD PTR _myplr
	imul	esi, 21720				; 000054d8H
; Line 912
	xor	edx, edx
	mov	ecx, DWORD PTR _plr[esi+432]
	mov	eax, DWORD PTR _plr[esi+428]
	cmp	ecx, edx
	mov	DWORD PTR _maxMana$[ebp], ecx
	mov	DWORD PTR _mana$[ebp], eax
	jge	SHORT $L85494
; Line 913
	mov	DWORD PTR _maxMana$[ebp], edx
$L85494:
; Line 914
	cmp	eax, edx
	jge	SHORT $L85495
; Line 915
	mov	DWORD PTR _mana$[ebp], edx
$L85495:
; Line 916
	cmp	DWORD PTR _maxMana$[ebp], edx
	jne	SHORT $L85496
; Line 917
	xor	eax, eax
; Line 918
	jmp	SHORT $L85497
$L85496:
; Line 919
	fild	DWORD PTR _mana$[ebp]
	fidiv	DWORD PTR _maxMana$[ebp]
	fmul	QWORD PTR __real@4054000000000000
	call	__ftol
$L85497:
; Line 920
	mov	DWORD PTR _plr[esi+436], eax
; Line 921
	fild	DWORD PTR _plr[esi+408]
	fidiv	DWORD PTR _plr[esi+412]
	fmul	QWORD PTR __real@4054000000000000
	call	__ftol
	mov	DWORD PTR _plr[esi+416], eax
	pop	esi
; Line 922
	leave
	ret	0
_control_update_life_mana ENDP
_TEXT	ENDS
PUBLIC	_UpdateManaFlask
; Function compile flags: /Ogsy
;	COMDAT _UpdateManaFlask
_TEXT	SEGMENT
_maxMana$ = -4
_mana$ = -8
_UpdateManaFlask PROC NEAR				; COMDAT
; Line 925
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	esi
; Line 927
	mov	esi, DWORD PTR _myplr
	imul	esi, 21720				; 000054d8H
	push	edi
	mov	ecx, DWORD PTR _plr[esi+432]
; Line 928
	mov	eax, DWORD PTR _plr[esi+428]
; Line 929
	test	ecx, ecx
	mov	DWORD PTR _maxMana$[ebp], ecx
	mov	DWORD PTR _mana$[ebp], eax
	jge	SHORT $L85506
; Line 930
	and	DWORD PTR _maxMana$[ebp], 0
$L85506:
; Line 931
	test	eax, eax
	jge	SHORT $L85507
; Line 932
	and	DWORD PTR _mana$[ebp], 0
$L85507:
; Line 934
	cmp	DWORD PTR _maxMana$[ebp], 0
	jne	SHORT $L85508
; Line 935
	xor	edi, edi
; Line 936
	jmp	SHORT $L85509
$L85508:
; Line 937
	fild	DWORD PTR _mana$[ebp]
	fidiv	DWORD PTR _maxMana$[ebp]
	fmul	QWORD PTR __real@4054000000000000
	call	__ftol
	mov	edi, eax
$L85509:
; Line 941
	cmp	edi, 69					; 00000045H
	mov	DWORD PTR _plr[esi+436], edi
	jle	SHORT $L85512
; Line 942
	push	69					; 00000045H
	pop	edi
$L85512:
; Line 943
	cmp	edi, 69					; 00000045H
	mov	esi, 528				; 00000210H
	je	SHORT $L85513
; Line 944
	push	512					; 00000200H
	push	esi
	push	85					; 00000055H
	mov	ecx, DWORD PTR _pManaBuff
	pop	eax
	sub	eax, edi
	push	eax
	push	16					; 00000010H
	pop	edx
	call	@SetFlaskHeight@20
$L85513:
; Line 945
	test	edi, edi
	je	SHORT $L85514
; Line 946
	mov	eax, 581				; 00000245H
	mov	ecx, 464				; 000001d0H
	sub	eax, edi
	push	eax
	push	esi
	push	edi
	push	88					; 00000058H
	push	85					; 00000055H
	pop	edx
	sub	edx, edi
	call	@DrawPanelBox@24
$L85514:
; Line 948
	call	_DrawSpell
	pop	edi
	pop	esi
; Line 949
	leave
	ret	0
_UpdateManaFlask ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@OPIC@CtrlPan?2SmalText?4CEL?$AA@	; `string'
PUBLIC	??_C@_0O@CJCK@Data?2Char?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BF@NBJK@CtrlPan?2SpelIcon?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BD@BGAG@CtrlPan?2Panel8?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BE@ECMM@CtrlPan?2P8Bulbs?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@CPCG@CtrlPan?2TalkPanl?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BD@ELKD@CtrlPan?2P8But2?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@LBKC@CtrlPan?2TalkButt?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BF@LANN@CtrlPan?2Panel8bu?4CEL?$AA@	; `string'
PUBLIC	??_C@_0BB@EEDG@Data?2CharBut?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BD@HOOH@Items?2DurIcons?4CEL?$AA@	; `string'
PUBLIC	??_C@_00A@?$AA@					; `string'
PUBLIC	??_C@_0BB@DACB@Data?2SpellBk?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BC@OAJB@Data?2SpellBkB?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BB@IJMO@Data?2SpellI2?4CEL?$AA@		; `string'
PUBLIC	??_C@_0P@BMEF@Data?2Quest?4CEL?$AA@		; `string'
PUBLIC	??_C@_0BF@NPBO@CtrlPan?2Golddrop?4cel?$AA@	; `string'
PUBLIC	_InitControlPan
EXTRN	_pQLogCel:DWORD
EXTRN	_gbMaxPlayers:BYTE
EXTRN	@CelDecodeRect@28:NEAR
EXTRN	@DiabloAllocPtr@4:NEAR
EXTRN	@mem_free_dbg@4:NEAR
EXTRN	@LoadFileInMem@8:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_C@_00A@?$AA@
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??_C@_0BF@OPIC@CtrlPan?2SmalText?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@OPIC@CtrlPan?2SmalText?4CEL?$AA@ DB 'CtrlPan\SmalText.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@CJCK@Data?2Char?4CEL?$AA@
_DATA	SEGMENT
??_C@_0O@CJCK@Data?2Char?4CEL?$AA@ DB 'Data\Char.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NBJK@CtrlPan?2SpelIcon?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@NBJK@CtrlPan?2SpelIcon?4CEL?$AA@ DB 'CtrlPan\SpelIcon.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@BGAG@CtrlPan?2Panel8?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BD@BGAG@CtrlPan?2Panel8?4CEL?$AA@ DB 'CtrlPan\Panel8.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@ECMM@CtrlPan?2P8Bulbs?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BE@ECMM@CtrlPan?2P8Bulbs?4CEL?$AA@ DB 'CtrlPan\P8Bulbs.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@CPCG@CtrlPan?2TalkPanl?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@CPCG@CtrlPan?2TalkPanl?4CEL?$AA@ DB 'CtrlPan\TalkPanl.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@ELKD@CtrlPan?2P8But2?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BD@ELKD@CtrlPan?2P8But2?4CEL?$AA@ DB 'CtrlPan\P8But2.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@LBKC@CtrlPan?2TalkButt?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@LBKC@CtrlPan?2TalkButt?4CEL?$AA@ DB 'CtrlPan\TalkButt.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@LANN@CtrlPan?2Panel8bu?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BF@LANN@CtrlPan?2Panel8bu?4CEL?$AA@ DB 'CtrlPan\Panel8bu.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@EEDG@Data?2CharBut?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BB@EEDG@Data?2CharBut?4CEL?$AA@ DB 'Data\CharBut.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@HOOH@Items?2DurIcons?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BD@HOOH@Items?2DurIcons?4CEL?$AA@ DB 'Items\DurIcons.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@DACB@Data?2SpellBk?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BB@DACB@Data?2SpellBk?4CEL?$AA@ DB 'Data\SpellBk.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@OAJB@Data?2SpellBkB?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BC@OAJB@Data?2SpellBkB?4CEL?$AA@ DB 'Data\SpellBkB.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@IJMO@Data?2SpellI2?4CEL?$AA@
_DATA	SEGMENT
??_C@_0BB@IJMO@Data?2SpellI2?4CEL?$AA@ DB 'Data\SpellI2.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@BMEF@Data?2Quest?4CEL?$AA@
_DATA	SEGMENT
??_C@_0P@BMEF@Data?2Quest?4CEL?$AA@ DB 'Data\Quest.CEL', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@NPBO@CtrlPan?2Golddrop?4cel?$AA@
_DATA	SEGMENT
??_C@_0BF@NPBO@CtrlPan?2Golddrop?4cel?$AA@ DB 'CtrlPan\Golddrop.cel', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _InitControlPan
_TEXT	SEGMENT
_InitControlPan PROC NEAR				; COMDAT
; Line 960
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	ebx
	push	esi
	push	edi
	mov	esi, 92160				; 00016800H
	je	SHORT $L85521
; Line 961
	mov	esi, 184320				; 0002d000H
$L85521:
; Line 962
	mov	ecx, esi
	call	@DiabloAllocPtr@4
; Line 963
	xor	ebx, ebx
	push	esi
	push	ebx
	push	eax
	mov	DWORD PTR _pBtmBuff, eax
	call	_memset
; Line 964
	mov	esi, 7744				; 00001e40H
	add	esp, 12					; 0000000cH
	mov	ecx, esi
	call	@DiabloAllocPtr@4
; Line 965
	push	esi
	push	ebx
	push	eax
	mov	DWORD PTR _pManaBuff, eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 966
	mov	ecx, esi
	call	@DiabloAllocPtr@4
; Line 967
	push	esi
	push	ebx
	push	eax
	mov	DWORD PTR _pLifeBuff, eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 968
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@OPIC@CtrlPan?2SmalText?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 969
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0O@CJCK@Data?2Char?4CEL?$AA@ ; `string'
	mov	DWORD PTR _pPanelText, eax
	call	@LoadFileInMem@8
; Line 970
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@NBJK@CtrlPan?2SpelIcon?4CEL?$AA@ ; `string'
	mov	DWORD PTR _pChrPanel, eax
	call	@LoadFileInMem@8
; Line 971
	xor	cl, cl
	mov	DWORD PTR _pSpellCels, eax
	call	@SetSpellTrans@4
; Line 972
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BD@BGAG@CtrlPan?2Panel8?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 973
	mov	ecx, DWORD PTR _pBtmBuff
	xor	edi, edi
	mov	esi, 640				; 00000280H
	inc	edi
	push	esi
	push	edi
	push	eax
	push	esi
	push	143					; 0000008fH
	xor	edx, edx
	mov	DWORD PTR _pStatusPanel, eax
	call	@CelDecodeRect@28
; Line 974
	mov	ecx, DWORD PTR _pStatusPanel
; Line 975
	mov	DWORD PTR _pStatusPanel, ebx
; Line 976
	call	@mem_free_dbg@4
; Line 977
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BE@ECMM@CtrlPan?2P8Bulbs?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 978
	mov	ecx, DWORD PTR _pLifeBuff
	push	88					; 00000058H
	push	edi
	push	eax
	push	88					; 00000058H
	push	87					; 00000057H
	xor	edx, edx
	mov	DWORD PTR _pStatusPanel, eax
	call	@CelDecodeRect@28
; Line 979
	mov	ecx, DWORD PTR _pManaBuff
	push	88					; 00000058H
	push	2
	xor	edx, edx
	push	DWORD PTR _pStatusPanel
	push	88					; 00000058H
	push	87					; 00000057H
	call	@CelDecodeRect@28
; Line 980
	mov	ecx, DWORD PTR _pStatusPanel
; Line 981
	mov	DWORD PTR _pStatusPanel, ebx
; Line 982
	call	@mem_free_dbg@4
; Line 984
	cmp	BYTE PTR _gbMaxPlayers, 1
	mov	DWORD PTR _talkflag, ebx
	je	$L85533
; Line 985
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@CPCG@CtrlPan?2TalkPanl?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 986
	mov	ecx, DWORD PTR _pBtmBuff
	push	esi
	push	edi
	push	eax
	push	esi
	push	287					; 0000011fH
	xor	edx, edx
	mov	DWORD PTR _pTalkPanel, eax
	call	@CelDecodeRect@28
; Line 987
	mov	ecx, DWORD PTR _pTalkPanel
; Line 988
	mov	DWORD PTR _pTalkPanel, ebx
; Line 989
	call	@mem_free_dbg@4
; Line 990
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BD@ELKD@CtrlPan?2P8But2?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 991
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@LBKC@CtrlPan?2TalkButt?4CEL?$AA@ ; `string'
	mov	DWORD PTR _pMultiBtns, eax
	call	@LoadFileInMem@8
	mov	DWORD PTR _pTalkBtns, eax
; Line 992
	mov	DWORD PTR _sgbPlrTalkTbl, ebx
; Line 993
	mov	DWORD PTR _byte_4B894C, 16843009	; 01010101H
; Line 994
	mov	DWORD PTR _talkbtndown, ebx
; Line 995
	mov	DWORD PTR _talkbtndown+4, ebx
; Line 996
	mov	BYTE PTR _sgszTalkMsg, bl
; Line 997
	mov	DWORD PTR _talkbtndown+8, ebx
$L85533:
; Line 1001
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@LANN@CtrlPan?2Panel8bu?4CEL?$AA@ ; `string'
	mov	DWORD PTR _panelflag, ebx
	mov	DWORD PTR _lvlbtndown, ebx
	call	@LoadFileInMem@8
; Line 1002
	push	32					; 00000020H
	push	ebx
	push	OFFSET FLAT:_panbtn
	mov	DWORD PTR _pPanelButtons, eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1004
	xor	eax, eax
	cmp	BYTE PTR _gbMaxPlayers, 1
; Line 1005
	mov	ecx, OFFSET FLAT:??_C@_0BB@EEDG@Data?2CharBut?4CEL?$AA@ ; `string'
	mov	DWORD PTR _panbtndown, ebx
	setne	al
	xor	edx, edx
	lea	eax, DWORD PTR [eax+eax+6]
	mov	DWORD PTR _numpanbtns, eax
	call	@LoadFileInMem@8
; Line 1011
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BD@HOOH@Items?2DurIcons?4CEL?$AA@ ; `string'
	mov	DWORD PTR _pChrButtons, eax
	mov	DWORD PTR _chrbtn, ebx
	mov	DWORD PTR _chrbtn+4, ebx
	mov	DWORD PTR _chrbtn+8, ebx
	mov	DWORD PTR _chrbtnactive, ebx
	mov	DWORD PTR _chrbtn+12, ebx
	call	@LoadFileInMem@8
; Line 1012
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	push	OFFSET FLAT:_infostr
	mov	DWORD PTR _pDurIcons, eax
	call	_strcpy
	pop	ecx
	pop	ecx
; Line 1013
	call	_ClearPanel
; Line 1018
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BB@DACB@Data?2SpellBk?4CEL?$AA@ ; `string'
	mov	DWORD PTR _drawhpflag, edi
	mov	DWORD PTR _drawmanaflag, edi
	mov	DWORD PTR _chrflag, ebx
	mov	DWORD PTR _spselflag, ebx
	call	@LoadFileInMem@8
; Line 1019
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BC@OAJB@Data?2SpellBkB?4CEL?$AA@ ; `string'
	mov	DWORD PTR _pSpellBkCel, eax
	call	@LoadFileInMem@8
; Line 1020
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BB@IJMO@Data?2SpellI2?4CEL?$AA@ ; `string'
	mov	DWORD PTR _pSBkBtnCel, eax
	call	@LoadFileInMem@8
	mov	DWORD PTR _pSBkIconCels, eax
; Line 1023
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR _sbooktab, ebx
	mov	DWORD PTR _sbookflag, ebx
	mov	al, BYTE PTR _plr[eax+352]
	cmp	al, bl
	jne	SHORT $L85547
; Line 1024
	mov	DWORD PTR _SpellPages, 26		; 0000001aH
; Line 1025
	jmp	SHORT $L85551
$L85547:
	cmp	al, 1
	jne	SHORT $L85549
; Line 1026
	mov	DWORD PTR _SpellPages, 28		; 0000001cH
; Line 1027
	jmp	SHORT $L85551
$L85549:
	cmp	al, 2
	jne	SHORT $L85551
; Line 1028
	mov	DWORD PTR _SpellPages, 27		; 0000001bH
$L85551:
; Line 1030
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0P@BMEF@Data?2Quest?4CEL?$AA@ ; `string'
	call	@LoadFileInMem@8
; Line 1031
	xor	edx, edx
	mov	ecx, OFFSET FLAT:??_C@_0BF@NPBO@CtrlPan?2Golddrop?4cel?$AA@ ; `string'
	mov	DWORD PTR _pQLogCel, eax
	call	@LoadFileInMem@8
; Line 1032
	mov	DWORD PTR _frame_4B8800, edi
	pop	edi
; Line 1033
	mov	DWORD PTR _dropGoldFlag, ebx
; Line 1034
	mov	DWORD PTR _dropGoldValue, ebx
; Line 1035
	mov	DWORD PTR _initialDropGoldValue, ebx
; Line 1036
	mov	DWORD PTR _initialDropGoldIndex, ebx
	pop	esi
; Line 1037
	mov	DWORD PTR _pGBoxBuff, eax
	pop	ebx
; Line 1038
	ret	0
_InitControlPan ENDP
_TEXT	ENDS
PUBLIC	_DrawInfoBox
PUBLIC	_ClearCtrlPan
; Function compile flags: /Ogsy
;	COMDAT _ClearCtrlPan
_TEXT	SEGMENT
_ClearCtrlPan PROC NEAR					; COMDAT
; Line 1053
	mov	eax, DWORD PTR _sgbPlrTalkTbl
	push	512					; 00000200H
	push	64					; 00000040H
	push	128					; 00000080H
	push	640					; 00000280H
	lea	edx, DWORD PTR [eax+16]
	xor	ecx, ecx
	call	@DrawPanelBox@24
; Line 1054
	jmp	_DrawInfoBox
_ClearCtrlPan ENDP
_TEXT	ENDS
PUBLIC	_DrawCtrlPan
EXTRN	_FriendlyMode:DWORD
EXTRN	@CelDecodeOnly@20:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DrawCtrlPan
_TEXT	SEGMENT
_DrawCtrlPan PROC NEAR					; COMDAT
; Line 1059
	push	esi
	push	edi
; Line 1065
	xor	edi, edi
	mov	esi, OFFSET FLAT:_PanBtnPos+4
$L85561:
; Line 1069
	cmp	DWORD PTR _panbtn[edi*4], 0
	mov	ecx, DWORD PTR [esi-4]
	je	SHORT $L85564
; Line 1070
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edi+1]
	push	71					; 00000047H
	push	eax
	push	DWORD PTR _pPanelButtons
	add	edx, 178				; 000000b2H
	add	ecx, 64					; 00000040H
	call	@CelDecodeOnly@20
; Line 1071
	jmp	SHORT $L85565
$L85564:
; Line 1072
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [eax+160]
	push	edx
	lea	edx, DWORD PTR [ecx+64]
	push	edx
	push	20					; 00000014H
	push	71					; 00000047H
	lea	edx, DWORD PTR [eax-336]
	call	@DrawPanelBox@24
$L85565:
; Line 1073
	inc	edi
; Line 1074
	add	esi, 20					; 00000014H
; Line 1075
	cmp	edi, 6
	jl	SHORT $L85561
; Line 1076
	cmp	DWORD PTR _numpanbtns, 8
	jne	SHORT $L85566
; Line 1077
	mov	eax, DWORD PTR _panbtn+24
	push	33					; 00000021H
	inc	eax
	mov	esi, 634				; 0000027aH
	push	eax
	mov	edx, esi
	push	DWORD PTR _pMultiBtns
	mov	ecx, 151				; 00000097H
	call	@CelDecodeOnly@20
; Line 1078
	cmp	DWORD PTR _FriendlyMode, 0
; Line 1079
	mov	eax, DWORD PTR _panbtn+28
	je	SHORT $L85567
	add	eax, 3
; Line 1080
	jmp	SHORT $L85568
$L85567:
; Line 1081
	add	eax, 5
$L85568:
; Line 1082
	push	33					; 00000021H
	push	eax
	push	DWORD PTR _pMultiBtns
	mov	edx, esi
	mov	ecx, 591				; 0000024fH
	call	@CelDecodeOnly@20
$L85566:
	pop	edi
	pop	esi
; Line 1084
	ret	0
_DrawCtrlPan ENDP
_TEXT	ENDS
PUBLIC	_DoSpeedBook
EXTRN	__imp__SetCursorPos@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DoSpeedBook
_TEXT	SEGMENT
_spells$ = -32
_spell$ = -32
_xo$ = -4
_yo$ = -8
_X$ = -24
_Y$ = -20
_i$ = -12
_j$ = -16
_DoSpeedBook PROC NEAR					; COMDAT
; Line 1089
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 1098
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	xor	ebx, ebx
	mov	DWORD PTR _xo$[ebp], 636		; 0000027cH
	inc	ebx
	cmp	DWORD PTR _plr[eax+180], -1
	mov	DWORD PTR _spselflag, ebx
	mov	DWORD PTR _yo$[ebp], 495		; 000001efH
	mov	DWORD PTR _X$[ebp], 600			; 00000258H
	mov	DWORD PTR _Y$[ebp], 307			; 00000133H
	je	$L85581
; Line 1099
	and	DWORD PTR _i$[ebp], 0
	push	esi
	mov	esi, DWORD PTR _spells$[ebp]
	push	edi
	mov	edi, DWORD PTR _spells$[ebp+4]
	jmp	SHORT $L85579
$L86800:
	xor	ebx, ebx
	inc	ebx
$L85579:
; Line 1100
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 0
	je	SHORT $L85586
	dec	ecx
	je	SHORT $L85587
	dec	ecx
	je	SHORT $L85588
	dec	ecx
	jne	SHORT $L85583
; Line 1111
	mov	esi, DWORD PTR _plr[eax+21576]
	mov	edi, DWORD PTR _plr[eax+21580]
; Line 1112
	jmp	SHORT $L85583
$L85588:
; Line 1108
	mov	esi, DWORD PTR _plr[eax+280]
	mov	edi, DWORD PTR _plr[eax+284]
; Line 1109
	jmp	SHORT $L85583
$L85587:
; Line 1105
	mov	esi, DWORD PTR _plr[eax+264]
	mov	edi, DWORD PTR _plr[eax+268]
; Line 1106
	jmp	SHORT $L85583
$L85586:
; Line 1102
	mov	esi, DWORD PTR _plr[eax+272]
	mov	edi, DWORD PTR _plr[eax+276]
$L85583:
; Line 1114
	and	DWORD PTR _spell$[ebp+4], 0
; Line 1115
	mov	DWORD PTR _j$[ebp], ebx
$L85591:
; Line 1116
	mov	edx, DWORD PTR _spell$[ebp+4]
	mov	ecx, ebx
	and	ecx, esi
	and	edx, edi
	or	ecx, edx
	je	SHORT $L85596
; Line 1117
	mov	ecx, DWORD PTR _plr[eax+180]
	cmp	DWORD PTR _j$[ebp], ecx
	jne	SHORT $L85595
	movsx	ecx, BYTE PTR _plr[eax+184]
	cmp	DWORD PTR _i$[ebp], ecx
	jne	SHORT $L85595
; Line 1118
	mov	ecx, DWORD PTR _xo$[ebp]
	add	ecx, -36				; ffffffdcH
	mov	DWORD PTR _X$[ebp], ecx
	mov	ecx, DWORD PTR _yo$[ebp]
	add	ecx, -188				; ffffff44H
	mov	DWORD PTR _Y$[ebp], ecx
$L85595:
; Line 1121
	sub	DWORD PTR _xo$[ebp], 56			; 00000038H
; Line 1122
	cmp	DWORD PTR _xo$[ebp], 20			; 00000014H
	jne	SHORT $L85596
; Line 1124
	sub	DWORD PTR _yo$[ebp], 56			; 00000038H
	mov	DWORD PTR _xo$[ebp], 636		; 0000027cH
$L85596:
; Line 1127
	mov	ecx, DWORD PTR _spell$[ebp+4]
	shld	ecx, ebx, 1
	add	ebx, ebx
	inc	DWORD PTR _j$[ebp]
	cmp	DWORD PTR _j$[ebp], 37			; 00000025H
	mov	DWORD PTR _spell$[ebp+4], ecx
	jl	SHORT $L85591
; Line 1129
	mov	ecx, esi
	or	ecx, edi
	je	SHORT $L85598
	cmp	DWORD PTR _xo$[ebp], 636		; 0000027cH
	je	SHORT $L85598
; Line 1130
	sub	DWORD PTR _xo$[ebp], 56			; 00000038H
$L85598:
; Line 1131
	cmp	DWORD PTR _xo$[ebp], 20			; 00000014H
	jne	SHORT $L85580
; Line 1133
	sub	DWORD PTR _yo$[ebp], 56			; 00000038H
	mov	DWORD PTR _xo$[ebp], 636		; 0000027cH
$L85580:
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 4
	jl	$L86800
	pop	edi
	pop	esi
$L85581:
; Line 1138
	push	DWORD PTR _Y$[ebp]
	push	DWORD PTR _X$[ebp]
	call	DWORD PTR __imp__SetCursorPos@8
	pop	ebx
; Line 1139
	leave
	ret	0
_DoSpeedBook ENDP
_TEXT	ENDS
PUBLIC	_DoPanBtn
EXTRN	_gamemenu_off:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DoPanBtn
_TEXT	SEGMENT
_DoPanBtn PROC NEAR					; COMDAT
; Line 1151
	mov	edx, DWORD PTR _MouseX
	push	ebx
; Line 1153
	mov	ebx, DWORD PTR _numpanbtns
	push	esi
	mov	esi, DWORD PTR _MouseY
	push	edi
; Line 1154
	xor	edi, edi
; Line 1155
	test	ebx, ebx
	jle	SHORT $L85610
; Line 1156
	mov	eax, OFFSET FLAT:_PanBtnPos+4
	push	ebp
$L85608:
; Line 1158
	mov	ecx, DWORD PTR [eax-4]
	cmp	edx, ecx
	jl	SHORT $L85612
	mov	ebp, DWORD PTR [eax+4]
	add	ebp, ecx
	cmp	edx, ebp
	jg	SHORT $L85612
; Line 1159
	mov	ecx, DWORD PTR [eax]
; Line 1160
	cmp	esi, ecx
	jl	SHORT $L85612
	mov	ebp, DWORD PTR [eax+8]
	add	ebp, ecx
	cmp	esi, ebp
	jg	SHORT $L85612
; Line 1161
	xor	ecx, ecx
	inc	ecx
	mov	DWORD PTR _panbtn[edi*4], ecx
; Line 1162
	mov	DWORD PTR _drawbtnflag, ecx
; Line 1163
	mov	DWORD PTR _panbtndown, ecx
$L85612:
; Line 1166
	inc	edi
; Line 1167
	add	eax, 20					; 00000014H
; Line 1168
	cmp	edi, ebx
	jl	SHORT $L85608
	pop	ebp
$L85610:
; Line 1170
	cmp	DWORD PTR _spselflag, 0
	jne	SHORT $L85613
	cmp	edx, 565				; 00000235H
	jl	SHORT $L85613
	cmp	edx, 621				; 0000026dH
	jge	SHORT $L85613
	cmp	esi, 416				; 000001a0H
	jl	SHORT $L85613
	cmp	esi, 472				; 000001d8H
	jge	SHORT $L85613
; Line 1171
	call	_DoSpeedBook
	pop	edi
	pop	esi
	pop	ebx
; Line 1172
	jmp	_gamemenu_off
$L85613:
	pop	edi
	pop	esi
	pop	ebx
; Line 1174
	ret	0
_DoPanBtn ENDP
_TEXT	ENDS
PUBLIC	@control_set_button_down@4
; Function compile flags: /Ogsy
;	COMDAT @control_set_button_down@4
_TEXT	SEGMENT
@control_set_button_down@4 PROC NEAR			; COMDAT
; _btn_id$ = ecx
; Line 1181
	xor	eax, eax
	inc	eax
	mov	DWORD PTR _panbtn[ecx*4], eax
; Line 1182
	mov	DWORD PTR _drawbtnflag, eax
; Line 1183
	mov	DWORD PTR _panbtndown, eax
; Line 1184
	ret	0
@control_set_button_down@4 ENDP
_TEXT	ENDS
PUBLIC	_control_check_btn_press
; Function compile flags: /Ogsy
;	COMDAT _control_check_btn_press
_TEXT	SEGMENT
_control_check_btn_press PROC NEAR			; COMDAT
; Line 1192
	mov	edx, DWORD PTR _MouseX
; Line 1197
	mov	eax, DWORD PTR _PanBtnPos+60
	push	esi
	mov	esi, DWORD PTR _MouseY
	cmp	edx, eax
	jl	SHORT $L85620
	mov	ecx, DWORD PTR _PanBtnPos+68
	add	ecx, eax
	cmp	edx, ecx
	jg	SHORT $L85620
	mov	eax, DWORD PTR _PanBtnPos+64
	cmp	esi, eax
	jl	SHORT $L85620
	mov	ecx, DWORD PTR _PanBtnPos+72
	add	ecx, eax
	cmp	esi, ecx
	jg	SHORT $L85620
; Line 1198
	push	3
	pop	ecx
	call	@control_set_button_down@4
$L85620:
; Line 1203
	mov	eax, DWORD PTR _PanBtnPos+120
	cmp	edx, eax
	jl	SHORT $L85621
	mov	ecx, DWORD PTR _PanBtnPos+128
	add	ecx, eax
	cmp	edx, ecx
	jg	SHORT $L85621
	mov	eax, DWORD PTR _PanBtnPos+124
	cmp	esi, eax
	jl	SHORT $L85621
	mov	ecx, DWORD PTR _PanBtnPos+132
	add	ecx, eax
	cmp	esi, ecx
	jg	SHORT $L85621
; Line 1204
	push	6
	pop	ecx
	pop	esi
	jmp	@control_set_button_down@4
$L85621:
	pop	esi
; Line 1206
	ret	0
_control_check_btn_press ENDP
_TEXT	ENDS
PUBLIC	_DoAutoMap
EXTRN	_automapflag:DWORD
EXTRN	_StartAutomap:NEAR
EXTRN	@InitDiabloMsg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DoAutoMap
_TEXT	SEGMENT
_DoAutoMap PROC NEAR					; COMDAT
; Line 1210
	xor	eax, eax
	cmp	BYTE PTR _currlevel, al
	jne	SHORT $L85624
	mov	cl, 1
	cmp	BYTE PTR _gbMaxPlayers, cl
	jne	SHORT $L85624
; Line 1216
	jmp	@InitDiabloMsg@4
$L85624:
; Line 1211
	cmp	DWORD PTR _automapflag, eax
	je	SHORT $L85625
; Line 1212
	mov	DWORD PTR _automapflag, eax
; Line 1218
	ret	0
$L85625:
; Line 1214
	jmp	_StartAutomap
_DoAutoMap ENDP
_TEXT	ENDS
PUBLIC	_CheckPanelInfo
PUBLIC	??_C@_0BA@DDBG@Player?5friendly?$AA@		; `string'
PUBLIC	??_C@_0O@OEGM@Player?5attack?$AA@		; `string'
PUBLIC	??_C@_0M@PDPG@Hotkey?5?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BM@KDOG@Select?5current?5spell?5button?$AA@ ; `string'
PUBLIC	??_C@_0N@EMNL@Hotkey?5?3?5?8s?8?$AA@		; `string'
EXTRN	_pcursinvitem:BYTE
EXTRN	_CheckInvHLight:NEAR
;	COMDAT ??_C@_0BA@DDBG@Player?5friendly?$AA@
_DATA	SEGMENT
??_C@_0BA@DDBG@Player?5friendly?$AA@ DB 'Player friendly', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@OEGM@Player?5attack?$AA@
_DATA	SEGMENT
??_C@_0O@OEGM@Player?5attack?$AA@ DB 'Player attack', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@PDPG@Hotkey?5?3?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0M@PDPG@Hotkey?5?3?5?$CFs?$AA@ DB 'Hotkey : %s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@KDOG@Select?5current?5spell?5button?$AA@
_DATA	SEGMENT
??_C@_0BM@KDOG@Select?5current?5spell?5button?$AA@ DB 'Select current spe'
	DB	'll button', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@EMNL@Hotkey?5?3?5?8s?8?$AA@
_DATA	SEGMENT
??_C@_0N@EMNL@Hotkey?5?3?5?8s?8?$AA@ DB 'Hotkey : ''s''', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _CheckPanelInfo
_TEXT	SEGMENT
_v12$ = -4
_CheckPanelInfo PROC NEAR				; COMDAT
; Line 1222
	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1237
	xor	edi, edi
; Line 1238
	mov	DWORD PTR _panelflag, edi
; Line 1239
	call	_ClearPanel
; Line 1240
	xor	ebp, ebp
	mov	ebx, OFFSET FLAT:_infostr
	inc	ebp
	cmp	DWORD PTR _numpanbtns, edi
	mov	esi, OFFSET FLAT:_tempstr
	jle	$L85645
$L85643:
; Line 1243
	lea	eax, DWORD PTR [edi+edi*4]
	shl	eax, 2
	mov	ecx, DWORD PTR _PanBtnPos[eax]
; Line 1244
	cmp	DWORD PTR _MouseX, ecx
	jl	$L85647
	mov	edx, DWORD PTR _PanBtnPos[eax+8]
	add	edx, ecx
	cmp	DWORD PTR _MouseX, edx
	jg	SHORT $L85647
; Line 1245
	mov	ecx, DWORD PTR _PanBtnPos[eax+4]
; Line 1246
	mov	edx, DWORD PTR _MouseY
	cmp	edx, ecx
	jl	SHORT $L85647
	mov	eax, DWORD PTR _PanBtnPos[eax+12]
	add	eax, ecx
	cmp	edx, eax
	jg	SHORT $L85647
; Line 1247
	cmp	edi, 7
	jne	SHORT $L85648
; Line 1248
	cmp	DWORD PTR _FriendlyMode, 0
	je	SHORT $L85649
; Line 1249
	push	OFFSET FLAT:??_C@_0BA@DDBG@Player?5friendly?$AA@ ; `string'
; Line 1250
	jmp	SHORT $L86834
$L85649:
; Line 1251
	push	OFFSET FLAT:??_C@_0O@OEGM@Player?5attack?$AA@ ; `string'
; Line 1252
	jmp	SHORT $L86834
$L85648:
; Line 1253
	push	DWORD PTR _PanBtnStr[edi*4]
$L86834:
	push	ebx
	call	_strcpy
; Line 1255
	mov	eax, DWORD PTR _PanBtnHotKey[edi*4]
	pop	ecx
	test	eax, eax
	pop	ecx
	je	SHORT $L85654
; Line 1256
	push	eax
	push	OFFSET FLAT:??_C@_0M@PDPG@Hotkey?5?3?5?$CFs?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1257
	mov	edx, ebp
	mov	ecx, esi
	call	@AddPanelString@8
$L85654:
; Line 1259
	and	DWORD PTR _infoclr, 0
; Line 1260
	mov	DWORD PTR _panelflag, ebp
; Line 1261
	mov	DWORD PTR _pinfoflag, ebp
$L85647:
; Line 1264
	inc	edi
; Line 1265
	cmp	edi, DWORD PTR _numpanbtns
	jl	$L85643
$L85645:
; Line 1267
	cmp	DWORD PTR _spselflag, 0
	jne	$L85662
	mov	eax, DWORD PTR _MouseX
	cmp	eax, 565				; 00000235H
	jl	$L85662
	cmp	eax, 621				; 0000026dH
	jge	$L85662
	mov	eax, DWORD PTR _MouseY
	cmp	eax, 416				; 000001a0H
	jl	$L85662
	cmp	eax, 472				; 000001d8H
	jge	$L85662
; Line 1268
	push	OFFSET FLAT:??_C@_0BM@KDOG@Select?5current?5spell?5button?$AA@ ; `string'
	push	ebx
	call	_strcpy
; Line 1269
	xor	ebx, ebx
; Line 1272
	push	OFFSET FLAT:??_C@_0N@EMNL@Hotkey?5?3?5?8s?8?$AA@ ; `string'
	push	esi
	mov	DWORD PTR _infoclr, ebx
	mov	DWORD PTR _panelflag, ebp
	mov	DWORD PTR _pinfoflag, ebp
	call	_strcpy
	add	esp, 16					; 00000010H
; Line 1273
	mov	edx, ebp
	mov	ecx, esi
	call	@AddPanelString@8
; Line 1274
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	edi, DWORD PTR _plr[eax+180]
; Line 1275
	cmp	edi, -1
	je	$L85662
; Line 1276
	movzx	eax, BYTE PTR _plr[eax+184]
	sub	eax, ebx
	je	$L85665
	dec	eax
	je	$L85667
	dec	eax
	je	SHORT $L85671
	dec	eax
	jne	$L85662
; Line 1323
	imul	edi, 56					; 00000038H
	push	DWORD PTR _spelldata[edi+4]
	push	OFFSET FLAT:??_C@_0M@ELHC@Staff?5of?5?$CFs?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1324
	mov	edx, ebp
	mov	ecx, esi
	call	@AddPanelString@8
; Line 1325
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+2592]
	cmp	eax, ebp
	jne	SHORT $L85686
; Line 1326
	push	OFFSET FLAT:??_C@_08LHHI@1?5Charge?$AA@	; `string'
; Line 1327
	jmp	$L86836
$L85686:
; Line 1328
	push	eax
	push	OFFSET FLAT:??_C@_0L@EGBE@?$CFi?5Charges?$AA@ ; `string'
; Line 1329
	jmp	$L86835
$L85671:
; Line 1294
	mov	eax, edi
	imul	eax, 56					; 00000038H
	push	DWORD PTR _spelldata[eax+4]
	push	OFFSET FLAT:??_C@_0N@OHJB@Scroll?5of?5?$CFs?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1295
	mov	edx, ebp
	mov	ecx, esi
	call	@AddPanelString@8
; Line 1298
	mov	eax, DWORD PTR _myplr
	mov	DWORD PTR _v12$[esp+20], ebx
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+18188]
	cmp	ecx, ebx
	jle	SHORT $L85675
; Line 1299
	lea	edx, DWORD PTR _plr[eax+3688]
$L85673:
; Line 1302
	cmp	DWORD PTR [edx-212], -1
	je	SHORT $L85676
	mov	ebx, DWORD PTR [edx]
	cmp	ebx, 21					; 00000015H
	je	SHORT $L85677
	cmp	ebx, 22					; 00000016H
	jne	SHORT $L85676
$L85677:
	cmp	DWORD PTR [edx+4], edi
	jne	SHORT $L85676
; Line 1303
	inc	DWORD PTR _v12$[esp+20]
$L85676:
; Line 1304
	add	edx, 368				; 00000170H
; Line 1305
	dec	ecx
; Line 1306
	jne	SHORT $L85673
$L85675:
; Line 1308
	mov	edx, DWORD PTR _v12$[esp+20]
	push	8
; Line 1309
	lea	eax, DWORD PTR _plr[eax+18452]
	pop	ebx
$L85678:
; Line 1312
	cmp	DWORD PTR [eax-212], -1
	je	SHORT $L85681
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 21					; 00000015H
	je	SHORT $L85682
	cmp	ecx, 22					; 00000016H
	jne	SHORT $L85681
$L85682:
	cmp	DWORD PTR [eax+4], edi
	jne	SHORT $L85681
; Line 1313
	inc	edx
$L85681:
; Line 1314
	add	eax, 368				; 00000170H
; Line 1316
	dec	ebx
	jne	SHORT $L85678
; Line 1317
	cmp	edx, ebp
	jne	SHORT $L85683
; Line 1318
	push	OFFSET FLAT:??_C@_08ONPP@1?5Scroll?$AA@	; `string'
$L86836:
	push	esi
	call	_strcpy
$L86837:
	pop	ecx
	pop	ecx
; Line 1319
	jmp	SHORT $LABEL_54$85666
$L85683:
; Line 1320
	push	edx
	push	OFFSET FLAT:??_C@_0L@FEEO@?$CFi?5Scrolls?$AA@ ; `string'
; Line 1321
	jmp	SHORT $L86835
$L85667:
; Line 1283
	mov	eax, edi
	imul	eax, 56					; 00000038H
	push	DWORD PTR _spelldata[eax+4]
	push	OFFSET FLAT:??_C@_08DAAM@?$CFs?5Spell?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1284
	mov	edx, ebp
	mov	ecx, esi
	call	@AddPanelString@8
; Line 1285
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+edi+193]
	movsx	eax, BYTE PTR _plr[eax+21592]
	add	ecx, eax
; Line 1286
	jns	SHORT $L85668
; Line 1287
	xor	ecx, ecx
$L85668:
; Line 1288
	cmp	ecx, ebx
	je	SHORT $L85669
; Line 1289
	push	ecx
	push	OFFSET FLAT:??_C@_0P@EMPL@Spell?5Level?5?$CFi?$AA@ ; `string'
; Line 1290
	jmp	SHORT $L86835
$L85669:
; Line 1291
	push	OFFSET FLAT:??_C@_0BJ@FKGC@Spell?5Level?50?5?9?5Unusable?$AA@ ; `string'
	push	esi
	call	_sprintf
; Line 1292
	jmp	SHORT $L86837
$L85665:
; Line 1278
	imul	edi, 56					; 00000038H
	push	DWORD PTR _spelldata[edi+8]
	push	OFFSET FLAT:??_C@_08PIKE@?$CFs?5Skill?$AA@ ; `string'
$L86835:
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
$LABEL_54$85666:
; Line 1280
	mov	edx, ebp
	mov	ecx, esi
	call	@AddPanelString@8
$L85662:
; Line 1333
	mov	eax, DWORD PTR _MouseX
	pop	edi
	pop	esi
	pop	ebp
	cmp	eax, 190				; 000000beH
	pop	ebx
	jle	SHORT $L85688
	cmp	eax, 437				; 000001b5H
	jge	SHORT $L85688
	mov	eax, DWORD PTR _MouseY
	cmp	eax, 356				; 00000164H
	jle	SHORT $L85688
	cmp	eax, 385				; 00000181H
	jge	SHORT $L85688
; Line 1334
	call	_CheckInvHLight
	mov	BYTE PTR _pcursinvitem, al
$L85688:
; Line 1335
	pop	ecx
	ret	0
_CheckPanelInfo ENDP
_TEXT	ENDS
PUBLIC	_CheckBtnUp
PUBLIC	_control_type_message
PUBLIC	_control_reset_talk
EXTRN	_questlog:DWORD
EXTRN	_StartQuestlog:NEAR
EXTRN	_invflag:DWORD
EXTRN	_qtextflag:BYTE
EXTRN	_gamemenu_handle_previous:NEAR
; Function compile flags: /Ogsy
;	COMDAT _CheckBtnUp
_TEXT	SEGMENT
_v6$ = -1
_CheckBtnUp PROC NEAR					; COMDAT
; Line 1344
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 1355
	xor	ebx, ebx
	push	esi
	push	edi
	mov	BYTE PTR _v6$[ebp], 1
	mov	DWORD PTR _drawbtnflag, 1
	mov	DWORD PTR _panbtndown, ebx
; Line 1356
	xor	esi, esi
$L85697:
; Line 1358
	lea	eax, DWORD PTR _panbtn[esi*4]
; Line 1359
	cmp	DWORD PTR [eax], ebx
	je	$L85721
; Line 1364
	mov	edx, DWORD PTR _MouseX
	mov	DWORD PTR [eax], ebx
	lea	eax, DWORD PTR [esi+esi*4]
	shl	eax, 2
	mov	ecx, DWORD PTR _PanBtnPos[eax]
	cmp	edx, ecx
	jl	$L85721
	mov	edi, DWORD PTR _PanBtnPos[eax+8]
	add	edi, ecx
	cmp	edx, edi
	jg	$L85721
; Line 1365
	mov	ecx, DWORD PTR _PanBtnPos[eax+4]
; Line 1366
	mov	edx, DWORD PTR _MouseY
	cmp	edx, ecx
	jl	$L85721
	mov	eax, DWORD PTR _PanBtnPos[eax+12]
	add	eax, ecx
	cmp	edx, eax
	jg	$L85721
; Line 1367
	cmp	esi, 7
	ja	$L85721
	jmp	DWORD PTR $L86842[esi*4]
$L85707:
; Line 1370
	xor	eax, eax
	cmp	DWORD PTR _chrflag, ebx
	mov	DWORD PTR _questlog, ebx
	sete	al
	mov	DWORD PTR _chrflag, eax
; Line 1371
	jmp	$L85721
$L85708:
; Line 1374
	cmp	DWORD PTR _questlog, ebx
	mov	DWORD PTR _chrflag, ebx
	je	SHORT $L85709
; Line 1375
	mov	DWORD PTR _questlog, ebx
; Line 1376
	jmp	$L85721
$L85709:
; Line 1377
	call	_StartQuestlog
; Line 1378
	jmp	$L85721
$L85711:
; Line 1380
	call	_DoAutoMap
; Line 1381
	jmp	$L85721
$L85712:
; Line 1383
	mov	BYTE PTR _qtextflag, bl
; Line 1384
	call	_gamemenu_handle_previous
; Line 1385
	mov	BYTE PTR _v6$[ebp], bl
; Line 1386
	jmp	SHORT $L85721
$L85713:
; Line 1389
	xor	eax, eax
	cmp	DWORD PTR _invflag, ebx
	mov	DWORD PTR _sbookflag, ebx
	sete	al
; Line 1390
	cmp	DWORD PTR _dropGoldFlag, ebx
	mov	DWORD PTR _invflag, eax
	je	SHORT $L85721
; Line 1391
	mov	DWORD PTR _dropGoldFlag, ebx
; Line 1392
	mov	DWORD PTR _dropGoldValue, ebx
; Line 1394
	jmp	SHORT $L85721
$L85715:
; Line 1397
	cmp	DWORD PTR _dropGoldFlag, ebx
	mov	DWORD PTR _invflag, ebx
	je	SHORT $L85716
; Line 1398
	mov	DWORD PTR _dropGoldFlag, ebx
; Line 1399
	mov	DWORD PTR _dropGoldValue, ebx
$L85716:
; Line 1401
	xor	eax, eax
	cmp	DWORD PTR _sbookflag, ebx
	sete	al
	mov	DWORD PTR _sbookflag, eax
; Line 1402
	jmp	SHORT $L85721
$L85717:
; Line 1404
	cmp	DWORD PTR _talkflag, ebx
	je	SHORT $L85718
; Line 1405
	call	_control_reset_talk
; Line 1406
	jmp	SHORT $L85721
$L85718:
; Line 1407
	call	_control_type_message
; Line 1408
	jmp	SHORT $L85721
$L85720:
; Line 1410
	xor	eax, eax
	cmp	DWORD PTR _FriendlyMode, ebx
	sete	al
	mov	DWORD PTR _FriendlyMode, eax
$L85721:
; Line 1418
	inc	esi
; Line 1419
	cmp	esi, 8
	jl	$L85697
; Line 1420
	cmp	BYTE PTR _v6$[ebp], bl
	pop	edi
	pop	esi
	pop	ebx
	je	SHORT $L85722
; Line 1421
	call	_gamemenu_off
$L85722:
; Line 1422
	leave
	ret	0
$L86842:
	DD	$L85707
	DD	$L85708
	DD	$L85711
	DD	$L85712
	DD	$L85713
	DD	$L85715
	DD	$L85717
	DD	$L85720
_CheckBtnUp ENDP
_TEXT	ENDS
PUBLIC	_FreeControlPan
; Function compile flags: /Ogsy
;	COMDAT _FreeControlPan
_TEXT	SEGMENT
_FreeControlPan PROC NEAR				; COMDAT
; Line 1450
	mov	ecx, DWORD PTR _pBtmBuff
	push	esi
; Line 1451
	xor	esi, esi
	mov	DWORD PTR _pBtmBuff, esi
; Line 1452
	call	@mem_free_dbg@4
; Line 1453
	mov	ecx, DWORD PTR _pManaBuff
; Line 1454
	mov	DWORD PTR _pManaBuff, esi
; Line 1455
	call	@mem_free_dbg@4
; Line 1456
	mov	ecx, DWORD PTR _pLifeBuff
; Line 1457
	mov	DWORD PTR _pLifeBuff, esi
; Line 1458
	call	@mem_free_dbg@4
; Line 1459
	mov	ecx, DWORD PTR _pPanelText
; Line 1460
	mov	DWORD PTR _pPanelText, esi
; Line 1461
	call	@mem_free_dbg@4
; Line 1462
	mov	ecx, DWORD PTR _pChrPanel
; Line 1463
	mov	DWORD PTR _pChrPanel, esi
; Line 1464
	call	@mem_free_dbg@4
; Line 1465
	mov	ecx, DWORD PTR _pSpellCels
; Line 1466
	mov	DWORD PTR _pSpellCels, esi
; Line 1467
	call	@mem_free_dbg@4
; Line 1468
	mov	ecx, DWORD PTR _pPanelButtons
; Line 1469
	mov	DWORD PTR _pPanelButtons, esi
; Line 1470
	call	@mem_free_dbg@4
; Line 1471
	mov	ecx, DWORD PTR _pMultiBtns
; Line 1472
	mov	DWORD PTR _pMultiBtns, esi
; Line 1473
	call	@mem_free_dbg@4
; Line 1474
	mov	ecx, DWORD PTR _pTalkBtns
; Line 1475
	mov	DWORD PTR _pTalkBtns, esi
; Line 1476
	call	@mem_free_dbg@4
; Line 1477
	mov	ecx, DWORD PTR _pChrButtons
; Line 1478
	mov	DWORD PTR _pChrButtons, esi
; Line 1479
	call	@mem_free_dbg@4
; Line 1480
	mov	ecx, DWORD PTR _pDurIcons
; Line 1481
	mov	DWORD PTR _pDurIcons, esi
; Line 1482
	call	@mem_free_dbg@4
; Line 1483
	mov	ecx, DWORD PTR _pQLogCel
; Line 1484
	mov	DWORD PTR _pQLogCel, esi
; Line 1485
	call	@mem_free_dbg@4
; Line 1486
	mov	ecx, DWORD PTR _pSpellBkCel
; Line 1487
	mov	DWORD PTR _pSpellBkCel, esi
; Line 1488
	call	@mem_free_dbg@4
; Line 1489
	mov	ecx, DWORD PTR _pSBkBtnCel
; Line 1490
	mov	DWORD PTR _pSBkBtnCel, esi
; Line 1491
	call	@mem_free_dbg@4
; Line 1492
	mov	ecx, DWORD PTR _pSBkIconCels
; Line 1493
	mov	DWORD PTR _pSBkIconCels, esi
; Line 1494
	call	@mem_free_dbg@4
; Line 1495
	mov	ecx, DWORD PTR _pGBoxBuff
; Line 1496
	mov	DWORD PTR _pGBoxBuff, esi
	pop	esi
; Line 1497
	jmp	@mem_free_dbg@4
_FreeControlPan ENDP
_TEXT	ENDS
PUBLIC	@control_WriteStringToBuffer@4
; Function compile flags: /Ogsy
;	COMDAT @control_WriteStringToBuffer@4
_TEXT	SEGMENT
@control_WriteStringToBuffer@4 PROC NEAR		; COMDAT
; _str$ = ecx
; Line 1505
	xor	edx, edx
$L85745:
; Line 1507
	mov	al, BYTE PTR [ecx]
; Line 1508
	test	al, al
	je	SHORT $L86850
; Line 1511
	movzx	eax, al
	inc	ecx
	movzx	eax, BYTE PTR _fontidx[eax]
	movzx	eax, BYTE PTR _fontframe[eax]
	movzx	eax, BYTE PTR _fontkern[eax]
	add	edx, eax
; Line 1512
	cmp	edx, 125				; 0000007dH
	jl	SHORT $L85745
; Line 1513
	xor	eax, eax
; Line 1514
	ret	0
$L86850:
; Line 1509
	xor	eax, eax
	inc	eax
; Line 1514
	ret	0
@control_WriteStringToBuffer@4 ENDP
_TEXT	ENDS
PUBLIC	@control_print_info_str@16
PUBLIC	@get_pieces_str@4
PUBLIC	??_C@_0L@BAHA@Level?5?3?5?$CFi?$AA@		; `string'
PUBLIC	??_C@_0BE@LJG@Hit?5Points?5?$CFi?5of?5?$CFi?$AA@ ; `string'
PUBLIC	??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BF@OGEE@Requirements?5not?5met?$AA@	; `string'
EXTRN	_pcursmonst:DWORD
EXTRN	_pcursitem:BYTE
EXTRN	_pcursobj:BYTE
EXTRN	_pcursplr:BYTE
EXTRN	_pcurs:DWORD
EXTRN	@GetObjectStr@4:NEAR
EXTRN	_towner:BYTE
EXTRN	@PrintMonstHistory@4:NEAR
EXTRN	_PrintUniqueHistory:NEAR
EXTRN	_trigflag:BYTE
EXTRN	@GetItemStr@4:NEAR
EXTRN	_monster:BYTE
EXTRN	_leveltype:BYTE
;	COMDAT ??_C@_0L@BAHA@Level?5?3?5?$CFi?$AA@
_DATA	SEGMENT
??_C@_0L@BAHA@Level?5?3?5?$CFi?$AA@ DB 'Level : %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@LJG@Hit?5Points?5?$CFi?5of?5?$CFi?$AA@
_DATA	SEGMENT
??_C@_0BE@LJG@Hit?5Points?5?$CFi?5of?5?$CFi?$AA@ DB 'Hit Points %i of %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@ DB '%i gold %s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@OGEE@Requirements?5not?5met?$AA@
_DATA	SEGMENT
??_C@_0BF@OGEE@Requirements?5not?5met?$AA@ DB 'Requirements not met', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DrawInfoBox
_TEXT	SEGMENT
_DrawInfoBox PROC NEAR					; COMDAT
; Line 1517
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 1529
	push	558					; 0000022eH
	push	241					; 000000f1H
	push	60					; 0000003cH
	push	288					; 00000120H
	push	62					; 0000003eH
	mov	ecx, 177				; 000000b1H
	pop	edx
	call	@DrawPanelBox@24
; Line 1530
	mov	ecx, DWORD PTR _trigflag+12
; Line 1531
	mov	eax, DWORD PTR _spselflag
; Line 1532
	xor	ebx, ebx
	xor	esi, esi
	inc	ebx
	cmp	DWORD PTR _panelflag, esi
	mov	edi, OFFSET FLAT:_infostr
	jne	SHORT $L85760
	cmp	ecx, esi
	jne	SHORT $L85760
	cmp	BYTE PTR _pcursinvitem, -1
	jne	SHORT $L85760
; Line 1533
	cmp	eax, esi
	jne	$LABEL_32$85762
; Line 1538
	and	BYTE PTR _infostr, 0
; Line 1539
	mov	DWORD PTR _infoclr, esi
; Line 1540
	call	_ClearPanel
$L85760:
; Line 1542
	cmp	eax, esi
	jne	$LABEL_32$85762
	cmp	ecx, esi
	jne	$LABEL_32$85762
; Line 1544
	cmp	DWORD PTR _pcurs, 12			; 0000000cH
	jge	$L85766
; Line 1545
	mov	al, BYTE PTR _pcursitem
	cmp	al, -1
	je	SHORT $L85767
; Line 1546
	movsx	ecx, al
	call	@GetItemStr@4
$L85767:
; Line 1547
	mov	al, BYTE PTR _pcursobj
	cmp	al, -1
	je	SHORT $L85768
; Line 1548
	movsx	ecx, al
	call	@GetObjectStr@4
$L85768:
; Line 1549
	mov	eax, DWORD PTR _pcursmonst
	push	3
	cmp	eax, -1
	pop	ebp
	je	SHORT $L85773
; Line 1550
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $L85770
; Line 1552
	imul	eax, 228				; 000000e4H
	mov	DWORD PTR _infoclr, esi
	push	DWORD PTR _monster[eax+216]
	push	edi
	call	_strcpy
	pop	ecx
	pop	ecx
; Line 1553
	call	_ClearPanel
; Line 1554
	mov	eax, DWORD PTR _pcursmonst
	imul	eax, 228				; 000000e4H
	cmp	BYTE PTR _monster[eax+188], 0
	je	SHORT $L85771
; Line 1555
	mov	DWORD PTR _infoclr, ebp
; Line 1556
	call	_PrintUniqueHistory
; Line 1557
	jmp	SHORT $L85773
$L85771:
; Line 1558
	mov	eax, DWORD PTR _monster[eax+220]
	movzx	ecx, BYTE PTR [eax]
	call	@PrintMonstHistory@4
; Line 1560
	jmp	SHORT $L85773
$L85770:
; Line 1561
	imul	eax, 232				; 000000e8H
	add	eax, OFFSET FLAT:_towner+160
	push	eax
	push	edi
	call	_strcpy
	pop	ecx
	pop	ecx
$L85773:
; Line 1564
	mov	al, BYTE PTR _pcursplr
	cmp	al, -1
	je	$LABEL_33$85763
; Line 1566
	movsx	eax, al
	imul	eax, 21720				; 000054d8H
	add	eax, OFFSET FLAT:_plr+320
	mov	DWORD PTR _infoclr, ebp
	push	eax
	push	edi
	call	_strcpy
; Line 1567
	call	_ClearPanel
; Line 1568
	movsx	eax, BYTE PTR _pcursplr
	imul	eax, 21720				; 000054d8H
	mov	esi, OFFSET FLAT:_tempstr
	movsx	eax, BYTE PTR _plr[eax+440]
	push	eax
	push	OFFSET FLAT:??_C@_0L@BAHA@Level?5?3?5?$CFi?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 20					; 00000014H
; Line 1569
	mov	edx, ebx
	mov	ecx, esi
	call	@AddPanelString@8
; Line 1570
	movsx	eax, BYTE PTR _pcursplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+412]
	mov	eax, DWORD PTR _plr[eax+408]
	sar	ecx, 6
	sar	eax, 6
	push	ecx
	push	eax
	push	OFFSET FLAT:??_C@_0BE@LJG@Hit?5Points?5?$CFi?5of?5?$CFi?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 1571
	mov	edx, ebx
	mov	ecx, esi
	call	@AddPanelString@8
$L86859:
; Line 1573
	xor	esi, esi
	jmp	$LABEL_33$85763
$L85766:
; Line 1575
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	DWORD PTR _plr[eax+21184], 11		; 0000000bH
	jne	SHORT $L85778
; Line 1576
	mov	esi, DWORD PTR _plr[eax+21372]
; Line 1577
	mov	ecx, esi
	call	@get_pieces_str@4
; Line 1578
	push	eax
	push	esi
	push	OFFSET FLAT:??_C@_0L@PMKP@?$CFi?5gold?5?$CFs?$AA@ ; `string'
	push	edi
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 1579
	jmp	SHORT $L86859
$L85778:
	cmp	DWORD PTR _plr[eax+21532], esi
	je	SHORT $L85781
; Line 1580
	cmp	DWORD PTR _plr[eax+21232], esi
	je	SHORT $L85782
; Line 1581
	lea	eax, DWORD PTR _plr[eax+21301]
; Line 1582
	jmp	SHORT $L85783
$L85782:
; Line 1583
	lea	eax, DWORD PTR _plr[eax+21237]
$L85783:
; Line 1584
	push	eax
	push	edi
	call	_strcpy
; Line 1585
	mov	eax, DWORD PTR _myplr
	pop	ecx
	imul	eax, 21720				; 000054d8H
	pop	ecx
	mov	al, BYTE PTR _plr[eax+21236]
	cmp	al, bl
	jne	SHORT $L85784
; Line 1586
	mov	DWORD PTR _infoclr, ebx
$L85784:
; Line 1587
	cmp	al, 2
	jne	SHORT $LABEL_33$85763
; Line 1588
	mov	DWORD PTR _infoclr, 3
; Line 1589
	jmp	SHORT $LABEL_33$85763
$L85781:
; Line 1590
	call	_ClearPanel
; Line 1591
	mov	edx, ebx
	mov	ecx, OFFSET FLAT:??_C@_0BF@OGEE@Requirements?5not?5met?$AA@ ; `string'
	call	@AddPanelString@8
; Line 1592
	mov	DWORD PTR _pinfoflag, ebx
	jmp	SHORT $LABEL_33$85763
$LABEL_32$85762:
; Line 1535
	mov	DWORD PTR _infoclr, esi
$LABEL_33$85763:
; Line 1596
	mov	cl, BYTE PTR _infostr
	mov	eax, DWORD PTR _pnumlines
	test	cl, cl
	jne	SHORT $L85789
	cmp	eax, esi
	je	SHORT $L85794
$L85789:
	cmp	DWORD PTR _talkflag, esi
	jne	SHORT $L85794
; Line 1597
	xor	ebp, ebp
; Line 1599
	test	cl, cl
	je	SHORT $L85790
; Line 1600
	push	eax
	push	ebx
	mov	edx, edi
	xor	ecx, ecx
	call	@control_print_info_str@16
; Line 1602
	mov	eax, DWORD PTR _pnumlines
	mov	ebp, ebx
	xor	ebx, ebx
$L85790:
; Line 1605
	test	eax, eax
	jle	SHORT $L85794
; Line 1606
	mov	edi, OFFSET FLAT:_panelstr
$L85792:
; Line 1608
	sub	eax, ebx
	lea	ecx, DWORD PTR [esi+ebp]
	push	eax
	mov	al, BYTE PTR _pstrjust[esi*4]
	push	eax
	mov	edx, edi
	call	@control_print_info_str@16
; Line 1611
	mov	eax, DWORD PTR _pnumlines
	inc	esi
	add	edi, 64					; 00000040H
	cmp	esi, eax
	jl	SHORT $L85792
$L85794:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 1614
	ret	0
_DrawInfoBox ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @control_print_info_str@16
_TEXT	SEGMENT
_center$ = 8
_lines$ = 12
_v5$ = -4
@control_print_info_str@16 PROC NEAR			; COMDAT
; _y$ = ecx
; _str$ = edx
; Line 1625
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1638
	mov	eax, DWORD PTR _lines$[ebp]
	push	ebx
	push	esi
	xor	esi, esi
	lea	ecx, DWORD PTR [ecx+eax*4]
	push	edi
	add	eax, ecx
; Line 1639
	cmp	BYTE PTR _center$[ebp], 1
	mov	DWORD PTR _v5$[ebp], edx
	mov	ebx, DWORD PTR _lineoffset[eax*4]
	jne	SHORT $L85821
; Line 1640
	mov	al, BYTE PTR [edx]
; Line 1641
	xor	ecx, ecx
; Line 1643
	test	al, al
	je	SHORT $LABEL_14$85815
$L85816:
; Line 1647
	movzx	eax, al
	inc	edx
	movzx	eax, BYTE PTR _fontidx[eax]
	movzx	eax, BYTE PTR _fontframe[eax]
	movzx	eax, BYTE PTR _fontkern[eax]
	lea	ecx, DWORD PTR [ecx+eax+2]
; Line 1648
	mov	al, BYTE PTR [edx]
; Line 1649
	test	al, al
	jne	SHORT $L85816
; Line 1650
	cmp	ecx, 288				; 00000120H
	jge	SHORT $L85819
$LABEL_14$85815:
; Line 1652
	mov	esi, 288				; 00000120H
	sub	esi, ecx
	sar	esi, 1
$L85819:
; Line 1653
	add	ebx, esi
$L85821:
; Line 1656
	mov	eax, DWORD PTR _v5$[ebp]
	mov	al, BYTE PTR [eax]
; Line 1657
	test	al, al
	je	SHORT $L86865
; Line 1660
	movzx	eax, al
	inc	DWORD PTR _v5$[ebp]
	movzx	eax, BYTE PTR _fontidx[eax]
; Line 1661
	mov	al, BYTE PTR _fontframe[eax]
; Line 1663
	movzx	edi, al
; Line 1664
	test	al, al
	movzx	ecx, BYTE PTR _fontkern[edi]
	lea	esi, DWORD PTR [esi+ecx+2]
	je	SHORT $L85829
; Line 1665
	cmp	esi, 288				; 00000120H
	jge	SHORT $L85829
; Line 1666
	mov	al, BYTE PTR _infoclr
	mov	edx, edi
	push	eax
	mov	ecx, ebx
	call	@CPrintString@12
$L85829:
; Line 1669
	movzx	eax, BYTE PTR _fontkern[edi]
	lea	ebx, DWORD PTR [ebx+eax+2]
	jmp	SHORT $L85821
$L86865:
	pop	edi
	pop	esi
	pop	ebx
; Line 1671
	leave
	ret	8
@control_print_info_str@16 ENDP
_TEXT	ENDS
PUBLIC	@PrintGameStr@16
; Function compile flags: /Ogsy
;	COMDAT @PrintGameStr@16
_TEXT	SEGMENT
_str$ = 8
_color$ = 12
@PrintGameStr@16 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1681
	mov	eax, DWORD PTR _str$[esp-4]
; Line 1682
	mov	edx, DWORD PTR _screen_y_times_768[edx*4+640]
	push	esi
	push	edi
	mov	edi, eax
; Line 1683
	mov	al, BYTE PTR [eax]
	test	al, al
	lea	esi, DWORD PTR [edx+ecx+64]
	je	SHORT $L85845
	push	ebx
$L85843:
; Line 1685
	movzx	eax, al
	inc	edi
	movzx	eax, BYTE PTR _fontidx[eax]
	mov	bl, BYTE PTR _fontframe[eax]
; Line 1686
	test	bl, bl
	je	SHORT $L85846
; Line 1687
	push	DWORD PTR _color$[esp+8]
	mov	ecx, esi
	movzx	edx, bl
	call	@CPrintString@12
$L85846:
; Line 1688
	movzx	eax, bl
	movzx	eax, BYTE PTR _fontkern[eax]
	lea	esi, DWORD PTR [esi+eax+1]
	mov	al, BYTE PTR [edi]
	test	al, al
	jne	SHORT $L85843
	pop	ebx
$L85845:
	pop	edi
	pop	esi
; Line 1690
	ret	8
@PrintGameStr@16 ENDP
_TEXT	ENDS
PUBLIC	_DrawChr
PUBLIC	@ADD_PlrStringXY@20
PUBLIC	@MY_PlrStringXY@24
PUBLIC	??_C@_07MHIA@Warrior?$AA@			; `string'
PUBLIC	??_C@_05LCAJ@Rogue?$AA@				; `string'
PUBLIC	??_C@_08HHBF@Sorceror?$AA@			; `string'
PUBLIC	??_C@_02JAFN@?$CFi?$AA@				; `string'
PUBLIC	??_C@_03MBJP@?$CFli?$AA@			; `string'
PUBLIC	??_C@_04COF@None?$AA@				; `string'
PUBLIC	??_C@_04NEPN@?$CFi?$CF?$CF?$AA@			; `string'
PUBLIC	??_C@_05INGO@?$CFi?9?$CFi?$AA@			; `string'
PUBLIC	??_C@_03OLFE@MAX?$AA@				; `string'
EXTRN	_MaxStats:BYTE
EXTRN	@CalcStatDiff@4:NEAR
;	COMDAT ??_C@_07MHIA@Warrior?$AA@
_DATA	SEGMENT
??_C@_07MHIA@Warrior?$AA@ DB 'Warrior', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LCAJ@Rogue?$AA@
_DATA	SEGMENT
??_C@_05LCAJ@Rogue?$AA@ DB 'Rogue', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08HHBF@Sorceror?$AA@
_DATA	SEGMENT
??_C@_08HHBF@Sorceror?$AA@ DB 'Sorceror', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02JAFN@?$CFi?$AA@
_DATA	SEGMENT
??_C@_02JAFN@?$CFi?$AA@ DB '%i', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03MBJP@?$CFli?$AA@
_DATA	SEGMENT
??_C@_03MBJP@?$CFli?$AA@ DB '%li', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04COF@None?$AA@
_DATA	SEGMENT
??_C@_04COF@None?$AA@ DB 'None', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NEPN@?$CFi?$CF?$CF?$AA@
_DATA	SEGMENT
??_C@_04NEPN@?$CFi?$CF?$CF?$AA@ DB '%i%%', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05INGO@?$CFi?9?$CFi?$AA@
_DATA	SEGMENT
??_C@_05INGO@?$CFi?9?$CFi?$AA@ DB '%i-%i', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03OLFE@MAX?$AA@
_DATA	SEGMENT
??_C@_03OLFE@MAX?$AA@ DB 'MAX', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DrawChr
_TEXT	SEGMENT
_a4$ = -76
_v29$ = -12
_v30$ = -8
_a5$ = -4
_DrawChr PROC NEAR					; COMDAT
; Line 1693
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
; Line 1726
	push	320					; 00000140H
	push	1
	mov	edx, 511				; 000001ffH
	push	DWORD PTR _pChrPanel
	push	64					; 00000040H
	pop	ecx
	call	@CelDecodeOnly@20
; Line 1727
	mov	eax, DWORD PTR _myplr
	xor	edi, edi
	imul	eax, 21720				; 000054d8H
	add	eax, OFFSET FLAT:_plr+320
	push	edi
	push	eax
	push	151					; 00000097H
	push	32					; 00000020H
	pop	esi
	push	20					; 00000014H
	mov	edx, esi
	pop	ecx
	call	@ADD_PlrStringXY@20
; Line 1728
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+352]
	test	al, al
	jne	SHORT $L85879
; Line 1729
	push	edi
	push	OFFSET FLAT:??_C@_07MHIA@Warrior?$AA@	; `string'
; Line 1730
	jmp	SHORT $L86880
$L85879:
	cmp	al, 1
	jne	SHORT $L85882
; Line 1731
	push	edi
	push	OFFSET FLAT:??_C@_05LCAJ@Rogue?$AA@	; `string'
; Line 1732
	jmp	SHORT $L86880
$L85882:
	cmp	al, 2
	jne	SHORT $L85885
; Line 1733
	push	edi
	push	OFFSET FLAT:??_C@_08HHBF@Sorceror?$AA@	; `string'
$L86880:
	mov	ecx, 168				; 000000a8H
	mov	edx, esi
	push	299					; 0000012bH
	call	@ADD_PlrStringXY@20
$L85885:
; Line 1735
	mov	eax, DWORD PTR _myplr
	mov	esi, OFFSET FLAT:??_C@_02JAFN@?$CFi?$AA@ ; `string'
	imul	eax, 21720				; 000054d8H
	movsx	eax, BYTE PTR _plr[eax+440]
	push	eax
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1736
	lea	eax, DWORD PTR _a4$[ebp]
	push	edi
	push	eax
	push	109					; 0000006dH
	push	69					; 00000045H
	pop	edx
	push	66					; 00000042H
	pop	ecx
	call	@ADD_PlrStringXY@20
; Line 1737
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+444]
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_03MBJP@?$CFli?$AA@	; `string'
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1738
	lea	eax, DWORD PTR _a4$[ebp]
	mov	ebx, 216				; 000000d8H
	push	edi
	mov	edi, 300				; 0000012cH
	push	eax
	push	edi
	push	69					; 00000045H
	mov	ecx, ebx
	pop	edx
	call	@ADD_PlrStringXY@20
; Line 1739
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	BYTE PTR _plr[eax+440], 50		; 00000032H
	jne	SHORT $L85889
; Line 1740
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_04COF@None?$AA@	; `string'
	push	eax
	call	_strcpy
	pop	ecx
; Line 1741
	mov	BYTE PTR _a5$[ebp], 3
	pop	ecx
; Line 1742
	jmp	SHORT $L85891
$L85889:
; Line 1743
	push	DWORD PTR _plr[eax+452]
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_03MBJP@?$CFli?$AA@	; `string'
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1744
	and	BYTE PTR _a5$[ebp], 0
$L85891:
; Line 1746
	push	DWORD PTR _a5$[ebp]
	lea	eax, DWORD PTR _a4$[ebp]
	mov	ecx, ebx
	push	eax
	push	edi
	push	97					; 00000061H
	pop	edx
	call	@ADD_PlrStringXY@20
; Line 1747
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+460]
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1748
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 146				; 00000092H
	mov	ecx, ebx
	push	0
	push	eax
	push	edi
	call	@ADD_PlrStringXY@20
; Line 1750
	mov	ecx, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	ecx, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[ecx+21564]
; Line 1751
	test	eax, eax
	mov	DWORD PTR _v29$[ebp], eax
	jle	SHORT $L86881
; Line 1752
	mov	BYTE PTR _a5$[ebp], 1
$L86881:
; Line 1753
	jge	SHORT $L85893
; Line 1754
	mov	BYTE PTR _a5$[ebp], 2
$L85893:
; Line 1755
	mov	eax, DWORD PTR _plr[ecx+372]
	push	5
	cdq
	pop	ebx
	idiv	ebx
	add	eax, DWORD PTR _plr[ecx+21552]
	add	eax, DWORD PTR _v29$[ebp]
	push	eax
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1756
	lea	eax, DWORD PTR _a4$[ebp]
	mov	ebx, 301				; 0000012dH
	mov	edx, 183				; 000000b7H
	push	DWORD PTR _a5$[ebp]
	mov	ecx, 258				; 00000102H
	push	eax
	push	ebx
	call	@ADD_PlrStringXY@20
; Line 1758
	mov	eax, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+21560]
; Line 1759
	test	ecx, ecx
	jle	SHORT $L86882
; Line 1760
	mov	BYTE PTR _a5$[ebp], 1
$L86882:
; Line 1761
	jge	SHORT $L85895
; Line 1762
	mov	BYTE PTR _a5$[ebp], 2
$L85895:
; Line 1763
	mov	eax, DWORD PTR _plr[eax+372]
	sar	eax, 1
	lea	eax, DWORD PTR [eax+ecx+50]
	push	eax
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_04NEPN@?$CFi?$CF?$CF?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1764
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 211				; 000000d3H
	mov	ecx, 258				; 00000102H
	push	DWORD PTR _a5$[ebp]
	push	eax
	push	ebx
	call	@ADD_PlrStringXY@20
; Line 1767
	mov	ecx, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	ecx, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[ecx+21556]
; Line 1768
	test	edx, edx
	jle	SHORT $L86883
; Line 1769
	mov	BYTE PTR _a5$[ebp], 1
$L86883:
; Line 1770
	jge	SHORT $L85898
; Line 1771
	mov	BYTE PTR _a5$[ebp], 2
$L85898:
; Line 1772
	mov	eax, DWORD PTR _plr[ecx+21544]
; Line 1773
	push	100					; 00000064H
	mov	DWORD PTR _v30$[ebp], eax
	imul	eax, edx
	cdq
	pop	ebx
	idiv	ebx
	add	eax, DWORD PTR _plr[ecx+21568]
	add	DWORD PTR _v30$[ebp], eax
; Line 1774
	mov	eax, DWORD PTR _plr[ecx+392]
; Line 1775
	cmp	DWORD PTR _plr[ecx+2372], 3
	mov	DWORD PTR -12+[ebp], eax
; Line 1777
	jne	SHORT $L85899
	cmp	BYTE PTR _plr[ecx+352], 1
	je	SHORT $L85899
; Line 1778
	sar	eax, 1
$L85899:
; Line 1779
	add	DWORD PTR _v30$[ebp], eax
; Line 1781
	mov	edx, DWORD PTR _plr[ecx+21548]
; Line 1782
	mov	eax, DWORD PTR _plr[ecx+21556]
	push	100					; 00000064H
	imul	eax, edx
	cdq
	pop	ebx
	idiv	ebx
; Line 1783
	mov	edx, DWORD PTR _plr[ecx+2372]
; Line 1914
	add	eax, DWORD PTR _plr[ecx+21568]
	add	eax, DWORD PTR _plr[ecx+21548]
	cmp	edx, 3
	jne	SHORT $L85901
; Line 1783
	cmp	BYTE PTR _plr[ecx+352], 1
	je	SHORT $L85901
; Line 1786
	mov	ecx, DWORD PTR -12+[ebp]
	sar	ecx, 1
	add	ecx, eax
	mov	ebx, ecx
	jmp	SHORT $L85902
$L85901:
; Line 1784
	mov	ecx, DWORD PTR -12+[ebp]
	lea	ebx, DWORD PTR [eax+ecx]
$L85902:
; Line 1787
	push	ebx
	lea	eax, DWORD PTR _a4$[ebp]
	push	DWORD PTR _v30$[ebp]
	push	OFFSET FLAT:??_C@_05INGO@?$CFi?9?$CFi?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 1788
	cmp	DWORD PTR _v30$[ebp], 100		; 00000064H
	jge	SHORT $L85905
	cmp	ebx, 100				; 00000064H
	jge	SHORT $L85905
; Line 1791
	push	0
	lea	eax, DWORD PTR _a4$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, 258				; 00000102H
	push	eax
	push	301					; 0000012dH
	jmp	SHORT $L86884
$L85905:
; Line 1789
	push	-1
	lea	eax, DWORD PTR _a4$[ebp]
	push	DWORD PTR _a5$[ebp]
	mov	ecx, 254				; 000000feH
	push	eax
	push	305					; 00000131H
$L86884:
	mov	edx, 239				; 000000efH
	call	@MY_PlrStringXY@24
; Line 1792
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+457]
; Line 1793
	test	al, al
	setne	cl
; Line 1794
	cmp	al, 75					; 0000004bH
	mov	BYTE PTR _a5$[ebp], cl
	jge	SHORT $L85907
; Line 1795
	movsx	eax, al
	push	eax
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_04NEPN@?$CFi?$CF?$CF?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1796
	jmp	SHORT $L85908
$L85907:
; Line 1798
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_03OLFE@MAX?$AA@	; `string'
	push	eax
	mov	BYTE PTR _a5$[ebp], 3
	call	_sprintf
	pop	ecx
	pop	ecx
$L85908:
; Line 1800
	push	DWORD PTR _a5$[ebp]
	lea	eax, DWORD PTR _a4$[ebp]
	mov	ebx, 257				; 00000101H
	mov	edx, 276				; 00000114H
	push	eax
	push	edi
	mov	ecx, ebx
	call	@ADD_PlrStringXY@20
; Line 1801
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+458]
; Line 1802
	test	al, al
	setne	cl
; Line 1803
	cmp	al, 75					; 0000004bH
	mov	BYTE PTR _a5$[ebp], cl
	jge	SHORT $L85910
; Line 1804
	movsx	eax, al
	push	eax
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_04NEPN@?$CFi?$CF?$CF?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1805
	jmp	SHORT $L85911
$L85910:
; Line 1807
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_03OLFE@MAX?$AA@	; `string'
	push	eax
	mov	BYTE PTR _a5$[ebp], 3
	call	_sprintf
	pop	ecx
	pop	ecx
$L85911:
; Line 1809
	push	DWORD PTR _a5$[ebp]
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 304				; 00000130H
	mov	ecx, ebx
	push	eax
	push	edi
	call	@ADD_PlrStringXY@20
; Line 1810
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+459]
; Line 1811
	test	al, al
	setne	cl
; Line 1812
	cmp	al, 75					; 0000004bH
	mov	BYTE PTR _a5$[ebp], cl
	jge	SHORT $L85912
; Line 1813
	movsx	eax, al
	push	eax
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_04NEPN@?$CFi?$CF?$CF?$AA@ ; `string'
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1814
	jmp	SHORT $L85913
$L85912:
; Line 1816
	lea	eax, DWORD PTR _a4$[ebp]
	push	OFFSET FLAT:??_C@_03OLFE@MAX?$AA@	; `string'
	push	eax
	mov	BYTE PTR _a5$[ebp], 3
	call	_sprintf
	pop	ecx
	pop	ecx
$L85913:
; Line 1818
	push	DWORD PTR _a5$[ebp]
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 332				; 0000014cH
	mov	ecx, ebx
	push	eax
	push	edi
	call	@ADD_PlrStringXY@20
; Line 1820
	mov	eax, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+360]
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
; Line 1821
	mov	eax, DWORD PTR _myplr
	add	esp, 12					; 0000000cH
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+352]
	shl	ecx, 4
	mov	ecx, DWORD PTR _MaxStats[ecx]
	cmp	ecx, DWORD PTR _plr[eax+360]
	jne	SHORT $L85914
; Line 1822
	mov	BYTE PTR _a5$[ebp], 3
$L85914:
; Line 1823
	push	DWORD PTR _a5$[ebp]
	lea	eax, DWORD PTR _a4$[ebp]
	mov	ebx, 155				; 0000009bH
	push	eax
	push	126					; 0000007eH
	push	95					; 0000005fH
	mov	edx, ebx
	pop	edi
	mov	ecx, edi
	call	@ADD_PlrStringXY@20
; Line 1825
	mov	eax, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+368]
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
; Line 1826
	mov	eax, DWORD PTR _myplr
	add	esp, 12					; 0000000cH
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+352]
	shl	ecx, 4
	mov	ecx, DWORD PTR _MaxStats[ecx+4]
	cmp	ecx, DWORD PTR _plr[eax+368]
	jne	SHORT $L85915
; Line 1827
	mov	BYTE PTR _a5$[ebp], 3
$L85915:
; Line 1828
	push	DWORD PTR _a5$[ebp]
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 183				; 000000b7H
	mov	ecx, edi
	push	eax
	push	126					; 0000007eH
	call	@ADD_PlrStringXY@20
; Line 1830
	mov	eax, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+376]
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
; Line 1831
	mov	eax, DWORD PTR _myplr
	add	esp, 12					; 0000000cH
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+352]
	shl	ecx, 4
	mov	ecx, DWORD PTR _MaxStats[ecx+8]
	cmp	ecx, DWORD PTR _plr[eax+376]
	jne	SHORT $L85916
; Line 1832
	mov	BYTE PTR _a5$[ebp], 3
$L85916:
; Line 1833
	push	DWORD PTR _a5$[ebp]
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 211				; 000000d3H
	mov	ecx, edi
	push	eax
	push	126					; 0000007eH
	call	@ADD_PlrStringXY@20
; Line 1835
	mov	eax, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+384]
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
; Line 1836
	mov	eax, DWORD PTR _myplr
	add	esp, 12					; 0000000cH
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+352]
	shl	ecx, 4
	mov	ecx, DWORD PTR _MaxStats[ecx+12]
	cmp	ecx, DWORD PTR _plr[eax+384]
	jne	SHORT $L85917
; Line 1837
	mov	BYTE PTR _a5$[ebp], 3
$L85917:
; Line 1838
	push	DWORD PTR _a5$[ebp]
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 239				; 000000efH
	mov	ecx, edi
	push	eax
	push	126					; 0000007eH
	call	@ADD_PlrStringXY@20
; Line 1840
	mov	eax, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+356]
; Line 1841
	mov	eax, DWORD PTR _plr[eax+360]
; Line 1842
	cmp	ecx, eax
	jle	SHORT $L86885
; Line 1843
	mov	BYTE PTR _a5$[ebp], 1
$L86885:
; Line 1844
	jge	SHORT $L85919
; Line 1845
	mov	BYTE PTR _a5$[ebp], 2
$L85919:
; Line 1846
	push	ecx
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1847
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, ebx
	mov	edi, 173				; 000000adH
	push	DWORD PTR _a5$[ebp]
	mov	ebx, 143				; 0000008fH
	mov	ecx, ebx
	push	eax
	push	edi
	call	@ADD_PlrStringXY@20
; Line 1849
	mov	eax, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+364]
; Line 1850
	mov	eax, DWORD PTR _plr[eax+368]
; Line 1851
	cmp	ecx, eax
	jle	SHORT $L86886
; Line 1852
	mov	BYTE PTR _a5$[ebp], 1
$L86886:
; Line 1853
	jge	SHORT $L85921
; Line 1854
	mov	BYTE PTR _a5$[ebp], 2
$L85921:
; Line 1855
	push	ecx
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1856
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 183				; 000000b7H
	mov	ecx, ebx
	push	DWORD PTR _a5$[ebp]
	push	eax
	push	edi
	call	@ADD_PlrStringXY@20
; Line 1858
	mov	eax, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+372]
; Line 1859
	mov	eax, DWORD PTR _plr[eax+376]
; Line 1860
	cmp	ecx, eax
	jle	SHORT $L86887
; Line 1861
	mov	BYTE PTR _a5$[ebp], 1
$L86887:
; Line 1862
	jge	SHORT $L85923
; Line 1863
	mov	BYTE PTR _a5$[ebp], 2
$L85923:
; Line 1864
	push	ecx
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1865
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 211				; 000000d3H
	mov	ecx, ebx
	push	DWORD PTR _a5$[ebp]
	push	eax
	push	edi
	call	@ADD_PlrStringXY@20
; Line 1867
	mov	eax, DWORD PTR _myplr
	and	BYTE PTR _a5$[ebp], 0
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+380]
; Line 1868
	mov	eax, DWORD PTR _plr[eax+384]
; Line 1869
	cmp	ecx, eax
	jle	SHORT $L86888
; Line 1870
	mov	BYTE PTR _a5$[ebp], 1
$L86888:
; Line 1871
	jge	SHORT $L85925
; Line 1872
	mov	BYTE PTR _a5$[ebp], 2
$L85925:
; Line 1873
	push	ecx
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1874
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 239				; 000000efH
	mov	ecx, ebx
	push	DWORD PTR _a5$[ebp]
	push	eax
	push	edi
	call	@ADD_PlrStringXY@20
; Line 1875
	mov	ecx, DWORD PTR _myplr
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	lea	edi, DWORD PTR _plr[eax+388]
; Line 1876
	cmp	DWORD PTR [edi], 0
	jle	SHORT $L85927
; Line 1878
	call	@CalcStatDiff@4
	cmp	eax, DWORD PTR [edi]
	jge	SHORT $L85927
; Line 1879
	mov	ecx, DWORD PTR _myplr
	mov	edi, ecx
	imul	edi, 21720				; 000054d8H
	add	edi, OFFSET FLAT:_plr+388
; Line 1880
	call	@CalcStatDiff@4
	mov	DWORD PTR [edi], eax
$L85927:
; Line 1883
	mov	edi, DWORD PTR [edi]
; Line 1884
	test	edi, edi
	jle	$L85932
; Line 1885
	push	edi
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1886
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 266				; 0000010aH
	push	2
	push	eax
	push	126					; 0000007eH
	push	95					; 0000005fH
	pop	ecx
	call	@ADD_PlrStringXY@20
; Line 1887
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+352]
; Line 1888
	mov	eax, DWORD PTR _plr[eax+360]
	shl	ecx, 4
	mov	edi, ecx
	cmp	eax, DWORD PTR _MaxStats[edi]
	jge	SHORT $L85929
; Line 1889
	mov	eax, DWORD PTR _chrbtn
	push	41					; 00000029H
	add	eax, 2
	mov	edx, 319				; 0000013fH
	push	eax
	mov	ecx, 201				; 000000c9H
	push	DWORD PTR _pChrButtons
	call	@CelDecodeOnly@20
$L85929:
; Line 1890
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+368]
	cmp	eax, DWORD PTR _MaxStats[edi+4]
	jge	SHORT $L85930
; Line 1891
	mov	eax, DWORD PTR _chrbtn+4
	push	41					; 00000029H
	add	eax, 4
	mov	edx, 347				; 0000015bH
	push	eax
	mov	ecx, 201				; 000000c9H
	push	DWORD PTR _pChrButtons
	call	@CelDecodeOnly@20
$L85930:
; Line 1892
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+376]
	cmp	eax, DWORD PTR _MaxStats[edi+8]
	jge	SHORT $L85931
; Line 1893
	mov	eax, DWORD PTR _chrbtn+8
	push	41					; 00000029H
	add	eax, 6
	mov	edx, 376				; 00000178H
	push	eax
	mov	ecx, 201				; 000000c9H
	push	DWORD PTR _pChrButtons
	call	@CelDecodeOnly@20
$L85931:
; Line 1894
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+384]
	cmp	eax, DWORD PTR _MaxStats[edi+12]
	jge	SHORT $L85932
; Line 1895
	mov	eax, DWORD PTR _chrbtn+12
	push	41					; 00000029H
	add	eax, 8
	mov	edx, 404				; 00000194H
	push	eax
	mov	ecx, 201				; 000000c9H
	push	DWORD PTR _pChrButtons
	call	@CelDecodeOnly@20
$L85932:
; Line 1897
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+412]
; Line 1898
	cmp	ecx, DWORD PTR _plr[eax+404]
	setg	al
; Line 1899
	sar	ecx, 6
	mov	BYTE PTR _a5$[ebp], al
	push	ecx
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1900
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 304				; 00000130H
	push	DWORD PTR _a5$[ebp]
	push	eax
	push	126					; 0000007eH
	push	95					; 0000005fH
	pop	ecx
	call	@ADD_PlrStringXY@20
; Line 1901
	mov	ecx, DWORD PTR _myplr
	imul	ecx, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[ecx+408]
; Line 1902
	cmp	eax, DWORD PTR _plr[ecx+412]
	je	SHORT $L85933
; Line 1903
	mov	BYTE PTR _a5$[ebp], 2
$L85933:
; Line 1904
	sar	eax, 6
	push	eax
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1905
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edi, 174				; 000000aeH
	mov	edx, 304				; 00000130H
	push	DWORD PTR _a5$[ebp]
	mov	ecx, ebx
	push	eax
	push	edi
	call	@ADD_PlrStringXY@20
; Line 1906
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+432]
; Line 1907
	cmp	ecx, DWORD PTR _plr[eax+424]
	setg	al
; Line 1908
	sar	ecx, 6
	mov	BYTE PTR _a5$[ebp], al
	push	ecx
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1909
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 332				; 0000014cH
	push	DWORD PTR _a5$[ebp]
	push	eax
	push	126					; 0000007eH
	push	95					; 0000005fH
	pop	ecx
	call	@ADD_PlrStringXY@20
; Line 1910
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+428]
; Line 1911
	cmp	ecx, DWORD PTR _plr[eax+432]
	je	SHORT $L85934
; Line 1912
	mov	BYTE PTR _a5$[ebp], 2
$L85934:
; Line 1913
	sar	ecx, 6
	push	ecx
	lea	eax, DWORD PTR _a4$[ebp]
	push	esi
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1914
	lea	eax, DWORD PTR _a4$[ebp]
	mov	edx, 332				; 0000014cH
	mov	ecx, ebx
	push	DWORD PTR _a5$[ebp]
	push	eax
	push	edi
	call	@ADD_PlrStringXY@20
	pop	edi
	pop	esi
	pop	ebx
; Line 1915
	leave
	ret	0
_DrawChr ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @ADD_PlrStringXY@20
_TEXT	SEGMENT
_width$ = 8
_pszStr$ = 12
_col$ = 16
_v6$ = -4
_v11$ = 11
_widthb$ = 8
@ADD_PlrStringXY@20 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1918
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1932
	mov	eax, DWORD PTR _pszStr$[ebp]
; Line 1933
	mov	edx, DWORD PTR _screen_y_times_768[edx*4+640]
	push	ebx
	push	esi
; Line 1935
	mov	esi, DWORD PTR _width$[ebp]
	mov	DWORD PTR _v6$[ebp], eax
	mov	al, BYTE PTR [eax]
	sub	esi, ecx
	push	edi
	lea	edx, DWORD PTR [edx+ecx+64]
	inc	esi
; Line 1936
	xor	edi, edi
; Line 1937
	xor	ecx, ecx
; Line 1938
	test	al, al
	je	SHORT $L85960
; Line 1939
	mov	BYTE PTR _v11$[ebp], al
$L85958:
; Line 1942
	movzx	ebx, BYTE PTR _v11$[ebp]
	inc	DWORD PTR _v6$[ebp]
	movzx	ebx, BYTE PTR _fontidx[ebx]
	movzx	ebx, BYTE PTR _fontframe[ebx]
	movzx	ebx, BYTE PTR _fontkern[ebx]
	lea	ecx, DWORD PTR [ecx+ebx+1]
; Line 1943
	mov	ebx, DWORD PTR _v6$[ebp]
	mov	bl, BYTE PTR [ebx]
; Line 1944
	test	bl, bl
	mov	BYTE PTR _v11$[ebp], bl
	jne	SHORT $L85958
$L85960:
; Line 1946
	cmp	ecx, esi
	jge	SHORT $L85961
; Line 1947
	mov	edi, esi
	sub	edi, ecx
	sar	edi, 1
$L85961:
; Line 1948
	lea	ecx, DWORD PTR [edi+edx]
	mov	DWORD PTR _widthb$[ebp], ecx
	jmp	SHORT $L86895
$L85963:
; Line 1951
	movzx	eax, al
	inc	DWORD PTR _pszStr$[ebp]
	movzx	eax, BYTE PTR _fontidx[eax]
	mov	al, BYTE PTR _fontframe[eax]
; Line 1952
	movzx	ebx, al
; Line 1954
	test	al, al
	movzx	ecx, BYTE PTR _fontkern[ebx]
	lea	edi, DWORD PTR [edi+ecx+1]
	je	SHORT $L85966
; Line 1955
	cmp	edi, esi
	jge	SHORT $L85966
; Line 1956
	push	DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _widthb$[ebp]
	mov	edx, ebx
	call	@CPrintString@12
$L85966:
; Line 1958
	movzx	eax, BYTE PTR _fontkern[ebx]
	mov	ecx, DWORD PTR _widthb$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _widthb$[ebp], eax
; Line 1959
	mov	eax, DWORD PTR _pszStr$[ebp]
	mov	al, BYTE PTR [eax]
$L86895:
; Line 1949
	test	al, al
	jne	SHORT $L85963
	pop	edi
	pop	esi
	pop	ebx
; Line 1961
	leave
	ret	12					; 0000000cH
@ADD_PlrStringXY@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @MY_PlrStringXY@24
_TEXT	SEGMENT
_width$ = 8
_pszStr$ = 12
_col$ = 16
_base$ = 20
_v6$ = -4
_v8$ = 12
_v10$ = 8
_widthb$ = 12
@MY_PlrStringXY@24 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 1964
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1978
	mov	eax, DWORD PTR _screen_y_times_768[edx*4+640]
	push	ebx
	push	esi
; Line 1981
	mov	esi, DWORD PTR _width$[ebp]
	push	edi
	mov	edi, DWORD PTR _pszStr$[ebp]
	lea	edx, DWORD PTR [eax+ecx+64]
	sub	esi, ecx
	mov	al, BYTE PTR [edi]
	xor	ebx, ebx
	inc	esi
	mov	DWORD PTR _v6$[ebp], edi
; Line 1984
	test	al, al
	mov	DWORD PTR _v8$[ebp], ebx
	je	SHORT $L85994
; Line 1985
	mov	cl, al
$L85992:
; Line 1988
	movzx	ecx, cl
	inc	edi
	movzx	ecx, BYTE PTR _fontidx[ecx]
	mov	DWORD PTR _v10$[ebp], edi
	movzx	ecx, BYTE PTR _fontframe[ecx]
	movzx	ecx, BYTE PTR _fontkern[ecx]
	add	ecx, DWORD PTR _base$[ebp]
	add	DWORD PTR _v8$[ebp], ecx
; Line 1989
	mov	cl, BYTE PTR [edi]
; Line 1990
	test	cl, cl
	jne	SHORT $L85992
$L85994:
; Line 1992
	cmp	DWORD PTR _v8$[ebp], esi
	jge	SHORT $L85995
; Line 1993
	mov	ebx, esi
	sub	ebx, DWORD PTR _v8$[ebp]
	sar	ebx, 1
$L85995:
; Line 1994
	lea	ecx, DWORD PTR [ebx+edx]
	mov	DWORD PTR _widthb$[ebp], ecx
	jmp	SHORT $L86902
$L85997:
; Line 1997
	movzx	eax, al
	inc	DWORD PTR _v6$[ebp]
	movzx	eax, BYTE PTR _fontidx[eax]
	mov	al, BYTE PTR _fontframe[eax]
; Line 1998
	movzx	edi, al
; Line 1999
	movzx	ecx, BYTE PTR _fontkern[edi]
	add	ecx, DWORD PTR _base$[ebp]
	add	ebx, ecx
; Line 2000
	test	al, al
	je	SHORT $L86000
; Line 2001
	cmp	ebx, esi
	jge	SHORT $L86000
; Line 2002
	push	DWORD PTR _col$[ebp]
	mov	ecx, DWORD PTR _widthb$[ebp]
	mov	edx, edi
	call	@CPrintString@12
$L86000:
; Line 2004
	movzx	eax, BYTE PTR _fontkern[edi]
	add	eax, DWORD PTR _base$[ebp]
	add	DWORD PTR _widthb$[ebp], eax
; Line 2005
	mov	eax, DWORD PTR _v6$[ebp]
	mov	al, BYTE PTR [eax]
$L86902:
; Line 1995
	test	al, al
	jne	SHORT $L85997
	pop	edi
	pop	esi
	pop	ebx
; Line 2007
	leave
	ret	16					; 00000010H
@MY_PlrStringXY@24 ENDP
_TEXT	ENDS
PUBLIC	_CheckLvlBtn
; Function compile flags: /Ogsy
;	COMDAT _CheckLvlBtn
_TEXT	SEGMENT
_CheckLvlBtn PROC NEAR					; COMDAT
; Line 2011
	cmp	DWORD PTR _lvlbtndown, 0
	jne	SHORT $L86002
	mov	eax, DWORD PTR _MouseX
	cmp	eax, 40					; 00000028H
	jl	SHORT $L86002
	cmp	eax, 81					; 00000051H
	jg	SHORT $L86002
	mov	eax, DWORD PTR _MouseY
	cmp	eax, 313				; 00000139H
	jl	SHORT $L86002
	cmp	eax, 335				; 0000014fH
	jg	SHORT $L86002
; Line 2012
	mov	DWORD PTR _lvlbtndown, 1
$L86002:
; Line 2013
	ret	0
_CheckLvlBtn ENDP
_TEXT	ENDS
PUBLIC	_ReleaseLvlBtn
; Function compile flags: /Ogsy
;	COMDAT _ReleaseLvlBtn
_TEXT	SEGMENT
_ReleaseLvlBtn PROC NEAR				; COMDAT
; Line 2018
	mov	eax, DWORD PTR _MouseX
	cmp	eax, 40					; 00000028H
	jl	SHORT $L86004
	cmp	eax, 81					; 00000051H
	jg	SHORT $L86004
	mov	eax, DWORD PTR _MouseY
	cmp	eax, 313				; 00000139H
	jl	SHORT $L86004
	cmp	eax, 335				; 0000014fH
	jg	SHORT $L86004
; Line 2019
	mov	DWORD PTR _chrflag, 1
$L86004:
; Line 2020
	and	DWORD PTR _lvlbtndown, 0
; Line 2021
	ret	0
_ReleaseLvlBtn ENDP
_TEXT	ENDS
PUBLIC	_DrawLevelUpIcon
PUBLIC	??_C@_08IOGD@Level?5Up?$AA@			; `string'
EXTRN	_stextflag:BYTE
;	COMDAT ??_C@_08IOGD@Level?5Up?$AA@
_DATA	SEGMENT
??_C@_08IOGD@Level?5Up?$AA@ DB 'Level Up', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DrawLevelUpIcon
_TEXT	SEGMENT
_DrawLevelUpIcon PROC NEAR				; COMDAT
; Line 2028
	xor	eax, eax
	cmp	BYTE PTR _stextflag, al
	jne	SHORT $L86007
; Line 2029
	xor	ecx, ecx
	cmp	DWORD PTR _lvlbtndown, eax
	push	esi
; Line 2030
	push	eax
	setne	cl
	inc	ecx
	push	OFFSET FLAT:??_C@_08IOGD@Level?5Up?$AA@	; `string'
	inc	ecx
	push	120					; 00000078H
	mov	esi, ecx
	mov	edx, 303				; 0000012fH
	xor	ecx, ecx
	call	@ADD_PlrStringXY@20
; Line 2031
	push	41					; 00000029H
	push	esi
	push	DWORD PTR _pChrButtons
	mov	edx, 495				; 000001efH
	push	104					; 00000068H
	pop	ecx
	call	@CelDecodeOnly@20
	pop	esi
$L86007:
; Line 2033
	ret	0
_DrawLevelUpIcon ENDP
_TEXT	ENDS
PUBLIC	_CheckChrBtns
; Function compile flags: /Ogsy
;	COMDAT _CheckChrBtns
_TEXT	SEGMENT
_CheckChrBtns PROC NEAR					; COMDAT
; Line 2038
	push	esi
; Line 2041
	xor	esi, esi
	cmp	DWORD PTR _chrbtnactive, esi
	jne	$L86015
	mov	ecx, DWORD PTR _myplr
	imul	ecx, 21720				; 000054d8H
	cmp	DWORD PTR _plr[ecx+388], esi
	je	$L86015
	push	ebx
; Line 2043
	mov	ebx, DWORD PTR _MouseX
	push	ebp
	push	edi
	movsx	edi, BYTE PTR _plr[ecx+352]
$L86013:
; Line 2044
	mov	eax, esi
	sub	eax, 0
	je	SHORT $L86020
	dec	eax
	je	SHORT $L86022
	dec	eax
	je	SHORT $L86024
	dec	eax
	jne	$L86014
; Line 2058
	mov	edx, DWORD PTR _plr[ecx+384]
	mov	eax, edi
	shl	eax, 4
	cmp	edx, DWORD PTR _MaxStats[eax+12]
; Line 2060
	jmp	SHORT $L86918
$L86024:
; Line 2054
	mov	edx, DWORD PTR _plr[ecx+376]
	mov	eax, edi
	shl	eax, 4
	cmp	edx, DWORD PTR _MaxStats[eax+8]
; Line 2056
	jmp	SHORT $L86918
$L86022:
; Line 2050
	mov	edx, DWORD PTR _plr[ecx+368]
	mov	eax, edi
	shl	eax, 4
	cmp	edx, DWORD PTR _MaxStats[eax+4]
; Line 2052
	jmp	SHORT $L86918
$L86020:
; Line 2046
	mov	edx, DWORD PTR _plr[ecx+360]
	mov	eax, edi
	shl	eax, 4
	cmp	edx, DWORD PTR _MaxStats[eax]
$L86918:
	jge	SHORT $L86014
; Line 2067
	mov	eax, esi
	shl	eax, 4
	mov	edx, DWORD PTR _attribute_inc_rects[eax]
	cmp	ebx, edx
	jl	SHORT $L86014
	mov	ebp, DWORD PTR _attribute_inc_rects[eax+8]
	add	ebp, edx
	cmp	ebx, ebp
	jg	SHORT $L86014
	mov	edx, DWORD PTR _attribute_inc_rects[eax+4]
	mov	ebp, DWORD PTR _MouseY
	cmp	ebp, edx
	jl	SHORT $L86014
	mov	eax, DWORD PTR _attribute_inc_rects[eax+12]
	add	eax, edx
	cmp	ebp, eax
	jg	SHORT $L86014
; Line 2068
	xor	eax, eax
	inc	eax
	mov	DWORD PTR _chrbtn[esi*4], eax
; Line 2069
	mov	DWORD PTR _chrbtnactive, eax
$L86014:
	inc	esi
	cmp	esi, 4
	jl	$L86013
	pop	edi
	pop	ebp
	pop	ebx
$L86015:
	pop	esi
; Line 2073
	ret	0
_CheckChrBtns ENDP
_TEXT	ENDS
PUBLIC	_ReleaseChrBtns
EXTRN	@NetSendCmdParam1@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT _ReleaseChrBtns
_TEXT	SEGMENT
_ReleaseChrBtns PROC NEAR				; COMDAT
; Line 2084
	and	DWORD PTR _chrbtnactive, 0
	push	ebx
	push	esi
; Line 2085
	xor	esi, esi
$L86037:
; Line 2087
	lea	eax, DWORD PTR _chrbtn[esi*4]
; Line 2088
	cmp	DWORD PTR [eax], 0
	je	SHORT $LABEL_16$86052
; Line 2089
	and	DWORD PTR [eax], 0
; Line 2092
	mov	edx, DWORD PTR _MouseX
	mov	eax, esi
	shl	eax, 4
	mov	ecx, DWORD PTR _attribute_inc_rects[eax]
	cmp	edx, ecx
	jl	SHORT $LABEL_16$86052
	mov	ebx, DWORD PTR _attribute_inc_rects[eax+8]
	add	ebx, ecx
	cmp	edx, ebx
	jg	SHORT $LABEL_16$86052
; Line 2093
	mov	ecx, DWORD PTR _attribute_inc_rects[eax+4]
; Line 2094
	mov	edx, DWORD PTR _MouseY
	cmp	edx, ecx
	jl	SHORT $LABEL_16$86052
	mov	eax, DWORD PTR _attribute_inc_rects[eax+12]
	add	eax, ecx
	cmp	edx, eax
	jg	SHORT $LABEL_16$86052
; Line 2095
	test	esi, esi
	je	SHORT $L86043
; Line 2096
	mov	eax, esi
	dec	eax
	je	SHORT $L86048
	dec	eax
	je	SHORT $L86049
	dec	eax
	jne	SHORT $LABEL_16$86052
; Line 2104
	mov	dl, 6
; Line 2105
	jmp	SHORT $L86053
$L86049:
; Line 2101
	mov	dl, 5
; Line 2102
	jmp	SHORT $L86053
$L86048:
; Line 2098
	mov	dl, 4
; Line 2109
	jmp	SHORT $L86053
$L86043:
; Line 2110
	mov	dl, 3
$L86053:
; Line 2112
	xor	ecx, ecx
	push	1
	inc	ecx
	call	@NetSendCmdParam1@12
; Line 2113
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	lea	eax, DWORD PTR _plr[eax+388]
	dec	DWORD PTR [eax]
$LABEL_16$86052:
; Line 2118
	inc	esi
; Line 2119
	cmp	esi, 4
	jl	$L86037
	pop	esi
	pop	ebx
; Line 2120
	ret	0
_ReleaseChrBtns ENDP
_TEXT	ENDS
PUBLIC	_DrawDurIcon
PUBLIC	@DrawDurIcon4Item@12
; Function compile flags: /Ogsy
;	COMDAT _DrawDurIcon
_TEXT	SEGMENT
_DrawDurIcon PROC NEAR					; COMDAT
; Line 2130
	cmp	DWORD PTR _chrflag, 0
	mov	eax, DWORD PTR _invflag
	mov	ecx, DWORD PTR _sbookflag
	jne	SHORT $L86062
	cmp	DWORD PTR _questlog, 0
	je	SHORT $L86061
$L86062:
	test	eax, eax
	jne	SHORT $L86060
	test	ecx, ecx
	jne	SHORT $L86060
$L86061:
; Line 2132
	test	eax, eax
	mov	edx, 656				; 00000290H
	jne	SHORT $L86064
	test	ecx, ecx
	je	SHORT $L86063
$L86064:
; Line 2133
	mov	edx, 336				; 00000150H
$L86063:
	push	esi
; Line 2134
	mov	esi, DWORD PTR _myplr
	imul	esi, 21720				; 000054d8H
	add	esi, OFFSET FLAT:_plr
; Line 2135
	push	4
	lea	ecx, DWORD PTR [esi+892]
	call	@DrawDurIcon4Item@12
; Line 2136
	push	3
	lea	ecx, DWORD PTR [esi+3100]
	mov	edx, eax
	call	@DrawDurIcon4Item@12
; Line 2137
	push	0
	lea	ecx, DWORD PTR [esi+2364]
	mov	edx, eax
	call	@DrawDurIcon4Item@12
; Line 2138
	push	0
	lea	ecx, DWORD PTR [esi+2732]
	mov	edx, eax
	call	@DrawDurIcon4Item@12
	pop	esi
$L86060:
; Line 2140
	ret	0
_DrawDurIcon ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @DrawDurIcon4Item@12
_TEXT	SEGMENT
_c$ = 8
@DrawDurIcon4Item@12 PROC NEAR				; COMDAT
; _pItem$ = ecx
; _x$ = edx
; Line 2156
	mov	eax, DWORD PTR [ecx+8]
	push	esi
	push	edi
; Line 2158
	cmp	eax, -1
	mov	edi, edx
; Line 2159
	je	SHORT $L86930
; Line 2160
	mov	esi, DWORD PTR [ecx+236]
; Line 2161
	cmp	esi, 5
	jle	SHORT $L86082
$L86930:
; Line 2162
	mov	eax, edi
	jmp	SHORT $L86071
$L86082:
; Line 2163
	mov	edx, DWORD PTR _c$[esp+4]
; Line 2164
	test	edx, edx
	jne	SHORT $LABEL_18$86085
; Line 2165
	cmp	BYTE PTR [ecx+190], 1
	je	SHORT $L86084
; Line 2166
	inc	edx
; Line 2167
	jmp	SHORT $LABEL_18$86085
$L86084:
; Line 2169
	dec	eax
; Line 2170
	test	eax, eax
	jne	SHORT $L86086
; Line 2171
	push	2
; Line 2172
	jmp	SHORT $L86929
$L86086:
; Line 2174
	dec	eax
; Line 2175
	test	eax, eax
	jne	SHORT $L86088
; Line 2176
	push	6
; Line 2177
	jmp	SHORT $L86929
$L86088:
; Line 2179
	dec	eax
; Line 2180
	test	eax, eax
	jne	SHORT $L86089
; Line 2181
	push	7
; Line 2182
	jmp	SHORT $L86929
$L86089:
; Line 2184
	dec	eax
; Line 2185
	test	eax, eax
	jne	SHORT $L86090
; Line 2186
	push	5
; Line 2187
	jmp	SHORT $L86929
$L86090:
; Line 2189
	cmp	eax, 6
	jne	SHORT $LABEL_18$86085
; Line 2190
	push	8
$L86929:
	pop	eax
$LABEL_15$86087:
; Line 2192
	mov	edx, eax
$LABEL_18$86085:
; Line 2197
	cmp	esi, 2
	jle	SHORT $L86092
; Line 2198
	add	edx, 8
$L86092:
; Line 2199
	push	32					; 00000020H
	push	edx
	push	DWORD PTR _pDurIcons
	mov	edx, 495				; 000001efH
	mov	ecx, edi
	call	@CelDecodeOnly@20
; Line 2200
	lea	eax, DWORD PTR [edi-40]
$L86071:
	pop	edi
	pop	esi
; Line 2201
	ret	4
@DrawDurIcon4Item@12 ENDP
_TEXT	ENDS
PUBLIC	_RedBack
EXTRN	_pLightTbl:DWORD
EXTRN	_light4flag:DWORD
; Function compile flags: /Ogsy
;	COMDAT _RedBack
_TEXT	SEGMENT
_v0$ = -4
_RedBack PROC NEAR					; COMDAT
; Line 2204
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2216
	xor	eax, eax
; Line 2221
	mov	edx, DWORD PTR _pLightTbl
	cmp	DWORD PTR _light4flag, eax
	push	esi
	push	edi
	setne	al
	neg	eax
	mov	DWORD PTR _v0$[ebp], eax
	mov	eax, DWORD PTR _gpBuffer
	and	WORD PTR _v0$[ebp], 62464		; 0000f400H
	add	eax, 122944				; 0001e040H
	cmp	BYTE PTR _leveltype, 4
	mov	ecx, DWORD PTR _v0$[ebp]
	jne	SHORT $L86105
	push	ebx
	lea	esi, DWORD PTR [edx+ecx+4608]
	mov	ebx, 352				; 00000160H
$L86106:
; Line 2224
	mov	edi, 640				; 00000280H
$L86109:
; Line 2226
	mov	dl, BYTE PTR [eax]
; Line 2227
	cmp	dl, 32					; 00000020H
	movsx	ecx, dl
	jb	SHORT $L86113
; Line 2228
	movzx	edx, cl
	xor	cl, cl
	movzx	edx, BYTE PTR [edx+esi]
	add	ecx, edx
$L86113:
; Line 2229
	mov	BYTE PTR [eax], cl
	inc	eax
; Line 2231
	dec	edi
	jne	SHORT $L86109
; Line 2232
	add	eax, 128				; 00000080H
; Line 2234
	dec	ebx
	jne	SHORT $L86106
	pop	ebx
; Line 2235
	jmp	SHORT $L86119
$L86105:
; Line 2237
	lea	ecx, DWORD PTR [edx+ecx+4608]
	mov	edi, 352				; 00000160H
$L86117:
; Line 2240
	mov	esi, 640				; 00000280H
$L86120:
; Line 2242
	movsx	edx, BYTE PTR [eax]
; Line 2244
	movzx	edx, dl
	mov	dl, BYTE PTR [edx+ecx]
	mov	BYTE PTR [eax], dl
	inc	eax
; Line 2246
	dec	esi
	jne	SHORT $L86120
; Line 2247
	add	eax, 128				; 00000080H
; Line 2249
	dec	edi
	jne	SHORT $L86117
$L86119:
	pop	edi
	pop	esi
; Line 2251
	leave
	ret	0
_RedBack ENDP
_TEXT	ENDS
PUBLIC	@GetSBookTrans@8
; Function compile flags: /Ogsy
;	COMDAT @GetSBookTrans@8
_TEXT	SEGMENT
_townok$ = -4
_result$ = -5
@GetSBookTrans@8 PROC NEAR				; COMDAT
; _ii$ = ecx
; _townok$ = edx
; Line 2255
	push	ecx
	push	ecx
	push	ebx
; Line 2257
	mov	ebx, DWORD PTR _myplr
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	xor	eax, eax
	mov	DWORD PTR _townok$[esp+24], edx
	lea	ebp, DWORD PTR [edi-1]
	mov	esi, ebx
	inc	eax
	xor	edx, edx
	mov	ecx, ebp
	mov	BYTE PTR _result$[esp+24], 1
	imul	esi, 21720				; 000054d8H
	call	__allshl
	mov	ecx, DWORD PTR _plr[esi+21576]
	and	ecx, eax
	mov	eax, DWORD PTR _plr[esi+21580]
	and	eax, edx
	or	ecx, eax
	je	SHORT $L86132
; Line 2258
	mov	BYTE PTR _result$[esp+24], 3
$L86132:
; Line 2259
	xor	eax, eax
	mov	ecx, ebp
	inc	eax
	shl	eax, cl
	cdq
	and	eax, DWORD PTR _plr[esi+272]
	and	edx, DWORD PTR _plr[esi+276]
	or	eax, edx
	je	SHORT $L86133
; Line 2260
	and	BYTE PTR _result$[esp+24], 0
$L86133:
; Line 2262
	cmp	BYTE PTR _result$[esp+24], 1
	jne	SHORT $L86137
; Line 2263
	push	1
	push	1
	mov	edx, edi
	mov	ecx, ebx
	call	@CheckSpell@16
	test	eax, eax
	jne	SHORT $L86135
; Line 2264
	mov	BYTE PTR _result$[esp+24], 4
$L86135:
; Line 2265
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	cl, BYTE PTR _plr[eax+edi+193]
	add	cl, BYTE PTR _plr[eax+21592]
	test	cl, cl
	jg	SHORT $L86137
; Line 2266
	mov	BYTE PTR _result$[esp+24], 4
$L86137:
; Line 2269
	cmp	DWORD PTR _townok$[esp+24], 0
	je	SHORT $L86138
	cmp	BYTE PTR _currlevel, 0
	jne	SHORT $L86138
	cmp	BYTE PTR _result$[esp+24], 4
	je	SHORT $L86138
	imul	edi, 56					; 00000038H
	cmp	DWORD PTR _spelldata[edi+24], 0
	jne	SHORT $L86138
; Line 2270
	mov	BYTE PTR _result$[esp+24], 4
$L86138:
; Line 2272
	mov	al, BYTE PTR _result$[esp+24]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2273
	pop	ecx
	pop	ecx
	ret	0
@GetSBookTrans@8 ENDP
_TEXT	ENDS
PUBLIC	_DrawSpellBook
PUBLIC	@PrintSBookStr@20
PUBLIC	??_C@_0BD@BBBG@Staff?5?$CI?$CFi?5charges?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BE@OLFF@Mana?3?5?$CFi?5?5?5Dam?3?5n?1a?$AA@ ; `string'
PUBLIC	??_C@_0BH@DMNL@Mana?3?5?$CFi?5?5Dam?3?5?$CFi?5?9?5?$CFi?$AA@ ; `string'
PUBLIC	??_C@_0BK@BBBC@Mana?3?5?$CFi?5?5Dam?3?51?13?5tgt?5hp?$AA@ ; `string'
PUBLIC	??_C@_05MMNO@Skill?$AA@				; `string'
EXTRN	@GetDamageAmt@12:NEAR
EXTRN	@GetManaAmount@8:NEAR
;	COMDAT ??_C@_0BD@BBBG@Staff?5?$CI?$CFi?5charges?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BD@BBBG@Staff?5?$CI?$CFi?5charges?$CJ?$AA@ DB 'Staff (%i charges)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OLFF@Mana?3?5?$CFi?5?5?5Dam?3?5n?1a?$AA@
_DATA	SEGMENT
??_C@_0BE@OLFF@Mana?3?5?$CFi?5?5?5Dam?3?5n?1a?$AA@ DB 'Mana: %i   Dam: n/'
	DB	'a', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@DMNL@Mana?3?5?$CFi?5?5Dam?3?5?$CFi?5?9?5?$CFi?$AA@
_DATA	SEGMENT
??_C@_0BH@DMNL@Mana?3?5?$CFi?5?5Dam?3?5?$CFi?5?9?5?$CFi?$AA@ DB 'Mana: %i'
	DB	'  Dam: %i - %i', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@BBBC@Mana?3?5?$CFi?5?5Dam?3?51?13?5tgt?5hp?$AA@
_DATA	SEGMENT
??_C@_0BK@BBBC@Mana?3?5?$CFi?5?5Dam?3?51?13?5tgt?5hp?$AA@ DB 'Mana: %i  D'
	DB	'am: 1/3 tgt hp', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MMNO@Skill?$AA@
_DATA	SEGMENT
??_C@_05MMNO@Skill?$AA@ DB 'Skill', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _DrawSpellBook
_TEXT	SEGMENT
_v7$ = -21
_v9$ = -16
_sel$ = -12
_v11$ = -8
_DrawSpellBook PROC NEAR				; COMDAT
; Line 2276
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
; Line 2291
	xor	esi, esi
	push	edi
	inc	esi
	push	320					; 00000140H
	push	esi
	push	DWORD PTR _pSpellBkCel
	mov	edx, 511				; 000001ffH
	mov	ecx, 384				; 00000180H
	call	@CelDecodeOnly@20
; Line 2292
	mov	ecx, DWORD PTR _sbooktab
	push	76					; 0000004cH
	mov	edx, 508				; 000001fcH
	lea	eax, DWORD PTR [ecx+1]
	imul	ecx, 76					; 0000004cH
	push	eax
	add	ecx, 391				; 00000187H
	push	DWORD PTR _pSBkBtnCel
	call	@CelDecodeOnly@20
; Line 2295
	mov	eax, DWORD PTR _myplr
	mov	DWORD PTR _v9$[esp+40], esi
	imul	eax, 21720				; 000054d8H
	mov	DWORD PTR -20+[esp+40], 215		; 000000d7H
	mov	edi, DWORD PTR _plr[eax+272]
	mov	ebp, DWORD PTR _plr[eax+276]
	or	edi, DWORD PTR _plr[eax+264]
	or	ebp, DWORD PTR _plr[eax+268]
	or	edi, DWORD PTR _plr[eax+21576]
	or	ebp, DWORD PTR _plr[eax+21580]
$L86153:
; Line 2297
	mov	eax, DWORD PTR _sbooktab
	imul	eax, 7
	add	eax, DWORD PTR _v9$[esp+40]
	mov	esi, DWORD PTR _SpellPages[eax*4-4]
; Line 2299
	cmp	esi, -1
	je	$L86157
	xor	eax, eax
	lea	ecx, DWORD PTR [esi-1]
	inc	eax
	xor	edx, edx
	call	__allshl
	and	eax, edi
	and	edx, ebp
	or	eax, edx
	je	$L86157
; Line 2300
	xor	edx, edx
	mov	ecx, esi
	inc	edx
	call	@GetSBookTrans@8
	mov	cl, al
	mov	BYTE PTR _v7$[esp+40], cl
; Line 2301
	call	@SetSpellTrans@4
; Line 2302
	movsx	eax, BYTE PTR _SpellITbl[esi]
	mov	ebx, DWORD PTR -20+[esp+40]
	push	37					; 00000025H
	push	eax
	mov	edx, ebx
	push	DWORD PTR _pSBkIconCels
	mov	ecx, 395				; 0000018bH
	call	@DrawSpellCel@20
; Line 2303
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	cmp	esi, DWORD PTR _plr[eax+180]
	jne	SHORT $L86161
	movzx	eax, BYTE PTR _plr[eax+184]
	movsx	ecx, BYTE PTR _v7$[esp+40]
	cmp	ecx, eax
	jne	SHORT $L86161
; Line 2304
	xor	cl, cl
	call	@SetSpellTrans@4
; Line 2305
	push	37					; 00000025H
	push	43					; 0000002bH
	push	DWORD PTR _pSBkIconCels
	mov	edx, ebx
	mov	ecx, 395				; 0000018bH
	call	@DrawSpellCel@20
$L86161:
; Line 2307
	mov	eax, esi
	push	0
	imul	eax, 56					; 00000038H
	lea	edx, DWORD PTR [ebx-23]
	push	DWORD PTR _spelldata[eax+4]
	push	0
	push	10					; 0000000aH
	pop	ecx
	call	@PrintSBookStr@20
; Line 2308
	xor	edx, edx
	mov	ecx, esi
	call	@GetSBookTrans@8
; Line 2309
	test	al, al
	je	$L86163
; Line 2310
	cmp	al, 3
	jne	SHORT $L86164
; Line 2311
	mov	eax, DWORD PTR _myplr
	mov	ebx, OFFSET FLAT:_tempstr
	imul	eax, 21720				; 000054d8H
	push	DWORD PTR _plr[eax+2592]
	push	OFFSET FLAT:??_C@_0BD@BBBG@Staff?5?$CI?$CFi?5charges?$CJ?$AA@ ; `string'
; Line 2312
	jmp	$L86949
$L86164:
; Line 2313
	mov	ecx, DWORD PTR _myplr
	mov	edx, esi
	call	@GetManaAmount@8
	mov	ebx, eax
; Line 2316
	lea	eax, DWORD PTR _v11$[esp+40]
	sar	ebx, 6
	push	eax
	lea	edx, DWORD PTR _sel$[esp+44]
	mov	ecx, esi
	mov	DWORD PTR -4+[esp+44], ebx
	call	@GetDamageAmt@12
; Line 2317
	cmp	DWORD PTR _sel$[esp+40], -1
	jne	SHORT $L86167
; Line 2318
	push	ebx
	mov	ebx, OFFSET FLAT:_tempstr
	push	OFFSET FLAT:??_C@_0BE@OLFF@Mana?3?5?$CFi?5?5?5Dam?3?5n?1a?$AA@ ; `string'
	push	ebx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 2319
	jmp	SHORT $L86169
$L86167:
; Line 2320
	push	DWORD PTR _v11$[esp+40]
	push	DWORD PTR _sel$[esp+44]
	push	ebx
	mov	ebx, OFFSET FLAT:_tempstr
	push	OFFSET FLAT:??_C@_0BH@DMNL@Mana?3?5?$CFi?5?5Dam?3?5?$CFi?5?9?5?$CFi?$AA@ ; `string'
	push	ebx
	call	_sprintf
	add	esp, 20					; 00000014H
$L86169:
; Line 2321
	cmp	esi, 36					; 00000024H
	jne	SHORT $L86171
; Line 2322
	push	DWORD PTR -4+[esp+40]
	push	OFFSET FLAT:??_C@_0BK@BBBC@Mana?3?5?$CFi?5?5Dam?3?51?13?5tgt?5hp?$AA@ ; `string'
	push	ebx
	call	_sprintf
	add	esp, 12					; 0000000cH
$L86171:
; Line 2323
	mov	eax, DWORD PTR -20+[esp+40]
	push	0
	push	ebx
	push	0
	push	10					; 0000000aH
	lea	edx, DWORD PTR [eax-1]
	pop	ecx
	call	@PrintSBookStr@20
; Line 2324
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	movsx	ecx, BYTE PTR _plr[eax+esi+193]
	movsx	eax, BYTE PTR _plr[eax+21592]
	add	ecx, eax
; Line 2325
	jns	SHORT $L86173
; Line 2326
	xor	ecx, ecx
$L86173:
; Line 2327
	test	ecx, ecx
	je	SHORT $L86174
; Line 2328
	push	ecx
	push	OFFSET FLAT:??_C@_0P@EMPL@Spell?5Level?5?$CFi?$AA@ ; `string'
$L86949:
	push	ebx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 2329
	jmp	SHORT $L86176
$L86174:
; Line 2330
	push	OFFSET FLAT:??_C@_0BJ@FKGC@Spell?5Level?50?5?9?5Unusable?$AA@ ; `string'
	push	ebx
	call	_sprintf
; Line 2332
	jmp	SHORT $L86948
$L86163:
; Line 2333
	mov	ebx, OFFSET FLAT:_tempstr
	push	OFFSET FLAT:??_C@_05MMNO@Skill?$AA@	; `string'
	push	ebx
	call	_strcpy
$L86948:
	pop	ecx
	pop	ecx
$L86176:
; Line 2335
	mov	eax, DWORD PTR -20+[esp+40]
	push	0
	push	ebx
	push	0
	push	10					; 0000000aH
	lea	edx, DWORD PTR [eax-12]
	pop	ecx
	call	@PrintSBookStr@20
$L86157:
; Line 2337
	add	DWORD PTR -20+[esp+40], 43		; 0000002bH
; Line 2338
	inc	DWORD PTR _v9$[esp+40]
; Line 2339
	cmp	DWORD PTR _v9$[esp+40], 8
	jl	$L86153
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 2340
	add	esp, 24					; 00000018H
	ret	0
_DrawSpellBook ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @PrintSBookStr@20
_TEXT	SEGMENT
_cjustflag$ = 8
_pszStr$ = 12
_bright$ = 16
_v5$ = 12
@PrintSBookStr@20 PROC NEAR				; COMDAT
; _x$ = ecx
; _y$ = edx
; Line 2344
	push	ebp
	mov	ebp, esp
; Line 2356
	mov	eax, DWORD PTR _screen_y_times_768[edx*4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _pszStr$[ebp]
	lea	ebx, DWORD PTR [eax+ecx+440]
; Line 2357
	xor	ecx, ecx
; Line 2358
	xor	esi, esi
; Line 2359
	cmp	BYTE PTR _cjustflag$[ebp], 0
	mov	DWORD PTR _v5$[ebp], edi
	je	SHORT $L86206
; Line 2360
	mov	al, BYTE PTR [edi]
; Line 2362
	test	al, al
	je	SHORT $LABEL_14$86200
$L86201:
; Line 2366
	movzx	eax, al
	inc	edi
	movzx	eax, BYTE PTR _fontidx[eax]
	movzx	eax, BYTE PTR _fontframe[eax]
	movzx	eax, BYTE PTR _fontkern[eax]
	lea	ecx, DWORD PTR [ecx+eax+1]
; Line 2367
	mov	al, BYTE PTR [edi]
; Line 2368
	test	al, al
	jne	SHORT $L86201
; Line 2369
	cmp	ecx, 222				; 000000deH
	jge	SHORT $L86204
$LABEL_14$86200:
; Line 2371
	mov	esi, 222				; 000000deH
	sub	esi, ecx
	sar	esi, 1
$L86204:
; Line 2372
	add	ebx, esi
$L86206:
; Line 2375
	mov	eax, DWORD PTR _v5$[ebp]
	mov	al, BYTE PTR [eax]
; Line 2376
	test	al, al
	je	SHORT $L86955
; Line 2379
	movzx	eax, al
	inc	DWORD PTR _v5$[ebp]
	movzx	eax, BYTE PTR _fontidx[eax]
	mov	al, BYTE PTR _fontframe[eax]
; Line 2380
	movzx	edi, al
; Line 2382
	test	al, al
	movzx	ecx, BYTE PTR _fontkern[edi]
	lea	esi, DWORD PTR [esi+ecx+1]
	je	SHORT $L86210
; Line 2383
	cmp	esi, 222				; 000000deH
	jg	SHORT $L86210
; Line 2384
	push	DWORD PTR _bright$[ebp]
	mov	edx, edi
	mov	ecx, ebx
	call	@CPrintString@12
$L86210:
; Line 2386
	movzx	eax, BYTE PTR _fontkern[edi]
	lea	ebx, DWORD PTR [ebx+eax+1]
	jmp	SHORT $L86206
$L86955:
	pop	edi
	pop	esi
	pop	ebx
; Line 2388
	pop	ebp
	ret	12					; 0000000cH
@PrintSBookStr@20 ENDP
_TEXT	ENDS
PUBLIC	_CheckSBook
; Function compile flags: /Ogsy
;	COMDAT _CheckSBook
_TEXT	SEGMENT
_spell$86213 = -8
_splType$86217 = -1
_CheckSBook PROC NEAR					; COMDAT
; Line 2391
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 2392
	mov	ecx, DWORD PTR _MouseY
	push	esi
	mov	esi, DWORD PTR _MouseX
	push	edi
	cmp	esi, 331				; 0000014bH
	jl	$L86216
	cmp	esi, 368				; 00000170H
	jge	$L86216
	cmp	ecx, 18					; 00000012H
	jl	$L86216
	cmp	ecx, 314				; 0000013aH
	jge	$L86216
; Line 2393
	lea	eax, DWORD PTR [ecx-18]
	push	43					; 0000002bH
	cdq
	pop	edi
	idiv	edi
	mov	edx, DWORD PTR _sbooktab
	imul	edx, 7
	add	eax, edx
	mov	eax, DWORD PTR _SpellPages[eax*4]
; Line 2394
	cmp	eax, -1
	mov	DWORD PTR _spell$86213[ebp], eax
	je	$L86216
; Line 2395
	mov	esi, DWORD PTR _myplr
	push	ebx
	imul	esi, 21720				; 000054d8H
	xor	edx, edx
	mov	ecx, DWORD PTR _plr[esi+21576]
	mov	edi, DWORD PTR _plr[esi+272]
	mov	DWORD PTR -16+[ebp], ecx
	mov	ecx, DWORD PTR _plr[esi+21580]
	mov	ebx, DWORD PTR _plr[esi+276]
	mov	DWORD PTR -16+[ebp+4], ecx
	lea	ecx, DWORD PTR [eax-1]
	xor	eax, eax
	inc	eax
	call	__allshl
	mov	ecx, DWORD PTR _plr[esi+264]
	or	ecx, edi
	mov	edi, DWORD PTR _plr[esi+268]
	or	ecx, DWORD PTR -16+[ebp]
	or	edi, ebx
	or	edi, DWORD PTR -16+[ebp+4]
	pop	ebx
	and	ecx, eax
	and	edi, edx
	or	ecx, edi
	je	SHORT $L86964
; Line 2397
	mov	ecx, eax
	mov	edi, edx
	and	ecx, DWORD PTR -16+[ebp]
	and	edi, DWORD PTR -16+[ebp+4]
	mov	BYTE PTR _splType$86217[ebp], 1
	or	ecx, edi
; Line 2398
	mov	cl, 3
	jne	SHORT $L86219
	mov	cl, BYTE PTR _splType$86217[ebp]
$L86219:
; Line 2399
	and	eax, DWORD PTR _plr[esi+272]
	and	edx, DWORD PTR _plr[esi+276]
	or	eax, edx
	je	SHORT $L86221
; Line 2400
	xor	cl, cl
$L86221:
; Line 2401
	mov	eax, DWORD PTR _spell$86213[ebp]
; Line 2403
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	mov	DWORD PTR _plr[esi+180], eax
	mov	BYTE PTR _plr[esi+184], cl
$L86964:
	mov	esi, DWORD PTR _MouseX
	mov	ecx, DWORD PTR _MouseY
$L86216:
; Line 2407
	cmp	esi, 327				; 00000147H
	jl	SHORT $L86222
	cmp	esi, 633				; 00000279H
	jge	SHORT $L86222
	cmp	ecx, 320				; 00000140H
	jl	SHORT $L86222
	cmp	ecx, 349				; 0000015dH
	jge	SHORT $L86222
; Line 2408
	lea	eax, DWORD PTR [esi-327]
	push	76					; 0000004cH
	cdq
	pop	ecx
	idiv	ecx
	mov	DWORD PTR _sbooktab, eax
$L86222:
	pop	edi
	pop	esi
; Line 2409
	leave
	ret	0
_CheckSBook ENDP
_TEXT	ENDS
PUBLIC	??_C@_05JAHO@piece?$AA@				; `string'
PUBLIC	??_C@_06MHHJ@pieces?$AA@			; `string'
;	COMDAT ??_C@_05JAHO@piece?$AA@
_DATA	SEGMENT
??_C@_05JAHO@piece?$AA@ DB 'piece', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MHHJ@pieces?$AA@
_DATA	SEGMENT
??_C@_06MHHJ@pieces?$AA@ DB 'pieces', 00H		; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @get_pieces_str@4
_TEXT	SEGMENT
@get_pieces_str@4 PROC NEAR				; COMDAT
; _nGold$ = ecx
; Line 2418
	cmp	ecx, 1
	mov	eax, OFFSET FLAT:??_C@_05JAHO@piece?$AA@ ; `string'
	je	SHORT $L86228
; Line 2419
	mov	eax, OFFSET FLAT:??_C@_06MHHJ@pieces?$AA@ ; `string'
$L86228:
; Line 2421
	ret	0
@get_pieces_str@4 ENDP
_TEXT	ENDS
PUBLIC	@DrawGoldSplit@4
PUBLIC	??_C@_0BB@KGFD@You?5have?5?$CFu?5gold?$AA@	; `string'
PUBLIC	??_C@_0BB@OKKB@?$CFs?4?5?5How?5many?5do?$AA@	; `string'
PUBLIC	??_C@_0BE@OKDG@you?5want?5to?5remove?$DP?$AA@	; `string'
PUBLIC	??_C@_02MHMJ@?$CFu?$AA@				; `string'
EXTRN	_pCelBuff:DWORD
;	COMDAT ??_C@_0BB@KGFD@You?5have?5?$CFu?5gold?$AA@
_DATA	SEGMENT
??_C@_0BB@KGFD@You?5have?5?$CFu?5gold?$AA@ DB 'You have %u gold', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OKKB@?$CFs?4?5?5How?5many?5do?$AA@
_DATA	SEGMENT
??_C@_0BB@OKKB@?$CFs?4?5?5How?5many?5do?$AA@ DB '%s.  How many do', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@OKDG@you?5want?5to?5remove?$DP?$AA@
_DATA	SEGMENT
??_C@_0BE@OKDG@you?5want?5to?5remove?$DP?$AA@ DB 'you want to remove?', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_02MHMJ@?$CFu?$AA@
_DATA	SEGMENT
??_C@_02MHMJ@?$CFu?$AA@ DB '%u', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @DrawGoldSplit@4
_TEXT	SEGMENT
_amount$ = -4
@DrawGoldSplit@4 PROC NEAR				; COMDAT
; _amount$ = ecx
; Line 2424
	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 2434
	push	261					; 00000105H
	push	1
	push	DWORD PTR _pGBoxBuff
	mov	DWORD PTR _amount$[esp+32], ecx
	mov	edx, 338				; 00000152H
	mov	ecx, 415				; 0000019fH
	xor	ebp, ebp
	call	@CelDecodeOnly@20
; Line 2435
	mov	esi, OFFSET FLAT:_tempstr
	push	DWORD PTR _initialDropGoldValue
	push	OFFSET FLAT:??_C@_0BB@KGFD@You?5have?5?$CFu?5gold?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 2436
	mov	edi, 600				; 00000258H
	mov	ebx, 366				; 0000016eH
	push	3
	push	esi
	push	edi
	push	87					; 00000057H
	pop	edx
	mov	ecx, ebx
	call	@ADD_PlrStringXY@20
; Line 2437
	mov	ecx, DWORD PTR _initialDropGoldValue
	call	@get_pieces_str@4
; Line 2438
	push	eax
	push	OFFSET FLAT:??_C@_0BB@OKKB@?$CFs?4?5?5How?5many?5do?$AA@ ; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 2439
	mov	ecx, ebx
	push	3
	push	esi
	push	edi
	push	103					; 00000067H
	pop	edx
	call	@ADD_PlrStringXY@20
; Line 2440
	mov	ecx, ebx
	push	3
	push	OFFSET FLAT:??_C@_0BE@OKDG@you?5want?5to?5remove?$DP?$AA@ ; `string'
	push	edi
	push	121					; 00000079H
	pop	edx
	call	@ADD_PlrStringXY@20
; Line 2441
	cmp	DWORD PTR _amount$[esp+20], ebp
	jg	SHORT $L86242
; Line 2442
	mov	ecx, 450				; 000001c2H
; Line 2443
	jmp	SHORT $L86243
$L86242:
; Line 2444
	push	DWORD PTR _amount$[esp+20]
	push	OFFSET FLAT:??_C@_02MHMJ@?$CFu?$AA@	; `string'
	push	esi
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 2445
	mov	edx, 140				; 0000008cH
	mov	ecx, 388				; 00000184H
	push	0
	push	esi
	call	@PrintGameStr@16
; Line 2446
	mov	al, BYTE PTR _tempstr
; Line 2447
	xor	ecx, ecx
	test	al, al
	jle	SHORT $L86247
$L86245:
; Line 2449
	movzx	eax, al
	inc	ecx
	movzx	eax, BYTE PTR _fontidx[eax]
	movzx	eax, BYTE PTR _fontframe[eax]
	movzx	eax, BYTE PTR _fontkern[eax]
	lea	ebp, DWORD PTR [eax+ebp+1]
	mov	al, BYTE PTR _tempstr[ecx]
	movsx	edx, al
	cmp	ecx, edx
	jl	SHORT $L86245
$L86247:
; Line 2451
	lea	ecx, DWORD PTR [ebp+452]
$L86243:
; Line 2453
	push	12					; 0000000cH
	mov	edx, 300				; 0000012cH
	push	DWORD PTR _frame_4B8800
	push	DWORD PTR _pCelBuff
	call	@CelDecodeOnly@20
; Line 2454
	mov	eax, DWORD PTR _frame_4B8800
	and	eax, 7
	pop	edi
	inc	eax
	pop	esi
	pop	ebp
	mov	DWORD PTR _frame_4B8800, eax
	pop	ebx
; Line 2455
	pop	ecx
	ret	0
@DrawGoldSplit@4 ENDP
_TEXT	ENDS
PUBLIC	@control_drop_gold@4
PUBLIC	@control_remove_gold@8
EXTRN	_atoi:NEAR
EXTRN	__itoa:NEAR
EXTRN	_strlen:NEAR
; Function compile flags: /Ogsy
;	COMDAT @control_drop_gold@4
_TEXT	SEGMENT
_v6$ = -8
@control_drop_gold@4 PROC NEAR				; COMDAT
; _vkey$ = cl
; Line 2458
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 2466
	mov	eax, DWORD PTR _myplr
	push	ebx
	imul	eax, 21720				; 000054d8H
	push	esi
	mov	bl, cl
	test	DWORD PTR _plr[eax+408], -64		; ffffffc0H
	jg	SHORT $L86257
; Line 2467
	and	DWORD PTR _dropGoldFlag, 0
; Line 2468
	and	DWORD PTR _dropGoldValue, 0
; Line 2469
	jmp	$L86251
$L86257:
; Line 2471
	xor	esi, esi
	push	6
	lea	eax, DWORD PTR _v6$[ebp]
	push	esi
	push	eax
	call	_memset
; Line 2472
	lea	eax, DWORD PTR _v6$[ebp]
	push	10					; 0000000aH
	push	eax
	push	DWORD PTR _dropGoldValue
	call	__itoa
	add	esp, 24					; 00000018H
; Line 2473
	cmp	bl, 13					; 0000000dH
	je	$L86258
; Line 2474
	cmp	bl, 27					; 0000001bH
	jne	SHORT $L86259
; Line 2476
	mov	DWORD PTR _dropGoldValue, esi
; Line 2477
	jmp	$L86269
$L86259:
; Line 2479
	cmp	bl, 8
	jne	SHORT $L86260
; Line 2480
	lea	eax, DWORD PTR _v6$[ebp]
	push	eax
	call	_strlen
	and	BYTE PTR _v6$[ebp+eax-1], 0
; Line 2481
	lea	eax, DWORD PTR _v6$[ebp]
	push	eax
	call	_atoi
	pop	ecx
; Line 2482
	jmp	SHORT $L86975
$L86260:
; Line 2483
	movsx	eax, bl
	sub	eax, 48					; 00000030H
; Line 2484
	js	$L86251
	cmp	eax, 9
	jg	$L86251
; Line 2486
	cmp	DWORD PTR _dropGoldValue, esi
	jne	SHORT $L86265
	lea	eax, DWORD PTR _v6$[ebp]
	push	eax
	call	_atoi
	cmp	eax, DWORD PTR _initialDropGoldValue
	pop	ecx
	jle	SHORT $L86265
; Line 2494
	mov	BYTE PTR _v6$[ebp], bl
	jmp	SHORT $L86267
$L86265:
; Line 2487
	lea	eax, DWORD PTR _v6$[ebp]
	push	eax
	call	_strlen
	mov	BYTE PTR _v6$[ebp+eax], bl
; Line 2488
	lea	eax, DWORD PTR _v6$[ebp]
	push	eax
	call	_atoi
	cmp	eax, DWORD PTR _initialDropGoldValue
	pop	ecx
	pop	ecx
	jg	SHORT $L86251
; Line 2490
	lea	eax, DWORD PTR _v6$[ebp]
	push	eax
	call	_strlen
	mov	esi, eax
; Line 2491
	lea	eax, DWORD PTR _v6$[ebp]
	push	eax
	call	_strlen
	pop	ecx
	cmp	esi, eax
	pop	ecx
	ja	SHORT $L86251
$L86267:
; Line 2496
	lea	eax, DWORD PTR _v6$[ebp]
	push	eax
	call	_atoi
$L86975:
	pop	ecx
; Line 2498
	mov	DWORD PTR _dropGoldValue, eax
; Line 2499
	jmp	SHORT $L86251
$L86258:
; Line 2501
	cmp	DWORD PTR _dropGoldValue, esi
	jle	SHORT $L86269
; Line 2502
	mov	edx, DWORD PTR _initialDropGoldIndex
	mov	ecx, DWORD PTR _myplr
	call	@control_remove_gold@8
$L86269:
; Line 2503
	mov	DWORD PTR _dropGoldFlag, esi
$L86251:
	pop	esi
	pop	ebx
; Line 2504
	leave
	ret	0
@control_drop_gold@4 ENDP
_TEXT	ENDS
PUBLIC	@control_set_gold_curs@4
EXTRN	@SetSpdbarGoldCurs@8:NEAR
EXTRN	@RemoveInvItem@8:NEAR
EXTRN	@RemoveSpdBarItem@8:NEAR
EXTRN	@CalculateGold@4:NEAR
EXTRN	@SetPlrHandItem@8:NEAR
EXTRN	@GetGoldSeed@8:NEAR
EXTRN	@SetGoldCurs@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @control_remove_gold@8
_TEXT	SEGMENT
@control_remove_gold@8 PROC NEAR			; COMDAT
; _pnum$ = ecx
; _gold_index$ = edx
; Line 2509
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 2523
	mov	ecx, DWORD PTR _dropGoldValue
	mov	esi, edi
	imul	esi, 21720				; 000054d8H
	cmp	edx, 46					; 0000002eH
	jle	SHORT $L86282
	add	edx, -47				; ffffffd1H
	mov	eax, edx
	imul	eax, 368				; 00000170H
	lea	eax, DWORD PTR _plr[eax+esi+18428]
	sub	DWORD PTR [eax], ecx
; Line 2525
	mov	ecx, edi
	jne	SHORT $L86285
	call	@RemoveSpdBarItem@8
; Line 2526
	jmp	SHORT $L86291
$L86285:
; Line 2527
	call	@SetSpdbarGoldCurs@8
; Line 2528
	jmp	SHORT $L86291
$L86282:
; Line 2529
	add	edx, -7					; fffffff9H
; Line 2530
	mov	eax, edx
	imul	eax, 368				; 00000170H
	lea	eax, DWORD PTR _plr[eax+esi+3664]
; Line 2531
	sub	DWORD PTR [eax], ecx
; Line 2533
	mov	ecx, edi
	jne	SHORT $L86290
	call	@RemoveInvItem@8
; Line 2534
	jmp	SHORT $L86291
$L86290:
; Line 2535
	call	@SetGoldCurs@8
$L86291:
; Line 2537
	lea	ebx, DWORD PTR _plr[esi+21176]
	xor	edx, edx
	mov	ecx, ebx
	call	@SetPlrHandItem@8
; Line 2538
	mov	edx, ebx
	mov	ecx, edi
	call	@GetGoldSeed@8
; Line 2539
	mov	eax, DWORD PTR _dropGoldValue
; Line 2541
	mov	ecx, edi
	mov	DWORD PTR _plr[esi+21372], eax
	mov	DWORD PTR _plr[esi+21532], 1
	call	@control_set_gold_curs@4
; Line 2542
	mov	ecx, edi
	call	@CalculateGold@4
; Line 2543
	and	DWORD PTR _dropGoldValue, 0
; Line 2544
	mov	DWORD PTR _plr[esi+460], eax
	pop	edi
	pop	esi
	pop	ebx
; Line 2545
	ret	0
@control_remove_gold@8 ENDP
_TEXT	ENDS
EXTRN	@SetCursor_@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @control_set_gold_curs@4
_TEXT	SEGMENT
@control_set_gold_curs@4 PROC NEAR			; COMDAT
; _pnum$ = ecx
; Line 2549
	imul	ecx, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[ecx+21372]
	cmp	eax, 2500				; 000009c4H
	jl	SHORT $L86295
; Line 2550
	lea	eax, DWORD PTR _plr[ecx+21368]
	mov	DWORD PTR [eax], 6
; Line 2551
	jmp	SHORT $L86298
$L86295:
; Line 2552
	cmp	eax, 1000				; 000003e8H
; Line 2553
	lea	eax, DWORD PTR _plr[ecx+21368]
	jg	SHORT $L86297
	mov	DWORD PTR [eax], 4
; Line 2554
	jmp	SHORT $L86298
$L86297:
; Line 2555
	mov	DWORD PTR [eax], 5
$L86298:
; Line 2557
	mov	ecx, DWORD PTR [eax]
	add	ecx, 12					; 0000000cH
	jmp	@SetCursor_@4
@control_set_gold_curs@4 ENDP
_TEXT	ENDS
PUBLIC	_DrawTalkPan
PUBLIC	@control_print_talk_msg@20
EXTRN	@CelDecDatOnly@16:NEAR
; Function compile flags: /Ogsy
;	COMDAT _DrawTalkPan
_TEXT	SEGMENT
_a4$ = -12
_a1$ = -4
_v10$ = -8
_DrawTalkPan PROC NEAR					; COMDAT
; Line 2561
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
; Line 2574
	xor	esi, esi
; Line 2575
	cmp	DWORD PTR _talkflag, esi
	je	$L86990
; Line 2576
	mov	eax, DWORD PTR _sgbPlrTalkTbl
	push	ebx
	push	edi
	push	516					; 00000204H
	push	239					; 000000efH
	push	5
	push	294					; 00000126H
	lea	edx, DWORD PTR [eax+20]
	mov	ecx, 175				; 000000afH
	call	@DrawPanelBox@24
; Line 2577
	mov	edi, 293				; 00000125H
$L86312:
; Line 2579
	mov	eax, esi
	lea	ecx, DWORD PTR [esi+521]
	sar	eax, 1
	push	ecx
	lea	ecx, DWORD PTR [eax+239]
	push	ecx
	mov	ecx, DWORD PTR _sgbPlrTalkTbl
	push	1
	push	edi
	lea	edx, DWORD PTR [ecx+esi+25]
	lea	ecx, DWORD PTR [eax+175]
	call	@DrawPanelBox@24
; Line 2580
	inc	esi
; Line 2581
	dec	edi
; Line 2582
	cmp	edi, 283				; 0000011bH
	jg	SHORT $L86312
; Line 2583
	mov	eax, DWORD PTR _sgbPlrTalkTbl
	push	531					; 00000213H
	push	249					; 000000f9H
	push	30					; 0000001eH
	push	274					; 00000112H
	lea	edx, DWORD PTR [eax+35]
	mov	ecx, 185				; 000000b9H
	call	@DrawPanelBox@24
; Line 2584
	mov	eax, DWORD PTR _sgbPlrTalkTbl
	mov	edi, 244				; 000000f4H
	push	561					; 00000231H
	push	edi
	mov	ebx, 180				; 000000b4H
	push	5
	push	284					; 0000011cH
	lea	edx, DWORD PTR [eax+65]
	mov	ecx, ebx
	call	@DrawPanelBox@24
; Line 2585
	xor	esi, esi
$L86315:
; Line 2587
	lea	eax, DWORD PTR [esi+284]
	lea	ecx, DWORD PTR [eax+282]
	push	ecx
	push	edi
	push	1
	push	eax
	mov	eax, DWORD PTR _sgbPlrTalkTbl
	mov	ecx, ebx
	lea	edx, DWORD PTR [eax+esi+70]
	call	@DrawPanelBox@24
; Line 2588
	inc	esi
; Line 2589
	cmp	esi, 10					; 0000000aH
	jl	SHORT $L86315
; Line 2590
	mov	eax, DWORD PTR _sgbPlrTalkTbl
	push	576					; 00000240H
	push	234					; 000000eaH
	push	55					; 00000037H
	push	310					; 00000136H
	lea	edx, DWORD PTR [eax+80]
	mov	ecx, 170				; 000000aaH
	call	@DrawPanelBox@24
; Line 2591
	mov	eax, OFFSET FLAT:_sgszTalkMsg
; Line 2592
	xor	esi, esi
$L86318:
; Line 2594
	lea	ecx, DWORD PTR _a4$[ebp]
	push	0
	push	ecx
	push	esi
	xor	edx, edx
	mov	ecx, eax
	call	@control_print_talk_msg@20
; Line 2595
	test	eax, eax
	je	SHORT $LABEL_10$86322
; Line 2597
	add	esi, 13					; 0000000dH
; Line 2598
	cmp	esi, 39					; 00000027H
	jl	SHORT $L86318
; Line 2599
	and	BYTE PTR [eax], 0
$LABEL_10$86322:
; Line 2601
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _a4$[ebp]
	mov	edx, DWORD PTR _pCelBuff
	push	12					; 0000000cH
	push	DWORD PTR _frame
	add	ecx, eax
	call	@CelDecDatOnly@16
; Line 2605
	mov	eax, DWORD PTR _frame
	xor	esi, esi
	and	DWORD PTR _v10$[ebp], esi
	and	eax, 7
	inc	eax
	push	60					; 0000003cH
	mov	DWORD PTR _a1$[ebp], OFFSET FLAT:_plr+320
	mov	DWORD PTR _frame, eax
	pop	ebx
$L86326:
; Line 2606
	mov	eax, DWORD PTR _v10$[ebp]
	cmp	eax, DWORD PTR _myplr
	je	SHORT $LABEL_21$86328
; Line 2613
	cmp	BYTE PTR _byte_4B894C[eax], 0
	je	SHORT $L86332
; Line 2615
	cmp	DWORD PTR _talkbtndown[esi*4], 0
	push	3
	pop	edi
	je	SHORT $LABEL_18$86334
; Line 2622
	xor	eax, eax
	test	esi, esi
	setne	al
	add	eax, edi
; Line 2623
	jmp	SHORT $L86337
$L86332:
; Line 2624
	xor	ecx, ecx
; Line 2625
	push	2
	test	esi, esi
	setne	cl
; Line 2626
	cmp	DWORD PTR _talkbtndown[esi*4], 0
	pop	edi
	lea	eax, DWORD PTR [ecx+1]
	je	SHORT $L86337
; Line 2627
	lea	eax, DWORD PTR [ecx+5]
$L86337:
; Line 2629
	push	61					; 0000003dH
	push	eax
	push	DWORD PTR _pTalkBtns
	lea	edx, DWORD PTR [ebx+536]
	mov	ecx, 236				; 000000ecH
	call	@CelDecodeOnly@20
$LABEL_18$86334:
	mov	eax, DWORD PTR _a1$[ebp]
	cmp	BYTE PTR [eax-291], 0
	je	SHORT $L86335
	mov	ecx, DWORD PTR _a1$[ebp]
	lea	eax, DWORD PTR _a4$[ebp]
	push	edi
	push	eax
	push	ebx
	push	46					; 0000002eH
	pop	edx
	call	@control_print_talk_msg@20
$L86335:
	inc	esi
	add	ebx, 18					; 00000012H
$LABEL_21$86328:
	add	DWORD PTR _a1$[ebp], 21720		; 000054d8H
	inc	DWORD PTR _v10$[ebp]
	cmp	DWORD PTR _a1$[ebp], OFFSET FLAT:_plr+87200
	jl	$L86326
	pop	edi
	pop	ebx
$L86990:
	pop	esi
; Line 2632
	leave
	ret	0
_DrawTalkPan ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @control_print_talk_msg@20
_TEXT	SEGMENT
_y$ = 8
_a4$ = 12
_just$ = 16
_a3$ = 8
@control_print_talk_msg@20 PROC NEAR			; COMDAT
; _msg$ = ecx
; _x$ = edx
; Line 2637
	push	ebp
	mov	ebp, esp
; Line 2648
	mov	eax, DWORD PTR _y$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _a4$[ebp]
	mov	eax, DWORD PTR _screen_y_times_768[eax*4+2136]
	add	edx, 264				; 00000108H
	add	eax, edx
	push	edi
	mov	DWORD PTR [esi], eax
; Line 2649
	mov	al, BYTE PTR [ecx]
; Line 2651
	test	al, al
	mov	ebx, ecx
; Line 2652
	je	SHORT $L86996
$L86358:
; Line 2654
	movzx	eax, al
	movzx	eax, BYTE PTR _fontidx[eax]
	mov	al, BYTE PTR _fontframe[eax]
; Line 2655
	movzx	edi, al
; Line 2656
	movzx	ecx, BYTE PTR _fontkern[edi]
	lea	edx, DWORD PTR [ecx+edx+1]
; Line 2657
	cmp	edx, 514				; 00000202H
	mov	DWORD PTR _a3$[ebp], edx
	jg	SHORT $L86359
; Line 2659
	inc	ebx
; Line 2660
	test	al, al
	je	SHORT $L86361
; Line 2661
	push	DWORD PTR _just$[ebp]
	mov	ecx, DWORD PTR [esi]
	mov	edx, edi
	call	@CPrintString@12
$L86361:
; Line 2662
	movzx	eax, BYTE PTR _fontkern[edi]
	inc	eax
	add	DWORD PTR [esi], eax
; Line 2663
	mov	al, BYTE PTR [ebx]
; Line 2664
	test	al, al
	je	SHORT $L86996
; Line 2666
	mov	edx, DWORD PTR _a3$[ebp]
; Line 2653
	jmp	SHORT $L86358
$L86996:
; Line 2665
	xor	eax, eax
	jmp	SHORT $L86348
$L86359:
; Line 2668
	mov	eax, ebx
$L86348:
	pop	edi
	pop	esi
	pop	ebx
; Line 2669
	pop	ebp
	ret	12					; 0000000cH
@control_print_talk_msg@20 ENDP
_TEXT	ENDS
PUBLIC	_control_check_talk_btn
; Function compile flags: /Ogsy
;	COMDAT _control_check_talk_btn
_TEXT	SEGMENT
_control_check_talk_btn PROC NEAR			; COMDAT
; Line 2676
	xor	eax, eax
	cmp	DWORD PTR _talkflag, eax
; Line 2677
	je	SHORT $L86369
; Line 2678
	mov	edx, DWORD PTR _MouseX
	cmp	edx, 172				; 000000acH
; Line 2679
	jl	SHORT $L86369
; Line 2681
	mov	ecx, DWORD PTR _MouseY
	cmp	ecx, 421				; 000001a5H
	jl	SHORT $L86369
	cmp	edx, 233				; 000000e9H
	jg	SHORT $L86369
; Line 2684
	cmp	ecx, 475				; 000001dbH
	jg	SHORT $L86363
; Line 2685
	mov	DWORD PTR _talkbtndown, eax
; Line 2686
	mov	DWORD PTR _talkbtndown+4, eax
; Line 2687
	mov	DWORD PTR _talkbtndown+8, eax
; Line 2688
	lea	eax, DWORD PTR [ecx-421]
	push	18					; 00000012H
	cdq
	pop	ecx
	idiv	ecx
	xor	ecx, ecx
	inc	ecx
	mov	DWORD PTR _talkbtndown[eax*4], ecx
; Line 2689
	mov	eax, ecx
; Line 2692
	ret	0
$L86369:
; Line 2682
	xor	eax, eax
$L86363:
; Line 2692
	ret	0
_control_check_talk_btn ENDP
_TEXT	ENDS
PUBLIC	_control_release_talk_btn
; Function compile flags: /Ogsy
;	COMDAT _control_release_talk_btn
_TEXT	SEGMENT
_control_release_talk_btn PROC NEAR			; COMDAT
; Line 2696
	push	ebx
; Line 2701
	xor	ebx, ebx
	cmp	DWORD PTR _talkflag, ebx
	je	SHORT $L86382
; Line 2702
	mov	ecx, DWORD PTR _MouseX
; Line 2703
	mov	DWORD PTR _talkbtndown, ebx
; Line 2706
	cmp	ecx, 172				; 000000acH
	mov	DWORD PTR _talkbtndown+4, ebx
	mov	DWORD PTR _talkbtndown+8, ebx
	jl	SHORT $L86382
	mov	eax, DWORD PTR _MouseY
	cmp	eax, 421				; 000001a5H
	jl	SHORT $L86382
	cmp	ecx, 233				; 000000e9H
	jg	SHORT $L86382
	cmp	eax, 475				; 000001dbH
	jg	SHORT $L86382
; Line 2707
	add	eax, -421				; fffffe5bH
	push	18					; 00000012H
	cdq
	pop	ecx
	idiv	ecx
; Line 2708
	xor	ecx, ecx
$L86377:
; Line 2710
	cmp	eax, -1
	je	SHORT $L86379
; Line 2712
	cmp	ecx, DWORD PTR _myplr
	je	SHORT $L86381
; Line 2713
	dec	eax
$L86381:
; Line 2714
	inc	ecx
; Line 2715
	cmp	ecx, 4
	jl	SHORT $L86377
$L86379:
; Line 2716
	cmp	ecx, 4
	jg	SHORT $L86382
; Line 2717
	lea	eax, DWORD PTR _tempstr[ecx+255]
	cmp	BYTE PTR [eax], bl
	sete	cl
	mov	BYTE PTR [eax], cl
$L86382:
	pop	ebx
; Line 2720
	ret	0
_control_release_talk_btn ENDP
_TEXT	ENDS
PUBLIC	_control_reset_talk_msg
EXTRN	@msgcmd_add_server_cmd_W@4:NEAR
EXTRN	@NetSendCmdString@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _control_reset_talk_msg
_TEXT	SEGMENT
_control_reset_talk_msg PROC NEAR			; COMDAT
; Line 2724
	push	esi
	push	edi
; Line 2727
	xor	edi, edi
; Line 2728
	xor	ecx, ecx
$L86386:
; Line 2730
	cmp	BYTE PTR _byte_4B894C[ecx], 0
	je	SHORT $L86389
; Line 2731
	xor	eax, eax
	inc	eax
	shl	eax, cl
	or	edi, eax
$L86389:
; Line 2732
	inc	ecx
; Line 2733
	cmp	ecx, 4
	jl	SHORT $L86386
; Line 2734
	mov	esi, OFFSET FLAT:_sgszTalkMsg
	mov	ecx, esi
	call	@msgcmd_add_server_cmd_W@4
	test	al, al
	jne	SHORT $L86390
; Line 2735
	mov	ecx, edi
	mov	edx, esi
	pop	edi
	pop	esi
	jmp	@NetSendCmdString@8
$L86390:
	pop	edi
	pop	esi
; Line 2736
	ret	0
_control_reset_talk_msg ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _control_type_message
_TEXT	SEGMENT
_control_type_message PROC NEAR				; COMDAT
; Line 2740
	xor	eax, eax
	inc	eax
	cmp	BYTE PTR _gbMaxPlayers, al
	je	SHORT $L86392
; Line 2742
	mov	DWORD PTR _talkflag, eax
; Line 2743
	mov	DWORD PTR _frame, eax
; Line 2749
	mov	al, BYTE PTR _sgbNextTalkSave
	xor	ecx, ecx
	mov	BYTE PTR _sgszTalkMsg, cl
	mov	DWORD PTR _talkbtndown, ecx
	mov	DWORD PTR _talkbtndown+4, ecx
	mov	DWORD PTR _talkbtndown+8, ecx
	mov	DWORD PTR _sgbPlrTalkTbl, 144		; 00000090H
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
	mov	BYTE PTR _sgbTalkSavePos, al
$L86392:
; Line 2751
	ret	0
_control_type_message ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT _control_reset_talk
_TEXT	SEGMENT
_control_reset_talk PROC NEAR				; COMDAT
; Line 2761
	and	DWORD PTR _talkflag, 0
; Line 2762
	and	DWORD PTR _sgbPlrTalkTbl, 0
; Line 2763
	mov	DWORD PTR _drawpanflag, 255		; 000000ffH
; Line 2764
	ret	0
_control_reset_talk ENDP
_TEXT	ENDS
PUBLIC	@control_talk_last_key@4
; Function compile flags: /Ogsy
;	COMDAT @control_talk_last_key@4
_TEXT	SEGMENT
@control_talk_last_key@4 PROC NEAR			; COMDAT
; _a1$ = ecx
; Line 2775
	cmp	BYTE PTR _gbMaxPlayers, 1
	push	ebx
	mov	ebx, ecx
	je	SHORT $L86401
	cmp	DWORD PTR _talkflag, 0
	je	SHORT $L86401
	cmp	ebx, 32					; 00000020H
	jb	SHORT $L86401
; Line 2777
	push	OFFSET FLAT:_sgszTalkMsg
	call	_strlen
; Line 2778
	cmp	eax, 78					; 0000004eH
	pop	ecx
	jge	SHORT $L86402
; Line 2779
	and	BYTE PTR _sgszTalkMsg[eax+1], 0
; Line 2780
	mov	BYTE PTR _sgszTalkMsg[eax], bl
$L86402:
; Line 2782
	xor	eax, eax
	pop	ebx
	inc	eax
; Line 2783
	ret	0
$L86401:
; Line 2776
	xor	eax, eax
	pop	ebx
; Line 2783
	ret	0
@control_talk_last_key@4 ENDP
_TEXT	ENDS
PUBLIC	@control_presskeys@4
PUBLIC	_control_press_enter
PUBLIC	@control_up_down@4
; Function compile flags: /Ogsy
;	COMDAT @control_presskeys@4
_TEXT	SEGMENT
@control_presskeys@4 PROC NEAR				; COMDAT
; _a1$ = ecx
; Line 2788
	push	ebx
; Line 2792
	xor	ebx, ebx
	inc	ebx
	mov	eax, ecx
	cmp	BYTE PTR _gbMaxPlayers, bl
	je	SHORT $L86410
	cmp	DWORD PTR _talkflag, 0
	je	SHORT $L86410
; Line 2793
	sub	eax, 8
	je	SHORT $L86416
	sub	eax, 5
	je	SHORT $L86415
	sub	eax, 14					; 0000000eH
	je	SHORT $L86414
	sub	eax, 5
	je	SHORT $L86417
	sub	eax, 6
	je	SHORT $L86420
	dec	eax
	dec	eax
	jne	SHORT $L86410
; Line 2808
	mov	cl, bl
	jmp	SHORT $LABEL_15$86419
$L86420:
; Line 2813
	or	cl, -1
$LABEL_15$86419:
; Line 2810
	call	@control_up_down@4
$L86417:
; Line 2811
	mov	eax, ebx
	pop	ebx
; Line 2818
	ret	0
$L86414:
; Line 2797
	call	_control_reset_talk
; Line 2798
	jmp	SHORT $L86417
$L86415:
; Line 2800
	call	_control_press_enter
; Line 2801
	jmp	SHORT $L86417
$L86416:
; Line 2803
	push	OFFSET FLAT:_sgszTalkMsg
	call	_strlen
; Line 2804
	test	eax, eax
	pop	ecx
	jle	SHORT $L86417
; Line 2805
	and	BYTE PTR _sgszTalkMsg[eax-1], 0
; Line 2806
	jmp	SHORT $L86417
$L86410:
; Line 2817
	xor	eax, eax
	pop	ebx
; Line 2818
	ret	0
@control_presskeys@4 ENDP
_TEXT	ENDS
EXTRN	_strcmp:NEAR
; Function compile flags: /Ogsy
;	COMDAT _control_press_enter
_TEXT	SEGMENT
_control_press_enter PROC NEAR				; COMDAT
; Line 2830
	cmp	BYTE PTR _sgszTalkMsg, 0
	je	$L86427
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 2831
	call	_control_reset_talk_msg
; Line 2833
	mov	edi, OFFSET FLAT:_sgszTalkSave
	xor	esi, esi
	mov	ebx, edi
	mov	ebp, OFFSET FLAT:_sgszTalkMsg
$L86428:
; Line 2835
	push	ebp
	push	ebx
	call	_strcmp
	pop	ecx
	test	eax, eax
	pop	ecx
	je	SHORT $L86430
; Line 2837
	add	ebx, 80					; 00000050H
; Line 2838
	inc	esi
; Line 2839
	cmp	ebx, OFFSET FLAT:_sgszTalkSave+640
	jl	SHORT $L86428
$L86430:
; Line 2840
	cmp	esi, 8
	jge	SHORT $L86435
; Line 2841
	mov	cl, BYTE PTR _sgbNextTalkSave
; Line 2842
	mov	al, cl
	dec	eax
	and	eax, 7
; Line 2843
	cmp	esi, eax
	je	SHORT $L86437
; Line 2845
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	lea	ebx, DWORD PTR _sgszTalkSave[eax]
	lea	eax, DWORD PTR [esi+esi*4]
	shl	eax, 4
	add	eax, edi
	push	ebx
	push	eax
	call	_strcpy
; Line 2846
	push	ebp
	push	ebx
	call	_strcpy
; Line 2847
	mov	cl, BYTE PTR _sgbNextTalkSave
	add	esp, 16					; 00000010H
; Line 2849
	jmp	SHORT $L86437
$L86435:
; Line 2850
	movzx	eax, BYTE PTR _sgbNextTalkSave
	push	ebp
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	add	eax, edi
	push	eax
	call	_strcpy
; Line 2851
	mov	al, BYTE PTR _sgbNextTalkSave
	pop	ecx
	inc	al
	pop	ecx
	and	al, 7
	mov	cl, al
; Line 2852
	mov	BYTE PTR _sgbNextTalkSave, al
$L86437:
; Line 2854
	and	BYTE PTR _sgszTalkMsg, 0
	pop	edi
	pop	esi
	pop	ebp
; Line 2855
	mov	BYTE PTR _sgbTalkSavePos, cl
	pop	ebx
$L86427:
; Line 2857
	jmp	_control_reset_talk
_control_press_enter ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @control_up_down@4
_TEXT	SEGMENT
@control_up_down@4 PROC NEAR				; COMDAT
; _a1$ = cl
; Line 2867
	mov	al, BYTE PTR _sgbTalkSavePos
	push	esi
; Line 2868
	xor	esi, esi
$L86445:
; Line 2870
	add	al, cl
	and	al, 7
; Line 2872
	movzx	edx, al
	mov	BYTE PTR _sgbTalkSavePos, al
	lea	edx, DWORD PTR [edx+edx*4]
	shl	edx, 4
	cmp	BYTE PTR _sgszTalkSave[edx], 0
	jne	SHORT $L86446
; Line 2874
	inc	esi
	cmp	esi, 8
	jl	SHORT $L86445
	pop	esi
; Line 2878
	ret	0
$L86446:
; Line 2877
	movzx	eax, al
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	add	eax, OFFSET FLAT:_sgszTalkSave
	push	eax
	push	OFFSET FLAT:_sgszTalkMsg
	call	_strcpy
	pop	ecx
	pop	ecx
	pop	esi
; Line 2878
	ret	0
@control_up_down@4 ENDP
_TEXT	ENDS
END
