; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/capture.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0N@OFOL@screen?$DP?$DP?4PCX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@NOBD@screen?$CF02d?4PCX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _CaptureScreen
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CaptureHdr@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CapturePal@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CapturePix@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CaptureEnc@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @CaptureFile@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @RedPalette@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_CaptureScreen
PUBLIC	@CaptureHdr@12
PUBLIC	@CapturePal@8
PUBLIC	@CapturePix@20
PUBLIC	@CaptureFile@4
PUBLIC	@RedPalette@4
EXTRN	_lpDDPalette:DWORD
EXTRN	_gpBuffer:DWORD
EXTRN	@j_lock_buf_priv@4:NEAR
EXTRN	@j_unlock_buf_priv@4:NEAR
EXTRN	__imp__Sleep@4:NEAR
EXTRN	__imp__DeleteFileA@4:NEAR
EXTRN	__imp__CloseHandle@4:NEAR
EXTRN	_DrawAndBlit:NEAR
; Function compile flags: /Ogsy
;	COMDAT _CaptureScreen
_TEXT	SEGMENT
_hObject$ = -4
_palette$ = -1288
_FileName$ = -264
_CaptureScreen PROC NEAR				; COMDAT
; File Source/capture.cpp
; Line 6
	push	ebp
	mov	ebp, esp
	sub	esp, 1288				; 00000508H
; Line 12
	lea	ecx, DWORD PTR _FileName$[ebp]
	call	@CaptureFile@4
; Line 13
	cmp	eax, -1
	mov	DWORD PTR _hObject$[ebp], eax
	je	$L84988
	push	ebx
	push	esi
	push	edi
; Line 14
	call	_DrawAndBlit
; Line 18
	mov	eax, DWORD PTR _lpDDPalette
	lea	edx, DWORD PTR _palette$[ebp]
	mov	ebx, 256				; 00000100H
	push	edx
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+16]
; Line 20
	lea	ecx, DWORD PTR _palette$[ebp]
	call	@RedPalette@4
; Line 22
	mov	cl, 2
	call	@j_lock_buf_priv@4
; Line 23
	mov	ecx, DWORD PTR _hObject$[ebp]
	mov	esi, 480				; 000001e0H
	push	esi
	mov	dx, 640					; 00000280H
	call	@CaptureHdr@12
	mov	edi, eax
; Line 24
	test	edi, edi
	je	SHORT $L84991
; Line 25
	mov	eax, DWORD PTR _gpBuffer
	mov	ecx, DWORD PTR _hObject$[ebp]
	add	eax, 122944				; 0001e040H
	mov	dx, 640					; 00000280H
	push	eax
	push	768					; 00000300H
	push	esi
	call	@CapturePix@20
	mov	edi, eax
; Line 26
	test	edi, edi
	je	SHORT $L84991
; Line 27
	mov	ecx, DWORD PTR _hObject$[ebp]
	lea	edx, DWORD PTR _palette$[ebp]
	call	@CapturePal@8
	mov	edi, eax
$L84991:
; Line 30
	mov	cl, 2
	call	@j_unlock_buf_priv@4
; Line 31
	push	DWORD PTR _hObject$[ebp]
	call	DWORD PTR __imp__CloseHandle@4
; Line 33
	test	edi, edi
	jne	SHORT $L84992
; Line 34
	lea	eax, DWORD PTR _FileName$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteFileA@4
$L84992:
; Line 36
	push	300					; 0000012cH
	call	DWORD PTR __imp__Sleep@4
; Line 40
	mov	eax, DWORD PTR _lpDDPalette
	lea	edx, DWORD PTR _palette$[ebp]
	push	edx
	push	ebx
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+24]
	pop	edi
	pop	esi
	pop	ebx
$L84988:
; Line 43
	leave
	ret	0
_CaptureScreen ENDP
_TEXT	ENDS
EXTRN	__imp__WriteFile@20:NEAR
EXTRN	_memset:NEAR
; Function compile flags: /Ogsy
;	COMDAT @CaptureHdr@12
_TEXT	SEGMENT
_height$ = 8
_lpNumBytes$ = -4
_Buffer$ = -132
@CaptureHdr@12 PROC NEAR				; COMDAT
; _hFile$ = ecx
; _width$ = edx
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
; Line 50
	mov	edi, 128				; 00000080H
	push	edi
	lea	eax, DWORD PTR _Buffer$[ebp]
	push	0
	push	eax
	mov	esi, edx
	mov	ebx, ecx
	call	_memset
; Line 55
	lea	eax, DWORD PTR [esi-1]
	add	esp, 12					; 0000000cH
	mov	WORD PTR _Buffer$[ebp+8], ax
; Line 56
	mov	eax, DWORD PTR _height$[ebp]
; Line 58
	mov	WORD PTR _Buffer$[ebp+14], ax
; Line 62
	push	0
	lea	ecx, DWORD PTR [eax-1]
	lea	eax, DWORD PTR _lpNumBytes$[ebp]
	push	eax
	lea	eax, DWORD PTR _Buffer$[ebp]
	push	edi
	push	eax
	push	ebx
	mov	BYTE PTR _Buffer$[ebp], 10		; 0000000aH
	mov	BYTE PTR _Buffer$[ebp+1], 5
	mov	BYTE PTR _Buffer$[ebp+2], 1
	mov	BYTE PTR _Buffer$[ebp+3], 8
	mov	WORD PTR _Buffer$[ebp+10], cx
	mov	WORD PTR _Buffer$[ebp+12], si
	mov	BYTE PTR _Buffer$[ebp+65], 1
	mov	WORD PTR _Buffer$[ebp+66], si
	call	DWORD PTR __imp__WriteFile@20
	test	eax, eax
	je	SHORT $L85107
	cmp	DWORD PTR _lpNumBytes$[ebp], edi
	jne	SHORT $L85107
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85108
$L85107:
	xor	eax, eax
$L85108:
	pop	edi
	pop	esi
	pop	ebx
; Line 63
	leave
	ret	4
@CaptureHdr@12 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @CapturePal@8
_TEXT	SEGMENT
_Buffer$ = -776
_lpNumBytes$ = -4
@CapturePal@8 PROC NEAR					; COMDAT
; _hFile$ = ecx
; _palette$ = edx
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 776				; 00000308H
	push	esi
	push	edi
	mov	edi, ecx
; Line 72
	mov	BYTE PTR _Buffer$[ebp], 12		; 0000000cH
	lea	eax, DWORD PTR _Buffer$[ebp+3]
	mov	esi, 256				; 00000100H
$L85012:
; Line 75
	mov	cl, BYTE PTR [edx]
; Line 79
	add	edx, 4
	mov	BYTE PTR [eax-2], cl
	mov	cl, BYTE PTR [edx-3]
	mov	BYTE PTR [eax-1], cl
	mov	cl, BYTE PTR [edx-2]
	mov	BYTE PTR [eax], cl
; Line 80
	add	eax, 3
	dec	esi
	jne	SHORT $L85012
; Line 83
	lea	eax, DWORD PTR _lpNumBytes$[ebp]
	push	0
	push	eax
	mov	esi, 769				; 00000301H
	lea	eax, DWORD PTR _Buffer$[ebp]
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__WriteFile@20
	test	eax, eax
	je	SHORT $L85111
	cmp	DWORD PTR _lpNumBytes$[ebp], esi
	jne	SHORT $L85111
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85112
$L85111:
	xor	eax, eax
$L85112:
	pop	edi
	pop	esi
; Line 84
	leave
	ret	0
@CapturePal@8 ENDP
_TEXT	ENDS
PUBLIC	@CaptureEnc@12
EXTRN	@DiabloAllocPtr@4:NEAR
EXTRN	@mem_free_dbg@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT @CapturePix@20
_TEXT	SEGMENT
_hFile$ = -4
_height$ = 8
_stride$ = 12
_pixels$ = 16
_lpNumBytes$ = -8
@CapturePix@20 PROC NEAR				; COMDAT
; _hFile$ = ecx
; _width$ = dx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _hFile$[ebp], ecx
; Line 92
	movzx	edi, dx
	lea	ecx, DWORD PTR [edi+edi]
	call	@DiabloAllocPtr@4
	mov	esi, eax
$L85032:
; Line 94
	cmp	WORD PTR _height$[ebp], 0
	je	SHORT $L85118
; Line 99
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	DWORD PTR _height$[ebp], 65535		; 0000ffffH
	push	edi
	mov	edx, esi
	call	@CaptureEnc@12
; Line 100
	movzx	ecx, WORD PTR _stride$[ebp]
; Line 101
	sub	eax, esi
	add	DWORD PTR _pixels$[ebp], ecx
	mov	ebx, eax
; Line 102
	lea	eax, DWORD PTR _lpNumBytes$[ebp]
	push	0
	push	eax
	push	ebx
	push	esi
	push	DWORD PTR _hFile$[ebp]
	call	DWORD PTR __imp__WriteFile@20
	test	eax, eax
	je	SHORT $L85036
	cmp	DWORD PTR _lpNumBytes$[ebp], ebx
	je	SHORT $L85032
$L85036:
; Line 104
	xor	eax, eax
$L85026:
	pop	edi
	pop	esi
	pop	ebx
; Line 105
	leave
	ret	12					; 0000000cH
$L85118:
; Line 95
	mov	ecx, esi
	call	@mem_free_dbg@4
; Line 96
	xor	eax, eax
	inc	eax
	jmp	SHORT $L85026
@CapturePix@20 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @CaptureEnc@12
_TEXT	SEGMENT
_width$ = 8
@CaptureEnc@12 PROC NEAR				; COMDAT
; _src$ = ecx
; _dst$ = edx
; Line 108
	push	ebx
	push	esi
	mov	esi, DWORD PTR _width$[esp+4]
$L85045:
; Line 112
	mov	bl, BYTE PTR [ecx]
; Line 114
	xor	eax, eax
	inc	ecx
	inc	eax
; Line 116
	dec	esi
; Line 118
	cmp	bl, BYTE PTR [ecx]
	jne	SHORT $L85126
$L85050:
; Line 119
	cmp	eax, 63					; 0000003fH
	jge	SHORT $L85123
; Line 121
	test	esi, esi
	je	SHORT $L85123
; Line 123
	inc	eax
; Line 125
	dec	esi
; Line 126
	inc	ecx
	cmp	bl, BYTE PTR [ecx]
	je	SHORT $L85050
$L85123:
; Line 129
	cmp	eax, 1
	jg	SHORT $L85055
$L85126:
	cmp	bl, 191					; 000000bfH
	jbe	SHORT $L85054
$L85055:
; Line 130
	or	al, 192					; 000000c0H
	mov	BYTE PTR [edx], al
; Line 131
	inc	edx
$L85054:
; Line 134
	mov	BYTE PTR [edx], bl
; Line 135
	inc	edx
; Line 136
	test	esi, esi
	jne	SHORT $L85045
	pop	esi
; Line 138
	mov	eax, edx
	pop	ebx
; Line 139
	ret	4
@CaptureEnc@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@OFOL@screen?$DP?$DP?4PCX?$AA@		; `string'
PUBLIC	??_C@_0P@NOBD@screen?$CF02d?4PCX?$AA@		; `string'
EXTRN	_sprintf:NEAR
EXTRN	__imp__CreateFileA@28:NEAR
EXTRN	__pctype:DWORD
EXTRN	__isctype:NEAR
EXTRN	__findfirst:NEAR
EXTRN	__findnext:NEAR
EXTRN	___mb_cur_max:DWORD
;	COMDAT ??_C@_0N@OFOL@screen?$DP?$DP?4PCX?$AA@
_DATA	SEGMENT
??_C@_0N@OFOL@screen?$DP?$DP?4PCX?$AA@ DB 'screen??.PCX', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@NOBD@screen?$CF02d?4PCX?$AA@
_DATA	SEGMENT
??_C@_0P@NOBD@screen?$CF02d?4PCX?$AA@ DB 'screen%02d.PCX', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @CaptureFile@4
_TEXT	SEGMENT
_dst_path$ = -4
_num_used$ = -104
_finder$ = -384
@CaptureFile@4 PROC NEAR				; COMDAT
; _dst_path$ = ecx
; Line 142
	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	ebx
	push	edi
; Line 147
	xor	ebx, ebx
	push	100					; 00000064H
	lea	eax, DWORD PTR _num_used$[ebp]
	push	ebx
	push	eax
	mov	DWORD PTR _dst_path$[ebp], ecx
	call	_memset
; Line 148
	lea	eax, DWORD PTR _finder$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0N@OFOL@screen?$DP?$DP?4PCX?$AA@ ; `string'
	call	__findfirst
	mov	edi, eax
	add	esp, 20					; 00000014H
; Line 149
	cmp	edi, -1
	je	$L85067
$L85065:
; Line 151
	cmp	DWORD PTR ___mb_cur_max, 1
	movsx	eax, BYTE PTR _finder$[ebp+26]
	jle	SHORT $L85130
	push	4
	push	eax
	call	__isctype
	pop	ecx
	pop	ecx
	jmp	SHORT $L85131
$L85130:
	mov	ecx, DWORD PTR __pctype
	mov	al, BYTE PTR [ecx+eax*2]
	and	eax, 4
$L85131:
	cmp	eax, ebx
	je	SHORT $L85066
	cmp	DWORD PTR ___mb_cur_max, 1
	movsx	eax, BYTE PTR _finder$[ebp+27]
	jle	SHORT $L85132
	push	4
	push	eax
	call	__isctype
	pop	ecx
	pop	ecx
	jmp	SHORT $L85133
$L85132:
	mov	ecx, DWORD PTR __pctype
	mov	al, BYTE PTR [ecx+eax*2]
	and	eax, 4
$L85133:
	cmp	eax, ebx
	je	SHORT $L85066
; Line 154
	movsx	eax, BYTE PTR _finder$[ebp+26]
	movsx	ecx, BYTE PTR _finder$[ebp+27]
; Line 166
	lea	eax, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR _num_used$[ebp+ecx]
	mov	BYTE PTR [ecx+eax*2-528], 1
$L85066:
	lea	eax, DWORD PTR _finder$[ebp]
	push	eax
	push	edi
	call	__findnext
	pop	ecx
	test	eax, eax
	pop	ecx
	je	$L85065
$L85067:
; Line 159
	xor	eax, eax
$L85069:
; Line 160
	cmp	BYTE PTR _num_used$[ebp+eax], bl
	je	SHORT $L85136
	inc	eax
	cmp	eax, 100				; 00000064H
	jl	SHORT $L85069
; Line 166
	or	eax, -1
$L85058:
	pop	edi
	pop	ebx
; Line 167
	leave
	ret	0
$L85136:
; Line 161
	push	eax
	push	OFFSET FLAT:??_C@_0P@NOBD@screen?$CF02d?4PCX?$AA@ ; `string'
	push	DWORD PTR _dst_path$[ebp]
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 162
	push	ebx
	push	128					; 00000080H
	push	2
	push	ebx
	push	ebx
	push	1073741824				; 40000000H
	push	DWORD PTR _dst_path$[ebp]
	call	DWORD PTR __imp__CreateFileA@28
	jmp	SHORT $L85058
@CaptureFile@4 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @RedPalette@4
_TEXT	SEGMENT
_red$ = -1024
@RedPalette@4 PROC NEAR					; COMDAT
; _pal$ = ecx
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 1024				; 00000400H
	push	ebx
	push	esi
	push	edi
; Line 175
	mov	edi, ecx
	lea	eax, DWORD PTR _red$[ebp]
	xor	edx, edx
	xor	esi, esi
	sub	edi, eax
	mov	ecx, 256				; 00000100H
$L85082:
	mov	eax, esi
	shl	eax, 2
	inc	esi
	lea	ebx, DWORD PTR [edi+eax]
	cmp	esi, ecx
; Line 176
	mov	BYTE PTR _red$[ebp+eax+1], dl
; Line 177
	mov	BYTE PTR _red$[ebp+eax+2], dl
	mov	bl, BYTE PTR _red$[ebp+ebx]
; Line 178
	mov	BYTE PTR _red$[ebp+eax+3], dl
	mov	BYTE PTR _red$[ebp+eax], bl
	jl	SHORT $L85082
; Line 184
	mov	eax, DWORD PTR _lpDDPalette
	lea	edi, DWORD PTR _red$[ebp]
	push	edi
	push	ecx
	mov	esi, DWORD PTR [eax]
	push	edx
	push	edx
	push	eax
	call	DWORD PTR [esi+24]
	pop	edi
	pop	esi
	pop	ebx
; Line 186
	leave
	ret	0
@RedPalette@4 ENDP
_TEXT	ENDS
END
