; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/trigs.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BA@LOIM@Down?5to?5dungeon?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LOKJ@Down?5to?5catacombs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@BLCF@Down?5to?5caves?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@MNPC@Down?5to?5hell?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CHGE@Down?5to?5level?5?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@NB@Up?5to?5town?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@EEOJ@Up?5to?5level?5?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@DIHO@Down?5to?5Diablo?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@OMHD@Back?5to?5Level?5?$CFi?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@NLFI@Unknown?5trigger?5msg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT _InitNoTriggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitTownTriggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitL1Triggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitL2Triggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitL3Triggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitL4Triggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitSKingTriggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitSChambTriggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitPWaterTriggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InitVPTriggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ForceTownTrig
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ForceL1Trig
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ForceL2Trig
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ForceL3Trig
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ForceL4Trig
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Freeupstairs
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ForceSKingTrig
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ForceSChambTrig
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ForcePWaterTrig
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckTrigForce
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CheckTriggers
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_TownDownList
PUBLIC	_TownWarp1List
PUBLIC	_L1UpList
PUBLIC	_L1DownList
PUBLIC	_L2UpList
PUBLIC	_L2DownList
PUBLIC	_L2TWarpUpList
PUBLIC	_L3UpList
PUBLIC	_L3DownList
PUBLIC	_L3TWarpUpList
PUBLIC	_L4UpList
PUBLIC	_L4DownList
PUBLIC	_L4TWarpUpList
PUBLIC	_L4PentaList
_DATA	SEGMENT
COMM	_trigflag:DWORD:05H
COMM	_trigs:BYTE:050H
COMM	_TWarpFrom:DWORD
_TownDownList DD 02ccH
	DD	02cbH
	DD	02cfH
	DD	02d0H
	DD	02d1H
	DD	02d3H
	DD	02d4H
	DD	02d5H
	DD	02d6H
	DD	02d7H
	DD	0ffffffffH
_TownWarp1List DD 0493H
	DD	0494H
	DD	0495H
	DD	0496H
	DD	0497H
	DD	0498H
	DD	0499H
	DD	049aH
	DD	049bH
	DD	049dH
	DD	049fH
	DD	04a1H
	DD	0ffffffffH
_L1UpList DD	07fH
	DD	081H
	DD	082H
	DD	083H
	DD	084H
	DD	085H
	DD	087H
	DD	089H
	DD	08aH
	DD	08bH
	DD	08cH
	DD	0ffffffffH
_L1DownList DD	06aH
	DD	06bH
	DD	06cH
	DD	06dH
	DD	06eH
	DD	070H
	DD	072H
	DD	073H
	DD	076H
	DD	0ffffffffH
_L2UpList DD	010aH
	DD	010bH
	DD	0ffffffffH
_L2DownList DD	010dH
	DD	010eH
	DD	010fH
	DD	0110H
	DD	0ffffffffH
_L2TWarpUpList DD 022eH
	DD	022fH
	DD	0ffffffffH
_L3UpList DD	0aaH
	DD	0abH
	DD	0acH
	DD	0adH
	DD	0aeH
	DD	0afH
	DD	0b0H
	DD	0b1H
	DD	0b2H
	DD	0b3H
	DD	0b4H
	DD	0b5H
	DD	0b6H
	DD	0b7H
	DD	0ffffffffH
_L3DownList DD	0a2H
	DD	0a3H
	DD	0a4H
	DD	0a5H
	DD	0a6H
	DD	0a7H
	DD	0a8H
	DD	0a9H
	DD	0ffffffffH
_L3TWarpUpList DD 0224H
	DD	0225H
	DD	0226H
	DD	0227H
	DD	0228H
	DD	0229H
	DD	022aH
	DD	022bH
	DD	022cH
	DD	022dH
	DD	022eH
	DD	022fH
	DD	0230H
	DD	0ffffffffH
_L4UpList DD	052H
	DD	053H
	DD	05aH
	DD	0ffffffffH
_L4DownList DD	078H
	DD	082H
	DD	083H
	DD	084H
	DD	085H
	DD	0ffffffffH
_L4TWarpUpList DD 01a5H
	DD	01a6H
	DD	01adH
	DD	0ffffffffH
	ORG $+4
_L4PentaList DD	0161H
	DD	0162H
	DD	0163H
	DD	0164H
	DD	0165H
	DD	0166H
	DD	0167H
	DD	0168H
	DD	0169H
	DD	016aH
	DD	016bH
	DD	016cH
	DD	016dH
	DD	016eH
	DD	016fH
	DD	0170H
	DD	0171H
	DD	0172H
	DD	0173H
	DD	0174H
	DD	0175H
	DD	0176H
	DD	0177H
	DD	0178H
	DD	0179H
	DD	017aH
	DD	017bH
	DD	017cH
	DD	017dH
	DD	017eH
	DD	017fH
	DD	0180H
	DD	0ffffffffH
_DATA	ENDS
PUBLIC	_InitNoTriggers
; Function compile flags: /Ogsy
;	COMDAT _InitNoTriggers
_TEXT	SEGMENT
_InitNoTriggers PROC NEAR				; COMDAT
; File Source/trigs.cpp
; Line 90
	and	DWORD PTR _trigflag+16, 0
; Line 91
	and	DWORD PTR _trigflag+12, 0
; Line 92
	ret	0
_InitNoTriggers ENDP
_TEXT	ENDS
PUBLIC	_InitTownTriggers
EXTRN	_gbMaxPlayers:BYTE
EXTRN	_myplr:DWORD
EXTRN	_plr:BYTE
; Function compile flags: /Ogsy
;	COMDAT _InitTownTriggers
_TEXT	SEGMENT
_InitTownTriggers PROC NEAR				; COMDAT
; Line 103
	xor	ecx, ecx
	mov	DWORD PTR _trigs, 25			; 00000019H
	inc	ecx
; Line 104
	cmp	BYTE PTR _gbMaxPlayers, 4
	mov	DWORD PTR _trigs+4, 29			; 0000001dH
	mov	DWORD PTR _trigs+8, 1026		; 00000402H
	mov	DWORD PTR _trigflag+16, ecx
; Line 110
	mov	edx, 1031				; 00000407H
	jne	$L84987
	mov	DWORD PTR _trigs+16, 49			; 00000031H
	mov	DWORD PTR _trigflag, ecx
	mov	DWORD PTR _trigflag+4, ecx
	mov	DWORD PTR _trigs+20, 21			; 00000015H
	mov	DWORD PTR _trigs+24, edx
; Line 111
	mov	DWORD PTR _trigs+28, 5
; Line 112
	mov	DWORD PTR _trigs+32, 17			; 00000011H
; Line 113
	mov	DWORD PTR _trigs+36, 69			; 00000045H
; Line 114
	mov	DWORD PTR _trigs+40, edx
; Line 115
	mov	DWORD PTR _trigs+44, 9
; Line 116
	mov	DWORD PTR _trigs+48, 41			; 00000029H
; Line 117
	mov	DWORD PTR _trigs+52, 80			; 00000050H
; Line 118
	mov	DWORD PTR _trigs+56, edx
; Line 119
	mov	DWORD PTR _trigs+60, 13			; 0000000dH
; Line 120
	mov	DWORD PTR _trigflag+16, 4
; Line 121
	jmp	$L85541
$L84987:
; Line 125
	mov	eax, DWORD PTR _myplr
	and	DWORD PTR _trigflag, 0
	imul	eax, 21720				; 000054d8H
	and	DWORD PTR _trigflag+4, 0
	and	DWORD PTR _trigflag+8, 0
	push	ebx
	mov	bl, BYTE PTR _plr[eax+21624]
; Line 126
	push	2
	test	bl, cl
	pop	eax
	je	SHORT $L84989
; Line 127
	mov	DWORD PTR _trigs+16, 49			; 00000031H
; Line 128
	mov	DWORD PTR _trigs+20, 21			; 00000015H
; Line 129
	mov	DWORD PTR _trigs+24, edx
; Line 130
	mov	DWORD PTR _trigs+28, 5
; Line 131
	mov	DWORD PTR _trigflag+16, eax
; Line 132
	mov	DWORD PTR _trigflag, ecx
$L84989:
; Line 134
	test	bl, al
	je	SHORT $L84990
; Line 136
	mov	eax, DWORD PTR _trigflag+16
	inc	DWORD PTR _trigflag+16
; Line 137
	shl	eax, 4
	mov	DWORD PTR _trigflag+4, ecx
	mov	DWORD PTR _trigs[eax], 17		; 00000011H
; Line 138
	mov	DWORD PTR _trigs[eax+4], 69		; 00000045H
; Line 139
	mov	DWORD PTR _trigs[eax+8], edx
; Line 140
	mov	DWORD PTR _trigs[eax+12], 9
$L84990:
; Line 142
	test	bl, 4
	pop	ebx
	je	SHORT $L84991
; Line 144
	mov	eax, DWORD PTR _trigflag+16
	inc	DWORD PTR _trigflag+16
; Line 145
	shl	eax, 4
	mov	DWORD PTR _trigs[eax], 41		; 00000029H
; Line 146
	mov	DWORD PTR _trigs[eax+4], 80		; 00000050H
; Line 147
	mov	DWORD PTR _trigs[eax+8], edx
; Line 148
	mov	DWORD PTR _trigs[eax+12], 13		; 0000000dH
$L85541:
; Line 143
	mov	DWORD PTR _trigflag+8, ecx
$L84991:
; Line 151
	and	DWORD PTR _trigflag+12, 0
; Line 152
	ret	0
_InitTownTriggers ENDP
_TEXT	ENDS
PUBLIC	_InitL1Triggers
EXTRN	_dPiece:BYTE
; Function compile flags: /Ogsy
;	COMDAT _InitL1Triggers
_TEXT	SEGMENT
_InitL1Triggers PROC NEAR				; COMDAT
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 160
	xor	edi, edi
	mov	DWORD PTR _trigflag+16, edi
	mov	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece
$L84998:
; Line 163
	mov	eax, DWORD PTR _trigflag+16
	mov	ebx, DWORD PTR -8+[ebp]
	xor	esi, esi
	mov	DWORD PTR -4+[ebp], ebx
	shl	eax, 4
	lea	edx, DWORD PTR _trigs[eax+8]
; Line 164
	lea	ecx, DWORD PTR _trigs[eax+4]
; Line 165
	lea	eax, DWORD PTR _trigs[eax]
$L85002:
; Line 167
	mov	ebx, DWORD PTR -4+[ebp]
	cmp	DWORD PTR [ebx], 129			; 00000081H
	jne	SHORT $L85004
; Line 168
	inc	DWORD PTR _trigflag+16
; Line 169
	mov	DWORD PTR [eax], esi
; Line 170
	mov	DWORD PTR [ecx], edi
; Line 171
	mov	DWORD PTR [edx], 1027			; 00000403H
; Line 172
	add	eax, 16					; 00000010H
; Line 173
	add	ecx, 16					; 00000010H
; Line 174
	add	edx, 16					; 00000010H
$L85004:
; Line 176
	mov	ebx, DWORD PTR -4+[ebp]
	cmp	DWORD PTR [ebx], 115			; 00000073H
	jne	SHORT $L85008
; Line 177
	inc	DWORD PTR _trigflag+16
; Line 178
	mov	DWORD PTR [eax], esi
; Line 179
	mov	DWORD PTR [ecx], edi
; Line 180
	mov	DWORD PTR [edx], 1026			; 00000402H
; Line 181
	add	eax, 16					; 00000010H
; Line 182
	add	ecx, 16					; 00000010H
; Line 183
	add	edx, 16					; 00000010H
$L85008:
; Line 185
	add	DWORD PTR -4+[ebp], 448			; 000001c0H
	inc	esi
	cmp	esi, 112				; 00000070H
	jl	SHORT $L85002
	add	DWORD PTR -8+[ebp], 4
	inc	edi
	cmp	DWORD PTR -8+[ebp], OFFSET FLAT:_dPiece+448
	jl	$L84998
; Line 188
	and	DWORD PTR _trigflag+12, 0
	pop	edi
	pop	esi
	pop	ebx
; Line 189
	leave
	ret	0
_InitL1Triggers ENDP
_TEXT	ENDS
PUBLIC	_InitL2Triggers
EXTRN	_quests:BYTE
; Function compile flags: /Ogsy
;	COMDAT _InitL2Triggers
_TEXT	SEGMENT
_v4$ = -20
_v5$ = -16
_v6$ = -12
_v7$ = -8
_v8$ = -4
_InitL2Triggers PROC NEAR				; COMDAT
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 203
	and	DWORD PTR _trigflag+16, 0
; Line 204
	and	DWORD PTR _v7$[ebp], 0
	push	ebx
	push	esi
	push	edi
; Line 205
	push	16					; 00000010H
	mov	DWORD PTR _v5$[ebp], OFFSET FLAT:_dPiece
	pop	ebx
$L85022:
; Line 208
	mov	eax, DWORD PTR _trigflag+16
	xor	edi, edi
	shl	eax, 4
	lea	esi, DWORD PTR _trigs[eax+8]
; Line 209
	lea	edx, DWORD PTR _trigs[eax+4]
; Line 210
	lea	ecx, DWORD PTR _trigs[eax]
; Line 211
	lea	eax, DWORD PTR _trigs[eax+12]
	mov	DWORD PTR _v8$[ebp], eax
; Line 212
	mov	eax, DWORD PTR _v5$[ebp]
	mov	DWORD PTR _v6$[ebp], eax
$L85025:
; Line 214
	mov	eax, DWORD PTR _v6$[ebp]
	cmp	DWORD PTR [eax], 267			; 0000010bH
	jne	SHORT $L85028
	cmp	edi, DWORD PTR _quests+340
	jne	SHORT $L85029
	mov	eax, DWORD PTR _v7$[ebp]
	cmp	eax, DWORD PTR _quests+344
	je	SHORT $L85028
$L85029:
; Line 218
	mov	eax, DWORD PTR _v7$[ebp]
	inc	DWORD PTR _trigflag+16
	add	DWORD PTR _v8$[ebp], ebx
	mov	DWORD PTR [ecx], edi
	mov	DWORD PTR [edx], eax
; Line 219
	mov	DWORD PTR [esi], 1027			; 00000403H
; Line 220
	add	ecx, ebx
; Line 221
	add	edx, ebx
; Line 222
	add	esi, ebx
$L85028:
; Line 224
	mov	eax, DWORD PTR _v6$[ebp]
	cmp	DWORD PTR [eax], 559			; 0000022fH
	jne	SHORT $L85030
; Line 226
	mov	eax, DWORD PTR _v7$[ebp]
	mov	DWORD PTR [ecx], edi
	mov	DWORD PTR [edx], eax
; Line 227
	mov	eax, DWORD PTR _v8$[ebp]
; Line 228
	add	DWORD PTR _v8$[ebp], ebx
; Line 229
	mov	DWORD PTR [esi], 1032			; 00000408H
; Line 230
	and	DWORD PTR [eax], 0
; Line 231
	inc	DWORD PTR _trigflag+16
; Line 232
	add	ecx, ebx
; Line 233
	add	edx, ebx
	mov	DWORD PTR _v4$[ebp], eax
; Line 234
	add	esi, ebx
$L85030:
; Line 236
	mov	eax, DWORD PTR _v6$[ebp]
	cmp	DWORD PTR [eax], 271			; 0000010fH
	jne	SHORT $L85031
; Line 240
	mov	eax, DWORD PTR _v7$[ebp]
	inc	DWORD PTR _trigflag+16
	add	DWORD PTR _v8$[ebp], ebx
	mov	DWORD PTR [ecx], edi
	mov	DWORD PTR [edx], eax
; Line 241
	mov	DWORD PTR [esi], 1026			; 00000402H
; Line 242
	add	ecx, ebx
; Line 243
	add	edx, ebx
; Line 244
	add	esi, ebx
$L85031:
; Line 246
	add	DWORD PTR _v6$[ebp], 448		; 000001c0H
; Line 247
	inc	edi
; Line 248
	cmp	edi, 112				; 00000070H
	jl	$L85025
; Line 249
	add	DWORD PTR _v5$[ebp], 4
; Line 250
	inc	DWORD PTR _v7$[ebp]
; Line 251
	cmp	DWORD PTR _v5$[ebp], OFFSET FLAT:_dPiece+448
	jl	$L85022
; Line 252
	and	DWORD PTR _trigflag+12, 0
	pop	edi
	pop	esi
	pop	ebx
; Line 253
	leave
	ret	0
_InitL2Triggers ENDP
_TEXT	ENDS
PUBLIC	_InitL3Triggers
; Function compile flags: /Ogsy
;	COMDAT _InitL3Triggers
_TEXT	SEGMENT
_v5$ = -8
_v6$ = -4
_InitL3Triggers PROC NEAR				; COMDAT
; Line 256
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 265
	xor	edi, edi
; Line 266
	mov	DWORD PTR _trigflag+16, edi
; Line 267
	mov	DWORD PTR _v5$[ebp], OFFSET FLAT:_dPiece
$L85044:
; Line 270
	mov	eax, DWORD PTR _v5$[ebp]
	xor	esi, esi
	mov	DWORD PTR _v6$[ebp], eax
; Line 271
	mov	eax, DWORD PTR _trigflag+16
	shl	eax, 4
	lea	edx, DWORD PTR _trigs[eax+8]
; Line 272
	lea	ecx, DWORD PTR _trigs[eax+4]
; Line 273
	lea	eax, DWORD PTR _trigs[eax]
$L85047:
; Line 275
	mov	ebx, DWORD PTR _v6$[ebp]
	cmp	DWORD PTR [ebx], 171			; 000000abH
	jne	SHORT $L85050
; Line 276
	inc	DWORD PTR _trigflag+16
; Line 277
	mov	DWORD PTR [eax], esi
; Line 278
	mov	DWORD PTR [ecx], edi
; Line 279
	mov	DWORD PTR [edx], 1027			; 00000403H
; Line 280
	add	eax, 16					; 00000010H
; Line 281
	add	ecx, 16					; 00000010H
; Line 282
	add	edx, 16					; 00000010H
$L85050:
; Line 284
	mov	ebx, DWORD PTR _v6$[ebp]
	cmp	DWORD PTR [ebx], 168			; 000000a8H
	jne	SHORT $L85051
; Line 285
	inc	DWORD PTR _trigflag+16
; Line 286
	mov	DWORD PTR [eax], esi
; Line 287
	mov	DWORD PTR [ecx], edi
; Line 288
	mov	DWORD PTR [edx], 1026			; 00000402H
; Line 289
	add	eax, 16					; 00000010H
; Line 290
	add	ecx, 16					; 00000010H
; Line 291
	add	edx, 16					; 00000010H
$L85051:
; Line 293
	mov	ebx, DWORD PTR _v6$[ebp]
	cmp	DWORD PTR [ebx], 549			; 00000225H
	jne	SHORT $L85052
; Line 294
	inc	DWORD PTR _trigflag+16
; Line 295
	mov	DWORD PTR [eax], esi
; Line 296
	mov	DWORD PTR [ecx], edi
; Line 297
	mov	DWORD PTR [edx], 1032			; 00000408H
; Line 298
	add	eax, 16					; 00000010H
; Line 299
	add	ecx, 16					; 00000010H
; Line 300
	add	edx, 16					; 00000010H
$L85052:
; Line 302
	add	DWORD PTR _v6$[ebp], 448		; 000001c0H
; Line 303
	inc	esi
; Line 304
	cmp	esi, 112				; 00000070H
	jl	SHORT $L85047
; Line 305
	add	DWORD PTR _v5$[ebp], 4
; Line 306
	inc	edi
; Line 307
	cmp	DWORD PTR _v5$[ebp], OFFSET FLAT:_dPiece+448
	jl	$L85044
; Line 308
	and	DWORD PTR _trigflag+12, 0
	pop	edi
	pop	esi
	pop	ebx
; Line 309
	leave
	ret	0
_InitL3Triggers ENDP
_TEXT	ENDS
PUBLIC	_InitL4Triggers
; Function compile flags: /Ogsy
;	COMDAT _InitL4Triggers
_TEXT	SEGMENT
_v9$ = -12
_v10$ = -12
_v11$ = -8
_v12$ = -4
_InitL4Triggers PROC NEAR				; COMDAT
; Line 312
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 327
	and	DWORD PTR _trigflag+16, 0
; Line 328
	and	DWORD PTR _v11$[ebp], 0
	push	ebx
	push	esi
	push	edi
; Line 329
	mov	DWORD PTR _v9$[ebp], OFFSET FLAT:_dPiece
$L85071:
; Line 332
	mov	eax, DWORD PTR _v9$[ebp]
	xor	edi, edi
	mov	DWORD PTR _v12$[ebp], eax
; Line 333
	mov	eax, DWORD PTR _trigflag+16
	shl	eax, 4
	lea	esi, DWORD PTR _trigs[eax+8]
; Line 334
	lea	edx, DWORD PTR _trigs[eax+4]
; Line 335
	lea	ecx, DWORD PTR _trigs[eax]
; Line 336
	lea	eax, DWORD PTR _trigs[eax+12]
$L85074:
; Line 338
	mov	ebx, DWORD PTR _v12$[ebp]
	cmp	DWORD PTR [ebx], 83			; 00000053H
	jne	SHORT $L85077
; Line 341
	mov	ebx, DWORD PTR _v11$[ebp]
	inc	DWORD PTR _trigflag+16
	mov	DWORD PTR [ecx], edi
; Line 343
	push	16					; 00000010H
	mov	DWORD PTR [edx], ebx
	pop	ebx
	mov	DWORD PTR [esi], 1027			; 00000403H
	add	eax, ebx
; Line 344
	add	ecx, ebx
; Line 345
	add	edx, ebx
; Line 346
	add	esi, ebx
$L85077:
; Line 348
	mov	ebx, DWORD PTR _v12$[ebp]
	cmp	DWORD PTR [ebx], 422			; 000001a6H
	jne	SHORT $L85078
; Line 350
	mov	ebx, DWORD PTR _v11$[ebp]
	mov	DWORD PTR [ecx], edi
; Line 354
	push	16					; 00000010H
	mov	DWORD PTR [edx], ebx
	mov	DWORD PTR [esi], 1032			; 00000408H
	and	DWORD PTR [eax], 0
	inc	DWORD PTR _trigflag+16
	pop	ebx
	add	eax, ebx
; Line 355
	add	ecx, ebx
; Line 356
	add	edx, ebx
; Line 357
	add	esi, ebx
$L85078:
; Line 359
	mov	ebx, DWORD PTR _v12$[ebp]
	cmp	DWORD PTR [ebx], 120			; 00000078H
	jne	SHORT $L85079
; Line 362
	mov	ebx, DWORD PTR _v11$[ebp]
	inc	DWORD PTR _trigflag+16
	mov	DWORD PTR [ecx], edi
; Line 364
	push	16					; 00000010H
	mov	DWORD PTR [edx], ebx
	pop	ebx
	mov	DWORD PTR [esi], 1026			; 00000402H
	add	eax, ebx
; Line 365
	add	ecx, ebx
; Line 366
	add	edx, ebx
; Line 367
	add	esi, ebx
$L85079:
; Line 369
	add	DWORD PTR _v12$[ebp], 448		; 000001c0H
; Line 370
	inc	edi
; Line 371
	cmp	edi, 112				; 00000070H
	jl	$L85074
; Line 372
	add	DWORD PTR _v9$[ebp], 4
; Line 373
	inc	DWORD PTR _v11$[ebp]
; Line 374
	mov	esi, OFFSET FLAT:_dPiece+448
	cmp	DWORD PTR _v9$[ebp], esi
	jl	$L85071
; Line 375
	xor	edx, edx
; Line 376
	mov	DWORD PTR _v10$[ebp], OFFSET FLAT:_dPiece
$L85084:
; Line 380
	mov	eax, DWORD PTR _trigflag+16
	mov	edi, DWORD PTR _v10$[ebp]
	shl	eax, 4
	xor	ecx, ecx
	add	eax, OFFSET FLAT:_trigs+4
$L85087:
; Line 382
	cmp	DWORD PTR [edi], 370			; 00000172H
	jne	SHORT $L85090
	cmp	BYTE PTR _quests+362, 3
	jne	SHORT $L85090
; Line 383
	inc	DWORD PTR _trigflag+16
; Line 384
	mov	DWORD PTR [eax-4], ecx
; Line 385
	mov	DWORD PTR [eax], edx
; Line 386
	mov	DWORD PTR [eax+4], 1026			; 00000402H
; Line 387
	add	eax, 16					; 00000010H
$L85090:
; Line 389
	inc	ecx
; Line 390
	add	edi, 448				; 000001c0H
; Line 391
	cmp	ecx, 112				; 00000070H
	jl	SHORT $L85087
; Line 392
	add	DWORD PTR _v10$[ebp], 4
; Line 393
	inc	edx
; Line 394
	cmp	DWORD PTR _v10$[ebp], esi
	jl	SHORT $L85084
; Line 395
	and	DWORD PTR _trigflag+12, 0
	pop	edi
	pop	esi
	pop	ebx
; Line 396
	leave
	ret	0
_InitL4Triggers ENDP
_TEXT	ENDS
PUBLIC	_InitSKingTriggers
; Function compile flags: /Ogsy
;	COMDAT _InitSKingTriggers
_TEXT	SEGMENT
_InitSKingTriggers PROC NEAR				; COMDAT
; Line 400
	and	DWORD PTR _trigflag+12, 0
; Line 401
	mov	DWORD PTR _trigflag+16, 1
; Line 402
	mov	DWORD PTR _trigs, 82			; 00000052H
; Line 403
	mov	DWORD PTR _trigs+4, 42			; 0000002aH
; Line 404
	mov	DWORD PTR _trigs+8, 1028		; 00000404H
; Line 405
	ret	0
_InitSKingTriggers ENDP
_TEXT	ENDS
PUBLIC	_InitSChambTriggers
; Function compile flags: /Ogsy
;	COMDAT _InitSChambTriggers
_TEXT	SEGMENT
_InitSChambTriggers PROC NEAR				; COMDAT
; Line 409
	and	DWORD PTR _trigflag+12, 0
; Line 410
	mov	DWORD PTR _trigflag+16, 1
; Line 411
	mov	DWORD PTR _trigs, 70			; 00000046H
; Line 412
	mov	DWORD PTR _trigs+4, 39			; 00000027H
; Line 413
	mov	DWORD PTR _trigs+8, 1028		; 00000404H
; Line 414
	ret	0
_InitSChambTriggers ENDP
_TEXT	ENDS
PUBLIC	_InitPWaterTriggers
; Function compile flags: /Ogsy
;	COMDAT _InitPWaterTriggers
_TEXT	SEGMENT
_InitPWaterTriggers PROC NEAR				; COMDAT
; Line 418
	and	DWORD PTR _trigflag+12, 0
; Line 419
	mov	DWORD PTR _trigflag+16, 1
; Line 420
	mov	DWORD PTR _trigs, 30			; 0000001eH
; Line 421
	mov	DWORD PTR _trigs+4, 83			; 00000053H
; Line 422
	mov	DWORD PTR _trigs+8, 1028		; 00000404H
; Line 423
	ret	0
_InitPWaterTriggers ENDP
_TEXT	ENDS
PUBLIC	_InitVPTriggers
; Function compile flags: /Ogsy
;	COMDAT _InitVPTriggers
_TEXT	SEGMENT
_InitVPTriggers PROC NEAR				; COMDAT
; Line 427
	and	DWORD PTR _trigflag+12, 0
; Line 428
	mov	DWORD PTR _trigflag+16, 1
; Line 429
	mov	DWORD PTR _trigs, 35			; 00000023H
; Line 430
	mov	DWORD PTR _trigs+4, 32			; 00000020H
; Line 431
	mov	DWORD PTR _trigs+8, 1028		; 00000404H
; Line 432
	ret	0
_InitVPTriggers ENDP
_TEXT	ENDS
PUBLIC	_ForceTownTrig
PUBLIC	??_C@_0BA@LOIM@Down?5to?5dungeon?$AA@		; `string'
PUBLIC	??_C@_0BC@LOKJ@Down?5to?5catacombs?$AA@		; `string'
PUBLIC	??_C@_0O@BLCF@Down?5to?5caves?$AA@		; `string'
PUBLIC	??_C@_0N@MNPC@Down?5to?5hell?$AA@		; `string'
EXTRN	_cursmx:DWORD
EXTRN	_cursmy:DWORD
EXTRN	_infostr:BYTE
EXTRN	_strcpy:NEAR
;	COMDAT ??_C@_0BA@LOIM@Down?5to?5dungeon?$AA@
_DATA	SEGMENT
??_C@_0BA@LOIM@Down?5to?5dungeon?$AA@ DB 'Down to dungeon', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@LOKJ@Down?5to?5catacombs?$AA@
_DATA	SEGMENT
??_C@_0BC@LOKJ@Down?5to?5catacombs?$AA@ DB 'Down to catacombs', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@BLCF@Down?5to?5caves?$AA@
_DATA	SEGMENT
??_C@_0O@BLCF@Down?5to?5caves?$AA@ DB 'Down to caves', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@MNPC@Down?5to?5hell?$AA@
_DATA	SEGMENT
??_C@_0N@MNPC@Down?5to?5hell?$AA@ DB 'Down to hell', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ForceTownTrig
_TEXT	SEGMENT
_ForceTownTrig PROC NEAR				; COMDAT
; Line 444
	mov	edx, DWORD PTR _TownDownList
	mov	eax, DWORD PTR _cursmx
	mov	ecx, DWORD PTR _cursmy
	push	esi
	cmp	edx, -1
	push	edi
	je	SHORT $LABEL_5$85111
; Line 446
	mov	edi, eax
	mov	esi, OFFSET FLAT:_TownDownList
	imul	edi, 112				; 00000070H
	add	edi, ecx
	mov	edi, DWORD PTR _dPiece[edi*4]
	jmp	SHORT $L85590
$L85108:
; Line 447
	add	esi, 4
; Line 449
	mov	edx, DWORD PTR [esi]
	cmp	edx, -1
	je	SHORT $LABEL_5$85111
$L85590:
; Line 446
	cmp	edi, edx
	jne	SHORT $L85108
; Line 452
	push	OFFSET FLAT:??_C@_0BA@LOIM@Down?5to?5dungeon?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
; Line 453
	mov	DWORD PTR _cursmx, 25			; 00000019H
; Line 454
	mov	DWORD PTR _cursmy, 29			; 0000001dH
; Line 455
	jmp	$L85595
$LABEL_5$85111:
; Line 458
	cmp	DWORD PTR _trigflag, 0
	je	SHORT $LABEL_13$85119
; Line 460
	mov	edi, DWORD PTR _TownWarp1List
	cmp	edi, -1
	je	SHORT $LABEL_13$85119
; Line 462
	mov	esi, eax
	mov	edx, OFFSET FLAT:_TownWarp1List
	imul	esi, 112				; 00000070H
	add	esi, ecx
	mov	esi, DWORD PTR _dPiece[esi*4]
	jmp	SHORT $L85591
$L85116:
; Line 463
	add	edx, 4
; Line 465
	mov	edi, DWORD PTR [edx]
	cmp	edi, -1
	je	SHORT $LABEL_13$85119
$L85591:
; Line 462
	cmp	esi, edi
	jne	SHORT $L85116
; Line 468
	push	OFFSET FLAT:??_C@_0BC@LOKJ@Down?5to?5catacombs?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
; Line 469
	mov	DWORD PTR _cursmx, 49			; 00000031H
; Line 470
	mov	DWORD PTR _cursmy, 21			; 00000015H
; Line 471
	jmp	$L85595
$LABEL_13$85119:
; Line 475
	cmp	DWORD PTR _trigflag+4, 0
	je	SHORT $LABEL_17$85126
; Line 477
	mov	esi, eax
	mov	edx, 1199				; 000004afH
	imul	esi, 112				; 00000070H
	add	esi, ecx
	mov	esi, DWORD PTR _dPiece[esi*4]
	jmp	SHORT $L85592
$L85123:
; Line 478
	inc	edx
	cmp	edx, 1220				; 000004c4H
	jg	SHORT $LABEL_17$85126
$L85592:
; Line 477
	cmp	esi, edx
	jne	SHORT $L85123
; Line 481
	push	OFFSET FLAT:??_C@_0O@BLCF@Down?5to?5caves?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
; Line 482
	mov	DWORD PTR _cursmx, 17			; 00000011H
; Line 483
	mov	DWORD PTR _cursmy, 69			; 00000045H
; Line 484
	jmp	SHORT $L85595
$LABEL_17$85126:
; Line 487
	cmp	DWORD PTR _trigflag+8, 0
	je	SHORT $L85128
; Line 489
	imul	eax, 112				; 00000070H
	add	eax, ecx
	mov	edx, 1240				; 000004d8H
	mov	eax, DWORD PTR _dPiece[eax*4]
	jmp	SHORT $L85593
$L85130:
; Line 490
	inc	edx
	cmp	edx, 1255				; 000004e7H
	jg	SHORT $L85128
$L85593:
; Line 489
	cmp	eax, edx
	jne	SHORT $L85130
; Line 493
	push	OFFSET FLAT:??_C@_0N@MNPC@Down?5to?5hell?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
; Line 494
	mov	DWORD PTR _cursmx, 41			; 00000029H
; Line 495
	mov	DWORD PTR _cursmy, 80			; 00000050H
$L85595:
	pop	ecx
; Line 496
	mov	al, 1
	pop	ecx
	jmp	SHORT $L85099
$L85128:
; Line 498
	xor	al, al
$L85099:
	pop	edi
	pop	esi
; Line 499
	ret	0
_ForceTownTrig ENDP
_TEXT	ENDS
PUBLIC	_ForceL1Trig
PUBLIC	??_C@_0BB@CHGE@Down?5to?5level?5?$CFi?$AA@	; `string'
PUBLIC	??_C@_0L@NB@Up?5to?5town?$AA@			; `string'
PUBLIC	??_C@_0P@EEOJ@Up?5to?5level?5?$CFi?$AA@		; `string'
EXTRN	_sprintf:NEAR
EXTRN	_currlevel:BYTE
;	COMDAT ??_C@_0L@NB@Up?5to?5town?$AA@
_DATA	SEGMENT
??_C@_0L@NB@Up?5to?5town?$AA@ DB 'Up to town', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@EEOJ@Up?5to?5level?5?$CFi?$AA@
_DATA	SEGMENT
??_C@_0P@EEOJ@Up?5to?5level?5?$CFi?$AA@ DB 'Up to level %i', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CHGE@Down?5to?5level?5?$CFi?$AA@
_DATA	SEGMENT
??_C@_0BB@CHGE@Down?5to?5level?5?$CFi?$AA@ DB 'Down to level %i', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ForceL1Trig
_TEXT	SEGMENT
_ForceL1Trig PROC NEAR					; COMDAT
; Line 513
	cmp	DWORD PTR _L1UpList, -1
	push	ebx
	push	esi
	push	edi
	mov	edi, OFFSET FLAT:_infostr
	mov	ebx, OFFSET FLAT:_trigs+8
	je	SHORT $LABEL_12$85145
; Line 540
	mov	eax, OFFSET FLAT:_L1UpList
; Line 541
	mov	esi, eax
$L85161:
; Line 543
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_11$85169
; Line 544
	mov	al, BYTE PTR _currlevel
	cmp	al, 1
	ja	SHORT $L85164
; Line 545
	push	OFFSET FLAT:??_C@_0L@NB@Up?5to?5town?$AA@ ; `string'
	push	edi
	call	_strcpy
	pop	ecx
	pop	ecx
; Line 546
	jmp	SHORT $L85166
$L85164:
; Line 547
	movzx	eax, al
	dec	eax
	push	eax
	push	OFFSET FLAT:??_C@_0P@EEOJ@Up?5to?5level?5?$CFi?$AA@ ; `string'
	push	edi
	call	_sprintf
	add	esp, 12					; 0000000cH
$L85166:
; Line 549
	mov	ecx, DWORD PTR _trigflag+16
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LABEL_11$85169
; Line 558
	mov	edx, ebx
$L85172:
; Line 559
	cmp	DWORD PTR [edx], 1027			; 00000403H
	je	SHORT $L85157
; Line 560
	inc	eax
; Line 561
	add	edx, 16					; 00000010H
; Line 562
	cmp	eax, ecx
	jl	SHORT $L85172
$LABEL_11$85169:
; Line 553
	add	esi, 4
; Line 554
	mov	eax, esi
; Line 555
	cmp	DWORD PTR [esi], -1
	jne	SHORT $L85161
$LABEL_12$85145:
; Line 515
	cmp	DWORD PTR _L1DownList, -1
; Line 516
	je	SHORT $L85612
; Line 517
	mov	eax, OFFSET FLAT:_L1DownList
; Line 518
	mov	esi, eax
$L85148:
; Line 520
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_19$85153
; Line 521
	movzx	eax, BYTE PTR _currlevel
	inc	eax
	push	eax
	push	OFFSET FLAT:??_C@_0BB@CHGE@Down?5to?5level?5?$CFi?$AA@ ; `string'
	push	edi
	call	_sprintf
; Line 523
	mov	ecx, DWORD PTR _trigflag+16
	add	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LABEL_19$85153
; Line 532
	mov	edx, ebx
$L85156:
; Line 533
	cmp	DWORD PTR [edx], 1026			; 00000402H
	je	SHORT $L85157
; Line 534
	inc	eax
; Line 535
	add	edx, 16					; 00000010H
; Line 536
	cmp	eax, ecx
	jl	SHORT $L85156
$LABEL_19$85153:
; Line 527
	add	esi, 4
; Line 528
	mov	eax, esi
; Line 529
	cmp	DWORD PTR [esi], -1
	jne	SHORT $L85148
$L85612:
; Line 530
	xor	al, al
	jmp	SHORT $L85134
$L85157:
; Line 568
	shl	eax, 4
	mov	ecx, DWORD PTR _trigs[eax+4]
; Line 569
	mov	eax, DWORD PTR _trigs[eax]
	mov	DWORD PTR _cursmx, eax
	mov	DWORD PTR _cursmy, ecx
; Line 570
	mov	al, 1
$L85134:
	pop	edi
	pop	esi
	pop	ebx
; Line 571
	ret	0
_ForceL1Trig ENDP
_TEXT	ENDS
PUBLIC	_ForceL2Trig
EXTRN	_abs:NEAR
; Function compile flags: /Ogsy
;	COMDAT _ForceL2Trig
_TEXT	SEGMENT
_ForceL2Trig PROC NEAR					; COMDAT
; Line 595
	cmp	DWORD PTR _L2UpList, -1
	push	ebx
	push	ebp
	push	esi
	push	edi
	je	SHORT $LABEL_11$85196
; Line 658
	mov	eax, OFFSET FLAT:_L2UpList
; Line 659
	mov	ebp, eax
$L85228:
; Line 661
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_10$85232
; Line 662
	xor	edi, edi
; Line 663
	cmp	DWORD PTR _trigflag+16, edi
	jle	SHORT $LABEL_10$85232
; Line 672
	mov	esi, OFFSET FLAT:_trigs+4
$L85235:
; Line 674
	cmp	DWORD PTR [esi+4], 1027			; 00000403H
	jne	SHORT $L85238
; Line 675
	mov	eax, DWORD PTR [esi-4]
	sub	eax, DWORD PTR _cursmx
	push	eax
	call	_abs
	mov	ebx, eax
; Line 676
	mov	eax, DWORD PTR [esi]
	sub	eax, DWORD PTR _cursmy
	push	eax
	call	_abs
	pop	ecx
; Line 677
	cmp	ebx, 4
	pop	ecx
	jge	SHORT $L85238
	cmp	eax, 4
	jl	$L85236
$L85238:
; Line 680
	inc	edi
; Line 681
	add	esi, 16					; 00000010H
; Line 682
	cmp	edi, DWORD PTR _trigflag+16
	jl	SHORT $L85235
$LABEL_10$85232:
; Line 667
	add	ebp, 4
; Line 668
	mov	eax, ebp
; Line 669
	cmp	DWORD PTR [ebp], -1
; Line 671
	jne	SHORT $L85228
$LABEL_11$85196:
; Line 597
	cmp	DWORD PTR _L2DownList, -1
	je	SHORT $LABEL_22$85205
; Line 598
	mov	eax, OFFSET FLAT:_L2DownList
; Line 599
	mov	esi, eax
$L85199:
; Line 601
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_18$85203
; Line 602
	movzx	eax, BYTE PTR _currlevel
	inc	eax
	push	eax
	push	OFFSET FLAT:??_C@_0BB@CHGE@Down?5to?5level?5?$CFi?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 604
	mov	edx, DWORD PTR _trigflag+16
	add	esp, 12					; 0000000cH
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LABEL_18$85203
; Line 613
	mov	ecx, OFFSET FLAT:_trigs+8
$L85207:
; Line 614
	cmp	DWORD PTR [ecx], 1026			; 00000402H
	je	$L85208
; Line 615
	inc	eax
; Line 616
	add	ecx, 16					; 00000010H
; Line 617
	cmp	eax, edx
	jl	SHORT $L85207
$LABEL_18$85203:
; Line 608
	add	esi, 4
; Line 609
	mov	eax, esi
; Line 610
	cmp	DWORD PTR [esi], -1
	jne	SHORT $L85199
$LABEL_22$85205:
; Line 627
	cmp	BYTE PTR _currlevel, 5
	jne	$L85212
	cmp	DWORD PTR _L2TWarpUpList, -1
	je	SHORT $L85212
; Line 629
	mov	eax, OFFSET FLAT:_L2TWarpUpList
; Line 630
	mov	ebp, eax
$L85214:
; Line 632
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_32$85218
; Line 633
	xor	edi, edi
; Line 634
	cmp	DWORD PTR _trigflag+16, edi
	jle	SHORT $LABEL_32$85218
; Line 643
	mov	esi, OFFSET FLAT:_trigs+4
$L85221:
; Line 645
	cmp	DWORD PTR [esi+4], 1032			; 00000408H
	jne	SHORT $L85224
; Line 646
	mov	eax, DWORD PTR [esi-4]
	sub	eax, DWORD PTR _cursmx
	push	eax
	call	_abs
	mov	ebx, eax
; Line 647
	mov	eax, DWORD PTR [esi]
	sub	eax, DWORD PTR _cursmy
	push	eax
	call	_abs
	pop	ecx
; Line 648
	cmp	ebx, 4
	pop	ecx
	jge	SHORT $L85224
	cmp	eax, 4
	jl	SHORT $L85222
$L85224:
; Line 651
	inc	edi
; Line 652
	add	esi, 16					; 00000010H
; Line 653
	cmp	edi, DWORD PTR _trigflag+16
	jl	SHORT $L85221
$LABEL_32$85218:
; Line 638
	add	ebp, 4
; Line 639
	mov	eax, ebp
; Line 640
	cmp	DWORD PTR [ebp], -1
; Line 642
	jne	SHORT $L85214
$L85212:
; Line 641
	xor	al, al
	jmp	SHORT $L85175
$L85208:
; Line 622
	shl	eax, 4
	mov	edi, DWORD PTR _trigs[eax+4]
; Line 623
	mov	eax, DWORD PTR _trigs[eax]
; Line 624
	jmp	SHORT $L85637
$L85222:
; Line 656
	push	OFFSET FLAT:??_C@_0L@NB@Up?5to?5town?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
	pop	ecx
	pop	ecx
; Line 657
	jmp	SHORT $L85226
$L85236:
; Line 685
	movzx	eax, BYTE PTR _currlevel
	dec	eax
	push	eax
	push	OFFSET FLAT:??_C@_0P@EEOJ@Up?5to?5level?5?$CFi?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
	add	esp, 12					; 0000000cH
$L85226:
; Line 688
	shl	edi, 4
	mov	eax, DWORD PTR _trigs[edi]
; Line 689
	mov	edi, DWORD PTR _trigs[edi+4]
$L85637:
	mov	DWORD PTR _cursmx, eax
; Line 691
	mov	DWORD PTR _cursmy, edi
$LABEL_37$85210:
; Line 692
	mov	al, 1
$L85175:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 693
	ret	0
_ForceL2Trig ENDP
_TEXT	ENDS
PUBLIC	_ForceL3Trig
; Function compile flags: /Ogsy
;	COMDAT _ForceL3Trig
_TEXT	SEGMENT
_ForceL3Trig PROC NEAR					; COMDAT
; Line 696
	push	ebx
	push	ebp
; Line 717
	or	ebx, -1
	push	esi
	cmp	DWORD PTR _L3UpList, ebx
	push	edi
	mov	edi, OFFSET FLAT:_trigs+8
	je	SHORT $LABEL_9$85268
; Line 718
	mov	eax, OFFSET FLAT:_L3UpList
; Line 719
	mov	esi, eax
$L85262:
; Line 721
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_8$85266
; Line 722
	movzx	eax, BYTE PTR _currlevel
	dec	eax
	push	eax
	push	OFFSET FLAT:??_C@_0P@EEOJ@Up?5to?5level?5?$CFi?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 724
	mov	edx, DWORD PTR _trigflag+16
	add	esp, 12					; 0000000cH
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LABEL_8$85266
; Line 733
	mov	ecx, edi
$L85270:
; Line 734
	cmp	DWORD PTR [ecx], 1027			; 00000403H
	je	$LABEL_31$85273
; Line 735
	inc	eax
; Line 736
	add	ecx, 16					; 00000010H
; Line 737
	cmp	eax, edx
	jl	SHORT $L85270
$LABEL_8$85266:
; Line 728
	add	esi, 4
; Line 729
	mov	eax, esi
; Line 730
	cmp	DWORD PTR [esi], ebx
	jne	SHORT $L85262
$LABEL_9$85268:
; Line 743
	cmp	DWORD PTR _L3DownList, ebx
	je	SHORT $LABEL_19$85283
; Line 744
	mov	eax, OFFSET FLAT:_L3DownList
; Line 745
	mov	esi, eax
$L85276:
; Line 747
	mov	ecx, DWORD PTR [eax]
; Line 748
	mov	eax, DWORD PTR _cursmx
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _cursmy
; Line 749
	shl	eax, 2
	cmp	DWORD PTR _dPiece[eax], ecx
	je	SHORT $L85279
	cmp	DWORD PTR _dPiece[eax+448], ecx
	je	SHORT $L85279
	cmp	DWORD PTR _dPiece[eax+896], ecx
	jne	SHORT $LABEL_18$85281
$L85279:
; Line 750
	movzx	eax, BYTE PTR _currlevel
	inc	eax
	push	eax
	push	OFFSET FLAT:??_C@_0BB@CHGE@Down?5to?5level?5?$CFi?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 752
	mov	edx, DWORD PTR _trigflag+16
	add	esp, 12					; 0000000cH
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LABEL_18$85281
; Line 761
	mov	ecx, edi
$L85285:
; Line 762
	cmp	DWORD PTR [ecx], 1026			; 00000402H
	je	$LABEL_31$85273
; Line 763
	inc	eax
; Line 764
	add	ecx, 16					; 00000010H
; Line 765
	cmp	eax, edx
	jl	SHORT $L85285
$LABEL_18$85281:
; Line 756
	add	esi, 4
; Line 757
	mov	eax, esi
; Line 758
	cmp	DWORD PTR [esi], ebx
	jne	SHORT $L85276
$LABEL_19$85283:
; Line 778
	cmp	BYTE PTR _currlevel, 9
	jne	$L85289
	cmp	DWORD PTR _L3TWarpUpList, ebx
	je	$L85289
; Line 779
	mov	eax, OFFSET FLAT:_L3TWarpUpList
; Line 780
	mov	ebp, eax
$L85291:
; Line 782
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_29$85295
; Line 783
	xor	esi, esi
; Line 784
	cmp	DWORD PTR _trigflag+16, esi
	jle	SHORT $LABEL_29$85295
; Line 793
	mov	edi, OFFSET FLAT:_trigs+4
$L85298:
; Line 795
	cmp	DWORD PTR [edi+4], 1032			; 00000408H
	jne	SHORT $L85301
; Line 796
	mov	eax, DWORD PTR [edi-4]
	sub	eax, DWORD PTR _cursmx
	push	eax
	call	_abs
	mov	ebx, eax
; Line 797
	mov	eax, DWORD PTR [edi]
	sub	eax, DWORD PTR _cursmy
	push	eax
	call	_abs
	pop	ecx
; Line 798
	cmp	ebx, 4
	pop	ecx
	jge	SHORT $L85301
	cmp	eax, 4
	jl	SHORT $L85299
$L85301:
; Line 801
	inc	esi
; Line 802
	add	edi, 16					; 00000010H
; Line 803
	cmp	esi, DWORD PTR _trigflag+16
	jl	SHORT $L85298
$LABEL_29$85295:
; Line 788
	add	ebp, 4
; Line 789
	mov	eax, ebp
; Line 790
	cmp	DWORD PTR [ebp], -1
; Line 792
	jne	SHORT $L85291
; Line 791
	jmp	SHORT $L85289
$LABEL_31$85273:
; Line 771
	shl	eax, 4
	mov	esi, DWORD PTR _trigs[eax+4]
; Line 772
	mov	eax, DWORD PTR _trigs[eax]
	jmp	SHORT $L85660
$L85299:
; Line 806
	push	OFFSET FLAT:??_C@_0L@NB@Up?5to?5town?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
; Line 808
	shl	esi, 4
	pop	ecx
	mov	eax, DWORD PTR _trigs[esi]
; Line 809
	mov	esi, DWORD PTR _trigs[esi+4]
	pop	ecx
$L85660:
	mov	DWORD PTR _cursmx, eax
	mov	DWORD PTR _cursmy, esi
$LABEL_33$85288:
	mov	al, 1
	jmp	SHORT $L85240
$L85289:
; Line 812
	xor	al, al
$L85240:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 813
	ret	0
_ForceL3Trig ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DIHO@Down?5to?5Diablo?$AA@		; `string'
PUBLIC	_ForceL4Trig
;	COMDAT ??_C@_0P@DIHO@Down?5to?5Diablo?$AA@
_DATA	SEGMENT
??_C@_0P@DIHO@Down?5to?5Diablo?$AA@ DB 'Down to Diablo', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ForceL4Trig
_TEXT	SEGMENT
_ForceL4Trig PROC NEAR					; COMDAT
; Line 816
	push	ebx
; Line 838
	or	ebx, -1
	cmp	DWORD PTR _L4UpList, ebx
	push	ebp
	push	esi
	push	edi
	je	SHORT $LABEL_9$85332
; Line 839
	mov	eax, OFFSET FLAT:_L4UpList
; Line 840
	mov	esi, eax
$L85326:
; Line 842
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_8$85330
; Line 843
	movzx	eax, BYTE PTR _currlevel
	dec	eax
	push	eax
	push	OFFSET FLAT:??_C@_0P@EEOJ@Up?5to?5level?5?$CFi?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 845
	mov	edx, DWORD PTR _trigflag+16
	add	esp, 12					; 0000000cH
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LABEL_8$85330
; Line 854
	mov	ecx, OFFSET FLAT:_trigs+8
$L85334:
; Line 855
	cmp	DWORD PTR [ecx], 1027			; 00000403H
	je	$LABEL_39$85337
; Line 856
	inc	eax
; Line 857
	add	ecx, 16					; 00000010H
; Line 858
	cmp	eax, edx
	jl	SHORT $L85334
$LABEL_8$85330:
; Line 849
	add	esi, 4
; Line 850
	mov	eax, esi
; Line 851
	cmp	DWORD PTR [esi], ebx
	jne	SHORT $L85326
$LABEL_9$85332:
; Line 864
	cmp	DWORD PTR _L4DownList, ebx
	je	SHORT $LABEL_17$85346
; Line 865
	mov	eax, OFFSET FLAT:_L4DownList
; Line 866
	mov	esi, eax
$L85340:
; Line 868
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_16$85344
; Line 869
	movzx	eax, BYTE PTR _currlevel
	inc	eax
	push	eax
	push	OFFSET FLAT:??_C@_0BB@CHGE@Down?5to?5level?5?$CFi?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 871
	mov	edx, DWORD PTR _trigflag+16
	add	esp, 12					; 0000000cH
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LABEL_16$85344
; Line 880
	mov	ecx, OFFSET FLAT:_trigs+8
$L85348:
; Line 881
	cmp	DWORD PTR [ecx], 1026			; 00000402H
	je	$LABEL_39$85337
; Line 882
	inc	eax
; Line 883
	add	ecx, 16					; 00000010H
; Line 884
	cmp	eax, edx
	jl	SHORT $L85348
$LABEL_16$85344:
; Line 875
	add	esi, 4
; Line 876
	mov	eax, esi
; Line 877
	cmp	DWORD PTR [esi], ebx
	jne	SHORT $L85340
$LABEL_17$85346:
; Line 890
	cmp	BYTE PTR _currlevel, 13			; 0000000dH
	jne	$LABEL_28$85360
; Line 891
	cmp	DWORD PTR _L4TWarpUpList, ebx
	je	$L85369
; Line 892
	mov	eax, OFFSET FLAT:_L4TWarpUpList
; Line 893
	mov	ebp, eax
$L85354:
; Line 895
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_27$85358
; Line 896
	xor	esi, esi
; Line 897
	cmp	DWORD PTR _trigflag+16, esi
	jle	SHORT $LABEL_27$85358
; Line 906
	mov	edi, OFFSET FLAT:_trigs+4
$L85362:
; Line 908
	cmp	DWORD PTR [edi+4], 1032			; 00000408H
	jne	SHORT $L85365
; Line 909
	mov	eax, DWORD PTR [edi-4]
	sub	eax, DWORD PTR _cursmx
	push	eax
	call	_abs
	mov	ebx, eax
; Line 910
	mov	eax, DWORD PTR [edi]
	sub	eax, DWORD PTR _cursmy
	push	eax
	call	_abs
	pop	ecx
; Line 911
	cmp	ebx, 4
	pop	ecx
	jge	SHORT $L85684
	cmp	eax, 4
	jl	$L85363
$L85684:
	or	ebx, -1
$L85365:
; Line 914
	inc	esi
; Line 915
	add	edi, 16					; 00000010H
; Line 916
	cmp	esi, DWORD PTR _trigflag+16
	jl	SHORT $L85362
$LABEL_27$85358:
; Line 901
	add	ebp, 4
; Line 902
	mov	eax, ebp
; Line 903
	cmp	DWORD PTR [ebp], ebx
	jne	SHORT $L85354
$LABEL_28$85360:
; Line 927
	cmp	BYTE PTR _currlevel, 15			; 0000000fH
	jne	$L85369
	cmp	DWORD PTR _L4PentaList, ebx
	je	$L85369
; Line 928
	mov	eax, OFFSET FLAT:_L4PentaList
; Line 929
	mov	esi, eax
$L85371:
; Line 931
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	ecx, DWORD PTR _dPiece[ecx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LABEL_36$85376
; Line 932
	push	OFFSET FLAT:??_C@_0P@DIHO@Down?5to?5Diablo?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
	pop	ecx
; Line 933
	xor	eax, eax
	pop	ecx
; Line 934
	mov	ecx, DWORD PTR _trigflag+16
	test	ecx, ecx
	jle	SHORT $LABEL_36$85376
; Line 943
	mov	edx, OFFSET FLAT:_trigs+8
$L85379:
; Line 944
	cmp	DWORD PTR [edx], 1026			; 00000402H
	je	SHORT $LABEL_39$85337
; Line 945
	inc	eax
; Line 946
	add	edx, 16					; 00000010H
; Line 947
	cmp	eax, ecx
	jl	SHORT $L85379
$LABEL_36$85376:
; Line 938
	add	esi, 4
; Line 939
	mov	eax, esi
; Line 940
	cmp	DWORD PTR [esi], ebx
	jne	SHORT $L85371
; Line 941
	jmp	SHORT $L85369
$L85363:
; Line 919
	push	OFFSET FLAT:??_C@_0L@NB@Up?5to?5town?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_strcpy
; Line 921
	shl	esi, 4
	pop	ecx
	mov	eax, DWORD PTR _trigs[esi]
; Line 922
	mov	esi, DWORD PTR _trigs[esi+4]
	pop	ecx
; Line 923
	jmp	SHORT $L85693
$LABEL_39$85337:
; Line 953
	shl	eax, 4
	mov	esi, DWORD PTR _trigs[eax+4]
; Line 954
	mov	eax, DWORD PTR _trigs[eax]
$L85693:
	mov	DWORD PTR _cursmx, eax
; Line 956
	mov	DWORD PTR _cursmy, esi
$LABEL_40$85367:
; Line 957
	mov	al, 1
	jmp	SHORT $L85303
$L85369:
; Line 960
	xor	al, al
$L85303:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 961
	ret	0
_ForceL4Trig ENDP
_TEXT	ENDS
PUBLIC	_Freeupstairs
EXTRN	_dFlags:BYTE
; Function compile flags: /Ogsy
;	COMDAT _Freeupstairs
_TEXT	SEGMENT
_Freeupstairs PROC NEAR					; COMDAT
; Line 972
	mov	ecx, DWORD PTR _trigflag+16
	test	ecx, ecx
	jle	SHORT $L85392
	push	ebx
	push	esi
	push	edi
; Line 973
	mov	eax, OFFSET FLAT:_trigs+4
; Line 974
	mov	ebx, ecx
$L85390:
; Line 976
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, DWORD PTR [eax]
	imul	ecx, 112				; 00000070H
	push	5
	lea	edx, DWORD PTR _dFlags[ecx+edx-226]
	pop	edi
$L85393:
; Line 979
	push	5
	mov	ecx, edx
	pop	esi
$L85396:
; Line 982
	or	BYTE PTR [ecx], 8
; Line 983
	add	ecx, 112				; 00000070H
; Line 985
	dec	esi
	jne	SHORT $L85396
; Line 986
	inc	edx
; Line 988
	dec	edi
	jne	SHORT $L85393
; Line 989
	add	eax, 16					; 00000010H
; Line 990
	dec	ebx
; Line 991
	jne	SHORT $L85390
	pop	edi
	pop	esi
	pop	ebx
$L85392:
; Line 993
	ret	0
_Freeupstairs ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@OMHD@Back?5to?5Level?5?$CFi?$AA@	; `string'
PUBLIC	_ForceSKingTrig
;	COMDAT ??_C@_0BB@OMHD@Back?5to?5Level?5?$CFi?$AA@
_DATA	SEGMENT
??_C@_0BB@OMHD@Back?5to?5Level?5?$CFi?$AA@ DB 'Back to Level %i', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _ForceSKingTrig
_TEXT	SEGMENT
_ForceSKingTrig PROC NEAR				; COMDAT
; Line 999
	mov	eax, DWORD PTR _L1UpList
	cmp	eax, -1
	je	SHORT $L85403
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	edx, DWORD PTR _dPiece[ecx*4]
	mov	ecx, OFFSET FLAT:_L1UpList
$L85401:
; Line 1000
	cmp	edx, eax
	je	SHORT $L85704
	add	ecx, 4
	mov	eax, DWORD PTR [ecx]
	cmp	eax, -1
	jne	SHORT $L85401
$L85403:
; Line 1009
	xor	eax, eax
; Line 1010
	ret	0
$L85704:
; Line 1001
	movzx	eax, BYTE PTR _quests+288
	push	eax
	push	OFFSET FLAT:??_C@_0BB@OMHD@Back?5to?5Level?5?$CFi?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 1002
	mov	eax, DWORD PTR _trigs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cursmx, eax
; Line 1003
	mov	eax, DWORD PTR _trigs+4
	mov	DWORD PTR _cursmy, eax
; Line 1005
	xor	eax, eax
	inc	eax
; Line 1010
	ret	0
_ForceSKingTrig ENDP
_TEXT	ENDS
PUBLIC	_ForceSChambTrig
; Function compile flags: /Ogsy
;	COMDAT _ForceSChambTrig
_TEXT	SEGMENT
_ForceSChambTrig PROC NEAR				; COMDAT
; Line 1016
	mov	eax, DWORD PTR _L2DownList
	cmp	eax, -1
	je	SHORT $L85410
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	edx, DWORD PTR _dPiece[ecx*4]
	mov	ecx, OFFSET FLAT:_L2DownList
$L85408:
; Line 1017
	cmp	edx, eax
	je	SHORT $L85710
	add	ecx, 4
	mov	eax, DWORD PTR [ecx]
	cmp	eax, -1
	jne	SHORT $L85408
$L85410:
; Line 1026
	xor	eax, eax
; Line 1027
	ret	0
$L85710:
; Line 1018
	movzx	eax, BYTE PTR _quests+336
	push	eax
	push	OFFSET FLAT:??_C@_0BB@OMHD@Back?5to?5Level?5?$CFi?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 1019
	mov	eax, DWORD PTR _trigs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cursmx, eax
; Line 1020
	mov	eax, DWORD PTR _trigs+4
	mov	DWORD PTR _cursmy, eax
; Line 1022
	xor	eax, eax
	inc	eax
; Line 1027
	ret	0
_ForceSChambTrig ENDP
_TEXT	ENDS
PUBLIC	_ForcePWaterTrig
; Function compile flags: /Ogsy
;	COMDAT _ForcePWaterTrig
_TEXT	SEGMENT
_ForcePWaterTrig PROC NEAR				; COMDAT
; Line 1033
	mov	eax, DWORD PTR _L3DownList
	cmp	eax, -1
	je	SHORT $L85416
	mov	ecx, DWORD PTR _cursmx
	imul	ecx, 112				; 00000070H
	add	ecx, DWORD PTR _cursmy
	mov	edx, DWORD PTR _dPiece[ecx*4]
	mov	ecx, OFFSET FLAT:_L3DownList
$L85414:
; Line 1034
	cmp	edx, eax
	je	SHORT $L85716
	add	ecx, 4
	mov	eax, DWORD PTR [ecx]
	cmp	eax, -1
	jne	SHORT $L85414
$L85416:
; Line 1043
	xor	eax, eax
; Line 1044
	ret	0
$L85716:
; Line 1035
	movzx	eax, BYTE PTR _quests+312
	push	eax
	push	OFFSET FLAT:??_C@_0BB@OMHD@Back?5to?5Level?5?$CFi?$AA@ ; `string'
	push	OFFSET FLAT:_infostr
	call	_sprintf
; Line 1036
	mov	eax, DWORD PTR _trigs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cursmx, eax
; Line 1037
	mov	eax, DWORD PTR _trigs+4
	mov	DWORD PTR _cursmy, eax
; Line 1039
	xor	eax, eax
	inc	eax
; Line 1044
	ret	0
_ForcePWaterTrig ENDP
_TEXT	ENDS
PUBLIC	_CheckTrigForce
EXTRN	_setlvlnum:BYTE
EXTRN	_setlevel:BYTE
EXTRN	_MouseY:DWORD
EXTRN	_ForceQuests:NEAR
EXTRN	_ClearPanel:NEAR
EXTRN	_leveltype:BYTE
; Function compile flags: /Ogsy
;	COMDAT _CheckTrigForce
_TEXT	SEGMENT
_CheckTrigForce PROC NEAR				; COMDAT
; Line 1051
	xor	eax, eax
; Line 1052
	cmp	DWORD PTR _MouseY, 351			; 0000015fH
	mov	DWORD PTR _trigflag+12, eax
	jg	$L85421
; Line 1053
	cmp	BYTE PTR _setlevel, al
	je	SHORT $L85422
; Line 1054
	movzx	eax, BYTE PTR _setlvlnum
	dec	eax
	je	SHORT $L85427
	dec	eax
	je	SHORT $L85428
	dec	eax
	dec	eax
	jne	SHORT $L85421
; Line 1062
	call	_ForcePWaterTrig
; Line 1063
	jmp	SHORT $LABEL_23$85431
$L85428:
; Line 1059
	call	_ForceSChambTrig
; Line 1060
	jmp	SHORT $LABEL_23$85431
$L85427:
; Line 1056
	call	_ForceSKingTrig
; Line 1067
	jmp	SHORT $LABEL_23$85431
$L85422:
; Line 1069
	mov	cl, BYTE PTR _leveltype
	test	cl, cl
	je	SHORT $L85432
; Line 1070
	movzx	ecx, cl
	dec	ecx
	je	SHORT $L85437
	dec	ecx
	je	SHORT $L85438
	dec	ecx
	je	SHORT $L85439
	dec	ecx
	jne	SHORT $LABEL_14$85442
; Line 1081
	call	_ForceL4Trig
; Line 1082
	jmp	SHORT $L85721
$L85439:
; Line 1078
	call	_ForceL3Trig
; Line 1079
	jmp	SHORT $L85721
$L85438:
; Line 1075
	call	_ForceL2Trig
; Line 1076
	jmp	SHORT $L85721
$L85437:
; Line 1072
	call	_ForceL1Trig
; Line 1100
	jmp	SHORT $L85721
$L85432:
; Line 1101
	call	_ForceTownTrig
$L85721:
	movzx	eax, al
; Line 1103
	mov	DWORD PTR _trigflag+12, eax
$LABEL_14$85442:
; Line 1085
	cmp	BYTE PTR _leveltype, 0
	je	SHORT $LABEL_24$85444
; Line 1087
	test	eax, eax
	jne	SHORT $LABEL_25$85446
; Line 1092
	call	_ForceQuests
	movzx	eax, al
$LABEL_23$85431:
; Line 1094
	mov	DWORD PTR _trigflag+12, eax
$LABEL_24$85444:
; Line 1096
	test	eax, eax
	je	SHORT $L85421
$LABEL_25$85446:
; Line 1089
	jmp	_ClearPanel
$L85421:
; Line 1106
	ret	0
_CheckTrigForce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NLFI@Unknown?5trigger?5msg?$AA@	; `string'
PUBLIC	_CheckTriggers
EXTRN	_pcurs:DWORD
EXTRN	_ReturnLvl:DWORD
EXTRN	@PlaySFX@4:NEAR
EXTRN	_DropItemBeforeTrig:NEAR
EXTRN	_TermMsg:NEAR
EXTRN	@NetSendCmdLoc@16:NEAR
EXTRN	@InitDiabloMsg@4:NEAR
EXTRN	@StartNewLvl@12:NEAR
;	COMDAT ??_C@_0BE@NLFI@Unknown?5trigger?5msg?$AA@
_DATA	SEGMENT
??_C@_0BE@NLFI@Unknown?5trigger?5msg?$AA@ DB 'Unknown trigger msg', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _CheckTriggers
_TEXT	SEGMENT
_x$ = -16
_y$ = -12
_v12$ = -4
_error_id$ = -8
_CheckTriggers PROC NEAR				; COMDAT
; Line 1110
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
; Line 1124
	mov	ebx, DWORD PTR _myplr
	mov	ecx, ebx
	xor	eax, eax
	imul	ecx, 21720				; 000054d8H
	push	esi
	push	edi
	cmp	DWORD PTR _plr[ecx], eax
	jne	$L85449
; Line 1127
	cmp	DWORD PTR _trigflag+16, eax
	mov	DWORD PTR _v12$[ebp], eax
	jle	$L85449
; Line 1129
	mov	edi, OFFSET FLAT:_trigs+8
$L85465:
; Line 1132
	mov	ecx, ebx
	imul	ecx, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[ecx+56]
; Line 1133
	cmp	edx, DWORD PTR [edi-8]
	jne	$LABEL_34$85468
; Line 1135
	mov	eax, DWORD PTR _plr[ecx+60]
; Line 1136
	cmp	eax, DWORD PTR [edi-4]
	jne	$LABEL_34$85468
; Line 1138
	mov	esi, DWORD PTR [edi]
; Line 1139
	cmp	esi, 1026				; 00000402H
	jne	SHORT $L85470
; Line 1140
	cmp	DWORD PTR _pcurs, 12			; 0000000cH
	jl	SHORT $L85471
	call	_DropItemBeforeTrig
	test	eax, eax
	jne	$L85449
$L85471:
; Line 1142
	movzx	eax, BYTE PTR _currlevel
	inc	eax
; Line 1143
	jmp	$LABEL_33$85475
$L85470:
; Line 1145
	cmp	esi, 1027				; 00000403H
	jne	SHORT $L85473
; Line 1146
	cmp	DWORD PTR _pcurs, 12			; 0000000cH
	jl	SHORT $L85474
	call	_DropItemBeforeTrig
	test	eax, eax
	jne	$L85449
$L85474:
; Line 1148
	movzx	eax, BYTE PTR _currlevel
	dec	eax
$LABEL_32$85472:
; Line 1151
	jmp	$LABEL_33$85475
$L85473:
; Line 1153
	cmp	esi, 1028				; 00000404H
	jne	SHORT $L85466
; Line 1155
	push	DWORD PTR _ReturnLvl
	jmp	SHORT $L85731
$L85466:
; Line 1162
	cmp	esi, 1031				; 00000407H
	je	SHORT $L85478
; Line 1163
	cmp	esi, 1032				; 00000408H
	jne	SHORT $L85479
; Line 1164
	movzx	eax, BYTE PTR _currlevel
	mov	DWORD PTR _TWarpFrom, eax
; Line 1165
	push	0
$L85731:
	mov	edx, esi
	mov	ecx, ebx
; Line 1166
	jmp	$L85730
$L85479:
; Line 1167
	push	OFFSET FLAT:??_C@_0BE@NLFI@Unknown?5trigger?5msg?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
; Line 1169
	jmp	SHORT $LABEL_34$85468
$L85478:
; Line 1171
	cmp	BYTE PTR _gbMaxPlayers, 1
	je	SHORT $LABEL_46$85483
; Line 1173
	xor	esi, esi
; Line 1174
	cmp	DWORD PTR [edi+4], 5
	jne	SHORT $L85484
	cmp	BYTE PTR _plr[ecx+440], 8
	jge	SHORT $L85484
; Line 1177
	mov	bl, al
	inc	esi
	inc	bl
	mov	DWORD PTR _x$[ebp], edx
	mov	BYTE PTR _y$[ebp], bl
; Line 1178
	mov	BYTE PTR _error_id$[ebp], 40		; 00000028H
$L85484:
; Line 1180
	cmp	DWORD PTR [edi+4], 9
	jne	SHORT $L85487
	cmp	BYTE PTR _plr[ecx+440], 13		; 0000000dH
	jge	SHORT $L85487
; Line 1181
	xor	esi, esi
; Line 1182
	mov	bl, dl
	inc	esi
	inc	bl
	mov	BYTE PTR _x$[ebp], bl
; Line 1183
	mov	DWORD PTR _y$[ebp], eax
; Line 1184
	mov	BYTE PTR _error_id$[ebp], 41		; 00000029H
$L85487:
; Line 1186
	cmp	DWORD PTR [edi+4], 13			; 0000000dH
	jne	SHORT $L85490
	cmp	BYTE PTR _plr[ecx+440], 17		; 00000011H
	jge	SHORT $L85490
; Line 1188
	xor	esi, esi
	mov	DWORD PTR _x$[ebp], edx
	inc	esi
; Line 1189
	inc	al
	mov	BYTE PTR _y$[ebp], al
; Line 1190
	mov	BYTE PTR _error_id$[ebp], 42		; 0000002aH
$L85490:
; Line 1192
	test	esi, esi
	jne	SHORT $L85493
$LABEL_46$85483:
; Line 1194
	mov	eax, DWORD PTR [edi+4]
$LABEL_33$85475:
; Line 1196
	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR _myplr
	push	eax
$L85730:
	call	@StartNewLvl@12
$LABEL_34$85468:
; Line 1157
	inc	DWORD PTR _v12$[ebp]
; Line 1158
	add	edi, 16					; 00000010H
; Line 1159
	mov	eax, DWORD PTR _v12$[ebp]
	cmp	eax, DWORD PTR _trigflag+16
	jge	SHORT $L85449
; Line 1161
	mov	ebx, DWORD PTR _myplr
	jmp	$L85465
$L85493:
; Line 1199
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	movsx	eax, BYTE PTR _plr[eax+352]
	sub	eax, 0
	je	SHORT $L85498
	dec	eax
	je	SHORT $L85499
	dec	eax
	jne	SHORT $L85495
; Line 1207
	mov	ecx, 550				; 00000226H
; Line 1208
	jmp	SHORT $L85732
$L85499:
; Line 1204
	mov	ecx, 653				; 0000028dH
; Line 1205
	jmp	SHORT $L85732
$L85498:
; Line 1201
	mov	ecx, 762				; 000002faH
$L85732:
	call	@PlaySFX@4
$L85495:
; Line 1211
	mov	cl, BYTE PTR _error_id$[ebp]
	call	@InitDiabloMsg@4
; Line 1212
	push	DWORD PTR _y$[ebp]
	xor	ecx, ecx
	mov	dl, 1
	inc	ecx
	push	DWORD PTR _x$[ebp]
	call	@NetSendCmdLoc@16
$L85449:
	pop	edi
	pop	esi
	pop	ebx
; Line 1213
	leave
	ret	0
_CheckTriggers ENDP
_TEXT	ENDS
END
