; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	Source/multi.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BB@HOKF@SNetSendMessage0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@DFEK@SNetSendMessage?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@FAKO@Player?5?8?$CFs?8?5just?5left?5the?5game?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@DAGB@Player?5?8?$CFs?8?5dropped?5due?5to?5timeo@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@HMPF@Player?5?8?$CFs?8?5killed?5Diablo?5and?5le@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@PLMD@SNetReceiveMsg?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@CLIL@SNetSendMessage2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@PFBL@SNetRegisterEventHandler?3?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@DLEH@Diablo?5Retail?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@EFIK@SNetGetGameInfo1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LKDD@SNetGetGameInfo2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05PDHF@local?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@KBMM@SNetCreateGame1?3?6?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@KHEP@Network?5upgrade?5failed?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CO@KLEL@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5is?5alread@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC ''
CRT$XCU	ENDS
;	COMDAT @multi_msg_add@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendLoPri@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_copy_packet@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_send_packet@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetRecvPlrData@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetSendHiPri@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_recv_packet@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_send_msg_packet@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_msg_countdown
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_parse_turn@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_handle_turn_upper_bit@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_player_left@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_clear_left_tbl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_player_left_msg@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_net_ping
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_handle_delta
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_check_pkt_valid@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_mon_seeds
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_begin_timeout
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_check_drop_player
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_process_network_packets
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_handle_all_packets@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_process_tmsgs
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_send_zero_packet@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _NetClose
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_event_handler@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _multi_handle_events@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @NetInit@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @buffer_init@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_send_pinfo@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @InitNewSeed@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SetupLocalCoords
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_init_single@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_init_multi@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_upgrade@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @multi_player_joins@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_event_types
_DATA	SEGMENT
COMM	_gbSomebodyWonGameKludge:BYTE
COMM	_szPlayerDescript:BYTE:080H
COMM	_sgwPackPlrOffsetTbl:WORD:04H
COMM	_netplr:BYTE:013c8H
COMM	_dword_678628:DWORD
COMM	_gbActivePlayers:BYTE
COMM	_gbGameDestroyed:BYTE
COMM	_byte_678640:BYTE
COMM	_gbMaxPlayers:BYTE
COMM	_szPlayerName:BYTE:080H
COMM	_gbDeltaSender:BYTE
COMM	_player_state:DWORD:04H
COMM	_sgHiPriBuf:BYTE:01004H
COMM	_sgbPlayerTurnBitTbl:BYTE:04H
COMM	_sgbPlayerLeftGameTbl:BYTE:04H
COMM	_sgbSentThisCycle:DWORD
COMM	_sgbSendDeltaTbl:BYTE:04H
COMM	_sgGameInitInfo:QWORD
COMM	_sglTimeoutStart:DWORD
COMM	_sgdwPlayerLeftReasonTbl:DWORD:04H
COMM	_sgLoPriBuf:BYTE:01004H
COMM	_sgdwGameLoops:DWORD
COMM	_sgbTimeout:BYTE
COMM	_sgbNetInited:DWORD
_DATA	ENDS
CONST	SEGMENT
_event_types DD	03H
	DD	01H
	DD	04H
CONST	ENDS
PUBLIC	@multi_msg_add@8
EXTRN	@tmsg_add@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @multi_msg_add@8
_TEXT	SEGMENT
@multi_msg_add@8 PROC NEAR				; COMDAT
; _a1$ = ecx
; _a2$ = dl
; File Source/multi.cpp
; Line 38
	test	ecx, ecx
	je	SHORT $L85000
; Line 39
	test	dl, dl
	je	SHORT $L85000
; Line 40
	jmp	@tmsg_add@8
$L85000:
; Line 42
	ret	0
@multi_msg_add@8 ENDP
_TEXT	ENDS
PUBLIC	@NetSendLoPri@8
PUBLIC	@multi_copy_packet@12
PUBLIC	@multi_send_packet@8
; Function compile flags: /Ogsy
;	COMDAT @NetSendLoPri@8
_TEXT	SEGMENT
@NetSendLoPri@8 PROC NEAR				; COMDAT
; _pbMsg$ = ecx
; _bLen$ = edx
; Line 45
	push	ebx
	push	esi
	mov	esi, ecx
	mov	ebx, edx
; Line 46
	test	esi, esi
	je	SHORT $L85007
; Line 47
	test	bl, bl
	je	SHORT $L85007
; Line 48
	push	ebx
	mov	edx, esi
	mov	ecx, OFFSET FLAT:_sgLoPriBuf
	call	@multi_copy_packet@12
; Line 49
	mov	ecx, esi
	mov	dl, bl
	pop	esi
	pop	ebx
	jmp	@multi_send_packet@8
$L85007:
	pop	esi
	pop	ebx
; Line 52
	ret	0
@NetSendLoPri@8 ENDP
_TEXT	ENDS
EXTRN	_memcpy:NEAR
; Function compile flags: /Ogsy
;	COMDAT @multi_copy_packet@12
_TEXT	SEGMENT
_size$ = 8
@multi_copy_packet@12 PROC NEAR				; COMDAT
; _a1$ = ecx
; _packet$ = edx
; Line 60
	mov	eax, DWORD PTR [ecx]
	push	ebx
; Line 61
	mov	bl, BYTE PTR _size$[esp]
	push	esi
	movzx	esi, bl
	push	edi
; Line 62
	lea	edi, DWORD PTR [esi+eax+2]
	cmp	edi, 4096				; 00001000H
	ja	SHORT $L85018
; Line 63
	lea	edi, DWORD PTR [esi+eax+1]
; Line 64
	add	eax, ecx
	mov	DWORD PTR [ecx], edi
; Line 66
	push	esi
	lea	edi, DWORD PTR [eax+5]
	push	edx
	push	edi
	mov	BYTE PTR [eax+4], bl
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 67
	and	BYTE PTR [esi+edi], 0
$L85018:
	pop	edi
	pop	esi
	pop	ebx
; Line 69
	ret	4
@multi_copy_packet@12 ENDP
_TEXT	ENDS
PUBLIC	@NetRecvPlrData@4
PUBLIC	??_C@_0BB@HOKF@SNetSendMessage0?$AA@		; `string'
EXTRN	_SNetSendMessage@12:NEAR
EXTRN	@nthread_terminate_game@4:NEAR
EXTRN	_myplr:DWORD
;	COMDAT ??_C@_0BB@HOKF@SNetSendMessage0?$AA@
_DATA	SEGMENT
??_C@_0BB@HOKF@SNetSendMessage0?$AA@ DB 'SNetSendMessage0', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @multi_send_packet@8
_TEXT	SEGMENT
_pkt$ = -512
@multi_send_packet@8 PROC NEAR				; COMDAT
; _packet$ = ecx
; _dwSize$ = dl
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	mov	esi, ecx
; Line 75
	lea	ecx, DWORD PTR _pkt$[ebp]
	mov	bl, dl
	call	@NetRecvPlrData@4
; Line 76
	movzx	ax, bl
	add	eax, 19					; 00000013H
	mov	WORD PTR _pkt$[ebp+17], ax
; Line 77
	movzx	eax, bl
	push	eax
	lea	eax, DWORD PTR _pkt$[ebp+19]
	push	esi
	push	eax
	call	_memcpy
; Line 78
	movzx	eax, WORD PTR _pkt$[ebp+17]
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _pkt$[ebp]
	push	eax
	push	DWORD PTR _myplr
	call	_SNetSendMessage@12
	test	eax, eax
	pop	esi
	pop	ebx
	jne	SHORT $L85025
; Line 79
	mov	ecx, OFFSET FLAT:??_C@_0BB@HOKF@SNetSendMessage0?$AA@ ; `string'
	call	@nthread_terminate_game@4
$L85025:
; Line 80
	leave
	ret	0
@multi_send_packet@8 ENDP
_TEXT	ENDS
EXTRN	_plr:BYTE
; Function compile flags: /Ogsy
;	COMDAT @NetRecvPlrData@4
_TEXT	SEGMENT
@NetRecvPlrData@4 PROC NEAR				; COMDAT
; _pkt$ = ecx
; Line 84
	mov	WORD PTR [ecx+15], 26992		; 00006970H
; Line 85
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+56]
	mov	BYTE PTR [ecx], al
; Line 86
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+60]
	mov	BYTE PTR [ecx+1], al
; Line 87
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+72]
	mov	BYTE PTR [ecx+2], al
; Line 88
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+76]
	mov	BYTE PTR [ecx+3], al
; Line 89
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+408]
	mov	DWORD PTR [ecx+4], eax
; Line 90
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	eax, DWORD PTR _plr[eax+412]
	mov	DWORD PTR [ecx+8], eax
; Line 91
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+360]
	mov	BYTE PTR [ecx+12], al
; Line 92
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+368]
	mov	BYTE PTR [ecx+13], al
; Line 93
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	al, BYTE PTR _plr[eax+376]
	mov	BYTE PTR [ecx+14], al
; Line 94
	ret	0
@NetRecvPlrData@4 ENDP
_TEXT	ENDS
PUBLIC	@NetSendHiPri@8
PUBLIC	@multi_recv_packet@12
PUBLIC	??_C@_0BA@DFEK@SNetSendMessage?$AA@		; `string'
EXTRN	@sync_all_monsters@8:NEAR
EXTRN	_gdwNormalMsgSize:DWORD
;	COMDAT ??_C@_0BA@DFEK@SNetSendMessage?$AA@
_DATA	SEGMENT
??_C@_0BA@DFEK@SNetSendMessage?$AA@ DB 'SNetSendMessage', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @NetSendHiPri@8
_TEXT	SEGMENT
_pkt$ = -516
_size$ = -4
@NetSendHiPri@8 PROC NEAR				; COMDAT
; _pbMsg$ = ecx
; _bLen$ = edx
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 105
	test	edi, edi
	mov	ebx, edx
	mov	esi, OFFSET FLAT:_sgHiPriBuf
	je	SHORT $L85041
	test	bl, bl
	je	SHORT $L85041
; Line 106
	push	ebx
	mov	edx, edi
	mov	ecx, esi
	call	@multi_copy_packet@12
; Line 107
	mov	dl, bl
	mov	ecx, edi
	call	@multi_send_packet@8
$L85041:
; Line 109
	cmp	DWORD PTR _dword_678628, 0
	jne	SHORT $L85044
; Line 111
	lea	ecx, DWORD PTR _pkt$[ebp]
	mov	DWORD PTR _dword_678628, 1
	call	@NetRecvPlrData@4
; Line 112
	mov	eax, DWORD PTR _gdwNormalMsgSize
; Line 113
	lea	edx, DWORD PTR _pkt$[ebp+19]
	add	eax, -19				; ffffffedH
	mov	ecx, esi
	mov	DWORD PTR _size$[ebp], eax
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	call	@multi_recv_packet@12
; Line 114
	lea	ecx, DWORD PTR _size$[ebp]
	mov	edx, eax
	push	ecx
	mov	ecx, OFFSET FLAT:_sgLoPriBuf
	call	@multi_recv_packet@12
; Line 115
	mov	edx, DWORD PTR _size$[ebp]
	mov	ecx, eax
	call	@sync_all_monsters@8
; Line 116
	mov	ecx, DWORD PTR _gdwNormalMsgSize
	sub	ecx, eax
; Line 118
	lea	eax, DWORD PTR _pkt$[ebp]
	push	ecx
	push	eax
	push	-2					; fffffffeH
	mov	WORD PTR _pkt$[ebp+17], cx
	call	_SNetSendMessage@12
	test	eax, eax
	jne	SHORT $L85044
; Line 119
	mov	ecx, OFFSET FLAT:??_C@_0BA@DFEK@SNetSendMessage?$AA@ ; `string'
	call	@nthread_terminate_game@4
$L85044:
	pop	edi
	pop	esi
	pop	ebx
; Line 121
	leave
	ret	0
@NetSendHiPri@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @multi_recv_packet@12
_TEXT	SEGMENT
_a3$ = 8
_v8$ = -4
@multi_recv_packet@12 PROC NEAR				; COMDAT
; _packet$ = ecx
; _a2$ = edx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 135
	mov	eax, edx
; Line 136
	mov	DWORD PTR _v8$[ebp], edx
; Line 137
	cmp	DWORD PTR [esi], 0
	je	SHORT $L85059
	push	edi
; Line 138
	lea	edi, DWORD PTR [esi+4]
; Line 139
	mov	al, BYTE PTR [edi]
	test	al, al
	je	SHORT $L85611
	push	ebx
$L85061:
; Line 140
	movzx	ebx, al
; Line 141
	mov	eax, DWORD PTR _a3$[ebp]
	cmp	ebx, DWORD PTR [eax]
	ja	SHORT $L85613
; Line 143
	inc	edi
; Line 144
	push	ebx
	push	edi
	push	DWORD PTR _v8$[ebp]
	call	_memcpy
; Line 147
	mov	eax, DWORD PTR _a3$[ebp]
	add	DWORD PTR _v8$[ebp], ebx
	add	edi, ebx
	add	esp, 12					; 0000000cH
	sub	DWORD PTR [eax], ebx
	mov	al, BYTE PTR [edi]
	test	al, al
	jne	SHORT $L85061
$L85613:
	pop	ebx
$L85611:
; Line 149
	mov	eax, DWORD PTR [esi]
	sub	eax, edi
	lea	eax, DWORD PTR [eax+esi+5]
	push	eax
	lea	eax, DWORD PTR [esi+4]
	push	edi
	push	eax
	call	_memcpy
; Line 150
	mov	eax, esi
	add	esp, 12					; 0000000cH
	sub	eax, edi
	add	eax, 4
	pop	edi
	add	DWORD PTR [esi], eax
; Line 151
	mov	eax, DWORD PTR _v8$[ebp]
$L85059:
	pop	esi
; Line 154
	leave
	ret	4
@multi_recv_packet@12 ENDP
_TEXT	ENDS
PUBLIC	@multi_send_msg_packet@12
EXTRN	_SErrGetLastError@0:NEAR
; Function compile flags: /Ogsy
;	COMDAT @multi_send_msg_packet@12
_TEXT	SEGMENT
_a1$ = -4
_len$ = 8
_pkt$ = -516
@multi_send_msg_packet@12 PROC NEAR			; COMDAT
; _a1$ = ecx
; _a2$ = edx
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	mov	DWORD PTR _a1$[ebp], ecx
	push	edi
; Line 165
	lea	ecx, DWORD PTR _pkt$[ebp]
	call	@NetRecvPlrData@4
; Line 166
	movzx	ax, BYTE PTR _len$[ebp]
; Line 167
	movzx	esi, BYTE PTR _len$[ebp]
	add	eax, 19					; 00000013H
	push	esi
	mov	WORD PTR _pkt$[ebp+17], ax
	lea	eax, DWORD PTR _pkt$[ebp+19]
	push	edx
	push	eax
	call	_memcpy
; Line 168
	xor	edi, edi
	add	esp, 12					; 0000000cH
	inc	edi
; Line 169
	xor	ebx, ebx
$L85082:
; Line 171
	mov	eax, DWORD PTR _a1$[ebp]
	test	edi, eax
	je	SHORT $L85085
; Line 172
	lea	eax, DWORD PTR [esi+19]
	push	eax
	lea	eax, DWORD PTR _pkt$[ebp]
	push	eax
	push	ebx
	call	_SNetSendMessage@12
	test	eax, eax
	jne	SHORT $L85085
	call	_SErrGetLastError@0
	cmp	eax, -2062548886			; 8510006aH
	jne	SHORT $L85083
$L85085:
; Line 175
	inc	ebx
; Line 176
	add	edi, edi
; Line 177
	cmp	ebx, 4
	jb	SHORT $L85082
; Line 170
	jmp	SHORT $L85076
$L85083:
; Line 180
	mov	ecx, OFFSET FLAT:??_C@_0BA@DFEK@SNetSendMessage?$AA@ ; `string'
	call	@nthread_terminate_game@4
$L85076:
	pop	edi
	pop	esi
	pop	ebx
; Line 181
	leave
	ret	4
@multi_send_msg_packet@12 ENDP
_TEXT	ENDS
PUBLIC	_multi_msg_countdown
PUBLIC	@multi_parse_turn@8
EXTRN	_gdwMsgLenTbl:BYTE
EXTRN	_glpMsgTbl:BYTE
; Function compile flags: /Ogsy
;	COMDAT _multi_msg_countdown
_TEXT	SEGMENT
_multi_msg_countdown PROC NEAR				; COMDAT
; Line 184
	push	esi
; Line 187
	xor	esi, esi
$L85089:
; Line 189
	test	BYTE PTR _player_state[esi*4+2], 2
	je	SHORT $L85093
; Line 190
	cmp	DWORD PTR _gdwMsgLenTbl[esi*4], 4
	jne	SHORT $L85093
; Line 191
	mov	eax, DWORD PTR _glpMsgTbl[esi*4]
	mov	ecx, esi
	mov	edx, DWORD PTR [eax]
	call	@multi_parse_turn@8
$L85093:
; Line 193
	inc	esi
; Line 194
	cmp	esi, 4
	jl	SHORT $L85089
	pop	esi
; Line 195
	ret	0
_multi_msg_countdown ENDP
_TEXT	ENDS
PUBLIC	@multi_handle_turn_upper_bit@4
EXTRN	_byte_679704:BYTE
EXTRN	_gdwTurnsInTransit:DWORD
; Function compile flags: /Ogsy
;	COMDAT @multi_parse_turn@8
_TEXT	SEGMENT
@multi_parse_turn@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _turn$ = edx
; Line 198
	push	esi
	mov	esi, edx
; Line 203
	test	esi, esi
	jge	SHORT $L85102
; Line 204
	call	@multi_handle_turn_upper_bit@4
$L85102:
; Line 206
	mov	eax, DWORD PTR _gdwTurnsInTransit
	mov	ecx, 2147483647				; 7fffffffH
	and	esi, ecx
	lea	edx, DWORD PTR [eax+esi]
	cmp	DWORD PTR _sgbSentThisCycle, edx
	jae	SHORT $L85103
; Line 207
	cmp	esi, ecx
	jb	SHORT $L85104
; Line 208
	movzx	esi, si
$L85104:
; Line 209
	add	eax, esi
	mov	DWORD PTR _sgbSentThisCycle, eax
; Line 210
	movzx	eax, BYTE PTR _byte_679704
	imul	eax, esi
	shl	eax, 2
	mov	DWORD PTR _sgdwGameLoops, eax
$L85103:
	pop	esi
; Line 212
	ret	0
@multi_parse_turn@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @multi_handle_turn_upper_bit@4
_TEXT	SEGMENT
@multi_handle_turn_upper_bit@4 PROC NEAR		; COMDAT
; _pnum$ = ecx
; Line 220
	xor	eax, eax
$L85111:
; Line 222
	test	BYTE PTR _player_state[eax*4+2], 1
	je	SHORT $L85114
	cmp	eax, ecx
	jne	SHORT $L85113
$L85114:
; Line 224
	inc	eax
; Line 225
	cmp	eax, 4
	jl	SHORT $L85111
$L85113:
; Line 226
	mov	edx, DWORD PTR _myplr
	cmp	edx, eax
	jne	SHORT $L85115
; Line 227
	mov	BYTE PTR _sgbSendDeltaTbl[ecx], 1
; Line 231
	ret	0
$L85115:
; Line 228
	cmp	edx, ecx
	jne	SHORT $L85117
; Line 229
	mov	BYTE PTR _gbDeltaSender, al
$L85117:
; Line 231
	ret	0
@multi_handle_turn_upper_bit@4 ENDP
_TEXT	ENDS
PUBLIC	@multi_player_left@8
PUBLIC	_multi_clear_left_tbl
; Function compile flags: /Ogsy
;	COMDAT @multi_player_left@8
_TEXT	SEGMENT
@multi_player_left@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _reason$ = edx
; Line 236
	mov	BYTE PTR _sgbPlayerLeftGameTbl[ecx], 1
; Line 237
	mov	DWORD PTR _sgdwPlayerLeftReasonTbl[ecx*4], edx
; Line 238
	jmp	_multi_clear_left_tbl
@multi_player_left@8 ENDP
_TEXT	ENDS
PUBLIC	@multi_player_left_msg@8
EXTRN	_gbBufferMsgs:BYTE
EXTRN	@msg_send_drop_pkt@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _multi_clear_left_tbl
_TEXT	SEGMENT
_multi_clear_left_tbl PROC NEAR				; COMDAT
; Line 242
	push	esi
; Line 245
	xor	esi, esi
$L85125:
; Line 247
	cmp	BYTE PTR _sgbPlayerLeftGameTbl[esi], 0
	je	SHORT $L85128
; Line 248
	cmp	BYTE PTR _gbBufferMsgs, 1
; Line 249
	mov	ecx, esi
	jne	SHORT $L85129
	mov	edx, DWORD PTR _sgdwPlayerLeftReasonTbl[esi*4]
	call	@msg_send_drop_pkt@8
; Line 250
	jmp	SHORT $L85130
$L85129:
; Line 251
	xor	edx, edx
	inc	edx
	call	@multi_player_left_msg@8
$L85130:
; Line 252
	and	BYTE PTR _sgbPlayerLeftGameTbl[esi], 0
; Line 253
	and	DWORD PTR _sgdwPlayerLeftReasonTbl[esi*4], 0
$L85128:
; Line 255
	inc	esi
; Line 256
	cmp	esi, 4
	jl	SHORT $L85125
	pop	esi
; Line 257
	ret	0
_multi_clear_left_tbl ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@FAKO@Player?5?8?$CFs?8?5just?5left?5the?5game?$AA@ ; `string'
PUBLIC	??_C@_0CD@DAGB@Player?5?8?$CFs?8?5dropped?5due?5to?5timeo@ ; `string'
PUBLIC	??_C@_0CN@HMPF@Player?5?8?$CFs?8?5killed?5Diablo?5and?5le@ ; `string'
EXTRN	_EventPlrMsg:NEAR
EXTRN	@DeactivatePortal@4:NEAR
EXTRN	@RemovePortalMissile@4:NEAR
EXTRN	@RemovePlrFromMap@4:NEAR
EXTRN	@RemovePlrMissiles@4:NEAR
EXTRN	@RemovePlrPortal@4:NEAR
;	COMDAT ??_C@_0BP@FAKO@Player?5?8?$CFs?8?5just?5left?5the?5game?$AA@
_DATA	SEGMENT
??_C@_0BP@FAKO@Player?5?8?$CFs?8?5just?5left?5the?5game?$AA@ DB 'Player '''
	DB	'%s'' just left the game', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CD@DAGB@Player?5?8?$CFs?8?5dropped?5due?5to?5timeo@
_DATA	SEGMENT
??_C@_0CD@DAGB@Player?5?8?$CFs?8?5dropped?5due?5to?5timeo@ DB 'Player ''%'
	DB	's'' dropped due to timeout', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CN@HMPF@Player?5?8?$CFs?8?5killed?5Diablo?5and?5le@
_DATA	SEGMENT
??_C@_0CN@HMPF@Player?5?8?$CFs?8?5killed?5Diablo?5and?5le@ DB 'Player ''%'
	DB	's'' killed Diablo and left the game!', 00H	; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @multi_player_left_msg@8
_TEXT	SEGMENT
@multi_player_left_msg@8 PROC NEAR			; COMDAT
; _pnum$ = ecx
; _left$ = edx
; Line 261
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 271
	mov	esi, edi
	mov	ebx, edx
	imul	esi, 21720				; 000054d8H
	cmp	BYTE PTR _plr[esi+29], 0
	je	SHORT $L85141
; Line 272
	call	@RemovePlrFromMap@4
; Line 273
	mov	ecx, edi
	call	@RemovePortalMissile@4
; Line 274
	mov	ecx, edi
	call	@DeactivatePortal@4
; Line 275
	mov	ecx, edi
	call	@RemovePlrPortal@4
; Line 276
	mov	ecx, edi
	call	@RemovePlrMissiles@4
; Line 277
	test	ebx, ebx
	je	SHORT $L85142
; Line 279
	mov	edi, DWORD PTR _sgdwPlayerLeftReasonTbl[edi*4]
	mov	eax, OFFSET FLAT:??_C@_0BP@FAKO@Player?5?8?$CFs?8?5just?5left?5the?5game?$AA@ ; `string'
	sub	edi, 1073741828				; 40000004H
; Line 280
	je	SHORT $L85144
; Line 281
	cmp	edi, 2
	jne	SHORT $L85147
; Line 282
	mov	eax, OFFSET FLAT:??_C@_0CD@DAGB@Player?5?8?$CFs?8?5dropped?5due?5to?5timeo@ ; `string'
; Line 283
	jmp	SHORT $L85147
$L85144:
; Line 284
	mov	eax, OFFSET FLAT:??_C@_0CN@HMPF@Player?5?8?$CFs?8?5killed?5Diablo?5and?5le@ ; `string'
; Line 285
	mov	BYTE PTR _gbSomebodyWonGameKludge, 1
$L85147:
; Line 287
	lea	ecx, DWORD PTR _plr[esi+320]
	push	ecx
	push	eax
	call	_EventPlrMsg
	pop	ecx
	pop	ecx
$L85142:
; Line 289
	and	BYTE PTR _plr[esi+29], 0
; Line 290
	and	BYTE PTR _plr[esi+320], 0
; Line 291
	dec	BYTE PTR _gbActivePlayers
$L85141:
	pop	edi
	pop	esi
	pop	ebx
; Line 293
	ret	0
@multi_player_left_msg@8 ENDP
_TEXT	ENDS
PUBLIC	_multi_net_ping
EXTRN	__imp__GetTickCount@0:NEAR
; Function compile flags: /Ogsy
;	COMDAT _multi_net_ping
_TEXT	SEGMENT
_multi_net_ping PROC NEAR				; COMDAT
; Line 298
	mov	BYTE PTR _sgbTimeout, 1
; Line 299
	call	DWORD PTR __imp__GetTickCount@0
	mov	DWORD PTR _sglTimeoutStart, eax
; Line 300
	ret	0
_multi_net_ping ENDP
_TEXT	ENDS
PUBLIC	_multi_handle_delta
PUBLIC	@multi_check_pkt_valid@4
PUBLIC	_multi_mon_seeds
PUBLIC	_multi_begin_timeout
EXTRN	_gbRunGame:DWORD
EXTRN	@nthread_send_and_recv_turn@8:NEAR
EXTRN	@nthread_recv_turns@4:NEAR
EXTRN	@DeltaExportData@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _multi_handle_delta
_TEXT	SEGMENT
_recieved$ = -4
_multi_handle_delta PROC NEAR				; COMDAT
; Line 305
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 309
	xor	ebx, ebx
	cmp	BYTE PTR _gbGameDestroyed, bl
	je	SHORT $L85153
; Line 310
	mov	DWORD PTR _gbRunGame, ebx
; Line 311
	jmp	SHORT $L85647
$L85153:
	push	esi
; Line 313
	xor	esi, esi
$L85154:
; Line 315
	lea	eax, DWORD PTR _sgbSendDeltaTbl[esi]
	cmp	BYTE PTR [eax], bl
	je	SHORT $L85157
; Line 317
	mov	ecx, esi
	mov	BYTE PTR [eax], bl
	call	@DeltaExportData@4
$L85157:
; Line 319
	inc	esi
; Line 320
	cmp	esi, 4
	jl	SHORT $L85154
; Line 321
	mov	ecx, DWORD PTR _sgbSentThisCycle
	xor	edx, edx
	inc	edx
	call	@nthread_send_and_recv_turn@8
; Line 322
	lea	ecx, DWORD PTR _recieved$[ebp]
	mov	DWORD PTR _sgbSentThisCycle, eax
	call	@nthread_recv_turns@4
	test	eax, eax
	pop	esi
	jne	SHORT $L85158
; Line 323
	call	_multi_begin_timeout
$L85647:
; Line 324
	xor	eax, eax
	jmp	SHORT $L85150
$L85158:
; Line 327
	cmp	DWORD PTR _recieved$[ebp], ebx
	mov	BYTE PTR _sgbTimeout, bl
	je	SHORT $L85162
; Line 328
	cmp	DWORD PTR _dword_678628, ebx
	je	SHORT $L85160
; Line 330
	mov	ecx, OFFSET FLAT:_sgHiPriBuf
	mov	DWORD PTR _dword_678628, ebx
	call	@multi_check_pkt_valid@4
	test	eax, eax
	jne	SHORT $L85162
; Line 331
	xor	dl, dl
	xor	ecx, ecx
	call	@NetSendHiPri@8
; Line 332
	jmp	SHORT $L85162
$L85160:
; Line 333
	xor	dl, dl
	xor	ecx, ecx
	call	@NetSendHiPri@8
; Line 334
	mov	DWORD PTR _dword_678628, ebx
$L85162:
; Line 337
	call	_multi_mon_seeds
; Line 338
	xor	eax, eax
	inc	eax
$L85150:
	pop	ebx
; Line 339
	leave
	ret	0
_multi_handle_delta ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @multi_check_pkt_valid@4
_TEXT	SEGMENT
@multi_check_pkt_valid@4 PROC NEAR			; COMDAT
; _a1$ = ecx
; Line 347
	xor	eax, eax
	cmp	DWORD PTR [ecx], eax
	sete	al
; Line 348
	ret	0
@multi_check_pkt_valid@4 ENDP
_TEXT	ENDS
EXTRN	__rotr:NEAR
EXTRN	_monster:BYTE
; Function compile flags: /Ogsy
;	COMDAT _multi_mon_seeds
_TEXT	SEGMENT
_multi_mon_seeds PROC NEAR				; COMDAT
; Line 355
	inc	DWORD PTR _sgdwGameLoops
; Line 356
	push	8
	push	DWORD PTR _sgdwGameLoops
	call	__rotr
	pop	ecx
; Line 357
	xor	edx, edx
	pop	ecx
	mov	ecx, OFFSET FLAT:_monster+180
	push	esi
$L85169:
; Line 358
	lea	esi, DWORD PTR [edx+eax]
	inc	edx
	mov	DWORD PTR [ecx], esi
	add	ecx, 228				; 000000e4H
	cmp	ecx, OFFSET FLAT:_monster+45780
	jl	SHORT $L85169
	pop	esi
; Line 359
	ret	0
_multi_mon_seeds ENDP
_TEXT	ENDS
PUBLIC	_multi_check_drop_player
; Function compile flags: /Ogsy
;	COMDAT _multi_begin_timeout
_TEXT	SEGMENT
_bGroupPlayers$ = -1
_multi_begin_timeout PROC NEAR				; COMDAT
; Line 362
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 371
	xor	ebx, ebx
; Line 375
	cmp	BYTE PTR _sgbTimeout, bl
	push	esi
	push	edi
	mov	BYTE PTR _bGroupPlayers$[ebp], bl
	je	SHORT $L85195
; Line 378
	call	DWORD PTR __imp__GetTickCount@0
	sub	eax, DWORD PTR _sglTimeoutStart
; Line 379
	cmp	eax, 20000				; 00004e20H
	jg	SHORT $L85181
; Line 380
	cmp	eax, 10000				; 00002710H
	jl	SHORT $L85195
; Line 382
	or	ecx, -1
; Line 384
	xor	eax, eax
	mov	esi, ecx
	mov	edi, ecx
$L85183:
; Line 386
	mov	edx, DWORD PTR _player_state[eax*4]
; Line 387
	test	edx, 65536				; 00010000H
	je	SHORT $L85190
; Line 388
	cmp	edi, ecx
	jne	SHORT $L85187
; Line 389
	mov	edi, eax
$L85187:
; Line 390
	test	edx, 262144				; 00040000H
	je	SHORT $L85188
; Line 391
	inc	BYTE PTR _bGroupPlayers$[ebp]
; Line 392
	cmp	esi, ecx
	jne	SHORT $L85190
; Line 393
	mov	esi, eax
; Line 394
	jmp	SHORT $L85190
$L85188:
; Line 395
	inc	bl
$L85190:
; Line 398
	inc	eax
; Line 399
	cmp	eax, 4
	jl	SHORT $L85183
; Line 400
	cmp	BYTE PTR _bGroupPlayers$[ebp], bl
	jb	SHORT $L85191
	jne	SHORT $L85192
	cmp	edi, esi
	jne	SHORT $L85191
$L85192:
; Line 401
	cmp	esi, DWORD PTR _myplr
	jne	SHORT $L85195
; Line 402
	call	_multi_check_drop_player
; Line 403
	jmp	SHORT $L85195
$L85191:
; Line 404
	mov	BYTE PTR _gbGameDestroyed, 1
; Line 407
	jmp	SHORT $L85195
$L85181:
; Line 408
	mov	DWORD PTR _gbRunGame, ebx
$L85195:
	pop	edi
	pop	esi
	pop	ebx
; Line 411
	leave
	ret	0
_multi_begin_timeout ENDP
_TEXT	ENDS
EXTRN	_SNetDropPlayer@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _multi_check_drop_player
_TEXT	SEGMENT
_multi_check_drop_player PROC NEAR			; COMDAT
; Line 417
	push	esi
; Line 421
	xor	esi, esi
$L85199:
; Line 423
	mov	eax, DWORD PTR _player_state[esi*4]
; Line 424
	test	eax, 262144				; 00040000H
	jne	SHORT $L85203
; Line 425
	test	eax, 65536				; 00010000H
	je	SHORT $L85203
; Line 426
	push	1073741830				; 40000006H
	push	esi
	call	_SNetDropPlayer@8
$L85203:
; Line 428
	inc	esi
; Line 429
	cmp	esi, 4
	jl	SHORT $L85199
	pop	esi
; Line 430
	ret	0
_multi_check_drop_player ENDP
_TEXT	ENDS
PUBLIC	_multi_process_network_packets
PUBLIC	@multi_handle_all_packets@12
PUBLIC	_multi_process_tmsgs
PUBLIC	??_C@_0P@PLMD@SNetReceiveMsg?$AA@		; `string'
EXTRN	@MakePlrPath@16:NEAR
EXTRN	_SNetReceiveMessage@12:NEAR
EXTRN	_abs:NEAR
EXTRN	_pkt_counter:DWORD
EXTRN	@FixPlrWalkTags@4:NEAR
EXTRN	_currlevel:BYTE
EXTRN	_dPlayer:BYTE
;	COMDAT ??_C@_0P@PLMD@SNetReceiveMsg?$AA@
_DATA	SEGMENT
??_C@_0P@PLMD@SNetReceiveMsg?$AA@ DB 'SNetReceiveMsg', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT _multi_process_network_packets
_TEXT	SEGMENT
_pkt$ = -12
_len$ = -8
_arglist$ = -4
_multi_process_network_packets PROC NEAR		; COMDAT
; Line 433
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 454
	call	_multi_clear_left_tbl
; Line 455
	call	_multi_process_tmsgs
; Line 457
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	eax, DWORD PTR _pkt$[ebp]
	push	eax
	lea	eax, DWORD PTR _arglist$[ebp]
	push	eax
	call	_SNetReceiveMessage@12
	test	eax, eax
	je	$L85227
	push	ebx
	push	esi
	push	edi
$L85225:
; Line 459
	inc	DWORD PTR _pkt_counter
; Line 460
	call	_multi_clear_left_tbl
; Line 462
	mov	ecx, DWORD PTR _pkt$[ebp]
; Line 466
	cmp	DWORD PTR _len$[ebp], 19		; 00000013H
	mov	edi, ecx
	jb	$L85226
	mov	edx, DWORD PTR _arglist$[ebp]
	cmp	edx, 4
	jae	$L85226
	cmp	WORD PTR [ecx+15], 26992		; 00006970H
	jne	$L85226
	movzx	eax, WORD PTR [ecx+17]
	cmp	eax, DWORD PTR _len$[ebp]
	jne	$L85226
; Line 469
	mov	eax, edx
	imul	eax, 21720				; 000054d8H
	movzx	esi, BYTE PTR [ecx]
	cmp	edx, DWORD PTR _myplr
	mov	DWORD PTR _plr[eax+80], esi
; Line 470
	lea	esi, DWORD PTR [ecx+1]
; Line 471
	movzx	ebx, BYTE PTR [esi]
	mov	DWORD PTR _plr[eax+84], ebx
; Line 472
	je	$L85250
; Line 474
	mov	edx, DWORD PTR [ecx+4]
	cmp	BYTE PTR _gbBufferMsgs, 1
	mov	DWORD PTR _plr[eax+408], edx
; Line 475
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _plr[eax+412], edx
; Line 476
	movzx	edx, BYTE PTR [ecx+12]
	mov	DWORD PTR _plr[eax+360], edx
; Line 477
	movzx	edx, BYTE PTR [ecx+13]
	mov	DWORD PTR _plr[eax+368], edx
; Line 478
	movzx	edx, BYTE PTR [ecx+14]
	mov	DWORD PTR _plr[eax+376], edx
; Line 479
	je	$L85250
	cmp	BYTE PTR _plr[eax+29], 0
	je	$L85250
	cmp	DWORD PTR _plr[eax+408], 0
	je	$L85250
; Line 480
	movzx	edx, BYTE PTR _currlevel
	cmp	edx, DWORD PTR _plr[eax+52]
	jne	$L85243
	cmp	BYTE PTR _plr[eax+319], 0
	jne	$L85243
; Line 488
	movzx	ecx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _plr[eax+56]
	sub	eax, ecx
	push	eax
	call	_abs
	mov	ebx, eax
; Line 489
	mov	eax, DWORD PTR _arglist$[ebp]
	imul	eax, 21720				; 000054d8H
	movzx	ecx, BYTE PTR [esi]
	mov	eax, DWORD PTR _plr[eax+60]
	sub	eax, ecx
	push	eax
	call	_abs
	pop	ecx
; Line 490
	cmp	ebx, 3
	pop	ecx
	jg	SHORT $L85257
	cmp	eax, 3
	jle	$L85256
$L85257:
	movzx	eax, BYTE PTR [edi]
	movzx	ecx, BYTE PTR [esi]
	imul	eax, 112				; 00000070H
	cmp	BYTE PTR _dPlayer[eax+ecx], 0
	jne	SHORT $L85256
; Line 491
	mov	ecx, DWORD PTR _arglist$[ebp]
	call	@FixPlrWalkTags@4
; Line 494
	mov	ecx, DWORD PTR _arglist$[ebp]
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[eax+56]
	mov	DWORD PTR _plr[eax+88], edx
; Line 495
	mov	edx, DWORD PTR _plr[eax+60]
	mov	DWORD PTR _plr[eax+92], edx
; Line 496
	call	@FixPlrWalkTags@4
; Line 498
	mov	eax, DWORD PTR _arglist$[ebp]
	imul	eax, 21720				; 000054d8H
	movzx	ecx, BYTE PTR [edi]
	mov	DWORD PTR _plr[eax+56], ecx
; Line 502
	mov	edx, DWORD PTR _plr[eax+56]
	movzx	ecx, BYTE PTR [esi]
	mov	DWORD PTR _plr[eax+60], ecx
	movzx	ecx, BYTE PTR [edi]
	mov	DWORD PTR _plr[eax+64], ecx
	movzx	ecx, BYTE PTR [esi]
	mov	DWORD PTR _plr[eax+68], ecx
	mov	cl, BYTE PTR _arglist$[ebp]
	inc	cl
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _plr[eax+60]
	mov	BYTE PTR _dPlayer[edx+eax], cl
$L85256:
; Line 504
	mov	eax, DWORD PTR _arglist$[ebp]
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+64]
	sub	ecx, DWORD PTR _plr[eax+56]
	push	ecx
	call	_abs
	mov	esi, eax
; Line 505
	mov	eax, DWORD PTR _arglist$[ebp]
	imul	eax, 21720				; 000054d8H
	mov	ecx, DWORD PTR _plr[eax+68]
	sub	ecx, DWORD PTR _plr[eax+60]
	push	ecx
	call	_abs
	pop	ecx
; Line 507
	cmp	esi, 1
	pop	ecx
	mov	ecx, DWORD PTR _arglist$[ebp]
	jg	SHORT $L85273
	cmp	eax, 1
	jle	SHORT $L85272
$L85273:
; Line 509
	mov	eax, ecx
	imul	eax, 21720				; 000054d8H
	mov	edx, DWORD PTR _plr[eax+56]
	mov	DWORD PTR _plr[eax+64], edx
; Line 510
	mov	edx, DWORD PTR _plr[eax+60]
	mov	DWORD PTR _plr[eax+68], edx
$L85272:
; Line 512
	movzx	eax, BYTE PTR [edi+3]
	movzx	edx, BYTE PTR [edi+2]
	push	1
	push	eax
	call	@MakePlrPath@16
	jmp	SHORT $L85250
$L85243:
; Line 481
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _plr[eax+56], edx
; Line 482
	movzx	edx, BYTE PTR [esi]
	mov	DWORD PTR _plr[eax+60], edx
; Line 483
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _plr[eax+64], edx
; Line 484
	movzx	edx, BYTE PTR [esi]
	mov	DWORD PTR _plr[eax+68], edx
; Line 485
	movzx	edx, BYTE PTR [ecx+2]
	mov	DWORD PTR _plr[eax+72], edx
; Line 486
	movzx	ecx, BYTE PTR [ecx+3]
	mov	DWORD PTR _plr[eax+76], ecx
$L85250:
; Line 516
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _arglist$[ebp]
	add	eax, -19				; ffffffedH
	lea	edx, DWORD PTR [edi+19]
	push	eax
	call	@multi_handle_all_packets@12
$L85226:
; Line 519
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	eax, DWORD PTR _pkt$[ebp]
	push	eax
	lea	eax, DWORD PTR _arglist$[ebp]
	push	eax
	call	_SNetReceiveMessage@12
	test	eax, eax
	jne	$L85225
	pop	edi
	pop	esi
	pop	ebx
$L85227:
; Line 521
	call	_SErrGetLastError@0
	cmp	eax, -2062548885			; 8510006bH
	je	SHORT $L85282
; Line 522
	mov	ecx, OFFSET FLAT:??_C@_0P@PLMD@SNetReceiveMsg?$AA@ ; `string'
	call	@nthread_terminate_game@4
$L85282:
; Line 523
	leave
	ret	0
_multi_process_network_packets ENDP
_TEXT	ENDS
EXTRN	@ParseCmd@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT @multi_handle_all_packets@12
_TEXT	SEGMENT
_a3$ = 8
@multi_handle_all_packets@12 PROC NEAR			; COMDAT
; _players$ = ecx
; _packet$ = edx
; Line 534
	cmp	DWORD PTR _a3$[esp-4], 0
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	je	SHORT $L85670
$L85295:
; Line 535
	mov	edx, esi
	mov	ecx, edi
	call	@ParseCmd@8
; Line 536
	test	eax, eax
	je	SHORT $L85670
; Line 538
	add	esi, eax
	sub	DWORD PTR _a3$[esp+4], eax
	jne	SHORT $L85295
$L85670:
	pop	edi
	pop	esi
; Line 540
	ret	4
@multi_handle_all_packets@12 ENDP
_TEXT	ENDS
EXTRN	@tmsg_get@8:NEAR
; Function compile flags: /Ogsy
;	COMDAT _multi_process_tmsgs
_TEXT	SEGMENT
_pkt$ = -512
_multi_process_tmsgs PROC NEAR				; COMDAT
; Line 543
	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
$L85303:
; Line 548
	mov	edx, 512				; 00000200H
	lea	ecx, DWORD PTR _pkt$[ebp]
	call	@tmsg_get@8
; Line 549
	test	eax, eax
	je	SHORT $L85676
; Line 551
	mov	ecx, DWORD PTR _myplr
	push	eax
	lea	edx, DWORD PTR _pkt$[ebp]
	call	@multi_handle_all_packets@12
	jmp	SHORT $L85303
$L85676:
; Line 553
	leave
	ret	0
_multi_process_tmsgs ENDP
_TEXT	ENDS
PUBLIC	@multi_send_zero_packet@16
PUBLIC	??_C@_0BB@CLIL@SNetSendMessage2?$AA@		; `string'
EXTRN	_gdwLargestMsgSize:DWORD
;	COMDAT ??_C@_0BB@CLIL@SNetSendMessage2?$AA@
_DATA	SEGMENT
??_C@_0BB@CLIL@SNetSendMessage2?$AA@ DB 'SNetSendMessage2', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @multi_send_zero_packet@16
_TEXT	SEGMENT
_pnum$ = -8
_a2$ = -4
_pbSrc$ = 8
_dwLen$ = 12
_pkt$ = -520
@multi_send_zero_packet@16 PROC NEAR			; COMDAT
; _pnum$ = ecx
; _a2$ = dl
; Line 556
	push	ebp
	mov	ebp, esp
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
; Line 564
	mov	edi, DWORD PTR _dwLen$[ebp]
; Line 567
	xor	ebx, ebx
	mov	BYTE PTR _a2$[ebp], dl
	mov	DWORD PTR _pnum$[ebp], ecx
	xor	esi, esi
	jmp	$L85684
$L85324:
; Line 570
	mov	al, BYTE PTR _a2$[ebp]
	mov	WORD PTR _pkt$[ebp+15], 26992		; 00006970H
	mov	BYTE PTR _pkt$[ebp+19], al
; Line 571
	mov	eax, DWORD PTR _gdwLargestMsgSize
; Line 572
	mov	BYTE PTR _pkt$[ebp], bl
; Line 573
	mov	BYTE PTR _pkt$[ebp+1], bl
	lea	ecx, DWORD PTR [eax-24]
; Line 582
	add	eax, -24				; ffffffe8H
	cmp	edi, eax
	mov	BYTE PTR _pkt$[ebp+2], bl
	mov	BYTE PTR _pkt$[ebp+3], bl
	mov	DWORD PTR _pkt$[ebp+4], ebx
	mov	DWORD PTR _pkt$[ebp+8], ebx
	mov	BYTE PTR _pkt$[ebp+12], bl
	mov	BYTE PTR _pkt$[ebp+13], bl
	mov	BYTE PTR _pkt$[ebp+14], bl
	mov	WORD PTR _pkt$[ebp+20], si
	jae	SHORT $L85327
; Line 583
	mov	ecx, edi
$L85327:
; Line 585
	movzx	eax, cx
	push	eax
	lea	eax, DWORD PTR _pkt$[ebp+24]
	push	DWORD PTR _pbSrc$[ebp]
	mov	WORD PTR _pkt$[ebp+22], cx
	push	eax
	call	_memcpy
; Line 586
	mov	eax, DWORD PTR _pkt$[ebp+22]
	add	esp, 12					; 0000000cH
	add	eax, 24					; 00000018H
	mov	WORD PTR _pkt$[ebp+17], ax
; Line 587
	movzx	eax, WORD PTR _pkt$[ebp+22]
	add	eax, 24					; 00000018H
	push	eax
	lea	eax, DWORD PTR _pkt$[ebp]
	push	eax
	push	DWORD PTR _pnum$[ebp]
	call	_SNetSendMessage@12
	test	eax, eax
	je	SHORT $L85681
; Line 591
	movzx	eax, WORD PTR _pkt$[ebp+22]
	add	DWORD PTR _pbSrc$[ebp], eax
; Line 592
	sub	edi, eax
; Line 593
	add	esi, DWORD PTR _pkt$[ebp+22]
$L85684:
; Line 568
	cmp	edi, ebx
	jne	$L85324
; Line 587
	jmp	SHORT $L85325
$L85681:
; Line 588
	mov	ecx, OFFSET FLAT:??_C@_0BB@CLIL@SNetSendMessage2?$AA@ ; `string'
	call	@nthread_terminate_game@4
$L85325:
	pop	edi
	pop	esi
	pop	ebx
; Line 595
	leave
	ret	8
@multi_send_zero_packet@16 ENDP
_TEXT	ENDS
PUBLIC	_NetClose
PUBLIC	@multi_event_handler@4
EXTRN	_dthread_cleanup:NEAR
EXTRN	_tmsg_cleanup:NEAR
EXTRN	_SNetLeaveGame@4:NEAR
EXTRN	__imp__Sleep@4:NEAR
EXTRN	_msgcmd_cmd_cleanup:NEAR
EXTRN	_nthread_cleanup:NEAR
; Function compile flags: /Ogsy
;	COMDAT _NetClose
_TEXT	SEGMENT
_NetClose PROC NEAR					; COMDAT
; Line 600
	cmp	DWORD PTR _sgbNetInited, 0
	je	SHORT $L85340
; Line 601
	and	DWORD PTR _sgbNetInited, 0
; Line 602
	call	_nthread_cleanup
; Line 603
	call	_dthread_cleanup
; Line 604
	call	_tmsg_cleanup
; Line 605
	xor	ecx, ecx
	call	@multi_event_handler@4
; Line 606
	push	3
	call	_SNetLeaveGame@4
; Line 607
	call	_msgcmd_cmd_cleanup
; Line 608
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L85340
; Line 609
	push	2000					; 000007d0H
	call	DWORD PTR __imp__Sleep@4
$L85340:
; Line 611
	ret	0
_NetClose ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@PFBL@SNetRegisterEventHandler?3?6?$CFs?$AA@ ; `string'
PUBLIC	_multi_handle_events@4
EXTRN	_SNetUnregisterEventHandler@8:NEAR
EXTRN	_SNetRegisterEventHandler@8:NEAR
EXTRN	_TraceLastError:NEAR
EXTRN	_TermMsg:NEAR
;	COMDAT ??_C@_0BN@PFBL@SNetRegisterEventHandler?3?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BN@PFBL@SNetRegisterEventHandler?3?6?$CFs?$AA@ DB 'SNetRegisterEve'
	DB	'ntHandler:', 0aH, '%s', 00H			; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @multi_event_handler@4
_TEXT	SEGMENT
@multi_event_handler@4 PROC NEAR			; COMDAT
; _a1$ = ecx
; Line 616
	push	ebx
	push	ebp
	mov	ebp, ecx
	push	esi
	push	edi
; Line 624
	mov	edi, OFFSET FLAT:_SNetRegisterEventHandler@8
; Line 625
	test	ebp, ebp
	jne	SHORT $L85352
; Line 626
	mov	edi, OFFSET FLAT:_SNetUnregisterEventHandler@8
$L85352:
; Line 635
	xor	esi, esi
$L85353:
; Line 629
	push	OFFSET FLAT:_multi_handle_events@4
	push	DWORD PTR _event_types[esi]
	call	edi
	mov	ebx, eax
; Line 630
	test	ebx, ebx
	jne	SHORT $L85357
	test	ebp, ebp
	je	SHORT $L85357
; Line 631
	call	_TraceLastError
; Line 632
	push	eax
	push	OFFSET FLAT:??_C@_0BN@PFBL@SNetRegisterEventHandler?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85357:
; Line 635
	add	esi, 4
	cmp	esi, 12					; 0000000cH
	jb	SHORT $L85353
	pop	edi
	pop	esi
; Line 636
	mov	al, bl
	pop	ebp
	pop	ebx
; Line 637
	ret	0
@multi_event_handler@4 ENDP
_TEXT	ENDS
EXTRN	@ErrorPlrMsg@4:NEAR
EXTRN	@dthread_remove_player@4:NEAR
; Function compile flags: /Ogsy
;	COMDAT _multi_handle_events@4
_TEXT	SEGMENT
_pEvt$ = 8
_multi_handle_events@4 PROC NEAR			; COMDAT
; Line 640
	push	esi
; Line 645
	mov	esi, DWORD PTR _pEvt$[esp]
	mov	eax, DWORD PTR [esi]
	dec	eax
	je	SHORT $L85369
	dec	eax
	dec	eax
	je	SHORT $L85373
	dec	eax
	jne	$L85366
; Line 668
	mov	ecx, DWORD PTR [esi+8]
	call	@ErrorPlrMsg@4
; Line 669
	jmp	$L85366
$L85373:
; Line 654
	mov	eax, DWORD PTR [esi+4]
	xor	ecx, ecx
	mov	BYTE PTR _sgbPlayerLeftGameTbl[eax], 1
; Line 655
	mov	eax, DWORD PTR [esi+4]
	and	BYTE PTR _sgbPlayerTurnBitTbl[eax], cl
; Line 656
	mov	eax, DWORD PTR [esi+8]
; Line 657
	test	eax, eax
	je	SHORT $L85375
	cmp	DWORD PTR [esi+12], 4
	jb	SHORT $L85375
; Line 658
	mov	ecx, DWORD PTR [eax]
$L85375:
; Line 659
	mov	eax, DWORD PTR [esi+4]
; Line 660
	cmp	ecx, 1073741828				; 40000004H
	mov	DWORD PTR _sgdwPlayerLeftReasonTbl[eax*4], ecx
	jne	SHORT $L85376
; Line 661
	mov	BYTE PTR _gbSomebodyWonGameKludge, 1
$L85376:
; Line 662
	mov	eax, DWORD PTR [esi+4]
	and	BYTE PTR _sgbSendDeltaTbl[eax], 0
; Line 663
	mov	ecx, DWORD PTR [esi+4]
	call	@dthread_remove_player@4
; Line 664
	movzx	eax, BYTE PTR _gbDeltaSender
	cmp	eax, DWORD PTR [esi+4]
	jne	SHORT $L85366
; Line 665
	mov	BYTE PTR _gbDeltaSender, 4
; Line 666
	jmp	SHORT $L85366
$L85369:
; Line 647
	mov	eax, DWORD PTR [esi+8]
; Line 648
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sgGameInitInfo, ecx
; Line 649
	mov	al, BYTE PTR [eax+4]
	mov	BYTE PTR _sgGameInitInfo+4, al
; Line 650
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR _sgbPlayerTurnBitTbl[eax], 1
$L85366:
	pop	esi
; Line 671
	ret	4
_multi_handle_events@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@DLEH@Diablo?5Retail?$AA@		; `string'
PUBLIC	??_C@_0BB@EFIK@SNetGetGameInfo1?$AA@		; `string'
PUBLIC	??_C@_0BB@LKDD@SNetGetGameInfo2?$AA@		; `string'
PUBLIC	@NetInit@8
PUBLIC	@buffer_init@4
PUBLIC	@multi_send_pinfo@8
PUBLIC	@InitNewSeed@4
PUBLIC	_SetupLocalCoords
PUBLIC	@multi_init_single@12
PUBLIC	@multi_init_multi@16
EXTRN	_sync_clear_pkt:NEAR
EXTRN	_InitPlrMsg:NEAR
EXTRN	_dthread_start:NEAR
EXTRN	_SNetGetGameInfo@16:NEAR
EXTRN	_gnLevelTypeTbl:BYTE
EXTRN	_glSeedTbl:BYTE
EXTRN	_gszVersionNumber:BYTE
EXTRN	_mainmenu_create_hero@8:NEAR
EXTRN	_mainmenu_select_hero_dialog@40:NEAR
EXTRN	_SNetSetBasePlayer@4:NEAR
EXTRN	_UiProfileGetString:NEAR
EXTRN	_UiProfileCallback:NEAR
EXTRN	_UiProfileDraw:NEAR
EXTRN	_UiCategoryCallback@28:NEAR
EXTRN	_UiGetDataCallback@20:NEAR
EXTRN	_UiAuthCallback@28:NEAR
EXTRN	_UiSoundCallback@12:NEAR
EXTRN	_UiMessageBoxCallback@16:NEAR
EXTRN	_UiDrawDescCallback@32:NEAR
EXTRN	_UiCreateGameCallback@24:NEAR
EXTRN	_UiArtCallback@32:NEAR
EXTRN	@SetRndSeed@4:NEAR
EXTRN	_GetRndSeed:NEAR
EXTRN	@nthread_start@4:NEAR
EXTRN	_msg_wait_resync:NEAR
EXTRN	@MI_Dummy@4:NEAR
EXTRN	_delta_init:NEAR
EXTRN	_time:NEAR
EXTRN	_SDrawGetFrameWindow@4:NEAR
EXTRN	_memset:NEAR
EXTRN	_gnDifficulty:DWORD
;	COMDAT ??_C@_0O@DLEH@Diablo?5Retail?$AA@
_DATA	SEGMENT
??_C@_0O@DLEH@Diablo?5Retail?$AA@ DB 'Diablo Retail', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@EFIK@SNetGetGameInfo1?$AA@
_DATA	SEGMENT
??_C@_0BB@EFIK@SNetGetGameInfo1?$AA@ DB 'SNetGetGameInfo1', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LKDD@SNetGetGameInfo2?$AA@
_DATA	SEGMENT
??_C@_0BB@LKDD@SNetGetGameInfo2?$AA@ DB 'SNetGetGameInfo2', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @NetInit@8
_TEXT	SEGMENT
_bSinglePlayer$ = -16
_pfExitProgram$ = -4
_v2$ = -12
_ProgramData$ = -172
_UiData$ = -112
_a2$ = -32
_len$ = -8
@NetInit@8 PROC NEAR					; COMDAT
; _bSinglePlayer$ = ecx
; _pfExitProgram$ = edx
; Line 676
	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	ebx
	push	esi
; Line 692
	xor	ebx, ebx
	push	4
	mov	DWORD PTR _pfExitProgram$[ebp], edx
	mov	DWORD PTR _bSinglePlayer$[ebp], ecx
	mov	DWORD PTR _v2$[ebp], ebx
	pop	esi
$L85395:
; Line 694
	mov	eax, DWORD PTR _pfExitProgram$[ebp]
; Line 695
	xor	ecx, ecx
	mov	DWORD PTR [eax], ebx
	call	@SetRndSeed@4
; Line 696
	push	ebx
	call	_time
	mov	DWORD PTR _sgGameInitInfo, eax
; Line 697
	mov	al, BYTE PTR _gnDifficulty
	mov	BYTE PTR _sgGameInitInfo+4, al
; Line 698
	push	60					; 0000003cH
	lea	eax, DWORD PTR _ProgramData$[ebp]
	push	ebx
	push	eax
	call	_memset
; Line 709
	push	16					; 00000010H
	lea	eax, DWORD PTR _a2$[ebp]
	push	ebx
	push	eax
	mov	DWORD PTR _ProgramData$[ebp], 60	; 0000003cH
	mov	DWORD PTR _ProgramData$[ebp+4], OFFSET FLAT:??_C@_0O@DLEH@Diablo?5Retail?$AA@ ; `string'
	mov	DWORD PTR _ProgramData$[ebp+8], OFFSET FLAT:_gszVersionNumber
	mov	DWORD PTR _ProgramData$[ebp+12], 1146246220 ; 4452544cH
	mov	DWORD PTR _ProgramData$[ebp+16], 42	; 0000002aH
	mov	DWORD PTR _ProgramData$[ebp+24], esi
	mov	DWORD PTR _ProgramData$[ebp+28], OFFSET FLAT:_sgGameInitInfo
	mov	DWORD PTR _ProgramData$[ebp+32], 8
	mov	DWORD PTR _ProgramData$[ebp+40], 15	; 0000000fH
	mov	DWORD PTR _ProgramData$[ebp+56], 1033	; 00000409H
	call	_memset
; Line 711
	push	80					; 00000050H
	lea	eax, DWORD PTR _UiData$[ebp]
	push	ebx
	push	eax
	mov	DWORD PTR _a2$[ebp], 16			; 00000010H
	call	_memset
	add	esp, 40					; 00000028H
; Line 712
	mov	DWORD PTR _UiData$[ebp], 80		; 00000050H
; Line 713
	push	ebx
	call	_SDrawGetFrameWindow@4
	mov	DWORD PTR _UiData$[ebp+8], eax
; Line 714
	mov	DWORD PTR _UiData$[ebp+12], OFFSET FLAT:_UiArtCallback@32
; Line 715
	mov	DWORD PTR _UiData$[ebp+20], OFFSET FLAT:_UiCreateGameCallback@24
; Line 716
	mov	DWORD PTR _UiData$[ebp+24], OFFSET FLAT:_UiDrawDescCallback@32
; Line 717
	mov	DWORD PTR _UiData$[ebp+32], OFFSET FLAT:_UiMessageBoxCallback@16
; Line 718
	mov	DWORD PTR _UiData$[ebp+36], OFFSET FLAT:_UiSoundCallback@12
; Line 719
	mov	DWORD PTR _UiData$[ebp+16], OFFSET FLAT:_UiAuthCallback@28
; Line 720
	mov	DWORD PTR _UiData$[ebp+44], OFFSET FLAT:_UiGetDataCallback@20
; Line 721
	mov	DWORD PTR _UiData$[ebp+48], OFFSET FLAT:_UiCategoryCallback@28
; Line 722
	mov	DWORD PTR _UiData$[ebp+72], OFFSET FLAT:_mainmenu_select_hero_dialog@40
; Line 723
	mov	DWORD PTR _UiData$[ebp+76], OFFSET FLAT:_mainmenu_create_hero@8
; Line 724
	mov	DWORD PTR _UiData$[ebp+68], OFFSET FLAT:_UiProfileDraw
; Line 725
	mov	DWORD PTR _UiData$[ebp+60], OFFSET FLAT:_UiProfileCallback
; Line 726
	call	_UiProfileGetString
; Line 727
	push	esi
	push	ebx
	push	OFFSET FLAT:_sgbPlayerTurnBitTbl
	mov	DWORD PTR _UiData$[ebp+64], eax
	call	_memset
; Line 729
	push	esi
	push	ebx
	push	OFFSET FLAT:_sgbPlayerLeftGameTbl
	mov	BYTE PTR _gbGameDestroyed, bl
	call	_memset
; Line 730
	push	16					; 00000010H
	push	ebx
	push	OFFSET FLAT:_sgdwPlayerLeftReasonTbl
	call	_memset
; Line 731
	push	esi
	push	ebx
	push	OFFSET FLAT:_sgbSendDeltaTbl
	call	_memset
; Line 732
	push	86880					; 00015360H
	push	ebx
	push	OFFSET FLAT:_plr
	call	_memset
; Line 733
	push	8
	push	ebx
	push	OFFSET FLAT:_sgwPackPlrOffsetTbl
	call	_memset
	add	esp, 72					; 00000048H
; Line 734
	push	ebx
	call	_SNetSetBasePlayer@4
; Line 735
	cmp	DWORD PTR _bSinglePlayer$[ebp], ebx
; Line 736
	lea	ecx, DWORD PTR _ProgramData$[ebp]
	lea	edx, DWORD PTR _a2$[ebp]
	lea	eax, DWORD PTR _UiData$[ebp]
	je	SHORT $L85410
	push	eax
	call	@multi_init_single@12
; Line 737
	jmp	SHORT $L85411
$L85410:
; Line 738
	push	DWORD PTR _pfExitProgram$[ebp]
	push	eax
	call	@multi_init_multi@16
$L85411:
; Line 739
	cmp	eax, ebx
	je	$L85699
; Line 741
	mov	DWORD PTR _sgbNetInited, 1
; Line 742
	mov	BYTE PTR _sgbTimeout, bl
; Line 743
	call	_delta_init
; Line 744
	call	_InitPlrMsg
; Line 745
	mov	ecx, OFFSET FLAT:_sgHiPriBuf
	call	@buffer_init@4
; Line 746
	mov	ecx, OFFSET FLAT:_sgLoPriBuf
	call	@buffer_init@4
; Line 747
	mov	DWORD PTR _dword_678628, ebx
; Line 748
	call	_sync_clear_pkt
; Line 749
	mov	eax, DWORD PTR _myplr
	movzx	ecx, BYTE PTR _sgbPlayerTurnBitTbl[eax]
	call	@nthread_start@4
; Line 750
	call	_dthread_start
; Line 751
	xor	ecx, ecx
	call	@MI_Dummy@4
; Line 754
	mov	al, BYTE PTR _myplr
; Line 756
	xor	edx, edx
	xor	ecx, ecx
	mov	DWORD PTR _sgdwGameLoops, ebx
	mov	DWORD PTR _sgbSentThisCycle, ebx
	mov	BYTE PTR _gbDeltaSender, al
	mov	BYTE PTR _gbSomebodyWonGameKludge, bl
	call	@nthread_send_and_recv_turn@8
; Line 757
	call	_SetupLocalCoords
; Line 758
	push	-2					; fffffffeH
	mov	dl, 54					; 00000036H
	pop	ecx
	call	@multi_send_pinfo@8
; Line 761
	mov	eax, DWORD PTR _myplr
	mov	BYTE PTR _gbActivePlayers, 1
	mov	ecx, eax
	imul	ecx, 21720				; 000054d8H
	cmp	BYTE PTR _sgbPlayerTurnBitTbl[eax], bl
	mov	BYTE PTR _plr[ecx+29], 1
; Line 762
	je	SHORT $L85700
	call	_msg_wait_resync
	test	eax, eax
	jne	SHORT $L85700
; Line 764
	call	_NetClose
; Line 765
	mov	BYTE PTR _byte_678640, bl
	jmp	$L85395
$L85699:
; Line 740
	xor	eax, eax
	jmp	$L85384
$L85700:
; Line 767
	movzx	eax, BYTE PTR _sgGameInitInfo+4
; Line 768
	mov	ecx, DWORD PTR _sgGameInitInfo
	mov	DWORD PTR _gnDifficulty, eax
	call	@SetRndSeed@4
	mov	esi, DWORD PTR _v2$[ebp]
$L85416:
; Line 770
	call	_GetRndSeed
; Line 771
	mov	ecx, esi
	mov	DWORD PTR _glSeedTbl[esi*4], eax
	call	@InitNewSeed@4
	mov	DWORD PTR _gnLevelTypeTbl[esi*4], eax
; Line 772
	inc	esi
; Line 773
	cmp	esi, 17					; 00000011H
	jl	SHORT $L85416
; Line 775
	lea	eax, DWORD PTR _len$[ebp]
	mov	esi, 128				; 00000080H
	push	eax
	push	esi
	push	OFFSET FLAT:_szPlayerName
	push	1
	call	_SNetGetGameInfo@16
	test	eax, eax
	jne	SHORT $L85419
; Line 776
	mov	ecx, OFFSET FLAT:??_C@_0BB@EFIK@SNetGetGameInfo1?$AA@ ; `string'
	call	@nthread_terminate_game@4
$L85419:
; Line 778
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	push	esi
	push	OFFSET FLAT:_szPlayerDescript
	push	2
	call	_SNetGetGameInfo@16
	test	eax, eax
	jne	SHORT $L85421
; Line 779
	mov	ecx, OFFSET FLAT:??_C@_0BB@LKDD@SNetGetGameInfo2?$AA@ ; `string'
	call	@nthread_terminate_game@4
$L85421:
; Line 780
	xor	eax, eax
	inc	eax
$L85384:
	pop	esi
	pop	ebx
; Line 781
	leave
	ret	0
@NetInit@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @buffer_init@4
_TEXT	SEGMENT
@buffer_init@4 PROC NEAR				; COMDAT
; _pBuf$ = ecx
; Line 792
	and	DWORD PTR [ecx], 0
; Line 793
	and	BYTE PTR [ecx+4], 0
; Line 794
	ret	0
@buffer_init@4 ENDP
_TEXT	ENDS
EXTRN	@dthread_send_delta@16:NEAR
EXTRN	@PackPlayer@12:NEAR
; Function compile flags: /Ogsy
;	COMDAT @multi_send_pinfo@8
_TEXT	SEGMENT
_pkplr$ = -1268
@multi_send_pinfo@8 PROC NEAR				; COMDAT
; _pnum$ = ecx
; _cmd$ = dl
; Line 797
	push	ebp
	mov	ebp, esp
	sub	esp, 1268				; 000004f4H
	push	ebx
	push	esi
	mov	bl, dl
; Line 804
	mov	edx, DWORD PTR _myplr
	mov	esi, ecx
	push	1
	lea	ecx, DWORD PTR _pkplr$[ebp]
	call	@PackPlayer@12
; Line 805
	lea	eax, DWORD PTR _pkplr$[ebp]
	mov	dl, bl
	push	1266					; 000004f2H
	push	eax
	mov	ecx, esi
	call	@dthread_send_delta@16
	pop	esi
	pop	ebx
; Line 806
	leave
	ret	0
@multi_send_pinfo@8 ENDP
; Function compile flags: /Ogsy
_TEXT	ENDS
;	COMDAT @InitNewSeed@4
_TEXT	SEGMENT
@InitNewSeed@4 PROC NEAR				; COMDAT
; _newseed$ = ecx
; Line 812
	xor	eax, eax
; Line 813
	test	ecx, ecx
	je	SHORT $L85445
; Line 814
	inc	eax
; Line 815
	cmp	ecx, eax
	jl	SHORT $L85440
	cmp	ecx, 4
	jle	SHORT $L85445
$L85440:
; Line 816
	cmp	ecx, 5
	jl	SHORT $L85442
	cmp	ecx, 8
	jg	SHORT $L85442
; Line 822
	push	2
; Line 818
	pop	eax
; Line 827
	ret	0
$L85442:
; Line 817
	cmp	ecx, 9
	jl	SHORT $L85444
	cmp	ecx, 12					; 0000000cH
	jg	SHORT $L85444
; Line 820
	push	3
; Line 818
	pop	eax
; Line 827
	ret	0
$L85444:
; Line 818
	push	4
	pop	eax
$L85445:
; Line 827
	ret	0
@InitNewSeed@4 ENDP
_TEXT	ENDS
EXTRN	_setlevel:BYTE
EXTRN	_plrxoff:BYTE
EXTRN	_plryoff:BYTE
EXTRN	_leveldebug:DWORD
EXTRN	_leveltype:BYTE
; Function compile flags: /Ogsy
;	COMDAT _SetupLocalCoords
_TEXT	SEGMENT
_SetupLocalCoords PROC NEAR				; COMDAT
; Line 830
	push	ebx
; Line 834
	xor	ebx, ebx
	cmp	DWORD PTR _leveldebug, ebx
	je	SHORT $L85452
	cmp	BYTE PTR _gbMaxPlayers, 1
	jbe	SHORT $L85451
$L85452:
; Line 835
	mov	BYTE PTR _currlevel, bl
; Line 836
	mov	BYTE PTR _leveltype, bl
; Line 837
	mov	BYTE PTR _setlevel, bl
$L85451:
; Line 847
	mov	eax, DWORD PTR _myplr
	mov	ecx, DWORD PTR _plrxoff[eax*4]
; Line 848
	mov	edx, DWORD PTR _plryoff[eax*4]
; Line 849
	imul	eax, 21720				; 000054d8H
	add	ecx, 75					; 0000004bH
	add	edx, 68					; 00000044H
	mov	DWORD PTR _plr[eax+56], ecx
; Line 850
	mov	DWORD PTR _plr[eax+60], edx
; Line 851
	mov	DWORD PTR _plr[eax+64], ecx
; Line 852
	mov	DWORD PTR _plr[eax+68], edx
; Line 853
	mov	DWORD PTR _plr[eax+72], ecx
; Line 854
	mov	DWORD PTR _plr[eax+76], edx
; Line 855
	movzx	ecx, BYTE PTR _currlevel
	mov	DWORD PTR _plr[eax+52], ecx
; Line 856
	mov	BYTE PTR _plr[eax+319], 1
; Line 857
	mov	BYTE PTR _plr[eax+21626], bl
; Line 858
	mov	DWORD PTR _plr[eax], 10			; 0000000aH
; Line 859
	or	DWORD PTR _plr[eax+32], -1
	pop	ebx
; Line 860
	ret	0
_SetupLocalCoords ENDP
_TEXT	ENDS
PUBLIC	??_C@_05PDHF@local?$AA@				; `string'
PUBLIC	??_C@_0BE@KBMM@SNetCreateGame1?3?6?$CFs?$AA@	; `string'
EXTRN	_SNetCreateGame@40:NEAR
EXTRN	_fileinfo:BYTE
EXTRN	_SNetInitializeProvider@20:NEAR
;	COMDAT ??_C@_05PDHF@local?$AA@
_DATA	SEGMENT
??_C@_05PDHF@local?$AA@ DB 'local', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@KBMM@SNetCreateGame1?3?6?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BE@KBMM@SNetCreateGame1?3?6?$CFs?$AA@ DB 'SNetCreateGame1:', 0aH, '%'
	DB	's', 00H					; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @multi_init_single@12
_TEXT	SEGMENT
_ui_info$ = 8
_unused$ = 8
@multi_init_single@12 PROC NEAR				; COMDAT
; _client_info$ = ecx
; _user_info$ = edx
; Line 866
	push	ebp
	mov	ebp, esp
; Line 869
	push	OFFSET FLAT:_fileinfo
	push	DWORD PTR _ui_info$[ebp]
	push	edx
	push	ecx
	push	0
	call	_SNetInitializeProvider@20
	test	eax, eax
	jne	SHORT $L85461
; Line 870
	call	_SErrGetLastError@0
; Line 871
	xor	eax, eax
	jmp	SHORT $L85459
$L85461:
; Line 875
	lea	eax, DWORD PTR _unused$[ebp]
	and	DWORD PTR _unused$[ebp], 0
	push	eax
	mov	eax, OFFSET FLAT:??_C@_05PDHF@local?$AA@ ; `string'
	push	eax
	push	eax
	push	1
	push	8
	push	OFFSET FLAT:_sgGameInitInfo
	push	0
	push	eax
	push	eax
	push	eax
	call	_SNetCreateGame@40
	test	eax, eax
	jne	SHORT $L85463
; Line 876
	call	_TraceLastError
	push	eax
	push	OFFSET FLAT:??_C@_0BE@KBMM@SNetCreateGame1?3?6?$CFs?$AA@ ; `string'
	call	_TermMsg
	pop	ecx
	pop	ecx
$L85463:
; Line 879
	and	DWORD PTR _myplr, 0
; Line 882
	xor	eax, eax
	mov	BYTE PTR _gbMaxPlayers, 1
	inc	eax
$L85459:
; Line 883
	pop	ebp
	ret	4
@multi_init_single@12 ENDP
_TEXT	ENDS
PUBLIC	@multi_upgrade@4
EXTRN	_pfile_read_player_from_save:NEAR
EXTRN	_UiSelectGame@24:NEAR
EXTRN	_UiSelectProvider@24:NEAR
; Function compile flags: /Ogsy
;	COMDAT @multi_init_multi@16
_TEXT	SEGMENT
_client_info$ = -8
_ui_info$ = 8
_pfExitProgram$ = 12
_playerId$ = -12
_type$ = -4
@multi_init_multi@16 PROC NEAR				; COMDAT
; _client_info$ = ecx
; _user_info$ = edx
; Line 887
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 892
	xor	edi, edi
	mov	ebx, edx
	mov	DWORD PTR _client_info$[ebp], ecx
	inc	edi
	mov	esi, OFFSET FLAT:_fileinfo
$L85478:
; Line 893
	and	DWORD PTR _type$[ebp], 0
; Line 894
	cmp	BYTE PTR _byte_678640, 0
	je	SHORT $L85484
; Line 896
	lea	eax, DWORD PTR _type$[ebp]
	push	eax
	push	esi
	push	DWORD PTR _ui_info$[ebp]
	push	ebx
	push	DWORD PTR _client_info$[ebp]
	push	0
	call	_UiSelectProvider@24
	test	eax, eax
	jne	SHORT $L85482
	test	edi, edi
	je	SHORT $L85483
	call	_SErrGetLastError@0
	cmp	eax, -2062548873			; 85100077H
	jne	SHORT $L85483
	mov	ecx, DWORD PTR _pfExitProgram$[ebp]
	call	@multi_upgrade@4
	test	eax, eax
	je	SHORT $L85483
$L85482:
; Line 899
	cmp	DWORD PTR _type$[ebp], 1112425812	; 424e4554H
	jne	SHORT $L85484
; Line 900
	mov	BYTE PTR _plr+21627, 1
$L85484:
; Line 903
	xor	ecx, ecx
	inc	ecx
	call	@multi_event_handler@4
; Line 904
	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	push	esi
	push	DWORD PTR _ui_info$[ebp]
	push	ebx
	push	DWORD PTR _client_info$[ebp]
	push	1
	call	_UiSelectGame@24
	test	eax, eax
	jne	SHORT $L85721
; Line 907
	mov	BYTE PTR _byte_678640, 1
	xor	edi, edi
	jmp	SHORT $L85478
$L85483:
; Line 897
	xor	eax, eax
	jmp	SHORT $L85488
$L85721:
; Line 910
	mov	eax, DWORD PTR _playerId$[ebp]
	cmp	eax, 4
; Line 911
	jae	SHORT $L85483
; Line 913
	mov	DWORD PTR _myplr, eax
; Line 914
	mov	BYTE PTR _gbMaxPlayers, 4
; Line 916
	call	_pfile_read_player_from_save
; Line 918
	cmp	DWORD PTR _type$[ebp], 1112425812	; 424e4554H
	jne	SHORT $L85489
; Line 919
	mov	eax, DWORD PTR _myplr
	imul	eax, 21720				; 000054d8H
	mov	BYTE PTR _plr[eax+21627], 1
$L85489:
; Line 921
	xor	eax, eax
	inc	eax
$L85488:
	pop	edi
	pop	esi
	pop	ebx
; Line 923
	leave
	ret	8
@multi_init_multi@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@KHEP@Network?5upgrade?5failed?$AA@	; `string'
EXTRN	_SNetPerformUpgrade@4:NEAR
EXTRN	_DrawDlg:NEAR
;	COMDAT ??_C@_0BH@KHEP@Network?5upgrade?5failed?$AA@
_DATA	SEGMENT
??_C@_0BH@KHEP@Network?5upgrade?5failed?$AA@ DB 'Network upgrade failed', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @multi_upgrade@4
_TEXT	SEGMENT
_status$ = -4
@multi_upgrade@4 PROC NEAR				; COMDAT
; _pfExitProgram$ = ecx
; Line 928
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 932
	lea	eax, DWORD PTR _status$[ebp]
	push	esi
	push	eax
	mov	esi, ecx
	call	_SNetPerformUpgrade@4
; Line 934
	mov	ecx, DWORD PTR _status$[ebp]
	xor	eax, eax
	inc	eax
	test	ecx, ecx
	je	SHORT $L85496
	cmp	ecx, eax
	je	SHORT $L85496
; Line 935
	cmp	ecx, 2
	je	SHORT $L85497
; Line 936
	cmp	ecx, -1
	jne	SHORT $L85500
; Line 937
	push	OFFSET FLAT:??_C@_0BH@KHEP@Network?5upgrade?5failed?$AA@ ; `string'
	call	_DrawDlg
	pop	ecx
; Line 939
	jmp	SHORT $L85500
$L85497:
; Line 940
	mov	DWORD PTR [esi], eax
$L85500:
; Line 943
	xor	eax, eax
$L85496:
	pop	esi
; Line 947
	leave
	ret	0
@multi_upgrade@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@ ; `string'
PUBLIC	??_C@_0CO@KLEL@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5is?5alread@ ; `string'
PUBLIC	@multi_player_joins@12
EXTRN	_dFlags:BYTE
EXTRN	@SyncInitPlr@4:NEAR
EXTRN	@UnPackPlayer@12:NEAR
EXTRN	@LoadPlrGFX@8:NEAR
EXTRN	@NewPlrAnim@20:NEAR
EXTRN	@StartStand@8:NEAR
;	COMDAT ??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@
_DATA	SEGMENT
??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@ DB 'P'
	DB	'layer ''%s'' (level %d) just joined the game', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CO@KLEL@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5is?5alread@
_DATA	SEGMENT
??_C@_0CO@KLEL@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5is?5alread@ DB 'P'
	DB	'layer ''%s'' (level %d) is already in the game', 00H ; `string'
; Function compile flags: /Ogsy
_DATA	ENDS
;	COMDAT @multi_player_joins@12
_TEXT	SEGMENT
_a3$ = 8
@multi_player_joins@12 PROC NEAR			; COMDAT
; _pnum$ = ecx
; _cmd$ = edx
; Line 950
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 965
	cmp	DWORD PTR _myplr, edi
	mov	ebx, edx
	je	$L85533
; Line 967
	movzx	ecx, WORD PTR [ebx+1]
	lea	esi, DWORD PTR _sgwPackPlrOffsetTbl[edi*2]
	movsx	eax, WORD PTR [esi]
	cmp	eax, ecx
	je	SHORT $L85521
	and	WORD PTR [esi], 0
	cmp	WORD PTR [ebx+1], 0
	jne	$L85533
$L85521:
; Line 968
	cmp	DWORD PTR _a3$[ebp], 0
	jne	SHORT $L85522
	cmp	WORD PTR [esi], 0
	jne	SHORT $L85522
; Line 969
	mov	dl, 2
	mov	ecx, edi
	call	@multi_send_pinfo@8
$L85522:
; Line 971
	movzx	ecx, WORD PTR [ebx+3]
	mov	eax, edi
	push	ecx
	imul	eax, 1266				; 000004f2H
	lea	ecx, DWORD PTR [ebx+5]
	mov	DWORD PTR -4+[ebp], eax
	push	ecx
	movzx	ecx, WORD PTR [ebx+1]
	lea	eax, DWORD PTR _netplr[ecx+eax]
	push	eax
	call	_memcpy
; Line 972
	mov	ax, WORD PTR [ebx+3]
	add	esp, 12					; 0000000cH
	add	WORD PTR [esi], ax
; Line 973
	cmp	WORD PTR [esi], 1266			; 000004f2H
	jne	$L85533
; Line 974
	xor	ebx, ebx
; Line 975
	xor	edx, edx
	mov	ecx, edi
	mov	WORD PTR [esi], bx
	call	@multi_player_left_msg@8
; Line 977
	mov	esi, edi
; Line 978
	mov	eax, DWORD PTR -4+[ebp]
	imul	esi, 21720				; 000054d8H
	push	1
	lea	ecx, DWORD PTR _netplr[eax]
	mov	edx, edi
	mov	DWORD PTR _plr[esi+536], ebx
	call	@UnPackPlayer@12
; Line 979
	cmp	DWORD PTR _a3$[ebp], ebx
	je	$L85533
; Line 980
	inc	BYTE PTR _gbActivePlayers
; Line 981
	cmp	BYTE PTR _sgbPlayerTurnBitTbl[edi], bl
; Line 982
	mov	BYTE PTR _plr[esi+29], 1
; Line 983
	mov	eax, OFFSET FLAT:??_C@_0CM@FJAN@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5just?5join@ ; `string'
; Line 984
	jne	SHORT $L85529
; Line 985
	mov	eax, OFFSET FLAT:??_C@_0CO@KLEL@Player?5?8?$CFs?8?5?$CIlevel?5?$CFd?$CJ?5is?5alread@ ; `string'
$L85529:
; Line 986
	movsx	ecx, BYTE PTR _plr[esi+440]
	push	ecx
	lea	ecx, DWORD PTR _plr[esi+320]
	push	ecx
	push	eax
	call	_EventPlrMsg
; Line 987
	xor	edx, edx
	add	esp, 12					; 0000000cH
	inc	edx
	mov	ecx, edi
	call	@LoadPlrGFX@8
; Line 988
	mov	ecx, edi
	call	@SyncInitPlr@4
; Line 989
	movzx	eax, BYTE PTR _currlevel
	cmp	DWORD PTR _plr[esi+52], eax
	jne	SHORT $L85533
; Line 990
	test	DWORD PTR _plr[esi+408], -64		; ffffffc0H
; Line 992
	mov	ecx, edi
	jg	SHORT $L85532
	mov	edx, 128				; 00000080H
	mov	DWORD PTR _plr[esi+120], ebx
	call	@LoadPlrGFX@8
; Line 996
	push	DWORD PTR _plr[esi+848]
	mov	edx, DWORD PTR _plr[esi+812]
	mov	ecx, edi
	mov	DWORD PTR _plr[esi], 8
	push	1
	push	DWORD PTR _plr[esi+844]
	call	@NewPlrAnim@20
; Line 997
	mov	ecx, DWORD PTR _plr[esi+136]
; Line 999
	lea	eax, DWORD PTR [ecx+ecx]
	dec	ecx
	mov	DWORD PTR _plr[esi+496], eax
; Line 1000
	mov	eax, DWORD PTR _plr[esi+56]
; Line 1002
	imul	eax, 112				; 00000070H
	mov	DWORD PTR _plr[esi+140], ecx
	mov	ecx, DWORD PTR _plr[esi+60]
	lea	eax, DWORD PTR _dFlags[ecx+eax]
	or	BYTE PTR [eax], 4
; Line 1003
	jmp	SHORT $L85533
$L85532:
; Line 1004
	xor	edx, edx
	call	@StartStand@8
$L85533:
	pop	edi
	pop	esi
	pop	ebx
; Line 1011
	leave
	ret	4
@multi_player_joins@12 ENDP
_TEXT	ENDS
END
